
Ethernet_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010804  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  08010a04  08010a04  00011a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080135c8  080135c8  000151c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080135c8  080135c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080135d0  080135d0  000151c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080135d0  080135d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080135d4  080135d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080135d8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08013660  00015088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08013700  00015128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008294  200001c8  080137a0  000151c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000845c  080137a0  0001545c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000151c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00023e8f  00000000  00000000  000151f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005fe7  00000000  00000000  00039085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b10  00000000  00000000  0003f070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000156d  00000000  00000000  00040b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003546d  00000000  00000000  000420ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002aa56  00000000  00000000  0007755a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010eba7  00000000  00000000  000a1fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001b0b57  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000776c  00000000  00000000  001b0b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  001b8308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	080109ec 	.word	0x080109ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	080109ec 	.word	0x080109ec

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <AppMain>:
#include "app_main.h"
#include "main.h"
#include "lcd.h"

void AppMain(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

	//test LCD
	lcd_4SPI_init();
 8000612:	f000 f8f1 	bl	80007f8 <lcd_4SPI_init>
	setPageaddressing();
 8000616:	f000 f865 	bl	80006e4 <setPageaddressing>
	lcd_setpage_address(0);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f878 	bl	8000710 <lcd_setpage_address>
	lcd_setcolumn_address(0);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f88f 	bl	8000744 <lcd_setcolumn_address>

		lcd_RAMpixels();
		lcd_ON();
		lcd_OFF();
		*/
		for(int i = 0; i < 8; i++){
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e005      	b.n	8000638 <AppMain+0x2c>
			lcd_writeRAM(0xFF);
 800062c:	20ff      	movs	r0, #255	@ 0xff
 800062e:	f000 f8cd 	bl	80007cc <lcd_writeRAM>
		for(int i = 0; i < 8; i++){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3301      	adds	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b07      	cmp	r3, #7
 800063c:	ddf6      	ble.n	800062c <AppMain+0x20>
		}
		lcd_ON();
 800063e:	f000 f825 	bl	800068c <lcd_ON>
		lcd_OFF();
 8000642:	f000 f839 	bl	80006b8 <lcd_OFF>
		for(int i = 0; i < 8; i++){
 8000646:	e7ee      	b.n	8000626 <AppMain+0x1a>

08000648 <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2108      	movs	r1, #8
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <lcd_transfer+0x3c>)
 8000658:	f002 fa96 	bl	8002b88 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 800065c:	1df9      	adds	r1, r7, #7
 800065e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000662:	2201      	movs	r2, #1
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <lcd_transfer+0x40>)
 8000666:	f003 fdea 	bl	800423e <HAL_SPI_Transmit>
 800066a:	4603      	mov	r3, r0
 800066c:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2108      	movs	r1, #8
 8000672:	4804      	ldr	r0, [pc, #16]	@ (8000684 <lcd_transfer+0x3c>)
 8000674:	f002 fa88 	bl	8002b88 <HAL_GPIO_WritePin>

	return HAL_OK;
 8000678:	2300      	movs	r3, #0

}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000
 8000688:	200001e4 	.word	0x200001e4

0800068c <lcd_ON>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  lcd_ON(void){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 8000692:	23af      	movs	r3, #175	@ 0xaf
 8000694:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	4806      	ldr	r0, [pc, #24]	@ (80006b4 <lcd_ON+0x28>)
 800069c:	f002 fa74 	bl	8002b88 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ffd0 	bl	8000648 <lcd_transfer>
 80006a8:	4603      	mov	r3, r0

}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40020c00 	.word	0x40020c00

080006b8 <lcd_OFF>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  lcd_OFF(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 80006be:	23ae      	movs	r3, #174	@ 0xae
 80006c0:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <lcd_OFF+0x28>)
 80006c8:	f002 fa5e 	bl	8002b88 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffba 	bl	8000648 <lcd_transfer>
 80006d4:	4603      	mov	r3, r0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 80006ea:	2320      	movs	r3, #32
 80006ec:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2180      	movs	r1, #128	@ 0x80
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <setPageaddressing+0x28>)
 80006f4:	f002 fa48 	bl	8002b88 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffa4 	bl	8000648 <lcd_transfer>
 8000700:	4603      	mov	r3, r0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40020c00 	.word	0x40020c00

08000710 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000722:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2180      	movs	r1, #128	@ 0x80
 8000728:	4805      	ldr	r0, [pc, #20]	@ (8000740 <lcd_setpage_address+0x30>)
 800072a:	f002 fa2d 	bl	8002b88 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 800072e:	7bbb      	ldrb	r3, [r7, #14]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff89 	bl	8000648 <lcd_transfer>
 8000736:	4603      	mov	r3, r0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40020c00 	.word	0x40020c00

08000744 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000750:	dc02      	bgt.n	8000758 <lcd_setcolumn_address+0x14>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b00      	cmp	r3, #0
 8000756:	da01      	bge.n	800075c <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	e030      	b.n	80007be <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 8000760:	2310      	movs	r3, #16
 8000762:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	091b      	lsrs	r3, r3, #4
 800076c:	b2db      	uxtb	r3, r3
 800076e:	b25a      	sxtb	r2, r3
 8000770:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000774:	4313      	orrs	r3, r2
 8000776:	b25b      	sxtb	r3, r3
 8000778:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 800077a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	b25a      	sxtb	r2, r3
 8000784:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000788:	4313      	orrs	r3, r2
 800078a:	b25b      	sxtb	r3, r3
 800078c:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <lcd_setcolumn_address+0x84>)
 8000794:	f002 f9f8 	bl	8002b88 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 8000798:	7bbb      	ldrb	r3, [r7, #14]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff54 	bl	8000648 <lcd_transfer>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e009      	b.n	80007be <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 80007aa:	7b7b      	ldrb	r3, [r7, #13]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff4b 	bl	8000648 <lcd_transfer>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020c00 	.word	0x40020c00

080007cc <lcd_writeRAM>:

HAL_StatusTypeDef lcd_writeRAM(uint8_t data){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
	//pull A0 high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2180      	movs	r1, #128	@ 0x80
 80007da:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <lcd_writeRAM+0x28>)
 80007dc:	f002 f9d4 	bl	8002b88 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff30 	bl	8000648 <lcd_transfer>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40020c00 	.word	0x40020c00

080007f8 <lcd_4SPI_init>:

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PA3
HAL_StatusTypeDef lcd_4SPI_init(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2108      	movs	r1, #8
 8000800:	4807      	ldr	r0, [pc, #28]	@ (8000820 <lcd_4SPI_init+0x28>)
 8000802:	f002 f9c1 	bl	8002b88 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2101      	movs	r1, #1
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <lcd_4SPI_init+0x2c>)
 800080c:	f002 f9bc 	bl	8002b88 <HAL_GPIO_WritePin>

	//dummy transmission for SPI
	lcd_ON();
 8000810:	f7ff ff3c 	bl	800068c <lcd_ON>
	lcd_OFF();
 8000814:	f7ff ff50 	bl	80006b8 <lcd_OFF>

	return HAL_OK;
 8000818:	2300      	movs	r3, #0

}
 800081a:	4618      	mov	r0, r3
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40020000 	.word	0x40020000
 8000824:	40020800 	.word	0x40020800

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800082c:	f000 f9fe 	bl	8000c2c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fdad 	bl	800138e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f80e 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f000 f91a 	bl	8000a70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800083c:	f000 f8ba 	bl	80009b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000840:	f000 f8e8 	bl	8000a14 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000844:	f004 ffbe 	bl	80057c4 <MX_LWIP_Init>
  MX_SPI2_Init();
 8000848:	f000 f876 	bl	8000938 <MX_SPI2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AppMain();
 800084c:	f7ff fede 	bl	800060c <AppMain>
 8000850:	e7fc      	b.n	800084c <main+0x24>
	...

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	@ 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2234      	movs	r2, #52	@ 0x34
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f00f fa1f 	bl	800fca6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000878:	f002 fada 	bl	8002e30 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	4b2c      	ldr	r3, [pc, #176]	@ (8000930 <SystemClock_Config+0xdc>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a2b      	ldr	r2, [pc, #172]	@ (8000930 <SystemClock_Config+0xdc>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40
 8000888:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <SystemClock_Config+0xdc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000894:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <SystemClock_Config+0xe0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800089c:	4a25      	ldr	r2, [pc, #148]	@ (8000934 <SystemClock_Config+0xe0>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b23      	ldr	r3, [pc, #140]	@ (8000934 <SystemClock_Config+0xe0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008c8:	2360      	movs	r3, #96	@ 0x60
 80008ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fb07 	bl	8002ef0 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008e8:	f000 f9ce 	bl	8000c88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008ec:	f002 fab0 	bl	8002e50 <HAL_PWREx_EnableOverDrive>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008f6:	f000 f9c7 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2302      	movs	r3, #2
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2103      	movs	r1, #3
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fd98 	bl	800344c <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000922:	f000 f9b1 	bl	8000c88 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	@ 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <MX_SPI2_Init+0x74>)
 800093e:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <MX_SPI2_Init+0x78>)
 8000940:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000942:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000944:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000948:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800094a:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <MX_SPI2_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000952:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000956:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_SPI2_Init+0x74>)
 800095a:	2202      	movs	r2, #2
 800095c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000966:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800096a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_SPI2_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_SPI2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000986:	2207      	movs	r2, #7
 8000988:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_SPI2_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_SPI2_Init+0x74>)
 8000998:	f003 fba6 	bl	80040e8 <HAL_SPI_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 f971 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200001e4 	.word	0x200001e4
 80009b0:	40003800 	.word	0x40003800

080009b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ba:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <MX_USART3_UART_Init+0x5c>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_USART3_UART_Init+0x58>)
 80009f8:	f003 ff20 	bl	800483c <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a02:	f000 f941 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000248 	.word	0x20000248
 8000a10:	40004800 	.word	0x40004800

08000a14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2206      	movs	r2, #6
 8000a24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	f002 f8af 	bl	8002bba <HAL_PCD_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a62:	f000 f911 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200002d0 	.word	0x200002d0

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	@ 0x30
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4b63      	ldr	r3, [pc, #396]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a62      	ldr	r2, [pc, #392]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b60      	ldr	r3, [pc, #384]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a5c      	ldr	r2, [pc, #368]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b5a      	ldr	r3, [pc, #360]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	4b57      	ldr	r3, [pc, #348]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a56      	ldr	r2, [pc, #344]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b54      	ldr	r3, [pc, #336]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b51      	ldr	r3, [pc, #324]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a50      	ldr	r2, [pc, #320]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b4e      	ldr	r3, [pc, #312]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a4a      	ldr	r2, [pc, #296]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b48      	ldr	r3, [pc, #288]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afe:	4b45      	ldr	r3, [pc, #276]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a44      	ldr	r2, [pc, #272]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b42      	ldr	r3, [pc, #264]	@ (8000c14 <MX_GPIO_Init+0x1a4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2101      	movs	r1, #1
 8000b1a:	483f      	ldr	r0, [pc, #252]	@ (8000c18 <MX_GPIO_Init+0x1a8>)
 8000b1c:	f002 f834 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2108      	movs	r1, #8
 8000b24:	483d      	ldr	r0, [pc, #244]	@ (8000c1c <MX_GPIO_Init+0x1ac>)
 8000b26:	f002 f82f 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000b30:	483b      	ldr	r0, [pc, #236]	@ (8000c20 <MX_GPIO_Init+0x1b0>)
 8000b32:	f002 f829 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2140      	movs	r1, #64	@ 0x40
 8000b3a:	483a      	ldr	r0, [pc, #232]	@ (8000c24 <MX_GPIO_Init+0x1b4>)
 8000b3c:	f002 f824 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2180      	movs	r1, #128	@ 0x80
 8000b44:	4838      	ldr	r0, [pc, #224]	@ (8000c28 <MX_GPIO_Init+0x1b8>)
 8000b46:	f002 f81f 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	482d      	ldr	r0, [pc, #180]	@ (8000c18 <MX_GPIO_Init+0x1a8>)
 8000b62:	f001 fe65 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4826      	ldr	r0, [pc, #152]	@ (8000c18 <MX_GPIO_Init+0x1a8>)
 8000b7e:	f001 fe57 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b82:	2308      	movs	r3, #8
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4820      	ldr	r0, [pc, #128]	@ (8000c1c <MX_GPIO_Init+0x1ac>)
 8000b9a:	f001 fe49 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b9e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481a      	ldr	r0, [pc, #104]	@ (8000c20 <MX_GPIO_Init+0x1b0>)
 8000bb8:	f001 fe3a 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bbc:	2340      	movs	r3, #64	@ 0x40
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <MX_GPIO_Init+0x1b4>)
 8000bd4:	f001 fe2c 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <MX_GPIO_Init+0x1b4>)
 8000bec:	f001 fe20 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bf0:	2380      	movs	r3, #128	@ 0x80
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <MX_GPIO_Init+0x1b8>)
 8000c08:	f001 fe12 	bl	8002830 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c0c:	bf00      	nop
 8000c0e:	3730      	adds	r7, #48	@ 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40021800 	.word	0x40021800
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c3e:	f000 fd0d 	bl	800165c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c42:	2301      	movs	r3, #1
 8000c44:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MPU_Config+0x58>)
 8000c4c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c4e:	230d      	movs	r3, #13
 8000c50:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fd2b 	bl	80016cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000c76:	2006      	movs	r0, #6
 8000c78:	f000 fd08 	bl	800168c <HAL_MPU_Enable>

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2007c000 	.word	0x2007c000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a17      	ldr	r2, [pc, #92]	@ (8000d58 <HAL_SPI_MspInit+0x7c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d128      	bne.n	8000d50 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x80>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <HAL_SPI_MspInit+0x80>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_SPI_MspInit+0x80>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_SPI_MspInit+0x80>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <HAL_SPI_MspInit+0x80>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_SPI_MspInit+0x80>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000d2e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d40:	2305      	movs	r3, #5
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_SPI_MspInit+0x84>)
 8000d4c:	f001 fd70 	bl	8002830 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	@ 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40003800 	.word	0x40003800
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400

08000d64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0ae      	sub	sp, #184	@ 0xb8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2290      	movs	r2, #144	@ 0x90
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f00e ff8e 	bl	800fca6 <memset>
  if(huart->Instance==USART3)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a22      	ldr	r2, [pc, #136]	@ (8000e18 <HAL_UART_MspInit+0xb4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d13c      	bne.n	8000e0e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fd78 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dae:	f7ff ff6b 	bl	8000c88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <HAL_UART_MspInit+0xb8>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a19      	ldr	r2, [pc, #100]	@ (8000e1c <HAL_UART_MspInit+0xb8>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <HAL_UART_MspInit+0xb8>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <HAL_UART_MspInit+0xb8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a13      	ldr	r2, [pc, #76]	@ (8000e1c <HAL_UART_MspInit+0xb8>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <HAL_UART_MspInit+0xb8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000de2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <HAL_UART_MspInit+0xbc>)
 8000e0a:	f001 fd11 	bl	8002830 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e0e:	bf00      	nop
 8000e10:	37b8      	adds	r7, #184	@ 0xb8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004800 	.word	0x40004800
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020c00 	.word	0x40020c00

08000e24 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0ae      	sub	sp, #184	@ 0xb8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2290      	movs	r2, #144	@ 0x90
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f00e ff2e 	bl	800fca6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e52:	d159      	bne.n	8000f08 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fd17 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e70:	f7ff ff0a 	bl	8000c88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	4a25      	ldr	r2, [pc, #148]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e80:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e8c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4818      	ldr	r0, [pc, #96]	@ (8000f14 <HAL_PCD_MspInit+0xf0>)
 8000eb4:	f001 fcbc 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000eb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4810      	ldr	r0, [pc, #64]	@ (8000f14 <HAL_PCD_MspInit+0xf0>)
 8000ed4:	f001 fcac 	bl	8002830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000edc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000efa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efc:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <HAL_PCD_MspInit+0xec>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f08:	bf00      	nop
 8000f0a:	37b8      	adds	r7, #184	@ 0xb8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <NMI_Handler+0x4>

08000f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <MemManage_Handler+0x4>

08000f30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6e:	f000 fa4b 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <_kill>:

int _kill(int pid, int sig)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f92:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <_kill+0x20>)
 8000f94:	2216      	movs	r2, #22
 8000f96:	601a      	str	r2, [r3, #0]
  return -1;
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	2000844c 	.word	0x2000844c

08000fac <_exit>:

void _exit (int status)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe5 	bl	8000f88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fbe:	bf00      	nop
 8000fc0:	e7fd      	b.n	8000fbe <_exit+0x12>

08000fc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e00a      	b.n	8000fea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	4601      	mov	r1, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	60ba      	str	r2, [r7, #8]
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbf0      	blt.n	8000fd4 <_read+0x12>
  }

  return len;
 8000ff2:	687b      	ldr	r3, [r7, #4]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e009      	b.n	8001022 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	60ba      	str	r2, [r7, #8]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbf1      	blt.n	800100e <_write+0x12>
  }
  return len;
 800102a:	687b      	ldr	r3, [r7, #4]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_close>:

int _close(int file)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800105c:	605a      	str	r2, [r3, #4]
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_isatty>:

int _isatty(int file)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001074:	2301      	movs	r3, #1
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001082:	b480      	push	{r7}
 8001084:	b085      	sub	sp, #20
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d205      	bcs.n	80010d8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001108 <_sbrk+0x6c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d6:	e009      	b.n	80010ec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a06      	ldr	r2, [pc, #24]	@ (8001100 <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	20080000 	.word	0x20080000
 80010fc:	00000400 	.word	0x00000400
 8001100:	200007b0 	.word	0x200007b0
 8001104:	20008460 	.word	0x20008460
 8001108:	2000844c 	.word	0x2000844c

0800110c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001134:	f7ff ffea 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115e:	f00e fdf1 	bl	800fd44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fb61 	bl	8000828 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001174:	080135d8 	.word	0x080135d8
  ldr r2, =_sbss
 8001178:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800117c:	2000845c 	.word	0x2000845c

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>

08001182 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <LAN8742_RegisterBusIO+0x28>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <LAN8742_RegisterBusIO+0x28>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <LAN8742_RegisterBusIO+0x28>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ae:	e014      	b.n	80011da <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	691a      	ldr	r2, [r3, #16]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d139      	bne.n	8001276 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2220      	movs	r2, #32
 8001214:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	e01c      	b.n	8001256 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f107 020c 	add.w	r2, r7, #12
 8001224:	2112      	movs	r1, #18
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	4798      	blx	r3
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	da03      	bge.n	8001238 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001230:	f06f 0304 	mvn.w	r3, #4
 8001234:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001236:	e00b      	b.n	8001250 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	d105      	bne.n	8001250 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
         break;
 800124e:	e005      	b.n	800125c <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b1f      	cmp	r3, #31
 800125a:	d9df      	bls.n	800121c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b1f      	cmp	r3, #31
 8001262:	d902      	bls.n	800126a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001264:	f06f 0302 	mvn.w	r3, #2
 8001268:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001276:	693b      	ldr	r3, [r7, #16]
 }
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6810      	ldr	r0, [r2, #0]
 8001294:	f107 020c 	add.w	r2, r7, #12
 8001298:	2101      	movs	r1, #1
 800129a:	4798      	blx	r3
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da02      	bge.n	80012a8 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012a2:	f06f 0304 	mvn.w	r3, #4
 80012a6:	e06e      	b.n	8001386 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6810      	ldr	r0, [r2, #0]
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	2101      	movs	r1, #1
 80012b6:	4798      	blx	r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da02      	bge.n	80012c4 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012be:	f06f 0304 	mvn.w	r3, #4
 80012c2:	e060      	b.n	8001386 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e059      	b.n	8001386 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6810      	ldr	r0, [r2, #0]
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	2100      	movs	r1, #0
 80012e0:	4798      	blx	r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da02      	bge.n	80012ee <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012e8:	f06f 0304 	mvn.w	r3, #4
 80012ec:	e04b      	b.n	8001386 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d11b      	bne.n	8001330 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <LAN8742_GetLinkState+0x90>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800130c:	2302      	movs	r3, #2
 800130e:	e03a      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800131a:	2303      	movs	r3, #3
 800131c:	e033      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001328:	2304      	movs	r3, #4
 800132a:	e02c      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800132c:	2305      	movs	r3, #5
 800132e:	e02a      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6810      	ldr	r0, [r2, #0]
 8001338:	f107 020c 	add.w	r2, r7, #12
 800133c:	211f      	movs	r1, #31
 800133e:	4798      	blx	r3
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	da02      	bge.n	800134c <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001346:	f06f 0304 	mvn.w	r3, #4
 800134a:	e01c      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001356:	2306      	movs	r3, #6
 8001358:	e015      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f003 031c 	and.w	r3, r3, #28
 8001360:	2b18      	cmp	r3, #24
 8001362:	d101      	bne.n	8001368 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001364:	2302      	movs	r3, #2
 8001366:	e00e      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 031c 	and.w	r3, r3, #28
 800136e:	2b08      	cmp	r3, #8
 8001370:	d101      	bne.n	8001376 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001372:	2303      	movs	r3, #3
 8001374:	e007      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 031c 	and.w	r3, r3, #28
 800137c:	2b14      	cmp	r3, #20
 800137e:	d101      	bne.n	8001384 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001380:	2304      	movs	r3, #4
 8001382:	e000      	b.n	8001386 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001384:	2305      	movs	r3, #5
    }
  }
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001392:	2003      	movs	r0, #3
 8001394:	f000 f92e 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f805 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139e:	f7ff fc79 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f93b 	bl	8001642 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013e4:	f000 f911 	bl	800160a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	@ (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_IncTick+0x20>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_IncTick+0x24>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a04      	ldr	r2, [pc, #16]	@ (800142c <HAL_IncTick+0x24>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000008 	.word	0x20000008
 800142c:	200007b4 	.word	0x200007b4

08001430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <HAL_GetTick+0x14>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200007b4 	.word	0x200007b4

08001448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff ffee 	bl	8001430 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001460:	d005      	beq.n	800146e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_Delay+0x44>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146e:	bf00      	nop
 8001470:	f7ff ffde 	bl	8001430 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d8f7      	bhi.n	8001470 <HAL_Delay+0x28>
  {
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000008 	.word	0x20000008

08001490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ac:	4013      	ands	r3, r2
 80014ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00
 80014d4:	05fa0000 	.word	0x05fa0000

080014d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014dc:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <__NVIC_GetPriorityGrouping+0x18>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	f003 0307 	and.w	r3, r3, #7
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	@ (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	@ (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015c0:	d301      	bcc.n	80015c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00f      	b.n	80015e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <SysTick_Config+0x40>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ce:	210f      	movs	r1, #15
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015d4:	f7ff ff8e 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <SysTick_Config+0x40>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <SysTick_Config+0x40>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	e000e010 	.word	0xe000e010

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff47 	bl	8001490 <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800161c:	f7ff ff5c 	bl	80014d8 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ff8e 	bl	8001548 <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff5d 	bl	80014f4 <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffb0 	bl	80015b0 <SysTick_Config>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001660:	f3bf 8f5f 	dmb	sy
}
 8001664:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <HAL_MPU_Disable+0x28>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166a:	4a06      	ldr	r2, [pc, #24]	@ (8001684 <HAL_MPU_Disable+0x28>)
 800166c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001670:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001672:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <HAL_MPU_Disable+0x2c>)
 8001674:	2200      	movs	r2, #0
 8001676:	605a      	str	r2, [r3, #4]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	e000ed90 	.word	0xe000ed90

0800168c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001694:	4a0b      	ldr	r2, [pc, #44]	@ (80016c4 <HAL_MPU_Enable+0x38>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_MPU_Enable+0x3c>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_MPU_Enable+0x3c>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016aa:	f3bf 8f4f 	dsb	sy
}
 80016ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b0:	f3bf 8f6f 	isb	sy
}
 80016b4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed90 	.word	0xe000ed90
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	785a      	ldrb	r2, [r3, #1]
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_MPU_ConfigRegion+0x7c>)
 80016da:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <HAL_MPU_ConfigRegion+0x7c>)
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	4a19      	ldr	r2, [pc, #100]	@ (8001748 <HAL_MPU_ConfigRegion+0x7c>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80016e8:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <HAL_MPU_ConfigRegion+0x7c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7b1b      	ldrb	r3, [r3, #12]
 80016f4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7adb      	ldrb	r3, [r3, #11]
 80016fa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7a9b      	ldrb	r3, [r3, #10]
 8001702:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001704:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7b5b      	ldrb	r3, [r3, #13]
 800170a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800170c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7b9b      	ldrb	r3, [r3, #14]
 8001712:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001714:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7bdb      	ldrb	r3, [r3, #15]
 800171a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800171c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7a5b      	ldrb	r3, [r3, #9]
 8001722:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001724:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7a1b      	ldrb	r3, [r3, #8]
 800172a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800172c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001736:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001738:	6113      	str	r3, [r2, #16]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed90 	.word	0xe000ed90

0800174c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e086      	b.n	800186c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001764:	2b00      	cmp	r3, #0
 8001766:	d106      	bne.n	8001776 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2220      	movs	r2, #32
 800176c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f004 fac9 	bl	8005d08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <HAL_ETH_Init+0x128>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	4a3e      	ldr	r2, [pc, #248]	@ (8001874 <HAL_ETH_Init+0x128>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001780:	6453      	str	r3, [r2, #68]	@ 0x44
 8001782:	4b3c      	ldr	r3, [pc, #240]	@ (8001874 <HAL_ETH_Init+0x128>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800178e:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <HAL_ETH_Init+0x12c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a39      	ldr	r2, [pc, #228]	@ (8001878 <HAL_ETH_Init+0x12c>)
 8001794:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001798:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <HAL_ETH_Init+0x12c>)
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	4935      	ldr	r1, [pc, #212]	@ (8001878 <HAL_ETH_Init+0x12c>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_ETH_Init+0x12c>)
 80017aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c4:	f7ff fe34 	bl	8001430 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017ca:	e011      	b.n	80017f0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017cc:	f7ff fe30 	bl	8001430 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017da:	d909      	bls.n	80017f0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2204      	movs	r2, #4
 80017e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	22e0      	movs	r2, #224	@ 0xe0
 80017e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e03d      	b.n	800186c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1e4      	bne.n	80017cc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fd58 	bl	80022b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fe03 	bl	8002414 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fe59 	bl	80024c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	461a      	mov	r2, r3
 800181a:	2100      	movs	r1, #0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fdc1 	bl	80023a4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001830:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_ETH_Init+0x130>)
 8001840:	430b      	orrs	r3, r1
 8001842:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001856:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2210      	movs	r2, #16
 8001866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40013800 	.word	0x40013800
 800187c:	00020060 	.word	0x00020060

08001880 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800188e:	2b10      	cmp	r3, #16
 8001890:	d150      	bne.n	8001934 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2220      	movs	r2, #32
 8001896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2204      	movs	r2, #4
 800189e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f939 	bl	8001b18 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0208 	orr.w	r2, r2, #8
 80018b4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff fdc2 	bl	8001448 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0204 	orr.w	r2, r2, #4
 80018da:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f7ff fdaf 	bl	8001448 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fb7c 	bl	8001ff0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800190a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800190e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001926:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2240      	movs	r2, #64	@ 0x40
 800192c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
  }
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800194c:	2b40      	cmp	r3, #64	@ 0x40
 800194e:	d14a      	bne.n	80019e6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2220      	movs	r2, #32
 8001954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800196a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800196e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	f023 0302 	bic.w	r3, r3, #2
 8001982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001986:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0204 	bic.w	r2, r2, #4
 8001996:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff fd51 	bl	8001448 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fb1e 	bl	8001ff0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0208 	bic.w	r2, r2, #8
 80019c2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f7ff fd3b 	bl	8001448 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2210      	movs	r2, #16
 80019de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
  }
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07c      	b.n	8001b10 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a1c:	2b40      	cmp	r3, #64	@ 0x40
 8001a1e:	d176      	bne.n	8001b0e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001a20:	2200      	movs	r2, #0
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fdbd 	bl	80025a4 <ETH_Prepare_Tx_Descriptors>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d009      	beq.n	8001a44 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a36:	f043 0202 	orr.w	r2, r3, #2
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e065      	b.n	8001b10 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a44:	f3bf 8f4f 	dsb	sy
}
 8001a48:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3206      	adds	r2, #6
 8001a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a56:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d904      	bls.n	8001a74 <HAL_ETH_Transmit+0x84>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	1f1a      	subs	r2, r3, #4
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3106      	adds	r1, #6
 8001a80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a88:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001a8a:	f7ff fcd1 	bl	8001430 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a90:	e037      	b.n	8001b02 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d011      	beq.n	8001ac8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aaa:	f043 0208 	orr.w	r2, r3, #8
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e023      	b.n	8001b10 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ace:	d018      	beq.n	8001b02 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ad0:	f7ff fcae 	bl	8001430 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d302      	bcc.n	8001ae6 <HAL_ETH_Transmit+0xf6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10d      	bne.n	8001b02 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aec:	f043 0204 	orr.w	r2, r3, #4
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001afc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e006      	b.n	8001b10 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	dbc3      	blt.n	8001a92 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
  }
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001b24:	2301      	movs	r3, #1
 8001b26:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b2c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	3212      	adds	r2, #18
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b3e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b40:	e042      	b.n	8001bc8 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d112      	bne.n	8001b70 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 fa6c 	bl	800602c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	74fb      	strb	r3, [r7, #19]
 8001b5e:	e007      	b.n	8001b70 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	461a      	mov	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b70:	7cfb      	ldrb	r3, [r7, #19]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d028      	beq.n	8001bc8 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <ETH_UpdateDescriptor+0x104>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	6053      	str	r3, [r2, #4]
 8001b8a:	e005      	b.n	8001b98 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	61fb      	str	r3, [r7, #28]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d902      	bls.n	8001bb6 <ETH_UpdateDescriptor+0x9e>
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	3212      	adds	r2, #18
 8001bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <ETH_UpdateDescriptor+0xbc>
 8001bce:	7cfb      	ldrb	r3, [r7, #19]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1b6      	bne.n	8001b42 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d01a      	beq.n	8001c14 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3303      	adds	r3, #3
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001be8:	f3bf 8f5f 	dmb	sy
}
 8001bec:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	18ca      	adds	r2, r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c06:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001c14:	bf00      	nop
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	80004000 	.word	0x80004000

08001c20 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 031c 	and.w	r3, r3, #28
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	02db      	lsls	r3, r3, #11
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f023 0302 	bic.w	r3, r3, #2
 8001c5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001c70:	f7ff fbde 	bl	8001430 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c76:	e00d      	b.n	8001c94 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001c78:	f7ff fbda 	bl	8001430 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c86:	d301      	bcc.n	8001c8c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e010      	b.n	8001cae <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1ec      	bne.n	8001c78 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 031c 	and.w	r3, r3, #28
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	02db      	lsls	r3, r3, #11
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	019b      	lsls	r3, r3, #6
 8001ce4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d10:	f7ff fb8e 	bl	8001430 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d16:	e00d      	b.n	8001d34 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d18:	f7ff fb8a 	bl	8001430 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d26:	d301      	bcc.n	8001d2c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e009      	b.n	8001d40 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ec      	bne.n	8001d18 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0e6      	b.n	8001f2a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf14      	ite	ne
 8001d6a:	2301      	movne	r3, #1
 8001d6c:	2300      	moveq	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf14      	ite	ne
 8001db0:	2301      	movne	r3, #1
 8001db2:	2300      	moveq	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf0c      	ite	eq
 8001dca:	2301      	moveq	r3, #1
 8001dcc:	2300      	movne	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	bf14      	ite	ne
 8001de4:	2301      	movne	r3, #1
 8001de6:	2300      	moveq	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf0c      	ite	eq
 8001e1a:	2301      	moveq	r3, #1
 8001e1c:	2300      	movne	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf14      	ite	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	2300      	moveq	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf0c      	ite	eq
 8001ec6:	2301      	moveq	r3, #1
 8001ec8:	2300      	movne	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf14      	ite	ne
 8001f1a:	2301      	movne	r3, #1
 8001f1c:	2300      	moveq	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00b      	b.n	8001f62 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f50:	2b10      	cmp	r3, #16
 8001f52:	d105      	bne.n	8001f60 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f870 	bl	800203c <ETH_SetMACConfig>

    return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e000      	b.n	8001f62 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
  }
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 031c 	bic.w	r3, r3, #28
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f84:	f001 fc54 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8001f88:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4a14      	ldr	r2, [pc, #80]	@ (8001fe0 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d804      	bhi.n	8001f9c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e019      	b.n	8001fd0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4a11      	ldr	r2, [pc, #68]	@ (8001fe4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d204      	bcs.n	8001fae <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f043 030c 	orr.w	r3, r3, #12
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e010      	b.n	8001fd0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d90c      	bls.n	8001fd0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fec <HAL_ETH_SetMDIOClockRange+0x80>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d804      	bhi.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e003      	b.n	8001fd0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	02160ebf 	.word	0x02160ebf
 8001fe4:	03938700 	.word	0x03938700
 8001fe8:	05f5e0ff 	.word	0x05f5e0ff
 8001fec:	08f0d17f 	.word	0x08f0d17f

08001ff0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800200e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002012:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fa11 	bl	8001448 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002030:	6193      	str	r3, [r2, #24]
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4b53      	ldr	r3, [pc, #332]	@ (80021a0 <ETH_SetMACConfig+0x164>)
 8002052:	4013      	ands	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	7b9b      	ldrb	r3, [r3, #14]
 800205a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	7c12      	ldrb	r2, [r2, #16]
 8002060:	2a00      	cmp	r2, #0
 8002062:	d102      	bne.n	800206a <ETH_SetMACConfig+0x2e>
 8002064:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002068:	e000      	b.n	800206c <ETH_SetMACConfig+0x30>
 800206a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800206c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	7c52      	ldrb	r2, [r2, #17]
 8002072:	2a00      	cmp	r2, #0
 8002074:	d102      	bne.n	800207c <ETH_SetMACConfig+0x40>
 8002076:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800207a:	e000      	b.n	800207e <ETH_SetMACConfig+0x42>
 800207c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800207e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002084:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	7fdb      	ldrb	r3, [r3, #31]
 800208a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800208c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002092:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	7f92      	ldrb	r2, [r2, #30]
 8002098:	2a00      	cmp	r2, #0
 800209a:	d102      	bne.n	80020a2 <ETH_SetMACConfig+0x66>
 800209c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020a0:	e000      	b.n	80020a4 <ETH_SetMACConfig+0x68>
 80020a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80020a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7f1b      	ldrb	r3, [r3, #28]
 80020aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	791b      	ldrb	r3, [r3, #4]
 80020b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d102      	bne.n	80020cc <ETH_SetMACConfig+0x90>
 80020c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ca:	e000      	b.n	80020ce <ETH_SetMACConfig+0x92>
 80020cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	7bdb      	ldrb	r3, [r3, #15]
 80020d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80020e6:	4313      	orrs	r3, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7ff f9a2 	bl	8001448 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800211a:	4013      	ands	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800212a:	2a00      	cmp	r2, #0
 800212c:	d101      	bne.n	8002132 <ETH_SetMACConfig+0xf6>
 800212e:	2280      	movs	r2, #128	@ 0x80
 8002130:	e000      	b.n	8002134 <ETH_SetMACConfig+0xf8>
 8002132:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002134:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800213a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002142:	2a01      	cmp	r2, #1
 8002144:	d101      	bne.n	800214a <ETH_SetMACConfig+0x10e>
 8002146:	2208      	movs	r2, #8
 8002148:	e000      	b.n	800214c <ETH_SetMACConfig+0x110>
 800214a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800214c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002154:	2a01      	cmp	r2, #1
 8002156:	d101      	bne.n	800215c <ETH_SetMACConfig+0x120>
 8002158:	2204      	movs	r2, #4
 800215a:	e000      	b.n	800215e <ETH_SetMACConfig+0x122>
 800215c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800215e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002166:	2a01      	cmp	r2, #1
 8002168:	d101      	bne.n	800216e <ETH_SetMACConfig+0x132>
 800216a:	2202      	movs	r2, #2
 800216c:	e000      	b.n	8002170 <ETH_SetMACConfig+0x134>
 800216e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002170:	4313      	orrs	r3, r2
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002188:	2001      	movs	r0, #1
 800218a:	f7ff f95d 	bl	8001448 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	fd20810f 	.word	0xfd20810f

080021a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4b3d      	ldr	r3, [pc, #244]	@ (80022b4 <ETH_SetDMAConfig+0x110>)
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7b1b      	ldrb	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <ETH_SetDMAConfig+0x2c>
 80021ca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021ce:	e000      	b.n	80021d2 <ETH_SetDMAConfig+0x2e>
 80021d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	7b5b      	ldrb	r3, [r3, #13]
 80021d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	7f52      	ldrb	r2, [r2, #29]
 80021de:	2a00      	cmp	r2, #0
 80021e0:	d102      	bne.n	80021e8 <ETH_SetDMAConfig+0x44>
 80021e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80021e6:	e000      	b.n	80021ea <ETH_SetDMAConfig+0x46>
 80021e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	7b9b      	ldrb	r3, [r3, #14]
 80021f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	7f1b      	ldrb	r3, [r3, #28]
 80021fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002200:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	7f9b      	ldrb	r3, [r3, #30]
 8002206:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002208:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800220e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002216:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002218:	4313      	orrs	r3, r2
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002228:	461a      	mov	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800223a:	2001      	movs	r0, #1
 800223c:	f7ff f904 	bl	8001448 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002248:	461a      	mov	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	791b      	ldrb	r3, [r3, #4]
 8002252:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002258:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800225e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002264:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800226c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800226e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002274:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002276:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800227c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002286:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800228a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff f8d5 	bl	8001448 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	f8de3f23 	.word	0xf8de3f23

080022b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b0a6      	sub	sp, #152	@ 0x98
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022fa:	2300      	movs	r3, #0
 80022fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002304:	2300      	movs	r3, #0
 8002306:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002320:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002324:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002326:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800232a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002332:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fe7f 	bl	800203c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800233e:	2301      	movs	r3, #1
 8002340:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002342:	2301      	movs	r3, #1
 8002344:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800234c:	2301      	movs	r3, #1
 800234e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002364:	2301      	movs	r3, #1
 8002366:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800236a:	2301      	movs	r3, #1
 800236c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800236e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002372:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002374:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002378:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800237a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800237e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002380:	2301      	movs	r3, #1
 8002382:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002386:	2300      	movs	r3, #0
 8002388:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4619      	mov	r1, r3
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff05 	bl	80021a4 <ETH_SetDMAConfig>
}
 800239a:	bf00      	nop
 800239c:	3798      	adds	r7, #152	@ 0x98
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3305      	adds	r3, #5
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	3204      	adds	r2, #4
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <ETH_MACAddressConfig+0x68>)
 80023c6:	4413      	add	r3, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3303      	adds	r3, #3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	061a      	lsls	r2, r3, #24
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3302      	adds	r3, #2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3301      	adds	r3, #1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	4313      	orrs	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <ETH_MACAddressConfig+0x6c>)
 80023f6:	4413      	add	r3, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	6013      	str	r3, [r2, #0]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40028040 	.word	0x40028040
 8002410:	40028044 	.word	0x40028044

08002414 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e03e      	b.n	80024a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68d9      	ldr	r1, [r3, #12]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2200      	movs	r2, #0
 800244a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	3206      	adds	r2, #6
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d80c      	bhi.n	8002484 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68d9      	ldr	r1, [r3, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	440b      	add	r3, r1
 800247c:	461a      	mov	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	e004      	b.n	800248e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d9bd      	bls.n	8002422 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b8:	611a      	str	r2, [r3, #16]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e048      	b.n	8002566 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6919      	ldr	r1, [r3, #16]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2200      	movs	r2, #0
 80024f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002510:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	3212      	adds	r2, #18
 8002532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d80c      	bhi.n	8002556 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6919      	ldr	r1, [r3, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	e004      	b.n	8002560 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3301      	adds	r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d9b3      	bls.n	80024d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002596:	60da      	str	r2, [r3, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b091      	sub	sp, #68	@ 0x44
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3318      	adds	r3, #24
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ce:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025e6:	d007      	beq.n	80025f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ec:	3304      	adds	r3, #4
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80025f8:	2302      	movs	r3, #2
 80025fa:	e111      	b.n	8002820 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80025fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fe:	3301      	adds	r3, #1
 8002600:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800260c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4b86      	ldr	r3, [pc, #536]	@ (800282c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002612:	4013      	ands	r3, r2
 8002614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002616:	6852      	ldr	r2, [r2, #4]
 8002618:	431a      	orrs	r2, r3
 800261a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800262a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	431a      	orrs	r2, r3
 8002638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	431a      	orrs	r2, r3
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800266e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800267e:	e082      	b.n	8002786 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800269a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	e005      	b.n	80026ac <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026aa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ae:	3301      	adds	r3, #1
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d902      	bls.n	80026be <ETH_Prepare_Tx_Descriptors+0x11a>
 80026b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ba:	3b04      	subs	r3, #4
 80026bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026d4:	d007      	beq.n	80026e6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026da:	3304      	adds	r3, #4
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d029      	beq.n	800273a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026f8:	e019      	b.n	800272e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80026fa:	f3bf 8f5f 	dmb	sy
}
 80026fe:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800270c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270e:	3301      	adds	r3, #1
 8002710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002714:	2b03      	cmp	r3, #3
 8002716:	d902      	bls.n	800271e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271a:	3b04      	subs	r3, #4
 800271c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002726:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272a:	3301      	adds	r3, #1
 800272c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800272e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	429a      	cmp	r2, r3
 8002734:	d3e1      	bcc.n	80026fa <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002736:	2302      	movs	r3, #2
 8002738:	e072      	b.n	8002820 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800273a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002744:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002748:	3301      	adds	r3, #1
 800274a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800275c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4b32      	ldr	r3, [pc, #200]	@ (800282c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002762:	4013      	ands	r3, r2
 8002764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002766:	6852      	ldr	r2, [r2, #4]
 8002768:	431a      	orrs	r2, r3
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	3301      	adds	r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002774:	f3bf 8f5f 	dmb	sy
}
 8002778:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002784:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f47f af78 	bne.w	8002680 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e005      	b.n	80027b0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	6a3a      	ldr	r2, [r7, #32]
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80027c6:	f3bf 8f5f 	dmb	sy
}
 80027ca:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027e0:	3304      	adds	r3, #4
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027ec:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ee:	f3ef 8310 	mrs	r3, PRIMASK
 80027f2:	613b      	str	r3, [r7, #16]
  return(result);
 80027f4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	2301      	movs	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f383 8810 	msr	PRIMASK, r3
}
 8002802:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	4413      	add	r3, r2
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	629a      	str	r2, [r3, #40]	@ 0x28
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f383 8810 	msr	PRIMASK, r3
}
 800281c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3744      	adds	r7, #68	@ 0x44
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	ffffe000 	.word	0xffffe000

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	e175      	b.n	8002b3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	429a      	cmp	r2, r3
 800286a:	f040 8164 	bne.w	8002b36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d005      	beq.n	8002886 <HAL_GPIO_Init+0x56>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d130      	bne.n	80028e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 0201 	and.w	r2, r3, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d017      	beq.n	8002924 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d123      	bne.n	8002978 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3208      	adds	r2, #8
 8002938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	69b9      	ldr	r1, [r7, #24]
 8002974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80be 	beq.w	8002b36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	4b66      	ldr	r3, [pc, #408]	@ (8002b54 <HAL_GPIO_Init+0x324>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	4a65      	ldr	r2, [pc, #404]	@ (8002b54 <HAL_GPIO_Init+0x324>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029c6:	4b63      	ldr	r3, [pc, #396]	@ (8002b54 <HAL_GPIO_Init+0x324>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029d2:	4a61      	ldr	r2, [pc, #388]	@ (8002b58 <HAL_GPIO_Init+0x328>)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a58      	ldr	r2, [pc, #352]	@ (8002b5c <HAL_GPIO_Init+0x32c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d037      	beq.n	8002a6e <HAL_GPIO_Init+0x23e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a57      	ldr	r2, [pc, #348]	@ (8002b60 <HAL_GPIO_Init+0x330>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_GPIO_Init+0x23a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a56      	ldr	r2, [pc, #344]	@ (8002b64 <HAL_GPIO_Init+0x334>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02b      	beq.n	8002a66 <HAL_GPIO_Init+0x236>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a55      	ldr	r2, [pc, #340]	@ (8002b68 <HAL_GPIO_Init+0x338>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d025      	beq.n	8002a62 <HAL_GPIO_Init+0x232>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a54      	ldr	r2, [pc, #336]	@ (8002b6c <HAL_GPIO_Init+0x33c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01f      	beq.n	8002a5e <HAL_GPIO_Init+0x22e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a53      	ldr	r2, [pc, #332]	@ (8002b70 <HAL_GPIO_Init+0x340>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_Init+0x22a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a52      	ldr	r2, [pc, #328]	@ (8002b74 <HAL_GPIO_Init+0x344>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x226>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a51      	ldr	r2, [pc, #324]	@ (8002b78 <HAL_GPIO_Init+0x348>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x222>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a50      	ldr	r2, [pc, #320]	@ (8002b7c <HAL_GPIO_Init+0x34c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x21e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4f      	ldr	r2, [pc, #316]	@ (8002b80 <HAL_GPIO_Init+0x350>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x21a>
 8002a46:	2309      	movs	r3, #9
 8002a48:	e012      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a4a:	230a      	movs	r3, #10
 8002a4c:	e010      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	e00e      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e00c      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a56:	2306      	movs	r3, #6
 8002a58:	e00a      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a5a:	2305      	movs	r3, #5
 8002a5c:	e008      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a5e:	2304      	movs	r3, #4
 8002a60:	e006      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a62:	2303      	movs	r3, #3
 8002a64:	e004      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e002      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_GPIO_Init+0x240>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f002 0203 	and.w	r2, r2, #3
 8002a76:	0092      	lsls	r2, r2, #2
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a80:	4935      	ldr	r1, [pc, #212]	@ (8002b58 <HAL_GPIO_Init+0x328>)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab2:	4a34      	ldr	r2, [pc, #208]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab8:	4b32      	ldr	r3, [pc, #200]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002adc:	4a29      	ldr	r2, [pc, #164]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae2:	4b28      	ldr	r3, [pc, #160]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b06:	4a1f      	ldr	r2, [pc, #124]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b30:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <HAL_GPIO_Init+0x354>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b0f      	cmp	r3, #15
 8002b40:	f67f ae86 	bls.w	8002850 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40021400 	.word	0x40021400
 8002b74:	40021800 	.word	0x40021800
 8002b78:	40021c00 	.word	0x40021c00
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40022400 	.word	0x40022400
 8002b84:	40013c00 	.word	0x40013c00

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ba4:	e003      	b.n	8002bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	619a      	str	r2, [r3, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e108      	b.n	8002dde <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe f91c 	bl	8000e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2203      	movs	r2, #3
 8002bf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bfa:	d102      	bne.n	8002c02 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 fb40 	bl	800528c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7c1a      	ldrb	r2, [r3, #16]
 8002c14:	f88d 2000 	strb.w	r2, [sp]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c1c:	f002 fadc 	bl	80051d8 <USB_CoreInit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0d5      	b.n	8002dde <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 fb38 	bl	80052ae <USB_SetCurrentMode>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0c6      	b.n	8002dde <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	e04a      	b.n	8002cec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3315      	adds	r3, #21
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3314      	adds	r3, #20
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	b298      	uxth	r0, r3
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	332e      	adds	r3, #46	@ 0x2e
 8002c92:	4602      	mov	r2, r0
 8002c94:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3318      	adds	r3, #24
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	331c      	adds	r3, #28
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3320      	adds	r3, #32
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3324      	adds	r3, #36	@ 0x24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	791b      	ldrb	r3, [r3, #4]
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d3af      	bcc.n	8002c56 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	e044      	b.n	8002d86 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	3301      	adds	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d3b5      	bcc.n	8002cfc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7c1a      	ldrb	r2, [r3, #16]
 8002d98:	f88d 2000 	strb.w	r2, [sp]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da0:	f002 fad2 	bl	8005348 <USB_DevInit>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e013      	b.n	8002dde <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7b1b      	ldrb	r3, [r3, #12]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d102      	bne.n	8002dd2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f80b 	bl	8002de8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 fc8d 	bl	80056f6 <USB_DevDisconnect>

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <HAL_PCDEx_ActivateLPM+0x44>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	10000003 	.word	0x10000003

08002e30 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a04      	ldr	r2, [pc, #16]	@ (8002e4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40007000 	.word	0x40007000

08002e50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b23      	ldr	r3, [pc, #140]	@ (8002ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a22      	ldr	r2, [pc, #136]	@ (8002ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b20      	ldr	r3, [pc, #128]	@ (8002ee8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e72:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1d      	ldr	r2, [pc, #116]	@ (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e7e:	f7fe fad7 	bl	8001430 <HAL_GetTick>
 8002e82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e84:	e009      	b.n	8002e9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e86:	f7fe fad3 	bl	8001430 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e94:	d901      	bls.n	8002e9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e022      	b.n	8002ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e9a:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea6:	d1ee      	bne.n	8002e86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ea8:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0f      	ldr	r2, [pc, #60]	@ (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb4:	f7fe fabc 	bl	8001430 <HAL_GetTick>
 8002eb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eba:	e009      	b.n	8002ed0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ebc:	f7fe fab8 	bl	8001430 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eca:	d901      	bls.n	8002ed0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e007      	b.n	8002ee0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed0:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002edc:	d1ee      	bne.n	8002ebc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40007000 	.word	0x40007000

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e29b      	b.n	800343e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8087 	beq.w	8003022 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f14:	4b96      	ldr	r3, [pc, #600]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d00c      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f20:	4b93      	ldr	r3, [pc, #588]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d112      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62>
 8002f2c:	4b90      	ldr	r3, [pc, #576]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f38:	d10b      	bne.n	8002f52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d06c      	beq.n	8003020 <HAL_RCC_OscConfig+0x130>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d168      	bne.n	8003020 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e275      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x7a>
 8002f5c:	4b84      	ldr	r3, [pc, #528]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a83      	ldr	r2, [pc, #524]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e02e      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x9c>
 8002f72:	4b7f      	ldr	r3, [pc, #508]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7e      	ldr	r2, [pc, #504]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7b      	ldr	r2, [pc, #492]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e01d      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xc0>
 8002f96:	4b76      	ldr	r3, [pc, #472]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a75      	ldr	r2, [pc, #468]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b73      	ldr	r3, [pc, #460]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a72      	ldr	r2, [pc, #456]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd8>
 8002fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b6c      	ldr	r3, [pc, #432]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6b      	ldr	r2, [pc, #428]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fa2e 	bl	8001430 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fa2a 	bl	8001430 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	@ 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e229      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b61      	ldr	r3, [pc, #388]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xe8>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fa1a 	bl	8001430 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fa16 	bl	8001430 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e215      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	4b57      	ldr	r3, [pc, #348]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x110>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d069      	beq.n	8003102 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302e:	4b50      	ldr	r3, [pc, #320]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b4d      	ldr	r3, [pc, #308]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b08      	cmp	r3, #8
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_OscConfig+0x190>
 8003046:	4b4a      	ldr	r3, [pc, #296]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	4b47      	ldr	r3, [pc, #284]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x17a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1e9      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b41      	ldr	r3, [pc, #260]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	493d      	ldr	r1, [pc, #244]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	e040      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d023      	beq.n	80030d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b39      	ldr	r3, [pc, #228]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a38      	ldr	r2, [pc, #224]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f9cc 	bl	8001430 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fe f9c8 	bl	8001430 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1c7      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ae:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4929      	ldr	r1, [pc, #164]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
 80030ce:	e018      	b.n	8003102 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d0:	4b27      	ldr	r3, [pc, #156]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a26      	ldr	r2, [pc, #152]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f9a8 	bl	8001430 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fe f9a4 	bl	8001430 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e1a3      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d038      	beq.n	8003180 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d019      	beq.n	800314a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b16      	ldr	r3, [pc, #88]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8003118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311a:	4a15      	ldr	r2, [pc, #84]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe f985 	bl	8001430 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe f981 	bl	8001430 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e180      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313c:	4b0c      	ldr	r3, [pc, #48]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x23a>
 8003148:	e01a      	b.n	8003180 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314a:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 800314c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314e:	4a08      	ldr	r2, [pc, #32]	@ (8003170 <HAL_RCC_OscConfig+0x280>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7fe f96b 	bl	8001430 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315e:	f7fe f967 	bl	8001430 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d903      	bls.n	8003174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e166      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
 8003170:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b92      	ldr	r3, [pc, #584]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ee      	bne.n	800315e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a4 	beq.w	80032d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b8c      	ldr	r3, [pc, #560]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10d      	bne.n	80031b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	4b89      	ldr	r3, [pc, #548]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	4a88      	ldr	r2, [pc, #544]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a6:	4b86      	ldr	r3, [pc, #536]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b2:	2301      	movs	r3, #1
 80031b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b6:	4b83      	ldr	r3, [pc, #524]	@ (80033c4 <HAL_RCC_OscConfig+0x4d4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d118      	bne.n	80031f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031c2:	4b80      	ldr	r3, [pc, #512]	@ (80033c4 <HAL_RCC_OscConfig+0x4d4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7f      	ldr	r2, [pc, #508]	@ (80033c4 <HAL_RCC_OscConfig+0x4d4>)
 80031c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ce:	f7fe f92f 	bl	8001430 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d6:	f7fe f92b 	bl	8001430 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b64      	cmp	r3, #100	@ 0x64
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e12a      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e8:	4b76      	ldr	r3, [pc, #472]	@ (80033c4 <HAL_RCC_OscConfig+0x4d4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d106      	bne.n	800320a <HAL_RCC_OscConfig+0x31a>
 80031fc:	4b70      	ldr	r3, [pc, #448]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	4a6f      	ldr	r2, [pc, #444]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6713      	str	r3, [r2, #112]	@ 0x70
 8003208:	e02d      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0x33c>
 8003212:	4b6b      	ldr	r3, [pc, #428]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	4a6a      	ldr	r2, [pc, #424]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	@ 0x70
 800321e:	4b68      	ldr	r3, [pc, #416]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003222:	4a67      	ldr	r2, [pc, #412]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	6713      	str	r3, [r2, #112]	@ 0x70
 800322a:	e01c      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b05      	cmp	r3, #5
 8003232:	d10c      	bne.n	800324e <HAL_RCC_OscConfig+0x35e>
 8003234:	4b62      	ldr	r3, [pc, #392]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003238:	4a61      	ldr	r2, [pc, #388]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003240:	4b5f      	ldr	r3, [pc, #380]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003244:	4a5e      	ldr	r2, [pc, #376]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	@ 0x70
 800324c:	e00b      	b.n	8003266 <HAL_RCC_OscConfig+0x376>
 800324e:	4b5c      	ldr	r3, [pc, #368]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	4a5b      	ldr	r2, [pc, #364]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	6713      	str	r3, [r2, #112]	@ 0x70
 800325a:	4b59      	ldr	r3, [pc, #356]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	4a58      	ldr	r2, [pc, #352]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d015      	beq.n	800329a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fe f8df 	bl	8001430 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fe f8db 	bl	8001430 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0d8      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328c:	4b4c      	ldr	r3, [pc, #304]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0ee      	beq.n	8003276 <HAL_RCC_OscConfig+0x386>
 8003298:	e014      	b.n	80032c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe f8c9 	bl	8001430 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a0:	e00a      	b.n	80032b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a2:	f7fe f8c5 	bl	8001430 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0c2      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b8:	4b41      	ldr	r3, [pc, #260]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ee      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d105      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ca:	4b3d      	ldr	r3, [pc, #244]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	4a3c      	ldr	r2, [pc, #240]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 80ae 	beq.w	800343c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e0:	4b37      	ldr	r3, [pc, #220]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d06d      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d14b      	bne.n	800338c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f4:	4b32      	ldr	r3, [pc, #200]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a31      	ldr	r2, [pc, #196]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe f896 	bl	8001430 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe f892 	bl	8001430 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e091      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	4b29      	ldr	r3, [pc, #164]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	3b01      	subs	r3, #1
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003350:	071b      	lsls	r3, r3, #28
 8003352:	491b      	ldr	r1, [pc, #108]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a18      	ldr	r2, [pc, #96]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe f864 	bl	8001430 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe f860 	bl	8001430 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e05f      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x47c>
 800338a:	e057      	b.n	800343c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0b      	ldr	r2, [pc, #44]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 8003392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe f84a 	bl	8001430 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe f846 	bl	8001430 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e045      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b03      	ldr	r3, [pc, #12]	@ (80033c0 <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4b0>
 80033be:	e03d      	b.n	800343c <HAL_RCC_OscConfig+0x54c>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <HAL_RCC_OscConfig+0x558>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d030      	beq.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d129      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d122      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003400:	4293      	cmp	r3, r2
 8003402:	d119      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	3b01      	subs	r3, #1
 8003412:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d10f      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800

0800344c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d0      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b6a      	ldr	r3, [pc, #424]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d910      	bls.n	8003494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b67      	ldr	r3, [pc, #412]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 020f 	bic.w	r2, r3, #15
 800347a:	4965      	ldr	r1, [pc, #404]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b63      	ldr	r3, [pc, #396]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0b8      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ac:	4b59      	ldr	r3, [pc, #356]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a58      	ldr	r2, [pc, #352]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c4:	4b53      	ldr	r3, [pc, #332]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a52      	ldr	r2, [pc, #328]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d0:	4b50      	ldr	r3, [pc, #320]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	494d      	ldr	r1, [pc, #308]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d040      	beq.n	8003570 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b47      	ldr	r3, [pc, #284]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d115      	bne.n	800352e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350e:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e073      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351e:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352e:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 0203 	bic.w	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4936      	ldr	r1, [pc, #216]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003540:	f7fd ff76 	bl	8001430 <HAL_GetTick>
 8003544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	e00a      	b.n	800355e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003548:	f7fd ff72 	bl	8001430 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e053      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355e:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 020c 	and.w	r2, r3, #12
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	429a      	cmp	r2, r3
 800356e:	d1eb      	bne.n	8003548 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d210      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b24      	ldr	r3, [pc, #144]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 020f 	bic.w	r2, r3, #15
 8003586:	4922      	ldr	r1, [pc, #136]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e032      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4916      	ldr	r1, [pc, #88]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ca:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	490e      	ldr	r1, [pc, #56]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035de:	f000 f821 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	490a      	ldr	r1, [pc, #40]	@ (8003618 <HAL_RCC_ClockConfig+0x1cc>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	4a09      	ldr	r2, [pc, #36]	@ (800361c <HAL_RCC_ClockConfig+0x1d0>)
 80035f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035fa:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <HAL_RCC_ClockConfig+0x1d4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fed2 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023c00 	.word	0x40023c00
 8003614:	40023800 	.word	0x40023800
 8003618:	080133e4 	.word	0x080133e4
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b094      	sub	sp, #80	@ 0x50
 800362a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003630:	2300      	movs	r3, #0
 8003632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003634:	2300      	movs	r3, #0
 8003636:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363c:	4b79      	ldr	r3, [pc, #484]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b08      	cmp	r3, #8
 8003646:	d00d      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x40>
 8003648:	2b08      	cmp	r3, #8
 800364a:	f200 80e1 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x34>
 8003652:	2b04      	cmp	r3, #4
 8003654:	d003      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x3a>
 8003656:	e0db      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b73      	ldr	r3, [pc, #460]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x204>)
 800365a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800365c:	e0db      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365e:	4b73      	ldr	r3, [pc, #460]	@ (800382c <HAL_RCC_GetSysClockFreq+0x208>)
 8003660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003662:	e0d8      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003664:	4b6f      	ldr	r3, [pc, #444]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800366c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800366e:	4b6d      	ldr	r3, [pc, #436]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d063      	beq.n	8003742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b6a      	ldr	r3, [pc, #424]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	2200      	movs	r2, #0
 8003682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003684:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368c:	633b      	str	r3, [r7, #48]	@ 0x30
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	@ 0x34
 8003692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003696:	4622      	mov	r2, r4
 8003698:	462b      	mov	r3, r5
 800369a:	f04f 0000 	mov.w	r0, #0
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	0159      	lsls	r1, r3, #5
 80036a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036a8:	0150      	lsls	r0, r2, #5
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4621      	mov	r1, r4
 80036b0:	1a51      	subs	r1, r2, r1
 80036b2:	6139      	str	r1, [r7, #16]
 80036b4:	4629      	mov	r1, r5
 80036b6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036c8:	4659      	mov	r1, fp
 80036ca:	018b      	lsls	r3, r1, #6
 80036cc:	4651      	mov	r1, sl
 80036ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036d2:	4651      	mov	r1, sl
 80036d4:	018a      	lsls	r2, r1, #6
 80036d6:	4651      	mov	r1, sl
 80036d8:	ebb2 0801 	subs.w	r8, r2, r1
 80036dc:	4659      	mov	r1, fp
 80036de:	eb63 0901 	sbc.w	r9, r3, r1
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036f6:	4690      	mov	r8, r2
 80036f8:	4699      	mov	r9, r3
 80036fa:	4623      	mov	r3, r4
 80036fc:	eb18 0303 	adds.w	r3, r8, r3
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	462b      	mov	r3, r5
 8003704:	eb49 0303 	adc.w	r3, r9, r3
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003716:	4629      	mov	r1, r5
 8003718:	024b      	lsls	r3, r1, #9
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003720:	4621      	mov	r1, r4
 8003722:	024a      	lsls	r2, r1, #9
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800372e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003734:	f7fc fdd4 	bl	80002e0 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4613      	mov	r3, r2
 800373e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003740:	e058      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b38      	ldr	r3, [pc, #224]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	2200      	movs	r2, #0
 800374a:	4618      	mov	r0, r3
 800374c:	4611      	mov	r1, r2
 800374e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003752:	623b      	str	r3, [r7, #32]
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
 8003758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800375c:	4642      	mov	r2, r8
 800375e:	464b      	mov	r3, r9
 8003760:	f04f 0000 	mov.w	r0, #0
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	0159      	lsls	r1, r3, #5
 800376a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376e:	0150      	lsls	r0, r2, #5
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4641      	mov	r1, r8
 8003776:	ebb2 0a01 	subs.w	sl, r2, r1
 800377a:	4649      	mov	r1, r9
 800377c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800378c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003794:	ebb2 040a 	subs.w	r4, r2, sl
 8003798:	eb63 050b 	sbc.w	r5, r3, fp
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	00eb      	lsls	r3, r5, #3
 80037a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037aa:	00e2      	lsls	r2, r4, #3
 80037ac:	4614      	mov	r4, r2
 80037ae:	461d      	mov	r5, r3
 80037b0:	4643      	mov	r3, r8
 80037b2:	18e3      	adds	r3, r4, r3
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	464b      	mov	r3, r9
 80037b8:	eb45 0303 	adc.w	r3, r5, r3
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ca:	4629      	mov	r1, r5
 80037cc:	028b      	lsls	r3, r1, #10
 80037ce:	4621      	mov	r1, r4
 80037d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037d4:	4621      	mov	r1, r4
 80037d6:	028a      	lsls	r2, r1, #10
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037de:	2200      	movs	r2, #0
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	61fa      	str	r2, [r7, #28]
 80037e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e8:	f7fc fd7a 	bl	80002e0 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	3301      	adds	r3, #1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800380e:	e002      	b.n	8003816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x204>)
 8003812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003818:	4618      	mov	r0, r3
 800381a:	3750      	adds	r7, #80	@ 0x50
 800381c:	46bd      	mov	sp, r7
 800381e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	@ (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a9b      	lsrs	r3, r3, #10
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	@ (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	080133f4 	.word	0x080133f4

08003870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003874:	f7ff ffdc 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	0b5b      	lsrs	r3, r3, #13
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	@ (8003894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	080133f4 	.word	0x080133f4

08003898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d012      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038c0:	4b69      	ldr	r3, [pc, #420]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a68      	ldr	r2, [pc, #416]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038ca:	6093      	str	r3, [r2, #8]
 80038cc:	4b66      	ldr	r3, [pc, #408]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d4:	4964      	ldr	r1, [pc, #400]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003900:	4959      	ldr	r1, [pc, #356]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d017      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800392e:	4b4e      	ldr	r3, [pc, #312]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003934:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	494a      	ldr	r1, [pc, #296]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800395a:	2301      	movs	r3, #1
 800395c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 808b 	beq.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800397c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	4a39      	ldr	r2, [pc, #228]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003986:	6413      	str	r3, [r2, #64]	@ 0x40
 8003988:	4b37      	ldr	r3, [pc, #220]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003994:	4b35      	ldr	r3, [pc, #212]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a34      	ldr	r2, [pc, #208]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039a0:	f7fd fd46 	bl	8001430 <HAL_GetTick>
 80039a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fd fd42 	bl	8001430 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	@ 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e38f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80039ba:	4b2c      	ldr	r3, [pc, #176]	@ (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039c6:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d035      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d02e      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039e4:	4b20      	ldr	r3, [pc, #128]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a04:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a06:	4a18      	ldr	r2, [pc, #96]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a0c:	4b16      	ldr	r3, [pc, #88]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d114      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd fd0a 	bl	8001430 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a20:	f7fd fd06 	bl	8001430 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e351      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0ee      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a4e:	d111      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a5c:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a5e:	400b      	ands	r3, r1
 8003a60:	4901      	ldr	r1, [pc, #4]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
 8003a66:	e00b      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	0ffffcff 	.word	0x0ffffcff
 8003a74:	4bac      	ldr	r3, [pc, #688]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4aab      	ldr	r2, [pc, #684]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	4ba9      	ldr	r3, [pc, #676]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	49a6      	ldr	r1, [pc, #664]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a9e:	4ba2      	ldr	r3, [pc, #648]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aa4:	4aa0      	ldr	r2, [pc, #640]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aaa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003aae:	4b9e      	ldr	r3, [pc, #632]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	499b      	ldr	r1, [pc, #620]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003acc:	4b96      	ldr	r3, [pc, #600]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ada:	4993      	ldr	r1, [pc, #588]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aee:	4b8e      	ldr	r3, [pc, #568]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003afc:	498a      	ldr	r1, [pc, #552]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b10:	4b85      	ldr	r3, [pc, #532]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b1e:	4982      	ldr	r1, [pc, #520]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b32:	4b7d      	ldr	r3, [pc, #500]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	4979      	ldr	r1, [pc, #484]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b54:	4b74      	ldr	r3, [pc, #464]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	4971      	ldr	r1, [pc, #452]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b76:	4b6c      	ldr	r3, [pc, #432]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7c:	f023 020c 	bic.w	r2, r3, #12
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b84:	4968      	ldr	r1, [pc, #416]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b98:	4b63      	ldr	r3, [pc, #396]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba6:	4960      	ldr	r1, [pc, #384]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bba:	4b5b      	ldr	r3, [pc, #364]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	4957      	ldr	r1, [pc, #348]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bdc:	4b52      	ldr	r3, [pc, #328]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	494f      	ldr	r1, [pc, #316]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c04:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0c:	4946      	ldr	r1, [pc, #280]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c20:	4b41      	ldr	r3, [pc, #260]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c26:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	493e      	ldr	r1, [pc, #248]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c42:	4b39      	ldr	r3, [pc, #228]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c48:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c50:	4935      	ldr	r1, [pc, #212]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c64:	4b30      	ldr	r3, [pc, #192]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c72:	492d      	ldr	r1, [pc, #180]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d011      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c86:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c94:	4924      	ldr	r1, [pc, #144]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc6:	4b18      	ldr	r3, [pc, #96]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ccc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd4:	4914      	ldr	r1, [pc, #80]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cf8:	490b      	ldr	r1, [pc, #44]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00f      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003d0c:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d1c:	4902      	ldr	r1, [pc, #8]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d24:	e002      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d38:	4b8a      	ldr	r3, [pc, #552]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d48:	4986      	ldr	r1, [pc, #536]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d5c:	4b81      	ldr	r3, [pc, #516]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d62:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d6c:	497d      	ldr	r1, [pc, #500]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d006      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80d6 	beq.w	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d88:	4b76      	ldr	r3, [pc, #472]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a75      	ldr	r2, [pc, #468]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fd fb4c 	bl	8001430 <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d9c:	f7fd fb48 	bl	8001430 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	@ 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e195      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dae:	4b6d      	ldr	r3, [pc, #436]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d021      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11d      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dce:	4b65      	ldr	r3, [pc, #404]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ddc:	4b61      	ldr	r3, [pc, #388]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de2:	0e1b      	lsrs	r3, r3, #24
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	019a      	lsls	r2, r3, #6
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4958      	ldr	r1, [pc, #352]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02e      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e34:	d129      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e36:	4b4b      	ldr	r3, [pc, #300]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e44:	4b47      	ldr	r3, [pc, #284]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e4a:	0f1b      	lsrs	r3, r3, #28
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	019a      	lsls	r2, r3, #6
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	493e      	ldr	r1, [pc, #248]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e72:	4b3c      	ldr	r3, [pc, #240]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e78:	f023 021f 	bic.w	r2, r3, #31
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	3b01      	subs	r3, #1
 8003e82:	4938      	ldr	r1, [pc, #224]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01d      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e96:	4b33      	ldr	r3, [pc, #204]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e9c:	0e1b      	lsrs	r3, r3, #24
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eaa:	0f1b      	lsrs	r3, r3, #28
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	019a      	lsls	r2, r3, #6
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	071b      	lsls	r3, r3, #28
 8003eca:	4926      	ldr	r1, [pc, #152]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d011      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	019a      	lsls	r2, r3, #6
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	071b      	lsls	r3, r3, #28
 8003efa:	491a      	ldr	r1, [pc, #104]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f02:	4b18      	ldr	r3, [pc, #96]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a17      	ldr	r2, [pc, #92]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0e:	f7fd fa8f 	bl	8001430 <HAL_GetTick>
 8003f12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f16:	f7fd fa8b 	bl	8001430 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b64      	cmp	r3, #100	@ 0x64
 8003f22:	d901      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e0d8      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f28:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 80ce 	bne.w	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f3c:	4b09      	ldr	r3, [pc, #36]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a08      	ldr	r2, [pc, #32]	@ (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f48:	f7fd fa72 	bl	8001430 <HAL_GetTick>
 8003f4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f50:	f7fd fa6e 	bl	8001430 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	@ 0x64
 8003f5c:	d904      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e0bb      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f68:	4b5e      	ldr	r3, [pc, #376]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f74:	d0ec      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d12a      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f9e:	4b51      	ldr	r3, [pc, #324]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fac:	4b4d      	ldr	r3, [pc, #308]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	0f1b      	lsrs	r3, r3, #28
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	019a      	lsls	r2, r3, #6
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	061b      	lsls	r3, r3, #24
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	071b      	lsls	r3, r3, #28
 8003fd2:	4944      	ldr	r1, [pc, #272]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fda:	4b42      	ldr	r3, [pc, #264]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	493d      	ldr	r1, [pc, #244]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004008:	d11d      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800400a:	4b36      	ldr	r3, [pc, #216]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004018:	4b32      	ldr	r3, [pc, #200]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	0f1b      	lsrs	r3, r3, #28
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	019a      	lsls	r2, r3, #6
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	061b      	lsls	r3, r3, #24
 8004038:	431a      	orrs	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	071b      	lsls	r3, r3, #28
 800403e:	4929      	ldr	r1, [pc, #164]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d028      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004052:	4b24      	ldr	r3, [pc, #144]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	0e1b      	lsrs	r3, r3, #24
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004060:	4b20      	ldr	r3, [pc, #128]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	019a      	lsls	r2, r3, #6
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	431a      	orrs	r2, r3
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	4917      	ldr	r1, [pc, #92]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800408e:	4b15      	ldr	r3, [pc, #84]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004090:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	4911      	ldr	r1, [pc, #68]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a4:	4b0f      	ldr	r3, [pc, #60]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a0e      	ldr	r2, [pc, #56]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fd f9be 	bl	8001430 <HAL_GetTick>
 80040b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040b8:	f7fd f9ba 	bl	8001430 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	@ 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e007      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d6:	d1ef      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e09d      	b.n	8004236 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d108      	bne.n	8004114 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800410a:	d009      	beq.n	8004120 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	61da      	str	r2, [r3, #28]
 8004112:	e005      	b.n	8004120 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fc fdce 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004156:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004160:	d902      	bls.n	8004168 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e002      	b.n	800416e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004168:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800416c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004176:	d007      	beq.n	8004188 <HAL_SPI_Init+0xa0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004180:	d002      	beq.n	8004188 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ca:	ea42 0103 	orr.w	r1, r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 0204 	and.w	r2, r3, #4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004204:	ea42 0103 	orr.w	r1, r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b088      	sub	sp, #32
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800424e:	f7fd f8ef 	bl	8001430 <HAL_GetTick>
 8004252:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d001      	beq.n	8004268 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
 8004266:	e15c      	b.n	8004522 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_SPI_Transmit+0x36>
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e154      	b.n	8004522 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_SPI_Transmit+0x48>
 8004282:	2302      	movs	r3, #2
 8004284:	e14d      	b.n	8004522 <HAL_SPI_Transmit+0x2e4>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2203      	movs	r2, #3
 8004292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	88fa      	ldrh	r2, [r7, #6]
 80042a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d8:	d10f      	bne.n	80042fa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	d007      	beq.n	8004318 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004320:	d952      	bls.n	80043c8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_SPI_Transmit+0xf2>
 800432a:	8b7b      	ldrh	r3, [r7, #26]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d145      	bne.n	80043bc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004334:	881a      	ldrh	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004340:	1c9a      	adds	r2, r3, #2
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004354:	e032      	b.n	80043bc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d112      	bne.n	800438a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004388:	e018      	b.n	80043bc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800438a:	f7fd f851 	bl	8001430 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d803      	bhi.n	80043a2 <HAL_SPI_Transmit+0x164>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043a0:	d102      	bne.n	80043a8 <HAL_SPI_Transmit+0x16a>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d109      	bne.n	80043bc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e0b2      	b.n	8004522 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1c7      	bne.n	8004356 <HAL_SPI_Transmit+0x118>
 80043c6:	e083      	b.n	80044d0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_SPI_Transmit+0x198>
 80043d0:	8b7b      	ldrh	r3, [r7, #26]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d177      	bne.n	80044c6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d912      	bls.n	8004406 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	881a      	ldrh	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f0:	1c9a      	adds	r2, r3, #2
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b02      	subs	r3, #2
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004404:	e05f      	b.n	80044c6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	330c      	adds	r3, #12
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800442c:	e04b      	b.n	80044c6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d12b      	bne.n	8004494 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d912      	bls.n	800446c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004456:	1c9a      	adds	r2, r3, #2
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b02      	subs	r3, #2
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800446a:	e02c      	b.n	80044c6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	7812      	ldrb	r2, [r2, #0]
 8004478:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004492:	e018      	b.n	80044c6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004494:	f7fc ffcc 	bl	8001430 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d803      	bhi.n	80044ac <HAL_SPI_Transmit+0x26e>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044aa:	d102      	bne.n	80044b2 <HAL_SPI_Transmit+0x274>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e02d      	b.n	8004522 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ae      	bne.n	800442e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	6839      	ldr	r1, [r7, #0]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f947 	bl	8004768 <SPI_EndRxTxTransaction>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004520:	2300      	movs	r3, #0
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800453c:	f7fc ff78 	bl	8001430 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	4413      	add	r3, r2
 800454a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800454c:	f7fc ff70 	bl	8001430 <HAL_GetTick>
 8004550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004552:	4b39      	ldr	r3, [pc, #228]	@ (8004638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	015b      	lsls	r3, r3, #5
 8004558:	0d1b      	lsrs	r3, r3, #20
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	fb02 f303 	mul.w	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004562:	e055      	b.n	8004610 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800456a:	d051      	beq.n	8004610 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800456c:	f7fc ff60 	bl	8001430 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	429a      	cmp	r2, r3
 800457a:	d902      	bls.n	8004582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d13d      	bne.n	80045fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800459a:	d111      	bne.n	80045c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a4:	d004      	beq.n	80045b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ae:	d107      	bne.n	80045c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045c8:	d10f      	bne.n	80045ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e018      	b.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e002      	b.n	8004610 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	3b01      	subs	r3, #1
 800460e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4013      	ands	r3, r2
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	429a      	cmp	r2, r3
 800461e:	bf0c      	ite	eq
 8004620:	2301      	moveq	r3, #1
 8004622:	2300      	movne	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	429a      	cmp	r2, r3
 800462c:	d19a      	bne.n	8004564 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3720      	adds	r7, #32
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20000000 	.word	0x20000000

0800463c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	@ 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800464e:	f7fc feef 	bl	8001430 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	4413      	add	r3, r2
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800465e:	f7fc fee7 	bl	8001430 <HAL_GetTick>
 8004662:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800466c:	4b3d      	ldr	r3, [pc, #244]	@ (8004764 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	00da      	lsls	r2, r3, #3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	0d1b      	lsrs	r3, r3, #20
 800467c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004684:	e061      	b.n	800474a <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800468c:	d107      	bne.n	800469e <SPI_WaitFifoStateUntilTimeout+0x62>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800469c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a4:	d051      	beq.n	800474a <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046a6:	f7fc fec3 	bl	8001430 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d902      	bls.n	80046bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d13d      	bne.n	8004738 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046d4:	d111      	bne.n	80046fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046de:	d004      	beq.n	80046ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e8:	d107      	bne.n	80046fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004702:	d10f      	bne.n	8004724 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004722:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e011      	b.n	800475c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d102      	bne.n	8004744 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	@ 0x24
 8004742:	e002      	b.n	800474a <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	3b01      	subs	r3, #1
 8004748:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4013      	ands	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d195      	bne.n	8004686 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3728      	adds	r7, #40	@ 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000000 	.word	0x20000000

08004768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2200      	movs	r2, #0
 800477c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff ff5b 	bl	800463c <SPI_WaitFifoStateUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004790:	f043 0220 	orr.w	r2, r3, #32
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e046      	b.n	800482a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800479c:	4b25      	ldr	r3, [pc, #148]	@ (8004834 <SPI_EndRxTxTransaction+0xcc>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a25      	ldr	r2, [pc, #148]	@ (8004838 <SPI_EndRxTxTransaction+0xd0>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	0d5b      	lsrs	r3, r3, #21
 80047a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ba:	d112      	bne.n	80047e2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	2180      	movs	r1, #128	@ 0x80
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff feb0 	bl	800452c <SPI_WaitFlagStateUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d016      	beq.n	8004800 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e023      	b.n	800482a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f8:	2b80      	cmp	r3, #128	@ 0x80
 80047fa:	d0f2      	beq.n	80047e2 <SPI_EndRxTxTransaction+0x7a>
 80047fc:	e000      	b.n	8004800 <SPI_EndRxTxTransaction+0x98>
        break;
 80047fe:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ff15 	bl	800463c <SPI_WaitFifoStateUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e000      	b.n	800482a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000000 	.word	0x20000000
 8004838:	165e9f81 	.word	0x165e9f81

0800483c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e040      	b.n	80048d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fa80 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	@ 0x24
 8004868:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa8c 	bl	8004da0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f825 	bl	80048d8 <UART_SetConfig>
 800488e:	4603      	mov	r3, r0
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e01b      	b.n	80048d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fb0b 	bl	8004ee4 <UART_CheckIdleState>
 80048ce:	4603      	mov	r3, r0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4ba6      	ldr	r3, [pc, #664]	@ (8004b9c <UART_SetConfig+0x2c4>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	6979      	ldr	r1, [r7, #20]
 800490c:	430b      	orrs	r3, r1
 800490e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	430a      	orrs	r2, r1
 8004948:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a94      	ldr	r2, [pc, #592]	@ (8004ba0 <UART_SetConfig+0x2c8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d120      	bne.n	8004996 <UART_SetConfig+0xbe>
 8004954:	4b93      	ldr	r3, [pc, #588]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b03      	cmp	r3, #3
 8004960:	d816      	bhi.n	8004990 <UART_SetConfig+0xb8>
 8004962:	a201      	add	r2, pc, #4	@ (adr r2, 8004968 <UART_SetConfig+0x90>)
 8004964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004968:	08004979 	.word	0x08004979
 800496c:	08004985 	.word	0x08004985
 8004970:	0800497f 	.word	0x0800497f
 8004974:	0800498b 	.word	0x0800498b
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e150      	b.n	8004c20 <UART_SetConfig+0x348>
 800497e:	2302      	movs	r3, #2
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e14d      	b.n	8004c20 <UART_SetConfig+0x348>
 8004984:	2304      	movs	r3, #4
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e14a      	b.n	8004c20 <UART_SetConfig+0x348>
 800498a:	2308      	movs	r3, #8
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e147      	b.n	8004c20 <UART_SetConfig+0x348>
 8004990:	2310      	movs	r3, #16
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e144      	b.n	8004c20 <UART_SetConfig+0x348>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a83      	ldr	r2, [pc, #524]	@ (8004ba8 <UART_SetConfig+0x2d0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d132      	bne.n	8004a06 <UART_SetConfig+0x12e>
 80049a0:	4b80      	ldr	r3, [pc, #512]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d828      	bhi.n	8004a00 <UART_SetConfig+0x128>
 80049ae:	a201      	add	r2, pc, #4	@ (adr r2, 80049b4 <UART_SetConfig+0xdc>)
 80049b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b4:	080049e9 	.word	0x080049e9
 80049b8:	08004a01 	.word	0x08004a01
 80049bc:	08004a01 	.word	0x08004a01
 80049c0:	08004a01 	.word	0x08004a01
 80049c4:	080049f5 	.word	0x080049f5
 80049c8:	08004a01 	.word	0x08004a01
 80049cc:	08004a01 	.word	0x08004a01
 80049d0:	08004a01 	.word	0x08004a01
 80049d4:	080049ef 	.word	0x080049ef
 80049d8:	08004a01 	.word	0x08004a01
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a01 	.word	0x08004a01
 80049e4:	080049fb 	.word	0x080049fb
 80049e8:	2300      	movs	r3, #0
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e118      	b.n	8004c20 <UART_SetConfig+0x348>
 80049ee:	2302      	movs	r3, #2
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e115      	b.n	8004c20 <UART_SetConfig+0x348>
 80049f4:	2304      	movs	r3, #4
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e112      	b.n	8004c20 <UART_SetConfig+0x348>
 80049fa:	2308      	movs	r3, #8
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e10f      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a00:	2310      	movs	r3, #16
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e10c      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a68      	ldr	r2, [pc, #416]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d120      	bne.n	8004a52 <UART_SetConfig+0x17a>
 8004a10:	4b64      	ldr	r3, [pc, #400]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a1a:	2b30      	cmp	r3, #48	@ 0x30
 8004a1c:	d013      	beq.n	8004a46 <UART_SetConfig+0x16e>
 8004a1e:	2b30      	cmp	r3, #48	@ 0x30
 8004a20:	d814      	bhi.n	8004a4c <UART_SetConfig+0x174>
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d009      	beq.n	8004a3a <UART_SetConfig+0x162>
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d810      	bhi.n	8004a4c <UART_SetConfig+0x174>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <UART_SetConfig+0x15c>
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d006      	beq.n	8004a40 <UART_SetConfig+0x168>
 8004a32:	e00b      	b.n	8004a4c <UART_SetConfig+0x174>
 8004a34:	2300      	movs	r3, #0
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e0f2      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e0ef      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a40:	2304      	movs	r3, #4
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e0ec      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a46:	2308      	movs	r3, #8
 8004a48:	77fb      	strb	r3, [r7, #31]
 8004a4a:	e0e9      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e0e6      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a56      	ldr	r2, [pc, #344]	@ (8004bb0 <UART_SetConfig+0x2d8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d120      	bne.n	8004a9e <UART_SetConfig+0x1c6>
 8004a5c:	4b51      	ldr	r3, [pc, #324]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a68:	d013      	beq.n	8004a92 <UART_SetConfig+0x1ba>
 8004a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a6c:	d814      	bhi.n	8004a98 <UART_SetConfig+0x1c0>
 8004a6e:	2b80      	cmp	r3, #128	@ 0x80
 8004a70:	d009      	beq.n	8004a86 <UART_SetConfig+0x1ae>
 8004a72:	2b80      	cmp	r3, #128	@ 0x80
 8004a74:	d810      	bhi.n	8004a98 <UART_SetConfig+0x1c0>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <UART_SetConfig+0x1a8>
 8004a7a:	2b40      	cmp	r3, #64	@ 0x40
 8004a7c:	d006      	beq.n	8004a8c <UART_SetConfig+0x1b4>
 8004a7e:	e00b      	b.n	8004a98 <UART_SetConfig+0x1c0>
 8004a80:	2300      	movs	r3, #0
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e0cc      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a86:	2302      	movs	r3, #2
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e0c9      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e0c6      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a92:	2308      	movs	r3, #8
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e0c3      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e0c0      	b.n	8004c20 <UART_SetConfig+0x348>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a44      	ldr	r2, [pc, #272]	@ (8004bb4 <UART_SetConfig+0x2dc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d125      	bne.n	8004af4 <UART_SetConfig+0x21c>
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ab6:	d017      	beq.n	8004ae8 <UART_SetConfig+0x210>
 8004ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004abc:	d817      	bhi.n	8004aee <UART_SetConfig+0x216>
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac2:	d00b      	beq.n	8004adc <UART_SetConfig+0x204>
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac8:	d811      	bhi.n	8004aee <UART_SetConfig+0x216>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <UART_SetConfig+0x1fe>
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad2:	d006      	beq.n	8004ae2 <UART_SetConfig+0x20a>
 8004ad4:	e00b      	b.n	8004aee <UART_SetConfig+0x216>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e0a1      	b.n	8004c20 <UART_SetConfig+0x348>
 8004adc:	2302      	movs	r3, #2
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e09e      	b.n	8004c20 <UART_SetConfig+0x348>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e09b      	b.n	8004c20 <UART_SetConfig+0x348>
 8004ae8:	2308      	movs	r3, #8
 8004aea:	77fb      	strb	r3, [r7, #31]
 8004aec:	e098      	b.n	8004c20 <UART_SetConfig+0x348>
 8004aee:	2310      	movs	r3, #16
 8004af0:	77fb      	strb	r3, [r7, #31]
 8004af2:	e095      	b.n	8004c20 <UART_SetConfig+0x348>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb8 <UART_SetConfig+0x2e0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d125      	bne.n	8004b4a <UART_SetConfig+0x272>
 8004afe:	4b29      	ldr	r3, [pc, #164]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b0c:	d017      	beq.n	8004b3e <UART_SetConfig+0x266>
 8004b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b12:	d817      	bhi.n	8004b44 <UART_SetConfig+0x26c>
 8004b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b18:	d00b      	beq.n	8004b32 <UART_SetConfig+0x25a>
 8004b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b1e:	d811      	bhi.n	8004b44 <UART_SetConfig+0x26c>
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <UART_SetConfig+0x254>
 8004b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b28:	d006      	beq.n	8004b38 <UART_SetConfig+0x260>
 8004b2a:	e00b      	b.n	8004b44 <UART_SetConfig+0x26c>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e076      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b32:	2302      	movs	r3, #2
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e073      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e070      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b3e:	2308      	movs	r3, #8
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e06d      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b44:	2310      	movs	r3, #16
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e06a      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bbc <UART_SetConfig+0x2e4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d138      	bne.n	8004bc6 <UART_SetConfig+0x2ee>
 8004b54:	4b13      	ldr	r3, [pc, #76]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b62:	d017      	beq.n	8004b94 <UART_SetConfig+0x2bc>
 8004b64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b68:	d82a      	bhi.n	8004bc0 <UART_SetConfig+0x2e8>
 8004b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6e:	d00b      	beq.n	8004b88 <UART_SetConfig+0x2b0>
 8004b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b74:	d824      	bhi.n	8004bc0 <UART_SetConfig+0x2e8>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <UART_SetConfig+0x2aa>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7e:	d006      	beq.n	8004b8e <UART_SetConfig+0x2b6>
 8004b80:	e01e      	b.n	8004bc0 <UART_SetConfig+0x2e8>
 8004b82:	2300      	movs	r3, #0
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e04b      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e048      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b8e:	2304      	movs	r3, #4
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e045      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b94:	2308      	movs	r3, #8
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e042      	b.n	8004c20 <UART_SetConfig+0x348>
 8004b9a:	bf00      	nop
 8004b9c:	efff69f3 	.word	0xefff69f3
 8004ba0:	40011000 	.word	0x40011000
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40004400 	.word	0x40004400
 8004bac:	40004800 	.word	0x40004800
 8004bb0:	40004c00 	.word	0x40004c00
 8004bb4:	40005000 	.word	0x40005000
 8004bb8:	40011400 	.word	0x40011400
 8004bbc:	40007800 	.word	0x40007800
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e02c      	b.n	8004c20 <UART_SetConfig+0x348>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a72      	ldr	r2, [pc, #456]	@ (8004d94 <UART_SetConfig+0x4bc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d125      	bne.n	8004c1c <UART_SetConfig+0x344>
 8004bd0:	4b71      	ldr	r3, [pc, #452]	@ (8004d98 <UART_SetConfig+0x4c0>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004bda:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bde:	d017      	beq.n	8004c10 <UART_SetConfig+0x338>
 8004be0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004be4:	d817      	bhi.n	8004c16 <UART_SetConfig+0x33e>
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bea:	d00b      	beq.n	8004c04 <UART_SetConfig+0x32c>
 8004bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf0:	d811      	bhi.n	8004c16 <UART_SetConfig+0x33e>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <UART_SetConfig+0x326>
 8004bf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bfa:	d006      	beq.n	8004c0a <UART_SetConfig+0x332>
 8004bfc:	e00b      	b.n	8004c16 <UART_SetConfig+0x33e>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e00d      	b.n	8004c20 <UART_SetConfig+0x348>
 8004c04:	2302      	movs	r3, #2
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e00a      	b.n	8004c20 <UART_SetConfig+0x348>
 8004c0a:	2304      	movs	r3, #4
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e007      	b.n	8004c20 <UART_SetConfig+0x348>
 8004c10:	2308      	movs	r3, #8
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e004      	b.n	8004c20 <UART_SetConfig+0x348>
 8004c16:	2310      	movs	r3, #16
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e001      	b.n	8004c20 <UART_SetConfig+0x348>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c28:	d15b      	bne.n	8004ce2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c2a:	7ffb      	ldrb	r3, [r7, #31]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d828      	bhi.n	8004c82 <UART_SetConfig+0x3aa>
 8004c30:	a201      	add	r2, pc, #4	@ (adr r2, 8004c38 <UART_SetConfig+0x360>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	08004c83 	.word	0x08004c83
 8004c48:	08004c73 	.word	0x08004c73
 8004c4c:	08004c83 	.word	0x08004c83
 8004c50:	08004c83 	.word	0x08004c83
 8004c54:	08004c83 	.word	0x08004c83
 8004c58:	08004c7b 	.word	0x08004c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5c:	f7fe fdf4 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 8004c60:	61b8      	str	r0, [r7, #24]
        break;
 8004c62:	e013      	b.n	8004c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe fe04 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8004c68:	61b8      	str	r0, [r7, #24]
        break;
 8004c6a:	e00f      	b.n	8004c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d9c <UART_SetConfig+0x4c4>)
 8004c6e:	61bb      	str	r3, [r7, #24]
        break;
 8004c70:	e00c      	b.n	8004c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c72:	f7fe fcd7 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8004c76:	61b8      	str	r0, [r7, #24]
        break;
 8004c78:	e008      	b.n	8004c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7e:	61bb      	str	r3, [r7, #24]
        break;
 8004c80:	e004      	b.n	8004c8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	77bb      	strb	r3, [r7, #30]
        break;
 8004c8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d074      	beq.n	8004d7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	005a      	lsls	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	441a      	add	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d916      	bls.n	8004cdc <UART_SetConfig+0x404>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb4:	d212      	bcs.n	8004cdc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f023 030f 	bic.w	r3, r3, #15
 8004cbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	89fb      	ldrh	r3, [r7, #14]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	89fa      	ldrh	r2, [r7, #14]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	e04f      	b.n	8004d7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	77bb      	strb	r3, [r7, #30]
 8004ce0:	e04c      	b.n	8004d7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce2:	7ffb      	ldrb	r3, [r7, #31]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d828      	bhi.n	8004d3a <UART_SetConfig+0x462>
 8004ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <UART_SetConfig+0x418>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d15 	.word	0x08004d15
 8004cf4:	08004d1d 	.word	0x08004d1d
 8004cf8:	08004d25 	.word	0x08004d25
 8004cfc:	08004d3b 	.word	0x08004d3b
 8004d00:	08004d2b 	.word	0x08004d2b
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d3b 	.word	0x08004d3b
 8004d10:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe fd98 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 8004d18:	61b8      	str	r0, [r7, #24]
        break;
 8004d1a:	e013      	b.n	8004d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d1c:	f7fe fda8 	bl	8003870 <HAL_RCC_GetPCLK2Freq>
 8004d20:	61b8      	str	r0, [r7, #24]
        break;
 8004d22:	e00f      	b.n	8004d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <UART_SetConfig+0x4c4>)
 8004d26:	61bb      	str	r3, [r7, #24]
        break;
 8004d28:	e00c      	b.n	8004d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7fe fc7b 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8004d2e:	61b8      	str	r0, [r7, #24]
        break;
 8004d30:	e008      	b.n	8004d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d36:	61bb      	str	r3, [r7, #24]
        break;
 8004d38:	e004      	b.n	8004d44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	77bb      	strb	r3, [r7, #30]
        break;
 8004d42:	bf00      	nop
    }

    if (pclk != 0U)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	085a      	lsrs	r2, r3, #1
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	441a      	add	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b0f      	cmp	r3, #15
 8004d62:	d909      	bls.n	8004d78 <UART_SetConfig+0x4a0>
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d6a:	d205      	bcs.n	8004d78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	e001      	b.n	8004d7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d88:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40007c00 	.word	0x40007c00
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	00f42400 	.word	0x00f42400

08004da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e9e:	d10a      	bne.n	8004eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b098      	sub	sp, #96	@ 0x60
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef4:	f7fc fa9c 	bl	8001430 <HAL_GetTick>
 8004ef8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d12e      	bne.n	8004f66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f88c 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d021      	beq.n	8004f66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e6      	bne.n	8004f22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e062      	b.n	800502c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d149      	bne.n	8005008 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f856 	bl	8005034 <UART_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d03c      	beq.n	8005008 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e6      	bne.n	8004f8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fe0:	61fa      	str	r2, [r7, #28]
 8004fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	69b9      	ldr	r1, [r7, #24]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	617b      	str	r3, [r7, #20]
   return(result);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e5      	bne.n	8004fc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e011      	b.n	800502c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3758      	adds	r7, #88	@ 0x58
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005044:	e04f      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800504c:	d04b      	beq.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504e:	f7fc f9ef 	bl	8001430 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <UART_WaitOnFlagUntilTimeout+0x30>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e04e      	b.n	8005106 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d037      	beq.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b80      	cmp	r3, #128	@ 0x80
 800507a:	d034      	beq.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	2b40      	cmp	r3, #64	@ 0x40
 8005080:	d031      	beq.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b08      	cmp	r3, #8
 800508e:	d110      	bne.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2208      	movs	r2, #8
 8005096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f838 	bl	800510e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2208      	movs	r2, #8
 80050a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e029      	b.n	8005106 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c0:	d111      	bne.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f81e 	bl	800510e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e00f      	b.n	8005106 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4013      	ands	r3, r2
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	bf0c      	ite	eq
 80050f6:	2301      	moveq	r3, #1
 80050f8:	2300      	movne	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	429a      	cmp	r2, r3
 8005102:	d0a0      	beq.n	8005046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800510e:	b480      	push	{r7}
 8005110:	b095      	sub	sp, #84	@ 0x54
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800512a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005134:	643b      	str	r3, [r7, #64]	@ 0x40
 8005136:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800513a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e6      	bne.n	8005116 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3308      	adds	r3, #8
 800514e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	61fb      	str	r3, [r7, #28]
   return(result);
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800516a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800516e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e5      	bne.n	8005148 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005180:	2b01      	cmp	r3, #1
 8005182:	d118      	bne.n	80051b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	60bb      	str	r3, [r7, #8]
   return(result);
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f023 0310 	bic.w	r3, r3, #16
 8005198:	647b      	str	r3, [r7, #68]	@ 0x44
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6979      	ldr	r1, [r7, #20]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	613b      	str	r3, [r7, #16]
   return(result);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e6      	bne.n	8005184 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051ca:	bf00      	nop
 80051cc:	3754      	adds	r7, #84	@ 0x54
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d8:	b084      	sub	sp, #16
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	f107 001c 	add.w	r0, r7, #28
 80051e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d121      	bne.n	8005236 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	4b21      	ldr	r3, [pc, #132]	@ (8005288 <USB_CoreInit+0xb0>)
 8005204:	4013      	ands	r3, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005216:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800521a:	2b01      	cmp	r3, #1
 800521c:	d105      	bne.n	800522a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fa92 	bl	8005754 <USB_CoreReset>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]
 8005234:	e010      	b.n	8005258 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa86 	bl	8005754 <USB_CoreReset>
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005250:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005258:	7fbb      	ldrb	r3, [r7, #30]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10b      	bne.n	8005276 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f043 0206 	orr.w	r2, r3, #6
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005282:	b004      	add	sp, #16
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	ffbdffbf 	.word	0xffbdffbf

0800528c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f023 0201 	bic.w	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d115      	bne.n	80052fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052dc:	200a      	movs	r0, #10
 80052de:	f7fc f8b3 	bl	8001448 <HAL_Delay>
      ms += 10U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	330a      	adds	r3, #10
 80052e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fa25 	bl	8005738 <USB_GetMode>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d01e      	beq.n	8005332 <USB_SetCurrentMode+0x84>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80052f8:	d9f0      	bls.n	80052dc <USB_SetCurrentMode+0x2e>
 80052fa:	e01a      	b.n	8005332 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d115      	bne.n	800532e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800530e:	200a      	movs	r0, #10
 8005310:	f7fc f89a 	bl	8001448 <HAL_Delay>
      ms += 10U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	330a      	adds	r3, #10
 8005318:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa0c 	bl	8005738 <USB_GetMode>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <USB_SetCurrentMode+0x84>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2bc7      	cmp	r3, #199	@ 0xc7
 800532a:	d9f0      	bls.n	800530e <USB_SetCurrentMode+0x60>
 800532c:	e001      	b.n	8005332 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e005      	b.n	800533e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2bc8      	cmp	r3, #200	@ 0xc8
 8005336:	d101      	bne.n	800533c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005348:	b084      	sub	sp, #16
 800534a:	b580      	push	{r7, lr}
 800534c:	b086      	sub	sp, #24
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	e009      	b.n	800537c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	3340      	adds	r3, #64	@ 0x40
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	2200      	movs	r2, #0
 8005374:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3301      	adds	r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b0e      	cmp	r3, #14
 8005380:	d9f2      	bls.n	8005368 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005382:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005386:	2b00      	cmp	r3, #0
 8005388:	d11c      	bne.n	80053c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	e005      	b.n	80053d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053d6:	461a      	mov	r2, r3
 80053d8:	2300      	movs	r3, #0
 80053da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10d      	bne.n	8005400 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053ec:	2100      	movs	r1, #0
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f968 	bl	80056c4 <USB_SetDevSpeed>
 80053f4:	e008      	b.n	8005408 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053f6:	2101      	movs	r1, #1
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f963 	bl	80056c4 <USB_SetDevSpeed>
 80053fe:	e003      	b.n	8005408 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005400:	2103      	movs	r1, #3
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f95e 	bl	80056c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005408:	2110      	movs	r1, #16
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f8fa 	bl	8005604 <USB_FlushTxFifo>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f924 	bl	8005668 <USB_FlushRxFifo>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005430:	461a      	mov	r2, r3
 8005432:	2300      	movs	r3, #0
 8005434:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543c:	461a      	mov	r2, r3
 800543e:	2300      	movs	r3, #0
 8005440:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005448:	461a      	mov	r2, r3
 800544a:	2300      	movs	r3, #0
 800544c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	e043      	b.n	80054dc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005466:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800546a:	d118      	bne.n	800549e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800547e:	461a      	mov	r2, r3
 8005480:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e013      	b.n	80054b0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	461a      	mov	r2, r3
 8005496:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	e008      	b.n	80054b0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054aa:	461a      	mov	r2, r3
 80054ac:	2300      	movs	r3, #0
 80054ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ce:	461a      	mov	r2, r3
 80054d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3301      	adds	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054e0:	461a      	mov	r2, r3
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d3b5      	bcc.n	8005454 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	e043      	b.n	8005576 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005504:	d118      	bne.n	8005538 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005518:	461a      	mov	r2, r3
 800551a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	e013      	b.n	800554a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552e:	461a      	mov	r2, r3
 8005530:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e008      	b.n	800554a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005544:	461a      	mov	r2, r3
 8005546:	2300      	movs	r3, #0
 8005548:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005556:	461a      	mov	r2, r3
 8005558:	2300      	movs	r3, #0
 800555a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005568:	461a      	mov	r2, r3
 800556a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800556e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	3301      	adds	r3, #1
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800557a:	461a      	mov	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4293      	cmp	r3, r2
 8005580:	d3b5      	bcc.n	80054ee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005594:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80055a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d105      	bne.n	80055b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f043 0210 	orr.w	r2, r3, #16
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	4b0f      	ldr	r3, [pc, #60]	@ (80055fc <USB_DevInit+0x2b4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d005      	beq.n	80055d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f043 0208 	orr.w	r2, r3, #8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d105      	bne.n	80055ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <USB_DevInit+0x2b8>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055f8:	b004      	add	sp, #16
 80055fa:	4770      	bx	lr
 80055fc:	803c3800 	.word	0x803c3800
 8005600:	40000004 	.word	0x40000004

08005604 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3301      	adds	r3, #1
 8005616:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800561e:	d901      	bls.n	8005624 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e01b      	b.n	800565c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	daf2      	bge.n	8005612 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	019b      	lsls	r3, r3, #6
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005648:	d901      	bls.n	800564e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e006      	b.n	800565c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b20      	cmp	r3, #32
 8005658:	d0f0      	beq.n	800563c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005680:	d901      	bls.n	8005686 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e018      	b.n	80056b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	daf2      	bge.n	8005674 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2210      	movs	r2, #16
 8005696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3301      	adds	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056a4:	d901      	bls.n	80056aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e006      	b.n	80056b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d0f0      	beq.n	8005698 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056e4:	4313      	orrs	r3, r2
 80056e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005710:	f023 0303 	bic.w	r3, r3, #3
 8005714:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0301 	and.w	r3, r3, #1
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800576c:	d901      	bls.n	8005772 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e022      	b.n	80057b8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	daf2      	bge.n	8005760 <USB_CoreReset+0xc>

  count = 10U;
 800577a:	230a      	movs	r3, #10
 800577c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800577e:	e002      	b.n	8005786 <USB_CoreReset+0x32>
  {
    count--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3b01      	subs	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f9      	bne.n	8005780 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f043 0201 	orr.w	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	3301      	adds	r3, #1
 800579c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057a4:	d901      	bls.n	80057aa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e006      	b.n	80057b8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d0f0      	beq.n	8005798 <USB_CoreReset+0x44>

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 0;
 80057ca:	4b87      	ldr	r3, [pc, #540]	@ (80059e8 <MX_LWIP_Init+0x224>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 80057d0:	4b85      	ldr	r3, [pc, #532]	@ (80059e8 <MX_LWIP_Init+0x224>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80057d6:	4b84      	ldr	r3, [pc, #528]	@ (80059e8 <MX_LWIP_Init+0x224>)
 80057d8:	2200      	movs	r2, #0
 80057da:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 0;
 80057dc:	4b82      	ldr	r3, [pc, #520]	@ (80059e8 <MX_LWIP_Init+0x224>)
 80057de:	2200      	movs	r2, #0
 80057e0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 80057e2:	4b82      	ldr	r3, [pc, #520]	@ (80059ec <MX_LWIP_Init+0x228>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 80057e8:	4b80      	ldr	r3, [pc, #512]	@ (80059ec <MX_LWIP_Init+0x228>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 80057ee:	4b7f      	ldr	r3, [pc, #508]	@ (80059ec <MX_LWIP_Init+0x228>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80057f4:	4b7d      	ldr	r3, [pc, #500]	@ (80059ec <MX_LWIP_Init+0x228>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80057fa:	4b7d      	ldr	r3, [pc, #500]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005800:	4b7b      	ldr	r3, [pc, #492]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005802:	2200      	movs	r2, #0
 8005804:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005806:	4b7a      	ldr	r3, [pc, #488]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005808:	2200      	movs	r2, #0
 800580a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800580c:	4b78      	ldr	r3, [pc, #480]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 800580e:	2200      	movs	r2, #0
 8005810:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8005812:	f000 fc6a 	bl	80060ea <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005816:	4b74      	ldr	r3, [pc, #464]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	061a      	lsls	r2, r3, #24
 800581c:	4b72      	ldr	r3, [pc, #456]	@ (80059e8 <MX_LWIP_Init+0x224>)
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	041b      	lsls	r3, r3, #16
 8005822:	431a      	orrs	r2, r3
 8005824:	4b70      	ldr	r3, [pc, #448]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005826:	789b      	ldrb	r3, [r3, #2]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	4313      	orrs	r3, r2
 800582c:	4a6e      	ldr	r2, [pc, #440]	@ (80059e8 <MX_LWIP_Init+0x224>)
 800582e:	78d2      	ldrb	r2, [r2, #3]
 8005830:	4313      	orrs	r3, r2
 8005832:	061a      	lsls	r2, r3, #24
 8005834:	4b6c      	ldr	r3, [pc, #432]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	0619      	lsls	r1, r3, #24
 800583a:	4b6b      	ldr	r3, [pc, #428]	@ (80059e8 <MX_LWIP_Init+0x224>)
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	041b      	lsls	r3, r3, #16
 8005840:	4319      	orrs	r1, r3
 8005842:	4b69      	ldr	r3, [pc, #420]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005844:	789b      	ldrb	r3, [r3, #2]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	430b      	orrs	r3, r1
 800584a:	4967      	ldr	r1, [pc, #412]	@ (80059e8 <MX_LWIP_Init+0x224>)
 800584c:	78c9      	ldrb	r1, [r1, #3]
 800584e:	430b      	orrs	r3, r1
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005856:	431a      	orrs	r2, r3
 8005858:	4b63      	ldr	r3, [pc, #396]	@ (80059e8 <MX_LWIP_Init+0x224>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	0619      	lsls	r1, r3, #24
 800585e:	4b62      	ldr	r3, [pc, #392]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	4319      	orrs	r1, r3
 8005866:	4b60      	ldr	r3, [pc, #384]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005868:	789b      	ldrb	r3, [r3, #2]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	430b      	orrs	r3, r1
 800586e:	495e      	ldr	r1, [pc, #376]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005870:	78c9      	ldrb	r1, [r1, #3]
 8005872:	430b      	orrs	r3, r1
 8005874:	0a1b      	lsrs	r3, r3, #8
 8005876:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800587a:	431a      	orrs	r2, r3
 800587c:	4b5a      	ldr	r3, [pc, #360]	@ (80059e8 <MX_LWIP_Init+0x224>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	0619      	lsls	r1, r3, #24
 8005882:	4b59      	ldr	r3, [pc, #356]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	4319      	orrs	r1, r3
 800588a:	4b57      	ldr	r3, [pc, #348]	@ (80059e8 <MX_LWIP_Init+0x224>)
 800588c:	789b      	ldrb	r3, [r3, #2]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	430b      	orrs	r3, r1
 8005892:	4955      	ldr	r1, [pc, #340]	@ (80059e8 <MX_LWIP_Init+0x224>)
 8005894:	78c9      	ldrb	r1, [r1, #3]
 8005896:	430b      	orrs	r3, r1
 8005898:	0e1b      	lsrs	r3, r3, #24
 800589a:	4313      	orrs	r3, r2
 800589c:	4a55      	ldr	r2, [pc, #340]	@ (80059f4 <MX_LWIP_Init+0x230>)
 800589e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80058a0:	4b52      	ldr	r3, [pc, #328]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	061a      	lsls	r2, r3, #24
 80058a6:	4b51      	ldr	r3, [pc, #324]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	041b      	lsls	r3, r3, #16
 80058ac:	431a      	orrs	r2, r3
 80058ae:	4b4f      	ldr	r3, [pc, #316]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058b0:	789b      	ldrb	r3, [r3, #2]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	4313      	orrs	r3, r2
 80058b6:	4a4d      	ldr	r2, [pc, #308]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058b8:	78d2      	ldrb	r2, [r2, #3]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	061a      	lsls	r2, r3, #24
 80058be:	4b4b      	ldr	r3, [pc, #300]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	0619      	lsls	r1, r3, #24
 80058c4:	4b49      	ldr	r3, [pc, #292]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	4319      	orrs	r1, r3
 80058cc:	4b47      	ldr	r3, [pc, #284]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058ce:	789b      	ldrb	r3, [r3, #2]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	430b      	orrs	r3, r1
 80058d4:	4945      	ldr	r1, [pc, #276]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058d6:	78c9      	ldrb	r1, [r1, #3]
 80058d8:	430b      	orrs	r3, r1
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80058e0:	431a      	orrs	r2, r3
 80058e2:	4b42      	ldr	r3, [pc, #264]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	0619      	lsls	r1, r3, #24
 80058e8:	4b40      	ldr	r3, [pc, #256]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	4319      	orrs	r1, r3
 80058f0:	4b3e      	ldr	r3, [pc, #248]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058f2:	789b      	ldrb	r3, [r3, #2]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	430b      	orrs	r3, r1
 80058f8:	493c      	ldr	r1, [pc, #240]	@ (80059ec <MX_LWIP_Init+0x228>)
 80058fa:	78c9      	ldrb	r1, [r1, #3]
 80058fc:	430b      	orrs	r3, r1
 80058fe:	0a1b      	lsrs	r3, r3, #8
 8005900:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005904:	431a      	orrs	r2, r3
 8005906:	4b39      	ldr	r3, [pc, #228]	@ (80059ec <MX_LWIP_Init+0x228>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	0619      	lsls	r1, r3, #24
 800590c:	4b37      	ldr	r3, [pc, #220]	@ (80059ec <MX_LWIP_Init+0x228>)
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	4319      	orrs	r1, r3
 8005914:	4b35      	ldr	r3, [pc, #212]	@ (80059ec <MX_LWIP_Init+0x228>)
 8005916:	789b      	ldrb	r3, [r3, #2]
 8005918:	021b      	lsls	r3, r3, #8
 800591a:	430b      	orrs	r3, r1
 800591c:	4933      	ldr	r1, [pc, #204]	@ (80059ec <MX_LWIP_Init+0x228>)
 800591e:	78c9      	ldrb	r1, [r1, #3]
 8005920:	430b      	orrs	r3, r1
 8005922:	0e1b      	lsrs	r3, r3, #24
 8005924:	4313      	orrs	r3, r2
 8005926:	4a34      	ldr	r2, [pc, #208]	@ (80059f8 <MX_LWIP_Init+0x234>)
 8005928:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800592a:	4b31      	ldr	r3, [pc, #196]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	061a      	lsls	r2, r3, #24
 8005930:	4b2f      	ldr	r3, [pc, #188]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	431a      	orrs	r2, r3
 8005938:	4b2d      	ldr	r3, [pc, #180]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 800593a:	789b      	ldrb	r3, [r3, #2]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	4313      	orrs	r3, r2
 8005940:	4a2b      	ldr	r2, [pc, #172]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005942:	78d2      	ldrb	r2, [r2, #3]
 8005944:	4313      	orrs	r3, r2
 8005946:	061a      	lsls	r2, r3, #24
 8005948:	4b29      	ldr	r3, [pc, #164]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	0619      	lsls	r1, r3, #24
 800594e:	4b28      	ldr	r3, [pc, #160]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	4319      	orrs	r1, r3
 8005956:	4b26      	ldr	r3, [pc, #152]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005958:	789b      	ldrb	r3, [r3, #2]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	430b      	orrs	r3, r1
 800595e:	4924      	ldr	r1, [pc, #144]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005960:	78c9      	ldrb	r1, [r1, #3]
 8005962:	430b      	orrs	r3, r1
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800596a:	431a      	orrs	r2, r3
 800596c:	4b20      	ldr	r3, [pc, #128]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	0619      	lsls	r1, r3, #24
 8005972:	4b1f      	ldr	r3, [pc, #124]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	041b      	lsls	r3, r3, #16
 8005978:	4319      	orrs	r1, r3
 800597a:	4b1d      	ldr	r3, [pc, #116]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 800597c:	789b      	ldrb	r3, [r3, #2]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	430b      	orrs	r3, r1
 8005982:	491b      	ldr	r1, [pc, #108]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005984:	78c9      	ldrb	r1, [r1, #3]
 8005986:	430b      	orrs	r3, r1
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800598e:	431a      	orrs	r2, r3
 8005990:	4b17      	ldr	r3, [pc, #92]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	0619      	lsls	r1, r3, #24
 8005996:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	041b      	lsls	r3, r3, #16
 800599c:	4319      	orrs	r1, r3
 800599e:	4b14      	ldr	r3, [pc, #80]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 80059a0:	789b      	ldrb	r3, [r3, #2]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	430b      	orrs	r3, r1
 80059a6:	4912      	ldr	r1, [pc, #72]	@ (80059f0 <MX_LWIP_Init+0x22c>)
 80059a8:	78c9      	ldrb	r1, [r1, #3]
 80059aa:	430b      	orrs	r3, r1
 80059ac:	0e1b      	lsrs	r3, r3, #24
 80059ae:	4313      	orrs	r3, r2
 80059b0:	4a12      	ldr	r2, [pc, #72]	@ (80059fc <MX_LWIP_Init+0x238>)
 80059b2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80059b4:	4b12      	ldr	r3, [pc, #72]	@ (8005a00 <MX_LWIP_Init+0x23c>)
 80059b6:	9302      	str	r3, [sp, #8]
 80059b8:	4b12      	ldr	r3, [pc, #72]	@ (8005a04 <MX_LWIP_Init+0x240>)
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	2300      	movs	r3, #0
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	4b0e      	ldr	r3, [pc, #56]	@ (80059fc <MX_LWIP_Init+0x238>)
 80059c2:	4a0d      	ldr	r2, [pc, #52]	@ (80059f8 <MX_LWIP_Init+0x234>)
 80059c4:	490b      	ldr	r1, [pc, #44]	@ (80059f4 <MX_LWIP_Init+0x230>)
 80059c6:	4810      	ldr	r0, [pc, #64]	@ (8005a08 <MX_LWIP_Init+0x244>)
 80059c8:	f001 f876 	bl	8006ab8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80059cc:	480e      	ldr	r0, [pc, #56]	@ (8005a08 <MX_LWIP_Init+0x244>)
 80059ce:	f001 fa25 	bl	8006e1c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80059d2:	480d      	ldr	r0, [pc, #52]	@ (8005a08 <MX_LWIP_Init+0x244>)
 80059d4:	f001 fa32 	bl	8006e3c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80059d8:	490c      	ldr	r1, [pc, #48]	@ (8005a0c <MX_LWIP_Init+0x248>)
 80059da:	480b      	ldr	r0, [pc, #44]	@ (8005a08 <MX_LWIP_Init+0x244>)
 80059dc:	f001 fb30 	bl	8007040 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80059e0:	bf00      	nop
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	200007f8 	.word	0x200007f8
 80059ec:	200007fc 	.word	0x200007fc
 80059f0:	20000800 	.word	0x20000800
 80059f4:	200007ec 	.word	0x200007ec
 80059f8:	200007f0 	.word	0x200007f0
 80059fc:	200007f4 	.word	0x200007f4
 8005a00:	0800f831 	.word	0x0800f831
 8005a04:	08005c69 	.word	0x08005c69
 8005a08:	200007b8 	.word	0x200007b8
 8005a0c:	08005a11 	.word	0x08005a11

08005a10 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a30:	4b44      	ldr	r3, [pc, #272]	@ (8005b44 <low_level_init+0x120>)
 8005a32:	4a45      	ldr	r2, [pc, #276]	@ (8005b48 <low_level_init+0x124>)
 8005a34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005a36:	2300      	movs	r3, #0
 8005a38:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005a3a:	2380      	movs	r3, #128	@ 0x80
 8005a3c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005a3e:	23e1      	movs	r3, #225	@ 0xe1
 8005a40:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005a42:	2300      	movs	r3, #0
 8005a44:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005a46:	2300      	movs	r3, #0
 8005a48:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005a4e:	4a3d      	ldr	r2, [pc, #244]	@ (8005b44 <low_level_init+0x120>)
 8005a50:	f107 0308 	add.w	r3, r7, #8
 8005a54:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a56:	4b3b      	ldr	r3, [pc, #236]	@ (8005b44 <low_level_init+0x120>)
 8005a58:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005a5c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a5e:	4b39      	ldr	r3, [pc, #228]	@ (8005b44 <low_level_init+0x120>)
 8005a60:	4a3a      	ldr	r2, [pc, #232]	@ (8005b4c <low_level_init+0x128>)
 8005a62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a64:	4b37      	ldr	r3, [pc, #220]	@ (8005b44 <low_level_init+0x120>)
 8005a66:	4a3a      	ldr	r2, [pc, #232]	@ (8005b50 <low_level_init+0x12c>)
 8005a68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005a6a:	4b36      	ldr	r3, [pc, #216]	@ (8005b44 <low_level_init+0x120>)
 8005a6c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005a70:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a72:	4834      	ldr	r0, [pc, #208]	@ (8005b44 <low_level_init+0x120>)
 8005a74:	f7fb fe6a 	bl	800174c <HAL_ETH_Init>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a7c:	2238      	movs	r2, #56	@ 0x38
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4834      	ldr	r0, [pc, #208]	@ (8005b54 <low_level_init+0x130>)
 8005a82:	f00a f910 	bl	800fca6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005a86:	4b33      	ldr	r3, [pc, #204]	@ (8005b54 <low_level_init+0x130>)
 8005a88:	2221      	movs	r2, #33	@ 0x21
 8005a8a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005a8c:	4b31      	ldr	r3, [pc, #196]	@ (8005b54 <low_level_init+0x130>)
 8005a8e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005a92:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005a94:	4b2f      	ldr	r3, [pc, #188]	@ (8005b54 <low_level_init+0x130>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005a9a:	482f      	ldr	r0, [pc, #188]	@ (8005b58 <low_level_init+0x134>)
 8005a9c:	f000 fed4 	bl	8006848 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2206      	movs	r2, #6
 8005aa4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005aa8:	4b26      	ldr	r3, [pc, #152]	@ (8005b44 <low_level_init+0x120>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ab4:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <low_level_init+0x120>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	785a      	ldrb	r2, [r3, #1]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ac0:	4b20      	ldr	r3, [pc, #128]	@ (8005b44 <low_level_init+0x120>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	789a      	ldrb	r2, [r3, #2]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005acc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b44 <low_level_init+0x120>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	78da      	ldrb	r2, [r3, #3]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b44 <low_level_init+0x120>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	791a      	ldrb	r2, [r3, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ae4:	4b17      	ldr	r3, [pc, #92]	@ (8005b44 <low_level_init+0x120>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	795a      	ldrb	r2, [r3, #5]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005af6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005afe:	f043 030a 	orr.w	r3, r3, #10
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b0a:	4914      	ldr	r1, [pc, #80]	@ (8005b5c <low_level_init+0x138>)
 8005b0c:	4814      	ldr	r0, [pc, #80]	@ (8005b60 <low_level_init+0x13c>)
 8005b0e:	f7fb fb38 	bl	8001182 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005b12:	4813      	ldr	r0, [pc, #76]	@ (8005b60 <low_level_init+0x13c>)
 8005b14:	f7fb fb67 	bl	80011e6 <LAN8742_Init>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d006      	beq.n	8005b2c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fa5e 	bl	8006fe0 <netif_set_link_down>
    netif_set_down(netif);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 f9f5 	bl	8006f14 <netif_set_down>
 8005b2a:	e008      	b.n	8005b3e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f9ee 	bl	8005f14 <ethernet_link_check_state>
 8005b38:	e001      	b.n	8005b3e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8005b3a:	f7fb f8a5 	bl	8000c88 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20005190 	.word	0x20005190
 8005b48:	40028000 	.word	0x40028000
 8005b4c:	20000128 	.word	0x20000128
 8005b50:	20000088 	.word	0x20000088
 8005b54:	20005240 	.word	0x20005240
 8005b58:	080133fc 	.word	0x080133fc
 8005b5c:	2000000c 	.word	0x2000000c
 8005b60:	20005278 	.word	0x20005278

08005b64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b092      	sub	sp, #72	@ 0x48
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005b7c:	f107 030c 	add.w	r3, r7, #12
 8005b80:	2230      	movs	r2, #48	@ 0x30
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f00a f88e 	bl	800fca6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005b8a:	f107 030c 	add.w	r3, r7, #12
 8005b8e:	2230      	movs	r2, #48	@ 0x30
 8005b90:	2100      	movs	r1, #0
 8005b92:	4618      	mov	r0, r3
 8005b94:	f00a f887 	bl	800fca6 <memset>

  for(q = p; q != NULL; q = q->next)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b9c:	e045      	b.n	8005c2a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d902      	bls.n	8005baa <low_level_output+0x46>
      return ERR_IF;
 8005ba4:	f06f 030b 	mvn.w	r3, #11
 8005ba8:	e055      	b.n	8005c56 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bac:	6859      	ldr	r1, [r3, #4]
 8005bae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	3348      	adds	r3, #72	@ 0x48
 8005bba:	443b      	add	r3, r7
 8005bbc:	3b3c      	subs	r3, #60	@ 0x3c
 8005bbe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bc2:	895b      	ldrh	r3, [r3, #10]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc8:	4613      	mov	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	3348      	adds	r3, #72	@ 0x48
 8005bd2:	443b      	add	r3, r7
 8005bd4:	3b38      	subs	r3, #56	@ 0x38
 8005bd6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d011      	beq.n	8005c02 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be0:	1e5a      	subs	r2, r3, #1
 8005be2:	f107 000c 	add.w	r0, r7, #12
 8005be6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005be8:	460b      	mov	r3, r1
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	440b      	add	r3, r1
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	18c1      	adds	r1, r0, r3
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	3348      	adds	r3, #72	@ 0x48
 8005bfc:	443b      	add	r3, r7
 8005bfe:	3b34      	subs	r3, #52	@ 0x34
 8005c00:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	3348      	adds	r3, #72	@ 0x48
 8005c16:	443b      	add	r3, r7
 8005c18:	3b34      	subs	r3, #52	@ 0x34
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c20:	3301      	adds	r3, #1
 8005c22:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1b6      	bne.n	8005b9e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	891b      	ldrh	r3, [r3, #8]
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <low_level_output+0xfc>)
 8005c38:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005c3a:	4a09      	ldr	r2, [pc, #36]	@ (8005c60 <low_level_output+0xfc>)
 8005c3c:	f107 030c 	add.w	r3, r7, #12
 8005c40:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005c42:	4a07      	ldr	r2, [pc, #28]	@ (8005c60 <low_level_output+0xfc>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005c48:	2214      	movs	r2, #20
 8005c4a:	4905      	ldr	r1, [pc, #20]	@ (8005c60 <low_level_output+0xfc>)
 8005c4c:	4805      	ldr	r0, [pc, #20]	@ (8005c64 <low_level_output+0x100>)
 8005c4e:	f7fb fecf 	bl	80019f0 <HAL_ETH_Transmit>

  return errval;
 8005c52:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3748      	adds	r7, #72	@ 0x48
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20005240 	.word	0x20005240
 8005c64:	20005190 	.word	0x20005190

08005c68 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <ethernetif_init+0x1c>
 8005c76:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb0 <ethernetif_init+0x48>)
 8005c78:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005c7c:	490d      	ldr	r1, [pc, #52]	@ (8005cb4 <ethernetif_init+0x4c>)
 8005c7e:	480e      	ldr	r0, [pc, #56]	@ (8005cb8 <ethernetif_init+0x50>)
 8005c80:	f009 ffac 	bl	800fbdc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2273      	movs	r2, #115	@ 0x73
 8005c88:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2274      	movs	r2, #116	@ 0x74
 8005c90:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a09      	ldr	r2, [pc, #36]	@ (8005cbc <ethernetif_init+0x54>)
 8005c98:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a08      	ldr	r2, [pc, #32]	@ (8005cc0 <ethernetif_init+0x58>)
 8005c9e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff febf 	bl	8005a24 <low_level_init>

  return ERR_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	08010a04 	.word	0x08010a04
 8005cb4:	08010a20 	.word	0x08010a20
 8005cb8:	08010a30 	.word	0x08010a30
 8005cbc:	0800dce9 	.word	0x0800dce9
 8005cc0:	08005b65 	.word	0x08005b65

08005cc4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005cd0:	68f9      	ldr	r1, [r7, #12]
 8005cd2:	4807      	ldr	r0, [pc, #28]	@ (8005cf0 <pbuf_free_custom+0x2c>)
 8005cd4:	f000 fe9a 	bl	8006a0c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005cd8:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <pbuf_free_custom+0x30>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d102      	bne.n	8005ce6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005ce0:	4b04      	ldr	r3, [pc, #16]	@ (8005cf4 <pbuf_free_custom+0x30>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	701a      	strb	r2, [r3, #0]
  }
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	080133fc 	.word	0x080133fc
 8005cf4:	2000518c 	.word	0x2000518c

08005cf8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005cfc:	f7fb fb98 	bl	8001430 <HAL_GetTick>
 8005d00:	4603      	mov	r3, r0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	@ 0x38
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	609a      	str	r2, [r3, #8]
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a4e      	ldr	r2, [pc, #312]	@ (8005e60 <HAL_ETH_MspInit+0x158>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	f040 8096 	bne.w	8005e58 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d30:	4a4c      	ldr	r2, [pc, #304]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d38:	4b4a      	ldr	r3, [pc, #296]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d40:	623b      	str	r3, [r7, #32]
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	4b47      	ldr	r3, [pc, #284]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	4a46      	ldr	r2, [pc, #280]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d50:	4b44      	ldr	r3, [pc, #272]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4b41      	ldr	r3, [pc, #260]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	4a40      	ldr	r2, [pc, #256]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d68:	4b3e      	ldr	r3, [pc, #248]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d74:	4b3b      	ldr	r3, [pc, #236]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d78:	4a3a      	ldr	r2, [pc, #232]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d7a:	f043 0304 	orr.w	r3, r3, #4
 8005d7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d80:	4b38      	ldr	r3, [pc, #224]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d8c:	4b35      	ldr	r3, [pc, #212]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d90:	4a34      	ldr	r2, [pc, #208]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d98:	4b32      	ldr	r3, [pc, #200]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005da4:	4b2f      	ldr	r3, [pc, #188]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005daa:	f043 0302 	orr.w	r3, r3, #2
 8005dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8005db0:	4b2c      	ldr	r3, [pc, #176]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005dbc:	4b29      	ldr	r3, [pc, #164]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	4a28      	ldr	r2, [pc, #160]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dc8:	4b26      	ldr	r3, [pc, #152]	@ (8005e64 <HAL_ETH_MspInit+0x15c>)
 8005dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005dd4:	2332      	movs	r3, #50	@ 0x32
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005de0:	2303      	movs	r3, #3
 8005de2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005de4:	230b      	movs	r3, #11
 8005de6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dec:	4619      	mov	r1, r3
 8005dee:	481e      	ldr	r0, [pc, #120]	@ (8005e68 <HAL_ETH_MspInit+0x160>)
 8005df0:	f7fc fd1e 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8005df4:	2386      	movs	r3, #134	@ 0x86
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e00:	2303      	movs	r3, #3
 8005e02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e04:	230b      	movs	r3, #11
 8005e06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4817      	ldr	r0, [pc, #92]	@ (8005e6c <HAL_ETH_MspInit+0x164>)
 8005e10:	f7fc fd0e 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8005e14:	f242 0301 	movw	r3, #8193	@ 0x2001
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e22:	2303      	movs	r3, #3
 8005e24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e26:	230b      	movs	r3, #11
 8005e28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e2e:	4619      	mov	r1, r3
 8005e30:	480f      	ldr	r0, [pc, #60]	@ (8005e70 <HAL_ETH_MspInit+0x168>)
 8005e32:	f7fc fcfd 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005e36:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e44:	2303      	movs	r3, #3
 8005e46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e48:	230b      	movs	r3, #11
 8005e4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e50:	4619      	mov	r1, r3
 8005e52:	4808      	ldr	r0, [pc, #32]	@ (8005e74 <HAL_ETH_MspInit+0x16c>)
 8005e54:	f7fc fcec 	bl	8002830 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005e58:	bf00      	nop
 8005e5a:	3738      	adds	r7, #56	@ 0x38
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40028000 	.word	0x40028000
 8005e64:	40023800 	.word	0x40023800
 8005e68:	40020800 	.word	0x40020800
 8005e6c:	40020000 	.word	0x40020000
 8005e70:	40020400 	.word	0x40020400
 8005e74:	40021800 	.word	0x40021800

08005e78 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005e7c:	4802      	ldr	r0, [pc, #8]	@ (8005e88 <ETH_PHY_IO_Init+0x10>)
 8005e7e:	f7fc f875 	bl	8001f6c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20005190 	.word	0x20005190

08005e8c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return 0;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	4807      	ldr	r0, [pc, #28]	@ (8005ecc <ETH_PHY_IO_ReadReg+0x30>)
 8005eb0:	f7fb feb6 	bl	8001c20 <HAL_ETH_ReadPHYRegister>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ebe:	e000      	b.n	8005ec2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20005190 	.word	0x20005190

08005ed0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	4807      	ldr	r0, [pc, #28]	@ (8005f00 <ETH_PHY_IO_WriteReg+0x30>)
 8005ee4:	f7fb fee7 	bl	8001cb6 <HAL_ETH_WritePHYRegister>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005eee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ef2:	e000      	b.n	8005ef6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20005190 	.word	0x20005190

08005f04 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f08:	f7fb fa92 	bl	8001430 <HAL_GetTick>
 8005f0c:	4603      	mov	r3, r0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b0a0      	sub	sp, #128	@ 0x80
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005f1c:	f107 030c 	add.w	r3, r7, #12
 8005f20:	2264      	movs	r2, #100	@ 0x64
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f009 febe 	bl	800fca6 <memset>
  int32_t PHYLinkState = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f32:	2300      	movs	r3, #0
 8005f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f36:	2300      	movs	r3, #0
 8005f38:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005f3a:	483a      	ldr	r0, [pc, #232]	@ (8006024 <ethernet_link_check_state+0x110>)
 8005f3c:	f7fb f9a0 	bl	8001280 <LAN8742_GetLinkState>
 8005f40:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f48:	089b      	lsrs	r3, r3, #2
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <ethernet_link_check_state+0x5a>
 8005f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	dc09      	bgt.n	8005f6e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005f5a:	4833      	ldr	r0, [pc, #204]	@ (8006028 <ethernet_link_check_state+0x114>)
 8005f5c:	f7fb fcef 	bl	800193e <HAL_ETH_Stop>
    netif_set_down(netif);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 ffd7 	bl	8006f14 <netif_set_down>
    netif_set_link_down(netif);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f001 f83a 	bl	8006fe0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005f6c:	e055      	b.n	800601a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d14e      	bne.n	800601a <ethernet_link_check_state+0x106>
 8005f7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	dd4b      	ble.n	800601a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8005f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f84:	3b02      	subs	r3, #2
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d82a      	bhi.n	8005fe0 <ethernet_link_check_state+0xcc>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <ethernet_link_check_state+0x7c>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa1 	.word	0x08005fa1
 8005f94:	08005fb3 	.word	0x08005fb3
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fd3 	.word	0x08005fd3
      duplex = ETH_FULLDUPLEX_MODE;
 8005fa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fa4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005fa6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005faa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005fac:	2301      	movs	r3, #1
 8005fae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005fb0:	e017      	b.n	8005fe2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005fb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005fba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005fc0:	e00f      	b.n	8005fe2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8005fc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fc6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005fd0:	e007      	b.n	8005fe2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005fde:	e000      	b.n	8005fe2 <ethernet_link_check_state+0xce>
      break;
 8005fe0:	bf00      	nop
    if(linkchanged)
 8005fe2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d018      	beq.n	800601a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	4619      	mov	r1, r3
 8005fee:	480e      	ldr	r0, [pc, #56]	@ (8006028 <ethernet_link_check_state+0x114>)
 8005ff0:	f7fb feaa 	bl	8001d48 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005ff4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ffa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005ffc:	f107 030c 	add.w	r3, r7, #12
 8006000:	4619      	mov	r1, r3
 8006002:	4809      	ldr	r0, [pc, #36]	@ (8006028 <ethernet_link_check_state+0x114>)
 8006004:	f7fb ff97 	bl	8001f36 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006008:	4807      	ldr	r0, [pc, #28]	@ (8006028 <ethernet_link_check_state+0x114>)
 800600a:	f7fb fc39 	bl	8001880 <HAL_ETH_Start>
      netif_set_up(netif);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 ff14 	bl	8006e3c <netif_set_up>
      netif_set_link_up(netif);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 ffaf 	bl	8006f78 <netif_set_link_up>
}
 800601a:	bf00      	nop
 800601c:	3780      	adds	r7, #128	@ 0x80
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20005278 	.word	0x20005278
 8006028:	20005190 	.word	0x20005190

0800602c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af02      	add	r7, sp, #8
 8006032:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006034:	4812      	ldr	r0, [pc, #72]	@ (8006080 <HAL_ETH_RxAllocateCallback+0x54>)
 8006036:	f000 fc7b 	bl	8006930 <memp_malloc_pool>
 800603a:	60f8      	str	r0, [r7, #12]
  if (p)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d014      	beq.n	800606c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f103 0220 	add.w	r2, r3, #32
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <HAL_ETH_RxAllocateCallback+0x58>)
 8006050:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800605a:	9201      	str	r2, [sp, #4]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2241      	movs	r2, #65	@ 0x41
 8006062:	2100      	movs	r1, #0
 8006064:	2000      	movs	r0, #0
 8006066:	f001 f991 	bl	800738c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800606a:	e005      	b.n	8006078 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <HAL_ETH_RxAllocateCallback+0x5c>)
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	080133fc 	.word	0x080133fc
 8006084:	08005cc5 	.word	0x08005cc5
 8006088:	2000518c 	.word	0x2000518c

0800608c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	b21a      	sxth	r2, r3
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	b21b      	sxth	r3, r3
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b21b      	sxth	r3, r3
 80060aa:	b29b      	uxth	r3, r3
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	061a      	lsls	r2, r3, #24
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0a1b      	lsrs	r3, r3, #8
 80060d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	0e1b      	lsrs	r3, r3, #24
 80060dc:	4313      	orrs	r3, r2
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80060f4:	f000 f8d4 	bl	80062a0 <mem_init>
  memp_init();
 80060f8:	f000 fbd6 	bl	80068a8 <memp_init>
  pbuf_init();
  netif_init();
 80060fc:	f000 fcd4 	bl	8006aa8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006100:	f006 ffec 	bl	800d0dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006104:	f001 fd8a 	bl	8007c1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006108:	f006 ffa0 	bl	800d04c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800611e:	4b05      	ldr	r3, [pc, #20]	@ (8006134 <ptr_to_mem+0x20>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	4413      	add	r3, r2
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	200052b0 	.word	0x200052b0

08006138 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006140:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <mem_to_ptr+0x20>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	b29b      	uxth	r3, r3
}
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	200052b0 	.word	0x200052b0

0800615c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006164:	4b45      	ldr	r3, [pc, #276]	@ (800627c <plug_holes+0x120>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	429a      	cmp	r2, r3
 800616c:	d206      	bcs.n	800617c <plug_holes+0x20>
 800616e:	4b44      	ldr	r3, [pc, #272]	@ (8006280 <plug_holes+0x124>)
 8006170:	f240 12df 	movw	r2, #479	@ 0x1df
 8006174:	4943      	ldr	r1, [pc, #268]	@ (8006284 <plug_holes+0x128>)
 8006176:	4844      	ldr	r0, [pc, #272]	@ (8006288 <plug_holes+0x12c>)
 8006178:	f009 fd30 	bl	800fbdc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800617c:	4b43      	ldr	r3, [pc, #268]	@ (800628c <plug_holes+0x130>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d306      	bcc.n	8006194 <plug_holes+0x38>
 8006186:	4b3e      	ldr	r3, [pc, #248]	@ (8006280 <plug_holes+0x124>)
 8006188:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800618c:	4940      	ldr	r1, [pc, #256]	@ (8006290 <plug_holes+0x134>)
 800618e:	483e      	ldr	r0, [pc, #248]	@ (8006288 <plug_holes+0x12c>)
 8006190:	f009 fd24 	bl	800fbdc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	791b      	ldrb	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d006      	beq.n	80061aa <plug_holes+0x4e>
 800619c:	4b38      	ldr	r3, [pc, #224]	@ (8006280 <plug_holes+0x124>)
 800619e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80061a2:	493c      	ldr	r1, [pc, #240]	@ (8006294 <plug_holes+0x138>)
 80061a4:	4838      	ldr	r0, [pc, #224]	@ (8006288 <plug_holes+0x12c>)
 80061a6:	f009 fd19 	bl	800fbdc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 80061b2:	d906      	bls.n	80061c2 <plug_holes+0x66>
 80061b4:	4b32      	ldr	r3, [pc, #200]	@ (8006280 <plug_holes+0x124>)
 80061b6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80061ba:	4937      	ldr	r1, [pc, #220]	@ (8006298 <plug_holes+0x13c>)
 80061bc:	4832      	ldr	r0, [pc, #200]	@ (8006288 <plug_holes+0x12c>)
 80061be:	f009 fd0d 	bl	800fbdc <iprintf>

  nmem = ptr_to_mem(mem->next);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff ffa4 	bl	8006114 <ptr_to_mem>
 80061cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d024      	beq.n	8006220 <plug_holes+0xc4>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	791b      	ldrb	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d120      	bne.n	8006220 <plug_holes+0xc4>
 80061de:	4b2b      	ldr	r3, [pc, #172]	@ (800628c <plug_holes+0x130>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d01b      	beq.n	8006220 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80061e8:	4b2c      	ldr	r3, [pc, #176]	@ (800629c <plug_holes+0x140>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d102      	bne.n	80061f8 <plug_holes+0x9c>
      lfree = mem;
 80061f2:	4a2a      	ldr	r2, [pc, #168]	@ (800629c <plug_holes+0x140>)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	881a      	ldrh	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8006208:	d00a      	beq.n	8006220 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff ff80 	bl	8006114 <ptr_to_mem>
 8006214:	4604      	mov	r4, r0
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7ff ff8e 	bl	8006138 <mem_to_ptr>
 800621c:	4603      	mov	r3, r0
 800621e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	885b      	ldrh	r3, [r3, #2]
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff ff75 	bl	8006114 <ptr_to_mem>
 800622a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	429a      	cmp	r2, r3
 8006232:	d01f      	beq.n	8006274 <plug_holes+0x118>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	791b      	ldrb	r3, [r3, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d11b      	bne.n	8006274 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800623c:	4b17      	ldr	r3, [pc, #92]	@ (800629c <plug_holes+0x140>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	429a      	cmp	r2, r3
 8006244:	d102      	bne.n	800624c <plug_holes+0xf0>
      lfree = pmem;
 8006246:	4a15      	ldr	r2, [pc, #84]	@ (800629c <plug_holes+0x140>)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	881a      	ldrh	r2, [r3, #0]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800625c:	d00a      	beq.n	8006274 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff ff56 	bl	8006114 <ptr_to_mem>
 8006268:	4604      	mov	r4, r0
 800626a:	68b8      	ldr	r0, [r7, #8]
 800626c:	f7ff ff64 	bl	8006138 <mem_to_ptr>
 8006270:	4603      	mov	r3, r0
 8006272:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	bd90      	pop	{r4, r7, pc}
 800627c:	200052b0 	.word	0x200052b0
 8006280:	08010a58 	.word	0x08010a58
 8006284:	08010a88 	.word	0x08010a88
 8006288:	08010aa0 	.word	0x08010aa0
 800628c:	200052b4 	.word	0x200052b4
 8006290:	08010ac8 	.word	0x08010ac8
 8006294:	08010ae4 	.word	0x08010ae4
 8006298:	08010b00 	.word	0x08010b00
 800629c:	200052b8 	.word	0x200052b8

080062a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80062a6:	4b16      	ldr	r3, [pc, #88]	@ (8006300 <mem_init+0x60>)
 80062a8:	4a16      	ldr	r2, [pc, #88]	@ (8006304 <mem_init+0x64>)
 80062aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80062ac:	4b14      	ldr	r3, [pc, #80]	@ (8006300 <mem_init+0x60>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 80062b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80062c6:	f44f 5010 	mov.w	r0, #9216	@ 0x2400
 80062ca:	f7ff ff23 	bl	8006114 <ptr_to_mem>
 80062ce:	4603      	mov	r3, r0
 80062d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006308 <mem_init+0x68>)
 80062d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <mem_init+0x68>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2201      	movs	r2, #1
 80062da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80062dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <mem_init+0x68>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 80062e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80062e6:	4b08      	ldr	r3, [pc, #32]	@ (8006308 <mem_init+0x68>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 80062ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80062f0:	4b03      	ldr	r3, [pc, #12]	@ (8006300 <mem_init+0x60>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a05      	ldr	r2, [pc, #20]	@ (800630c <mem_init+0x6c>)
 80062f6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	200052b0 	.word	0x200052b0
 8006304:	2007d900 	.word	0x2007d900
 8006308:	200052b4 	.word	0x200052b4
 800630c:	200052b8 	.word	0x200052b8

08006310 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff ff0d 	bl	8006138 <mem_to_ptr>
 800631e:	4603      	mov	r3, r0
 8006320:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fef4 	bl	8006114 <ptr_to_mem>
 800632c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	885b      	ldrh	r3, [r3, #2]
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff feee 	bl	8006114 <ptr_to_mem>
 8006338:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8006342:	d818      	bhi.n	8006376 <mem_link_valid+0x66>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	885b      	ldrh	r3, [r3, #2]
 8006348:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800634c:	d813      	bhi.n	8006376 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006352:	8afa      	ldrh	r2, [r7, #22]
 8006354:	429a      	cmp	r2, r3
 8006356:	d004      	beq.n	8006362 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	8afa      	ldrh	r2, [r7, #22]
 800635e:	429a      	cmp	r2, r3
 8006360:	d109      	bne.n	8006376 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006362:	4b08      	ldr	r3, [pc, #32]	@ (8006384 <mem_link_valid+0x74>)
 8006364:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	429a      	cmp	r2, r3
 800636a:	d006      	beq.n	800637a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	885b      	ldrh	r3, [r3, #2]
 8006370:	8afa      	ldrh	r2, [r7, #22]
 8006372:	429a      	cmp	r2, r3
 8006374:	d001      	beq.n	800637a <mem_link_valid+0x6a>
    return 0;
 8006376:	2300      	movs	r3, #0
 8006378:	e000      	b.n	800637c <mem_link_valid+0x6c>
  }
  return 1;
 800637a:	2301      	movs	r3, #1
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	200052b4 	.word	0x200052b4

08006388 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d04c      	beq.n	8006430 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d007      	beq.n	80063b0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80063a0:	4b25      	ldr	r3, [pc, #148]	@ (8006438 <mem_free+0xb0>)
 80063a2:	f240 2273 	movw	r2, #627	@ 0x273
 80063a6:	4925      	ldr	r1, [pc, #148]	@ (800643c <mem_free+0xb4>)
 80063a8:	4825      	ldr	r0, [pc, #148]	@ (8006440 <mem_free+0xb8>)
 80063aa:	f009 fc17 	bl	800fbdc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80063ae:	e040      	b.n	8006432 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3b08      	subs	r3, #8
 80063b4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80063b6:	4b23      	ldr	r3, [pc, #140]	@ (8006444 <mem_free+0xbc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d306      	bcc.n	80063ce <mem_free+0x46>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f103 020c 	add.w	r2, r3, #12
 80063c6:	4b20      	ldr	r3, [pc, #128]	@ (8006448 <mem_free+0xc0>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d907      	bls.n	80063de <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80063ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006438 <mem_free+0xb0>)
 80063d0:	f240 227f 	movw	r2, #639	@ 0x27f
 80063d4:	491d      	ldr	r1, [pc, #116]	@ (800644c <mem_free+0xc4>)
 80063d6:	481a      	ldr	r0, [pc, #104]	@ (8006440 <mem_free+0xb8>)
 80063d8:	f009 fc00 	bl	800fbdc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80063dc:	e029      	b.n	8006432 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	791b      	ldrb	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80063e6:	4b14      	ldr	r3, [pc, #80]	@ (8006438 <mem_free+0xb0>)
 80063e8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80063ec:	4918      	ldr	r1, [pc, #96]	@ (8006450 <mem_free+0xc8>)
 80063ee:	4814      	ldr	r0, [pc, #80]	@ (8006440 <mem_free+0xb8>)
 80063f0:	f009 fbf4 	bl	800fbdc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80063f4:	e01d      	b.n	8006432 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff8a 	bl	8006310 <mem_link_valid>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d107      	bne.n	8006412 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006402:	4b0d      	ldr	r3, [pc, #52]	@ (8006438 <mem_free+0xb0>)
 8006404:	f240 2295 	movw	r2, #661	@ 0x295
 8006408:	4912      	ldr	r1, [pc, #72]	@ (8006454 <mem_free+0xcc>)
 800640a:	480d      	ldr	r0, [pc, #52]	@ (8006440 <mem_free+0xb8>)
 800640c:	f009 fbe6 	bl	800fbdc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006410:	e00f      	b.n	8006432 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006418:	4b0f      	ldr	r3, [pc, #60]	@ (8006458 <mem_free+0xd0>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	429a      	cmp	r2, r3
 8006420:	d202      	bcs.n	8006428 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006422:	4a0d      	ldr	r2, [pc, #52]	@ (8006458 <mem_free+0xd0>)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff fe97 	bl	800615c <plug_holes>
 800642e:	e000      	b.n	8006432 <mem_free+0xaa>
    return;
 8006430:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	08010a58 	.word	0x08010a58
 800643c:	08010b2c 	.word	0x08010b2c
 8006440:	08010aa0 	.word	0x08010aa0
 8006444:	200052b0 	.word	0x200052b0
 8006448:	200052b4 	.word	0x200052b4
 800644c:	08010b50 	.word	0x08010b50
 8006450:	08010b6c 	.word	0x08010b6c
 8006454:	08010b94 	.word	0x08010b94
 8006458:	200052b8 	.word	0x200052b8

0800645c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006468:	887b      	ldrh	r3, [r7, #2]
 800646a:	3303      	adds	r3, #3
 800646c:	b29b      	uxth	r3, r3
 800646e:	f023 0303 	bic.w	r3, r3, #3
 8006472:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006474:	8bfb      	ldrh	r3, [r7, #30]
 8006476:	2b0b      	cmp	r3, #11
 8006478:	d801      	bhi.n	800647e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800647a:	230c      	movs	r3, #12
 800647c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800647e:	8bfb      	ldrh	r3, [r7, #30]
 8006480:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8006484:	d803      	bhi.n	800648e <mem_trim+0x32>
 8006486:	8bfa      	ldrh	r2, [r7, #30]
 8006488:	887b      	ldrh	r3, [r7, #2]
 800648a:	429a      	cmp	r2, r3
 800648c:	d201      	bcs.n	8006492 <mem_trim+0x36>
    return NULL;
 800648e:	2300      	movs	r3, #0
 8006490:	e0cc      	b.n	800662c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006492:	4b68      	ldr	r3, [pc, #416]	@ (8006634 <mem_trim+0x1d8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d304      	bcc.n	80064a6 <mem_trim+0x4a>
 800649c:	4b66      	ldr	r3, [pc, #408]	@ (8006638 <mem_trim+0x1dc>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d306      	bcc.n	80064b4 <mem_trim+0x58>
 80064a6:	4b65      	ldr	r3, [pc, #404]	@ (800663c <mem_trim+0x1e0>)
 80064a8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80064ac:	4964      	ldr	r1, [pc, #400]	@ (8006640 <mem_trim+0x1e4>)
 80064ae:	4865      	ldr	r0, [pc, #404]	@ (8006644 <mem_trim+0x1e8>)
 80064b0:	f009 fb94 	bl	800fbdc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80064b4:	4b5f      	ldr	r3, [pc, #380]	@ (8006634 <mem_trim+0x1d8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d304      	bcc.n	80064c8 <mem_trim+0x6c>
 80064be:	4b5e      	ldr	r3, [pc, #376]	@ (8006638 <mem_trim+0x1dc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d301      	bcc.n	80064cc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	e0af      	b.n	800662c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3b08      	subs	r3, #8
 80064d0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80064d2:	69b8      	ldr	r0, [r7, #24]
 80064d4:	f7ff fe30 	bl	8006138 <mem_to_ptr>
 80064d8:	4603      	mov	r3, r0
 80064da:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	881a      	ldrh	r2, [r3, #0]
 80064e0:	8afb      	ldrh	r3, [r7, #22]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b08      	subs	r3, #8
 80064e8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80064ea:	8bfa      	ldrh	r2, [r7, #30]
 80064ec:	8abb      	ldrh	r3, [r7, #20]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d906      	bls.n	8006500 <mem_trim+0xa4>
 80064f2:	4b52      	ldr	r3, [pc, #328]	@ (800663c <mem_trim+0x1e0>)
 80064f4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80064f8:	4953      	ldr	r1, [pc, #332]	@ (8006648 <mem_trim+0x1ec>)
 80064fa:	4852      	ldr	r0, [pc, #328]	@ (8006644 <mem_trim+0x1e8>)
 80064fc:	f009 fb6e 	bl	800fbdc <iprintf>
  if (newsize > size) {
 8006500:	8bfa      	ldrh	r2, [r7, #30]
 8006502:	8abb      	ldrh	r3, [r7, #20]
 8006504:	429a      	cmp	r2, r3
 8006506:	d901      	bls.n	800650c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006508:	2300      	movs	r3, #0
 800650a:	e08f      	b.n	800662c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800650c:	8bfa      	ldrh	r2, [r7, #30]
 800650e:	8abb      	ldrh	r3, [r7, #20]
 8006510:	429a      	cmp	r2, r3
 8006512:	d101      	bne.n	8006518 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	e089      	b.n	800662c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fdf9 	bl	8006114 <ptr_to_mem>
 8006522:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	791b      	ldrb	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d13f      	bne.n	80065ac <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8006534:	d106      	bne.n	8006544 <mem_trim+0xe8>
 8006536:	4b41      	ldr	r3, [pc, #260]	@ (800663c <mem_trim+0x1e0>)
 8006538:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800653c:	4943      	ldr	r1, [pc, #268]	@ (800664c <mem_trim+0x1f0>)
 800653e:	4841      	ldr	r0, [pc, #260]	@ (8006644 <mem_trim+0x1e8>)
 8006540:	f009 fb4c 	bl	800fbdc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800654a:	8afa      	ldrh	r2, [r7, #22]
 800654c:	8bfb      	ldrh	r3, [r7, #30]
 800654e:	4413      	add	r3, r2
 8006550:	b29b      	uxth	r3, r3
 8006552:	3308      	adds	r3, #8
 8006554:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006556:	4b3e      	ldr	r3, [pc, #248]	@ (8006650 <mem_trim+0x1f4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	429a      	cmp	r2, r3
 800655e:	d106      	bne.n	800656e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff fdd6 	bl	8006114 <ptr_to_mem>
 8006568:	4603      	mov	r3, r0
 800656a:	4a39      	ldr	r2, [pc, #228]	@ (8006650 <mem_trim+0x1f4>)
 800656c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800656e:	89fb      	ldrh	r3, [r7, #14]
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fdcf 	bl	8006114 <ptr_to_mem>
 8006576:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2200      	movs	r2, #0
 800657c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	89ba      	ldrh	r2, [r7, #12]
 8006582:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	8afa      	ldrh	r2, [r7, #22]
 8006588:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	89fa      	ldrh	r2, [r7, #14]
 800658e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8006598:	d047      	beq.n	800662a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fdb8 	bl	8006114 <ptr_to_mem>
 80065a4:	4602      	mov	r2, r0
 80065a6:	89fb      	ldrh	r3, [r7, #14]
 80065a8:	8053      	strh	r3, [r2, #2]
 80065aa:	e03e      	b.n	800662a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80065ac:	8bfb      	ldrh	r3, [r7, #30]
 80065ae:	f103 0214 	add.w	r2, r3, #20
 80065b2:	8abb      	ldrh	r3, [r7, #20]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d838      	bhi.n	800662a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80065b8:	8afa      	ldrh	r2, [r7, #22]
 80065ba:	8bfb      	ldrh	r3, [r7, #30]
 80065bc:	4413      	add	r3, r2
 80065be:	b29b      	uxth	r3, r3
 80065c0:	3308      	adds	r3, #8
 80065c2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 80065cc:	d106      	bne.n	80065dc <mem_trim+0x180>
 80065ce:	4b1b      	ldr	r3, [pc, #108]	@ (800663c <mem_trim+0x1e0>)
 80065d0:	f240 3216 	movw	r2, #790	@ 0x316
 80065d4:	491d      	ldr	r1, [pc, #116]	@ (800664c <mem_trim+0x1f0>)
 80065d6:	481b      	ldr	r0, [pc, #108]	@ (8006644 <mem_trim+0x1e8>)
 80065d8:	f009 fb00 	bl	800fbdc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80065dc:	89fb      	ldrh	r3, [r7, #14]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fd98 	bl	8006114 <ptr_to_mem>
 80065e4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80065e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006650 <mem_trim+0x1f4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d202      	bcs.n	80065f6 <mem_trim+0x19a>
      lfree = mem2;
 80065f0:	4a17      	ldr	r2, [pc, #92]	@ (8006650 <mem_trim+0x1f4>)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2200      	movs	r2, #0
 80065fa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	881a      	ldrh	r2, [r3, #0]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	8afa      	ldrh	r2, [r7, #22]
 8006608:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	89fa      	ldrh	r2, [r7, #14]
 800660e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8006618:	d007      	beq.n	800662a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fd78 	bl	8006114 <ptr_to_mem>
 8006624:	4602      	mov	r2, r0
 8006626:	89fb      	ldrh	r3, [r7, #14]
 8006628:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800662a:	687b      	ldr	r3, [r7, #4]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3720      	adds	r7, #32
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	200052b0 	.word	0x200052b0
 8006638:	200052b4 	.word	0x200052b4
 800663c:	08010a58 	.word	0x08010a58
 8006640:	08010bc8 	.word	0x08010bc8
 8006644:	08010aa0 	.word	0x08010aa0
 8006648:	08010be0 	.word	0x08010be0
 800664c:	08010c00 	.word	0x08010c00
 8006650:	200052b8 	.word	0x200052b8

08006654 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <mem_malloc+0x14>
    return NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	e0d9      	b.n	800681c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006668:	88fb      	ldrh	r3, [r7, #6]
 800666a:	3303      	adds	r3, #3
 800666c:	b29b      	uxth	r3, r3
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006674:	8bbb      	ldrh	r3, [r7, #28]
 8006676:	2b0b      	cmp	r3, #11
 8006678:	d801      	bhi.n	800667e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800667a:	230c      	movs	r3, #12
 800667c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800667e:	8bbb      	ldrh	r3, [r7, #28]
 8006680:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8006684:	d803      	bhi.n	800668e <mem_malloc+0x3a>
 8006686:	8bba      	ldrh	r2, [r7, #28]
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	429a      	cmp	r2, r3
 800668c:	d201      	bcs.n	8006692 <mem_malloc+0x3e>
    return NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	e0c4      	b.n	800681c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006692:	4b64      	ldr	r3, [pc, #400]	@ (8006824 <mem_malloc+0x1d0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fd4e 	bl	8006138 <mem_to_ptr>
 800669c:	4603      	mov	r3, r0
 800669e:	83fb      	strh	r3, [r7, #30]
 80066a0:	e0b4      	b.n	800680c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80066a2:	8bfb      	ldrh	r3, [r7, #30]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fd35 	bl	8006114 <ptr_to_mem>
 80066aa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	791b      	ldrb	r3, [r3, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f040 80a4 	bne.w	80067fe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	8bfb      	ldrh	r3, [r7, #30]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f1a3 0208 	sub.w	r2, r3, #8
 80066c4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80066c6:	429a      	cmp	r2, r3
 80066c8:	f0c0 8099 	bcc.w	80067fe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	8bfb      	ldrh	r3, [r7, #30]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f1a3 0208 	sub.w	r2, r3, #8
 80066da:	8bbb      	ldrh	r3, [r7, #28]
 80066dc:	3314      	adds	r3, #20
 80066de:	429a      	cmp	r2, r3
 80066e0:	d333      	bcc.n	800674a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80066e2:	8bfa      	ldrh	r2, [r7, #30]
 80066e4:	8bbb      	ldrh	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3308      	adds	r3, #8
 80066ec:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80066ee:	8a7b      	ldrh	r3, [r7, #18]
 80066f0:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 80066f4:	d106      	bne.n	8006704 <mem_malloc+0xb0>
 80066f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006828 <mem_malloc+0x1d4>)
 80066f8:	f240 3287 	movw	r2, #903	@ 0x387
 80066fc:	494b      	ldr	r1, [pc, #300]	@ (800682c <mem_malloc+0x1d8>)
 80066fe:	484c      	ldr	r0, [pc, #304]	@ (8006830 <mem_malloc+0x1dc>)
 8006700:	f009 fa6c 	bl	800fbdc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006704:	8a7b      	ldrh	r3, [r7, #18]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fd04 	bl	8006114 <ptr_to_mem>
 800670c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	881a      	ldrh	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8bfa      	ldrh	r2, [r7, #30]
 8006720:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	8a7a      	ldrh	r2, [r7, #18]
 8006726:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2201      	movs	r2, #1
 800672c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8006736:	d00b      	beq.n	8006750 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff fce9 	bl	8006114 <ptr_to_mem>
 8006742:	4602      	mov	r2, r0
 8006744:	8a7b      	ldrh	r3, [r7, #18]
 8006746:	8053      	strh	r3, [r2, #2]
 8006748:	e002      	b.n	8006750 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2201      	movs	r2, #1
 800674e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006750:	4b34      	ldr	r3, [pc, #208]	@ (8006824 <mem_malloc+0x1d0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	429a      	cmp	r2, r3
 8006758:	d127      	bne.n	80067aa <mem_malloc+0x156>
          struct mem *cur = lfree;
 800675a:	4b32      	ldr	r3, [pc, #200]	@ (8006824 <mem_malloc+0x1d0>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006760:	e005      	b.n	800676e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fcd4 	bl	8006114 <ptr_to_mem>
 800676c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	791b      	ldrb	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <mem_malloc+0x12c>
 8006776:	4b2f      	ldr	r3, [pc, #188]	@ (8006834 <mem_malloc+0x1e0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	429a      	cmp	r2, r3
 800677e:	d1f0      	bne.n	8006762 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006780:	4a28      	ldr	r2, [pc, #160]	@ (8006824 <mem_malloc+0x1d0>)
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006786:	4b27      	ldr	r3, [pc, #156]	@ (8006824 <mem_malloc+0x1d0>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	4b2a      	ldr	r3, [pc, #168]	@ (8006834 <mem_malloc+0x1e0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d00b      	beq.n	80067aa <mem_malloc+0x156>
 8006792:	4b24      	ldr	r3, [pc, #144]	@ (8006824 <mem_malloc+0x1d0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	791b      	ldrb	r3, [r3, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d006      	beq.n	80067aa <mem_malloc+0x156>
 800679c:	4b22      	ldr	r3, [pc, #136]	@ (8006828 <mem_malloc+0x1d4>)
 800679e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80067a2:	4925      	ldr	r1, [pc, #148]	@ (8006838 <mem_malloc+0x1e4>)
 80067a4:	4822      	ldr	r0, [pc, #136]	@ (8006830 <mem_malloc+0x1dc>)
 80067a6:	f009 fa19 	bl	800fbdc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80067aa:	8bba      	ldrh	r2, [r7, #28]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	3308      	adds	r3, #8
 80067b2:	4a20      	ldr	r2, [pc, #128]	@ (8006834 <mem_malloc+0x1e0>)
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d906      	bls.n	80067c8 <mem_malloc+0x174>
 80067ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006828 <mem_malloc+0x1d4>)
 80067bc:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80067c0:	491e      	ldr	r1, [pc, #120]	@ (800683c <mem_malloc+0x1e8>)
 80067c2:	481b      	ldr	r0, [pc, #108]	@ (8006830 <mem_malloc+0x1dc>)
 80067c4:	f009 fa0a 	bl	800fbdc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d006      	beq.n	80067e0 <mem_malloc+0x18c>
 80067d2:	4b15      	ldr	r3, [pc, #84]	@ (8006828 <mem_malloc+0x1d4>)
 80067d4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80067d8:	4919      	ldr	r1, [pc, #100]	@ (8006840 <mem_malloc+0x1ec>)
 80067da:	4815      	ldr	r0, [pc, #84]	@ (8006830 <mem_malloc+0x1dc>)
 80067dc:	f009 f9fe 	bl	800fbdc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d006      	beq.n	80067f8 <mem_malloc+0x1a4>
 80067ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006828 <mem_malloc+0x1d4>)
 80067ec:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80067f0:	4914      	ldr	r1, [pc, #80]	@ (8006844 <mem_malloc+0x1f0>)
 80067f2:	480f      	ldr	r0, [pc, #60]	@ (8006830 <mem_malloc+0x1dc>)
 80067f4:	f009 f9f2 	bl	800fbdc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	3308      	adds	r3, #8
 80067fc:	e00e      	b.n	800681c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80067fe:	8bfb      	ldrh	r3, [r7, #30]
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff fc87 	bl	8006114 <ptr_to_mem>
 8006806:	4603      	mov	r3, r0
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800680c:	8bfa      	ldrh	r2, [r7, #30]
 800680e:	8bbb      	ldrh	r3, [r7, #28]
 8006810:	f5c3 5310 	rsb	r3, r3, #9216	@ 0x2400
 8006814:	429a      	cmp	r2, r3
 8006816:	f4ff af44 	bcc.w	80066a2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	200052b8 	.word	0x200052b8
 8006828:	08010a58 	.word	0x08010a58
 800682c:	08010c00 	.word	0x08010c00
 8006830:	08010aa0 	.word	0x08010aa0
 8006834:	200052b4 	.word	0x200052b4
 8006838:	08010c14 	.word	0x08010c14
 800683c:	08010c30 	.word	0x08010c30
 8006840:	08010c60 	.word	0x08010c60
 8006844:	08010c90 	.word	0x08010c90

08006848 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	3303      	adds	r3, #3
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e011      	b.n	800688e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4413      	add	r3, r2
 8006886:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	461a      	mov	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4293      	cmp	r3, r2
 8006898:	dbe7      	blt.n	800686a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80068ae:	2300      	movs	r3, #0
 80068b0:	80fb      	strh	r3, [r7, #6]
 80068b2:	e009      	b.n	80068c8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	4a08      	ldr	r2, [pc, #32]	@ (80068d8 <memp_init+0x30>)
 80068b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff ffc3 	bl	8006848 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	3301      	adds	r3, #1
 80068c6:	80fb      	strh	r3, [r7, #6]
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d9f2      	bls.n	80068b4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	08013474 	.word	0x08013474

080068dc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d012      	beq.n	8006918 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	6812      	ldr	r2, [r2, #0]
 80068fa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d006      	beq.n	8006914 <do_memp_malloc_pool+0x38>
 8006906:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <do_memp_malloc_pool+0x48>)
 8006908:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800690c:	4906      	ldr	r1, [pc, #24]	@ (8006928 <do_memp_malloc_pool+0x4c>)
 800690e:	4807      	ldr	r0, [pc, #28]	@ (800692c <do_memp_malloc_pool+0x50>)
 8006910:	f009 f964 	bl	800fbdc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	e000      	b.n	800691a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	08010cb4 	.word	0x08010cb4
 8006928:	08010ce4 	.word	0x08010ce4
 800692c:	08010d08 	.word	0x08010d08

08006930 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <memp_malloc_pool+0x1c>
 800693e:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <memp_malloc_pool+0x38>)
 8006940:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006944:	4909      	ldr	r1, [pc, #36]	@ (800696c <memp_malloc_pool+0x3c>)
 8006946:	480a      	ldr	r0, [pc, #40]	@ (8006970 <memp_malloc_pool+0x40>)
 8006948:	f009 f948 	bl	800fbdc <iprintf>
  if (desc == NULL) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <memp_malloc_pool+0x26>
    return NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	e003      	b.n	800695e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff ffc0 	bl	80068dc <do_memp_malloc_pool>
 800695c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	08010cb4 	.word	0x08010cb4
 800696c:	08010d30 	.word	0x08010d30
 8006970:	08010d08 	.word	0x08010d08

08006974 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	2b08      	cmp	r3, #8
 8006982:	d908      	bls.n	8006996 <memp_malloc+0x22>
 8006984:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <memp_malloc+0x3c>)
 8006986:	f240 1257 	movw	r2, #343	@ 0x157
 800698a:	490a      	ldr	r1, [pc, #40]	@ (80069b4 <memp_malloc+0x40>)
 800698c:	480a      	ldr	r0, [pc, #40]	@ (80069b8 <memp_malloc+0x44>)
 800698e:	f009 f925 	bl	800fbdc <iprintf>
 8006992:	2300      	movs	r3, #0
 8006994:	e008      	b.n	80069a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	4a08      	ldr	r2, [pc, #32]	@ (80069bc <memp_malloc+0x48>)
 800699a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff ff9c 	bl	80068dc <do_memp_malloc_pool>
 80069a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80069a6:	68fb      	ldr	r3, [r7, #12]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	08010cb4 	.word	0x08010cb4
 80069b4:	08010d44 	.word	0x08010d44
 80069b8:	08010d08 	.word	0x08010d08
 80069bc:	08013474 	.word	0x08013474

080069c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d006      	beq.n	80069e2 <do_memp_free_pool+0x22>
 80069d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006a00 <do_memp_free_pool+0x40>)
 80069d6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80069da:	490a      	ldr	r1, [pc, #40]	@ (8006a04 <do_memp_free_pool+0x44>)
 80069dc:	480a      	ldr	r0, [pc, #40]	@ (8006a08 <do_memp_free_pool+0x48>)
 80069de:	f009 f8fd 	bl	800fbdc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	08010cb4 	.word	0x08010cb4
 8006a04:	08010d64 	.word	0x08010d64
 8006a08:	08010d08 	.word	0x08010d08

08006a0c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <memp_free_pool+0x1e>
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a48 <memp_free_pool+0x3c>)
 8006a1e:	f240 1295 	movw	r2, #405	@ 0x195
 8006a22:	490a      	ldr	r1, [pc, #40]	@ (8006a4c <memp_free_pool+0x40>)
 8006a24:	480a      	ldr	r0, [pc, #40]	@ (8006a50 <memp_free_pool+0x44>)
 8006a26:	f009 f8d9 	bl	800fbdc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <memp_free_pool+0x34>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ffc1 	bl	80069c0 <do_memp_free_pool>
 8006a3e:	e000      	b.n	8006a42 <memp_free_pool+0x36>
    return;
 8006a40:	bf00      	nop
}
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	08010cb4 	.word	0x08010cb4
 8006a4c:	08010d30 	.word	0x08010d30
 8006a50:	08010d08 	.word	0x08010d08

08006a54 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	6039      	str	r1, [r7, #0]
 8006a5e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	2b08      	cmp	r3, #8
 8006a64:	d907      	bls.n	8006a76 <memp_free+0x22>
 8006a66:	4b0c      	ldr	r3, [pc, #48]	@ (8006a98 <memp_free+0x44>)
 8006a68:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006a6c:	490b      	ldr	r1, [pc, #44]	@ (8006a9c <memp_free+0x48>)
 8006a6e:	480c      	ldr	r0, [pc, #48]	@ (8006aa0 <memp_free+0x4c>)
 8006a70:	f009 f8b4 	bl	800fbdc <iprintf>
 8006a74:	e00c      	b.n	8006a90 <memp_free+0x3c>

  if (mem == NULL) {
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	4a09      	ldr	r2, [pc, #36]	@ (8006aa4 <memp_free+0x50>)
 8006a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff ff9a 	bl	80069c0 <do_memp_free_pool>
 8006a8c:	e000      	b.n	8006a90 <memp_free+0x3c>
    return;
 8006a8e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	08010cb4 	.word	0x08010cb4
 8006a9c:	08010d84 	.word	0x08010d84
 8006aa0:	08010d08 	.word	0x08010d08
 8006aa4:	08013474 	.word	0x08013474

08006aa8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006aac:	bf00      	nop
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d108      	bne.n	8006ade <netif_add+0x26>
 8006acc:	4b57      	ldr	r3, [pc, #348]	@ (8006c2c <netif_add+0x174>)
 8006ace:	f240 1227 	movw	r2, #295	@ 0x127
 8006ad2:	4957      	ldr	r1, [pc, #348]	@ (8006c30 <netif_add+0x178>)
 8006ad4:	4857      	ldr	r0, [pc, #348]	@ (8006c34 <netif_add+0x17c>)
 8006ad6:	f009 f881 	bl	800fbdc <iprintf>
 8006ada:	2300      	movs	r3, #0
 8006adc:	e0a2      	b.n	8006c24 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d108      	bne.n	8006af6 <netif_add+0x3e>
 8006ae4:	4b51      	ldr	r3, [pc, #324]	@ (8006c2c <netif_add+0x174>)
 8006ae6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006aea:	4953      	ldr	r1, [pc, #332]	@ (8006c38 <netif_add+0x180>)
 8006aec:	4851      	ldr	r0, [pc, #324]	@ (8006c34 <netif_add+0x17c>)
 8006aee:	f009 f875 	bl	800fbdc <iprintf>
 8006af2:	2300      	movs	r3, #0
 8006af4:	e096      	b.n	8006c24 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006afc:	4b4f      	ldr	r3, [pc, #316]	@ (8006c3c <netif_add+0x184>)
 8006afe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006b06:	4b4d      	ldr	r3, [pc, #308]	@ (8006c3c <netif_add+0x184>)
 8006b08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006b10:	4b4a      	ldr	r3, [pc, #296]	@ (8006c3c <netif_add+0x184>)
 8006b12:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a45      	ldr	r2, [pc, #276]	@ (8006c40 <netif_add+0x188>)
 8006b2a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a3a      	ldr	r2, [r7, #32]
 8006b44:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006b46:	4b3f      	ldr	r3, [pc, #252]	@ (8006c44 <netif_add+0x18c>)
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b54:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f913 	bl	8006d88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	4798      	blx	r3
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <netif_add+0xba>
    return NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e058      	b.n	8006c24 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b78:	2bff      	cmp	r3, #255	@ 0xff
 8006b7a:	d103      	bne.n	8006b84 <netif_add+0xcc>
        netif->num = 0;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006b88:	4b2f      	ldr	r3, [pc, #188]	@ (8006c48 <netif_add+0x190>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	e02b      	b.n	8006be8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d106      	bne.n	8006ba6 <netif_add+0xee>
 8006b98:	4b24      	ldr	r3, [pc, #144]	@ (8006c2c <netif_add+0x174>)
 8006b9a:	f240 128b 	movw	r2, #395	@ 0x18b
 8006b9e:	492b      	ldr	r1, [pc, #172]	@ (8006c4c <netif_add+0x194>)
 8006ba0:	4824      	ldr	r0, [pc, #144]	@ (8006c34 <netif_add+0x17c>)
 8006ba2:	f009 f81b 	bl	800fbdc <iprintf>
        num_netifs++;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2bff      	cmp	r3, #255	@ 0xff
 8006bb0:	dd06      	ble.n	8006bc0 <netif_add+0x108>
 8006bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c2c <netif_add+0x174>)
 8006bb4:	f240 128d 	movw	r2, #397	@ 0x18d
 8006bb8:	4925      	ldr	r1, [pc, #148]	@ (8006c50 <netif_add+0x198>)
 8006bba:	481e      	ldr	r0, [pc, #120]	@ (8006c34 <netif_add+0x17c>)
 8006bbc:	f009 f80e 	bl	800fbdc <iprintf>
        if (netif2->num == netif->num) {
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d108      	bne.n	8006be2 <netif_add+0x12a>
          netif->num++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006be0:	e005      	b.n	8006bee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1d0      	bne.n	8006b90 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1be      	bne.n	8006b72 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006bfa:	2bfe      	cmp	r3, #254	@ 0xfe
 8006bfc:	d103      	bne.n	8006c06 <netif_add+0x14e>
    netif_num = 0;
 8006bfe:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <netif_add+0x18c>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e006      	b.n	8006c14 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	4b0c      	ldr	r3, [pc, #48]	@ (8006c44 <netif_add+0x18c>)
 8006c12:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006c14:	4b0c      	ldr	r3, [pc, #48]	@ (8006c48 <netif_add+0x190>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c48 <netif_add+0x190>)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006c22:	68fb      	ldr	r3, [r7, #12]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	08010da0 	.word	0x08010da0
 8006c30:	08010e34 	.word	0x08010e34
 8006c34:	08010df0 	.word	0x08010df0
 8006c38:	08010e50 	.word	0x08010e50
 8006c3c:	080134d8 	.word	0x080134d8
 8006c40:	08007063 	.word	0x08007063
 8006c44:	200081b0 	.word	0x200081b0
 8006c48:	200081a8 	.word	0x200081a8
 8006c4c:	08010e74 	.word	0x08010e74
 8006c50:	08010e88 	.word	0x08010e88

08006c54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f002 fb25 	bl	80092b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f006 fbc1 	bl	800d3f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <netif_do_set_ipaddr+0x20>
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d00 <netif_do_set_ipaddr+0x88>)
 8006c8c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8006c90:	491c      	ldr	r1, [pc, #112]	@ (8006d04 <netif_do_set_ipaddr+0x8c>)
 8006c92:	481d      	ldr	r0, [pc, #116]	@ (8006d08 <netif_do_set_ipaddr+0x90>)
 8006c94:	f008 ffa2 	bl	800fbdc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <netif_do_set_ipaddr+0x34>
 8006c9e:	4b18      	ldr	r3, [pc, #96]	@ (8006d00 <netif_do_set_ipaddr+0x88>)
 8006ca0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006ca4:	4917      	ldr	r1, [pc, #92]	@ (8006d04 <netif_do_set_ipaddr+0x8c>)
 8006ca6:	4818      	ldr	r0, [pc, #96]	@ (8006d08 <netif_do_set_ipaddr+0x90>)
 8006ca8:	f008 ff98 	bl	800fbdc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d01c      	beq.n	8006cf4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006cca:	f107 0314 	add.w	r3, r7, #20
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ffbf 	bl	8006c54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <netif_do_set_ipaddr+0x6a>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	e000      	b.n	8006ce4 <netif_do_set_ipaddr+0x6c>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006ce8:	2101      	movs	r1, #1
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f8d2 	bl	8006e94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3718      	adds	r7, #24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	08010da0 	.word	0x08010da0
 8006d04:	08010eb8 	.word	0x08010eb8
 8006d08:	08010df0 	.word	0x08010df0

08006d0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d00a      	beq.n	8006d3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <netif_do_set_netmask+0x26>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	e000      	b.n	8006d34 <netif_do_set_netmask+0x28>
 8006d32:	2300      	movs	r3, #0
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d00a      	beq.n	8006d7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <netif_do_set_gw+0x26>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	e000      	b.n	8006d72 <netif_do_set_gw+0x28>
 8006d70:	2300      	movs	r3, #0
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006da4:	4b1c      	ldr	r3, [pc, #112]	@ (8006e18 <netif_set_addr+0x90>)
 8006da6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006dae:	4b1a      	ldr	r3, [pc, #104]	@ (8006e18 <netif_set_addr+0x90>)
 8006db0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006db8:	4b17      	ldr	r3, [pc, #92]	@ (8006e18 <netif_set_addr+0x90>)
 8006dba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <netif_set_addr+0x42>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <netif_set_addr+0x46>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <netif_set_addr+0x48>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006dd8:	f107 0310 	add.w	r3, r7, #16
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68b9      	ldr	r1, [r7, #8]
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff ff49 	bl	8006c78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff ff8e 	bl	8006d0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff ffa8 	bl	8006d4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006e00:	f107 0310 	add.w	r3, r7, #16
 8006e04:	461a      	mov	r2, r3
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff ff35 	bl	8006c78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006e0e:	bf00      	nop
 8006e10:	3720      	adds	r7, #32
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	080134d8 	.word	0x080134d8

08006e1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006e24:	4a04      	ldr	r2, [pc, #16]	@ (8006e38 <netif_set_default+0x1c>)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	200081ac 	.word	0x200081ac

08006e3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d107      	bne.n	8006e5a <netif_set_up+0x1e>
 8006e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e88 <netif_set_up+0x4c>)
 8006e4c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006e50:	490e      	ldr	r1, [pc, #56]	@ (8006e8c <netif_set_up+0x50>)
 8006e52:	480f      	ldr	r0, [pc, #60]	@ (8006e90 <netif_set_up+0x54>)
 8006e54:	f008 fec2 	bl	800fbdc <iprintf>
 8006e58:	e013      	b.n	8006e82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10c      	bne.n	8006e82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006e7a:	2103      	movs	r1, #3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f809 	bl	8006e94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	08010da0 	.word	0x08010da0
 8006e8c:	08010f28 	.word	0x08010f28
 8006e90:	08010df0 	.word	0x08010df0

08006e94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <netif_issue_reports+0x20>
 8006ea6:	4b18      	ldr	r3, [pc, #96]	@ (8006f08 <netif_issue_reports+0x74>)
 8006ea8:	f240 326d 	movw	r2, #877	@ 0x36d
 8006eac:	4917      	ldr	r1, [pc, #92]	@ (8006f0c <netif_issue_reports+0x78>)
 8006eae:	4818      	ldr	r0, [pc, #96]	@ (8006f10 <netif_issue_reports+0x7c>)
 8006eb0:	f008 fe94 	bl	800fbdc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d01e      	beq.n	8006f00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006ec8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d017      	beq.n	8006f00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d013      	beq.n	8006f02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	3304      	adds	r3, #4
 8006ede:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00e      	beq.n	8006f02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f007 f9e3 	bl	800e2c4 <etharp_request>
 8006efe:	e000      	b.n	8006f02 <netif_issue_reports+0x6e>
    return;
 8006f00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	08010da0 	.word	0x08010da0
 8006f0c:	08010f44 	.word	0x08010f44
 8006f10:	08010df0 	.word	0x08010df0

08006f14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <netif_set_down+0x1e>
 8006f22:	4b12      	ldr	r3, [pc, #72]	@ (8006f6c <netif_set_down+0x58>)
 8006f24:	f240 329b 	movw	r2, #923	@ 0x39b
 8006f28:	4911      	ldr	r1, [pc, #68]	@ (8006f70 <netif_set_down+0x5c>)
 8006f2a:	4812      	ldr	r0, [pc, #72]	@ (8006f74 <netif_set_down+0x60>)
 8006f2c:	f008 fe56 	bl	800fbdc <iprintf>
 8006f30:	e019      	b.n	8006f66 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f006 fd6d 	bl	800da40 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	08010da0 	.word	0x08010da0
 8006f70:	08010f68 	.word	0x08010f68
 8006f74:	08010df0 	.word	0x08010df0

08006f78 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d107      	bne.n	8006f96 <netif_set_link_up+0x1e>
 8006f86:	4b13      	ldr	r3, [pc, #76]	@ (8006fd4 <netif_set_link_up+0x5c>)
 8006f88:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006f8c:	4912      	ldr	r1, [pc, #72]	@ (8006fd8 <netif_set_link_up+0x60>)
 8006f8e:	4813      	ldr	r0, [pc, #76]	@ (8006fdc <netif_set_link_up+0x64>)
 8006f90:	f008 fe24 	bl	800fbdc <iprintf>
 8006f94:	e01b      	b.n	8006fce <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d114      	bne.n	8006fce <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006faa:	f043 0304 	orr.w	r3, r3, #4
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006fb6:	2103      	movs	r1, #3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7ff ff6b 	bl	8006e94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <netif_set_link_up+0x56>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	08010da0 	.word	0x08010da0
 8006fd8:	08010f88 	.word	0x08010f88
 8006fdc:	08010df0 	.word	0x08010df0

08006fe0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <netif_set_link_down+0x1e>
 8006fee:	4b11      	ldr	r3, [pc, #68]	@ (8007034 <netif_set_link_down+0x54>)
 8006ff0:	f240 4206 	movw	r2, #1030	@ 0x406
 8006ff4:	4910      	ldr	r1, [pc, #64]	@ (8007038 <netif_set_link_down+0x58>)
 8006ff6:	4811      	ldr	r0, [pc, #68]	@ (800703c <netif_set_link_down+0x5c>)
 8006ff8:	f008 fdf0 	bl	800fbdc <iprintf>
 8006ffc:	e017      	b.n	800702e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d010      	beq.n	800702e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007012:	f023 0304 	bic.w	r3, r3, #4
 8007016:	b2da      	uxtb	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <netif_set_link_down+0x4e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	08010da0 	.word	0x08010da0
 8007038:	08010fac 	.word	0x08010fac
 800703c:	08010df0 	.word	0x08010df0

08007040 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	61da      	str	r2, [r3, #28]
  }
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	60f8      	str	r0, [r7, #12]
 800706a:	60b9      	str	r1, [r7, #8]
 800706c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800706e:	f06f 030b 	mvn.w	r3, #11
}
 8007072:	4618      	mov	r0, r3
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d013      	beq.n	80070b8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007090:	4b0d      	ldr	r3, [pc, #52]	@ (80070c8 <netif_get_by_index+0x48>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	e00c      	b.n	80070b2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800709e:	3301      	adds	r3, #1
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	79fa      	ldrb	r2, [r7, #7]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d101      	bne.n	80070ac <netif_get_by_index+0x2c>
        return netif; /* found! */
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	e006      	b.n	80070ba <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1ef      	bne.n	8007098 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	200081a8 	.word	0x200081a8

080070cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80070d0:	4b03      	ldr	r3, [pc, #12]	@ (80070e0 <pbuf_pool_is_empty+0x14>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80070d6:	bf00      	nop
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	200081b1 	.word	0x200081b1

080070e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	4611      	mov	r1, r2
 80070f0:	461a      	mov	r2, r3
 80070f2:	460b      	mov	r3, r1
 80070f4:	80fb      	strh	r3, [r7, #6]
 80070f6:	4613      	mov	r3, r2
 80070f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	88fa      	ldrh	r2, [r7, #6]
 800710a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	88ba      	ldrh	r2, [r7, #4]
 8007110:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007112:	8b3b      	ldrh	r3, [r7, #24]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	7f3a      	ldrb	r2, [r7, #28]
 800711e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	73da      	strb	r2, [r3, #15]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b08c      	sub	sp, #48	@ 0x30
 800713c:	af02      	add	r7, sp, #8
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
 8007142:	460b      	mov	r3, r1
 8007144:	80bb      	strh	r3, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800714a:	79fb      	ldrb	r3, [r7, #7]
 800714c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800714e:	887b      	ldrh	r3, [r7, #2]
 8007150:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007154:	d07f      	beq.n	8007256 <pbuf_alloc+0x11e>
 8007156:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800715a:	f300 80c8 	bgt.w	80072ee <pbuf_alloc+0x1b6>
 800715e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007162:	d010      	beq.n	8007186 <pbuf_alloc+0x4e>
 8007164:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007168:	f300 80c1 	bgt.w	80072ee <pbuf_alloc+0x1b6>
 800716c:	2b01      	cmp	r3, #1
 800716e:	d002      	beq.n	8007176 <pbuf_alloc+0x3e>
 8007170:	2b41      	cmp	r3, #65	@ 0x41
 8007172:	f040 80bc 	bne.w	80072ee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007176:	887a      	ldrh	r2, [r7, #2]
 8007178:	88bb      	ldrh	r3, [r7, #4]
 800717a:	4619      	mov	r1, r3
 800717c:	2000      	movs	r0, #0
 800717e:	f000 f8d1 	bl	8007324 <pbuf_alloc_reference>
 8007182:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007184:	e0bd      	b.n	8007302 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007186:	2300      	movs	r3, #0
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800718e:	88bb      	ldrh	r3, [r7, #4]
 8007190:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007192:	2008      	movs	r0, #8
 8007194:	f7ff fbee 	bl	8006974 <memp_malloc>
 8007198:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80071a0:	f7ff ff94 	bl	80070cc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80071aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071ac:	f000 faa8 	bl	8007700 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	e0a7      	b.n	8007304 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80071b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071b6:	3303      	adds	r3, #3
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	b29b      	uxth	r3, r3
 80071c0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	8b7a      	ldrh	r2, [r7, #26]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bf28      	it	cs
 80071cc:	4613      	movcs	r3, r2
 80071ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80071d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071d2:	3310      	adds	r3, #16
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4413      	add	r3, r2
 80071d8:	3303      	adds	r3, #3
 80071da:	f023 0303 	bic.w	r3, r3, #3
 80071de:	4618      	mov	r0, r3
 80071e0:	89f9      	ldrh	r1, [r7, #14]
 80071e2:	8b7a      	ldrh	r2, [r7, #26]
 80071e4:	2300      	movs	r3, #0
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	887b      	ldrh	r3, [r7, #2]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	460b      	mov	r3, r1
 80071ee:	4601      	mov	r1, r0
 80071f0:	6938      	ldr	r0, [r7, #16]
 80071f2:	f7ff ff77 	bl	80070e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d006      	beq.n	8007210 <pbuf_alloc+0xd8>
 8007202:	4b42      	ldr	r3, [pc, #264]	@ (800730c <pbuf_alloc+0x1d4>)
 8007204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007208:	4941      	ldr	r1, [pc, #260]	@ (8007310 <pbuf_alloc+0x1d8>)
 800720a:	4842      	ldr	r0, [pc, #264]	@ (8007314 <pbuf_alloc+0x1dc>)
 800720c:	f008 fce6 	bl	800fbdc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007210:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007212:	3303      	adds	r3, #3
 8007214:	f023 0303 	bic.w	r3, r3, #3
 8007218:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800721c:	d106      	bne.n	800722c <pbuf_alloc+0xf4>
 800721e:	4b3b      	ldr	r3, [pc, #236]	@ (800730c <pbuf_alloc+0x1d4>)
 8007220:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007224:	493c      	ldr	r1, [pc, #240]	@ (8007318 <pbuf_alloc+0x1e0>)
 8007226:	483b      	ldr	r0, [pc, #236]	@ (8007314 <pbuf_alloc+0x1dc>)
 8007228:	f008 fcd8 	bl	800fbdc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800722c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24
 8007236:	e002      	b.n	800723e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007242:	8b7a      	ldrh	r2, [r7, #26]
 8007244:	89fb      	ldrh	r3, [r7, #14]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800724e:	8b7b      	ldrh	r3, [r7, #26]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d19e      	bne.n	8007192 <pbuf_alloc+0x5a>
      break;
 8007254:	e055      	b.n	8007302 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007256:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007258:	3303      	adds	r3, #3
 800725a:	b29b      	uxth	r3, r3
 800725c:	f023 0303 	bic.w	r3, r3, #3
 8007260:	b29a      	uxth	r2, r3
 8007262:	88bb      	ldrh	r3, [r7, #4]
 8007264:	3303      	adds	r3, #3
 8007266:	b29b      	uxth	r3, r3
 8007268:	f023 0303 	bic.w	r3, r3, #3
 800726c:	b29b      	uxth	r3, r3
 800726e:	4413      	add	r3, r2
 8007270:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007272:	8b3b      	ldrh	r3, [r7, #24]
 8007274:	3310      	adds	r3, #16
 8007276:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007278:	8b3a      	ldrh	r2, [r7, #24]
 800727a:	88bb      	ldrh	r3, [r7, #4]
 800727c:	3303      	adds	r3, #3
 800727e:	f023 0303 	bic.w	r3, r3, #3
 8007282:	429a      	cmp	r2, r3
 8007284:	d306      	bcc.n	8007294 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007286:	8afa      	ldrh	r2, [r7, #22]
 8007288:	88bb      	ldrh	r3, [r7, #4]
 800728a:	3303      	adds	r3, #3
 800728c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007290:	429a      	cmp	r2, r3
 8007292:	d201      	bcs.n	8007298 <pbuf_alloc+0x160>
        return NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	e035      	b.n	8007304 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007298:	8afb      	ldrh	r3, [r7, #22]
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff f9da 	bl	8006654 <mem_malloc>
 80072a0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <pbuf_alloc+0x174>
        return NULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e02b      	b.n	8007304 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80072ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80072ae:	3310      	adds	r3, #16
 80072b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b2:	4413      	add	r3, r2
 80072b4:	3303      	adds	r3, #3
 80072b6:	f023 0303 	bic.w	r3, r3, #3
 80072ba:	4618      	mov	r0, r3
 80072bc:	88b9      	ldrh	r1, [r7, #4]
 80072be:	88ba      	ldrh	r2, [r7, #4]
 80072c0:	2300      	movs	r3, #0
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	887b      	ldrh	r3, [r7, #2]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	460b      	mov	r3, r1
 80072ca:	4601      	mov	r1, r0
 80072cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072ce:	f7ff ff09 	bl	80070e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d010      	beq.n	8007300 <pbuf_alloc+0x1c8>
 80072de:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <pbuf_alloc+0x1d4>)
 80072e0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80072e4:	490d      	ldr	r1, [pc, #52]	@ (800731c <pbuf_alloc+0x1e4>)
 80072e6:	480b      	ldr	r0, [pc, #44]	@ (8007314 <pbuf_alloc+0x1dc>)
 80072e8:	f008 fc78 	bl	800fbdc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80072ec:	e008      	b.n	8007300 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80072ee:	4b07      	ldr	r3, [pc, #28]	@ (800730c <pbuf_alloc+0x1d4>)
 80072f0:	f240 1227 	movw	r2, #295	@ 0x127
 80072f4:	490a      	ldr	r1, [pc, #40]	@ (8007320 <pbuf_alloc+0x1e8>)
 80072f6:	4807      	ldr	r0, [pc, #28]	@ (8007314 <pbuf_alloc+0x1dc>)
 80072f8:	f008 fc70 	bl	800fbdc <iprintf>
      return NULL;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e001      	b.n	8007304 <pbuf_alloc+0x1cc>
      break;
 8007300:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007304:	4618      	mov	r0, r3
 8007306:	3728      	adds	r7, #40	@ 0x28
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	08010fd0 	.word	0x08010fd0
 8007310:	08011000 	.word	0x08011000
 8007314:	08011030 	.word	0x08011030
 8007318:	08011058 	.word	0x08011058
 800731c:	0801108c 	.word	0x0801108c
 8007320:	080110b8 	.word	0x080110b8

08007324 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af02      	add	r7, sp, #8
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	807b      	strh	r3, [r7, #2]
 8007330:	4613      	mov	r3, r2
 8007332:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007334:	883b      	ldrh	r3, [r7, #0]
 8007336:	2b41      	cmp	r3, #65	@ 0x41
 8007338:	d009      	beq.n	800734e <pbuf_alloc_reference+0x2a>
 800733a:	883b      	ldrh	r3, [r7, #0]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d006      	beq.n	800734e <pbuf_alloc_reference+0x2a>
 8007340:	4b0f      	ldr	r3, [pc, #60]	@ (8007380 <pbuf_alloc_reference+0x5c>)
 8007342:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007346:	490f      	ldr	r1, [pc, #60]	@ (8007384 <pbuf_alloc_reference+0x60>)
 8007348:	480f      	ldr	r0, [pc, #60]	@ (8007388 <pbuf_alloc_reference+0x64>)
 800734a:	f008 fc47 	bl	800fbdc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800734e:	2007      	movs	r0, #7
 8007350:	f7ff fb10 	bl	8006974 <memp_malloc>
 8007354:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800735c:	2300      	movs	r3, #0
 800735e:	e00b      	b.n	8007378 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007360:	8879      	ldrh	r1, [r7, #2]
 8007362:	887a      	ldrh	r2, [r7, #2]
 8007364:	2300      	movs	r3, #0
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	883b      	ldrh	r3, [r7, #0]
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	460b      	mov	r3, r1
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7ff feb7 	bl	80070e4 <pbuf_init_alloced_pbuf>
  return p;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	08010fd0 	.word	0x08010fd0
 8007384:	080110d4 	.word	0x080110d4
 8007388:	08011030 	.word	0x08011030

0800738c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af02      	add	r7, sp, #8
 8007392:	607b      	str	r3, [r7, #4]
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	460b      	mov	r3, r1
 800739a:	81bb      	strh	r3, [r7, #12]
 800739c:	4613      	mov	r3, r2
 800739e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80073a4:	8a7b      	ldrh	r3, [r7, #18]
 80073a6:	3303      	adds	r3, #3
 80073a8:	f023 0203 	bic.w	r2, r3, #3
 80073ac:	89bb      	ldrh	r3, [r7, #12]
 80073ae:	441a      	add	r2, r3
 80073b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d901      	bls.n	80073ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e018      	b.n	80073ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d007      	beq.n	80073d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80073c0:	8a7b      	ldrh	r3, [r7, #18]
 80073c2:	3303      	adds	r3, #3
 80073c4:	f023 0303 	bic.w	r3, r3, #3
 80073c8:	6a3a      	ldr	r2, [r7, #32]
 80073ca:	4413      	add	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	e001      	b.n	80073d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	89b9      	ldrh	r1, [r7, #12]
 80073d8:	89ba      	ldrh	r2, [r7, #12]
 80073da:	2302      	movs	r3, #2
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	897b      	ldrh	r3, [r7, #10]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	460b      	mov	r3, r1
 80073e4:	6979      	ldr	r1, [r7, #20]
 80073e6:	f7ff fe7d 	bl	80070e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80073ea:	687b      	ldr	r3, [r7, #4]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <pbuf_realloc+0x20>
 8007406:	4b3a      	ldr	r3, [pc, #232]	@ (80074f0 <pbuf_realloc+0xfc>)
 8007408:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800740c:	4939      	ldr	r1, [pc, #228]	@ (80074f4 <pbuf_realloc+0x100>)
 800740e:	483a      	ldr	r0, [pc, #232]	@ (80074f8 <pbuf_realloc+0x104>)
 8007410:	f008 fbe4 	bl	800fbdc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	891b      	ldrh	r3, [r3, #8]
 8007418:	887a      	ldrh	r2, [r7, #2]
 800741a:	429a      	cmp	r2, r3
 800741c:	d263      	bcs.n	80074e6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	891a      	ldrh	r2, [r3, #8]
 8007422:	887b      	ldrh	r3, [r7, #2]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007428:	887b      	ldrh	r3, [r7, #2]
 800742a:	817b      	strh	r3, [r7, #10]
  q = p;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007430:	e018      	b.n	8007464 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	895b      	ldrh	r3, [r3, #10]
 8007436:	897a      	ldrh	r2, [r7, #10]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	891a      	ldrh	r2, [r3, #8]
 8007440:	893b      	ldrh	r3, [r7, #8]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <pbuf_realloc+0x70>
 8007456:	4b26      	ldr	r3, [pc, #152]	@ (80074f0 <pbuf_realloc+0xfc>)
 8007458:	f240 12af 	movw	r2, #431	@ 0x1af
 800745c:	4927      	ldr	r1, [pc, #156]	@ (80074fc <pbuf_realloc+0x108>)
 800745e:	4826      	ldr	r0, [pc, #152]	@ (80074f8 <pbuf_realloc+0x104>)
 8007460:	f008 fbbc 	bl	800fbdc <iprintf>
  while (rem_len > q->len) {
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	895b      	ldrh	r3, [r3, #10]
 8007468:	897a      	ldrh	r2, [r7, #10]
 800746a:	429a      	cmp	r2, r3
 800746c:	d8e1      	bhi.n	8007432 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	7b1b      	ldrb	r3, [r3, #12]
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	2b00      	cmp	r3, #0
 8007478:	d121      	bne.n	80074be <pbuf_realloc+0xca>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	895b      	ldrh	r3, [r3, #10]
 800747e:	897a      	ldrh	r2, [r7, #10]
 8007480:	429a      	cmp	r2, r3
 8007482:	d01c      	beq.n	80074be <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7b5b      	ldrb	r3, [r3, #13]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d116      	bne.n	80074be <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	b29a      	uxth	r2, r3
 800749a:	897b      	ldrh	r3, [r7, #10]
 800749c:	4413      	add	r3, r2
 800749e:	b29b      	uxth	r3, r3
 80074a0:	4619      	mov	r1, r3
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7fe ffda 	bl	800645c <mem_trim>
 80074a8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d106      	bne.n	80074be <pbuf_realloc+0xca>
 80074b0:	4b0f      	ldr	r3, [pc, #60]	@ (80074f0 <pbuf_realloc+0xfc>)
 80074b2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80074b6:	4912      	ldr	r1, [pc, #72]	@ (8007500 <pbuf_realloc+0x10c>)
 80074b8:	480f      	ldr	r0, [pc, #60]	@ (80074f8 <pbuf_realloc+0x104>)
 80074ba:	f008 fb8f 	bl	800fbdc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	897a      	ldrh	r2, [r7, #10]
 80074c2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	895a      	ldrh	r2, [r3, #10]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 f911 	bl	8007700 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	e000      	b.n	80074e8 <pbuf_realloc+0xf4>
    return;
 80074e6:	bf00      	nop

}
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	08010fd0 	.word	0x08010fd0
 80074f4:	080110e8 	.word	0x080110e8
 80074f8:	08011030 	.word	0x08011030
 80074fc:	08011100 	.word	0x08011100
 8007500:	08011118 	.word	0x08011118

08007504 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <pbuf_add_header_impl+0x22>
 8007518:	4b2b      	ldr	r3, [pc, #172]	@ (80075c8 <pbuf_add_header_impl+0xc4>)
 800751a:	f240 12df 	movw	r2, #479	@ 0x1df
 800751e:	492b      	ldr	r1, [pc, #172]	@ (80075cc <pbuf_add_header_impl+0xc8>)
 8007520:	482b      	ldr	r0, [pc, #172]	@ (80075d0 <pbuf_add_header_impl+0xcc>)
 8007522:	f008 fb5b 	bl	800fbdc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <pbuf_add_header_impl+0x30>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007532:	d301      	bcc.n	8007538 <pbuf_add_header_impl+0x34>
    return 1;
 8007534:	2301      	movs	r3, #1
 8007536:	e043      	b.n	80075c0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <pbuf_add_header_impl+0x3e>
    return 0;
 800753e:	2300      	movs	r3, #0
 8007540:	e03e      	b.n	80075c0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	891a      	ldrh	r2, [r3, #8]
 800754a:	8a7b      	ldrh	r3, [r7, #18]
 800754c:	4413      	add	r3, r2
 800754e:	b29b      	uxth	r3, r3
 8007550:	8a7a      	ldrh	r2, [r7, #18]
 8007552:	429a      	cmp	r2, r3
 8007554:	d901      	bls.n	800755a <pbuf_add_header_impl+0x56>
    return 1;
 8007556:	2301      	movs	r3, #1
 8007558:	e032      	b.n	80075c0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	7b1b      	ldrb	r3, [r3, #12]
 800755e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007560:	8a3b      	ldrh	r3, [r7, #16]
 8007562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00c      	beq.n	8007584 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	425b      	negs	r3, r3
 8007572:	4413      	add	r3, r2
 8007574:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3310      	adds	r3, #16
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	429a      	cmp	r2, r3
 800757e:	d20d      	bcs.n	800759c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007580:	2301      	movs	r3, #1
 8007582:	e01d      	b.n	80075c0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	425b      	negs	r3, r3
 8007592:	4413      	add	r3, r2
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	e001      	b.n	800759c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007598:	2301      	movs	r3, #1
 800759a:	e011      	b.n	80075c0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	895a      	ldrh	r2, [r3, #10]
 80075a6:	8a7b      	ldrh	r3, [r7, #18]
 80075a8:	4413      	add	r3, r2
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	891a      	ldrh	r2, [r3, #8]
 80075b4:	8a7b      	ldrh	r3, [r7, #18]
 80075b6:	4413      	add	r3, r2
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	811a      	strh	r2, [r3, #8]


  return 0;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	08010fd0 	.word	0x08010fd0
 80075cc:	08011134 	.word	0x08011134
 80075d0:	08011030 	.word	0x08011030

080075d4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80075de:	2200      	movs	r2, #0
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff ff8e 	bl	8007504 <pbuf_add_header_impl>
 80075e8:	4603      	mov	r3, r0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <pbuf_remove_header+0x1e>
 8007604:	4b20      	ldr	r3, [pc, #128]	@ (8007688 <pbuf_remove_header+0x94>)
 8007606:	f240 224b 	movw	r2, #587	@ 0x24b
 800760a:	4920      	ldr	r1, [pc, #128]	@ (800768c <pbuf_remove_header+0x98>)
 800760c:	4820      	ldr	r0, [pc, #128]	@ (8007690 <pbuf_remove_header+0x9c>)
 800760e:	f008 fae5 	bl	800fbdc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <pbuf_remove_header+0x2c>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800761e:	d301      	bcc.n	8007624 <pbuf_remove_header+0x30>
    return 1;
 8007620:	2301      	movs	r3, #1
 8007622:	e02c      	b.n	800767e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <pbuf_remove_header+0x3a>
    return 0;
 800762a:	2300      	movs	r3, #0
 800762c:	e027      	b.n	800767e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	895b      	ldrh	r3, [r3, #10]
 8007636:	89fa      	ldrh	r2, [r7, #14]
 8007638:	429a      	cmp	r2, r3
 800763a:	d908      	bls.n	800764e <pbuf_remove_header+0x5a>
 800763c:	4b12      	ldr	r3, [pc, #72]	@ (8007688 <pbuf_remove_header+0x94>)
 800763e:	f240 2255 	movw	r2, #597	@ 0x255
 8007642:	4914      	ldr	r1, [pc, #80]	@ (8007694 <pbuf_remove_header+0xa0>)
 8007644:	4812      	ldr	r0, [pc, #72]	@ (8007690 <pbuf_remove_header+0x9c>)
 8007646:	f008 fac9 	bl	800fbdc <iprintf>
 800764a:	2301      	movs	r3, #1
 800764c:	e017      	b.n	800767e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	441a      	add	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	895a      	ldrh	r2, [r3, #10]
 8007664:	89fb      	ldrh	r3, [r7, #14]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	b29a      	uxth	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	891a      	ldrh	r2, [r3, #8]
 8007672:	89fb      	ldrh	r3, [r7, #14]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	b29a      	uxth	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	08010fd0 	.word	0x08010fd0
 800768c:	08011134 	.word	0x08011134
 8007690:	08011030 	.word	0x08011030
 8007694:	08011140 	.word	0x08011140

08007698 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	807b      	strh	r3, [r7, #2]
 80076a4:	4613      	mov	r3, r2
 80076a6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80076a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da08      	bge.n	80076c2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80076b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076b4:	425b      	negs	r3, r3
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff ff9b 	bl	80075f4 <pbuf_remove_header>
 80076be:	4603      	mov	r3, r0
 80076c0:	e007      	b.n	80076d2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80076c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076c6:	787a      	ldrb	r2, [r7, #1]
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff ff1a 	bl	8007504 <pbuf_add_header_impl>
 80076d0:	4603      	mov	r3, r0
  }
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80076e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076ea:	2201      	movs	r2, #1
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff ffd2 	bl	8007698 <pbuf_header_impl>
 80076f4:	4603      	mov	r3, r0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10b      	bne.n	8007726 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <pbuf_free+0x22>
 8007714:	4b38      	ldr	r3, [pc, #224]	@ (80077f8 <pbuf_free+0xf8>)
 8007716:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800771a:	4938      	ldr	r1, [pc, #224]	@ (80077fc <pbuf_free+0xfc>)
 800771c:	4838      	ldr	r0, [pc, #224]	@ (8007800 <pbuf_free+0x100>)
 800771e:	f008 fa5d 	bl	800fbdc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007722:	2300      	movs	r3, #0
 8007724:	e063      	b.n	80077ee <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800772a:	e05c      	b.n	80077e6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7b9b      	ldrb	r3, [r3, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d106      	bne.n	8007742 <pbuf_free+0x42>
 8007734:	4b30      	ldr	r3, [pc, #192]	@ (80077f8 <pbuf_free+0xf8>)
 8007736:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800773a:	4932      	ldr	r1, [pc, #200]	@ (8007804 <pbuf_free+0x104>)
 800773c:	4830      	ldr	r0, [pc, #192]	@ (8007800 <pbuf_free+0x100>)
 800773e:	f008 fa4d 	bl	800fbdc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7b9b      	ldrb	r3, [r3, #14]
 8007746:	3b01      	subs	r3, #1
 8007748:	b2da      	uxtb	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	739a      	strb	r2, [r3, #14]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7b9b      	ldrb	r3, [r3, #14]
 8007752:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007754:	7dbb      	ldrb	r3, [r7, #22]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d143      	bne.n	80077e2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	7b1b      	ldrb	r3, [r3, #12]
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7b5b      	ldrb	r3, [r3, #13]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d011      	beq.n	800779a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <pbuf_free+0x90>
 8007782:	4b1d      	ldr	r3, [pc, #116]	@ (80077f8 <pbuf_free+0xf8>)
 8007784:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007788:	491f      	ldr	r1, [pc, #124]	@ (8007808 <pbuf_free+0x108>)
 800778a:	481d      	ldr	r0, [pc, #116]	@ (8007800 <pbuf_free+0x100>)
 800778c:	f008 fa26 	bl	800fbdc <iprintf>
        pc->custom_free_function(p);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
 8007798:	e01d      	b.n	80077d6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d104      	bne.n	80077aa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80077a0:	6879      	ldr	r1, [r7, #4]
 80077a2:	2008      	movs	r0, #8
 80077a4:	f7ff f956 	bl	8006a54 <memp_free>
 80077a8:	e015      	b.n	80077d6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d104      	bne.n	80077ba <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	2007      	movs	r0, #7
 80077b4:	f7ff f94e 	bl	8006a54 <memp_free>
 80077b8:	e00d      	b.n	80077d6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <pbuf_free+0xc8>
          mem_free(p);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fe fde1 	bl	8006388 <mem_free>
 80077c6:	e006      	b.n	80077d6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80077c8:	4b0b      	ldr	r3, [pc, #44]	@ (80077f8 <pbuf_free+0xf8>)
 80077ca:	f240 320f 	movw	r2, #783	@ 0x30f
 80077ce:	490f      	ldr	r1, [pc, #60]	@ (800780c <pbuf_free+0x10c>)
 80077d0:	480b      	ldr	r0, [pc, #44]	@ (8007800 <pbuf_free+0x100>)
 80077d2:	f008 fa03 	bl	800fbdc <iprintf>
        }
      }
      count++;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	3301      	adds	r3, #1
 80077da:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	e001      	b.n	80077e6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d19f      	bne.n	800772c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	08010fd0 	.word	0x08010fd0
 80077fc:	08011134 	.word	0x08011134
 8007800:	08011030 	.word	0x08011030
 8007804:	08011160 	.word	0x08011160
 8007808:	08011178 	.word	0x08011178
 800780c:	0801119c 	.word	0x0801119c

08007810 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007818:	2300      	movs	r3, #0
 800781a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800781c:	e005      	b.n	800782a <pbuf_clen+0x1a>
    ++len;
 800781e:	89fb      	ldrh	r3, [r7, #14]
 8007820:	3301      	adds	r3, #1
 8007822:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f6      	bne.n	800781e <pbuf_clen+0xe>
  }
  return len;
 8007830:	89fb      	ldrh	r3, [r7, #14]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
	...

08007840 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d010      	beq.n	8007870 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	7b9b      	ldrb	r3, [r3, #14]
 8007852:	3301      	adds	r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7b9b      	ldrb	r3, [r3, #14]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <pbuf_ref+0x30>
 8007862:	4b05      	ldr	r3, [pc, #20]	@ (8007878 <pbuf_ref+0x38>)
 8007864:	f240 3242 	movw	r2, #834	@ 0x342
 8007868:	4904      	ldr	r1, [pc, #16]	@ (800787c <pbuf_ref+0x3c>)
 800786a:	4805      	ldr	r0, [pc, #20]	@ (8007880 <pbuf_ref+0x40>)
 800786c:	f008 f9b6 	bl	800fbdc <iprintf>
  }
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	08010fd0 	.word	0x08010fd0
 800787c:	080111b0 	.word	0x080111b0
 8007880:	08011030 	.word	0x08011030

08007884 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <pbuf_cat+0x16>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <pbuf_cat+0x26>
 800789a:	4b20      	ldr	r3, [pc, #128]	@ (800791c <pbuf_cat+0x98>)
 800789c:	f240 3259 	movw	r2, #857	@ 0x359
 80078a0:	491f      	ldr	r1, [pc, #124]	@ (8007920 <pbuf_cat+0x9c>)
 80078a2:	4820      	ldr	r0, [pc, #128]	@ (8007924 <pbuf_cat+0xa0>)
 80078a4:	f008 f99a 	bl	800fbdc <iprintf>
 80078a8:	e034      	b.n	8007914 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	e00a      	b.n	80078c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	891a      	ldrh	r2, [r3, #8]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	891b      	ldrh	r3, [r3, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1f0      	bne.n	80078b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	891a      	ldrh	r2, [r3, #8]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	895b      	ldrh	r3, [r3, #10]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d006      	beq.n	80078e8 <pbuf_cat+0x64>
 80078da:	4b10      	ldr	r3, [pc, #64]	@ (800791c <pbuf_cat+0x98>)
 80078dc:	f240 3262 	movw	r2, #866	@ 0x362
 80078e0:	4911      	ldr	r1, [pc, #68]	@ (8007928 <pbuf_cat+0xa4>)
 80078e2:	4810      	ldr	r0, [pc, #64]	@ (8007924 <pbuf_cat+0xa0>)
 80078e4:	f008 f97a 	bl	800fbdc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d006      	beq.n	80078fe <pbuf_cat+0x7a>
 80078f0:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <pbuf_cat+0x98>)
 80078f2:	f240 3263 	movw	r2, #867	@ 0x363
 80078f6:	490d      	ldr	r1, [pc, #52]	@ (800792c <pbuf_cat+0xa8>)
 80078f8:	480a      	ldr	r0, [pc, #40]	@ (8007924 <pbuf_cat+0xa0>)
 80078fa:	f008 f96f 	bl	800fbdc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	891a      	ldrh	r2, [r3, #8]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	891b      	ldrh	r3, [r3, #8]
 8007906:	4413      	add	r3, r2
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	08010fd0 	.word	0x08010fd0
 8007920:	080111c4 	.word	0x080111c4
 8007924:	08011030 	.word	0x08011030
 8007928:	080111fc 	.word	0x080111fc
 800792c:	0801122c 	.word	0x0801122c

08007930 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	2300      	movs	r3, #0
 8007940:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d008      	beq.n	800795a <pbuf_copy+0x2a>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <pbuf_copy+0x2a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	891a      	ldrh	r2, [r3, #8]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	891b      	ldrh	r3, [r3, #8]
 8007956:	429a      	cmp	r2, r3
 8007958:	d209      	bcs.n	800796e <pbuf_copy+0x3e>
 800795a:	4b57      	ldr	r3, [pc, #348]	@ (8007ab8 <pbuf_copy+0x188>)
 800795c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007960:	4956      	ldr	r1, [pc, #344]	@ (8007abc <pbuf_copy+0x18c>)
 8007962:	4857      	ldr	r0, [pc, #348]	@ (8007ac0 <pbuf_copy+0x190>)
 8007964:	f008 f93a 	bl	800fbdc <iprintf>
 8007968:	f06f 030f 	mvn.w	r3, #15
 800796c:	e09f      	b.n	8007aae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	895b      	ldrh	r3, [r3, #10]
 8007972:	461a      	mov	r2, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	895b      	ldrh	r3, [r3, #10]
 800797c:	4619      	mov	r1, r3
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	1acb      	subs	r3, r1, r3
 8007982:	429a      	cmp	r2, r3
 8007984:	d306      	bcc.n	8007994 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	895b      	ldrh	r3, [r3, #10]
 800798a:	461a      	mov	r2, r3
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e005      	b.n	80079a0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	895b      	ldrh	r3, [r3, #10]
 8007998:	461a      	mov	r2, r3
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	18d0      	adds	r0, r2, r3
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4413      	add	r3, r2
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4619      	mov	r1, r3
 80079b4:	f008 f9ed 	bl	800fd92 <memcpy>
    offset_to += len;
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4413      	add	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	895b      	ldrh	r3, [r3, #10]
 80079cc:	461a      	mov	r2, r3
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d906      	bls.n	80079e2 <pbuf_copy+0xb2>
 80079d4:	4b38      	ldr	r3, [pc, #224]	@ (8007ab8 <pbuf_copy+0x188>)
 80079d6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80079da:	493a      	ldr	r1, [pc, #232]	@ (8007ac4 <pbuf_copy+0x194>)
 80079dc:	4838      	ldr	r0, [pc, #224]	@ (8007ac0 <pbuf_copy+0x190>)
 80079de:	f008 f8fd 	bl	800fbdc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	895b      	ldrh	r3, [r3, #10]
 80079e6:	461a      	mov	r2, r3
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d906      	bls.n	80079fc <pbuf_copy+0xcc>
 80079ee:	4b32      	ldr	r3, [pc, #200]	@ (8007ab8 <pbuf_copy+0x188>)
 80079f0:	f240 32da 	movw	r2, #986	@ 0x3da
 80079f4:	4934      	ldr	r1, [pc, #208]	@ (8007ac8 <pbuf_copy+0x198>)
 80079f6:	4832      	ldr	r0, [pc, #200]	@ (8007ac0 <pbuf_copy+0x190>)
 80079f8:	f008 f8f0 	bl	800fbdc <iprintf>
    if (offset_from >= p_from->len) {
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	895b      	ldrh	r3, [r3, #10]
 8007a00:	461a      	mov	r2, r3
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d304      	bcc.n	8007a12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	895b      	ldrh	r3, [r3, #10]
 8007a16:	461a      	mov	r2, r3
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d114      	bne.n	8007a48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10c      	bne.n	8007a48 <pbuf_copy+0x118>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d009      	beq.n	8007a48 <pbuf_copy+0x118>
 8007a34:	4b20      	ldr	r3, [pc, #128]	@ (8007ab8 <pbuf_copy+0x188>)
 8007a36:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007a3a:	4924      	ldr	r1, [pc, #144]	@ (8007acc <pbuf_copy+0x19c>)
 8007a3c:	4820      	ldr	r0, [pc, #128]	@ (8007ac0 <pbuf_copy+0x190>)
 8007a3e:	f008 f8cd 	bl	800fbdc <iprintf>
 8007a42:	f06f 030f 	mvn.w	r3, #15
 8007a46:	e032      	b.n	8007aae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d013      	beq.n	8007a76 <pbuf_copy+0x146>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	895a      	ldrh	r2, [r3, #10]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	891b      	ldrh	r3, [r3, #8]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d10d      	bne.n	8007a76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d009      	beq.n	8007a76 <pbuf_copy+0x146>
 8007a62:	4b15      	ldr	r3, [pc, #84]	@ (8007ab8 <pbuf_copy+0x188>)
 8007a64:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007a68:	4919      	ldr	r1, [pc, #100]	@ (8007ad0 <pbuf_copy+0x1a0>)
 8007a6a:	4815      	ldr	r0, [pc, #84]	@ (8007ac0 <pbuf_copy+0x190>)
 8007a6c:	f008 f8b6 	bl	800fbdc <iprintf>
 8007a70:	f06f 0305 	mvn.w	r3, #5
 8007a74:	e01b      	b.n	8007aae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d013      	beq.n	8007aa4 <pbuf_copy+0x174>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	895a      	ldrh	r2, [r3, #10]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	891b      	ldrh	r3, [r3, #8]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d10d      	bne.n	8007aa4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d009      	beq.n	8007aa4 <pbuf_copy+0x174>
 8007a90:	4b09      	ldr	r3, [pc, #36]	@ (8007ab8 <pbuf_copy+0x188>)
 8007a92:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007a96:	490e      	ldr	r1, [pc, #56]	@ (8007ad0 <pbuf_copy+0x1a0>)
 8007a98:	4809      	ldr	r0, [pc, #36]	@ (8007ac0 <pbuf_copy+0x190>)
 8007a9a:	f008 f89f 	bl	800fbdc <iprintf>
 8007a9e:	f06f 0305 	mvn.w	r3, #5
 8007aa2:	e004      	b.n	8007aae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f47f af61 	bne.w	800796e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08010fd0 	.word	0x08010fd0
 8007abc:	08011278 	.word	0x08011278
 8007ac0:	08011030 	.word	0x08011030
 8007ac4:	080112a8 	.word	0x080112a8
 8007ac8:	080112c0 	.word	0x080112c0
 8007acc:	080112dc 	.word	0x080112dc
 8007ad0:	080112ec 	.word	0x080112ec

08007ad4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b088      	sub	sp, #32
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4611      	mov	r1, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	80fb      	strh	r3, [r7, #6]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d108      	bne.n	8007b0a <pbuf_copy_partial+0x36>
 8007af8:	4b2b      	ldr	r3, [pc, #172]	@ (8007ba8 <pbuf_copy_partial+0xd4>)
 8007afa:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007afe:	492b      	ldr	r1, [pc, #172]	@ (8007bac <pbuf_copy_partial+0xd8>)
 8007b00:	482b      	ldr	r0, [pc, #172]	@ (8007bb0 <pbuf_copy_partial+0xdc>)
 8007b02:	f008 f86b 	bl	800fbdc <iprintf>
 8007b06:	2300      	movs	r3, #0
 8007b08:	e04a      	b.n	8007ba0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d108      	bne.n	8007b22 <pbuf_copy_partial+0x4e>
 8007b10:	4b25      	ldr	r3, [pc, #148]	@ (8007ba8 <pbuf_copy_partial+0xd4>)
 8007b12:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007b16:	4927      	ldr	r1, [pc, #156]	@ (8007bb4 <pbuf_copy_partial+0xe0>)
 8007b18:	4825      	ldr	r0, [pc, #148]	@ (8007bb0 <pbuf_copy_partial+0xdc>)
 8007b1a:	f008 f85f 	bl	800fbdc <iprintf>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e03e      	b.n	8007ba0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	e034      	b.n	8007b92 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007b28:	88bb      	ldrh	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <pbuf_copy_partial+0x70>
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	895b      	ldrh	r3, [r3, #10]
 8007b32:	88ba      	ldrh	r2, [r7, #4]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d305      	bcc.n	8007b44 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	895b      	ldrh	r3, [r3, #10]
 8007b3c:	88ba      	ldrh	r2, [r7, #4]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	80bb      	strh	r3, [r7, #4]
 8007b42:	e023      	b.n	8007b8c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	895a      	ldrh	r2, [r3, #10]
 8007b48:	88bb      	ldrh	r3, [r7, #4]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007b4e:	8b3a      	ldrh	r2, [r7, #24]
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d901      	bls.n	8007b5a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007b56:	88fb      	ldrh	r3, [r7, #6]
 8007b58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007b5a:	8b7b      	ldrh	r3, [r7, #26]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	18d0      	adds	r0, r2, r3
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	88bb      	ldrh	r3, [r7, #4]
 8007b66:	4413      	add	r3, r2
 8007b68:	8b3a      	ldrh	r2, [r7, #24]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	f008 f911 	bl	800fd92 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007b70:	8afa      	ldrh	r2, [r7, #22]
 8007b72:	8b3b      	ldrh	r3, [r7, #24]
 8007b74:	4413      	add	r3, r2
 8007b76:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007b78:	8b7a      	ldrh	r2, [r7, #26]
 8007b7a:	8b3b      	ldrh	r3, [r7, #24]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	8b3b      	ldrh	r3, [r7, #24]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	61fb      	str	r3, [r7, #28]
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <pbuf_copy_partial+0xca>
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1c4      	bne.n	8007b28 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007b9e:	8afb      	ldrh	r3, [r7, #22]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3720      	adds	r7, #32
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	08010fd0 	.word	0x08010fd0
 8007bac:	08011318 	.word	0x08011318
 8007bb0:	08011030 	.word	0x08011030
 8007bb4:	08011338 	.word	0x08011338

08007bb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	603a      	str	r2, [r7, #0]
 8007bc2:	71fb      	strb	r3, [r7, #7]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	8919      	ldrh	r1, [r3, #8]
 8007bcc:	88ba      	ldrh	r2, [r7, #4]
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff fab1 	bl	8007138 <pbuf_alloc>
 8007bd6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <pbuf_clone+0x2a>
    return NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	e011      	b.n	8007c06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff fea3 	bl	8007930 <pbuf_copy>
 8007bea:	4603      	mov	r3, r0
 8007bec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007bee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d006      	beq.n	8007c04 <pbuf_clone+0x4c>
 8007bf6:	4b06      	ldr	r3, [pc, #24]	@ (8007c10 <pbuf_clone+0x58>)
 8007bf8:	f240 5224 	movw	r2, #1316	@ 0x524
 8007bfc:	4905      	ldr	r1, [pc, #20]	@ (8007c14 <pbuf_clone+0x5c>)
 8007bfe:	4806      	ldr	r0, [pc, #24]	@ (8007c18 <pbuf_clone+0x60>)
 8007c00:	f007 ffec 	bl	800fbdc <iprintf>
  return q;
 8007c04:	68fb      	ldr	r3, [r7, #12]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	08010fd0 	.word	0x08010fd0
 8007c14:	08011444 	.word	0x08011444
 8007c18:	08011030 	.word	0x08011030

08007c1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007c20:	f007 fedc 	bl	800f9dc <rand>
 8007c24:	4603      	mov	r3, r0
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	4b01      	ldr	r3, [pc, #4]	@ (8007c3c <tcp_init+0x20>)
 8007c36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007c38:	bf00      	nop
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000020 	.word	0x20000020

08007c40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	7d1b      	ldrb	r3, [r3, #20]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d105      	bne.n	8007c5c <tcp_free+0x1c>
 8007c50:	4b06      	ldr	r3, [pc, #24]	@ (8007c6c <tcp_free+0x2c>)
 8007c52:	22d4      	movs	r2, #212	@ 0xd4
 8007c54:	4906      	ldr	r1, [pc, #24]	@ (8007c70 <tcp_free+0x30>)
 8007c56:	4807      	ldr	r0, [pc, #28]	@ (8007c74 <tcp_free+0x34>)
 8007c58:	f007 ffc0 	bl	800fbdc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	2001      	movs	r0, #1
 8007c60:	f7fe fef8 	bl	8006a54 <memp_free>
}
 8007c64:	bf00      	nop
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	080114d0 	.word	0x080114d0
 8007c70:	08011500 	.word	0x08011500
 8007c74:	08011514 	.word	0x08011514

08007c78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7d1b      	ldrb	r3, [r3, #20]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d105      	bne.n	8007c94 <tcp_free_listen+0x1c>
 8007c88:	4b06      	ldr	r3, [pc, #24]	@ (8007ca4 <tcp_free_listen+0x2c>)
 8007c8a:	22df      	movs	r2, #223	@ 0xdf
 8007c8c:	4906      	ldr	r1, [pc, #24]	@ (8007ca8 <tcp_free_listen+0x30>)
 8007c8e:	4807      	ldr	r0, [pc, #28]	@ (8007cac <tcp_free_listen+0x34>)
 8007c90:	f007 ffa4 	bl	800fbdc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	2002      	movs	r0, #2
 8007c98:	f7fe fedc 	bl	8006a54 <memp_free>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	080114d0 	.word	0x080114d0
 8007ca8:	0801153c 	.word	0x0801153c
 8007cac:	08011514 	.word	0x08011514

08007cb0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007cb4:	f000 fea4 	bl	8008a00 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007cb8:	4b07      	ldr	r3, [pc, #28]	@ (8007cd8 <tcp_tmr+0x28>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	4b05      	ldr	r3, [pc, #20]	@ (8007cd8 <tcp_tmr+0x28>)
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	4b04      	ldr	r3, [pc, #16]	@ (8007cd8 <tcp_tmr+0x28>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007cd0:	f000 fb54 	bl	800837c <tcp_slowtmr>
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	200081c9 	.word	0x200081c9

08007cdc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d105      	bne.n	8007cf8 <tcp_remove_listener+0x1c>
 8007cec:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <tcp_remove_listener+0x48>)
 8007cee:	22ff      	movs	r2, #255	@ 0xff
 8007cf0:	490d      	ldr	r1, [pc, #52]	@ (8007d28 <tcp_remove_listener+0x4c>)
 8007cf2:	480e      	ldr	r0, [pc, #56]	@ (8007d2c <tcp_remove_listener+0x50>)
 8007cf4:	f007 ff72 	bl	800fbdc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	e00a      	b.n	8007d14 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d102      	bne.n	8007d0e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1f1      	bne.n	8007cfe <tcp_remove_listener+0x22>
    }
  }
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	080114d0 	.word	0x080114d0
 8007d28:	08011558 	.word	0x08011558
 8007d2c:	08011514 	.word	0x08011514

08007d30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <tcp_listen_closed+0x1c>
 8007d3e:	4b14      	ldr	r3, [pc, #80]	@ (8007d90 <tcp_listen_closed+0x60>)
 8007d40:	f240 1211 	movw	r2, #273	@ 0x111
 8007d44:	4913      	ldr	r1, [pc, #76]	@ (8007d94 <tcp_listen_closed+0x64>)
 8007d46:	4814      	ldr	r0, [pc, #80]	@ (8007d98 <tcp_listen_closed+0x68>)
 8007d48:	f007 ff48 	bl	800fbdc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7d1b      	ldrb	r3, [r3, #20]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d006      	beq.n	8007d62 <tcp_listen_closed+0x32>
 8007d54:	4b0e      	ldr	r3, [pc, #56]	@ (8007d90 <tcp_listen_closed+0x60>)
 8007d56:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007d5a:	4910      	ldr	r1, [pc, #64]	@ (8007d9c <tcp_listen_closed+0x6c>)
 8007d5c:	480e      	ldr	r0, [pc, #56]	@ (8007d98 <tcp_listen_closed+0x68>)
 8007d5e:	f007 ff3d 	bl	800fbdc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007d62:	2301      	movs	r3, #1
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e00b      	b.n	8007d80 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007d68:	4a0d      	ldr	r2, [pc, #52]	@ (8007da0 <tcp_listen_closed+0x70>)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff ffb1 	bl	8007cdc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d9f0      	bls.n	8007d68 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007d86:	bf00      	nop
 8007d88:	bf00      	nop
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	080114d0 	.word	0x080114d0
 8007d94:	08011580 	.word	0x08011580
 8007d98:	08011514 	.word	0x08011514
 8007d9c:	0801158c 	.word	0x0801158c
 8007da0:	080134b0 	.word	0x080134b0

08007da4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007da4:	b5b0      	push	{r4, r5, r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af04      	add	r7, sp, #16
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d106      	bne.n	8007dc4 <tcp_close_shutdown+0x20>
 8007db6:	4b63      	ldr	r3, [pc, #396]	@ (8007f44 <tcp_close_shutdown+0x1a0>)
 8007db8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007dbc:	4962      	ldr	r1, [pc, #392]	@ (8007f48 <tcp_close_shutdown+0x1a4>)
 8007dbe:	4863      	ldr	r0, [pc, #396]	@ (8007f4c <tcp_close_shutdown+0x1a8>)
 8007dc0:	f007 ff0c 	bl	800fbdc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d066      	beq.n	8007e98 <tcp_close_shutdown+0xf4>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7d1b      	ldrb	r3, [r3, #20]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d003      	beq.n	8007dda <tcp_close_shutdown+0x36>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	7d1b      	ldrb	r3, [r3, #20]
 8007dd6:	2b07      	cmp	r3, #7
 8007dd8:	d15e      	bne.n	8007e98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <tcp_close_shutdown+0x48>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007de6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007dea:	d055      	beq.n	8007e98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	8b5b      	ldrh	r3, [r3, #26]
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <tcp_close_shutdown+0x62>
 8007df8:	4b52      	ldr	r3, [pc, #328]	@ (8007f44 <tcp_close_shutdown+0x1a0>)
 8007dfa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8007dfe:	4954      	ldr	r1, [pc, #336]	@ (8007f50 <tcp_close_shutdown+0x1ac>)
 8007e00:	4852      	ldr	r0, [pc, #328]	@ (8007f4c <tcp_close_shutdown+0x1a8>)
 8007e02:	f007 feeb 	bl	800fbdc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007e0e:	687d      	ldr	r5, [r7, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3304      	adds	r3, #4
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	8ad2      	ldrh	r2, [r2, #22]
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	8b09      	ldrh	r1, [r1, #24]
 8007e1c:	9102      	str	r1, [sp, #8]
 8007e1e:	9201      	str	r2, [sp, #4]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	462b      	mov	r3, r5
 8007e24:	4622      	mov	r2, r4
 8007e26:	4601      	mov	r1, r0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f004 fe8d 	bl	800cb48 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 f8c8 	bl	8008fc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007e34:	4b47      	ldr	r3, [pc, #284]	@ (8007f54 <tcp_close_shutdown+0x1b0>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d105      	bne.n	8007e4a <tcp_close_shutdown+0xa6>
 8007e3e:	4b45      	ldr	r3, [pc, #276]	@ (8007f54 <tcp_close_shutdown+0x1b0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	4a43      	ldr	r2, [pc, #268]	@ (8007f54 <tcp_close_shutdown+0x1b0>)
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	e013      	b.n	8007e72 <tcp_close_shutdown+0xce>
 8007e4a:	4b42      	ldr	r3, [pc, #264]	@ (8007f54 <tcp_close_shutdown+0x1b0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e00c      	b.n	8007e6c <tcp_close_shutdown+0xc8>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d104      	bne.n	8007e66 <tcp_close_shutdown+0xc2>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	60da      	str	r2, [r3, #12]
 8007e64:	e005      	b.n	8007e72 <tcp_close_shutdown+0xce>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1ef      	bne.n	8007e52 <tcp_close_shutdown+0xae>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	60da      	str	r2, [r3, #12]
 8007e78:	4b37      	ldr	r3, [pc, #220]	@ (8007f58 <tcp_close_shutdown+0x1b4>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007e7e:	4b37      	ldr	r3, [pc, #220]	@ (8007f5c <tcp_close_shutdown+0x1b8>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d102      	bne.n	8007e8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007e88:	f003 fd5c 	bl	800b944 <tcp_trigger_input_pcb_close>
 8007e8c:	e002      	b.n	8007e94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff fed6 	bl	8007c40 <tcp_free>
      }
      return ERR_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e050      	b.n	8007f3a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	7d1b      	ldrb	r3, [r3, #20]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d03b      	beq.n	8007f18 <tcp_close_shutdown+0x174>
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	dc44      	bgt.n	8007f2e <tcp_close_shutdown+0x18a>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <tcp_close_shutdown+0x10a>
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d02a      	beq.n	8007f02 <tcp_close_shutdown+0x15e>
 8007eac:	e03f      	b.n	8007f2e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	8adb      	ldrh	r3, [r3, #22]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d021      	beq.n	8007efa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8007f60 <tcp_close_shutdown+0x1bc>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d105      	bne.n	8007ecc <tcp_close_shutdown+0x128>
 8007ec0:	4b27      	ldr	r3, [pc, #156]	@ (8007f60 <tcp_close_shutdown+0x1bc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	4a26      	ldr	r2, [pc, #152]	@ (8007f60 <tcp_close_shutdown+0x1bc>)
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	e013      	b.n	8007ef4 <tcp_close_shutdown+0x150>
 8007ecc:	4b24      	ldr	r3, [pc, #144]	@ (8007f60 <tcp_close_shutdown+0x1bc>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	60bb      	str	r3, [r7, #8]
 8007ed2:	e00c      	b.n	8007eee <tcp_close_shutdown+0x14a>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d104      	bne.n	8007ee8 <tcp_close_shutdown+0x144>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	60da      	str	r2, [r3, #12]
 8007ee6:	e005      	b.n	8007ef4 <tcp_close_shutdown+0x150>
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1ef      	bne.n	8007ed4 <tcp_close_shutdown+0x130>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff fea0 	bl	8007c40 <tcp_free>
      break;
 8007f00:	e01a      	b.n	8007f38 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff ff14 	bl	8007d30 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	4816      	ldr	r0, [pc, #88]	@ (8007f64 <tcp_close_shutdown+0x1c0>)
 8007f0c:	f001 f8aa 	bl	8009064 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff feb1 	bl	8007c78 <tcp_free_listen>
      break;
 8007f16:	e00f      	b.n	8007f38 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	480e      	ldr	r0, [pc, #56]	@ (8007f54 <tcp_close_shutdown+0x1b0>)
 8007f1c:	f001 f8a2 	bl	8009064 <tcp_pcb_remove>
 8007f20:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <tcp_close_shutdown+0x1b4>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fe8a 	bl	8007c40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007f2c:	e004      	b.n	8007f38 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f81a 	bl	8007f68 <tcp_close_shutdown_fin>
 8007f34:	4603      	mov	r3, r0
 8007f36:	e000      	b.n	8007f3a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bdb0      	pop	{r4, r5, r7, pc}
 8007f42:	bf00      	nop
 8007f44:	080114d0 	.word	0x080114d0
 8007f48:	080115a4 	.word	0x080115a4
 8007f4c:	08011514 	.word	0x08011514
 8007f50:	080115c4 	.word	0x080115c4
 8007f54:	200081c0 	.word	0x200081c0
 8007f58:	200081c8 	.word	0x200081c8
 8007f5c:	20008200 	.word	0x20008200
 8007f60:	200081b8 	.word	0x200081b8
 8007f64:	200081bc 	.word	0x200081bc

08007f68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <tcp_close_shutdown_fin+0x1c>
 8007f76:	4b2e      	ldr	r3, [pc, #184]	@ (8008030 <tcp_close_shutdown_fin+0xc8>)
 8007f78:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007f7c:	492d      	ldr	r1, [pc, #180]	@ (8008034 <tcp_close_shutdown_fin+0xcc>)
 8007f7e:	482e      	ldr	r0, [pc, #184]	@ (8008038 <tcp_close_shutdown_fin+0xd0>)
 8007f80:	f007 fe2c 	bl	800fbdc <iprintf>

  switch (pcb->state) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	7d1b      	ldrb	r3, [r3, #20]
 8007f88:	2b07      	cmp	r3, #7
 8007f8a:	d020      	beq.n	8007fce <tcp_close_shutdown_fin+0x66>
 8007f8c:	2b07      	cmp	r3, #7
 8007f8e:	dc2b      	bgt.n	8007fe8 <tcp_close_shutdown_fin+0x80>
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d002      	beq.n	8007f9a <tcp_close_shutdown_fin+0x32>
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d00d      	beq.n	8007fb4 <tcp_close_shutdown_fin+0x4c>
 8007f98:	e026      	b.n	8007fe8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f003 fee2 	bl	800bd64 <tcp_send_fin>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11f      	bne.n	8007fec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2205      	movs	r2, #5
 8007fb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007fb2:	e01b      	b.n	8007fec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f003 fed5 	bl	800bd64 <tcp_send_fin>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d114      	bne.n	8007ff0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2205      	movs	r2, #5
 8007fca:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007fcc:	e010      	b.n	8007ff0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f003 fec8 	bl	800bd64 <tcp_send_fin>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d109      	bne.n	8007ff4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2209      	movs	r2, #9
 8007fe4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007fe6:	e005      	b.n	8007ff4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e01c      	b.n	8008026 <tcp_close_shutdown_fin+0xbe>
      break;
 8007fec:	bf00      	nop
 8007fee:	e002      	b.n	8007ff6 <tcp_close_shutdown_fin+0x8e>
      break;
 8007ff0:	bf00      	nop
 8007ff2:	e000      	b.n	8007ff6 <tcp_close_shutdown_fin+0x8e>
      break;
 8007ff4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d103      	bne.n	8008006 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f003 ffee 	bl	800bfe0 <tcp_output>
 8008004:	e00d      	b.n	8008022 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800800e:	d108      	bne.n	8008022 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	8b5b      	ldrh	r3, [r3, #26]
 8008014:	f043 0308 	orr.w	r3, r3, #8
 8008018:	b29a      	uxth	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	e001      	b.n	8008026 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8008022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	080114d0 	.word	0x080114d0
 8008034:	08011580 	.word	0x08011580
 8008038:	08011514 	.word	0x08011514

0800803c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d109      	bne.n	800805e <tcp_close+0x22>
 800804a:	4b0f      	ldr	r3, [pc, #60]	@ (8008088 <tcp_close+0x4c>)
 800804c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008050:	490e      	ldr	r1, [pc, #56]	@ (800808c <tcp_close+0x50>)
 8008052:	480f      	ldr	r0, [pc, #60]	@ (8008090 <tcp_close+0x54>)
 8008054:	f007 fdc2 	bl	800fbdc <iprintf>
 8008058:	f06f 030f 	mvn.w	r3, #15
 800805c:	e00f      	b.n	800807e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7d1b      	ldrb	r3, [r3, #20]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d006      	beq.n	8008074 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	8b5b      	ldrh	r3, [r3, #26]
 800806a:	f043 0310 	orr.w	r3, r3, #16
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008074:	2101      	movs	r1, #1
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff fe94 	bl	8007da4 <tcp_close_shutdown>
 800807c:	4603      	mov	r3, r0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	080114d0 	.word	0x080114d0
 800808c:	080115e0 	.word	0x080115e0
 8008090:	08011514 	.word	0x08011514

08008094 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08e      	sub	sp, #56	@ 0x38
 8008098:	af04      	add	r7, sp, #16
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <tcp_abandon+0x20>
 80080a4:	4b52      	ldr	r3, [pc, #328]	@ (80081f0 <tcp_abandon+0x15c>)
 80080a6:	f240 223d 	movw	r2, #573	@ 0x23d
 80080aa:	4952      	ldr	r1, [pc, #328]	@ (80081f4 <tcp_abandon+0x160>)
 80080ac:	4852      	ldr	r0, [pc, #328]	@ (80081f8 <tcp_abandon+0x164>)
 80080ae:	f007 fd95 	bl	800fbdc <iprintf>
 80080b2:	e099      	b.n	80081e8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	7d1b      	ldrb	r3, [r3, #20]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d106      	bne.n	80080ca <tcp_abandon+0x36>
 80080bc:	4b4c      	ldr	r3, [pc, #304]	@ (80081f0 <tcp_abandon+0x15c>)
 80080be:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80080c2:	494e      	ldr	r1, [pc, #312]	@ (80081fc <tcp_abandon+0x168>)
 80080c4:	484c      	ldr	r0, [pc, #304]	@ (80081f8 <tcp_abandon+0x164>)
 80080c6:	f007 fd89 	bl	800fbdc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7d1b      	ldrb	r3, [r3, #20]
 80080ce:	2b0a      	cmp	r3, #10
 80080d0:	d107      	bne.n	80080e2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	484a      	ldr	r0, [pc, #296]	@ (8008200 <tcp_abandon+0x16c>)
 80080d6:	f000 ffc5 	bl	8009064 <tcp_pcb_remove>
    tcp_free(pcb);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff fdb0 	bl	8007c40 <tcp_free>
 80080e0:	e082      	b.n	80081e8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	7d1b      	ldrb	r3, [r3, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d126      	bne.n	800815a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	8adb      	ldrh	r3, [r3, #22]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d02e      	beq.n	8008172 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008114:	4b3b      	ldr	r3, [pc, #236]	@ (8008204 <tcp_abandon+0x170>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	429a      	cmp	r2, r3
 800811c:	d105      	bne.n	800812a <tcp_abandon+0x96>
 800811e:	4b39      	ldr	r3, [pc, #228]	@ (8008204 <tcp_abandon+0x170>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	4a37      	ldr	r2, [pc, #220]	@ (8008204 <tcp_abandon+0x170>)
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	e013      	b.n	8008152 <tcp_abandon+0xbe>
 800812a:	4b36      	ldr	r3, [pc, #216]	@ (8008204 <tcp_abandon+0x170>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	e00c      	b.n	800814c <tcp_abandon+0xb8>
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	d104      	bne.n	8008146 <tcp_abandon+0xb2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	e005      	b.n	8008152 <tcp_abandon+0xbe>
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	61fb      	str	r3, [r7, #28]
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1ef      	bne.n	8008132 <tcp_abandon+0x9e>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	60da      	str	r2, [r3, #12]
 8008158:	e00b      	b.n	8008172 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	8adb      	ldrh	r3, [r3, #22]
 8008162:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4828      	ldr	r0, [pc, #160]	@ (8008208 <tcp_abandon+0x174>)
 8008168:	f000 ff7c 	bl	8009064 <tcp_pcb_remove>
 800816c:	4b27      	ldr	r3, [pc, #156]	@ (800820c <tcp_abandon+0x178>)
 800816e:	2201      	movs	r2, #1
 8008170:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fd1e 	bl	8008bc0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008190:	4618      	mov	r0, r3
 8008192:	f000 fd15 	bl	8008bc0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800819a:	2b00      	cmp	r3, #0
 800819c:	d004      	beq.n	80081a8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fd0c 	bl	8008bc0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00e      	beq.n	80081cc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3304      	adds	r3, #4
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	8b12      	ldrh	r2, [r2, #24]
 80081b8:	9202      	str	r2, [sp, #8]
 80081ba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80081bc:	9201      	str	r2, [sp, #4]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	460b      	mov	r3, r1
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	69b9      	ldr	r1, [r7, #24]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f004 fcbe 	bl	800cb48 <tcp_rst>
    }
    last_state = pcb->state;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	7d1b      	ldrb	r3, [r3, #20]
 80081d0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fd34 	bl	8007c40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d004      	beq.n	80081e8 <tcp_abandon+0x154>
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f06f 010c 	mvn.w	r1, #12
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	4798      	blx	r3
  }
}
 80081e8:	3728      	adds	r7, #40	@ 0x28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	080114d0 	.word	0x080114d0
 80081f4:	08011614 	.word	0x08011614
 80081f8:	08011514 	.word	0x08011514
 80081fc:	08011630 	.word	0x08011630
 8008200:	200081c4 	.word	0x200081c4
 8008204:	200081b8 	.word	0x200081b8
 8008208:	200081c0 	.word	0x200081c0
 800820c:	200081c8 	.word	0x200081c8

08008210 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008218:	2101      	movs	r1, #1
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff ff3a 	bl	8008094 <tcp_abandon>
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d106      	bne.n	8008244 <tcp_update_rcv_ann_wnd+0x1c>
 8008236:	4b25      	ldr	r3, [pc, #148]	@ (80082cc <tcp_update_rcv_ann_wnd+0xa4>)
 8008238:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800823c:	4924      	ldr	r1, [pc, #144]	@ (80082d0 <tcp_update_rcv_ann_wnd+0xa8>)
 800823e:	4825      	ldr	r0, [pc, #148]	@ (80082d4 <tcp_update_rcv_ann_wnd+0xac>)
 8008240:	f007 fccc 	bl	800fbdc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800824c:	4413      	add	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8008258:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800825c:	bf28      	it	cs
 800825e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8008262:	b292      	uxth	r2, r2
 8008264:	4413      	add	r3, r2
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	db08      	blt.n	8008280 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	e020      	b.n	80082c2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	dd03      	ble.n	8008296 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008294:	e014      	b.n	80082c0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082a8:	d306      	bcc.n	80082b8 <tcp_update_rcv_ann_wnd+0x90>
 80082aa:	4b08      	ldr	r3, [pc, #32]	@ (80082cc <tcp_update_rcv_ann_wnd+0xa4>)
 80082ac:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80082b0:	4909      	ldr	r1, [pc, #36]	@ (80082d8 <tcp_update_rcv_ann_wnd+0xb0>)
 80082b2:	4808      	ldr	r0, [pc, #32]	@ (80082d4 <tcp_update_rcv_ann_wnd+0xac>)
 80082b4:	f007 fc92 	bl	800fbdc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80082c0:	2300      	movs	r3, #0
  }
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	080114d0 	.word	0x080114d0
 80082d0:	0801172c 	.word	0x0801172c
 80082d4:	08011514 	.word	0x08011514
 80082d8:	08011750 	.word	0x08011750

080082dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d107      	bne.n	80082fe <tcp_recved+0x22>
 80082ee:	4b1f      	ldr	r3, [pc, #124]	@ (800836c <tcp_recved+0x90>)
 80082f0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80082f4:	491e      	ldr	r1, [pc, #120]	@ (8008370 <tcp_recved+0x94>)
 80082f6:	481f      	ldr	r0, [pc, #124]	@ (8008374 <tcp_recved+0x98>)
 80082f8:	f007 fc70 	bl	800fbdc <iprintf>
 80082fc:	e032      	b.n	8008364 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	7d1b      	ldrb	r3, [r3, #20]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d106      	bne.n	8008314 <tcp_recved+0x38>
 8008306:	4b19      	ldr	r3, [pc, #100]	@ (800836c <tcp_recved+0x90>)
 8008308:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800830c:	491a      	ldr	r1, [pc, #104]	@ (8008378 <tcp_recved+0x9c>)
 800830e:	4819      	ldr	r0, [pc, #100]	@ (8008374 <tcp_recved+0x98>)
 8008310:	f007 fc64 	bl	800fbdc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008318:	887b      	ldrh	r3, [r7, #2]
 800831a:	4413      	add	r3, r2
 800831c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800831e:	89fb      	ldrh	r3, [r7, #14]
 8008320:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008324:	d804      	bhi.n	8008330 <tcp_recved+0x54>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800832a:	89fa      	ldrh	r2, [r7, #14]
 800832c:	429a      	cmp	r2, r3
 800832e:	d204      	bcs.n	800833a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008336:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008338:	e002      	b.n	8008340 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	89fa      	ldrh	r2, [r7, #14]
 800833e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff ff71 	bl	8008228 <tcp_update_rcv_ann_wnd>
 8008346:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800834e:	d309      	bcc.n	8008364 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8b5b      	ldrh	r3, [r3, #26]
 8008354:	f043 0302 	orr.w	r3, r3, #2
 8008358:	b29a      	uxth	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f003 fe3e 	bl	800bfe0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	080114d0 	.word	0x080114d0
 8008370:	0801176c 	.word	0x0801176c
 8008374:	08011514 	.word	0x08011514
 8008378:	08011784 	.word	0x08011784

0800837c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800837c:	b5b0      	push	{r4, r5, r7, lr}
 800837e:	b090      	sub	sp, #64	@ 0x40
 8008380:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8008388:	4b95      	ldr	r3, [pc, #596]	@ (80085e0 <tcp_slowtmr+0x264>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3301      	adds	r3, #1
 800838e:	4a94      	ldr	r2, [pc, #592]	@ (80085e0 <tcp_slowtmr+0x264>)
 8008390:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008392:	4b94      	ldr	r3, [pc, #592]	@ (80085e4 <tcp_slowtmr+0x268>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	3301      	adds	r3, #1
 8008398:	b2da      	uxtb	r2, r3
 800839a:	4b92      	ldr	r3, [pc, #584]	@ (80085e4 <tcp_slowtmr+0x268>)
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e000      	b.n	80083a2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80083a0:	bf00      	nop
  prev = NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80083a6:	4b90      	ldr	r3, [pc, #576]	@ (80085e8 <tcp_slowtmr+0x26c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80083ac:	e29d      	b.n	80088ea <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80083ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b0:	7d1b      	ldrb	r3, [r3, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <tcp_slowtmr+0x48>
 80083b6:	4b8d      	ldr	r3, [pc, #564]	@ (80085ec <tcp_slowtmr+0x270>)
 80083b8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80083bc:	498c      	ldr	r1, [pc, #560]	@ (80085f0 <tcp_slowtmr+0x274>)
 80083be:	488d      	ldr	r0, [pc, #564]	@ (80085f4 <tcp_slowtmr+0x278>)
 80083c0:	f007 fc0c 	bl	800fbdc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80083c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c6:	7d1b      	ldrb	r3, [r3, #20]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d106      	bne.n	80083da <tcp_slowtmr+0x5e>
 80083cc:	4b87      	ldr	r3, [pc, #540]	@ (80085ec <tcp_slowtmr+0x270>)
 80083ce:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80083d2:	4989      	ldr	r1, [pc, #548]	@ (80085f8 <tcp_slowtmr+0x27c>)
 80083d4:	4887      	ldr	r0, [pc, #540]	@ (80085f4 <tcp_slowtmr+0x278>)
 80083d6:	f007 fc01 	bl	800fbdc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80083da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083dc:	7d1b      	ldrb	r3, [r3, #20]
 80083de:	2b0a      	cmp	r3, #10
 80083e0:	d106      	bne.n	80083f0 <tcp_slowtmr+0x74>
 80083e2:	4b82      	ldr	r3, [pc, #520]	@ (80085ec <tcp_slowtmr+0x270>)
 80083e4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80083e8:	4984      	ldr	r1, [pc, #528]	@ (80085fc <tcp_slowtmr+0x280>)
 80083ea:	4882      	ldr	r0, [pc, #520]	@ (80085f4 <tcp_slowtmr+0x278>)
 80083ec:	f007 fbf6 	bl	800fbdc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80083f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f2:	7f9a      	ldrb	r2, [r3, #30]
 80083f4:	4b7b      	ldr	r3, [pc, #492]	@ (80085e4 <tcp_slowtmr+0x268>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d105      	bne.n	8008408 <tcp_slowtmr+0x8c>
      prev = pcb;
 80083fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8008406:	e270      	b.n	80088ea <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8008408:	4b76      	ldr	r3, [pc, #472]	@ (80085e4 <tcp_slowtmr+0x268>)
 800840a:	781a      	ldrb	r2, [r3, #0]
 800840c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800841c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841e:	7d1b      	ldrb	r3, [r3, #20]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d10a      	bne.n	800843a <tcp_slowtmr+0xbe>
 8008424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800842a:	2b05      	cmp	r3, #5
 800842c:	d905      	bls.n	800843a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800842e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008432:	3301      	adds	r3, #1
 8008434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008438:	e11e      	b.n	8008678 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800843a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008440:	2b0b      	cmp	r3, #11
 8008442:	d905      	bls.n	8008450 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008448:	3301      	adds	r3, #1
 800844a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800844e:	e113      	b.n	8008678 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008456:	2b00      	cmp	r3, #0
 8008458:	d075      	beq.n	8008546 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800845a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800845e:	2b00      	cmp	r3, #0
 8008460:	d006      	beq.n	8008470 <tcp_slowtmr+0xf4>
 8008462:	4b62      	ldr	r3, [pc, #392]	@ (80085ec <tcp_slowtmr+0x270>)
 8008464:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008468:	4965      	ldr	r1, [pc, #404]	@ (8008600 <tcp_slowtmr+0x284>)
 800846a:	4862      	ldr	r0, [pc, #392]	@ (80085f4 <tcp_slowtmr+0x278>)
 800846c:	f007 fbb6 	bl	800fbdc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <tcp_slowtmr+0x10a>
 8008478:	4b5c      	ldr	r3, [pc, #368]	@ (80085ec <tcp_slowtmr+0x270>)
 800847a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800847e:	4961      	ldr	r1, [pc, #388]	@ (8008604 <tcp_slowtmr+0x288>)
 8008480:	485c      	ldr	r0, [pc, #368]	@ (80085f4 <tcp_slowtmr+0x278>)
 8008482:	f007 fbab 	bl	800fbdc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008488:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800848c:	2b0b      	cmp	r3, #11
 800848e:	d905      	bls.n	800849c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008494:	3301      	adds	r3, #1
 8008496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800849a:	e0ed      	b.n	8008678 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800849c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80084a2:	3b01      	subs	r3, #1
 80084a4:	4a58      	ldr	r2, [pc, #352]	@ (8008608 <tcp_slowtmr+0x28c>)
 80084a6:	5cd3      	ldrb	r3, [r2, r3]
 80084a8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80084aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80084b0:	7c7a      	ldrb	r2, [r7, #17]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d907      	bls.n	80084c6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80084bc:	3301      	adds	r3, #1
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80084c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80084cc:	7c7a      	ldrb	r2, [r7, #17]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	f200 80d2 	bhi.w	8008678 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80084d4:	2301      	movs	r3, #1
 80084d6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80084d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d108      	bne.n	80084f4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80084e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084e4:	f004 fc24 	bl	800cd30 <tcp_zero_window_probe>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d014      	beq.n	8008518 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80084ee:	2300      	movs	r3, #0
 80084f0:	623b      	str	r3, [r7, #32]
 80084f2:	e011      	b.n	8008518 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80084fa:	4619      	mov	r1, r3
 80084fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084fe:	f003 fae9 	bl	800bad4 <tcp_split_unsent_seg>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d107      	bne.n	8008518 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008508:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800850a:	f003 fd69 	bl	800bfe0 <tcp_output>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80ac 	beq.w	8008678 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8008520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800852e:	2b06      	cmp	r3, #6
 8008530:	f200 80a2 	bhi.w	8008678 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008536:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800853a:	3301      	adds	r3, #1
 800853c:	b2da      	uxtb	r2, r3
 800853e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008540:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008544:	e098      	b.n	8008678 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800854c:	2b00      	cmp	r3, #0
 800854e:	db0f      	blt.n	8008570 <tcp_slowtmr+0x1f4>
 8008550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008552:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008556:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800855a:	4293      	cmp	r3, r2
 800855c:	d008      	beq.n	8008570 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800855e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008560:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008564:	b29b      	uxth	r3, r3
 8008566:	3301      	adds	r3, #1
 8008568:	b29b      	uxth	r3, r3
 800856a:	b21a      	sxth	r2, r3
 800856c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008572:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800857c:	429a      	cmp	r2, r3
 800857e:	db7b      	blt.n	8008678 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008580:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008582:	f004 f821 	bl	800c5c8 <tcp_rexmit_rto_prepare>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d007      	beq.n	800859c <tcp_slowtmr+0x220>
 800858c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008590:	2b00      	cmp	r3, #0
 8008592:	d171      	bne.n	8008678 <tcp_slowtmr+0x2fc>
 8008594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008596:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d06d      	beq.n	8008678 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800859c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859e:	7d1b      	ldrb	r3, [r3, #20]
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d03a      	beq.n	800861a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80085a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085aa:	2b0c      	cmp	r3, #12
 80085ac:	bf28      	it	cs
 80085ae:	230c      	movcs	r3, #12
 80085b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80085b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80085b8:	10db      	asrs	r3, r3, #3
 80085ba:	b21b      	sxth	r3, r3
 80085bc:	461a      	mov	r2, r3
 80085be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80085c4:	4413      	add	r3, r2
 80085c6:	7efa      	ldrb	r2, [r7, #27]
 80085c8:	4910      	ldr	r1, [pc, #64]	@ (800860c <tcp_slowtmr+0x290>)
 80085ca:	5c8a      	ldrb	r2, [r1, r2]
 80085cc:	4093      	lsls	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80085d6:	4293      	cmp	r3, r2
 80085d8:	dc1a      	bgt.n	8008610 <tcp_slowtmr+0x294>
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	b21a      	sxth	r2, r3
 80085de:	e019      	b.n	8008614 <tcp_slowtmr+0x298>
 80085e0:	200081b4 	.word	0x200081b4
 80085e4:	200081ca 	.word	0x200081ca
 80085e8:	200081c0 	.word	0x200081c0
 80085ec:	080114d0 	.word	0x080114d0
 80085f0:	08011814 	.word	0x08011814
 80085f4:	08011514 	.word	0x08011514
 80085f8:	08011840 	.word	0x08011840
 80085fc:	0801186c 	.word	0x0801186c
 8008600:	0801189c 	.word	0x0801189c
 8008604:	080118d0 	.word	0x080118d0
 8008608:	080134a8 	.word	0x080134a8
 800860c:	08013498 	.word	0x08013498
 8008610:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008616:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800861a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861c:	2200      	movs	r2, #0
 800861e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008622:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008628:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800862c:	4293      	cmp	r3, r2
 800862e:	bf28      	it	cs
 8008630:	4613      	movcs	r3, r2
 8008632:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008634:	8a7b      	ldrh	r3, [r7, #18]
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008648:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	b29b      	uxth	r3, r3
 800864e:	429a      	cmp	r2, r3
 8008650:	d206      	bcs.n	8008660 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008662:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008666:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800866a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866c:	2200      	movs	r2, #0
 800866e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008672:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008674:	f004 f818 	bl	800c6a8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867a:	7d1b      	ldrb	r3, [r3, #20]
 800867c:	2b06      	cmp	r3, #6
 800867e:	d111      	bne.n	80086a4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008682:	8b5b      	ldrh	r3, [r3, #26]
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800868c:	4b9c      	ldr	r3, [pc, #624]	@ (8008900 <tcp_slowtmr+0x584>)
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b28      	cmp	r3, #40	@ 0x28
 8008698:	d904      	bls.n	80086a4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800869a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800869e:	3301      	adds	r3, #1
 80086a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80086a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a6:	7a5b      	ldrb	r3, [r3, #9]
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d04a      	beq.n	8008746 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80086b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d003      	beq.n	80086c0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80086bc:	2b07      	cmp	r3, #7
 80086be:	d142      	bne.n	8008746 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086c0:	4b8f      	ldr	r3, [pc, #572]	@ (8008900 <tcp_slowtmr+0x584>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80086ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086cc:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80086d0:	4b8c      	ldr	r3, [pc, #560]	@ (8008904 <tcp_slowtmr+0x588>)
 80086d2:	440b      	add	r3, r1
 80086d4:	498c      	ldr	r1, [pc, #560]	@ (8008908 <tcp_slowtmr+0x58c>)
 80086d6:	fba1 1303 	umull	r1, r3, r1, r3
 80086da:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086dc:	429a      	cmp	r2, r3
 80086de:	d90a      	bls.n	80086f6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80086e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086e4:	3301      	adds	r3, #1
 80086e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80086ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086ee:	3301      	adds	r3, #1
 80086f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80086f4:	e027      	b.n	8008746 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086f6:	4b82      	ldr	r3, [pc, #520]	@ (8008900 <tcp_slowtmr+0x584>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008702:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008708:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800870c:	4618      	mov	r0, r3
 800870e:	4b7f      	ldr	r3, [pc, #508]	@ (800890c <tcp_slowtmr+0x590>)
 8008710:	fb00 f303 	mul.w	r3, r0, r3
 8008714:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008716:	497c      	ldr	r1, [pc, #496]	@ (8008908 <tcp_slowtmr+0x58c>)
 8008718:	fba1 1303 	umull	r1, r3, r1, r3
 800871c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800871e:	429a      	cmp	r2, r3
 8008720:	d911      	bls.n	8008746 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008722:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008724:	f004 fac4 	bl	800ccb0 <tcp_keepalive>
 8008728:	4603      	mov	r3, r0
 800872a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800872e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008732:	2b00      	cmp	r3, #0
 8008734:	d107      	bne.n	8008746 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008738:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800873c:	3301      	adds	r3, #1
 800873e:	b2da      	uxtb	r2, r3
 8008740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008742:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800874a:	2b00      	cmp	r3, #0
 800874c:	d011      	beq.n	8008772 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800874e:	4b6c      	ldr	r3, [pc, #432]	@ (8008900 <tcp_slowtmr+0x584>)
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	1ad2      	subs	r2, r2, r3
 8008758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800875e:	4619      	mov	r1, r3
 8008760:	460b      	mov	r3, r1
 8008762:	005b      	lsls	r3, r3, #1
 8008764:	440b      	add	r3, r1
 8008766:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008768:	429a      	cmp	r2, r3
 800876a:	d302      	bcc.n	8008772 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800876c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800876e:	f000 fddd 	bl	800932c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008774:	7d1b      	ldrb	r3, [r3, #20]
 8008776:	2b03      	cmp	r3, #3
 8008778:	d10b      	bne.n	8008792 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800877a:	4b61      	ldr	r3, [pc, #388]	@ (8008900 <tcp_slowtmr+0x584>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b28      	cmp	r3, #40	@ 0x28
 8008786:	d904      	bls.n	8008792 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800878c:	3301      	adds	r3, #1
 800878e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008794:	7d1b      	ldrb	r3, [r3, #20]
 8008796:	2b09      	cmp	r3, #9
 8008798:	d10b      	bne.n	80087b2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800879a:	4b59      	ldr	r3, [pc, #356]	@ (8008900 <tcp_slowtmr+0x584>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	2bf0      	cmp	r3, #240	@ 0xf0
 80087a6:	d904      	bls.n	80087b2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80087a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087ac:	3301      	adds	r3, #1
 80087ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80087b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d060      	beq.n	800887c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80087ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80087c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80087c4:	f000 fbfe 	bl	8008fc4 <tcp_pcb_purge>
      if (prev != NULL) {
 80087c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d010      	beq.n	80087f0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80087ce:	4b50      	ldr	r3, [pc, #320]	@ (8008910 <tcp_slowtmr+0x594>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d106      	bne.n	80087e6 <tcp_slowtmr+0x46a>
 80087d8:	4b4e      	ldr	r3, [pc, #312]	@ (8008914 <tcp_slowtmr+0x598>)
 80087da:	f240 526d 	movw	r2, #1389	@ 0x56d
 80087de:	494e      	ldr	r1, [pc, #312]	@ (8008918 <tcp_slowtmr+0x59c>)
 80087e0:	484e      	ldr	r0, [pc, #312]	@ (800891c <tcp_slowtmr+0x5a0>)
 80087e2:	f007 f9fb 	bl	800fbdc <iprintf>
        prev->next = pcb->next;
 80087e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ec:	60da      	str	r2, [r3, #12]
 80087ee:	e00f      	b.n	8008810 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80087f0:	4b47      	ldr	r3, [pc, #284]	@ (8008910 <tcp_slowtmr+0x594>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d006      	beq.n	8008808 <tcp_slowtmr+0x48c>
 80087fa:	4b46      	ldr	r3, [pc, #280]	@ (8008914 <tcp_slowtmr+0x598>)
 80087fc:	f240 5271 	movw	r2, #1393	@ 0x571
 8008800:	4947      	ldr	r1, [pc, #284]	@ (8008920 <tcp_slowtmr+0x5a4>)
 8008802:	4846      	ldr	r0, [pc, #280]	@ (800891c <tcp_slowtmr+0x5a0>)
 8008804:	f007 f9ea 	bl	800fbdc <iprintf>
        tcp_active_pcbs = pcb->next;
 8008808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	4a40      	ldr	r2, [pc, #256]	@ (8008910 <tcp_slowtmr+0x594>)
 800880e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008810:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008814:	2b00      	cmp	r3, #0
 8008816:	d013      	beq.n	8008840 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800881c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008820:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008824:	3304      	adds	r3, #4
 8008826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008828:	8ad2      	ldrh	r2, [r2, #22]
 800882a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800882c:	8b09      	ldrh	r1, [r1, #24]
 800882e:	9102      	str	r1, [sp, #8]
 8008830:	9201      	str	r2, [sp, #4]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	462b      	mov	r3, r5
 8008836:	4622      	mov	r2, r4
 8008838:	4601      	mov	r1, r0
 800883a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800883c:	f004 f984 	bl	800cb48 <tcp_rst>
      err_arg = pcb->callback_arg;
 8008840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008848:	7d1b      	ldrb	r3, [r3, #20]
 800884a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800884c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008856:	6838      	ldr	r0, [r7, #0]
 8008858:	f7ff f9f2 	bl	8007c40 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800885c:	4b31      	ldr	r3, [pc, #196]	@ (8008924 <tcp_slowtmr+0x5a8>)
 800885e:	2200      	movs	r2, #0
 8008860:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <tcp_slowtmr+0x4f6>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f06f 010c 	mvn.w	r1, #12
 800886e:	68b8      	ldr	r0, [r7, #8]
 8008870:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008872:	4b2c      	ldr	r3, [pc, #176]	@ (8008924 <tcp_slowtmr+0x5a8>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d037      	beq.n	80088ea <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800887a:	e592      	b.n	80083a2 <tcp_slowtmr+0x26>
      prev = pcb;
 800887c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	7f1b      	ldrb	r3, [r3, #28]
 800888a:	3301      	adds	r3, #1
 800888c:	b2da      	uxtb	r2, r3
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008894:	7f1a      	ldrb	r2, [r3, #28]
 8008896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008898:	7f5b      	ldrb	r3, [r3, #29]
 800889a:	429a      	cmp	r2, r3
 800889c:	d325      	bcc.n	80088ea <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	2200      	movs	r2, #0
 80088a2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80088a4:	4b1f      	ldr	r3, [pc, #124]	@ (8008924 <tcp_slowtmr+0x5a8>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80088aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <tcp_slowtmr+0x550>
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088bc:	6912      	ldr	r2, [r2, #16]
 80088be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	4603      	mov	r3, r0
 80088c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80088ca:	e002      	b.n	80088d2 <tcp_slowtmr+0x556>
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80088d2:	4b14      	ldr	r3, [pc, #80]	@ (8008924 <tcp_slowtmr+0x5a8>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f47f ad62 	bne.w	80083a0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80088dc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d102      	bne.n	80088ea <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80088e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088e6:	f003 fb7b 	bl	800bfe0 <tcp_output>
  while (pcb != NULL) {
 80088ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f47f ad5e 	bne.w	80083ae <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80088f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008928 <tcp_slowtmr+0x5ac>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80088fc:	e069      	b.n	80089d2 <tcp_slowtmr+0x656>
 80088fe:	bf00      	nop
 8008900:	200081b4 	.word	0x200081b4
 8008904:	000a4cb8 	.word	0x000a4cb8
 8008908:	10624dd3 	.word	0x10624dd3
 800890c:	000124f8 	.word	0x000124f8
 8008910:	200081c0 	.word	0x200081c0
 8008914:	080114d0 	.word	0x080114d0
 8008918:	08011908 	.word	0x08011908
 800891c:	08011514 	.word	0x08011514
 8008920:	08011934 	.word	0x08011934
 8008924:	200081c8 	.word	0x200081c8
 8008928:	200081c4 	.word	0x200081c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800892c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892e:	7d1b      	ldrb	r3, [r3, #20]
 8008930:	2b0a      	cmp	r3, #10
 8008932:	d006      	beq.n	8008942 <tcp_slowtmr+0x5c6>
 8008934:	4b2b      	ldr	r3, [pc, #172]	@ (80089e4 <tcp_slowtmr+0x668>)
 8008936:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800893a:	492b      	ldr	r1, [pc, #172]	@ (80089e8 <tcp_slowtmr+0x66c>)
 800893c:	482b      	ldr	r0, [pc, #172]	@ (80089ec <tcp_slowtmr+0x670>)
 800893e:	f007 f94d 	bl	800fbdc <iprintf>
    pcb_remove = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008948:	4b29      	ldr	r3, [pc, #164]	@ (80089f0 <tcp_slowtmr+0x674>)
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2bf0      	cmp	r3, #240	@ 0xf0
 8008954:	d904      	bls.n	8008960 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800895a:	3301      	adds	r3, #1
 800895c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008964:	2b00      	cmp	r3, #0
 8008966:	d02f      	beq.n	80089c8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008968:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800896a:	f000 fb2b 	bl	8008fc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	2b00      	cmp	r3, #0
 8008972:	d010      	beq.n	8008996 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008974:	4b1f      	ldr	r3, [pc, #124]	@ (80089f4 <tcp_slowtmr+0x678>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800897a:	429a      	cmp	r2, r3
 800897c:	d106      	bne.n	800898c <tcp_slowtmr+0x610>
 800897e:	4b19      	ldr	r3, [pc, #100]	@ (80089e4 <tcp_slowtmr+0x668>)
 8008980:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008984:	491c      	ldr	r1, [pc, #112]	@ (80089f8 <tcp_slowtmr+0x67c>)
 8008986:	4819      	ldr	r0, [pc, #100]	@ (80089ec <tcp_slowtmr+0x670>)
 8008988:	f007 f928 	bl	800fbdc <iprintf>
        prev->next = pcb->next;
 800898c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008992:	60da      	str	r2, [r3, #12]
 8008994:	e00f      	b.n	80089b6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008996:	4b17      	ldr	r3, [pc, #92]	@ (80089f4 <tcp_slowtmr+0x678>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800899c:	429a      	cmp	r2, r3
 800899e:	d006      	beq.n	80089ae <tcp_slowtmr+0x632>
 80089a0:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <tcp_slowtmr+0x668>)
 80089a2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80089a6:	4915      	ldr	r1, [pc, #84]	@ (80089fc <tcp_slowtmr+0x680>)
 80089a8:	4810      	ldr	r0, [pc, #64]	@ (80089ec <tcp_slowtmr+0x670>)
 80089aa:	f007 f917 	bl	800fbdc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80089ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	4a10      	ldr	r2, [pc, #64]	@ (80089f4 <tcp_slowtmr+0x678>)
 80089b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80089ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80089c0:	69f8      	ldr	r0, [r7, #28]
 80089c2:	f7ff f93d 	bl	8007c40 <tcp_free>
 80089c6:	e004      	b.n	80089d2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80089cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80089d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1a9      	bne.n	800892c <tcp_slowtmr+0x5b0>
    }
  }
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	3730      	adds	r7, #48	@ 0x30
 80089de:	46bd      	mov	sp, r7
 80089e0:	bdb0      	pop	{r4, r5, r7, pc}
 80089e2:	bf00      	nop
 80089e4:	080114d0 	.word	0x080114d0
 80089e8:	08011960 	.word	0x08011960
 80089ec:	08011514 	.word	0x08011514
 80089f0:	200081b4 	.word	0x200081b4
 80089f4:	200081c4 	.word	0x200081c4
 80089f8:	08011990 	.word	0x08011990
 80089fc:	080119b8 	.word	0x080119b8

08008a00 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008a06:	4b2d      	ldr	r3, [pc, #180]	@ (8008abc <tcp_fasttmr+0xbc>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8008abc <tcp_fasttmr+0xbc>)
 8008a10:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008a12:	4b2b      	ldr	r3, [pc, #172]	@ (8008ac0 <tcp_fasttmr+0xc0>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008a18:	e048      	b.n	8008aac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	7f9a      	ldrb	r2, [r3, #30]
 8008a1e:	4b27      	ldr	r3, [pc, #156]	@ (8008abc <tcp_fasttmr+0xbc>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d03f      	beq.n	8008aa6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008a26:	4b25      	ldr	r3, [pc, #148]	@ (8008abc <tcp_fasttmr+0xbc>)
 8008a28:	781a      	ldrb	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	8b5b      	ldrh	r3, [r3, #26]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d010      	beq.n	8008a5c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	8b5b      	ldrh	r3, [r3, #26]
 8008a3e:	f043 0302 	orr.w	r3, r3, #2
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f003 fac9 	bl	800bfe0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8b5b      	ldrh	r3, [r3, #26]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	8b5b      	ldrh	r3, [r3, #26]
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d009      	beq.n	8008a7c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	8b5b      	ldrh	r3, [r3, #26]
 8008a6c:	f023 0308 	bic.w	r3, r3, #8
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff fa76 	bl	8007f68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac4 <tcp_fasttmr+0xc4>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f819 	bl	8008ac8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008a96:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac4 <tcp_fasttmr+0xc4>)
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d000      	beq.n	8008aa0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008a9e:	e7b8      	b.n	8008a12 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	e002      	b.n	8008aac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1b3      	bne.n	8008a1a <tcp_fasttmr+0x1a>
    }
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	200081ca 	.word	0x200081ca
 8008ac0:	200081c0 	.word	0x200081c0
 8008ac4:	200081c8 	.word	0x200081c8

08008ac8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008ac8:	b590      	push	{r4, r7, lr}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <tcp_process_refused_data+0x22>
 8008ad6:	4b37      	ldr	r3, [pc, #220]	@ (8008bb4 <tcp_process_refused_data+0xec>)
 8008ad8:	f240 6209 	movw	r2, #1545	@ 0x609
 8008adc:	4936      	ldr	r1, [pc, #216]	@ (8008bb8 <tcp_process_refused_data+0xf0>)
 8008ade:	4837      	ldr	r0, [pc, #220]	@ (8008bbc <tcp_process_refused_data+0xf4>)
 8008ae0:	f007 f87c 	bl	800fbdc <iprintf>
 8008ae4:	f06f 030f 	mvn.w	r3, #15
 8008ae8:	e060      	b.n	8008bac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008aee:	7b5b      	ldrb	r3, [r3, #13]
 8008af0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008af6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00b      	beq.n	8008b20 <tcp_process_refused_data+0x58>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6918      	ldr	r0, [r3, #16]
 8008b12:	2300      	movs	r3, #0
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	47a0      	blx	r4
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	73fb      	strb	r3, [r7, #15]
 8008b1e:	e007      	b.n	8008b30 <tcp_process_refused_data+0x68>
 8008b20:	2300      	movs	r3, #0
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	2000      	movs	r0, #0
 8008b28:	f000 f8a4 	bl	8008c74 <tcp_recv_null>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d12a      	bne.n	8008b8e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d033      	beq.n	8008baa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b46:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008b4a:	d005      	beq.n	8008b58 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b50:	3301      	adds	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <tcp_process_refused_data+0xb2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6918      	ldr	r0, [r3, #16]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	2200      	movs	r2, #0
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	47a0      	blx	r4
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	e001      	b.n	8008b7e <tcp_process_refused_data+0xb6>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b82:	f113 0f0d 	cmn.w	r3, #13
 8008b86:	d110      	bne.n	8008baa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008b88:	f06f 030c 	mvn.w	r3, #12
 8008b8c:	e00e      	b.n	8008bac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b92:	f113 0f0d 	cmn.w	r3, #13
 8008b96:	d102      	bne.n	8008b9e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008b98:	f06f 030c 	mvn.w	r3, #12
 8008b9c:	e006      	b.n	8008bac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008ba4:	f06f 0304 	mvn.w	r3, #4
 8008ba8:	e000      	b.n	8008bac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd90      	pop	{r4, r7, pc}
 8008bb4:	080114d0 	.word	0x080114d0
 8008bb8:	080119e0 	.word	0x080119e0
 8008bbc:	08011514 	.word	0x08011514

08008bc0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008bc8:	e007      	b.n	8008bda <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f80a 	bl	8008bea <tcp_seg_free>
    seg = next;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1f4      	bne.n	8008bca <tcp_segs_free+0xa>
  }
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00c      	beq.n	8008c12 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d004      	beq.n	8008c0a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe fd7b 	bl	8007700 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	2003      	movs	r0, #3
 8008c0e:	f7fd ff21 	bl	8006a54 <memp_free>
  }
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d106      	bne.n	8008c38 <tcp_seg_copy+0x1c>
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c68 <tcp_seg_copy+0x4c>)
 8008c2c:	f240 6282 	movw	r2, #1666	@ 0x682
 8008c30:	490e      	ldr	r1, [pc, #56]	@ (8008c6c <tcp_seg_copy+0x50>)
 8008c32:	480f      	ldr	r0, [pc, #60]	@ (8008c70 <tcp_seg_copy+0x54>)
 8008c34:	f006 ffd2 	bl	800fbdc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008c38:	2003      	movs	r0, #3
 8008c3a:	f7fd fe9b 	bl	8006974 <memp_malloc>
 8008c3e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <tcp_seg_copy+0x2e>
    return NULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	e00a      	b.n	8008c60 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008c4a:	2210      	movs	r2, #16
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f007 f89f 	bl	800fd92 <memcpy>
  pbuf_ref(cseg->p);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe fdf1 	bl	8007840 <pbuf_ref>
  return cseg;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	080114d0 	.word	0x080114d0
 8008c6c:	08011a24 	.word	0x08011a24
 8008c70:	08011514 	.word	0x08011514

08008c74 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d109      	bne.n	8008c9c <tcp_recv_null+0x28>
 8008c88:	4b12      	ldr	r3, [pc, #72]	@ (8008cd4 <tcp_recv_null+0x60>)
 8008c8a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8008c8e:	4912      	ldr	r1, [pc, #72]	@ (8008cd8 <tcp_recv_null+0x64>)
 8008c90:	4812      	ldr	r0, [pc, #72]	@ (8008cdc <tcp_recv_null+0x68>)
 8008c92:	f006 ffa3 	bl	800fbdc <iprintf>
 8008c96:	f06f 030f 	mvn.w	r3, #15
 8008c9a:	e016      	b.n	8008cca <tcp_recv_null+0x56>

  if (p != NULL) {
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d009      	beq.n	8008cb6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	891b      	ldrh	r3, [r3, #8]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68b8      	ldr	r0, [r7, #8]
 8008caa:	f7ff fb17 	bl	80082dc <tcp_recved>
    pbuf_free(p);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7fe fd26 	bl	8007700 <pbuf_free>
 8008cb4:	e008      	b.n	8008cc8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d104      	bne.n	8008cc8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008cbe:	68b8      	ldr	r0, [r7, #8]
 8008cc0:	f7ff f9bc 	bl	800803c <tcp_close>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	e000      	b.n	8008cca <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	080114d0 	.word	0x080114d0
 8008cd8:	08011a40 	.word	0x08011a40
 8008cdc:	08011514 	.word	0x08011514

08008ce0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	db01      	blt.n	8008cf6 <tcp_kill_prio+0x16>
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	e000      	b.n	8008cf8 <tcp_kill_prio+0x18>
 8008cf6:	237f      	movs	r3, #127	@ 0x7f
 8008cf8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d034      	beq.n	8008d6a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d0e:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <tcp_kill_prio+0x94>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e01f      	b.n	8008d56 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	7d5b      	ldrb	r3, [r3, #21]
 8008d1a:	7afa      	ldrb	r2, [r7, #11]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d80c      	bhi.n	8008d3a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008d24:	7afa      	ldrb	r2, [r7, #11]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d112      	bne.n	8008d50 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008d2a:	4b13      	ldr	r3, [pc, #76]	@ (8008d78 <tcp_kill_prio+0x98>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d80a      	bhi.n	8008d50 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d78 <tcp_kill_prio+0x98>)
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	7d5b      	ldrb	r3, [r3, #21]
 8008d4e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1dc      	bne.n	8008d16 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d004      	beq.n	8008d6c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008d62:	6938      	ldr	r0, [r7, #16]
 8008d64:	f7ff fa54 	bl	8008210 <tcp_abort>
 8008d68:	e000      	b.n	8008d6c <tcp_kill_prio+0x8c>
    return;
 8008d6a:	bf00      	nop
  }
}
 8008d6c:	3718      	adds	r7, #24
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	200081c0 	.word	0x200081c0
 8008d78:	200081b4 	.word	0x200081b4

08008d7c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	2b08      	cmp	r3, #8
 8008d8a:	d009      	beq.n	8008da0 <tcp_kill_state+0x24>
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	2b09      	cmp	r3, #9
 8008d90:	d006      	beq.n	8008da0 <tcp_kill_state+0x24>
 8008d92:	4b1a      	ldr	r3, [pc, #104]	@ (8008dfc <tcp_kill_state+0x80>)
 8008d94:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8008d98:	4919      	ldr	r1, [pc, #100]	@ (8008e00 <tcp_kill_state+0x84>)
 8008d9a:	481a      	ldr	r0, [pc, #104]	@ (8008e04 <tcp_kill_state+0x88>)
 8008d9c:	f006 ff1e 	bl	800fbdc <iprintf>

  inactivity = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008da8:	4b17      	ldr	r3, [pc, #92]	@ (8008e08 <tcp_kill_state+0x8c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	e017      	b.n	8008de0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	7d1b      	ldrb	r3, [r3, #20]
 8008db4:	79fa      	ldrb	r2, [r7, #7]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d10f      	bne.n	8008dda <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008dba:	4b14      	ldr	r3, [pc, #80]	@ (8008e0c <tcp_kill_state+0x90>)
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d807      	bhi.n	8008dda <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008dca:	4b10      	ldr	r3, [pc, #64]	@ (8008e0c <tcp_kill_state+0x90>)
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	617b      	str	r3, [r7, #20]
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e4      	bne.n	8008db0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008dec:	2100      	movs	r1, #0
 8008dee:	6938      	ldr	r0, [r7, #16]
 8008df0:	f7ff f950 	bl	8008094 <tcp_abandon>
  }
}
 8008df4:	bf00      	nop
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	080114d0 	.word	0x080114d0
 8008e00:	08011a5c 	.word	0x08011a5c
 8008e04:	08011514 	.word	0x08011514
 8008e08:	200081c0 	.word	0x200081c0
 8008e0c:	200081b4 	.word	0x200081b4

08008e10 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e1e:	4b12      	ldr	r3, [pc, #72]	@ (8008e68 <tcp_kill_timewait+0x58>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e012      	b.n	8008e4c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e26:	4b11      	ldr	r3, [pc, #68]	@ (8008e6c <tcp_kill_timewait+0x5c>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d807      	bhi.n	8008e46 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008e36:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <tcp_kill_timewait+0x5c>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e9      	bne.n	8008e26 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008e58:	68b8      	ldr	r0, [r7, #8]
 8008e5a:	f7ff f9d9 	bl	8008210 <tcp_abort>
  }
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200081c4 	.word	0x200081c4
 8008e6c:	200081b4 	.word	0x200081b4

08008e70 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008e76:	4b10      	ldr	r3, [pc, #64]	@ (8008eb8 <tcp_handle_closepend+0x48>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008e7c:	e014      	b.n	8008ea8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8b5b      	ldrh	r3, [r3, #26]
 8008e88:	f003 0308 	and.w	r3, r3, #8
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d009      	beq.n	8008ea4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	8b5b      	ldrh	r3, [r3, #26]
 8008e94:	f023 0308 	bic.w	r3, r3, #8
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff f862 	bl	8007f68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e7      	bne.n	8008e7e <tcp_handle_closepend+0xe>
  }
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	200081c0 	.word	0x200081c0

08008ebc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	f7fd fd54 	bl	8006974 <memp_malloc>
 8008ecc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d126      	bne.n	8008f22 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008ed4:	f7ff ffcc 	bl	8008e70 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008ed8:	f7ff ff9a 	bl	8008e10 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008edc:	2001      	movs	r0, #1
 8008ede:	f7fd fd49 	bl	8006974 <memp_malloc>
 8008ee2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d11b      	bne.n	8008f22 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008eea:	2009      	movs	r0, #9
 8008eec:	f7ff ff46 	bl	8008d7c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ef0:	2001      	movs	r0, #1
 8008ef2:	f7fd fd3f 	bl	8006974 <memp_malloc>
 8008ef6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d111      	bne.n	8008f22 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008efe:	2008      	movs	r0, #8
 8008f00:	f7ff ff3c 	bl	8008d7c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f04:	2001      	movs	r0, #1
 8008f06:	f7fd fd35 	bl	8006974 <memp_malloc>
 8008f0a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d107      	bne.n	8008f22 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff fee3 	bl	8008ce0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f1a:	2001      	movs	r0, #1
 8008f1c:	f7fd fd2a 	bl	8006974 <memp_malloc>
 8008f20:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d03f      	beq.n	8008fa8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008f28:	229c      	movs	r2, #156	@ 0x9c
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f006 feba 	bl	800fca6 <memset>
    pcb->prio = prio;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	79fa      	ldrb	r2, [r7, #7]
 8008f36:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008f3e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	22ff      	movs	r2, #255	@ 0xff
 8008f56:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008f5e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2206      	movs	r2, #6
 8008f64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2206      	movs	r2, #6
 8008f6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f74:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb4 <tcp_alloc+0xf8>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008f86:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb8 <tcp_alloc+0xfc>)
 8008f88:	781a      	ldrb	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008f94:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4a08      	ldr	r2, [pc, #32]	@ (8008fbc <tcp_alloc+0x100>)
 8008f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4a07      	ldr	r2, [pc, #28]	@ (8008fc0 <tcp_alloc+0x104>)
 8008fa4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	200081b4 	.word	0x200081b4
 8008fb8:	200081ca 	.word	0x200081ca
 8008fbc:	08008c75 	.word	0x08008c75
 8008fc0:	006ddd00 	.word	0x006ddd00

08008fc4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d107      	bne.n	8008fe2 <tcp_pcb_purge+0x1e>
 8008fd2:	4b21      	ldr	r3, [pc, #132]	@ (8009058 <tcp_pcb_purge+0x94>)
 8008fd4:	f640 0251 	movw	r2, #2129	@ 0x851
 8008fd8:	4920      	ldr	r1, [pc, #128]	@ (800905c <tcp_pcb_purge+0x98>)
 8008fda:	4821      	ldr	r0, [pc, #132]	@ (8009060 <tcp_pcb_purge+0x9c>)
 8008fdc:	f006 fdfe 	bl	800fbdc <iprintf>
 8008fe0:	e037      	b.n	8009052 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	7d1b      	ldrb	r3, [r3, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d033      	beq.n	8009052 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008fee:	2b0a      	cmp	r3, #10
 8008ff0:	d02f      	beq.n	8009052 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d02b      	beq.n	8009052 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d007      	beq.n	8009012 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fb7a 	bl	8007700 <pbuf_free>
      pcb->refused_data = NULL;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f986 	bl	800932c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009026:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800902c:	4618      	mov	r0, r3
 800902e:	f7ff fdc7 	bl	8008bc0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fdc2 	bl	8008bc0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	080114d0 	.word	0x080114d0
 800905c:	08011b1c 	.word	0x08011b1c
 8009060:	08011514 	.word	0x08011514

08009064 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <tcp_pcb_remove+0x1e>
 8009074:	4b3e      	ldr	r3, [pc, #248]	@ (8009170 <tcp_pcb_remove+0x10c>)
 8009076:	f640 0283 	movw	r2, #2179	@ 0x883
 800907a:	493e      	ldr	r1, [pc, #248]	@ (8009174 <tcp_pcb_remove+0x110>)
 800907c:	483e      	ldr	r0, [pc, #248]	@ (8009178 <tcp_pcb_remove+0x114>)
 800907e:	f006 fdad 	bl	800fbdc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <tcp_pcb_remove+0x32>
 8009088:	4b39      	ldr	r3, [pc, #228]	@ (8009170 <tcp_pcb_remove+0x10c>)
 800908a:	f640 0284 	movw	r2, #2180	@ 0x884
 800908e:	493b      	ldr	r1, [pc, #236]	@ (800917c <tcp_pcb_remove+0x118>)
 8009090:	4839      	ldr	r0, [pc, #228]	@ (8009178 <tcp_pcb_remove+0x114>)
 8009092:	f006 fda3 	bl	800fbdc <iprintf>

  TCP_RMV(pcblist, pcb);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d105      	bne.n	80090ac <tcp_pcb_remove+0x48>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e013      	b.n	80090d4 <tcp_pcb_remove+0x70>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	e00c      	b.n	80090ce <tcp_pcb_remove+0x6a>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d104      	bne.n	80090c8 <tcp_pcb_remove+0x64>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	e005      	b.n	80090d4 <tcp_pcb_remove+0x70>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1ef      	bne.n	80090b4 <tcp_pcb_remove+0x50>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2200      	movs	r2, #0
 80090d8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80090da:	6838      	ldr	r0, [r7, #0]
 80090dc:	f7ff ff72 	bl	8008fc4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	7d1b      	ldrb	r3, [r3, #20]
 80090e4:	2b0a      	cmp	r3, #10
 80090e6:	d013      	beq.n	8009110 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d00f      	beq.n	8009110 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	8b5b      	ldrh	r3, [r3, #26]
 80090f4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d009      	beq.n	8009110 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	8b5b      	ldrh	r3, [r3, #26]
 8009100:	f043 0302 	orr.w	r3, r3, #2
 8009104:	b29a      	uxth	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800910a:	6838      	ldr	r0, [r7, #0]
 800910c:	f002 ff68 	bl	800bfe0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	7d1b      	ldrb	r3, [r3, #20]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d020      	beq.n	800915a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d006      	beq.n	800912e <tcp_pcb_remove+0xca>
 8009120:	4b13      	ldr	r3, [pc, #76]	@ (8009170 <tcp_pcb_remove+0x10c>)
 8009122:	f640 0293 	movw	r2, #2195	@ 0x893
 8009126:	4916      	ldr	r1, [pc, #88]	@ (8009180 <tcp_pcb_remove+0x11c>)
 8009128:	4813      	ldr	r0, [pc, #76]	@ (8009178 <tcp_pcb_remove+0x114>)
 800912a:	f006 fd57 	bl	800fbdc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009132:	2b00      	cmp	r3, #0
 8009134:	d006      	beq.n	8009144 <tcp_pcb_remove+0xe0>
 8009136:	4b0e      	ldr	r3, [pc, #56]	@ (8009170 <tcp_pcb_remove+0x10c>)
 8009138:	f640 0294 	movw	r2, #2196	@ 0x894
 800913c:	4911      	ldr	r1, [pc, #68]	@ (8009184 <tcp_pcb_remove+0x120>)
 800913e:	480e      	ldr	r0, [pc, #56]	@ (8009178 <tcp_pcb_remove+0x114>)
 8009140:	f006 fd4c 	bl	800fbdc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009148:	2b00      	cmp	r3, #0
 800914a:	d006      	beq.n	800915a <tcp_pcb_remove+0xf6>
 800914c:	4b08      	ldr	r3, [pc, #32]	@ (8009170 <tcp_pcb_remove+0x10c>)
 800914e:	f640 0296 	movw	r2, #2198	@ 0x896
 8009152:	490d      	ldr	r1, [pc, #52]	@ (8009188 <tcp_pcb_remove+0x124>)
 8009154:	4808      	ldr	r0, [pc, #32]	@ (8009178 <tcp_pcb_remove+0x114>)
 8009156:	f006 fd41 	bl	800fbdc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2200      	movs	r2, #0
 800915e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2200      	movs	r2, #0
 8009164:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	080114d0 	.word	0x080114d0
 8009174:	08011b38 	.word	0x08011b38
 8009178:	08011514 	.word	0x08011514
 800917c:	08011b54 	.word	0x08011b54
 8009180:	08011b74 	.word	0x08011b74
 8009184:	08011b8c 	.word	0x08011b8c
 8009188:	08011ba8 	.word	0x08011ba8

0800918c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <tcp_next_iss+0x1c>
 800919a:	4b0a      	ldr	r3, [pc, #40]	@ (80091c4 <tcp_next_iss+0x38>)
 800919c:	f640 02af 	movw	r2, #2223	@ 0x8af
 80091a0:	4909      	ldr	r1, [pc, #36]	@ (80091c8 <tcp_next_iss+0x3c>)
 80091a2:	480a      	ldr	r0, [pc, #40]	@ (80091cc <tcp_next_iss+0x40>)
 80091a4:	f006 fd1a 	bl	800fbdc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80091a8:	4b09      	ldr	r3, [pc, #36]	@ (80091d0 <tcp_next_iss+0x44>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	4b09      	ldr	r3, [pc, #36]	@ (80091d4 <tcp_next_iss+0x48>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4413      	add	r3, r2
 80091b2:	4a07      	ldr	r2, [pc, #28]	@ (80091d0 <tcp_next_iss+0x44>)
 80091b4:	6013      	str	r3, [r2, #0]
  return iss;
 80091b6:	4b06      	ldr	r3, [pc, #24]	@ (80091d0 <tcp_next_iss+0x44>)
 80091b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	080114d0 	.word	0x080114d0
 80091c8:	08011bc0 	.word	0x08011bc0
 80091cc:	08011514 	.word	0x08011514
 80091d0:	20000024 	.word	0x20000024
 80091d4:	200081b4 	.word	0x200081b4

080091d8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d106      	bne.n	80091fa <tcp_eff_send_mss_netif+0x22>
 80091ec:	4b14      	ldr	r3, [pc, #80]	@ (8009240 <tcp_eff_send_mss_netif+0x68>)
 80091ee:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80091f2:	4914      	ldr	r1, [pc, #80]	@ (8009244 <tcp_eff_send_mss_netif+0x6c>)
 80091f4:	4814      	ldr	r0, [pc, #80]	@ (8009248 <tcp_eff_send_mss_netif+0x70>)
 80091f6:	f006 fcf1 	bl	800fbdc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009200:	89fb      	ldrh	r3, [r7, #14]
 8009202:	e019      	b.n	8009238 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009208:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800920a:	8afb      	ldrh	r3, [r7, #22]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d012      	beq.n	8009236 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009210:	2328      	movs	r3, #40	@ 0x28
 8009212:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009214:	8afa      	ldrh	r2, [r7, #22]
 8009216:	8abb      	ldrh	r3, [r7, #20]
 8009218:	429a      	cmp	r2, r3
 800921a:	d904      	bls.n	8009226 <tcp_eff_send_mss_netif+0x4e>
 800921c:	8afa      	ldrh	r2, [r7, #22]
 800921e:	8abb      	ldrh	r3, [r7, #20]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	b29b      	uxth	r3, r3
 8009224:	e000      	b.n	8009228 <tcp_eff_send_mss_netif+0x50>
 8009226:	2300      	movs	r3, #0
 8009228:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800922a:	8a7a      	ldrh	r2, [r7, #18]
 800922c:	89fb      	ldrh	r3, [r7, #14]
 800922e:	4293      	cmp	r3, r2
 8009230:	bf28      	it	cs
 8009232:	4613      	movcs	r3, r2
 8009234:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009236:	89fb      	ldrh	r3, [r7, #14]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	080114d0 	.word	0x080114d0
 8009244:	08011bdc 	.word	0x08011bdc
 8009248:	08011514 	.word	0x08011514

0800924c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d119      	bne.n	8009294 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009260:	4b10      	ldr	r3, [pc, #64]	@ (80092a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009262:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8009266:	4910      	ldr	r1, [pc, #64]	@ (80092a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009268:	4810      	ldr	r0, [pc, #64]	@ (80092ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800926a:	f006 fcb7 	bl	800fbdc <iprintf>

  while (pcb != NULL) {
 800926e:	e011      	b.n	8009294 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d108      	bne.n	800928e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f7fe ffc4 	bl	8008210 <tcp_abort>
      pcb = next;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	e002      	b.n	8009294 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1ea      	bne.n	8009270 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	080114d0 	.word	0x080114d0
 80092a8:	08011c04 	.word	0x08011c04
 80092ac:	08011514 	.word	0x08011514

080092b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d02a      	beq.n	8009316 <tcp_netif_ip_addr_changed+0x66>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d026      	beq.n	8009316 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80092c8:	4b15      	ldr	r3, [pc, #84]	@ (8009320 <tcp_netif_ip_addr_changed+0x70>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff ffbc 	bl	800924c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80092d4:	4b13      	ldr	r3, [pc, #76]	@ (8009324 <tcp_netif_ip_addr_changed+0x74>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff ffb6 	bl	800924c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d017      	beq.n	8009316 <tcp_netif_ip_addr_changed+0x66>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d013      	beq.n	8009316 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80092ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009328 <tcp_netif_ip_addr_changed+0x78>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	e00c      	b.n	8009310 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d103      	bne.n	800930a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1ef      	bne.n	80092f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	200081c0 	.word	0x200081c0
 8009324:	200081b8 	.word	0x200081b8
 8009328:	200081bc 	.word	0x200081bc

0800932c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009338:	2b00      	cmp	r3, #0
 800933a:	d007      	beq.n	800934c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009340:	4618      	mov	r0, r3
 8009342:	f7ff fc3d 	bl	8008bc0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009354:	b590      	push	{r4, r7, lr}
 8009356:	b08d      	sub	sp, #52	@ 0x34
 8009358:	af04      	add	r7, sp, #16
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d105      	bne.n	8009370 <tcp_input+0x1c>
 8009364:	4b9b      	ldr	r3, [pc, #620]	@ (80095d4 <tcp_input+0x280>)
 8009366:	2283      	movs	r2, #131	@ 0x83
 8009368:	499b      	ldr	r1, [pc, #620]	@ (80095d8 <tcp_input+0x284>)
 800936a:	489c      	ldr	r0, [pc, #624]	@ (80095dc <tcp_input+0x288>)
 800936c:	f006 fc36 	bl	800fbdc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	4a9a      	ldr	r2, [pc, #616]	@ (80095e0 <tcp_input+0x28c>)
 8009376:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	895b      	ldrh	r3, [r3, #10]
 800937c:	2b13      	cmp	r3, #19
 800937e:	f240 83d1 	bls.w	8009b24 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009382:	4b98      	ldr	r3, [pc, #608]	@ (80095e4 <tcp_input+0x290>)
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	4a97      	ldr	r2, [pc, #604]	@ (80095e4 <tcp_input+0x290>)
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	4611      	mov	r1, r2
 800938c:	4618      	mov	r0, r3
 800938e:	f005 fbcf 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	f040 83c7 	bne.w	8009b28 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800939a:	4b92      	ldr	r3, [pc, #584]	@ (80095e4 <tcp_input+0x290>)
 800939c:	695b      	ldr	r3, [r3, #20]
 800939e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80093a2:	2be0      	cmp	r3, #224	@ 0xe0
 80093a4:	f000 83c0 	beq.w	8009b28 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80093a8:	4b8d      	ldr	r3, [pc, #564]	@ (80095e0 <tcp_input+0x28c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	899b      	ldrh	r3, [r3, #12]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fc fe6b 	bl	800608c <lwip_htons>
 80093b6:	4603      	mov	r3, r0
 80093b8:	0b1b      	lsrs	r3, r3, #12
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80093c2:	7cbb      	ldrb	r3, [r7, #18]
 80093c4:	2b13      	cmp	r3, #19
 80093c6:	f240 83b1 	bls.w	8009b2c <tcp_input+0x7d8>
 80093ca:	7cbb      	ldrb	r3, [r7, #18]
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	891b      	ldrh	r3, [r3, #8]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	f200 83aa 	bhi.w	8009b2c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80093d8:	7cbb      	ldrb	r3, [r7, #18]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	3b14      	subs	r3, #20
 80093de:	b29a      	uxth	r2, r3
 80093e0:	4b81      	ldr	r3, [pc, #516]	@ (80095e8 <tcp_input+0x294>)
 80093e2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80093e4:	4b81      	ldr	r3, [pc, #516]	@ (80095ec <tcp_input+0x298>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	895a      	ldrh	r2, [r3, #10]
 80093ee:	7cbb      	ldrb	r3, [r7, #18]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d309      	bcc.n	800940a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80093f6:	4b7c      	ldr	r3, [pc, #496]	@ (80095e8 <tcp_input+0x294>)
 80093f8:	881a      	ldrh	r2, [r3, #0]
 80093fa:	4b7d      	ldr	r3, [pc, #500]	@ (80095f0 <tcp_input+0x29c>)
 80093fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80093fe:	7cbb      	ldrb	r3, [r7, #18]
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7fe f8f6 	bl	80075f4 <pbuf_remove_header>
 8009408:	e04e      	b.n	80094a8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d105      	bne.n	800941e <tcp_input+0xca>
 8009412:	4b70      	ldr	r3, [pc, #448]	@ (80095d4 <tcp_input+0x280>)
 8009414:	22c2      	movs	r2, #194	@ 0xc2
 8009416:	4977      	ldr	r1, [pc, #476]	@ (80095f4 <tcp_input+0x2a0>)
 8009418:	4870      	ldr	r0, [pc, #448]	@ (80095dc <tcp_input+0x288>)
 800941a:	f006 fbdf 	bl	800fbdc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800941e:	2114      	movs	r1, #20
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7fe f8e7 	bl	80075f4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	895a      	ldrh	r2, [r3, #10]
 800942a:	4b71      	ldr	r3, [pc, #452]	@ (80095f0 <tcp_input+0x29c>)
 800942c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800942e:	4b6e      	ldr	r3, [pc, #440]	@ (80095e8 <tcp_input+0x294>)
 8009430:	881a      	ldrh	r2, [r3, #0]
 8009432:	4b6f      	ldr	r3, [pc, #444]	@ (80095f0 <tcp_input+0x29c>)
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800943a:	4b6d      	ldr	r3, [pc, #436]	@ (80095f0 <tcp_input+0x29c>)
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7fe f8d7 	bl	80075f4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	895b      	ldrh	r3, [r3, #10]
 800944c:	8a3a      	ldrh	r2, [r7, #16]
 800944e:	429a      	cmp	r2, r3
 8009450:	f200 836e 	bhi.w	8009b30 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	4a64      	ldr	r2, [pc, #400]	@ (80095ec <tcp_input+0x298>)
 800945c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	8a3a      	ldrh	r2, [r7, #16]
 8009464:	4611      	mov	r1, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe f8c4 	bl	80075f4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	891a      	ldrh	r2, [r3, #8]
 8009470:	8a3b      	ldrh	r3, [r7, #16]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	b29a      	uxth	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	895b      	ldrh	r3, [r3, #10]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d005      	beq.n	800948e <tcp_input+0x13a>
 8009482:	4b54      	ldr	r3, [pc, #336]	@ (80095d4 <tcp_input+0x280>)
 8009484:	22df      	movs	r2, #223	@ 0xdf
 8009486:	495c      	ldr	r1, [pc, #368]	@ (80095f8 <tcp_input+0x2a4>)
 8009488:	4854      	ldr	r0, [pc, #336]	@ (80095dc <tcp_input+0x288>)
 800948a:	f006 fba7 	bl	800fbdc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	891a      	ldrh	r2, [r3, #8]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	891b      	ldrh	r3, [r3, #8]
 8009498:	429a      	cmp	r2, r3
 800949a:	d005      	beq.n	80094a8 <tcp_input+0x154>
 800949c:	4b4d      	ldr	r3, [pc, #308]	@ (80095d4 <tcp_input+0x280>)
 800949e:	22e0      	movs	r2, #224	@ 0xe0
 80094a0:	4956      	ldr	r1, [pc, #344]	@ (80095fc <tcp_input+0x2a8>)
 80094a2:	484e      	ldr	r0, [pc, #312]	@ (80095dc <tcp_input+0x288>)
 80094a4:	f006 fb9a 	bl	800fbdc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80094a8:	4b4d      	ldr	r3, [pc, #308]	@ (80095e0 <tcp_input+0x28c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	4a4b      	ldr	r2, [pc, #300]	@ (80095e0 <tcp_input+0x28c>)
 80094b2:	6814      	ldr	r4, [r2, #0]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fc fde9 	bl	800608c <lwip_htons>
 80094ba:	4603      	mov	r3, r0
 80094bc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80094be:	4b48      	ldr	r3, [pc, #288]	@ (80095e0 <tcp_input+0x28c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	885b      	ldrh	r3, [r3, #2]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	4a46      	ldr	r2, [pc, #280]	@ (80095e0 <tcp_input+0x28c>)
 80094c8:	6814      	ldr	r4, [r2, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fc fdde 	bl	800608c <lwip_htons>
 80094d0:	4603      	mov	r3, r0
 80094d2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80094d4:	4b42      	ldr	r3, [pc, #264]	@ (80095e0 <tcp_input+0x28c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	4a41      	ldr	r2, [pc, #260]	@ (80095e0 <tcp_input+0x28c>)
 80094dc:	6814      	ldr	r4, [r2, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fc fdea 	bl	80060b8 <lwip_htonl>
 80094e4:	4603      	mov	r3, r0
 80094e6:	6063      	str	r3, [r4, #4]
 80094e8:	6863      	ldr	r3, [r4, #4]
 80094ea:	4a45      	ldr	r2, [pc, #276]	@ (8009600 <tcp_input+0x2ac>)
 80094ec:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80094ee:	4b3c      	ldr	r3, [pc, #240]	@ (80095e0 <tcp_input+0x28c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	4a3a      	ldr	r2, [pc, #232]	@ (80095e0 <tcp_input+0x28c>)
 80094f6:	6814      	ldr	r4, [r2, #0]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fc fddd 	bl	80060b8 <lwip_htonl>
 80094fe:	4603      	mov	r3, r0
 8009500:	60a3      	str	r3, [r4, #8]
 8009502:	68a3      	ldr	r3, [r4, #8]
 8009504:	4a3f      	ldr	r2, [pc, #252]	@ (8009604 <tcp_input+0x2b0>)
 8009506:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009508:	4b35      	ldr	r3, [pc, #212]	@ (80095e0 <tcp_input+0x28c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	89db      	ldrh	r3, [r3, #14]
 800950e:	b29b      	uxth	r3, r3
 8009510:	4a33      	ldr	r2, [pc, #204]	@ (80095e0 <tcp_input+0x28c>)
 8009512:	6814      	ldr	r4, [r2, #0]
 8009514:	4618      	mov	r0, r3
 8009516:	f7fc fdb9 	bl	800608c <lwip_htons>
 800951a:	4603      	mov	r3, r0
 800951c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800951e:	4b30      	ldr	r3, [pc, #192]	@ (80095e0 <tcp_input+0x28c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	899b      	ldrh	r3, [r3, #12]
 8009524:	b29b      	uxth	r3, r3
 8009526:	4618      	mov	r0, r3
 8009528:	f7fc fdb0 	bl	800608c <lwip_htons>
 800952c:	4603      	mov	r3, r0
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009534:	b2da      	uxtb	r2, r3
 8009536:	4b34      	ldr	r3, [pc, #208]	@ (8009608 <tcp_input+0x2b4>)
 8009538:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	891a      	ldrh	r2, [r3, #8]
 800953e:	4b33      	ldr	r3, [pc, #204]	@ (800960c <tcp_input+0x2b8>)
 8009540:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009542:	4b31      	ldr	r3, [pc, #196]	@ (8009608 <tcp_input+0x2b4>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00c      	beq.n	8009568 <tcp_input+0x214>
    tcplen++;
 800954e:	4b2f      	ldr	r3, [pc, #188]	@ (800960c <tcp_input+0x2b8>)
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	b29a      	uxth	r2, r3
 8009556:	4b2d      	ldr	r3, [pc, #180]	@ (800960c <tcp_input+0x2b8>)
 8009558:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	891a      	ldrh	r2, [r3, #8]
 800955e:	4b2b      	ldr	r3, [pc, #172]	@ (800960c <tcp_input+0x2b8>)
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	f200 82e6 	bhi.w	8009b34 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009568:	2300      	movs	r3, #0
 800956a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800956c:	4b28      	ldr	r3, [pc, #160]	@ (8009610 <tcp_input+0x2bc>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	61fb      	str	r3, [r7, #28]
 8009572:	e09d      	b.n	80096b0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	7d1b      	ldrb	r3, [r3, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d105      	bne.n	8009588 <tcp_input+0x234>
 800957c:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <tcp_input+0x280>)
 800957e:	22fb      	movs	r2, #251	@ 0xfb
 8009580:	4924      	ldr	r1, [pc, #144]	@ (8009614 <tcp_input+0x2c0>)
 8009582:	4816      	ldr	r0, [pc, #88]	@ (80095dc <tcp_input+0x288>)
 8009584:	f006 fb2a 	bl	800fbdc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	7d1b      	ldrb	r3, [r3, #20]
 800958c:	2b0a      	cmp	r3, #10
 800958e:	d105      	bne.n	800959c <tcp_input+0x248>
 8009590:	4b10      	ldr	r3, [pc, #64]	@ (80095d4 <tcp_input+0x280>)
 8009592:	22fc      	movs	r2, #252	@ 0xfc
 8009594:	4920      	ldr	r1, [pc, #128]	@ (8009618 <tcp_input+0x2c4>)
 8009596:	4811      	ldr	r0, [pc, #68]	@ (80095dc <tcp_input+0x288>)
 8009598:	f006 fb20 	bl	800fbdc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	7d1b      	ldrb	r3, [r3, #20]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d105      	bne.n	80095b0 <tcp_input+0x25c>
 80095a4:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <tcp_input+0x280>)
 80095a6:	22fd      	movs	r2, #253	@ 0xfd
 80095a8:	491c      	ldr	r1, [pc, #112]	@ (800961c <tcp_input+0x2c8>)
 80095aa:	480c      	ldr	r0, [pc, #48]	@ (80095dc <tcp_input+0x288>)
 80095ac:	f006 fb16 	bl	800fbdc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	7a1b      	ldrb	r3, [r3, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d033      	beq.n	8009620 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	7a1a      	ldrb	r2, [r3, #8]
 80095bc:	4b09      	ldr	r3, [pc, #36]	@ (80095e4 <tcp_input+0x290>)
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80095c4:	3301      	adds	r3, #1
 80095c6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d029      	beq.n	8009620 <tcp_input+0x2cc>
      prev = pcb;
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	61bb      	str	r3, [r7, #24]
      continue;
 80095d0:	e06b      	b.n	80096aa <tcp_input+0x356>
 80095d2:	bf00      	nop
 80095d4:	08011c38 	.word	0x08011c38
 80095d8:	08011c6c 	.word	0x08011c6c
 80095dc:	08011c84 	.word	0x08011c84
 80095e0:	200081dc 	.word	0x200081dc
 80095e4:	20005298 	.word	0x20005298
 80095e8:	200081e0 	.word	0x200081e0
 80095ec:	200081e4 	.word	0x200081e4
 80095f0:	200081e2 	.word	0x200081e2
 80095f4:	08011cac 	.word	0x08011cac
 80095f8:	08011cbc 	.word	0x08011cbc
 80095fc:	08011cc8 	.word	0x08011cc8
 8009600:	200081ec 	.word	0x200081ec
 8009604:	200081f0 	.word	0x200081f0
 8009608:	200081f8 	.word	0x200081f8
 800960c:	200081f6 	.word	0x200081f6
 8009610:	200081c0 	.word	0x200081c0
 8009614:	08011ce8 	.word	0x08011ce8
 8009618:	08011d10 	.word	0x08011d10
 800961c:	08011d3c 	.word	0x08011d3c
    }

    if (pcb->remote_port == tcphdr->src &&
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	8b1a      	ldrh	r2, [r3, #24]
 8009624:	4b72      	ldr	r3, [pc, #456]	@ (80097f0 <tcp_input+0x49c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	b29b      	uxth	r3, r3
 800962c:	429a      	cmp	r2, r3
 800962e:	d13a      	bne.n	80096a6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	8ada      	ldrh	r2, [r3, #22]
 8009634:	4b6e      	ldr	r3, [pc, #440]	@ (80097f0 <tcp_input+0x49c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	885b      	ldrh	r3, [r3, #2]
 800963a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800963c:	429a      	cmp	r2, r3
 800963e:	d132      	bne.n	80096a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	4b6b      	ldr	r3, [pc, #428]	@ (80097f4 <tcp_input+0x4a0>)
 8009646:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009648:	429a      	cmp	r2, r3
 800964a:	d12c      	bne.n	80096a6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	4b68      	ldr	r3, [pc, #416]	@ (80097f4 <tcp_input+0x4a0>)
 8009652:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009654:	429a      	cmp	r2, r3
 8009656:	d126      	bne.n	80096a6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	429a      	cmp	r2, r3
 8009660:	d106      	bne.n	8009670 <tcp_input+0x31c>
 8009662:	4b65      	ldr	r3, [pc, #404]	@ (80097f8 <tcp_input+0x4a4>)
 8009664:	f240 120d 	movw	r2, #269	@ 0x10d
 8009668:	4964      	ldr	r1, [pc, #400]	@ (80097fc <tcp_input+0x4a8>)
 800966a:	4865      	ldr	r0, [pc, #404]	@ (8009800 <tcp_input+0x4ac>)
 800966c:	f006 fab6 	bl	800fbdc <iprintf>
      if (prev != NULL) {
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <tcp_input+0x338>
        prev->next = pcb->next;
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800967e:	4b61      	ldr	r3, [pc, #388]	@ (8009804 <tcp_input+0x4b0>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009686:	4a5f      	ldr	r2, [pc, #380]	@ (8009804 <tcp_input+0x4b0>)
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	429a      	cmp	r2, r3
 8009694:	d111      	bne.n	80096ba <tcp_input+0x366>
 8009696:	4b58      	ldr	r3, [pc, #352]	@ (80097f8 <tcp_input+0x4a4>)
 8009698:	f240 1215 	movw	r2, #277	@ 0x115
 800969c:	495a      	ldr	r1, [pc, #360]	@ (8009808 <tcp_input+0x4b4>)
 800969e:	4858      	ldr	r0, [pc, #352]	@ (8009800 <tcp_input+0x4ac>)
 80096a0:	f006 fa9c 	bl	800fbdc <iprintf>
      break;
 80096a4:	e009      	b.n	80096ba <tcp_input+0x366>
    }
    prev = pcb;
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	61fb      	str	r3, [r7, #28]
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f47f af5e 	bne.w	8009574 <tcp_input+0x220>
 80096b8:	e000      	b.n	80096bc <tcp_input+0x368>
      break;
 80096ba:	bf00      	nop
  }

  if (pcb == NULL) {
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f040 80aa 	bne.w	8009818 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80096c4:	4b51      	ldr	r3, [pc, #324]	@ (800980c <tcp_input+0x4b8>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	e03f      	b.n	800974c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	7d1b      	ldrb	r3, [r3, #20]
 80096d0:	2b0a      	cmp	r3, #10
 80096d2:	d006      	beq.n	80096e2 <tcp_input+0x38e>
 80096d4:	4b48      	ldr	r3, [pc, #288]	@ (80097f8 <tcp_input+0x4a4>)
 80096d6:	f240 121f 	movw	r2, #287	@ 0x11f
 80096da:	494d      	ldr	r1, [pc, #308]	@ (8009810 <tcp_input+0x4bc>)
 80096dc:	4848      	ldr	r0, [pc, #288]	@ (8009800 <tcp_input+0x4ac>)
 80096de:	f006 fa7d 	bl	800fbdc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	7a1b      	ldrb	r3, [r3, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	7a1a      	ldrb	r2, [r3, #8]
 80096ee:	4b41      	ldr	r3, [pc, #260]	@ (80097f4 <tcp_input+0x4a0>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096f6:	3301      	adds	r3, #1
 80096f8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d122      	bne.n	8009744 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	8b1a      	ldrh	r2, [r3, #24]
 8009702:	4b3b      	ldr	r3, [pc, #236]	@ (80097f0 <tcp_input+0x49c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
 800970a:	429a      	cmp	r2, r3
 800970c:	d11b      	bne.n	8009746 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	8ada      	ldrh	r2, [r3, #22]
 8009712:	4b37      	ldr	r3, [pc, #220]	@ (80097f0 <tcp_input+0x49c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	885b      	ldrh	r3, [r3, #2]
 8009718:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800971a:	429a      	cmp	r2, r3
 800971c:	d113      	bne.n	8009746 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	4b34      	ldr	r3, [pc, #208]	@ (80097f4 <tcp_input+0x4a0>)
 8009724:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009726:	429a      	cmp	r2, r3
 8009728:	d10d      	bne.n	8009746 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	4b31      	ldr	r3, [pc, #196]	@ (80097f4 <tcp_input+0x4a0>)
 8009730:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009732:	429a      	cmp	r2, r3
 8009734:	d107      	bne.n	8009746 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009736:	69f8      	ldr	r0, [r7, #28]
 8009738:	f000 fb56 	bl	8009de8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7fd ffdf 	bl	8007700 <pbuf_free>
        return;
 8009742:	e1fd      	b.n	8009b40 <tcp_input+0x7ec>
        continue;
 8009744:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	61fb      	str	r3, [r7, #28]
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1bc      	bne.n	80096cc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009752:	2300      	movs	r3, #0
 8009754:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009756:	4b2f      	ldr	r3, [pc, #188]	@ (8009814 <tcp_input+0x4c0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e02a      	b.n	80097b4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	7a1b      	ldrb	r3, [r3, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00c      	beq.n	8009780 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	7a1a      	ldrb	r2, [r3, #8]
 800976a:	4b22      	ldr	r3, [pc, #136]	@ (80097f4 <tcp_input+0x4a0>)
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009772:	3301      	adds	r3, #1
 8009774:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009776:	429a      	cmp	r2, r3
 8009778:	d002      	beq.n	8009780 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	61bb      	str	r3, [r7, #24]
        continue;
 800977e:	e016      	b.n	80097ae <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	8ada      	ldrh	r2, [r3, #22]
 8009784:	4b1a      	ldr	r3, [pc, #104]	@ (80097f0 <tcp_input+0x49c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	885b      	ldrh	r3, [r3, #2]
 800978a:	b29b      	uxth	r3, r3
 800978c:	429a      	cmp	r2, r3
 800978e:	d10c      	bne.n	80097aa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	4b17      	ldr	r3, [pc, #92]	@ (80097f4 <tcp_input+0x4a0>)
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	429a      	cmp	r2, r3
 800979a:	d00f      	beq.n	80097bc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00d      	beq.n	80097be <tcp_input+0x46a>
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d009      	beq.n	80097be <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	617b      	str	r3, [r7, #20]
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1d1      	bne.n	800975e <tcp_input+0x40a>
 80097ba:	e000      	b.n	80097be <tcp_input+0x46a>
            break;
 80097bc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d029      	beq.n	8009818 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	68da      	ldr	r2, [r3, #12]
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80097d2:	4b10      	ldr	r3, [pc, #64]	@ (8009814 <tcp_input+0x4c0>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80097da:	4a0e      	ldr	r2, [pc, #56]	@ (8009814 <tcp_input+0x4c0>)
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80097e0:	6978      	ldr	r0, [r7, #20]
 80097e2:	f000 fa03 	bl	8009bec <tcp_listen_input>
      }
      pbuf_free(p);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7fd ff8a 	bl	8007700 <pbuf_free>
      return;
 80097ec:	e1a8      	b.n	8009b40 <tcp_input+0x7ec>
 80097ee:	bf00      	nop
 80097f0:	200081dc 	.word	0x200081dc
 80097f4:	20005298 	.word	0x20005298
 80097f8:	08011c38 	.word	0x08011c38
 80097fc:	08011d64 	.word	0x08011d64
 8009800:	08011c84 	.word	0x08011c84
 8009804:	200081c0 	.word	0x200081c0
 8009808:	08011d90 	.word	0x08011d90
 800980c:	200081c4 	.word	0x200081c4
 8009810:	08011dbc 	.word	0x08011dbc
 8009814:	200081bc 	.word	0x200081bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 8158 	beq.w	8009ad0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009820:	4b95      	ldr	r3, [pc, #596]	@ (8009a78 <tcp_input+0x724>)
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	891a      	ldrh	r2, [r3, #8]
 800982a:	4b93      	ldr	r3, [pc, #588]	@ (8009a78 <tcp_input+0x724>)
 800982c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800982e:	4a92      	ldr	r2, [pc, #584]	@ (8009a78 <tcp_input+0x724>)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009834:	4b91      	ldr	r3, [pc, #580]	@ (8009a7c <tcp_input+0x728>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a8f      	ldr	r2, [pc, #572]	@ (8009a78 <tcp_input+0x724>)
 800983a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800983c:	4b90      	ldr	r3, [pc, #576]	@ (8009a80 <tcp_input+0x72c>)
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009842:	4b90      	ldr	r3, [pc, #576]	@ (8009a84 <tcp_input+0x730>)
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009848:	4b8f      	ldr	r3, [pc, #572]	@ (8009a88 <tcp_input+0x734>)
 800984a:	2200      	movs	r2, #0
 800984c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800984e:	4b8f      	ldr	r3, [pc, #572]	@ (8009a8c <tcp_input+0x738>)
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	f003 0308 	and.w	r3, r3, #8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d006      	beq.n	8009868 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	7b5b      	ldrb	r3, [r3, #13]
 800985e:	f043 0301 	orr.w	r3, r3, #1
 8009862:	b2da      	uxtb	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800986c:	2b00      	cmp	r3, #0
 800986e:	d017      	beq.n	80098a0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009870:	69f8      	ldr	r0, [r7, #28]
 8009872:	f7ff f929 	bl	8008ac8 <tcp_process_refused_data>
 8009876:	4603      	mov	r3, r0
 8009878:	f113 0f0d 	cmn.w	r3, #13
 800987c:	d007      	beq.n	800988e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00c      	beq.n	80098a0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009886:	4b82      	ldr	r3, [pc, #520]	@ (8009a90 <tcp_input+0x73c>)
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d008      	beq.n	80098a0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009892:	2b00      	cmp	r3, #0
 8009894:	f040 80e3 	bne.w	8009a5e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009898:	69f8      	ldr	r0, [r7, #28]
 800989a:	f003 f9a7 	bl	800cbec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800989e:	e0de      	b.n	8009a5e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80098a0:	4a7c      	ldr	r2, [pc, #496]	@ (8009a94 <tcp_input+0x740>)
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80098a6:	69f8      	ldr	r0, [r7, #28]
 80098a8:	f000 fb18 	bl	8009edc <tcp_process>
 80098ac:	4603      	mov	r3, r0
 80098ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80098b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098b4:	f113 0f0d 	cmn.w	r3, #13
 80098b8:	f000 80d3 	beq.w	8009a62 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80098bc:	4b71      	ldr	r3, [pc, #452]	@ (8009a84 <tcp_input+0x730>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	f003 0308 	and.w	r3, r3, #8
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d015      	beq.n	80098f4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d008      	beq.n	80098e4 <tcp_input+0x590>
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098d8:	69fa      	ldr	r2, [r7, #28]
 80098da:	6912      	ldr	r2, [r2, #16]
 80098dc:	f06f 010d 	mvn.w	r1, #13
 80098e0:	4610      	mov	r0, r2
 80098e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80098e4:	69f9      	ldr	r1, [r7, #28]
 80098e6:	486c      	ldr	r0, [pc, #432]	@ (8009a98 <tcp_input+0x744>)
 80098e8:	f7ff fbbc 	bl	8009064 <tcp_pcb_remove>
        tcp_free(pcb);
 80098ec:	69f8      	ldr	r0, [r7, #28]
 80098ee:	f7fe f9a7 	bl	8007c40 <tcp_free>
 80098f2:	e0da      	b.n	8009aaa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80098f8:	4b63      	ldr	r3, [pc, #396]	@ (8009a88 <tcp_input+0x734>)
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01d      	beq.n	800993c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009900:	4b61      	ldr	r3, [pc, #388]	@ (8009a88 <tcp_input+0x734>)
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00a      	beq.n	8009926 <tcp_input+0x5d2>
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009916:	69fa      	ldr	r2, [r7, #28]
 8009918:	6910      	ldr	r0, [r2, #16]
 800991a:	89fa      	ldrh	r2, [r7, #14]
 800991c:	69f9      	ldr	r1, [r7, #28]
 800991e:	4798      	blx	r3
 8009920:	4603      	mov	r3, r0
 8009922:	74fb      	strb	r3, [r7, #19]
 8009924:	e001      	b.n	800992a <tcp_input+0x5d6>
 8009926:	2300      	movs	r3, #0
 8009928:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800992a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800992e:	f113 0f0d 	cmn.w	r3, #13
 8009932:	f000 8098 	beq.w	8009a66 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009936:	4b54      	ldr	r3, [pc, #336]	@ (8009a88 <tcp_input+0x734>)
 8009938:	2200      	movs	r2, #0
 800993a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800993c:	69f8      	ldr	r0, [r7, #28]
 800993e:	f000 f915 	bl	8009b6c <tcp_input_delayed_close>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	f040 8090 	bne.w	8009a6a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800994a:	4b4d      	ldr	r3, [pc, #308]	@ (8009a80 <tcp_input+0x72c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d041      	beq.n	80099d6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009956:	2b00      	cmp	r3, #0
 8009958:	d006      	beq.n	8009968 <tcp_input+0x614>
 800995a:	4b50      	ldr	r3, [pc, #320]	@ (8009a9c <tcp_input+0x748>)
 800995c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009960:	494f      	ldr	r1, [pc, #316]	@ (8009aa0 <tcp_input+0x74c>)
 8009962:	4850      	ldr	r0, [pc, #320]	@ (8009aa4 <tcp_input+0x750>)
 8009964:	f006 f93a 	bl	800fbdc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	8b5b      	ldrh	r3, [r3, #26]
 800996c:	f003 0310 	and.w	r3, r3, #16
 8009970:	2b00      	cmp	r3, #0
 8009972:	d008      	beq.n	8009986 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009974:	4b42      	ldr	r3, [pc, #264]	@ (8009a80 <tcp_input+0x72c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f7fd fec1 	bl	8007700 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800997e:	69f8      	ldr	r0, [r7, #28]
 8009980:	f7fe fc46 	bl	8008210 <tcp_abort>
            goto aborted;
 8009984:	e091      	b.n	8009aaa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00c      	beq.n	80099aa <tcp_input+0x656>
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	6918      	ldr	r0, [r3, #16]
 800999a:	4b39      	ldr	r3, [pc, #228]	@ (8009a80 <tcp_input+0x72c>)
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	2300      	movs	r3, #0
 80099a0:	69f9      	ldr	r1, [r7, #28]
 80099a2:	47a0      	blx	r4
 80099a4:	4603      	mov	r3, r0
 80099a6:	74fb      	strb	r3, [r7, #19]
 80099a8:	e008      	b.n	80099bc <tcp_input+0x668>
 80099aa:	4b35      	ldr	r3, [pc, #212]	@ (8009a80 <tcp_input+0x72c>)
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	2300      	movs	r3, #0
 80099b0:	69f9      	ldr	r1, [r7, #28]
 80099b2:	2000      	movs	r0, #0
 80099b4:	f7ff f95e 	bl	8008c74 <tcp_recv_null>
 80099b8:	4603      	mov	r3, r0
 80099ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80099bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099c0:	f113 0f0d 	cmn.w	r3, #13
 80099c4:	d053      	beq.n	8009a6e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80099c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80099ce:	4b2c      	ldr	r3, [pc, #176]	@ (8009a80 <tcp_input+0x72c>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80099d6:	4b2b      	ldr	r3, [pc, #172]	@ (8009a84 <tcp_input+0x730>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	f003 0320 	and.w	r3, r3, #32
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d030      	beq.n	8009a44 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099ee:	7b5a      	ldrb	r2, [r3, #13]
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099f4:	f042 0220 	orr.w	r2, r2, #32
 80099f8:	b2d2      	uxtb	r2, r2
 80099fa:	735a      	strb	r2, [r3, #13]
 80099fc:	e022      	b.n	8009a44 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a02:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009a06:	d005      	beq.n	8009a14 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <tcp_input+0x6e2>
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	6918      	ldr	r0, [r3, #16]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	69f9      	ldr	r1, [r7, #28]
 8009a2e:	47a0      	blx	r4
 8009a30:	4603      	mov	r3, r0
 8009a32:	74fb      	strb	r3, [r7, #19]
 8009a34:	e001      	b.n	8009a3a <tcp_input+0x6e6>
 8009a36:	2300      	movs	r3, #0
 8009a38:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009a3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009a3e:	f113 0f0d 	cmn.w	r3, #13
 8009a42:	d016      	beq.n	8009a72 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009a44:	4b13      	ldr	r3, [pc, #76]	@ (8009a94 <tcp_input+0x740>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009a4a:	69f8      	ldr	r0, [r7, #28]
 8009a4c:	f000 f88e 	bl	8009b6c <tcp_input_delayed_close>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d128      	bne.n	8009aa8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009a56:	69f8      	ldr	r0, [r7, #28]
 8009a58:	f002 fac2 	bl	800bfe0 <tcp_output>
 8009a5c:	e025      	b.n	8009aaa <tcp_input+0x756>
        goto aborted;
 8009a5e:	bf00      	nop
 8009a60:	e023      	b.n	8009aaa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009a62:	bf00      	nop
 8009a64:	e021      	b.n	8009aaa <tcp_input+0x756>
              goto aborted;
 8009a66:	bf00      	nop
 8009a68:	e01f      	b.n	8009aaa <tcp_input+0x756>
          goto aborted;
 8009a6a:	bf00      	nop
 8009a6c:	e01d      	b.n	8009aaa <tcp_input+0x756>
            goto aborted;
 8009a6e:	bf00      	nop
 8009a70:	e01b      	b.n	8009aaa <tcp_input+0x756>
              goto aborted;
 8009a72:	bf00      	nop
 8009a74:	e019      	b.n	8009aaa <tcp_input+0x756>
 8009a76:	bf00      	nop
 8009a78:	200081cc 	.word	0x200081cc
 8009a7c:	200081dc 	.word	0x200081dc
 8009a80:	200081fc 	.word	0x200081fc
 8009a84:	200081f9 	.word	0x200081f9
 8009a88:	200081f4 	.word	0x200081f4
 8009a8c:	200081f8 	.word	0x200081f8
 8009a90:	200081f6 	.word	0x200081f6
 8009a94:	20008200 	.word	0x20008200
 8009a98:	200081c0 	.word	0x200081c0
 8009a9c:	08011c38 	.word	0x08011c38
 8009aa0:	08011dec 	.word	0x08011dec
 8009aa4:	08011c84 	.word	0x08011c84
          goto aborted;
 8009aa8:	bf00      	nop
    tcp_input_pcb = NULL;
 8009aaa:	4b27      	ldr	r3, [pc, #156]	@ (8009b48 <tcp_input+0x7f4>)
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009ab0:	4b26      	ldr	r3, [pc, #152]	@ (8009b4c <tcp_input+0x7f8>)
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009ab6:	4b26      	ldr	r3, [pc, #152]	@ (8009b50 <tcp_input+0x7fc>)
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d03f      	beq.n	8009b3e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009abe:	4b24      	ldr	r3, [pc, #144]	@ (8009b50 <tcp_input+0x7fc>)
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fd fe1c 	bl	8007700 <pbuf_free>
      inseg.p = NULL;
 8009ac8:	4b21      	ldr	r3, [pc, #132]	@ (8009b50 <tcp_input+0x7fc>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009ace:	e036      	b.n	8009b3e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009ad0:	4b20      	ldr	r3, [pc, #128]	@ (8009b54 <tcp_input+0x800>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	899b      	ldrh	r3, [r3, #12]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fc fad7 	bl	800608c <lwip_htons>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d118      	bne.n	8009b1c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009aea:	4b1b      	ldr	r3, [pc, #108]	@ (8009b58 <tcp_input+0x804>)
 8009aec:	6819      	ldr	r1, [r3, #0]
 8009aee:	4b1b      	ldr	r3, [pc, #108]	@ (8009b5c <tcp_input+0x808>)
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	4b1a      	ldr	r3, [pc, #104]	@ (8009b60 <tcp_input+0x80c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009afa:	4b16      	ldr	r3, [pc, #88]	@ (8009b54 <tcp_input+0x800>)
 8009afc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009afe:	885b      	ldrh	r3, [r3, #2]
 8009b00:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b02:	4a14      	ldr	r2, [pc, #80]	@ (8009b54 <tcp_input+0x800>)
 8009b04:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b06:	8812      	ldrh	r2, [r2, #0]
 8009b08:	b292      	uxth	r2, r2
 8009b0a:	9202      	str	r2, [sp, #8]
 8009b0c:	9301      	str	r3, [sp, #4]
 8009b0e:	4b15      	ldr	r3, [pc, #84]	@ (8009b64 <tcp_input+0x810>)
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	4b15      	ldr	r3, [pc, #84]	@ (8009b68 <tcp_input+0x814>)
 8009b14:	4602      	mov	r2, r0
 8009b16:	2000      	movs	r0, #0
 8009b18:	f003 f816 	bl	800cb48 <tcp_rst>
    pbuf_free(p);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7fd fdef 	bl	8007700 <pbuf_free>
  return;
 8009b22:	e00c      	b.n	8009b3e <tcp_input+0x7ea>
    goto dropped;
 8009b24:	bf00      	nop
 8009b26:	e006      	b.n	8009b36 <tcp_input+0x7e2>
    goto dropped;
 8009b28:	bf00      	nop
 8009b2a:	e004      	b.n	8009b36 <tcp_input+0x7e2>
    goto dropped;
 8009b2c:	bf00      	nop
 8009b2e:	e002      	b.n	8009b36 <tcp_input+0x7e2>
      goto dropped;
 8009b30:	bf00      	nop
 8009b32:	e000      	b.n	8009b36 <tcp_input+0x7e2>
      goto dropped;
 8009b34:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7fd fde2 	bl	8007700 <pbuf_free>
 8009b3c:	e000      	b.n	8009b40 <tcp_input+0x7ec>
  return;
 8009b3e:	bf00      	nop
}
 8009b40:	3724      	adds	r7, #36	@ 0x24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd90      	pop	{r4, r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20008200 	.word	0x20008200
 8009b4c:	200081fc 	.word	0x200081fc
 8009b50:	200081cc 	.word	0x200081cc
 8009b54:	200081dc 	.word	0x200081dc
 8009b58:	200081f0 	.word	0x200081f0
 8009b5c:	200081f6 	.word	0x200081f6
 8009b60:	200081ec 	.word	0x200081ec
 8009b64:	200052a8 	.word	0x200052a8
 8009b68:	200052ac 	.word	0x200052ac

08009b6c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <tcp_input_delayed_close+0x1c>
 8009b7a:	4b17      	ldr	r3, [pc, #92]	@ (8009bd8 <tcp_input_delayed_close+0x6c>)
 8009b7c:	f240 225a 	movw	r2, #602	@ 0x25a
 8009b80:	4916      	ldr	r1, [pc, #88]	@ (8009bdc <tcp_input_delayed_close+0x70>)
 8009b82:	4817      	ldr	r0, [pc, #92]	@ (8009be0 <tcp_input_delayed_close+0x74>)
 8009b84:	f006 f82a 	bl	800fbdc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009b88:	4b16      	ldr	r3, [pc, #88]	@ (8009be4 <tcp_input_delayed_close+0x78>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d01c      	beq.n	8009bce <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	8b5b      	ldrh	r3, [r3, #26]
 8009b98:	f003 0310 	and.w	r3, r3, #16
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10d      	bne.n	8009bbc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d008      	beq.n	8009bbc <tcp_input_delayed_close+0x50>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	6912      	ldr	r2, [r2, #16]
 8009bb4:	f06f 010e 	mvn.w	r1, #14
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	480a      	ldr	r0, [pc, #40]	@ (8009be8 <tcp_input_delayed_close+0x7c>)
 8009bc0:	f7ff fa50 	bl	8009064 <tcp_pcb_remove>
    tcp_free(pcb);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7fe f83b 	bl	8007c40 <tcp_free>
    return 1;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	08011c38 	.word	0x08011c38
 8009bdc:	08011e08 	.word	0x08011e08
 8009be0:	08011c84 	.word	0x08011c84
 8009be4:	200081f9 	.word	0x200081f9
 8009be8:	200081c0 	.word	0x200081c0

08009bec <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009bec:	b590      	push	{r4, r7, lr}
 8009bee:	b08b      	sub	sp, #44	@ 0x2c
 8009bf0:	af04      	add	r7, sp, #16
 8009bf2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009bf4:	4b6f      	ldr	r3, [pc, #444]	@ (8009db4 <tcp_listen_input+0x1c8>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	f003 0304 	and.w	r3, r3, #4
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f040 80d2 	bne.w	8009da6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <tcp_listen_input+0x2a>
 8009c08:	4b6b      	ldr	r3, [pc, #428]	@ (8009db8 <tcp_listen_input+0x1cc>)
 8009c0a:	f240 2281 	movw	r2, #641	@ 0x281
 8009c0e:	496b      	ldr	r1, [pc, #428]	@ (8009dbc <tcp_listen_input+0x1d0>)
 8009c10:	486b      	ldr	r0, [pc, #428]	@ (8009dc0 <tcp_listen_input+0x1d4>)
 8009c12:	f005 ffe3 	bl	800fbdc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009c16:	4b67      	ldr	r3, [pc, #412]	@ (8009db4 <tcp_listen_input+0x1c8>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	f003 0310 	and.w	r3, r3, #16
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d019      	beq.n	8009c56 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c22:	4b68      	ldr	r3, [pc, #416]	@ (8009dc4 <tcp_listen_input+0x1d8>)
 8009c24:	6819      	ldr	r1, [r3, #0]
 8009c26:	4b68      	ldr	r3, [pc, #416]	@ (8009dc8 <tcp_listen_input+0x1dc>)
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4b67      	ldr	r3, [pc, #412]	@ (8009dcc <tcp_listen_input+0x1e0>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c32:	4b67      	ldr	r3, [pc, #412]	@ (8009dd0 <tcp_listen_input+0x1e4>)
 8009c34:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c36:	885b      	ldrh	r3, [r3, #2]
 8009c38:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009c3a:	4a65      	ldr	r2, [pc, #404]	@ (8009dd0 <tcp_listen_input+0x1e4>)
 8009c3c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009c3e:	8812      	ldrh	r2, [r2, #0]
 8009c40:	b292      	uxth	r2, r2
 8009c42:	9202      	str	r2, [sp, #8]
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	4b63      	ldr	r3, [pc, #396]	@ (8009dd4 <tcp_listen_input+0x1e8>)
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	4b63      	ldr	r3, [pc, #396]	@ (8009dd8 <tcp_listen_input+0x1ec>)
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f002 ff7a 	bl	800cb48 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009c54:	e0a9      	b.n	8009daa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009c56:	4b57      	ldr	r3, [pc, #348]	@ (8009db4 <tcp_listen_input+0x1c8>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 80a3 	beq.w	8009daa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	7d5b      	ldrb	r3, [r3, #21]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff f927 	bl	8008ebc <tcp_alloc>
 8009c6e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d111      	bne.n	8009c9a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00a      	beq.n	8009c94 <tcp_listen_input+0xa8>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	6910      	ldr	r0, [r2, #16]
 8009c86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4798      	blx	r3
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73bb      	strb	r3, [r7, #14]
      return;
 8009c92:	e08b      	b.n	8009dac <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009c94:	23f0      	movs	r3, #240	@ 0xf0
 8009c96:	73bb      	strb	r3, [r7, #14]
      return;
 8009c98:	e088      	b.n	8009dac <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009c9a:	4b50      	ldr	r3, [pc, #320]	@ (8009ddc <tcp_listen_input+0x1f0>)
 8009c9c:	695a      	ldr	r2, [r3, #20]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009ca2:	4b4e      	ldr	r3, [pc, #312]	@ (8009ddc <tcp_listen_input+0x1f0>)
 8009ca4:	691a      	ldr	r2, [r3, #16]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	8ada      	ldrh	r2, [r3, #22]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009cb2:	4b47      	ldr	r3, [pc, #284]	@ (8009dd0 <tcp_listen_input+0x1e4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009cc4:	4b41      	ldr	r3, [pc, #260]	@ (8009dcc <tcp_listen_input+0x1e0>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8009cd6:	6978      	ldr	r0, [r7, #20]
 8009cd8:	f7ff fa58 	bl	800918c <tcp_next_iss>
 8009cdc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	693a      	ldr	r2, [r7, #16]
 8009cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009cf6:	4b35      	ldr	r3, [pc, #212]	@ (8009dcc <tcp_listen_input+0x1e0>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	1e5a      	subs	r2, r3, #1
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	691a      	ldr	r2, [r3, #16]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	7a5b      	ldrb	r3, [r3, #9]
 8009d12:	f003 030c 	and.w	r3, r3, #12
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7a1a      	ldrb	r2, [r3, #8]
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009d24:	4b2e      	ldr	r3, [pc, #184]	@ (8009de0 <tcp_listen_input+0x1f4>)
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	60da      	str	r2, [r3, #12]
 8009d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8009de0 <tcp_listen_input+0x1f4>)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	f003 f8cb 	bl	800cecc <tcp_timer_needed>
 8009d36:	4b2b      	ldr	r3, [pc, #172]	@ (8009de4 <tcp_listen_input+0x1f8>)
 8009d38:	2201      	movs	r2, #1
 8009d3a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009d3c:	6978      	ldr	r0, [r7, #20]
 8009d3e:	f001 fd8b 	bl	800b858 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009d42:	4b23      	ldr	r3, [pc, #140]	@ (8009dd0 <tcp_listen_input+0x1e4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	89db      	ldrh	r3, [r3, #14]
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4618      	mov	r0, r3
 8009d66:	f004 fc4d 	bl	800e604 <ip4_route>
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	461a      	mov	r2, r3
 8009d72:	4620      	mov	r0, r4
 8009d74:	f7ff fa30 	bl	80091d8 <tcp_eff_send_mss_netif>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009d80:	2112      	movs	r1, #18
 8009d82:	6978      	ldr	r0, [r7, #20]
 8009d84:	f002 f83e 	bl	800be04 <tcp_enqueue_flags>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d004      	beq.n	8009d9e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009d94:	2100      	movs	r1, #0
 8009d96:	6978      	ldr	r0, [r7, #20]
 8009d98:	f7fe f97c 	bl	8008094 <tcp_abandon>
      return;
 8009d9c:	e006      	b.n	8009dac <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009d9e:	6978      	ldr	r0, [r7, #20]
 8009da0:	f002 f91e 	bl	800bfe0 <tcp_output>
  return;
 8009da4:	e001      	b.n	8009daa <tcp_listen_input+0x1be>
    return;
 8009da6:	bf00      	nop
 8009da8:	e000      	b.n	8009dac <tcp_listen_input+0x1c0>
  return;
 8009daa:	bf00      	nop
}
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd90      	pop	{r4, r7, pc}
 8009db2:	bf00      	nop
 8009db4:	200081f8 	.word	0x200081f8
 8009db8:	08011c38 	.word	0x08011c38
 8009dbc:	08011e30 	.word	0x08011e30
 8009dc0:	08011c84 	.word	0x08011c84
 8009dc4:	200081f0 	.word	0x200081f0
 8009dc8:	200081f6 	.word	0x200081f6
 8009dcc:	200081ec 	.word	0x200081ec
 8009dd0:	200081dc 	.word	0x200081dc
 8009dd4:	200052a8 	.word	0x200052a8
 8009dd8:	200052ac 	.word	0x200052ac
 8009ddc:	20005298 	.word	0x20005298
 8009de0:	200081c0 	.word	0x200081c0
 8009de4:	200081c8 	.word	0x200081c8

08009de8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af04      	add	r7, sp, #16
 8009dee:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009df0:	4b2f      	ldr	r3, [pc, #188]	@ (8009eb0 <tcp_timewait_input+0xc8>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d153      	bne.n	8009ea4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <tcp_timewait_input+0x28>
 8009e02:	4b2c      	ldr	r3, [pc, #176]	@ (8009eb4 <tcp_timewait_input+0xcc>)
 8009e04:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009e08:	492b      	ldr	r1, [pc, #172]	@ (8009eb8 <tcp_timewait_input+0xd0>)
 8009e0a:	482c      	ldr	r0, [pc, #176]	@ (8009ebc <tcp_timewait_input+0xd4>)
 8009e0c:	f005 fee6 	bl	800fbdc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009e10:	4b27      	ldr	r3, [pc, #156]	@ (8009eb0 <tcp_timewait_input+0xc8>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d02a      	beq.n	8009e72 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009e1c:	4b28      	ldr	r3, [pc, #160]	@ (8009ec0 <tcp_timewait_input+0xd8>)
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	db2d      	blt.n	8009e86 <tcp_timewait_input+0x9e>
 8009e2a:	4b25      	ldr	r3, [pc, #148]	@ (8009ec0 <tcp_timewait_input+0xd8>)
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009e36:	440b      	add	r3, r1
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	dc23      	bgt.n	8009e86 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e3e:	4b21      	ldr	r3, [pc, #132]	@ (8009ec4 <tcp_timewait_input+0xdc>)
 8009e40:	6819      	ldr	r1, [r3, #0]
 8009e42:	4b21      	ldr	r3, [pc, #132]	@ (8009ec8 <tcp_timewait_input+0xe0>)
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	461a      	mov	r2, r3
 8009e48:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec0 <tcp_timewait_input+0xd8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8009ecc <tcp_timewait_input+0xe4>)
 8009e50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e52:	885b      	ldrh	r3, [r3, #2]
 8009e54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e56:	4a1d      	ldr	r2, [pc, #116]	@ (8009ecc <tcp_timewait_input+0xe4>)
 8009e58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e5a:	8812      	ldrh	r2, [r2, #0]
 8009e5c:	b292      	uxth	r2, r2
 8009e5e:	9202      	str	r2, [sp, #8]
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	4b1b      	ldr	r3, [pc, #108]	@ (8009ed0 <tcp_timewait_input+0xe8>)
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	4b1b      	ldr	r3, [pc, #108]	@ (8009ed4 <tcp_timewait_input+0xec>)
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f002 fe6c 	bl	800cb48 <tcp_rst>
      return;
 8009e70:	e01b      	b.n	8009eaa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009e72:	4b0f      	ldr	r3, [pc, #60]	@ (8009eb0 <tcp_timewait_input+0xc8>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009e7e:	4b16      	ldr	r3, [pc, #88]	@ (8009ed8 <tcp_timewait_input+0xf0>)
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009e86:	4b10      	ldr	r3, [pc, #64]	@ (8009ec8 <tcp_timewait_input+0xe0>)
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00c      	beq.n	8009ea8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	8b5b      	ldrh	r3, [r3, #26]
 8009e92:	f043 0302 	orr.w	r3, r3, #2
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f002 f89f 	bl	800bfe0 <tcp_output>
  }
  return;
 8009ea2:	e001      	b.n	8009ea8 <tcp_timewait_input+0xc0>
    return;
 8009ea4:	bf00      	nop
 8009ea6:	e000      	b.n	8009eaa <tcp_timewait_input+0xc2>
  return;
 8009ea8:	bf00      	nop
}
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	200081f8 	.word	0x200081f8
 8009eb4:	08011c38 	.word	0x08011c38
 8009eb8:	08011e50 	.word	0x08011e50
 8009ebc:	08011c84 	.word	0x08011c84
 8009ec0:	200081ec 	.word	0x200081ec
 8009ec4:	200081f0 	.word	0x200081f0
 8009ec8:	200081f6 	.word	0x200081f6
 8009ecc:	200081dc 	.word	0x200081dc
 8009ed0:	200052a8 	.word	0x200052a8
 8009ed4:	200052ac 	.word	0x200052ac
 8009ed8:	200081b4 	.word	0x200081b4

08009edc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009edc:	b590      	push	{r4, r7, lr}
 8009ede:	b08d      	sub	sp, #52	@ 0x34
 8009ee0:	af04      	add	r7, sp, #16
 8009ee2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d106      	bne.n	8009f00 <tcp_process+0x24>
 8009ef2:	4b9d      	ldr	r3, [pc, #628]	@ (800a168 <tcp_process+0x28c>)
 8009ef4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009ef8:	499c      	ldr	r1, [pc, #624]	@ (800a16c <tcp_process+0x290>)
 8009efa:	489d      	ldr	r0, [pc, #628]	@ (800a170 <tcp_process+0x294>)
 8009efc:	f005 fe6e 	bl	800fbdc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009f00:	4b9c      	ldr	r3, [pc, #624]	@ (800a174 <tcp_process+0x298>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d04e      	beq.n	8009faa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	7d1b      	ldrb	r3, [r3, #20]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d108      	bne.n	8009f26 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f18:	4b97      	ldr	r3, [pc, #604]	@ (800a178 <tcp_process+0x29c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d123      	bne.n	8009f68 <tcp_process+0x8c>
        acceptable = 1;
 8009f20:	2301      	movs	r3, #1
 8009f22:	76fb      	strb	r3, [r7, #27]
 8009f24:	e020      	b.n	8009f68 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f2a:	4b94      	ldr	r3, [pc, #592]	@ (800a17c <tcp_process+0x2a0>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d102      	bne.n	8009f38 <tcp_process+0x5c>
        acceptable = 1;
 8009f32:	2301      	movs	r3, #1
 8009f34:	76fb      	strb	r3, [r7, #27]
 8009f36:	e017      	b.n	8009f68 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009f38:	4b90      	ldr	r3, [pc, #576]	@ (800a17c <tcp_process+0x2a0>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db10      	blt.n	8009f68 <tcp_process+0x8c>
 8009f46:	4b8d      	ldr	r3, [pc, #564]	@ (800a17c <tcp_process+0x2a0>)
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4e:	6879      	ldr	r1, [r7, #4]
 8009f50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009f52:	440b      	add	r3, r1
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dc06      	bgt.n	8009f68 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	8b5b      	ldrh	r3, [r3, #26]
 8009f5e:	f043 0302 	orr.w	r3, r3, #2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009f68:	7efb      	ldrb	r3, [r7, #27]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d01b      	beq.n	8009fa6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	7d1b      	ldrb	r3, [r3, #20]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <tcp_process+0xa8>
 8009f76:	4b7c      	ldr	r3, [pc, #496]	@ (800a168 <tcp_process+0x28c>)
 8009f78:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8009f7c:	4980      	ldr	r1, [pc, #512]	@ (800a180 <tcp_process+0x2a4>)
 8009f7e:	487c      	ldr	r0, [pc, #496]	@ (800a170 <tcp_process+0x294>)
 8009f80:	f005 fe2c 	bl	800fbdc <iprintf>
      recv_flags |= TF_RESET;
 8009f84:	4b7f      	ldr	r3, [pc, #508]	@ (800a184 <tcp_process+0x2a8>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	f043 0308 	orr.w	r3, r3, #8
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	4b7d      	ldr	r3, [pc, #500]	@ (800a184 <tcp_process+0x2a8>)
 8009f90:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8b5b      	ldrh	r3, [r3, #26]
 8009f96:	f023 0301 	bic.w	r3, r3, #1
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009fa0:	f06f 030d 	mvn.w	r3, #13
 8009fa4:	e37a      	b.n	800a69c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e378      	b.n	800a69c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009faa:	4b72      	ldr	r3, [pc, #456]	@ (800a174 <tcp_process+0x298>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	f003 0302 	and.w	r3, r3, #2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d010      	beq.n	8009fd8 <tcp_process+0xfc>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	7d1b      	ldrb	r3, [r3, #20]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d00c      	beq.n	8009fd8 <tcp_process+0xfc>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	7d1b      	ldrb	r3, [r3, #20]
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d008      	beq.n	8009fd8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	8b5b      	ldrh	r3, [r3, #26]
 8009fca:	f043 0302 	orr.w	r3, r3, #2
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e361      	b.n	800a69c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	8b5b      	ldrh	r3, [r3, #26]
 8009fdc:	f003 0310 	and.w	r3, r3, #16
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d103      	bne.n	8009fec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009fe4:	4b68      	ldr	r3, [pc, #416]	@ (800a188 <tcp_process+0x2ac>)
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 fc2b 	bl	800b858 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	7d1b      	ldrb	r3, [r3, #20]
 800a006:	3b02      	subs	r3, #2
 800a008:	2b07      	cmp	r3, #7
 800a00a:	f200 8337 	bhi.w	800a67c <tcp_process+0x7a0>
 800a00e:	a201      	add	r2, pc, #4	@ (adr r2, 800a014 <tcp_process+0x138>)
 800a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a014:	0800a035 	.word	0x0800a035
 800a018:	0800a265 	.word	0x0800a265
 800a01c:	0800a3dd 	.word	0x0800a3dd
 800a020:	0800a407 	.word	0x0800a407
 800a024:	0800a52b 	.word	0x0800a52b
 800a028:	0800a3dd 	.word	0x0800a3dd
 800a02c:	0800a5b7 	.word	0x0800a5b7
 800a030:	0800a647 	.word	0x0800a647
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a034:	4b4f      	ldr	r3, [pc, #316]	@ (800a174 <tcp_process+0x298>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	f003 0310 	and.w	r3, r3, #16
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 80e4 	beq.w	800a20a <tcp_process+0x32e>
 800a042:	4b4c      	ldr	r3, [pc, #304]	@ (800a174 <tcp_process+0x298>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 80dd 	beq.w	800a20a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	4b48      	ldr	r3, [pc, #288]	@ (800a178 <tcp_process+0x29c>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	f040 80d5 	bne.w	800a20a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a060:	4b46      	ldr	r3, [pc, #280]	@ (800a17c <tcp_process+0x2a0>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a072:	4b41      	ldr	r3, [pc, #260]	@ (800a178 <tcp_process+0x29c>)
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a07a:	4b44      	ldr	r3, [pc, #272]	@ (800a18c <tcp_process+0x2b0>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	89db      	ldrh	r3, [r3, #14]
 800a080:	b29a      	uxth	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a094:	4b39      	ldr	r3, [pc, #228]	@ (800a17c <tcp_process+0x2a0>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	1e5a      	subs	r2, r3, #1
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2204      	movs	r2, #4
 800a0a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f004 faa9 	bl	800e604 <ip4_route>
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f7ff f88c 	bl	80091d8 <tcp_eff_send_mss_netif>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a0cc:	009a      	lsls	r2, r3, #2
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	bf38      	it	cc
 800a0dc:	460b      	movcc	r3, r1
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d204      	bcs.n	800a0ec <tcp_process+0x210>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	e00d      	b.n	800a108 <tcp_process+0x22c>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d904      	bls.n	800a104 <tcp_process+0x228>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	b29b      	uxth	r3, r3
 800a102:	e001      	b.n	800a108 <tcp_process+0x22c>
 800a104:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a114:	2b00      	cmp	r3, #0
 800a116:	d106      	bne.n	800a126 <tcp_process+0x24a>
 800a118:	4b13      	ldr	r3, [pc, #76]	@ (800a168 <tcp_process+0x28c>)
 800a11a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a11e:	491c      	ldr	r1, [pc, #112]	@ (800a190 <tcp_process+0x2b4>)
 800a120:	4813      	ldr	r0, [pc, #76]	@ (800a170 <tcp_process+0x294>)
 800a122:	f005 fd5b 	bl	800fbdc <iprintf>
        --pcb->snd_queuelen;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a13a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d12a      	bne.n	800a198 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a146:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <tcp_process+0x280>
 800a14e:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <tcp_process+0x28c>)
 800a150:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a154:	490f      	ldr	r1, [pc, #60]	@ (800a194 <tcp_process+0x2b8>)
 800a156:	4806      	ldr	r0, [pc, #24]	@ (800a170 <tcp_process+0x294>)
 800a158:	f005 fd40 	bl	800fbdc <iprintf>
          pcb->unsent = rseg->next;
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a164:	e01c      	b.n	800a1a0 <tcp_process+0x2c4>
 800a166:	bf00      	nop
 800a168:	08011c38 	.word	0x08011c38
 800a16c:	08011e70 	.word	0x08011e70
 800a170:	08011c84 	.word	0x08011c84
 800a174:	200081f8 	.word	0x200081f8
 800a178:	200081f0 	.word	0x200081f0
 800a17c:	200081ec 	.word	0x200081ec
 800a180:	08011e8c 	.word	0x08011e8c
 800a184:	200081f9 	.word	0x200081f9
 800a188:	200081b4 	.word	0x200081b4
 800a18c:	200081dc 	.word	0x200081dc
 800a190:	08011eac 	.word	0x08011eac
 800a194:	08011ec4 	.word	0x08011ec4
        } else {
          pcb->unacked = rseg->next;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a1a0:	69f8      	ldr	r0, [r7, #28]
 800a1a2:	f7fe fd22 	bl	8008bea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d104      	bne.n	800a1b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1b4:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a1b6:	e006      	b.n	800a1c6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00a      	beq.n	800a1e6 <tcp_process+0x30a>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	6910      	ldr	r0, [r2, #16]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	4798      	blx	r3
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	76bb      	strb	r3, [r7, #26]
 800a1e4:	e001      	b.n	800a1ea <tcp_process+0x30e>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a1ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a1ee:	f113 0f0d 	cmn.w	r3, #13
 800a1f2:	d102      	bne.n	800a1fa <tcp_process+0x31e>
          return ERR_ABRT;
 800a1f4:	f06f 030c 	mvn.w	r3, #12
 800a1f8:	e250      	b.n	800a69c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	8b5b      	ldrh	r3, [r3, #26]
 800a1fe:	f043 0302 	orr.w	r3, r3, #2
 800a202:	b29a      	uxth	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a208:	e23a      	b.n	800a680 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a20a:	4b98      	ldr	r3, [pc, #608]	@ (800a46c <tcp_process+0x590>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	f003 0310 	and.w	r3, r3, #16
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 8234 	beq.w	800a680 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a218:	4b95      	ldr	r3, [pc, #596]	@ (800a470 <tcp_process+0x594>)
 800a21a:	6819      	ldr	r1, [r3, #0]
 800a21c:	4b95      	ldr	r3, [pc, #596]	@ (800a474 <tcp_process+0x598>)
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	461a      	mov	r2, r3
 800a222:	4b95      	ldr	r3, [pc, #596]	@ (800a478 <tcp_process+0x59c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a228:	4b94      	ldr	r3, [pc, #592]	@ (800a47c <tcp_process+0x5a0>)
 800a22a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a22c:	885b      	ldrh	r3, [r3, #2]
 800a22e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a230:	4a92      	ldr	r2, [pc, #584]	@ (800a47c <tcp_process+0x5a0>)
 800a232:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a234:	8812      	ldrh	r2, [r2, #0]
 800a236:	b292      	uxth	r2, r2
 800a238:	9202      	str	r2, [sp, #8]
 800a23a:	9301      	str	r3, [sp, #4]
 800a23c:	4b90      	ldr	r3, [pc, #576]	@ (800a480 <tcp_process+0x5a4>)
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	4b90      	ldr	r3, [pc, #576]	@ (800a484 <tcp_process+0x5a8>)
 800a242:	4602      	mov	r2, r0
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f002 fc7f 	bl	800cb48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a250:	2b05      	cmp	r3, #5
 800a252:	f200 8215 	bhi.w	800a680 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f002 fa4b 	bl	800c6f8 <tcp_rexmit_rto>
      break;
 800a262:	e20d      	b.n	800a680 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a264:	4b81      	ldr	r3, [pc, #516]	@ (800a46c <tcp_process+0x590>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 80a1 	beq.w	800a3b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a272:	4b7f      	ldr	r3, [pc, #508]	@ (800a470 <tcp_process+0x594>)
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	3b01      	subs	r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	db7e      	blt.n	800a380 <tcp_process+0x4a4>
 800a282:	4b7b      	ldr	r3, [pc, #492]	@ (800a470 <tcp_process+0x594>)
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dc77      	bgt.n	800a380 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2204      	movs	r2, #4
 800a294:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a29e:	23fa      	movs	r3, #250	@ 0xfa
 800a2a0:	76bb      	strb	r3, [r7, #26]
 800a2a2:	e01d      	b.n	800a2e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <tcp_process+0x3e0>
 800a2ae:	4b76      	ldr	r3, [pc, #472]	@ (800a488 <tcp_process+0x5ac>)
 800a2b0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a2b4:	4975      	ldr	r1, [pc, #468]	@ (800a48c <tcp_process+0x5b0>)
 800a2b6:	4876      	ldr	r0, [pc, #472]	@ (800a490 <tcp_process+0x5b4>)
 800a2b8:	f005 fc90 	bl	800fbdc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00a      	beq.n	800a2dc <tcp_process+0x400>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6910      	ldr	r0, [r2, #16]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	4798      	blx	r3
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	76bb      	strb	r3, [r7, #26]
 800a2da:	e001      	b.n	800a2e0 <tcp_process+0x404>
 800a2dc:	23f0      	movs	r3, #240	@ 0xf0
 800a2de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a2e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00a      	beq.n	800a2fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a2e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a2ec:	f113 0f0d 	cmn.w	r3, #13
 800a2f0:	d002      	beq.n	800a2f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7fd ff8c 	bl	8008210 <tcp_abort>
            }
            return ERR_ABRT;
 800a2f8:	f06f 030c 	mvn.w	r3, #12
 800a2fc:	e1ce      	b.n	800a69c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fae0 	bl	800a8c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a304:	4b63      	ldr	r3, [pc, #396]	@ (800a494 <tcp_process+0x5b8>)
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <tcp_process+0x43c>
            recv_acked--;
 800a30c:	4b61      	ldr	r3, [pc, #388]	@ (800a494 <tcp_process+0x5b8>)
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	3b01      	subs	r3, #1
 800a312:	b29a      	uxth	r2, r3
 800a314:	4b5f      	ldr	r3, [pc, #380]	@ (800a494 <tcp_process+0x5b8>)
 800a316:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a31c:	009a      	lsls	r2, r3, #2
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a322:	005b      	lsls	r3, r3, #1
 800a324:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a328:	428b      	cmp	r3, r1
 800a32a:	bf38      	it	cc
 800a32c:	460b      	movcc	r3, r1
 800a32e:	429a      	cmp	r2, r3
 800a330:	d204      	bcs.n	800a33c <tcp_process+0x460>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	b29b      	uxth	r3, r3
 800a33a:	e00d      	b.n	800a358 <tcp_process+0x47c>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a346:	4293      	cmp	r3, r2
 800a348:	d904      	bls.n	800a354 <tcp_process+0x478>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	b29b      	uxth	r3, r3
 800a352:	e001      	b.n	800a358 <tcp_process+0x47c>
 800a354:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a35e:	4b4e      	ldr	r3, [pc, #312]	@ (800a498 <tcp_process+0x5bc>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	f003 0320 	and.w	r3, r3, #32
 800a366:	2b00      	cmp	r3, #0
 800a368:	d037      	beq.n	800a3da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	8b5b      	ldrh	r3, [r3, #26]
 800a36e:	f043 0302 	orr.w	r3, r3, #2
 800a372:	b29a      	uxth	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2207      	movs	r2, #7
 800a37c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a37e:	e02c      	b.n	800a3da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a380:	4b3b      	ldr	r3, [pc, #236]	@ (800a470 <tcp_process+0x594>)
 800a382:	6819      	ldr	r1, [r3, #0]
 800a384:	4b3b      	ldr	r3, [pc, #236]	@ (800a474 <tcp_process+0x598>)
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	4b3b      	ldr	r3, [pc, #236]	@ (800a478 <tcp_process+0x59c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a390:	4b3a      	ldr	r3, [pc, #232]	@ (800a47c <tcp_process+0x5a0>)
 800a392:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a394:	885b      	ldrh	r3, [r3, #2]
 800a396:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a398:	4a38      	ldr	r2, [pc, #224]	@ (800a47c <tcp_process+0x5a0>)
 800a39a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a39c:	8812      	ldrh	r2, [r2, #0]
 800a39e:	b292      	uxth	r2, r2
 800a3a0:	9202      	str	r2, [sp, #8]
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	4b36      	ldr	r3, [pc, #216]	@ (800a480 <tcp_process+0x5a4>)
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	4b36      	ldr	r3, [pc, #216]	@ (800a484 <tcp_process+0x5a8>)
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f002 fbcb 	bl	800cb48 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a3b2:	e167      	b.n	800a684 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a3b4:	4b2d      	ldr	r3, [pc, #180]	@ (800a46c <tcp_process+0x590>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8161 	beq.w	800a684 <tcp_process+0x7a8>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c6:	1e5a      	subs	r2, r3, #1
 800a3c8:	4b2b      	ldr	r3, [pc, #172]	@ (800a478 <tcp_process+0x59c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	f040 8159 	bne.w	800a684 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f002 f9b2 	bl	800c73c <tcp_rexmit>
      break;
 800a3d8:	e154      	b.n	800a684 <tcp_process+0x7a8>
 800a3da:	e153      	b.n	800a684 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fa71 	bl	800a8c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a3e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a498 <tcp_process+0x5bc>)
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 814c 	beq.w	800a688 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	8b5b      	ldrh	r3, [r3, #26]
 800a3f4:	f043 0302 	orr.w	r3, r3, #2
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2207      	movs	r2, #7
 800a402:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a404:	e140      	b.n	800a688 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fa5c 	bl	800a8c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a40c:	4b22      	ldr	r3, [pc, #136]	@ (800a498 <tcp_process+0x5bc>)
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	f003 0320 	and.w	r3, r3, #32
 800a414:	2b00      	cmp	r3, #0
 800a416:	d071      	beq.n	800a4fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a418:	4b14      	ldr	r3, [pc, #80]	@ (800a46c <tcp_process+0x590>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	2b00      	cmp	r3, #0
 800a422:	d060      	beq.n	800a4e6 <tcp_process+0x60a>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a428:	4b11      	ldr	r3, [pc, #68]	@ (800a470 <tcp_process+0x594>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d15a      	bne.n	800a4e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a434:	2b00      	cmp	r3, #0
 800a436:	d156      	bne.n	800a4e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	8b5b      	ldrh	r3, [r3, #26]
 800a43c:	f043 0302 	orr.w	r3, r3, #2
 800a440:	b29a      	uxth	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7fe fdbc 	bl	8008fc4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a44c:	4b13      	ldr	r3, [pc, #76]	@ (800a49c <tcp_process+0x5c0>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	429a      	cmp	r2, r3
 800a454:	d105      	bne.n	800a462 <tcp_process+0x586>
 800a456:	4b11      	ldr	r3, [pc, #68]	@ (800a49c <tcp_process+0x5c0>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	4a0f      	ldr	r2, [pc, #60]	@ (800a49c <tcp_process+0x5c0>)
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	e02e      	b.n	800a4c0 <tcp_process+0x5e4>
 800a462:	4b0e      	ldr	r3, [pc, #56]	@ (800a49c <tcp_process+0x5c0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	e027      	b.n	800a4ba <tcp_process+0x5de>
 800a46a:	bf00      	nop
 800a46c:	200081f8 	.word	0x200081f8
 800a470:	200081f0 	.word	0x200081f0
 800a474:	200081f6 	.word	0x200081f6
 800a478:	200081ec 	.word	0x200081ec
 800a47c:	200081dc 	.word	0x200081dc
 800a480:	200052a8 	.word	0x200052a8
 800a484:	200052ac 	.word	0x200052ac
 800a488:	08011c38 	.word	0x08011c38
 800a48c:	08011ed8 	.word	0x08011ed8
 800a490:	08011c84 	.word	0x08011c84
 800a494:	200081f4 	.word	0x200081f4
 800a498:	200081f9 	.word	0x200081f9
 800a49c:	200081c0 	.word	0x200081c0
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d104      	bne.n	800a4b4 <tcp_process+0x5d8>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	60da      	str	r2, [r3, #12]
 800a4b2:	e005      	b.n	800a4c0 <tcp_process+0x5e4>
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	617b      	str	r3, [r7, #20]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1ef      	bne.n	800a4a0 <tcp_process+0x5c4>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	60da      	str	r2, [r3, #12]
 800a4c6:	4b77      	ldr	r3, [pc, #476]	@ (800a6a4 <tcp_process+0x7c8>)
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a4d2:	4b75      	ldr	r3, [pc, #468]	@ (800a6a8 <tcp_process+0x7cc>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60da      	str	r2, [r3, #12]
 800a4da:	4a73      	ldr	r2, [pc, #460]	@ (800a6a8 <tcp_process+0x7cc>)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6013      	str	r3, [r2, #0]
 800a4e0:	f002 fcf4 	bl	800cecc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a4e4:	e0d2      	b.n	800a68c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8b5b      	ldrh	r3, [r3, #26]
 800a4ea:	f043 0302 	orr.w	r3, r3, #2
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2208      	movs	r2, #8
 800a4f8:	751a      	strb	r2, [r3, #20]
      break;
 800a4fa:	e0c7      	b.n	800a68c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a4fc:	4b6b      	ldr	r3, [pc, #428]	@ (800a6ac <tcp_process+0x7d0>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	f003 0310 	and.w	r3, r3, #16
 800a504:	2b00      	cmp	r3, #0
 800a506:	f000 80c1 	beq.w	800a68c <tcp_process+0x7b0>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a50e:	4b68      	ldr	r3, [pc, #416]	@ (800a6b0 <tcp_process+0x7d4>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	f040 80ba 	bne.w	800a68c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 80b5 	bne.w	800a68c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2206      	movs	r2, #6
 800a526:	751a      	strb	r2, [r3, #20]
      break;
 800a528:	e0b0      	b.n	800a68c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f9ca 	bl	800a8c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a530:	4b60      	ldr	r3, [pc, #384]	@ (800a6b4 <tcp_process+0x7d8>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	f003 0320 	and.w	r3, r3, #32
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 80a9 	beq.w	800a690 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	8b5b      	ldrh	r3, [r3, #26]
 800a542:	f043 0302 	orr.w	r3, r3, #2
 800a546:	b29a      	uxth	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7fe fd39 	bl	8008fc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a552:	4b59      	ldr	r3, [pc, #356]	@ (800a6b8 <tcp_process+0x7dc>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d105      	bne.n	800a568 <tcp_process+0x68c>
 800a55c:	4b56      	ldr	r3, [pc, #344]	@ (800a6b8 <tcp_process+0x7dc>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	4a55      	ldr	r2, [pc, #340]	@ (800a6b8 <tcp_process+0x7dc>)
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	e013      	b.n	800a590 <tcp_process+0x6b4>
 800a568:	4b53      	ldr	r3, [pc, #332]	@ (800a6b8 <tcp_process+0x7dc>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	e00c      	b.n	800a58a <tcp_process+0x6ae>
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	429a      	cmp	r2, r3
 800a578:	d104      	bne.n	800a584 <tcp_process+0x6a8>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	68da      	ldr	r2, [r3, #12]
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	60da      	str	r2, [r3, #12]
 800a582:	e005      	b.n	800a590 <tcp_process+0x6b4>
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	613b      	str	r3, [r7, #16]
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1ef      	bne.n	800a570 <tcp_process+0x694>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	60da      	str	r2, [r3, #12]
 800a596:	4b43      	ldr	r3, [pc, #268]	@ (800a6a4 <tcp_process+0x7c8>)
 800a598:	2201      	movs	r2, #1
 800a59a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	220a      	movs	r2, #10
 800a5a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a5a2:	4b41      	ldr	r3, [pc, #260]	@ (800a6a8 <tcp_process+0x7cc>)
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60da      	str	r2, [r3, #12]
 800a5aa:	4a3f      	ldr	r2, [pc, #252]	@ (800a6a8 <tcp_process+0x7cc>)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	f002 fc8c 	bl	800cecc <tcp_timer_needed>
      }
      break;
 800a5b4:	e06c      	b.n	800a690 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f984 	bl	800a8c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a5bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a6ac <tcp_process+0x7d0>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d065      	beq.n	800a694 <tcp_process+0x7b8>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a5cc:	4b38      	ldr	r3, [pc, #224]	@ (800a6b0 <tcp_process+0x7d4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d15f      	bne.n	800a694 <tcp_process+0x7b8>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d15b      	bne.n	800a694 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f7fe fcf1 	bl	8008fc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a5e2:	4b35      	ldr	r3, [pc, #212]	@ (800a6b8 <tcp_process+0x7dc>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d105      	bne.n	800a5f8 <tcp_process+0x71c>
 800a5ec:	4b32      	ldr	r3, [pc, #200]	@ (800a6b8 <tcp_process+0x7dc>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	4a31      	ldr	r2, [pc, #196]	@ (800a6b8 <tcp_process+0x7dc>)
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	e013      	b.n	800a620 <tcp_process+0x744>
 800a5f8:	4b2f      	ldr	r3, [pc, #188]	@ (800a6b8 <tcp_process+0x7dc>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	e00c      	b.n	800a61a <tcp_process+0x73e>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	429a      	cmp	r2, r3
 800a608:	d104      	bne.n	800a614 <tcp_process+0x738>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68da      	ldr	r2, [r3, #12]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	60da      	str	r2, [r3, #12]
 800a612:	e005      	b.n	800a620 <tcp_process+0x744>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1ef      	bne.n	800a600 <tcp_process+0x724>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	60da      	str	r2, [r3, #12]
 800a626:	4b1f      	ldr	r3, [pc, #124]	@ (800a6a4 <tcp_process+0x7c8>)
 800a628:	2201      	movs	r2, #1
 800a62a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	220a      	movs	r2, #10
 800a630:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a632:	4b1d      	ldr	r3, [pc, #116]	@ (800a6a8 <tcp_process+0x7cc>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	60da      	str	r2, [r3, #12]
 800a63a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6a8 <tcp_process+0x7cc>)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6013      	str	r3, [r2, #0]
 800a640:	f002 fc44 	bl	800cecc <tcp_timer_needed>
      }
      break;
 800a644:	e026      	b.n	800a694 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f93c 	bl	800a8c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a64c:	4b17      	ldr	r3, [pc, #92]	@ (800a6ac <tcp_process+0x7d0>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	f003 0310 	and.w	r3, r3, #16
 800a654:	2b00      	cmp	r3, #0
 800a656:	d01f      	beq.n	800a698 <tcp_process+0x7bc>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a65c:	4b14      	ldr	r3, [pc, #80]	@ (800a6b0 <tcp_process+0x7d4>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d119      	bne.n	800a698 <tcp_process+0x7bc>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d115      	bne.n	800a698 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a66c:	4b11      	ldr	r3, [pc, #68]	@ (800a6b4 <tcp_process+0x7d8>)
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	f043 0310 	orr.w	r3, r3, #16
 800a674:	b2da      	uxtb	r2, r3
 800a676:	4b0f      	ldr	r3, [pc, #60]	@ (800a6b4 <tcp_process+0x7d8>)
 800a678:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a67a:	e00d      	b.n	800a698 <tcp_process+0x7bc>
    default:
      break;
 800a67c:	bf00      	nop
 800a67e:	e00c      	b.n	800a69a <tcp_process+0x7be>
      break;
 800a680:	bf00      	nop
 800a682:	e00a      	b.n	800a69a <tcp_process+0x7be>
      break;
 800a684:	bf00      	nop
 800a686:	e008      	b.n	800a69a <tcp_process+0x7be>
      break;
 800a688:	bf00      	nop
 800a68a:	e006      	b.n	800a69a <tcp_process+0x7be>
      break;
 800a68c:	bf00      	nop
 800a68e:	e004      	b.n	800a69a <tcp_process+0x7be>
      break;
 800a690:	bf00      	nop
 800a692:	e002      	b.n	800a69a <tcp_process+0x7be>
      break;
 800a694:	bf00      	nop
 800a696:	e000      	b.n	800a69a <tcp_process+0x7be>
      break;
 800a698:	bf00      	nop
  }
  return ERR_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3724      	adds	r7, #36	@ 0x24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd90      	pop	{r4, r7, pc}
 800a6a4:	200081c8 	.word	0x200081c8
 800a6a8:	200081c4 	.word	0x200081c4
 800a6ac:	200081f8 	.word	0x200081f8
 800a6b0:	200081f0 	.word	0x200081f0
 800a6b4:	200081f9 	.word	0x200081f9
 800a6b8:	200081c0 	.word	0x200081c0

0800a6bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a6bc:	b590      	push	{r4, r7, lr}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <tcp_oos_insert_segment+0x1e>
 800a6cc:	4b3b      	ldr	r3, [pc, #236]	@ (800a7bc <tcp_oos_insert_segment+0x100>)
 800a6ce:	f240 421f 	movw	r2, #1055	@ 0x41f
 800a6d2:	493b      	ldr	r1, [pc, #236]	@ (800a7c0 <tcp_oos_insert_segment+0x104>)
 800a6d4:	483b      	ldr	r0, [pc, #236]	@ (800a7c4 <tcp_oos_insert_segment+0x108>)
 800a6d6:	f005 fa81 	bl	800fbdc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	899b      	ldrh	r3, [r3, #12]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7fb fcd2 	bl	800608c <lwip_htons>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d028      	beq.n	800a746 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a6f4:	6838      	ldr	r0, [r7, #0]
 800a6f6:	f7fe fa63 	bl	8008bc0 <tcp_segs_free>
    next = NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	603b      	str	r3, [r7, #0]
 800a6fe:	e056      	b.n	800a7ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	899b      	ldrh	r3, [r3, #12]
 800a706:	b29b      	uxth	r3, r3
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fb fcbf 	bl	800608c <lwip_htons>
 800a70e:	4603      	mov	r3, r0
 800a710:	b2db      	uxtb	r3, r3
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00d      	beq.n	800a736 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	899b      	ldrh	r3, [r3, #12]
 800a720:	b29c      	uxth	r4, r3
 800a722:	2001      	movs	r0, #1
 800a724:	f7fb fcb2 	bl	800608c <lwip_htons>
 800a728:	4603      	mov	r3, r0
 800a72a:	461a      	mov	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	4322      	orrs	r2, r4
 800a732:	b292      	uxth	r2, r2
 800a734:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f7fe fa52 	bl	8008bea <tcp_seg_free>
    while (next &&
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00e      	beq.n	800a76a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	891b      	ldrh	r3, [r3, #8]
 800a750:	461a      	mov	r2, r3
 800a752:	4b1d      	ldr	r3, [pc, #116]	@ (800a7c8 <tcp_oos_insert_segment+0x10c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	441a      	add	r2, r3
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	8909      	ldrh	r1, [r1, #8]
 800a762:	440b      	add	r3, r1
 800a764:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a766:	2b00      	cmp	r3, #0
 800a768:	daca      	bge.n	800a700 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01e      	beq.n	800a7ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	891b      	ldrh	r3, [r3, #8]
 800a774:	461a      	mov	r2, r3
 800a776:	4b14      	ldr	r3, [pc, #80]	@ (800a7c8 <tcp_oos_insert_segment+0x10c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	441a      	add	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a784:	2b00      	cmp	r3, #0
 800a786:	dd12      	ble.n	800a7ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	b29a      	uxth	r2, r3
 800a790:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c8 <tcp_oos_insert_segment+0x10c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	b29b      	uxth	r3, r3
 800a796:	1ad3      	subs	r3, r2, r3
 800a798:	b29a      	uxth	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	891b      	ldrh	r3, [r3, #8]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7fc fe23 	bl	80073f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	601a      	str	r2, [r3, #0]
}
 800a7b4:	bf00      	nop
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd90      	pop	{r4, r7, pc}
 800a7bc:	08011c38 	.word	0x08011c38
 800a7c0:	08011ef8 	.word	0x08011ef8
 800a7c4:	08011c84 	.word	0x08011c84
 800a7c8:	200081ec 	.word	0x200081ec

0800a7cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a7cc:	b5b0      	push	{r4, r5, r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a7da:	e03e      	b.n	800a85a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fd f810 	bl	8007810 <pbuf_clen>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a7fa:	8a7a      	ldrh	r2, [r7, #18]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d906      	bls.n	800a80e <tcp_free_acked_segments+0x42>
 800a800:	4b2a      	ldr	r3, [pc, #168]	@ (800a8ac <tcp_free_acked_segments+0xe0>)
 800a802:	f240 4257 	movw	r2, #1111	@ 0x457
 800a806:	492a      	ldr	r1, [pc, #168]	@ (800a8b0 <tcp_free_acked_segments+0xe4>)
 800a808:	482a      	ldr	r0, [pc, #168]	@ (800a8b4 <tcp_free_acked_segments+0xe8>)
 800a80a:	f005 f9e7 	bl	800fbdc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800a814:	8a7b      	ldrh	r3, [r7, #18]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	b29a      	uxth	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	891a      	ldrh	r2, [r3, #8]
 800a824:	4b24      	ldr	r3, [pc, #144]	@ (800a8b8 <tcp_free_acked_segments+0xec>)
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	4413      	add	r3, r2
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	4b22      	ldr	r3, [pc, #136]	@ (800a8b8 <tcp_free_acked_segments+0xec>)
 800a82e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a830:	6978      	ldr	r0, [r7, #20]
 800a832:	f7fe f9da 	bl	8008bea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00c      	beq.n	800a85a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d109      	bne.n	800a85a <tcp_free_acked_segments+0x8e>
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <tcp_free_acked_segments+0x8e>
 800a84c:	4b17      	ldr	r3, [pc, #92]	@ (800a8ac <tcp_free_acked_segments+0xe0>)
 800a84e:	f240 4261 	movw	r2, #1121	@ 0x461
 800a852:	491a      	ldr	r1, [pc, #104]	@ (800a8bc <tcp_free_acked_segments+0xf0>)
 800a854:	4817      	ldr	r0, [pc, #92]	@ (800a8b4 <tcp_free_acked_segments+0xe8>)
 800a856:	f005 f9c1 	bl	800fbdc <iprintf>
  while (seg_list != NULL &&
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d020      	beq.n	800a8a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	4618      	mov	r0, r3
 800a868:	f7fb fc26 	bl	80060b8 <lwip_htonl>
 800a86c:	4604      	mov	r4, r0
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	891b      	ldrh	r3, [r3, #8]
 800a872:	461d      	mov	r5, r3
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	899b      	ldrh	r3, [r3, #12]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fb fc05 	bl	800608c <lwip_htons>
 800a882:	4603      	mov	r3, r0
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <tcp_free_acked_segments+0xc6>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <tcp_free_acked_segments+0xc8>
 800a892:	2300      	movs	r3, #0
 800a894:	442b      	add	r3, r5
 800a896:	18e2      	adds	r2, r4, r3
 800a898:	4b09      	ldr	r3, [pc, #36]	@ (800a8c0 <tcp_free_acked_segments+0xf4>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	dd9c      	ble.n	800a7dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ac:	08011c38 	.word	0x08011c38
 800a8b0:	08011f20 	.word	0x08011f20
 800a8b4:	08011c84 	.word	0x08011c84
 800a8b8:	200081f4 	.word	0x200081f4
 800a8bc:	08011f48 	.word	0x08011f48
 800a8c0:	200081f0 	.word	0x200081f0

0800a8c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a8c4:	b5b0      	push	{r4, r5, r7, lr}
 800a8c6:	b094      	sub	sp, #80	@ 0x50
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <tcp_receive+0x20>
 800a8d6:	4b91      	ldr	r3, [pc, #580]	@ (800ab1c <tcp_receive+0x258>)
 800a8d8:	f240 427b 	movw	r2, #1147	@ 0x47b
 800a8dc:	4990      	ldr	r1, [pc, #576]	@ (800ab20 <tcp_receive+0x25c>)
 800a8de:	4891      	ldr	r0, [pc, #580]	@ (800ab24 <tcp_receive+0x260>)
 800a8e0:	f005 f97c 	bl	800fbdc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7d1b      	ldrb	r3, [r3, #20]
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	d806      	bhi.n	800a8fa <tcp_receive+0x36>
 800a8ec:	4b8b      	ldr	r3, [pc, #556]	@ (800ab1c <tcp_receive+0x258>)
 800a8ee:	f240 427c 	movw	r2, #1148	@ 0x47c
 800a8f2:	498d      	ldr	r1, [pc, #564]	@ (800ab28 <tcp_receive+0x264>)
 800a8f4:	488b      	ldr	r0, [pc, #556]	@ (800ab24 <tcp_receive+0x260>)
 800a8f6:	f005 f971 	bl	800fbdc <iprintf>

  if (flags & TCP_ACK) {
 800a8fa:	4b8c      	ldr	r3, [pc, #560]	@ (800ab2c <tcp_receive+0x268>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	f003 0310 	and.w	r3, r3, #16
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 8264 	beq.w	800add0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a914:	4413      	add	r3, r2
 800a916:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a91c:	4b84      	ldr	r3, [pc, #528]	@ (800ab30 <tcp_receive+0x26c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b00      	cmp	r3, #0
 800a924:	db1b      	blt.n	800a95e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a92a:	4b81      	ldr	r3, [pc, #516]	@ (800ab30 <tcp_receive+0x26c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a92e:	429a      	cmp	r2, r3
 800a930:	d106      	bne.n	800a940 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a936:	4b7f      	ldr	r3, [pc, #508]	@ (800ab34 <tcp_receive+0x270>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	db0e      	blt.n	800a95e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a944:	4b7b      	ldr	r3, [pc, #492]	@ (800ab34 <tcp_receive+0x270>)
 800a946:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a948:	429a      	cmp	r2, r3
 800a94a:	d125      	bne.n	800a998 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a94c:	4b7a      	ldr	r3, [pc, #488]	@ (800ab38 <tcp_receive+0x274>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	89db      	ldrh	r3, [r3, #14]
 800a952:	b29a      	uxth	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d91c      	bls.n	800a998 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a95e:	4b76      	ldr	r3, [pc, #472]	@ (800ab38 <tcp_receive+0x274>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	89db      	ldrh	r3, [r3, #14]
 800a964:	b29a      	uxth	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a978:	429a      	cmp	r2, r3
 800a97a:	d205      	bcs.n	800a988 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800a988:	4b69      	ldr	r3, [pc, #420]	@ (800ab30 <tcp_receive+0x26c>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800a990:	4b68      	ldr	r3, [pc, #416]	@ (800ab34 <tcp_receive+0x270>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a998:	4b66      	ldr	r3, [pc, #408]	@ (800ab34 <tcp_receive+0x270>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	dc58      	bgt.n	800aa58 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a9a6:	4b65      	ldr	r3, [pc, #404]	@ (800ab3c <tcp_receive+0x278>)
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d14b      	bne.n	800aa46 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800a9b8:	4413      	add	r3, r2
 800a9ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d142      	bne.n	800aa46 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	db3d      	blt.n	800aa46 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9ce:	4b59      	ldr	r3, [pc, #356]	@ (800ab34 <tcp_receive+0x270>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d137      	bne.n	800aa46 <tcp_receive+0x182>
              found_dupack = 1;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a9e0:	2bff      	cmp	r3, #255	@ 0xff
 800a9e2:	d007      	beq.n	800a9f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d91b      	bls.n	800aa36 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa08:	4413      	add	r3, r2
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d30a      	bcc.n	800aa2c <tcp_receive+0x168>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aa20:	4413      	add	r3, r2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800aa2a:	e004      	b.n	800aa36 <tcp_receive+0x172>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d902      	bls.n	800aa46 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 fee7 	bl	800c814 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aa46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f040 8161 	bne.w	800ad10 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa56:	e15b      	b.n	800ad10 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa58:	4b36      	ldr	r3, [pc, #216]	@ (800ab34 <tcp_receive+0x270>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f2c0 814e 	blt.w	800ad06 <tcp_receive+0x442>
 800aa6a:	4b32      	ldr	r3, [pc, #200]	@ (800ab34 <tcp_receive+0x270>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f300 8146 	bgt.w	800ad06 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	8b5b      	ldrh	r3, [r3, #26]
 800aa7e:	f003 0304 	and.w	r3, r3, #4
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d010      	beq.n	800aaa8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	8b5b      	ldrh	r3, [r3, #26]
 800aa8a:	f023 0304 	bic.w	r3, r3, #4
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800aab6:	10db      	asrs	r3, r3, #3
 800aab8:	b21b      	sxth	r3, r3
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	4413      	add	r3, r2
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	b21a      	sxth	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800aad0:	4b18      	ldr	r3, [pc, #96]	@ (800ab34 <tcp_receive+0x270>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aada:	b29b      	uxth	r3, r3
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800aae8:	4b12      	ldr	r3, [pc, #72]	@ (800ab34 <tcp_receive+0x270>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	7d1b      	ldrb	r3, [r3, #20]
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	f240 8097 	bls.w	800ac28 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d245      	bcs.n	800ab96 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	8b5b      	ldrh	r3, [r3, #26]
 800ab0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d014      	beq.n	800ab40 <tcp_receive+0x27c>
 800ab16:	2301      	movs	r3, #1
 800ab18:	e013      	b.n	800ab42 <tcp_receive+0x27e>
 800ab1a:	bf00      	nop
 800ab1c:	08011c38 	.word	0x08011c38
 800ab20:	08011f68 	.word	0x08011f68
 800ab24:	08011c84 	.word	0x08011c84
 800ab28:	08011f84 	.word	0x08011f84
 800ab2c:	200081f8 	.word	0x200081f8
 800ab30:	200081ec 	.word	0x200081ec
 800ab34:	200081f0 	.word	0x200081f0
 800ab38:	200081dc 	.word	0x200081dc
 800ab3c:	200081f6 	.word	0x200081f6
 800ab40:	2302      	movs	r3, #2
 800ab42:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ab46:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab50:	fb12 f303 	smulbb	r3, r2, r3
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	bf28      	it	cs
 800ab5c:	4613      	movcs	r3, r2
 800ab5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ab66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab68:	4413      	add	r3, r2
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d309      	bcc.n	800ab8a <tcp_receive+0x2c6>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ab7c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab7e:	4413      	add	r3, r2
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ab88:	e04e      	b.n	800ac28 <tcp_receive+0x364>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ab94:	e048      	b.n	800ac28 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ab9c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ab9e:	4413      	add	r3, r2
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d309      	bcc.n	800abc0 <tcp_receive+0x2fc>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800abb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800abb4:	4413      	add	r3, r2
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800abbe:	e004      	b.n	800abca <tcp_receive+0x306>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800abc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d326      	bcc.n	800ac28 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	b29a      	uxth	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800abfa:	4413      	add	r3, r2
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d30a      	bcc.n	800ac1e <tcp_receive+0x35a>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac12:	4413      	add	r3, r2
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ac1c:	e004      	b.n	800ac28 <tcp_receive+0x364>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac30:	4a98      	ldr	r2, [pc, #608]	@ (800ae94 <tcp_receive+0x5d0>)
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7ff fdca 	bl	800a7cc <tcp_free_acked_segments>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac46:	4a94      	ldr	r2, [pc, #592]	@ (800ae98 <tcp_receive+0x5d4>)
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff fdbf 	bl	800a7cc <tcp_free_acked_segments>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d104      	bne.n	800ac66 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ac62:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ac64:	e002      	b.n	800ac6c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d103      	bne.n	800ac82 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ac88:	4b84      	ldr	r3, [pc, #528]	@ (800ae9c <tcp_receive+0x5d8>)
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	8b5b      	ldrh	r3, [r3, #26]
 800ac9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d035      	beq.n	800ad0e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d118      	bne.n	800acdc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00c      	beq.n	800accc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fb f9fa 	bl	80060b8 <lwip_htonl>
 800acc4:	4603      	mov	r3, r0
 800acc6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800acc8:	2b00      	cmp	r3, #0
 800acca:	dc20      	bgt.n	800ad0e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	8b5b      	ldrh	r3, [r3, #26]
 800acd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800acda:	e018      	b.n	800ad0e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fb f9e5 	bl	80060b8 <lwip_htonl>
 800acee:	4603      	mov	r3, r0
 800acf0:	1ae3      	subs	r3, r4, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dc0b      	bgt.n	800ad0e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	8b5b      	ldrh	r3, [r3, #26]
 800acfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ad04:	e003      	b.n	800ad0e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f001 ff70 	bl	800cbec <tcp_send_empty_ack>
 800ad0c:	e000      	b.n	800ad10 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ad0e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d05b      	beq.n	800add0 <tcp_receive+0x50c>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad1c:	4b60      	ldr	r3, [pc, #384]	@ (800aea0 <tcp_receive+0x5dc>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	da54      	bge.n	800add0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ad26:	4b5f      	ldr	r3, [pc, #380]	@ (800aea4 <tcp_receive+0x5e0>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ad3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ad44:	10db      	asrs	r3, r3, #3
 800ad46:	b21b      	sxth	r3, r3
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	1ad3      	subs	r3, r2, r3
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ad5e:	4413      	add	r3, r2
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	b21a      	sxth	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800ad68:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da05      	bge.n	800ad7c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ad70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ad74:	425b      	negs	r3, r3
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ad7c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ad86:	109b      	asrs	r3, r3, #2
 800ad88:	b21b      	sxth	r3, r3
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ada0:	4413      	add	r3, r2
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	b21a      	sxth	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800adb0:	10db      	asrs	r3, r3, #3
 800adb2:	b21b      	sxth	r3, r3
 800adb4:	b29a      	uxth	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	4413      	add	r3, r2
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	b21a      	sxth	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800add0:	4b35      	ldr	r3, [pc, #212]	@ (800aea8 <tcp_receive+0x5e4>)
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	f000 84df 	beq.w	800b798 <tcp_receive+0xed4>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	7d1b      	ldrb	r3, [r3, #20]
 800adde:	2b06      	cmp	r3, #6
 800ade0:	f200 84da 	bhi.w	800b798 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ade8:	4b30      	ldr	r3, [pc, #192]	@ (800aeac <tcp_receive+0x5e8>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	1ad3      	subs	r3, r2, r3
 800adee:	3b01      	subs	r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f2c0 808f 	blt.w	800af14 <tcp_receive+0x650>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adfa:	4b2b      	ldr	r3, [pc, #172]	@ (800aea8 <tcp_receive+0x5e4>)
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	4619      	mov	r1, r3
 800ae00:	4b2a      	ldr	r3, [pc, #168]	@ (800aeac <tcp_receive+0x5e8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	440b      	add	r3, r1
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	3301      	adds	r3, #1
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f300 8082 	bgt.w	800af14 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ae10:	4b27      	ldr	r3, [pc, #156]	@ (800aeb0 <tcp_receive+0x5ec>)
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae1a:	4b24      	ldr	r3, [pc, #144]	@ (800aeac <tcp_receive+0x5e8>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ae22:	4b23      	ldr	r3, [pc, #140]	@ (800aeb0 <tcp_receive+0x5ec>)
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <tcp_receive+0x574>
 800ae2a:	4b22      	ldr	r3, [pc, #136]	@ (800aeb4 <tcp_receive+0x5f0>)
 800ae2c:	f240 5294 	movw	r2, #1428	@ 0x594
 800ae30:	4921      	ldr	r1, [pc, #132]	@ (800aeb8 <tcp_receive+0x5f4>)
 800ae32:	4822      	ldr	r0, [pc, #136]	@ (800aebc <tcp_receive+0x5f8>)
 800ae34:	f004 fed2 	bl	800fbdc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d906      	bls.n	800ae50 <tcp_receive+0x58c>
 800ae42:	4b1c      	ldr	r3, [pc, #112]	@ (800aeb4 <tcp_receive+0x5f0>)
 800ae44:	f240 5295 	movw	r2, #1429	@ 0x595
 800ae48:	491d      	ldr	r1, [pc, #116]	@ (800aec0 <tcp_receive+0x5fc>)
 800ae4a:	481c      	ldr	r0, [pc, #112]	@ (800aebc <tcp_receive+0x5f8>)
 800ae4c:	f004 fec6 	bl	800fbdc <iprintf>
      off = (u16_t)off32;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ae56:	4b16      	ldr	r3, [pc, #88]	@ (800aeb0 <tcp_receive+0x5ec>)
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	891b      	ldrh	r3, [r3, #8]
 800ae5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d906      	bls.n	800ae72 <tcp_receive+0x5ae>
 800ae64:	4b13      	ldr	r3, [pc, #76]	@ (800aeb4 <tcp_receive+0x5f0>)
 800ae66:	f240 5297 	movw	r2, #1431	@ 0x597
 800ae6a:	4916      	ldr	r1, [pc, #88]	@ (800aec4 <tcp_receive+0x600>)
 800ae6c:	4813      	ldr	r0, [pc, #76]	@ (800aebc <tcp_receive+0x5f8>)
 800ae6e:	f004 feb5 	bl	800fbdc <iprintf>
      inseg.len -= off;
 800ae72:	4b0f      	ldr	r3, [pc, #60]	@ (800aeb0 <tcp_receive+0x5ec>)
 800ae74:	891a      	ldrh	r2, [r3, #8]
 800ae76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb0 <tcp_receive+0x5ec>)
 800ae80:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ae82:	4b0b      	ldr	r3, [pc, #44]	@ (800aeb0 <tcp_receive+0x5ec>)
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	891a      	ldrh	r2, [r3, #8]
 800ae88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800ae90:	e02a      	b.n	800aee8 <tcp_receive+0x624>
 800ae92:	bf00      	nop
 800ae94:	08011fa0 	.word	0x08011fa0
 800ae98:	08011fa8 	.word	0x08011fa8
 800ae9c:	200081f4 	.word	0x200081f4
 800aea0:	200081f0 	.word	0x200081f0
 800aea4:	200081b4 	.word	0x200081b4
 800aea8:	200081f6 	.word	0x200081f6
 800aeac:	200081ec 	.word	0x200081ec
 800aeb0:	200081cc 	.word	0x200081cc
 800aeb4:	08011c38 	.word	0x08011c38
 800aeb8:	08011fb0 	.word	0x08011fb0
 800aebc:	08011c84 	.word	0x08011c84
 800aec0:	08011fc0 	.word	0x08011fc0
 800aec4:	08011fd0 	.word	0x08011fd0
        off -= p->len;
 800aec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeca:	895b      	ldrh	r3, [r3, #10]
 800aecc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800aed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aed8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800aeda:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800aedc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aede:	2200      	movs	r2, #0
 800aee0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800aee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800aee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aeea:	895b      	ldrh	r3, [r3, #10]
 800aeec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d8e9      	bhi.n	800aec8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800aef4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800aef8:	4619      	mov	r1, r3
 800aefa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800aefc:	f7fc fb7a 	bl	80075f4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af04:	4a90      	ldr	r2, [pc, #576]	@ (800b148 <tcp_receive+0x884>)
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	4b90      	ldr	r3, [pc, #576]	@ (800b14c <tcp_receive+0x888>)
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	4a8e      	ldr	r2, [pc, #568]	@ (800b148 <tcp_receive+0x884>)
 800af0e:	6812      	ldr	r2, [r2, #0]
 800af10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800af12:	e00d      	b.n	800af30 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800af14:	4b8c      	ldr	r3, [pc, #560]	@ (800b148 <tcp_receive+0x884>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	2b00      	cmp	r3, #0
 800af20:	da06      	bge.n	800af30 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	8b5b      	ldrh	r3, [r3, #26]
 800af26:	f043 0302 	orr.w	r3, r3, #2
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800af30:	4b85      	ldr	r3, [pc, #532]	@ (800b148 <tcp_receive+0x884>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f2c0 8427 	blt.w	800b78e <tcp_receive+0xeca>
 800af40:	4b81      	ldr	r3, [pc, #516]	@ (800b148 <tcp_receive+0x884>)
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af48:	6879      	ldr	r1, [r7, #4]
 800af4a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800af4c:	440b      	add	r3, r1
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	3301      	adds	r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	f300 841b 	bgt.w	800b78e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af5c:	4b7a      	ldr	r3, [pc, #488]	@ (800b148 <tcp_receive+0x884>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	429a      	cmp	r2, r3
 800af62:	f040 8298 	bne.w	800b496 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800af66:	4b79      	ldr	r3, [pc, #484]	@ (800b14c <tcp_receive+0x888>)
 800af68:	891c      	ldrh	r4, [r3, #8]
 800af6a:	4b78      	ldr	r3, [pc, #480]	@ (800b14c <tcp_receive+0x888>)
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	899b      	ldrh	r3, [r3, #12]
 800af70:	b29b      	uxth	r3, r3
 800af72:	4618      	mov	r0, r3
 800af74:	f7fb f88a 	bl	800608c <lwip_htons>
 800af78:	4603      	mov	r3, r0
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <tcp_receive+0x6c4>
 800af84:	2301      	movs	r3, #1
 800af86:	e000      	b.n	800af8a <tcp_receive+0x6c6>
 800af88:	2300      	movs	r3, #0
 800af8a:	4423      	add	r3, r4
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	4b70      	ldr	r3, [pc, #448]	@ (800b150 <tcp_receive+0x88c>)
 800af90:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800af96:	4b6e      	ldr	r3, [pc, #440]	@ (800b150 <tcp_receive+0x88c>)
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d274      	bcs.n	800b088 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800af9e:	4b6b      	ldr	r3, [pc, #428]	@ (800b14c <tcp_receive+0x888>)
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	899b      	ldrh	r3, [r3, #12]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fb f870 	bl	800608c <lwip_htons>
 800afac:	4603      	mov	r3, r0
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01e      	beq.n	800aff6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800afb8:	4b64      	ldr	r3, [pc, #400]	@ (800b14c <tcp_receive+0x888>)
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	899b      	ldrh	r3, [r3, #12]
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	b21b      	sxth	r3, r3
 800afc2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800afc6:	b21c      	sxth	r4, r3
 800afc8:	4b60      	ldr	r3, [pc, #384]	@ (800b14c <tcp_receive+0x888>)
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	899b      	ldrh	r3, [r3, #12]
 800afce:	b29b      	uxth	r3, r3
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fb f85b 	bl	800608c <lwip_htons>
 800afd6:	4603      	mov	r3, r0
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800afde:	b29b      	uxth	r3, r3
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fb f853 	bl	800608c <lwip_htons>
 800afe6:	4603      	mov	r3, r0
 800afe8:	b21b      	sxth	r3, r3
 800afea:	4323      	orrs	r3, r4
 800afec:	b21a      	sxth	r2, r3
 800afee:	4b57      	ldr	r3, [pc, #348]	@ (800b14c <tcp_receive+0x888>)
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	b292      	uxth	r2, r2
 800aff4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800affa:	4b54      	ldr	r3, [pc, #336]	@ (800b14c <tcp_receive+0x888>)
 800affc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800affe:	4b53      	ldr	r3, [pc, #332]	@ (800b14c <tcp_receive+0x888>)
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	899b      	ldrh	r3, [r3, #12]
 800b004:	b29b      	uxth	r3, r3
 800b006:	4618      	mov	r0, r3
 800b008:	f7fb f840 	bl	800608c <lwip_htons>
 800b00c:	4603      	mov	r3, r0
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	f003 0302 	and.w	r3, r3, #2
 800b014:	2b00      	cmp	r3, #0
 800b016:	d005      	beq.n	800b024 <tcp_receive+0x760>
            inseg.len -= 1;
 800b018:	4b4c      	ldr	r3, [pc, #304]	@ (800b14c <tcp_receive+0x888>)
 800b01a:	891b      	ldrh	r3, [r3, #8]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	b29a      	uxth	r2, r3
 800b020:	4b4a      	ldr	r3, [pc, #296]	@ (800b14c <tcp_receive+0x888>)
 800b022:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b024:	4b49      	ldr	r3, [pc, #292]	@ (800b14c <tcp_receive+0x888>)
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	4a48      	ldr	r2, [pc, #288]	@ (800b14c <tcp_receive+0x888>)
 800b02a:	8912      	ldrh	r2, [r2, #8]
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fc f9e0 	bl	80073f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b034:	4b45      	ldr	r3, [pc, #276]	@ (800b14c <tcp_receive+0x888>)
 800b036:	891c      	ldrh	r4, [r3, #8]
 800b038:	4b44      	ldr	r3, [pc, #272]	@ (800b14c <tcp_receive+0x888>)
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	899b      	ldrh	r3, [r3, #12]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	4618      	mov	r0, r3
 800b042:	f7fb f823 	bl	800608c <lwip_htons>
 800b046:	4603      	mov	r3, r0
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	f003 0303 	and.w	r3, r3, #3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <tcp_receive+0x792>
 800b052:	2301      	movs	r3, #1
 800b054:	e000      	b.n	800b058 <tcp_receive+0x794>
 800b056:	2300      	movs	r3, #0
 800b058:	4423      	add	r3, r4
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	4b3c      	ldr	r3, [pc, #240]	@ (800b150 <tcp_receive+0x88c>)
 800b05e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b060:	4b3b      	ldr	r3, [pc, #236]	@ (800b150 <tcp_receive+0x88c>)
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	461a      	mov	r2, r3
 800b066:	4b38      	ldr	r3, [pc, #224]	@ (800b148 <tcp_receive+0x884>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	441a      	add	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b074:	440b      	add	r3, r1
 800b076:	429a      	cmp	r2, r3
 800b078:	d006      	beq.n	800b088 <tcp_receive+0x7c4>
 800b07a:	4b36      	ldr	r3, [pc, #216]	@ (800b154 <tcp_receive+0x890>)
 800b07c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b080:	4935      	ldr	r1, [pc, #212]	@ (800b158 <tcp_receive+0x894>)
 800b082:	4836      	ldr	r0, [pc, #216]	@ (800b15c <tcp_receive+0x898>)
 800b084:	f004 fdaa 	bl	800fbdc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 80e6 	beq.w	800b25e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b092:	4b2e      	ldr	r3, [pc, #184]	@ (800b14c <tcp_receive+0x888>)
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	899b      	ldrh	r3, [r3, #12]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fa fff6 	bl	800608c <lwip_htons>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d010      	beq.n	800b0ce <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b0ac:	e00a      	b.n	800b0c4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0b2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f7fd fd93 	bl	8008bea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d1f0      	bne.n	800b0ae <tcp_receive+0x7ea>
 800b0cc:	e0c7      	b.n	800b25e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b0d4:	e051      	b.n	800b17a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	899b      	ldrh	r3, [r3, #12]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fa ffd4 	bl	800608c <lwip_htons>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d03c      	beq.n	800b16a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b0f0:	4b16      	ldr	r3, [pc, #88]	@ (800b14c <tcp_receive+0x888>)
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	899b      	ldrh	r3, [r3, #12]
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fa ffc7 	bl	800608c <lwip_htons>
 800b0fe:	4603      	mov	r3, r0
 800b100:	b2db      	uxtb	r3, r3
 800b102:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b106:	2b00      	cmp	r3, #0
 800b108:	d12f      	bne.n	800b16a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b10a:	4b10      	ldr	r3, [pc, #64]	@ (800b14c <tcp_receive+0x888>)
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	899b      	ldrh	r3, [r3, #12]
 800b110:	b29c      	uxth	r4, r3
 800b112:	2001      	movs	r0, #1
 800b114:	f7fa ffba 	bl	800608c <lwip_htons>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	4b0b      	ldr	r3, [pc, #44]	@ (800b14c <tcp_receive+0x888>)
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	4322      	orrs	r2, r4
 800b122:	b292      	uxth	r2, r2
 800b124:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b126:	4b09      	ldr	r3, [pc, #36]	@ (800b14c <tcp_receive+0x888>)
 800b128:	891c      	ldrh	r4, [r3, #8]
 800b12a:	4b08      	ldr	r3, [pc, #32]	@ (800b14c <tcp_receive+0x888>)
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	899b      	ldrh	r3, [r3, #12]
 800b130:	b29b      	uxth	r3, r3
 800b132:	4618      	mov	r0, r3
 800b134:	f7fa ffaa 	bl	800608c <lwip_htons>
 800b138:	4603      	mov	r3, r0
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f003 0303 	and.w	r3, r3, #3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00d      	beq.n	800b160 <tcp_receive+0x89c>
 800b144:	2301      	movs	r3, #1
 800b146:	e00c      	b.n	800b162 <tcp_receive+0x89e>
 800b148:	200081ec 	.word	0x200081ec
 800b14c:	200081cc 	.word	0x200081cc
 800b150:	200081f6 	.word	0x200081f6
 800b154:	08011c38 	.word	0x08011c38
 800b158:	08011fe0 	.word	0x08011fe0
 800b15c:	08011c84 	.word	0x08011c84
 800b160:	2300      	movs	r3, #0
 800b162:	4423      	add	r3, r4
 800b164:	b29a      	uxth	r2, r3
 800b166:	4b98      	ldr	r3, [pc, #608]	@ (800b3c8 <tcp_receive+0xb04>)
 800b168:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b16a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b16c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b16e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b174:	6938      	ldr	r0, [r7, #16]
 800b176:	f7fd fd38 	bl	8008bea <tcp_seg_free>
            while (next &&
 800b17a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00e      	beq.n	800b19e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b180:	4b91      	ldr	r3, [pc, #580]	@ (800b3c8 <tcp_receive+0xb04>)
 800b182:	881b      	ldrh	r3, [r3, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	4b91      	ldr	r3, [pc, #580]	@ (800b3cc <tcp_receive+0xb08>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	441a      	add	r2, r3
 800b18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b18e:	68db      	ldr	r3, [r3, #12]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b194:	8909      	ldrh	r1, [r1, #8]
 800b196:	440b      	add	r3, r1
 800b198:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da9b      	bge.n	800b0d6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d059      	beq.n	800b258 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b1a4:	4b88      	ldr	r3, [pc, #544]	@ (800b3c8 <tcp_receive+0xb04>)
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b88      	ldr	r3, [pc, #544]	@ (800b3cc <tcp_receive+0xb08>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	441a      	add	r2, r3
 800b1b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dd4d      	ble.n	800b258 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b1bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	4b81      	ldr	r3, [pc, #516]	@ (800b3cc <tcp_receive+0xb08>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	4b80      	ldr	r3, [pc, #512]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b1d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b1d2:	4b7f      	ldr	r3, [pc, #508]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	899b      	ldrh	r3, [r3, #12]
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fa ff56 	bl	800608c <lwip_htons>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	f003 0302 	and.w	r3, r3, #2
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <tcp_receive+0x934>
                inseg.len -= 1;
 800b1ec:	4b78      	ldr	r3, [pc, #480]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b1ee:	891b      	ldrh	r3, [r3, #8]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	4b76      	ldr	r3, [pc, #472]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b1f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b1f8:	4b75      	ldr	r3, [pc, #468]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	4a74      	ldr	r2, [pc, #464]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b1fe:	8912      	ldrh	r2, [r2, #8]
 800b200:	4611      	mov	r1, r2
 800b202:	4618      	mov	r0, r3
 800b204:	f7fc f8f6 	bl	80073f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b208:	4b71      	ldr	r3, [pc, #452]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b20a:	891c      	ldrh	r4, [r3, #8]
 800b20c:	4b70      	ldr	r3, [pc, #448]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	899b      	ldrh	r3, [r3, #12]
 800b212:	b29b      	uxth	r3, r3
 800b214:	4618      	mov	r0, r3
 800b216:	f7fa ff39 	bl	800608c <lwip_htons>
 800b21a:	4603      	mov	r3, r0
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <tcp_receive+0x966>
 800b226:	2301      	movs	r3, #1
 800b228:	e000      	b.n	800b22c <tcp_receive+0x968>
 800b22a:	2300      	movs	r3, #0
 800b22c:	4423      	add	r3, r4
 800b22e:	b29a      	uxth	r2, r3
 800b230:	4b65      	ldr	r3, [pc, #404]	@ (800b3c8 <tcp_receive+0xb04>)
 800b232:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b234:	4b64      	ldr	r3, [pc, #400]	@ (800b3c8 <tcp_receive+0xb04>)
 800b236:	881b      	ldrh	r3, [r3, #0]
 800b238:	461a      	mov	r2, r3
 800b23a:	4b64      	ldr	r3, [pc, #400]	@ (800b3cc <tcp_receive+0xb08>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	441a      	add	r2, r3
 800b240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	429a      	cmp	r2, r3
 800b248:	d006      	beq.n	800b258 <tcp_receive+0x994>
 800b24a:	4b62      	ldr	r3, [pc, #392]	@ (800b3d4 <tcp_receive+0xb10>)
 800b24c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b250:	4961      	ldr	r1, [pc, #388]	@ (800b3d8 <tcp_receive+0xb14>)
 800b252:	4862      	ldr	r0, [pc, #392]	@ (800b3dc <tcp_receive+0xb18>)
 800b254:	f004 fcc2 	bl	800fbdc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b25c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b25e:	4b5a      	ldr	r3, [pc, #360]	@ (800b3c8 <tcp_receive+0xb04>)
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	4b59      	ldr	r3, [pc, #356]	@ (800b3cc <tcp_receive+0xb08>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	441a      	add	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b272:	4b55      	ldr	r3, [pc, #340]	@ (800b3c8 <tcp_receive+0xb04>)
 800b274:	881b      	ldrh	r3, [r3, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d206      	bcs.n	800b288 <tcp_receive+0x9c4>
 800b27a:	4b56      	ldr	r3, [pc, #344]	@ (800b3d4 <tcp_receive+0xb10>)
 800b27c:	f240 6207 	movw	r2, #1543	@ 0x607
 800b280:	4957      	ldr	r1, [pc, #348]	@ (800b3e0 <tcp_receive+0xb1c>)
 800b282:	4856      	ldr	r0, [pc, #344]	@ (800b3dc <tcp_receive+0xb18>)
 800b284:	f004 fcaa 	bl	800fbdc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b28c:	4b4e      	ldr	r3, [pc, #312]	@ (800b3c8 <tcp_receive+0xb04>)
 800b28e:	881b      	ldrh	r3, [r3, #0]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	b29a      	uxth	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7fc ffc5 	bl	8008228 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b29e:	4b4c      	ldr	r3, [pc, #304]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	891b      	ldrh	r3, [r3, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d006      	beq.n	800b2b6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b2a8:	4b49      	ldr	r3, [pc, #292]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	4a4d      	ldr	r2, [pc, #308]	@ (800b3e4 <tcp_receive+0xb20>)
 800b2ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b2b0:	4b47      	ldr	r3, [pc, #284]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b2b6:	4b46      	ldr	r3, [pc, #280]	@ (800b3d0 <tcp_receive+0xb0c>)
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	899b      	ldrh	r3, [r3, #12]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fa fee4 	bl	800608c <lwip_htons>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80b8 	beq.w	800b442 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b2d2:	4b45      	ldr	r3, [pc, #276]	@ (800b3e8 <tcp_receive+0xb24>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	f043 0320 	orr.w	r3, r3, #32
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	4b42      	ldr	r3, [pc, #264]	@ (800b3e8 <tcp_receive+0xb24>)
 800b2de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b2e0:	e0af      	b.n	800b442 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	4a36      	ldr	r2, [pc, #216]	@ (800b3cc <tcp_receive+0xb08>)
 800b2f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	891b      	ldrh	r3, [r3, #8]
 800b2f8:	461c      	mov	r4, r3
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	899b      	ldrh	r3, [r3, #12]
 800b300:	b29b      	uxth	r3, r3
 800b302:	4618      	mov	r0, r3
 800b304:	f7fa fec2 	bl	800608c <lwip_htons>
 800b308:	4603      	mov	r3, r0
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	f003 0303 	and.w	r3, r3, #3
 800b310:	2b00      	cmp	r3, #0
 800b312:	d001      	beq.n	800b318 <tcp_receive+0xa54>
 800b314:	2301      	movs	r3, #1
 800b316:	e000      	b.n	800b31a <tcp_receive+0xa56>
 800b318:	2300      	movs	r3, #0
 800b31a:	191a      	adds	r2, r3, r4
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b320:	441a      	add	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b32a:	461c      	mov	r4, r3
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	891b      	ldrh	r3, [r3, #8]
 800b330:	461d      	mov	r5, r3
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	899b      	ldrh	r3, [r3, #12]
 800b338:	b29b      	uxth	r3, r3
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fa fea6 	bl	800608c <lwip_htons>
 800b340:	4603      	mov	r3, r0
 800b342:	b2db      	uxtb	r3, r3
 800b344:	f003 0303 	and.w	r3, r3, #3
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d001      	beq.n	800b350 <tcp_receive+0xa8c>
 800b34c:	2301      	movs	r3, #1
 800b34e:	e000      	b.n	800b352 <tcp_receive+0xa8e>
 800b350:	2300      	movs	r3, #0
 800b352:	442b      	add	r3, r5
 800b354:	429c      	cmp	r4, r3
 800b356:	d206      	bcs.n	800b366 <tcp_receive+0xaa2>
 800b358:	4b1e      	ldr	r3, [pc, #120]	@ (800b3d4 <tcp_receive+0xb10>)
 800b35a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b35e:	4923      	ldr	r1, [pc, #140]	@ (800b3ec <tcp_receive+0xb28>)
 800b360:	481e      	ldr	r0, [pc, #120]	@ (800b3dc <tcp_receive+0xb18>)
 800b362:	f004 fc3b 	bl	800fbdc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	891b      	ldrh	r3, [r3, #8]
 800b36a:	461c      	mov	r4, r3
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	899b      	ldrh	r3, [r3, #12]
 800b372:	b29b      	uxth	r3, r3
 800b374:	4618      	mov	r0, r3
 800b376:	f7fa fe89 	bl	800608c <lwip_htons>
 800b37a:	4603      	mov	r3, r0
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	f003 0303 	and.w	r3, r3, #3
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <tcp_receive+0xac6>
 800b386:	2301      	movs	r3, #1
 800b388:	e000      	b.n	800b38c <tcp_receive+0xac8>
 800b38a:	2300      	movs	r3, #0
 800b38c:	1919      	adds	r1, r3, r4
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b392:	b28b      	uxth	r3, r1
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	b29a      	uxth	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7fc ff43 	bl	8008228 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	891b      	ldrh	r3, [r3, #8]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d028      	beq.n	800b3fe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e4 <tcp_receive+0xb20>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d01d      	beq.n	800b3f0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b3b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e4 <tcp_receive+0xb20>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	4610      	mov	r0, r2
 800b3c0:	f7fc fa60 	bl	8007884 <pbuf_cat>
 800b3c4:	e018      	b.n	800b3f8 <tcp_receive+0xb34>
 800b3c6:	bf00      	nop
 800b3c8:	200081f6 	.word	0x200081f6
 800b3cc:	200081ec 	.word	0x200081ec
 800b3d0:	200081cc 	.word	0x200081cc
 800b3d4:	08011c38 	.word	0x08011c38
 800b3d8:	08012018 	.word	0x08012018
 800b3dc:	08011c84 	.word	0x08011c84
 800b3e0:	08012054 	.word	0x08012054
 800b3e4:	200081fc 	.word	0x200081fc
 800b3e8:	200081f9 	.word	0x200081f9
 800b3ec:	08012074 	.word	0x08012074
            } else {
              recv_data = cseg->p;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	4a70      	ldr	r2, [pc, #448]	@ (800b5b8 <tcp_receive+0xcf4>)
 800b3f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	899b      	ldrh	r3, [r3, #12]
 800b404:	b29b      	uxth	r3, r3
 800b406:	4618      	mov	r0, r3
 800b408:	f7fa fe40 	bl	800608c <lwip_htons>
 800b40c:	4603      	mov	r3, r0
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00d      	beq.n	800b434 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b418:	4b68      	ldr	r3, [pc, #416]	@ (800b5bc <tcp_receive+0xcf8>)
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	f043 0320 	orr.w	r3, r3, #32
 800b420:	b2da      	uxtb	r2, r3
 800b422:	4b66      	ldr	r3, [pc, #408]	@ (800b5bc <tcp_receive+0xcf8>)
 800b424:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	7d1b      	ldrb	r3, [r3, #20]
 800b42a:	2b04      	cmp	r3, #4
 800b42c:	d102      	bne.n	800b434 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2207      	movs	r2, #7
 800b432:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b43c:	68b8      	ldr	r0, [r7, #8]
 800b43e:	f7fd fbd4 	bl	8008bea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b446:	2b00      	cmp	r3, #0
 800b448:	d008      	beq.n	800b45c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b456:	429a      	cmp	r2, r3
 800b458:	f43f af43 	beq.w	800b2e2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	8b5b      	ldrh	r3, [r3, #26]
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00e      	beq.n	800b486 <tcp_receive+0xbc2>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	8b5b      	ldrh	r3, [r3, #26]
 800b46c:	f023 0301 	bic.w	r3, r3, #1
 800b470:	b29a      	uxth	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	835a      	strh	r2, [r3, #26]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	8b5b      	ldrh	r3, [r3, #26]
 800b47a:	f043 0302 	orr.w	r3, r3, #2
 800b47e:	b29a      	uxth	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b484:	e187      	b.n	800b796 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	8b5b      	ldrh	r3, [r3, #26]
 800b48a:	f043 0301 	orr.w	r3, r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b494:	e17f      	b.n	800b796 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b49e:	4848      	ldr	r0, [pc, #288]	@ (800b5c0 <tcp_receive+0xcfc>)
 800b4a0:	f7fd fbbc 	bl	8008c1c <tcp_seg_copy>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	675a      	str	r2, [r3, #116]	@ 0x74
 800b4aa:	e16c      	b.n	800b786 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b4b6:	e156      	b.n	800b766 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	4b41      	ldr	r3, [pc, #260]	@ (800b5c4 <tcp_receive+0xd00>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d11d      	bne.n	800b502 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b4c6:	4b3e      	ldr	r3, [pc, #248]	@ (800b5c0 <tcp_receive+0xcfc>)
 800b4c8:	891a      	ldrh	r2, [r3, #8]
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4cc:	891b      	ldrh	r3, [r3, #8]
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	f240 814e 	bls.w	800b770 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b4d4:	483a      	ldr	r0, [pc, #232]	@ (800b5c0 <tcp_receive+0xcfc>)
 800b4d6:	f7fd fba1 	bl	8008c1c <tcp_seg_copy>
 800b4da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 8148 	beq.w	800b774 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800b4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	e002      	b.n	800b4f8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b4f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b4fa:	6978      	ldr	r0, [r7, #20]
 800b4fc:	f7ff f8de 	bl	800a6bc <tcp_oos_insert_segment>
                }
                break;
 800b500:	e138      	b.n	800b774 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b504:	2b00      	cmp	r3, #0
 800b506:	d117      	bne.n	800b538 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b508:	4b2e      	ldr	r3, [pc, #184]	@ (800b5c4 <tcp_receive+0xd00>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	1ad3      	subs	r3, r2, r3
 800b514:	2b00      	cmp	r3, #0
 800b516:	da57      	bge.n	800b5c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b518:	4829      	ldr	r0, [pc, #164]	@ (800b5c0 <tcp_receive+0xcfc>)
 800b51a:	f7fd fb7f 	bl	8008c1c <tcp_seg_copy>
 800b51e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b520:	69bb      	ldr	r3, [r7, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 8128 	beq.w	800b778 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b52e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b530:	69b8      	ldr	r0, [r7, #24]
 800b532:	f7ff f8c3 	bl	800a6bc <tcp_oos_insert_segment>
                  }
                  break;
 800b536:	e11f      	b.n	800b778 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b538:	4b22      	ldr	r3, [pc, #136]	@ (800b5c4 <tcp_receive+0xd00>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	3b01      	subs	r3, #1
 800b546:	2b00      	cmp	r3, #0
 800b548:	db3e      	blt.n	800b5c8 <tcp_receive+0xd04>
 800b54a:	4b1e      	ldr	r3, [pc, #120]	@ (800b5c4 <tcp_receive+0xd00>)
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	3301      	adds	r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	dc35      	bgt.n	800b5c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b55c:	4818      	ldr	r0, [pc, #96]	@ (800b5c0 <tcp_receive+0xcfc>)
 800b55e:	f7fd fb5d 	bl	8008c1c <tcp_seg_copy>
 800b562:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	2b00      	cmp	r3, #0
 800b568:	f000 8108 	beq.w	800b77c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b574:	8912      	ldrh	r2, [r2, #8]
 800b576:	441a      	add	r2, r3
 800b578:	4b12      	ldr	r3, [pc, #72]	@ (800b5c4 <tcp_receive+0xd00>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	dd12      	ble.n	800b5a8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b582:	4b10      	ldr	r3, [pc, #64]	@ (800b5c4 <tcp_receive+0xd00>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	b29a      	uxth	r2, r3
 800b588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	b29b      	uxth	r3, r3
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	b29a      	uxth	r2, r3
 800b594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b596:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b59e:	891b      	ldrh	r3, [r3, #8]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	f7fb ff26 	bl	80073f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5aa:	69fa      	ldr	r2, [r7, #28]
 800b5ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b5ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b5b0:	69f8      	ldr	r0, [r7, #28]
 800b5b2:	f7ff f883 	bl	800a6bc <tcp_oos_insert_segment>
                  }
                  break;
 800b5b6:	e0e1      	b.n	800b77c <tcp_receive+0xeb8>
 800b5b8:	200081fc 	.word	0x200081fc
 800b5bc:	200081f9 	.word	0x200081f9
 800b5c0:	200081cc 	.word	0x200081cc
 800b5c4:	200081ec 	.word	0x200081ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ca:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f040 80c5 	bne.w	800b760 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b5d6:	4b7f      	ldr	r3, [pc, #508]	@ (800b7d4 <tcp_receive+0xf10>)
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	f340 80bc 	ble.w	800b760 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	899b      	ldrh	r3, [r3, #12]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fa fd4b 	bl	800608c <lwip_htons>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f040 80be 	bne.w	800b780 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b604:	4874      	ldr	r0, [pc, #464]	@ (800b7d8 <tcp_receive+0xf14>)
 800b606:	f7fd fb09 	bl	8008c1c <tcp_seg_copy>
 800b60a:	4602      	mov	r2, r0
 800b60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80b5 	beq.w	800b784 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b622:	8912      	ldrh	r2, [r2, #8]
 800b624:	441a      	add	r2, r3
 800b626:	4b6b      	ldr	r3, [pc, #428]	@ (800b7d4 <tcp_receive+0xf10>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	dd12      	ble.n	800b656 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b630:	4b68      	ldr	r3, [pc, #416]	@ (800b7d4 <tcp_receive+0xf10>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	b29a      	uxth	r2, r3
 800b636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	b29a      	uxth	r2, r3
 800b642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b644:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64c:	891b      	ldrh	r3, [r3, #8]
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f7fb fecf 	bl	80073f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b656:	4b61      	ldr	r3, [pc, #388]	@ (800b7dc <tcp_receive+0xf18>)
 800b658:	881b      	ldrh	r3, [r3, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	4b5d      	ldr	r3, [pc, #372]	@ (800b7d4 <tcp_receive+0xf10>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	441a      	add	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b666:	6879      	ldr	r1, [r7, #4]
 800b668:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b66a:	440b      	add	r3, r1
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f340 8088 	ble.w	800b784 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	899b      	ldrh	r3, [r3, #12]
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fa fd04 	bl	800608c <lwip_htons>
 800b684:	4603      	mov	r3, r0
 800b686:	b2db      	uxtb	r3, r3
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d021      	beq.n	800b6d4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	899b      	ldrh	r3, [r3, #12]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	b21b      	sxth	r3, r3
 800b69c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b6a0:	b21c      	sxth	r4, r3
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	899b      	ldrh	r3, [r3, #12]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fa fced 	bl	800608c <lwip_htons>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fa fce5 	bl	800608c <lwip_htons>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	b21b      	sxth	r3, r3
 800b6c6:	4323      	orrs	r3, r4
 800b6c8:	b21a      	sxth	r2, r3
 800b6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	b292      	uxth	r2, r2
 800b6d2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6de:	4413      	add	r3, r2
 800b6e0:	b299      	uxth	r1, r3
 800b6e2:	4b3c      	ldr	r3, [pc, #240]	@ (800b7d4 <tcp_receive+0xf10>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	1a8a      	subs	r2, r1, r2
 800b6ee:	b292      	uxth	r2, r2
 800b6f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	891b      	ldrh	r3, [r3, #8]
 800b6fe:	4619      	mov	r1, r3
 800b700:	4610      	mov	r0, r2
 800b702:	f7fb fe77 	bl	80073f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	891c      	ldrh	r4, [r3, #8]
 800b70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	899b      	ldrh	r3, [r3, #12]
 800b714:	b29b      	uxth	r3, r3
 800b716:	4618      	mov	r0, r3
 800b718:	f7fa fcb8 	bl	800608c <lwip_htons>
 800b71c:	4603      	mov	r3, r0
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	f003 0303 	and.w	r3, r3, #3
 800b724:	2b00      	cmp	r3, #0
 800b726:	d001      	beq.n	800b72c <tcp_receive+0xe68>
 800b728:	2301      	movs	r3, #1
 800b72a:	e000      	b.n	800b72e <tcp_receive+0xe6a>
 800b72c:	2300      	movs	r3, #0
 800b72e:	4423      	add	r3, r4
 800b730:	b29a      	uxth	r2, r3
 800b732:	4b2a      	ldr	r3, [pc, #168]	@ (800b7dc <tcp_receive+0xf18>)
 800b734:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b736:	4b29      	ldr	r3, [pc, #164]	@ (800b7dc <tcp_receive+0xf18>)
 800b738:	881b      	ldrh	r3, [r3, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	4b25      	ldr	r3, [pc, #148]	@ (800b7d4 <tcp_receive+0xf10>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	441a      	add	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b746:	6879      	ldr	r1, [r7, #4]
 800b748:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b74a:	440b      	add	r3, r1
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d019      	beq.n	800b784 <tcp_receive+0xec0>
 800b750:	4b23      	ldr	r3, [pc, #140]	@ (800b7e0 <tcp_receive+0xf1c>)
 800b752:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800b756:	4923      	ldr	r1, [pc, #140]	@ (800b7e4 <tcp_receive+0xf20>)
 800b758:	4823      	ldr	r0, [pc, #140]	@ (800b7e8 <tcp_receive+0xf24>)
 800b75a:	f004 fa3f 	bl	800fbdc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b75e:	e011      	b.n	800b784 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f47f aea5 	bne.w	800b4b8 <tcp_receive+0xbf4>
 800b76e:	e00a      	b.n	800b786 <tcp_receive+0xec2>
                break;
 800b770:	bf00      	nop
 800b772:	e008      	b.n	800b786 <tcp_receive+0xec2>
                break;
 800b774:	bf00      	nop
 800b776:	e006      	b.n	800b786 <tcp_receive+0xec2>
                  break;
 800b778:	bf00      	nop
 800b77a:	e004      	b.n	800b786 <tcp_receive+0xec2>
                  break;
 800b77c:	bf00      	nop
 800b77e:	e002      	b.n	800b786 <tcp_receive+0xec2>
                  break;
 800b780:	bf00      	nop
 800b782:	e000      	b.n	800b786 <tcp_receive+0xec2>
                break;
 800b784:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f001 fa30 	bl	800cbec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b78c:	e003      	b.n	800b796 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 fa2c 	bl	800cbec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b794:	e01a      	b.n	800b7cc <tcp_receive+0xf08>
 800b796:	e019      	b.n	800b7cc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b798:	4b0e      	ldr	r3, [pc, #56]	@ (800b7d4 <tcp_receive+0xf10>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	db0a      	blt.n	800b7bc <tcp_receive+0xef8>
 800b7a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b7d4 <tcp_receive+0xf10>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b7b2:	440b      	add	r3, r1
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	dd07      	ble.n	800b7cc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	8b5b      	ldrh	r3, [r3, #26]
 800b7c0:	f043 0302 	orr.w	r3, r3, #2
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b7ca:	e7ff      	b.n	800b7cc <tcp_receive+0xf08>
 800b7cc:	bf00      	nop
 800b7ce:	3750      	adds	r7, #80	@ 0x50
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b7d4:	200081ec 	.word	0x200081ec
 800b7d8:	200081cc 	.word	0x200081cc
 800b7dc:	200081f6 	.word	0x200081f6
 800b7e0:	08011c38 	.word	0x08011c38
 800b7e4:	08011fe0 	.word	0x08011fe0
 800b7e8:	08011c84 	.word	0x08011c84

0800b7ec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b7f2:	4b15      	ldr	r3, [pc, #84]	@ (800b848 <tcp_get_next_optbyte+0x5c>)
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	b291      	uxth	r1, r2
 800b7fa:	4a13      	ldr	r2, [pc, #76]	@ (800b848 <tcp_get_next_optbyte+0x5c>)
 800b7fc:	8011      	strh	r1, [r2, #0]
 800b7fe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b800:	4b12      	ldr	r3, [pc, #72]	@ (800b84c <tcp_get_next_optbyte+0x60>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <tcp_get_next_optbyte+0x26>
 800b808:	4b11      	ldr	r3, [pc, #68]	@ (800b850 <tcp_get_next_optbyte+0x64>)
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	88fa      	ldrh	r2, [r7, #6]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d208      	bcs.n	800b824 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b812:	4b10      	ldr	r3, [pc, #64]	@ (800b854 <tcp_get_next_optbyte+0x68>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3314      	adds	r3, #20
 800b818:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b81a:	88fb      	ldrh	r3, [r7, #6]
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	4413      	add	r3, r2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	e00b      	b.n	800b83c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b824:	88fb      	ldrh	r3, [r7, #6]
 800b826:	b2da      	uxtb	r2, r3
 800b828:	4b09      	ldr	r3, [pc, #36]	@ (800b850 <tcp_get_next_optbyte+0x64>)
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b832:	4b06      	ldr	r3, [pc, #24]	@ (800b84c <tcp_get_next_optbyte+0x60>)
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	797b      	ldrb	r3, [r7, #5]
 800b838:	4413      	add	r3, r2
 800b83a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	200081e8 	.word	0x200081e8
 800b84c:	200081e4 	.word	0x200081e4
 800b850:	200081e2 	.word	0x200081e2
 800b854:	200081dc 	.word	0x200081dc

0800b858 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <tcp_parseopt+0x1c>
 800b866:	4b32      	ldr	r3, [pc, #200]	@ (800b930 <tcp_parseopt+0xd8>)
 800b868:	f240 727d 	movw	r2, #1917	@ 0x77d
 800b86c:	4931      	ldr	r1, [pc, #196]	@ (800b934 <tcp_parseopt+0xdc>)
 800b86e:	4832      	ldr	r0, [pc, #200]	@ (800b938 <tcp_parseopt+0xe0>)
 800b870:	f004 f9b4 	bl	800fbdc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b874:	4b31      	ldr	r3, [pc, #196]	@ (800b93c <tcp_parseopt+0xe4>)
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d056      	beq.n	800b92a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b87c:	4b30      	ldr	r3, [pc, #192]	@ (800b940 <tcp_parseopt+0xe8>)
 800b87e:	2200      	movs	r2, #0
 800b880:	801a      	strh	r2, [r3, #0]
 800b882:	e046      	b.n	800b912 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800b884:	f7ff ffb2 	bl	800b7ec <tcp_get_next_optbyte>
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d006      	beq.n	800b8a0 <tcp_parseopt+0x48>
 800b892:	2b02      	cmp	r3, #2
 800b894:	dc2a      	bgt.n	800b8ec <tcp_parseopt+0x94>
 800b896:	2b00      	cmp	r3, #0
 800b898:	d042      	beq.n	800b920 <tcp_parseopt+0xc8>
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d038      	beq.n	800b910 <tcp_parseopt+0xb8>
 800b89e:	e025      	b.n	800b8ec <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b8a0:	f7ff ffa4 	bl	800b7ec <tcp_get_next_optbyte>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b04      	cmp	r3, #4
 800b8a8:	d13c      	bne.n	800b924 <tcp_parseopt+0xcc>
 800b8aa:	4b25      	ldr	r3, [pc, #148]	@ (800b940 <tcp_parseopt+0xe8>)
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	4a22      	ldr	r2, [pc, #136]	@ (800b93c <tcp_parseopt+0xe4>)
 800b8b2:	8812      	ldrh	r2, [r2, #0]
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	da35      	bge.n	800b924 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b8b8:	f7ff ff98 	bl	800b7ec <tcp_get_next_optbyte>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	021b      	lsls	r3, r3, #8
 800b8c0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b8c2:	f7ff ff93 	bl	800b7ec <tcp_get_next_optbyte>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	89bb      	ldrh	r3, [r7, #12]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b8d0:	89bb      	ldrh	r3, [r7, #12]
 800b8d2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b8d6:	d804      	bhi.n	800b8e2 <tcp_parseopt+0x8a>
 800b8d8:	89bb      	ldrh	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <tcp_parseopt+0x8a>
 800b8de:	89ba      	ldrh	r2, [r7, #12]
 800b8e0:	e001      	b.n	800b8e6 <tcp_parseopt+0x8e>
 800b8e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800b8ea:	e012      	b.n	800b912 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b8ec:	f7ff ff7e 	bl	800b7ec <tcp_get_next_optbyte>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b8f4:	7afb      	ldrb	r3, [r7, #11]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d916      	bls.n	800b928 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b8fa:	7afb      	ldrb	r3, [r7, #11]
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	4b10      	ldr	r3, [pc, #64]	@ (800b940 <tcp_parseopt+0xe8>)
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	4413      	add	r3, r2
 800b904:	b29b      	uxth	r3, r3
 800b906:	3b02      	subs	r3, #2
 800b908:	b29a      	uxth	r2, r3
 800b90a:	4b0d      	ldr	r3, [pc, #52]	@ (800b940 <tcp_parseopt+0xe8>)
 800b90c:	801a      	strh	r2, [r3, #0]
 800b90e:	e000      	b.n	800b912 <tcp_parseopt+0xba>
          break;
 800b910:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b912:	4b0b      	ldr	r3, [pc, #44]	@ (800b940 <tcp_parseopt+0xe8>)
 800b914:	881a      	ldrh	r2, [r3, #0]
 800b916:	4b09      	ldr	r3, [pc, #36]	@ (800b93c <tcp_parseopt+0xe4>)
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d3b2      	bcc.n	800b884 <tcp_parseopt+0x2c>
 800b91e:	e004      	b.n	800b92a <tcp_parseopt+0xd2>
          return;
 800b920:	bf00      	nop
 800b922:	e002      	b.n	800b92a <tcp_parseopt+0xd2>
            return;
 800b924:	bf00      	nop
 800b926:	e000      	b.n	800b92a <tcp_parseopt+0xd2>
            return;
 800b928:	bf00      	nop
      }
    }
  }
}
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	08011c38 	.word	0x08011c38
 800b934:	0801209c 	.word	0x0801209c
 800b938:	08011c84 	.word	0x08011c84
 800b93c:	200081e0 	.word	0x200081e0
 800b940:	200081e8 	.word	0x200081e8

0800b944 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b944:	b480      	push	{r7}
 800b946:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b948:	4b05      	ldr	r3, [pc, #20]	@ (800b960 <tcp_trigger_input_pcb_close+0x1c>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	f043 0310 	orr.w	r3, r3, #16
 800b950:	b2da      	uxtb	r2, r3
 800b952:	4b03      	ldr	r3, [pc, #12]	@ (800b960 <tcp_trigger_input_pcb_close+0x1c>)
 800b954:	701a      	strb	r2, [r3, #0]
}
 800b956:	bf00      	nop
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	200081f9 	.word	0x200081f9

0800b964 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <tcp_route+0x28>
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	7a1b      	ldrb	r3, [r3, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d006      	beq.n	800b98c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	7a1b      	ldrb	r3, [r3, #8]
 800b982:	4618      	mov	r0, r3
 800b984:	f7fb fb7c 	bl	8007080 <netif_get_by_index>
 800b988:	4603      	mov	r3, r0
 800b98a:	e003      	b.n	800b994 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f002 fe39 	bl	800e604 <ip4_route>
 800b992:	4603      	mov	r3, r0
  }
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d105      	bne.n	800b9be <tcp_create_segment+0x22>
 800b9b2:	4b43      	ldr	r3, [pc, #268]	@ (800bac0 <tcp_create_segment+0x124>)
 800b9b4:	22a3      	movs	r2, #163	@ 0xa3
 800b9b6:	4943      	ldr	r1, [pc, #268]	@ (800bac4 <tcp_create_segment+0x128>)
 800b9b8:	4843      	ldr	r0, [pc, #268]	@ (800bac8 <tcp_create_segment+0x12c>)
 800b9ba:	f004 f90f 	bl	800fbdc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d105      	bne.n	800b9d0 <tcp_create_segment+0x34>
 800b9c4:	4b3e      	ldr	r3, [pc, #248]	@ (800bac0 <tcp_create_segment+0x124>)
 800b9c6:	22a4      	movs	r2, #164	@ 0xa4
 800b9c8:	4940      	ldr	r1, [pc, #256]	@ (800bacc <tcp_create_segment+0x130>)
 800b9ca:	483f      	ldr	r0, [pc, #252]	@ (800bac8 <tcp_create_segment+0x12c>)
 800b9cc:	f004 f906 	bl	800fbdc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b9d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 0304 	and.w	r3, r3, #4
 800b9dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b9de:	2003      	movs	r0, #3
 800b9e0:	f7fa ffc8 	bl	8006974 <memp_malloc>
 800b9e4:	6138      	str	r0, [r7, #16]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d104      	bne.n	800b9f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b9ec:	68b8      	ldr	r0, [r7, #8]
 800b9ee:	f7fb fe87 	bl	8007700 <pbuf_free>
    return NULL;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e060      	b.n	800bab8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800b9fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2200      	movs	r2, #0
 800ba02:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	68ba      	ldr	r2, [r7, #8]
 800ba08:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	891a      	ldrh	r2, [r3, #8]
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d205      	bcs.n	800ba22 <tcp_create_segment+0x86>
 800ba16:	4b2a      	ldr	r3, [pc, #168]	@ (800bac0 <tcp_create_segment+0x124>)
 800ba18:	22b0      	movs	r2, #176	@ 0xb0
 800ba1a:	492d      	ldr	r1, [pc, #180]	@ (800bad0 <tcp_create_segment+0x134>)
 800ba1c:	482a      	ldr	r0, [pc, #168]	@ (800bac8 <tcp_create_segment+0x12c>)
 800ba1e:	f004 f8dd 	bl	800fbdc <iprintf>
  seg->len = p->tot_len - optlen;
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	891a      	ldrh	r2, [r3, #8]
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ba32:	2114      	movs	r1, #20
 800ba34:	68b8      	ldr	r0, [r7, #8]
 800ba36:	f7fb fdcd 	bl	80075d4 <pbuf_add_header>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d004      	beq.n	800ba4a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ba40:	6938      	ldr	r0, [r7, #16]
 800ba42:	f7fd f8d2 	bl	8008bea <tcp_seg_free>
    return NULL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e036      	b.n	800bab8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8ada      	ldrh	r2, [r3, #22]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	68dc      	ldr	r4, [r3, #12]
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7fa fb15 	bl	800608c <lwip_htons>
 800ba62:	4603      	mov	r3, r0
 800ba64:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	8b1a      	ldrh	r2, [r3, #24]
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	68dc      	ldr	r4, [r3, #12]
 800ba6e:	4610      	mov	r0, r2
 800ba70:	f7fa fb0c 	bl	800608c <lwip_htons>
 800ba74:	4603      	mov	r3, r0
 800ba76:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	68dc      	ldr	r4, [r3, #12]
 800ba7c:	6838      	ldr	r0, [r7, #0]
 800ba7e:	f7fa fb1b 	bl	80060b8 <lwip_htonl>
 800ba82:	4603      	mov	r3, r0
 800ba84:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ba86:	7dfb      	ldrb	r3, [r7, #23]
 800ba88:	089b      	lsrs	r3, r3, #2
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	3305      	adds	r3, #5
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	031b      	lsls	r3, r3, #12
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	68dc      	ldr	r4, [r3, #12]
 800baa0:	4610      	mov	r0, r2
 800baa2:	f7fa faf3 	bl	800608c <lwip_htons>
 800baa6:	4603      	mov	r3, r0
 800baa8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	2200      	movs	r2, #0
 800bab0:	749a      	strb	r2, [r3, #18]
 800bab2:	2200      	movs	r2, #0
 800bab4:	74da      	strb	r2, [r3, #19]
  return seg;
 800bab6:	693b      	ldr	r3, [r7, #16]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	bd90      	pop	{r4, r7, pc}
 800bac0:	080120b8 	.word	0x080120b8
 800bac4:	080120ec 	.word	0x080120ec
 800bac8:	0801210c 	.word	0x0801210c
 800bacc:	08012134 	.word	0x08012134
 800bad0:	08012158 	.word	0x08012158

0800bad4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b08b      	sub	sp, #44	@ 0x2c
 800bad8:	af02      	add	r7, sp, #8
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61fb      	str	r3, [r7, #28]
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d106      	bne.n	800bb00 <tcp_split_unsent_seg+0x2c>
 800baf2:	4b95      	ldr	r3, [pc, #596]	@ (800bd48 <tcp_split_unsent_seg+0x274>)
 800baf4:	f240 324b 	movw	r2, #843	@ 0x34b
 800baf8:	4994      	ldr	r1, [pc, #592]	@ (800bd4c <tcp_split_unsent_seg+0x278>)
 800bafa:	4895      	ldr	r0, [pc, #596]	@ (800bd50 <tcp_split_unsent_seg+0x27c>)
 800bafc:	f004 f86e 	bl	800fbdc <iprintf>

  useg = pcb->unsent;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb04:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d102      	bne.n	800bb12 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bb0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bb10:	e116      	b.n	800bd40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bb12:	887b      	ldrh	r3, [r7, #2]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d109      	bne.n	800bb2c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bb18:	4b8b      	ldr	r3, [pc, #556]	@ (800bd48 <tcp_split_unsent_seg+0x274>)
 800bb1a:	f240 3253 	movw	r2, #851	@ 0x353
 800bb1e:	498d      	ldr	r1, [pc, #564]	@ (800bd54 <tcp_split_unsent_seg+0x280>)
 800bb20:	488b      	ldr	r0, [pc, #556]	@ (800bd50 <tcp_split_unsent_seg+0x27c>)
 800bb22:	f004 f85b 	bl	800fbdc <iprintf>
    return ERR_VAL;
 800bb26:	f06f 0305 	mvn.w	r3, #5
 800bb2a:	e109      	b.n	800bd40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	891b      	ldrh	r3, [r3, #8]
 800bb30:	887a      	ldrh	r2, [r7, #2]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d301      	bcc.n	800bb3a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e102      	b.n	800bd40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb3e:	887a      	ldrh	r2, [r7, #2]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d906      	bls.n	800bb52 <tcp_split_unsent_seg+0x7e>
 800bb44:	4b80      	ldr	r3, [pc, #512]	@ (800bd48 <tcp_split_unsent_seg+0x274>)
 800bb46:	f240 325b 	movw	r2, #859	@ 0x35b
 800bb4a:	4983      	ldr	r1, [pc, #524]	@ (800bd58 <tcp_split_unsent_seg+0x284>)
 800bb4c:	4880      	ldr	r0, [pc, #512]	@ (800bd50 <tcp_split_unsent_seg+0x27c>)
 800bb4e:	f004 f845 	bl	800fbdc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	891b      	ldrh	r3, [r3, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d106      	bne.n	800bb68 <tcp_split_unsent_seg+0x94>
 800bb5a:	4b7b      	ldr	r3, [pc, #492]	@ (800bd48 <tcp_split_unsent_seg+0x274>)
 800bb5c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800bb60:	497e      	ldr	r1, [pc, #504]	@ (800bd5c <tcp_split_unsent_seg+0x288>)
 800bb62:	487b      	ldr	r0, [pc, #492]	@ (800bd50 <tcp_split_unsent_seg+0x27c>)
 800bb64:	f004 f83a 	bl	800fbdc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	7a9b      	ldrb	r3, [r3, #10]
 800bb6c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	891a      	ldrh	r2, [r3, #8]
 800bb7e:	887b      	ldrh	r3, [r7, #2]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	89bb      	ldrh	r3, [r7, #12]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bb92:	4619      	mov	r1, r3
 800bb94:	2036      	movs	r0, #54	@ 0x36
 800bb96:	f7fb facf 	bl	8007138 <pbuf_alloc>
 800bb9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f000 80b7 	beq.w	800bd12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	891a      	ldrh	r2, [r3, #8]
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	891b      	ldrh	r3, [r3, #8]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	887b      	ldrh	r3, [r7, #2]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	6858      	ldr	r0, [r3, #4]
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	685a      	ldr	r2, [r3, #4]
 800bbc0:	7bbb      	ldrb	r3, [r7, #14]
 800bbc2:	18d1      	adds	r1, r2, r3
 800bbc4:	897b      	ldrh	r3, [r7, #10]
 800bbc6:	89ba      	ldrh	r2, [r7, #12]
 800bbc8:	f7fb ff84 	bl	8007ad4 <pbuf_copy_partial>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	461a      	mov	r2, r3
 800bbd0:	89bb      	ldrh	r3, [r7, #12]
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	f040 809f 	bne.w	800bd16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	899b      	ldrh	r3, [r3, #12]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fa fa53 	bl	800608c <lwip_htons>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bbf4:	7efb      	ldrb	r3, [r7, #27]
 800bbf6:	f003 0308 	and.w	r3, r3, #8
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d007      	beq.n	800bc0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bbfe:	7efb      	ldrb	r3, [r7, #27]
 800bc00:	f023 0308 	bic.w	r3, r3, #8
 800bc04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bc06:	7ebb      	ldrb	r3, [r7, #26]
 800bc08:	f043 0308 	orr.w	r3, r3, #8
 800bc0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bc0e:	7efb      	ldrb	r3, [r7, #27]
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d007      	beq.n	800bc28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bc18:	7efb      	ldrb	r3, [r7, #27]
 800bc1a:	f023 0301 	bic.w	r3, r3, #1
 800bc1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bc20:	7ebb      	ldrb	r3, [r7, #26]
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fa fa42 	bl	80060b8 <lwip_htonl>
 800bc34:	4602      	mov	r2, r0
 800bc36:	887b      	ldrh	r3, [r7, #2]
 800bc38:	18d1      	adds	r1, r2, r3
 800bc3a:	7eba      	ldrb	r2, [r7, #26]
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	460b      	mov	r3, r1
 800bc42:	6939      	ldr	r1, [r7, #16]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff fea9 	bl	800b99c <tcp_create_segment>
 800bc4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d063      	beq.n	800bd1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fb fdda 	bl	8007810 <pbuf_clen>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bc66:	1a9b      	subs	r3, r3, r2
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	6858      	ldr	r0, [r3, #4]
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	891a      	ldrh	r2, [r3, #8]
 800bc7a:	89bb      	ldrh	r3, [r7, #12]
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	4619      	mov	r1, r3
 800bc82:	f7fb fbb7 	bl	80073f4 <pbuf_realloc>
  useg->len -= remainder;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	891a      	ldrh	r2, [r3, #8]
 800bc8a:	89bb      	ldrh	r3, [r7, #12]
 800bc8c:	1ad3      	subs	r3, r2, r3
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	899b      	ldrh	r3, [r3, #12]
 800bc9a:	b29c      	uxth	r4, r3
 800bc9c:	7efb      	ldrb	r3, [r7, #27]
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fa f9f3 	bl	800608c <lwip_htons>
 800bca6:	4603      	mov	r3, r0
 800bca8:	461a      	mov	r2, r3
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	4322      	orrs	r2, r4
 800bcb0:	b292      	uxth	r2, r2
 800bcb2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7fb fda9 	bl	8007810 <pbuf_clen>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bcc8:	4413      	add	r3, r2
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fb fd9a 	bl	8007810 <pbuf_clen>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	461a      	mov	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bce6:	4413      	add	r3, r2
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	69fa      	ldr	r2, [r7, #28]
 800bcfc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d103      	bne.n	800bd0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e016      	b.n	800bd40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bd12:	bf00      	nop
 800bd14:	e002      	b.n	800bd1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bd16:	bf00      	nop
 800bd18:	e000      	b.n	800bd1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bd1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d006      	beq.n	800bd30 <tcp_split_unsent_seg+0x25c>
 800bd22:	4b09      	ldr	r3, [pc, #36]	@ (800bd48 <tcp_split_unsent_seg+0x274>)
 800bd24:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800bd28:	490d      	ldr	r1, [pc, #52]	@ (800bd60 <tcp_split_unsent_seg+0x28c>)
 800bd2a:	4809      	ldr	r0, [pc, #36]	@ (800bd50 <tcp_split_unsent_seg+0x27c>)
 800bd2c:	f003 ff56 	bl	800fbdc <iprintf>
  if (p != NULL) {
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d002      	beq.n	800bd3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bd36:	6938      	ldr	r0, [r7, #16]
 800bd38:	f7fb fce2 	bl	8007700 <pbuf_free>
  }

  return ERR_MEM;
 800bd3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3724      	adds	r7, #36	@ 0x24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd90      	pop	{r4, r7, pc}
 800bd48:	080120b8 	.word	0x080120b8
 800bd4c:	0801244c 	.word	0x0801244c
 800bd50:	0801210c 	.word	0x0801210c
 800bd54:	08012470 	.word	0x08012470
 800bd58:	08012494 	.word	0x08012494
 800bd5c:	080124a4 	.word	0x080124a4
 800bd60:	080124b4 	.word	0x080124b4

0800bd64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bd64:	b590      	push	{r4, r7, lr}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d106      	bne.n	800bd80 <tcp_send_fin+0x1c>
 800bd72:	4b21      	ldr	r3, [pc, #132]	@ (800bdf8 <tcp_send_fin+0x94>)
 800bd74:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800bd78:	4920      	ldr	r1, [pc, #128]	@ (800bdfc <tcp_send_fin+0x98>)
 800bd7a:	4821      	ldr	r0, [pc, #132]	@ (800be00 <tcp_send_fin+0x9c>)
 800bd7c:	f003 ff2e 	bl	800fbdc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d02e      	beq.n	800bde6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd8c:	60fb      	str	r3, [r7, #12]
 800bd8e:	e002      	b.n	800bd96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1f8      	bne.n	800bd90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	899b      	ldrh	r3, [r3, #12]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fa f970 	bl	800608c <lwip_htons>
 800bdac:	4603      	mov	r3, r0
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f003 0307 	and.w	r3, r3, #7
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d116      	bne.n	800bde6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	899b      	ldrh	r3, [r3, #12]
 800bdbe:	b29c      	uxth	r4, r3
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	f7fa f963 	bl	800608c <lwip_htons>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	461a      	mov	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	4322      	orrs	r2, r4
 800bdd0:	b292      	uxth	r2, r2
 800bdd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	8b5b      	ldrh	r3, [r3, #26]
 800bdd8:	f043 0320 	orr.w	r3, r3, #32
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	e004      	b.n	800bdf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bde6:	2101      	movs	r1, #1
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f80b 	bl	800be04 <tcp_enqueue_flags>
 800bdee:	4603      	mov	r3, r0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd90      	pop	{r4, r7, pc}
 800bdf8:	080120b8 	.word	0x080120b8
 800bdfc:	080124c0 	.word	0x080124c0
 800be00:	0801210c 	.word	0x0801210c

0800be04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b08a      	sub	sp, #40	@ 0x28
 800be08:	af02      	add	r7, sp, #8
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800be10:	2300      	movs	r3, #0
 800be12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800be18:	78fb      	ldrb	r3, [r7, #3]
 800be1a:	f003 0303 	and.w	r3, r3, #3
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <tcp_enqueue_flags+0x2c>
 800be22:	4b67      	ldr	r3, [pc, #412]	@ (800bfc0 <tcp_enqueue_flags+0x1bc>)
 800be24:	f240 4211 	movw	r2, #1041	@ 0x411
 800be28:	4966      	ldr	r1, [pc, #408]	@ (800bfc4 <tcp_enqueue_flags+0x1c0>)
 800be2a:	4867      	ldr	r0, [pc, #412]	@ (800bfc8 <tcp_enqueue_flags+0x1c4>)
 800be2c:	f003 fed6 	bl	800fbdc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <tcp_enqueue_flags+0x40>
 800be36:	4b62      	ldr	r3, [pc, #392]	@ (800bfc0 <tcp_enqueue_flags+0x1bc>)
 800be38:	f240 4213 	movw	r2, #1043	@ 0x413
 800be3c:	4963      	ldr	r1, [pc, #396]	@ (800bfcc <tcp_enqueue_flags+0x1c8>)
 800be3e:	4862      	ldr	r0, [pc, #392]	@ (800bfc8 <tcp_enqueue_flags+0x1c4>)
 800be40:	f003 fecc 	bl	800fbdc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	f003 0302 	and.w	r3, r3, #2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800be4e:	2301      	movs	r3, #1
 800be50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be52:	7ffb      	ldrb	r3, [r7, #31]
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f003 0304 	and.w	r3, r3, #4
 800be5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
 800be60:	b29b      	uxth	r3, r3
 800be62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800be66:	4619      	mov	r1, r3
 800be68:	2036      	movs	r0, #54	@ 0x36
 800be6a:	f7fb f965 	bl	8007138 <pbuf_alloc>
 800be6e:	6138      	str	r0, [r7, #16]
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d109      	bne.n	800be8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	8b5b      	ldrh	r3, [r3, #26]
 800be7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be7e:	b29a      	uxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800be84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be88:	e095      	b.n	800bfb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	895a      	ldrh	r2, [r3, #10]
 800be8e:	7dfb      	ldrb	r3, [r7, #23]
 800be90:	b29b      	uxth	r3, r3
 800be92:	429a      	cmp	r2, r3
 800be94:	d206      	bcs.n	800bea4 <tcp_enqueue_flags+0xa0>
 800be96:	4b4a      	ldr	r3, [pc, #296]	@ (800bfc0 <tcp_enqueue_flags+0x1bc>)
 800be98:	f240 4239 	movw	r2, #1081	@ 0x439
 800be9c:	494c      	ldr	r1, [pc, #304]	@ (800bfd0 <tcp_enqueue_flags+0x1cc>)
 800be9e:	484a      	ldr	r0, [pc, #296]	@ (800bfc8 <tcp_enqueue_flags+0x1c4>)
 800bea0:	f003 fe9c 	bl	800fbdc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800bea8:	78fa      	ldrb	r2, [r7, #3]
 800beaa:	7ffb      	ldrb	r3, [r7, #31]
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	460b      	mov	r3, r1
 800beb0:	6939      	ldr	r1, [r7, #16]
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff fd72 	bl	800b99c <tcp_create_segment>
 800beb8:	60f8      	str	r0, [r7, #12]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d109      	bne.n	800bed4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	8b5b      	ldrh	r3, [r3, #26]
 800bec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bec8:	b29a      	uxth	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bed2:	e070      	b.n	800bfb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	f003 0303 	and.w	r3, r3, #3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d006      	beq.n	800beee <tcp_enqueue_flags+0xea>
 800bee0:	4b37      	ldr	r3, [pc, #220]	@ (800bfc0 <tcp_enqueue_flags+0x1bc>)
 800bee2:	f240 4242 	movw	r2, #1090	@ 0x442
 800bee6:	493b      	ldr	r1, [pc, #236]	@ (800bfd4 <tcp_enqueue_flags+0x1d0>)
 800bee8:	4837      	ldr	r0, [pc, #220]	@ (800bfc8 <tcp_enqueue_flags+0x1c4>)
 800beea:	f003 fe77 	bl	800fbdc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	891b      	ldrh	r3, [r3, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d006      	beq.n	800bf04 <tcp_enqueue_flags+0x100>
 800bef6:	4b32      	ldr	r3, [pc, #200]	@ (800bfc0 <tcp_enqueue_flags+0x1bc>)
 800bef8:	f240 4243 	movw	r2, #1091	@ 0x443
 800befc:	4936      	ldr	r1, [pc, #216]	@ (800bfd8 <tcp_enqueue_flags+0x1d4>)
 800befe:	4832      	ldr	r0, [pc, #200]	@ (800bfc8 <tcp_enqueue_flags+0x1c4>)
 800bf00:	f003 fe6c 	bl	800fbdc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d103      	bne.n	800bf14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bf12:	e00d      	b.n	800bf30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf18:	61bb      	str	r3, [r7, #24]
 800bf1a:	e002      	b.n	800bf22 <tcp_enqueue_flags+0x11e>
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	61bb      	str	r3, [r7, #24]
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1f8      	bne.n	800bf1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bf38:	78fb      	ldrb	r3, [r7, #3]
 800bf3a:	f003 0302 	and.w	r3, r3, #2
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d104      	bne.n	800bf4c <tcp_enqueue_flags+0x148>
 800bf42:	78fb      	ldrb	r3, [r7, #3]
 800bf44:	f003 0301 	and.w	r3, r3, #1
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d004      	beq.n	800bf56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bf56:	78fb      	ldrb	r3, [r7, #3]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d006      	beq.n	800bf6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	8b5b      	ldrh	r3, [r3, #26]
 800bf64:	f043 0320 	orr.w	r3, r3, #32
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fb fc4c 	bl	8007810 <pbuf_clen>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bf82:	4413      	add	r3, r2
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00e      	beq.n	800bfb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10a      	bne.n	800bfb4 <tcp_enqueue_flags+0x1b0>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d106      	bne.n	800bfb4 <tcp_enqueue_flags+0x1b0>
 800bfa6:	4b06      	ldr	r3, [pc, #24]	@ (800bfc0 <tcp_enqueue_flags+0x1bc>)
 800bfa8:	f240 4265 	movw	r2, #1125	@ 0x465
 800bfac:	490b      	ldr	r1, [pc, #44]	@ (800bfdc <tcp_enqueue_flags+0x1d8>)
 800bfae:	4806      	ldr	r0, [pc, #24]	@ (800bfc8 <tcp_enqueue_flags+0x1c4>)
 800bfb0:	f003 fe14 	bl	800fbdc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3720      	adds	r7, #32
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	080120b8 	.word	0x080120b8
 800bfc4:	080124dc 	.word	0x080124dc
 800bfc8:	0801210c 	.word	0x0801210c
 800bfcc:	08012534 	.word	0x08012534
 800bfd0:	08012554 	.word	0x08012554
 800bfd4:	08012590 	.word	0x08012590
 800bfd8:	080125a8 	.word	0x080125a8
 800bfdc:	080125d4 	.word	0x080125d4

0800bfe0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bfe0:	b5b0      	push	{r4, r5, r7, lr}
 800bfe2:	b08a      	sub	sp, #40	@ 0x28
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d106      	bne.n	800bffc <tcp_output+0x1c>
 800bfee:	4b8a      	ldr	r3, [pc, #552]	@ (800c218 <tcp_output+0x238>)
 800bff0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800bff4:	4989      	ldr	r1, [pc, #548]	@ (800c21c <tcp_output+0x23c>)
 800bff6:	488a      	ldr	r0, [pc, #552]	@ (800c220 <tcp_output+0x240>)
 800bff8:	f003 fdf0 	bl	800fbdc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7d1b      	ldrb	r3, [r3, #20]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d106      	bne.n	800c012 <tcp_output+0x32>
 800c004:	4b84      	ldr	r3, [pc, #528]	@ (800c218 <tcp_output+0x238>)
 800c006:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c00a:	4986      	ldr	r1, [pc, #536]	@ (800c224 <tcp_output+0x244>)
 800c00c:	4884      	ldr	r0, [pc, #528]	@ (800c220 <tcp_output+0x240>)
 800c00e:	f003 fde5 	bl	800fbdc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c012:	4b85      	ldr	r3, [pc, #532]	@ (800c228 <tcp_output+0x248>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d101      	bne.n	800c020 <tcp_output+0x40>
    return ERR_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	e1ce      	b.n	800c3be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c02c:	4293      	cmp	r3, r2
 800c02e:	bf28      	it	cs
 800c030:	4613      	movcs	r3, r2
 800c032:	b29b      	uxth	r3, r3
 800c034:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c03a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800c03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10b      	bne.n	800c05a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	8b5b      	ldrh	r3, [r3, #26]
 800c046:	f003 0302 	and.w	r3, r3, #2
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 81aa 	beq.w	800c3a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fdcb 	bl	800cbec <tcp_send_empty_ack>
 800c056:	4603      	mov	r3, r0
 800c058:	e1b1      	b.n	800c3be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c05a:	6879      	ldr	r1, [r7, #4]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3304      	adds	r3, #4
 800c060:	461a      	mov	r2, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7ff fc7e 	bl	800b964 <tcp_route>
 800c068:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d102      	bne.n	800c076 <tcp_output+0x96>
    return ERR_RTE;
 800c070:	f06f 0303 	mvn.w	r3, #3
 800c074:	e1a3      	b.n	800c3be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <tcp_output+0xa4>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d111      	bne.n	800c0a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d002      	beq.n	800c090 <tcp_output+0xb0>
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	3304      	adds	r3, #4
 800c08e:	e000      	b.n	800c092 <tcp_output+0xb2>
 800c090:	2300      	movs	r3, #0
 800c092:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d102      	bne.n	800c0a0 <tcp_output+0xc0>
      return ERR_RTE;
 800c09a:	f06f 0303 	mvn.w	r3, #3
 800c09e:	e18e      	b.n	800c3be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fa f802 	bl	80060b8 <lwip_htonl>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0be:	8912      	ldrh	r2, [r2, #8]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d227      	bcs.n	800c118 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	69bb      	ldr	r3, [r7, #24]
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d114      	bne.n	800c100 <tcp_output+0x120>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d110      	bne.n	800c100 <tcp_output+0x120>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10b      	bne.n	800c100 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	8b5b      	ldrh	r3, [r3, #26]
 800c104:	f003 0302 	and.w	r3, r3, #2
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 814d 	beq.w	800c3a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fd6c 	bl	800cbec <tcp_send_empty_ack>
 800c114:	4603      	mov	r3, r0
 800c116:	e152      	b.n	800c3be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c124:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c126:	6a3b      	ldr	r3, [r7, #32]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 811c 	beq.w	800c366 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c12e:	e002      	b.n	800c136 <tcp_output+0x156>
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	623b      	str	r3, [r7, #32]
 800c136:	6a3b      	ldr	r3, [r7, #32]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1f8      	bne.n	800c130 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c13e:	e112      	b.n	800c366 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	899b      	ldrh	r3, [r3, #12]
 800c146:	b29b      	uxth	r3, r3
 800c148:	4618      	mov	r0, r3
 800c14a:	f7f9 ff9f 	bl	800608c <lwip_htons>
 800c14e:	4603      	mov	r3, r0
 800c150:	b2db      	uxtb	r3, r3
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b00      	cmp	r3, #0
 800c158:	d006      	beq.n	800c168 <tcp_output+0x188>
 800c15a:	4b2f      	ldr	r3, [pc, #188]	@ (800c218 <tcp_output+0x238>)
 800c15c:	f240 5236 	movw	r2, #1334	@ 0x536
 800c160:	4932      	ldr	r1, [pc, #200]	@ (800c22c <tcp_output+0x24c>)
 800c162:	482f      	ldr	r0, [pc, #188]	@ (800c220 <tcp_output+0x240>)
 800c164:	f003 fd3a 	bl	800fbdc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01f      	beq.n	800c1b0 <tcp_output+0x1d0>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	8b5b      	ldrh	r3, [r3, #26]
 800c174:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d119      	bne.n	800c1b0 <tcp_output+0x1d0>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <tcp_output+0x1bc>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d110      	bne.n	800c1b0 <tcp_output+0x1d0>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c192:	891a      	ldrh	r2, [r3, #8]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c198:	429a      	cmp	r2, r3
 800c19a:	d209      	bcs.n	800c1b0 <tcp_output+0x1d0>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d004      	beq.n	800c1b0 <tcp_output+0x1d0>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c1ac:	2b08      	cmp	r3, #8
 800c1ae:	d901      	bls.n	800c1b4 <tcp_output+0x1d4>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e000      	b.n	800c1b6 <tcp_output+0x1d6>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	8b5b      	ldrh	r3, [r3, #26]
 800c1be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 80e4 	beq.w	800c390 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	7d1b      	ldrb	r3, [r3, #20]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d00d      	beq.n	800c1ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	899b      	ldrh	r3, [r3, #12]
 800c1d6:	b29c      	uxth	r4, r3
 800c1d8:	2010      	movs	r0, #16
 800c1da:	f7f9 ff57 	bl	800608c <lwip_htons>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	4322      	orrs	r2, r4
 800c1e8:	b292      	uxth	r2, r2
 800c1ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	6879      	ldr	r1, [r7, #4]
 800c1f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c1f2:	f000 f909 	bl	800c408 <tcp_output_segment>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d016      	beq.n	800c230 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	8b5b      	ldrh	r3, [r3, #26]
 800c206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	835a      	strh	r2, [r3, #26]
      return err;
 800c210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c214:	e0d3      	b.n	800c3be <tcp_output+0x3de>
 800c216:	bf00      	nop
 800c218:	080120b8 	.word	0x080120b8
 800c21c:	080125fc 	.word	0x080125fc
 800c220:	0801210c 	.word	0x0801210c
 800c224:	08012614 	.word	0x08012614
 800c228:	20008200 	.word	0x20008200
 800c22c:	0801263c 	.word	0x0801263c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	7d1b      	ldrb	r3, [r3, #20]
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d006      	beq.n	800c24e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	8b5b      	ldrh	r3, [r3, #26]
 800c244:	f023 0303 	bic.w	r3, r3, #3
 800c248:	b29a      	uxth	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	4618      	mov	r0, r3
 800c256:	f7f9 ff2f 	bl	80060b8 <lwip_htonl>
 800c25a:	4604      	mov	r4, r0
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	891b      	ldrh	r3, [r3, #8]
 800c260:	461d      	mov	r5, r3
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	899b      	ldrh	r3, [r3, #12]
 800c268:	b29b      	uxth	r3, r3
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7f9 ff0e 	bl	800608c <lwip_htons>
 800c270:	4603      	mov	r3, r0
 800c272:	b2db      	uxtb	r3, r3
 800c274:	f003 0303 	and.w	r3, r3, #3
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <tcp_output+0x2a0>
 800c27c:	2301      	movs	r3, #1
 800c27e:	e000      	b.n	800c282 <tcp_output+0x2a2>
 800c280:	2300      	movs	r3, #0
 800c282:	442b      	add	r3, r5
 800c284:	4423      	add	r3, r4
 800c286:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	2b00      	cmp	r3, #0
 800c292:	da02      	bge.n	800c29a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29c:	891b      	ldrh	r3, [r3, #8]
 800c29e:	461c      	mov	r4, r3
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	899b      	ldrh	r3, [r3, #12]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7f9 feef 	bl	800608c <lwip_htons>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <tcp_output+0x2de>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e000      	b.n	800c2c0 <tcp_output+0x2e0>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	4423      	add	r3, r4
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d049      	beq.n	800c35a <tcp_output+0x37a>
      seg->next = NULL;
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d105      	bne.n	800c2e0 <tcp_output+0x300>
        pcb->unacked = seg;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800c2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2dc:	623b      	str	r3, [r7, #32]
 800c2de:	e03f      	b.n	800c360 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7f9 fee6 	bl	80060b8 <lwip_htonl>
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	6a3b      	ldr	r3, [r7, #32]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7f9 fedf 	bl	80060b8 <lwip_htonl>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	1ae3      	subs	r3, r4, r3
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	da24      	bge.n	800c34c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	3370      	adds	r3, #112	@ 0x70
 800c306:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c308:	e002      	b.n	800c310 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d011      	beq.n	800c33c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	4618      	mov	r0, r3
 800c322:	f7f9 fec9 	bl	80060b8 <lwip_htonl>
 800c326:	4604      	mov	r4, r0
 800c328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	4618      	mov	r0, r3
 800c330:	f7f9 fec2 	bl	80060b8 <lwip_htonl>
 800c334:	4603      	mov	r3, r0
 800c336:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c338:	2b00      	cmp	r3, #0
 800c33a:	dbe6      	blt.n	800c30a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c342:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	e009      	b.n	800c360 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c350:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	623b      	str	r3, [r7, #32]
 800c358:	e002      	b.n	800c360 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c35a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c35c:	f7fc fc45 	bl	8008bea <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c364:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800c366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d012      	beq.n	800c392 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	4618      	mov	r0, r3
 800c374:	f7f9 fea0 	bl	80060b8 <lwip_htonl>
 800c378:	4602      	mov	r2, r0
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c382:	8912      	ldrh	r2, [r2, #8]
 800c384:	4413      	add	r3, r2
  while (seg != NULL &&
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	429a      	cmp	r2, r3
 800c38a:	f4bf aed9 	bcs.w	800c140 <tcp_output+0x160>
 800c38e:	e000      	b.n	800c392 <tcp_output+0x3b2>
      break;
 800c390:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d108      	bne.n	800c3ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800c3a2:	e004      	b.n	800c3ae <tcp_output+0x3ce>
    goto output_done;
 800c3a4:	bf00      	nop
 800c3a6:	e002      	b.n	800c3ae <tcp_output+0x3ce>
    goto output_done;
 800c3a8:	bf00      	nop
 800c3aa:	e000      	b.n	800c3ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c3ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	8b5b      	ldrh	r3, [r3, #26]
 800c3b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3728      	adds	r7, #40	@ 0x28
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bdb0      	pop	{r4, r5, r7, pc}
 800c3c6:	bf00      	nop

0800c3c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <tcp_output_segment_busy+0x1c>
 800c3d6:	4b09      	ldr	r3, [pc, #36]	@ (800c3fc <tcp_output_segment_busy+0x34>)
 800c3d8:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c3dc:	4908      	ldr	r1, [pc, #32]	@ (800c400 <tcp_output_segment_busy+0x38>)
 800c3de:	4809      	ldr	r0, [pc, #36]	@ (800c404 <tcp_output_segment_busy+0x3c>)
 800c3e0:	f003 fbfc 	bl	800fbdc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	7b9b      	ldrb	r3, [r3, #14]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d001      	beq.n	800c3f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e000      	b.n	800c3f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	080120b8 	.word	0x080120b8
 800c400:	08012654 	.word	0x08012654
 800c404:	0801210c 	.word	0x0801210c

0800c408 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c408:	b5b0      	push	{r4, r5, r7, lr}
 800c40a:	b08c      	sub	sp, #48	@ 0x30
 800c40c:	af04      	add	r7, sp, #16
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <tcp_output_segment+0x20>
 800c41a:	4b64      	ldr	r3, [pc, #400]	@ (800c5ac <tcp_output_segment+0x1a4>)
 800c41c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800c420:	4963      	ldr	r1, [pc, #396]	@ (800c5b0 <tcp_output_segment+0x1a8>)
 800c422:	4864      	ldr	r0, [pc, #400]	@ (800c5b4 <tcp_output_segment+0x1ac>)
 800c424:	f003 fbda 	bl	800fbdc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d106      	bne.n	800c43c <tcp_output_segment+0x34>
 800c42e:	4b5f      	ldr	r3, [pc, #380]	@ (800c5ac <tcp_output_segment+0x1a4>)
 800c430:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800c434:	4960      	ldr	r1, [pc, #384]	@ (800c5b8 <tcp_output_segment+0x1b0>)
 800c436:	485f      	ldr	r0, [pc, #380]	@ (800c5b4 <tcp_output_segment+0x1ac>)
 800c438:	f003 fbd0 	bl	800fbdc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d106      	bne.n	800c450 <tcp_output_segment+0x48>
 800c442:	4b5a      	ldr	r3, [pc, #360]	@ (800c5ac <tcp_output_segment+0x1a4>)
 800c444:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800c448:	495c      	ldr	r1, [pc, #368]	@ (800c5bc <tcp_output_segment+0x1b4>)
 800c44a:	485a      	ldr	r0, [pc, #360]	@ (800c5b4 <tcp_output_segment+0x1ac>)
 800c44c:	f003 fbc6 	bl	800fbdc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c450:	68f8      	ldr	r0, [r7, #12]
 800c452:	f7ff ffb9 	bl	800c3c8 <tcp_output_segment_busy>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e0a1      	b.n	800c5a4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	68dc      	ldr	r4, [r3, #12]
 800c468:	4610      	mov	r0, r2
 800c46a:	f7f9 fe25 	bl	80060b8 <lwip_htonl>
 800c46e:	4603      	mov	r3, r0
 800c470:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	68dc      	ldr	r4, [r3, #12]
 800c47a:	4610      	mov	r0, r2
 800c47c:	f7f9 fe06 	bl	800608c <lwip_htons>
 800c480:	4603      	mov	r3, r0
 800c482:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c488:	68ba      	ldr	r2, [r7, #8]
 800c48a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c48c:	441a      	add	r2, r3
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	3314      	adds	r3, #20
 800c498:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	7a9b      	ldrb	r3, [r3, #10]
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d015      	beq.n	800c4d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800c4b2:	f7fc fe91 	bl	80091d8 <tcp_eff_send_mss_netif>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c4ba:	8b7b      	ldrh	r3, [r7, #26]
 800c4bc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7f9 fdf9 	bl	80060b8 <lwip_htonl>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	da02      	bge.n	800c4e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10c      	bne.n	800c504 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c4ea:	4b35      	ldr	r3, [pc, #212]	@ (800c5c0 <tcp_output_segment+0x1b8>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7f9 fddd 	bl	80060b8 <lwip_htonl>
 800c4fe:	4602      	mov	r2, r0
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68da      	ldr	r2, [r3, #12]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	8959      	ldrh	r1, [r3, #10]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	8b3a      	ldrh	r2, [r7, #24]
 800c51e:	1a8a      	subs	r2, r1, r2
 800c520:	b292      	uxth	r2, r2
 800c522:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	8919      	ldrh	r1, [r3, #8]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	8b3a      	ldrh	r2, [r7, #24]
 800c530:	1a8a      	subs	r2, r1, r2
 800c532:	b292      	uxth	r2, r2
 800c534:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	68d2      	ldr	r2, [r2, #12]
 800c53e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	2200      	movs	r2, #0
 800c546:	741a      	strb	r2, [r3, #16]
 800c548:	2200      	movs	r2, #0
 800c54a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	68da      	ldr	r2, [r3, #12]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	7a9b      	ldrb	r3, [r3, #10]
 800c554:	f003 0301 	and.w	r3, r3, #1
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d001      	beq.n	800c560 <tcp_output_segment+0x158>
 800c55c:	2318      	movs	r3, #24
 800c55e:	e000      	b.n	800c562 <tcp_output_segment+0x15a>
 800c560:	2314      	movs	r3, #20
 800c562:	4413      	add	r3, r2
 800c564:	69fa      	ldr	r2, [r7, #28]
 800c566:	429a      	cmp	r2, r3
 800c568:	d006      	beq.n	800c578 <tcp_output_segment+0x170>
 800c56a:	4b10      	ldr	r3, [pc, #64]	@ (800c5ac <tcp_output_segment+0x1a4>)
 800c56c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800c570:	4914      	ldr	r1, [pc, #80]	@ (800c5c4 <tcp_output_segment+0x1bc>)
 800c572:	4810      	ldr	r0, [pc, #64]	@ (800c5b4 <tcp_output_segment+0x1ac>)
 800c574:	f003 fb32 	bl	800fbdc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6858      	ldr	r0, [r3, #4]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	1d1c      	adds	r4, r3, #4
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	7add      	ldrb	r5, [r3, #11]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	7a9b      	ldrb	r3, [r3, #10]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	9202      	str	r2, [sp, #8]
 800c58e:	2206      	movs	r2, #6
 800c590:	9201      	str	r2, [sp, #4]
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	462b      	mov	r3, r5
 800c596:	4622      	mov	r2, r4
 800c598:	f002 f9f2 	bl	800e980 <ip4_output_if>
 800c59c:	4603      	mov	r3, r0
 800c59e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c5a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3720      	adds	r7, #32
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bdb0      	pop	{r4, r5, r7, pc}
 800c5ac:	080120b8 	.word	0x080120b8
 800c5b0:	0801267c 	.word	0x0801267c
 800c5b4:	0801210c 	.word	0x0801210c
 800c5b8:	0801269c 	.word	0x0801269c
 800c5bc:	080126bc 	.word	0x080126bc
 800c5c0:	200081b4 	.word	0x200081b4
 800c5c4:	080126e0 	.word	0x080126e0

0800c5c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c5c8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <tcp_rexmit_rto_prepare+0x1c>
 800c5d6:	4b31      	ldr	r3, [pc, #196]	@ (800c69c <tcp_rexmit_rto_prepare+0xd4>)
 800c5d8:	f240 6263 	movw	r2, #1635	@ 0x663
 800c5dc:	4930      	ldr	r1, [pc, #192]	@ (800c6a0 <tcp_rexmit_rto_prepare+0xd8>)
 800c5de:	4831      	ldr	r0, [pc, #196]	@ (800c6a4 <tcp_rexmit_rto_prepare+0xdc>)
 800c5e0:	f003 fafc 	bl	800fbdc <iprintf>

  if (pcb->unacked == NULL) {
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d102      	bne.n	800c5f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c5ec:	f06f 0305 	mvn.w	r3, #5
 800c5f0:	e050      	b.n	800c694 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	e00b      	b.n	800c612 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f7ff fee4 	bl	800c3c8 <tcp_output_segment_busy>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d002      	beq.n	800c60c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c606:	f06f 0305 	mvn.w	r3, #5
 800c60a:	e043      	b.n	800c694 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	60fb      	str	r3, [r7, #12]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1ef      	bne.n	800c5fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f7ff fed4 	bl	800c3c8 <tcp_output_segment_busy>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d002      	beq.n	800c62c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c626:	f06f 0305 	mvn.w	r3, #5
 800c62a:	e033      	b.n	800c694 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	8b5b      	ldrh	r3, [r3, #26]
 800c646:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	4618      	mov	r0, r3
 800c658:	f7f9 fd2e 	bl	80060b8 <lwip_htonl>
 800c65c:	4604      	mov	r4, r0
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	891b      	ldrh	r3, [r3, #8]
 800c662:	461d      	mov	r5, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	899b      	ldrh	r3, [r3, #12]
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7f9 fd0d 	bl	800608c <lwip_htons>
 800c672:	4603      	mov	r3, r0
 800c674:	b2db      	uxtb	r3, r3
 800c676:	f003 0303 	and.w	r3, r3, #3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <tcp_rexmit_rto_prepare+0xba>
 800c67e:	2301      	movs	r3, #1
 800c680:	e000      	b.n	800c684 <tcp_rexmit_rto_prepare+0xbc>
 800c682:	2300      	movs	r3, #0
 800c684:	442b      	add	r3, r5
 800c686:	18e2      	adds	r2, r4, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bdb0      	pop	{r4, r5, r7, pc}
 800c69c:	080120b8 	.word	0x080120b8
 800c6a0:	080126f4 	.word	0x080126f4
 800c6a4:	0801210c 	.word	0x0801210c

0800c6a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d106      	bne.n	800c6c4 <tcp_rexmit_rto_commit+0x1c>
 800c6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c6ec <tcp_rexmit_rto_commit+0x44>)
 800c6b8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c6bc:	490c      	ldr	r1, [pc, #48]	@ (800c6f0 <tcp_rexmit_rto_commit+0x48>)
 800c6be:	480d      	ldr	r0, [pc, #52]	@ (800c6f4 <tcp_rexmit_rto_commit+0x4c>)
 800c6c0:	f003 fa8c 	bl	800fbdc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c6ca:	2bff      	cmp	r3, #255	@ 0xff
 800c6cc:	d007      	beq.n	800c6de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f7ff fc7e 	bl	800bfe0 <tcp_output>
}
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	080120b8 	.word	0x080120b8
 800c6f0:	08012718 	.word	0x08012718
 800c6f4:	0801210c 	.word	0x0801210c

0800c6f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <tcp_rexmit_rto+0x1c>
 800c706:	4b0a      	ldr	r3, [pc, #40]	@ (800c730 <tcp_rexmit_rto+0x38>)
 800c708:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800c70c:	4909      	ldr	r1, [pc, #36]	@ (800c734 <tcp_rexmit_rto+0x3c>)
 800c70e:	480a      	ldr	r0, [pc, #40]	@ (800c738 <tcp_rexmit_rto+0x40>)
 800c710:	f003 fa64 	bl	800fbdc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f7ff ff57 	bl	800c5c8 <tcp_rexmit_rto_prepare>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d102      	bne.n	800c726 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff ffc1 	bl	800c6a8 <tcp_rexmit_rto_commit>
  }
}
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	080120b8 	.word	0x080120b8
 800c734:	0801273c 	.word	0x0801273c
 800c738:	0801210c 	.word	0x0801210c

0800c73c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d106      	bne.n	800c758 <tcp_rexmit+0x1c>
 800c74a:	4b2f      	ldr	r3, [pc, #188]	@ (800c808 <tcp_rexmit+0xcc>)
 800c74c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800c750:	492e      	ldr	r1, [pc, #184]	@ (800c80c <tcp_rexmit+0xd0>)
 800c752:	482f      	ldr	r0, [pc, #188]	@ (800c810 <tcp_rexmit+0xd4>)
 800c754:	f003 fa42 	bl	800fbdc <iprintf>

  if (pcb->unacked == NULL) {
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d102      	bne.n	800c766 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c760:	f06f 0305 	mvn.w	r3, #5
 800c764:	e04c      	b.n	800c800 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c76a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c76c:	68b8      	ldr	r0, [r7, #8]
 800c76e:	f7ff fe2b 	bl	800c3c8 <tcp_output_segment_busy>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c778:	f06f 0305 	mvn.w	r3, #5
 800c77c:	e040      	b.n	800c800 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	336c      	adds	r3, #108	@ 0x6c
 800c78a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c78c:	e002      	b.n	800c794 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d011      	beq.n	800c7c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7f9 fc87 	bl	80060b8 <lwip_htonl>
 800c7aa:	4604      	mov	r4, r0
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f9 fc80 	bl	80060b8 <lwip_htonl>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dbe6      	blt.n	800c78e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d103      	bne.n	800c7de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c7e4:	2bff      	cmp	r3, #255	@ 0xff
 800c7e6:	d007      	beq.n	800c7f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	3714      	adds	r7, #20
 800c804:	46bd      	mov	sp, r7
 800c806:	bd90      	pop	{r4, r7, pc}
 800c808:	080120b8 	.word	0x080120b8
 800c80c:	08012758 	.word	0x08012758
 800c810:	0801210c 	.word	0x0801210c

0800c814 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d106      	bne.n	800c830 <tcp_rexmit_fast+0x1c>
 800c822:	4b2a      	ldr	r3, [pc, #168]	@ (800c8cc <tcp_rexmit_fast+0xb8>)
 800c824:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800c828:	4929      	ldr	r1, [pc, #164]	@ (800c8d0 <tcp_rexmit_fast+0xbc>)
 800c82a:	482a      	ldr	r0, [pc, #168]	@ (800c8d4 <tcp_rexmit_fast+0xc0>)
 800c82c:	f003 f9d6 	bl	800fbdc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c834:	2b00      	cmp	r3, #0
 800c836:	d045      	beq.n	800c8c4 <tcp_rexmit_fast+0xb0>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	8b5b      	ldrh	r3, [r3, #26]
 800c83c:	f003 0304 	and.w	r3, r3, #4
 800c840:	2b00      	cmp	r3, #0
 800c842:	d13f      	bne.n	800c8c4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff ff79 	bl	800c73c <tcp_rexmit>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d139      	bne.n	800c8c4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c85c:	4293      	cmp	r3, r2
 800c85e:	bf28      	it	cs
 800c860:	4613      	movcs	r3, r2
 800c862:	b29b      	uxth	r3, r3
 800c864:	2b00      	cmp	r3, #0
 800c866:	da00      	bge.n	800c86a <tcp_rexmit_fast+0x56>
 800c868:	3301      	adds	r3, #1
 800c86a:	105b      	asrs	r3, r3, #1
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c87a:	461a      	mov	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c880:	005b      	lsls	r3, r3, #1
 800c882:	429a      	cmp	r2, r3
 800c884:	d206      	bcs.n	800c894 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c88a:	005b      	lsls	r3, r3, #1
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c89e:	4619      	mov	r1, r3
 800c8a0:	0049      	lsls	r1, r1, #1
 800c8a2:	440b      	add	r3, r1
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	4413      	add	r3, r2
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	8b5b      	ldrh	r3, [r3, #26]
 800c8b4:	f043 0304 	orr.w	r3, r3, #4
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	080120b8 	.word	0x080120b8
 800c8d0:	08012770 	.word	0x08012770
 800c8d4:	0801210c 	.word	0x0801210c

0800c8d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	607b      	str	r3, [r7, #4]
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	817b      	strh	r3, [r7, #10]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c8ea:	897a      	ldrh	r2, [r7, #10]
 800c8ec:	893b      	ldrh	r3, [r7, #8]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	3314      	adds	r3, #20
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	2022      	movs	r0, #34	@ 0x22
 800c8fe:	f7fa fc1b 	bl	8007138 <pbuf_alloc>
 800c902:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d04d      	beq.n	800c9a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c90a:	897b      	ldrh	r3, [r7, #10]
 800c90c:	3313      	adds	r3, #19
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	8952      	ldrh	r2, [r2, #10]
 800c912:	4293      	cmp	r3, r2
 800c914:	db06      	blt.n	800c924 <tcp_output_alloc_header_common+0x4c>
 800c916:	4b26      	ldr	r3, [pc, #152]	@ (800c9b0 <tcp_output_alloc_header_common+0xd8>)
 800c918:	f240 7223 	movw	r2, #1827	@ 0x723
 800c91c:	4925      	ldr	r1, [pc, #148]	@ (800c9b4 <tcp_output_alloc_header_common+0xdc>)
 800c91e:	4826      	ldr	r0, [pc, #152]	@ (800c9b8 <tcp_output_alloc_header_common+0xe0>)
 800c920:	f003 f95c 	bl	800fbdc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c92a:	8c3b      	ldrh	r3, [r7, #32]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7f9 fbad 	bl	800608c <lwip_htons>
 800c932:	4603      	mov	r3, r0
 800c934:	461a      	mov	r2, r3
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c93a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7f9 fba5 	bl	800608c <lwip_htons>
 800c942:	4603      	mov	r3, r0
 800c944:	461a      	mov	r2, r3
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7f9 fbb1 	bl	80060b8 <lwip_htonl>
 800c956:	4602      	mov	r2, r0
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c95c:	897b      	ldrh	r3, [r7, #10]
 800c95e:	089b      	lsrs	r3, r3, #2
 800c960:	b29b      	uxth	r3, r3
 800c962:	3305      	adds	r3, #5
 800c964:	b29b      	uxth	r3, r3
 800c966:	031b      	lsls	r3, r3, #12
 800c968:	b29a      	uxth	r2, r3
 800c96a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c96e:	b29b      	uxth	r3, r3
 800c970:	4313      	orrs	r3, r2
 800c972:	b29b      	uxth	r3, r3
 800c974:	4618      	mov	r0, r3
 800c976:	f7f9 fb89 	bl	800608c <lwip_htons>
 800c97a:	4603      	mov	r3, r0
 800c97c:	461a      	mov	r2, r3
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c982:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c984:	4618      	mov	r0, r3
 800c986:	f7f9 fb81 	bl	800608c <lwip_htons>
 800c98a:	4603      	mov	r3, r0
 800c98c:	461a      	mov	r2, r3
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	2200      	movs	r2, #0
 800c996:	741a      	strb	r2, [r3, #16]
 800c998:	2200      	movs	r2, #0
 800c99a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	749a      	strb	r2, [r3, #18]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c9a6:	697b      	ldr	r3, [r7, #20]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3718      	adds	r7, #24
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	080120b8 	.word	0x080120b8
 800c9b4:	08012790 	.word	0x08012790
 800c9b8:	0801210c 	.word	0x0801210c

0800c9bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c9bc:	b5b0      	push	{r4, r5, r7, lr}
 800c9be:	b08a      	sub	sp, #40	@ 0x28
 800c9c0:	af04      	add	r7, sp, #16
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	607b      	str	r3, [r7, #4]
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	817b      	strh	r3, [r7, #10]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d106      	bne.n	800c9e2 <tcp_output_alloc_header+0x26>
 800c9d4:	4b15      	ldr	r3, [pc, #84]	@ (800ca2c <tcp_output_alloc_header+0x70>)
 800c9d6:	f240 7242 	movw	r2, #1858	@ 0x742
 800c9da:	4915      	ldr	r1, [pc, #84]	@ (800ca30 <tcp_output_alloc_header+0x74>)
 800c9dc:	4815      	ldr	r0, [pc, #84]	@ (800ca34 <tcp_output_alloc_header+0x78>)
 800c9de:	f003 f8fd 	bl	800fbdc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	8adb      	ldrh	r3, [r3, #22]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	8b12      	ldrh	r2, [r2, #24]
 800c9ee:	68f9      	ldr	r1, [r7, #12]
 800c9f0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800c9f2:	893d      	ldrh	r5, [r7, #8]
 800c9f4:	897c      	ldrh	r4, [r7, #10]
 800c9f6:	9103      	str	r1, [sp, #12]
 800c9f8:	2110      	movs	r1, #16
 800c9fa:	9102      	str	r1, [sp, #8]
 800c9fc:	9201      	str	r2, [sp, #4]
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	462a      	mov	r2, r5
 800ca04:	4621      	mov	r1, r4
 800ca06:	f7ff ff67 	bl	800c8d8 <tcp_output_alloc_header_common>
 800ca0a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d006      	beq.n	800ca20 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ca1a:	441a      	add	r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800ca20:	697b      	ldr	r3, [r7, #20]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bdb0      	pop	{r4, r5, r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	080120b8 	.word	0x080120b8
 800ca30:	080127c0 	.word	0x080127c0
 800ca34:	0801210c 	.word	0x0801210c

0800ca38 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b088      	sub	sp, #32
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	60f8      	str	r0, [r7, #12]
 800ca40:	60b9      	str	r1, [r7, #8]
 800ca42:	4611      	mov	r1, r2
 800ca44:	461a      	mov	r2, r3
 800ca46:	460b      	mov	r3, r1
 800ca48:	71fb      	strb	r3, [r7, #7]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d106      	bne.n	800ca66 <tcp_output_fill_options+0x2e>
 800ca58:	4b12      	ldr	r3, [pc, #72]	@ (800caa4 <tcp_output_fill_options+0x6c>)
 800ca5a:	f240 7256 	movw	r2, #1878	@ 0x756
 800ca5e:	4912      	ldr	r1, [pc, #72]	@ (800caa8 <tcp_output_fill_options+0x70>)
 800ca60:	4812      	ldr	r0, [pc, #72]	@ (800caac <tcp_output_fill_options+0x74>)
 800ca62:	f003 f8bb 	bl	800fbdc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	3314      	adds	r3, #20
 800ca70:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ca72:	8bfb      	ldrh	r3, [r7, #30]
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	461a      	mov	r2, r3
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	f003 0304 	and.w	r3, r3, #4
 800ca80:	4413      	add	r3, r2
 800ca82:	3314      	adds	r3, #20
 800ca84:	69ba      	ldr	r2, [r7, #24]
 800ca86:	4413      	add	r3, r2
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d006      	beq.n	800ca9c <tcp_output_fill_options+0x64>
 800ca8e:	4b05      	ldr	r3, [pc, #20]	@ (800caa4 <tcp_output_fill_options+0x6c>)
 800ca90:	f240 7275 	movw	r2, #1909	@ 0x775
 800ca94:	4906      	ldr	r1, [pc, #24]	@ (800cab0 <tcp_output_fill_options+0x78>)
 800ca96:	4805      	ldr	r0, [pc, #20]	@ (800caac <tcp_output_fill_options+0x74>)
 800ca98:	f003 f8a0 	bl	800fbdc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ca9c:	bf00      	nop
 800ca9e:	3720      	adds	r7, #32
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	080120b8 	.word	0x080120b8
 800caa8:	080127e8 	.word	0x080127e8
 800caac:	0801210c 	.word	0x0801210c
 800cab0:	080126e0 	.word	0x080126e0

0800cab4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b08a      	sub	sp, #40	@ 0x28
 800cab8:	af04      	add	r7, sp, #16
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d106      	bne.n	800cad6 <tcp_output_control_segment+0x22>
 800cac8:	4b1c      	ldr	r3, [pc, #112]	@ (800cb3c <tcp_output_control_segment+0x88>)
 800caca:	f240 7287 	movw	r2, #1927	@ 0x787
 800cace:	491c      	ldr	r1, [pc, #112]	@ (800cb40 <tcp_output_control_segment+0x8c>)
 800cad0:	481c      	ldr	r0, [pc, #112]	@ (800cb44 <tcp_output_control_segment+0x90>)
 800cad2:	f003 f883 	bl	800fbdc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	6879      	ldr	r1, [r7, #4]
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f7fe ff42 	bl	800b964 <tcp_route>
 800cae0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d102      	bne.n	800caee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cae8:	23fc      	movs	r3, #252	@ 0xfc
 800caea:	75fb      	strb	r3, [r7, #23]
 800caec:	e01c      	b.n	800cb28 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d006      	beq.n	800cb02 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	7adb      	ldrb	r3, [r3, #11]
 800caf8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	7a9b      	ldrb	r3, [r3, #10]
 800cafe:	757b      	strb	r3, [r7, #21]
 800cb00:	e003      	b.n	800cb0a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cb02:	23ff      	movs	r3, #255	@ 0xff
 800cb04:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cb0a:	7dba      	ldrb	r2, [r7, #22]
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	9302      	str	r3, [sp, #8]
 800cb10:	2306      	movs	r3, #6
 800cb12:	9301      	str	r3, [sp, #4]
 800cb14:	7d7b      	ldrb	r3, [r7, #21]
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	6879      	ldr	r1, [r7, #4]
 800cb1e:	68b8      	ldr	r0, [r7, #8]
 800cb20:	f001 ff2e 	bl	800e980 <ip4_output_if>
 800cb24:	4603      	mov	r3, r0
 800cb26:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cb28:	68b8      	ldr	r0, [r7, #8]
 800cb2a:	f7fa fde9 	bl	8007700 <pbuf_free>
  return err;
 800cb2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3718      	adds	r7, #24
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	080120b8 	.word	0x080120b8
 800cb40:	08012810 	.word	0x08012810
 800cb44:	0801210c 	.word	0x0801210c

0800cb48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cb48:	b590      	push	{r4, r7, lr}
 800cb4a:	b08b      	sub	sp, #44	@ 0x2c
 800cb4c:	af04      	add	r7, sp, #16
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d106      	bne.n	800cb6a <tcp_rst+0x22>
 800cb5c:	4b1f      	ldr	r3, [pc, #124]	@ (800cbdc <tcp_rst+0x94>)
 800cb5e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800cb62:	491f      	ldr	r1, [pc, #124]	@ (800cbe0 <tcp_rst+0x98>)
 800cb64:	481f      	ldr	r0, [pc, #124]	@ (800cbe4 <tcp_rst+0x9c>)
 800cb66:	f003 f839 	bl	800fbdc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d106      	bne.n	800cb7e <tcp_rst+0x36>
 800cb70:	4b1a      	ldr	r3, [pc, #104]	@ (800cbdc <tcp_rst+0x94>)
 800cb72:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800cb76:	491c      	ldr	r1, [pc, #112]	@ (800cbe8 <tcp_rst+0xa0>)
 800cb78:	481a      	ldr	r0, [pc, #104]	@ (800cbe4 <tcp_rst+0x9c>)
 800cb7a:	f003 f82f 	bl	800fbdc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cb7e:	2300      	movs	r3, #0
 800cb80:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cb82:	f246 0308 	movw	r3, #24584	@ 0x6008
 800cb86:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cb88:	7dfb      	ldrb	r3, [r7, #23]
 800cb8a:	b29c      	uxth	r4, r3
 800cb8c:	68b8      	ldr	r0, [r7, #8]
 800cb8e:	f7f9 fa93 	bl	80060b8 <lwip_htonl>
 800cb92:	4602      	mov	r2, r0
 800cb94:	8abb      	ldrh	r3, [r7, #20]
 800cb96:	9303      	str	r3, [sp, #12]
 800cb98:	2314      	movs	r3, #20
 800cb9a:	9302      	str	r3, [sp, #8]
 800cb9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800cb9e:	9301      	str	r3, [sp, #4]
 800cba0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cba2:	9300      	str	r3, [sp, #0]
 800cba4:	4613      	mov	r3, r2
 800cba6:	2200      	movs	r2, #0
 800cba8:	4621      	mov	r1, r4
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff fe94 	bl	800c8d8 <tcp_output_alloc_header_common>
 800cbb0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00c      	beq.n	800cbd2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cbb8:	7dfb      	ldrb	r3, [r7, #23]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	6939      	ldr	r1, [r7, #16]
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7ff ff3a 	bl	800ca38 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	6939      	ldr	r1, [r7, #16]
 800cbca:	68f8      	ldr	r0, [r7, #12]
 800cbcc:	f7ff ff72 	bl	800cab4 <tcp_output_control_segment>
 800cbd0:	e000      	b.n	800cbd4 <tcp_rst+0x8c>
    return;
 800cbd2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cbd4:	371c      	adds	r7, #28
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd90      	pop	{r4, r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	080120b8 	.word	0x080120b8
 800cbe0:	0801283c 	.word	0x0801283c
 800cbe4:	0801210c 	.word	0x0801210c
 800cbe8:	08012858 	.word	0x08012858

0800cbec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cbec:	b590      	push	{r4, r7, lr}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <tcp_send_empty_ack+0x24>
 800cc02:	4b28      	ldr	r3, [pc, #160]	@ (800cca4 <tcp_send_empty_ack+0xb8>)
 800cc04:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800cc08:	4927      	ldr	r1, [pc, #156]	@ (800cca8 <tcp_send_empty_ack+0xbc>)
 800cc0a:	4828      	ldr	r0, [pc, #160]	@ (800ccac <tcp_send_empty_ack+0xc0>)
 800cc0c:	f002 ffe6 	bl	800fbdc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	f003 0304 	and.w	r3, r3, #4
 800cc1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cc1c:	7d7b      	ldrb	r3, [r7, #21]
 800cc1e:	b29c      	uxth	r4, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7f9 fa47 	bl	80060b8 <lwip_htonl>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4621      	mov	r1, r4
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f7ff fec3 	bl	800c9bc <tcp_output_alloc_header>
 800cc36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d109      	bne.n	800cc52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	8b5b      	ldrh	r3, [r3, #26]
 800cc42:	f043 0303 	orr.w	r3, r3, #3
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cc4c:	f06f 0301 	mvn.w	r3, #1
 800cc50:	e023      	b.n	800cc9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cc52:	7dbb      	ldrb	r3, [r7, #22]
 800cc54:	7dfa      	ldrb	r2, [r7, #23]
 800cc56:	6939      	ldr	r1, [r7, #16]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff feed 	bl	800ca38 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3304      	adds	r3, #4
 800cc64:	6939      	ldr	r1, [r7, #16]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7ff ff24 	bl	800cab4 <tcp_output_control_segment>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cc70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d007      	beq.n	800cc88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	8b5b      	ldrh	r3, [r3, #26]
 800cc7c:	f043 0303 	orr.w	r3, r3, #3
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	835a      	strh	r2, [r3, #26]
 800cc86:	e006      	b.n	800cc96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	8b5b      	ldrh	r3, [r3, #26]
 800cc8c:	f023 0303 	bic.w	r3, r3, #3
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cc96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	371c      	adds	r7, #28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd90      	pop	{r4, r7, pc}
 800cca2:	bf00      	nop
 800cca4:	080120b8 	.word	0x080120b8
 800cca8:	08012874 	.word	0x08012874
 800ccac:	0801210c 	.word	0x0801210c

0800ccb0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ccb0:	b590      	push	{r4, r7, lr}
 800ccb2:	b087      	sub	sp, #28
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ccb8:	2300      	movs	r3, #0
 800ccba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d106      	bne.n	800ccd0 <tcp_keepalive+0x20>
 800ccc2:	4b18      	ldr	r3, [pc, #96]	@ (800cd24 <tcp_keepalive+0x74>)
 800ccc4:	f640 0224 	movw	r2, #2084	@ 0x824
 800ccc8:	4917      	ldr	r1, [pc, #92]	@ (800cd28 <tcp_keepalive+0x78>)
 800ccca:	4818      	ldr	r0, [pc, #96]	@ (800cd2c <tcp_keepalive+0x7c>)
 800cccc:	f002 ff86 	bl	800fbdc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ccd0:	7dfb      	ldrb	r3, [r7, #23]
 800ccd2:	b29c      	uxth	r4, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7f9 f9ec 	bl	80060b8 <lwip_htonl>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2200      	movs	r2, #0
 800cce4:	4621      	mov	r1, r4
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fe68 	bl	800c9bc <tcp_output_alloc_header>
 800ccec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ccf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ccf8:	e010      	b.n	800cd1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ccfa:	7dfb      	ldrb	r3, [r7, #23]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	6939      	ldr	r1, [r7, #16]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7ff fe99 	bl	800ca38 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	6939      	ldr	r1, [r7, #16]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fed0 	bl	800cab4 <tcp_output_control_segment>
 800cd14:	4603      	mov	r3, r0
 800cd16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cd18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	371c      	adds	r7, #28
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd90      	pop	{r4, r7, pc}
 800cd24:	080120b8 	.word	0x080120b8
 800cd28:	08012894 	.word	0x08012894
 800cd2c:	0801210c 	.word	0x0801210c

0800cd30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cd30:	b590      	push	{r4, r7, lr}
 800cd32:	b08b      	sub	sp, #44	@ 0x2c
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d106      	bne.n	800cd52 <tcp_zero_window_probe+0x22>
 800cd44:	4b4c      	ldr	r3, [pc, #304]	@ (800ce78 <tcp_zero_window_probe+0x148>)
 800cd46:	f640 024f 	movw	r2, #2127	@ 0x84f
 800cd4a:	494c      	ldr	r1, [pc, #304]	@ (800ce7c <tcp_zero_window_probe+0x14c>)
 800cd4c:	484c      	ldr	r0, [pc, #304]	@ (800ce80 <tcp_zero_window_probe+0x150>)
 800cd4e:	f002 ff45 	bl	800fbdc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d101      	bne.n	800cd62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	e086      	b.n	800ce70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800cd68:	2bff      	cmp	r3, #255	@ 0xff
 800cd6a:	d007      	beq.n	800cd7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800cd72:	3301      	adds	r3, #1
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cd7c:	6a3b      	ldr	r3, [r7, #32]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	899b      	ldrh	r3, [r3, #12]
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7f9 f981 	bl	800608c <lwip_htons>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d005      	beq.n	800cda2 <tcp_zero_window_probe+0x72>
 800cd96:	6a3b      	ldr	r3, [r7, #32]
 800cd98:	891b      	ldrh	r3, [r3, #8]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <tcp_zero_window_probe+0x72>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <tcp_zero_window_probe+0x74>
 800cda2:	2300      	movs	r3, #0
 800cda4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cda6:	7ffb      	ldrb	r3, [r7, #31]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bf0c      	ite	eq
 800cdac:	2301      	moveq	r3, #1
 800cdae:	2300      	movne	r3, #0
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cdb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdb8:	b299      	uxth	r1, r3
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	8bba      	ldrh	r2, [r7, #28]
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff fdfa 	bl	800c9bc <tcp_output_alloc_header>
 800cdc8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d102      	bne.n	800cdd6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800cdd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdd4:	e04c      	b.n	800ce70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800cddc:	7ffb      	ldrb	r3, [r7, #31]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d011      	beq.n	800ce06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	899b      	ldrh	r3, [r3, #12]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	b21b      	sxth	r3, r3
 800cdea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cdee:	b21c      	sxth	r4, r3
 800cdf0:	2011      	movs	r0, #17
 800cdf2:	f7f9 f94b 	bl	800608c <lwip_htons>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	b21b      	sxth	r3, r3
 800cdfa:	4323      	orrs	r3, r4
 800cdfc:	b21b      	sxth	r3, r3
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	819a      	strh	r2, [r3, #12]
 800ce04:	e010      	b.n	800ce28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	3314      	adds	r3, #20
 800ce0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	6858      	ldr	r0, [r3, #4]
 800ce12:	6a3b      	ldr	r3, [r7, #32]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	891a      	ldrh	r2, [r3, #8]
 800ce18:	6a3b      	ldr	r3, [r7, #32]
 800ce1a:	891b      	ldrh	r3, [r3, #8]
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	2201      	movs	r2, #1
 800ce22:	6939      	ldr	r1, [r7, #16]
 800ce24:	f7fa fe56 	bl	8007ad4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7f9 f942 	bl	80060b8 <lwip_htonl>
 800ce34:	4603      	mov	r3, r0
 800ce36:	3301      	adds	r3, #1
 800ce38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da02      	bge.n	800ce4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ce4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce50:	2200      	movs	r2, #0
 800ce52:	69b9      	ldr	r1, [r7, #24]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fdef 	bl	800ca38 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3304      	adds	r3, #4
 800ce60:	69b9      	ldr	r1, [r7, #24]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff fe26 	bl	800cab4 <tcp_output_control_segment>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ce6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	372c      	adds	r7, #44	@ 0x2c
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd90      	pop	{r4, r7, pc}
 800ce78:	080120b8 	.word	0x080120b8
 800ce7c:	080128b0 	.word	0x080128b0
 800ce80:	0801210c 	.word	0x0801210c

0800ce84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ce8c:	f7fa ff10 	bl	8007cb0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ce90:	4b0a      	ldr	r3, [pc, #40]	@ (800cebc <tcpip_tcp_timer+0x38>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d103      	bne.n	800cea0 <tcpip_tcp_timer+0x1c>
 800ce98:	4b09      	ldr	r3, [pc, #36]	@ (800cec0 <tcpip_tcp_timer+0x3c>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d005      	beq.n	800ceac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cea0:	2200      	movs	r2, #0
 800cea2:	4908      	ldr	r1, [pc, #32]	@ (800cec4 <tcpip_tcp_timer+0x40>)
 800cea4:	20fa      	movs	r0, #250	@ 0xfa
 800cea6:	f000 f8f3 	bl	800d090 <sys_timeout>
 800ceaa:	e003      	b.n	800ceb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ceac:	4b06      	ldr	r3, [pc, #24]	@ (800cec8 <tcpip_tcp_timer+0x44>)
 800ceae:	2200      	movs	r2, #0
 800ceb0:	601a      	str	r2, [r3, #0]
  }
}
 800ceb2:	bf00      	nop
 800ceb4:	bf00      	nop
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	200081c0 	.word	0x200081c0
 800cec0:	200081c4 	.word	0x200081c4
 800cec4:	0800ce85 	.word	0x0800ce85
 800cec8:	2000820c 	.word	0x2000820c

0800cecc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ced0:	4b0a      	ldr	r3, [pc, #40]	@ (800cefc <tcp_timer_needed+0x30>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d10f      	bne.n	800cef8 <tcp_timer_needed+0x2c>
 800ced8:	4b09      	ldr	r3, [pc, #36]	@ (800cf00 <tcp_timer_needed+0x34>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d103      	bne.n	800cee8 <tcp_timer_needed+0x1c>
 800cee0:	4b08      	ldr	r3, [pc, #32]	@ (800cf04 <tcp_timer_needed+0x38>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d007      	beq.n	800cef8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cee8:	4b04      	ldr	r3, [pc, #16]	@ (800cefc <tcp_timer_needed+0x30>)
 800ceea:	2201      	movs	r2, #1
 800ceec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ceee:	2200      	movs	r2, #0
 800cef0:	4905      	ldr	r1, [pc, #20]	@ (800cf08 <tcp_timer_needed+0x3c>)
 800cef2:	20fa      	movs	r0, #250	@ 0xfa
 800cef4:	f000 f8cc 	bl	800d090 <sys_timeout>
  }
}
 800cef8:	bf00      	nop
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	2000820c 	.word	0x2000820c
 800cf00:	200081c0 	.word	0x200081c0
 800cf04:	200081c4 	.word	0x200081c4
 800cf08:	0800ce85 	.word	0x0800ce85

0800cf0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cf18:	2006      	movs	r0, #6
 800cf1a:	f7f9 fd2b 	bl	8006974 <memp_malloc>
 800cf1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d109      	bne.n	800cf3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d151      	bne.n	800cfd0 <sys_timeout_abs+0xc4>
 800cf2c:	4b2a      	ldr	r3, [pc, #168]	@ (800cfd8 <sys_timeout_abs+0xcc>)
 800cf2e:	22be      	movs	r2, #190	@ 0xbe
 800cf30:	492a      	ldr	r1, [pc, #168]	@ (800cfdc <sys_timeout_abs+0xd0>)
 800cf32:	482b      	ldr	r0, [pc, #172]	@ (800cfe0 <sys_timeout_abs+0xd4>)
 800cf34:	f002 fe52 	bl	800fbdc <iprintf>
    return;
 800cf38:	e04a      	b.n	800cfd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cf52:	4b24      	ldr	r3, [pc, #144]	@ (800cfe4 <sys_timeout_abs+0xd8>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d103      	bne.n	800cf62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800cf5a:	4a22      	ldr	r2, [pc, #136]	@ (800cfe4 <sys_timeout_abs+0xd8>)
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	6013      	str	r3, [r2, #0]
    return;
 800cf60:	e037      	b.n	800cfd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	4b1f      	ldr	r3, [pc, #124]	@ (800cfe4 <sys_timeout_abs+0xd8>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	0fdb      	lsrs	r3, r3, #31
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d007      	beq.n	800cf8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800cf7a:	4b1a      	ldr	r3, [pc, #104]	@ (800cfe4 <sys_timeout_abs+0xd8>)
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cf82:	4a18      	ldr	r2, [pc, #96]	@ (800cfe4 <sys_timeout_abs+0xd8>)
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	6013      	str	r3, [r2, #0]
 800cf88:	e023      	b.n	800cfd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cf8a:	4b16      	ldr	r3, [pc, #88]	@ (800cfe4 <sys_timeout_abs+0xd8>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	617b      	str	r3, [r7, #20]
 800cf90:	e01a      	b.n	800cfc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d00b      	beq.n	800cfb2 <sys_timeout_abs+0xa6>
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	685a      	ldr	r2, [r3, #4]
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	0fdb      	lsrs	r3, r3, #31
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d007      	beq.n	800cfc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	693a      	ldr	r2, [r7, #16]
 800cfbe:	601a      	str	r2, [r3, #0]
        break;
 800cfc0:	e007      	b.n	800cfd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	617b      	str	r3, [r7, #20]
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1e1      	bne.n	800cf92 <sys_timeout_abs+0x86>
 800cfce:	e000      	b.n	800cfd2 <sys_timeout_abs+0xc6>
    return;
 800cfd0:	bf00      	nop
      }
    }
  }
}
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	080128d4 	.word	0x080128d4
 800cfdc:	08012908 	.word	0x08012908
 800cfe0:	08012948 	.word	0x08012948
 800cfe4:	20008204 	.word	0x20008204

0800cfe8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	4798      	blx	r3

  now = sys_now();
 800cffa:	f7f8 fe7d 	bl	8005cf8 <sys_now>
 800cffe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	4b0f      	ldr	r3, [pc, #60]	@ (800d044 <lwip_cyclic_timer+0x5c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4413      	add	r3, r2
 800d00a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	0fdb      	lsrs	r3, r3, #31
 800d014:	f003 0301 	and.w	r3, r3, #1
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d009      	beq.n	800d032 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	4413      	add	r3, r2
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	4907      	ldr	r1, [pc, #28]	@ (800d048 <lwip_cyclic_timer+0x60>)
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7ff ff6e 	bl	800cf0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d030:	e004      	b.n	800d03c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	4904      	ldr	r1, [pc, #16]	@ (800d048 <lwip_cyclic_timer+0x60>)
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f7ff ff68 	bl	800cf0c <sys_timeout_abs>
}
 800d03c:	bf00      	nop
 800d03e:	3718      	adds	r7, #24
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	20008208 	.word	0x20008208
 800d048:	0800cfe9 	.word	0x0800cfe9

0800d04c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d052:	2301      	movs	r3, #1
 800d054:	607b      	str	r3, [r7, #4]
 800d056:	e00e      	b.n	800d076 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d058:	4a0b      	ldr	r2, [pc, #44]	@ (800d088 <sys_timeouts_init+0x3c>)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	00db      	lsls	r3, r3, #3
 800d064:	4a08      	ldr	r2, [pc, #32]	@ (800d088 <sys_timeouts_init+0x3c>)
 800d066:	4413      	add	r3, r2
 800d068:	461a      	mov	r2, r3
 800d06a:	4908      	ldr	r1, [pc, #32]	@ (800d08c <sys_timeouts_init+0x40>)
 800d06c:	f000 f810 	bl	800d090 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	3301      	adds	r3, #1
 800d074:	607b      	str	r3, [r7, #4]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d9ed      	bls.n	800d058 <sys_timeouts_init+0xc>
  }
}
 800d07c:	bf00      	nop
 800d07e:	bf00      	nop
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	080134c0 	.word	0x080134c0
 800d08c:	0800cfe9 	.word	0x0800cfe9

0800d090 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	60f8      	str	r0, [r7, #12]
 800d098:	60b9      	str	r1, [r7, #8]
 800d09a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0a2:	d306      	bcc.n	800d0b2 <sys_timeout+0x22>
 800d0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0d0 <sys_timeout+0x40>)
 800d0a6:	f240 1229 	movw	r2, #297	@ 0x129
 800d0aa:	490a      	ldr	r1, [pc, #40]	@ (800d0d4 <sys_timeout+0x44>)
 800d0ac:	480a      	ldr	r0, [pc, #40]	@ (800d0d8 <sys_timeout+0x48>)
 800d0ae:	f002 fd95 	bl	800fbdc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d0b2:	f7f8 fe21 	bl	8005cf8 <sys_now>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	68b9      	ldr	r1, [r7, #8]
 800d0c2:	6978      	ldr	r0, [r7, #20]
 800d0c4:	f7ff ff22 	bl	800cf0c <sys_timeout_abs>
#endif
}
 800d0c8:	bf00      	nop
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	080128d4 	.word	0x080128d4
 800d0d4:	08012970 	.word	0x08012970
 800d0d8:	08012948 	.word	0x08012948

0800d0dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d0e0:	f002 fc7c 	bl	800f9dc <rand>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	4b01      	ldr	r3, [pc, #4]	@ (800d0fc <udp_init+0x20>)
 800d0f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d0f8:	bf00      	nop
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	20000028 	.word	0x20000028

0800d100 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	4613      	mov	r3, r2
 800d10c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d105      	bne.n	800d120 <udp_input_local_match+0x20>
 800d114:	4b27      	ldr	r3, [pc, #156]	@ (800d1b4 <udp_input_local_match+0xb4>)
 800d116:	2287      	movs	r2, #135	@ 0x87
 800d118:	4927      	ldr	r1, [pc, #156]	@ (800d1b8 <udp_input_local_match+0xb8>)
 800d11a:	4828      	ldr	r0, [pc, #160]	@ (800d1bc <udp_input_local_match+0xbc>)
 800d11c:	f002 fd5e 	bl	800fbdc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d105      	bne.n	800d132 <udp_input_local_match+0x32>
 800d126:	4b23      	ldr	r3, [pc, #140]	@ (800d1b4 <udp_input_local_match+0xb4>)
 800d128:	2288      	movs	r2, #136	@ 0x88
 800d12a:	4925      	ldr	r1, [pc, #148]	@ (800d1c0 <udp_input_local_match+0xc0>)
 800d12c:	4823      	ldr	r0, [pc, #140]	@ (800d1bc <udp_input_local_match+0xbc>)
 800d12e:	f002 fd55 	bl	800fbdc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	7a1b      	ldrb	r3, [r3, #8]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00b      	beq.n	800d152 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	7a1a      	ldrb	r2, [r3, #8]
 800d13e:	4b21      	ldr	r3, [pc, #132]	@ (800d1c4 <udp_input_local_match+0xc4>)
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d146:	3301      	adds	r3, #1
 800d148:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d001      	beq.n	800d152 <udp_input_local_match+0x52>
    return 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	e02b      	b.n	800d1aa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d152:	79fb      	ldrb	r3, [r7, #7]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d018      	beq.n	800d18a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d013      	beq.n	800d186 <udp_input_local_match+0x86>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00f      	beq.n	800d186 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d166:	4b17      	ldr	r3, [pc, #92]	@ (800d1c4 <udp_input_local_match+0xc4>)
 800d168:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d16a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d16e:	d00a      	beq.n	800d186 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	4b13      	ldr	r3, [pc, #76]	@ (800d1c4 <udp_input_local_match+0xc4>)
 800d176:	695b      	ldr	r3, [r3, #20]
 800d178:	405a      	eors	r2, r3
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	3308      	adds	r3, #8
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d182:	2b00      	cmp	r3, #0
 800d184:	d110      	bne.n	800d1a8 <udp_input_local_match+0xa8>
          return 1;
 800d186:	2301      	movs	r3, #1
 800d188:	e00f      	b.n	800d1aa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d009      	beq.n	800d1a4 <udp_input_local_match+0xa4>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d005      	beq.n	800d1a4 <udp_input_local_match+0xa4>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	4b09      	ldr	r3, [pc, #36]	@ (800d1c4 <udp_input_local_match+0xc4>)
 800d19e:	695b      	ldr	r3, [r3, #20]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d101      	bne.n	800d1a8 <udp_input_local_match+0xa8>
        return 1;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e000      	b.n	800d1aa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	080129bc 	.word	0x080129bc
 800d1b8:	080129ec 	.word	0x080129ec
 800d1bc:	08012a10 	.word	0x08012a10
 800d1c0:	08012a38 	.word	0x08012a38
 800d1c4:	20005298 	.word	0x20005298

0800d1c8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d1c8:	b590      	push	{r4, r7, lr}
 800d1ca:	b08d      	sub	sp, #52	@ 0x34
 800d1cc:	af02      	add	r7, sp, #8
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d105      	bne.n	800d1e8 <udp_input+0x20>
 800d1dc:	4b7c      	ldr	r3, [pc, #496]	@ (800d3d0 <udp_input+0x208>)
 800d1de:	22cf      	movs	r2, #207	@ 0xcf
 800d1e0:	497c      	ldr	r1, [pc, #496]	@ (800d3d4 <udp_input+0x20c>)
 800d1e2:	487d      	ldr	r0, [pc, #500]	@ (800d3d8 <udp_input+0x210>)
 800d1e4:	f002 fcfa 	bl	800fbdc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d105      	bne.n	800d1fa <udp_input+0x32>
 800d1ee:	4b78      	ldr	r3, [pc, #480]	@ (800d3d0 <udp_input+0x208>)
 800d1f0:	22d0      	movs	r2, #208	@ 0xd0
 800d1f2:	497a      	ldr	r1, [pc, #488]	@ (800d3dc <udp_input+0x214>)
 800d1f4:	4878      	ldr	r0, [pc, #480]	@ (800d3d8 <udp_input+0x210>)
 800d1f6:	f002 fcf1 	bl	800fbdc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	895b      	ldrh	r3, [r3, #10]
 800d1fe:	2b07      	cmp	r3, #7
 800d200:	d803      	bhi.n	800d20a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7fa fa7c 	bl	8007700 <pbuf_free>
    goto end;
 800d208:	e0de      	b.n	800d3c8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d210:	4b73      	ldr	r3, [pc, #460]	@ (800d3e0 <udp_input+0x218>)
 800d212:	695b      	ldr	r3, [r3, #20]
 800d214:	4a72      	ldr	r2, [pc, #456]	@ (800d3e0 <udp_input+0x218>)
 800d216:	6812      	ldr	r2, [r2, #0]
 800d218:	4611      	mov	r1, r2
 800d21a:	4618      	mov	r0, r3
 800d21c:	f001 fc88 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 800d220:	4603      	mov	r3, r0
 800d222:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7f8 ff2e 	bl	800608c <lwip_htons>
 800d230:	4603      	mov	r3, r0
 800d232:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	885b      	ldrh	r3, [r3, #2]
 800d238:	b29b      	uxth	r3, r3
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7f8 ff26 	bl	800608c <lwip_htons>
 800d240:	4603      	mov	r3, r0
 800d242:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d244:	2300      	movs	r3, #0
 800d246:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800d248:	2300      	movs	r3, #0
 800d24a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d24c:	2300      	movs	r3, #0
 800d24e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d250:	4b64      	ldr	r3, [pc, #400]	@ (800d3e4 <udp_input+0x21c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	627b      	str	r3, [r7, #36]	@ 0x24
 800d256:	e054      	b.n	800d302 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25a:	8a5b      	ldrh	r3, [r3, #18]
 800d25c:	89fa      	ldrh	r2, [r7, #14]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d14a      	bne.n	800d2f8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d262:	7cfb      	ldrb	r3, [r7, #19]
 800d264:	461a      	mov	r2, r3
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d26a:	f7ff ff49 	bl	800d100 <udp_input_local_match>
 800d26e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d270:	2b00      	cmp	r3, #0
 800d272:	d041      	beq.n	800d2f8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d276:	7c1b      	ldrb	r3, [r3, #16]
 800d278:	f003 0304 	and.w	r3, r3, #4
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d11d      	bne.n	800d2bc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	61fb      	str	r3, [r7, #28]
 800d28a:	e017      	b.n	800d2bc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d28c:	7cfb      	ldrb	r3, [r7, #19]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d014      	beq.n	800d2bc <udp_input+0xf4>
 800d292:	4b53      	ldr	r3, [pc, #332]	@ (800d3e0 <udp_input+0x218>)
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d29a:	d10f      	bne.n	800d2bc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	3304      	adds	r3, #4
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d008      	beq.n	800d2bc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d101      	bne.n	800d2bc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2be:	8a9b      	ldrh	r3, [r3, #20]
 800d2c0:	8a3a      	ldrh	r2, [r7, #16]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d118      	bne.n	800d2f8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d005      	beq.n	800d2da <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d0:	685a      	ldr	r2, [r3, #4]
 800d2d2:	4b43      	ldr	r3, [pc, #268]	@ (800d3e0 <udp_input+0x218>)
 800d2d4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d10e      	bne.n	800d2f8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d014      	beq.n	800d30a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e2:	68da      	ldr	r2, [r3, #12]
 800d2e4:	6a3b      	ldr	r3, [r7, #32]
 800d2e6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d2e8:	4b3e      	ldr	r3, [pc, #248]	@ (800d3e4 <udp_input+0x21c>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d2f0:	4a3c      	ldr	r2, [pc, #240]	@ (800d3e4 <udp_input+0x21c>)
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d2f6:	e008      	b.n	800d30a <udp_input+0x142>
      }
    }

    prev = pcb;
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	627b      	str	r3, [r7, #36]	@ 0x24
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1a7      	bne.n	800d258 <udp_input+0x90>
 800d308:	e000      	b.n	800d30c <udp_input+0x144>
        break;
 800d30a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <udp_input+0x14e>
    pcb = uncon_pcb;
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <udp_input+0x15a>
    for_us = 1;
 800d31c:	2301      	movs	r3, #1
 800d31e:	76fb      	strb	r3, [r7, #27]
 800d320:	e00a      	b.n	800d338 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	3304      	adds	r3, #4
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	4b2d      	ldr	r3, [pc, #180]	@ (800d3e0 <udp_input+0x218>)
 800d32a:	695b      	ldr	r3, [r3, #20]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	bf0c      	ite	eq
 800d330:	2301      	moveq	r3, #1
 800d332:	2300      	movne	r3, #0
 800d334:	b2db      	uxtb	r3, r3
 800d336:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d338:	7efb      	ldrb	r3, [r7, #27]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d041      	beq.n	800d3c2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d33e:	2108      	movs	r1, #8
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7fa f957 	bl	80075f4 <pbuf_remove_header>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00a      	beq.n	800d362 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d34c:	4b20      	ldr	r3, [pc, #128]	@ (800d3d0 <udp_input+0x208>)
 800d34e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800d352:	4925      	ldr	r1, [pc, #148]	@ (800d3e8 <udp_input+0x220>)
 800d354:	4820      	ldr	r0, [pc, #128]	@ (800d3d8 <udp_input+0x210>)
 800d356:	f002 fc41 	bl	800fbdc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7fa f9d0 	bl	8007700 <pbuf_free>
      goto end;
 800d360:	e032      	b.n	800d3c8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d364:	2b00      	cmp	r3, #0
 800d366:	d012      	beq.n	800d38e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d00a      	beq.n	800d386 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d372:	699c      	ldr	r4, [r3, #24]
 800d374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d376:	69d8      	ldr	r0, [r3, #28]
 800d378:	8a3b      	ldrh	r3, [r7, #16]
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	4b1b      	ldr	r3, [pc, #108]	@ (800d3ec <udp_input+0x224>)
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d382:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d384:	e021      	b.n	800d3ca <udp_input+0x202>
        pbuf_free(p);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7fa f9ba 	bl	8007700 <pbuf_free>
        goto end;
 800d38c:	e01c      	b.n	800d3c8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d38e:	7cfb      	ldrb	r3, [r7, #19]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d112      	bne.n	800d3ba <udp_input+0x1f2>
 800d394:	4b12      	ldr	r3, [pc, #72]	@ (800d3e0 <udp_input+0x218>)
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d39c:	2be0      	cmp	r3, #224	@ 0xe0
 800d39e:	d00c      	beq.n	800d3ba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d3a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d3e0 <udp_input+0x218>)
 800d3a2:	899b      	ldrh	r3, [r3, #12]
 800d3a4:	3308      	adds	r3, #8
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	b21b      	sxth	r3, r3
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7fa f994 	bl	80076da <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d3b2:	2103      	movs	r1, #3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f001 f89b 	bl	800e4f0 <icmp_dest_unreach>
      pbuf_free(p);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f7fa f9a0 	bl	8007700 <pbuf_free>
  return;
 800d3c0:	e003      	b.n	800d3ca <udp_input+0x202>
    pbuf_free(p);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f7fa f99c 	bl	8007700 <pbuf_free>
  return;
 800d3c8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d3ca:	372c      	adds	r7, #44	@ 0x2c
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd90      	pop	{r4, r7, pc}
 800d3d0:	080129bc 	.word	0x080129bc
 800d3d4:	08012a60 	.word	0x08012a60
 800d3d8:	08012a10 	.word	0x08012a10
 800d3dc:	08012a78 	.word	0x08012a78
 800d3e0:	20005298 	.word	0x20005298
 800d3e4:	20008210 	.word	0x20008210
 800d3e8:	08012a94 	.word	0x08012a94
 800d3ec:	200052a8 	.word	0x200052a8

0800d3f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d01e      	beq.n	800d43e <udp_netif_ip_addr_changed+0x4e>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01a      	beq.n	800d43e <udp_netif_ip_addr_changed+0x4e>
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d017      	beq.n	800d43e <udp_netif_ip_addr_changed+0x4e>
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d013      	beq.n	800d43e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d416:	4b0d      	ldr	r3, [pc, #52]	@ (800d44c <udp_netif_ip_addr_changed+0x5c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	60fb      	str	r3, [r7, #12]
 800d41c:	e00c      	b.n	800d438 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	429a      	cmp	r2, r3
 800d428:	d103      	bne.n	800d432 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	60fb      	str	r3, [r7, #12]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1ef      	bne.n	800d41e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d43e:	bf00      	nop
 800d440:	3714      	adds	r7, #20
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	20008210 	.word	0x20008210

0800d450 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d458:	4915      	ldr	r1, [pc, #84]	@ (800d4b0 <etharp_free_entry+0x60>)
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	4613      	mov	r3, r2
 800d45e:	005b      	lsls	r3, r3, #1
 800d460:	4413      	add	r3, r2
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	440b      	add	r3, r1
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d013      	beq.n	800d494 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d46c:	4910      	ldr	r1, [pc, #64]	@ (800d4b0 <etharp_free_entry+0x60>)
 800d46e:	687a      	ldr	r2, [r7, #4]
 800d470:	4613      	mov	r3, r2
 800d472:	005b      	lsls	r3, r3, #1
 800d474:	4413      	add	r3, r2
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	440b      	add	r3, r1
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fa f93f 	bl	8007700 <pbuf_free>
    arp_table[i].q = NULL;
 800d482:	490b      	ldr	r1, [pc, #44]	@ (800d4b0 <etharp_free_entry+0x60>)
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	4613      	mov	r3, r2
 800d488:	005b      	lsls	r3, r3, #1
 800d48a:	4413      	add	r3, r2
 800d48c:	00db      	lsls	r3, r3, #3
 800d48e:	440b      	add	r3, r1
 800d490:	2200      	movs	r2, #0
 800d492:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d494:	4906      	ldr	r1, [pc, #24]	@ (800d4b0 <etharp_free_entry+0x60>)
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	4613      	mov	r3, r2
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	4413      	add	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	440b      	add	r3, r1
 800d4a2:	3314      	adds	r3, #20
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d4a8:	bf00      	nop
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	20008214 	.word	0x20008214

0800d4b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	607b      	str	r3, [r7, #4]
 800d4be:	e096      	b.n	800d5ee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d4c0:	494f      	ldr	r1, [pc, #316]	@ (800d600 <etharp_tmr+0x14c>)
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	4413      	add	r3, r2
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	440b      	add	r3, r1
 800d4ce:	3314      	adds	r3, #20
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 8086 	beq.w	800d5e8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d4dc:	4948      	ldr	r1, [pc, #288]	@ (800d600 <etharp_tmr+0x14c>)
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	4413      	add	r3, r2
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	440b      	add	r3, r1
 800d4ea:	3312      	adds	r3, #18
 800d4ec:	881b      	ldrh	r3, [r3, #0]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	b298      	uxth	r0, r3
 800d4f2:	4943      	ldr	r1, [pc, #268]	@ (800d600 <etharp_tmr+0x14c>)
 800d4f4:	687a      	ldr	r2, [r7, #4]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	4413      	add	r3, r2
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	440b      	add	r3, r1
 800d500:	3312      	adds	r3, #18
 800d502:	4602      	mov	r2, r0
 800d504:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d506:	493e      	ldr	r1, [pc, #248]	@ (800d600 <etharp_tmr+0x14c>)
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	4613      	mov	r3, r2
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	4413      	add	r3, r2
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	440b      	add	r3, r1
 800d514:	3312      	adds	r3, #18
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800d51c:	d215      	bcs.n	800d54a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d51e:	4938      	ldr	r1, [pc, #224]	@ (800d600 <etharp_tmr+0x14c>)
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	4613      	mov	r3, r2
 800d524:	005b      	lsls	r3, r3, #1
 800d526:	4413      	add	r3, r2
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	440b      	add	r3, r1
 800d52c:	3314      	adds	r3, #20
 800d52e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d530:	2b01      	cmp	r3, #1
 800d532:	d10e      	bne.n	800d552 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d534:	4932      	ldr	r1, [pc, #200]	@ (800d600 <etharp_tmr+0x14c>)
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	4613      	mov	r3, r2
 800d53a:	005b      	lsls	r3, r3, #1
 800d53c:	4413      	add	r3, r2
 800d53e:	00db      	lsls	r3, r3, #3
 800d540:	440b      	add	r3, r1
 800d542:	3312      	adds	r3, #18
 800d544:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d546:	2b04      	cmp	r3, #4
 800d548:	d903      	bls.n	800d552 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff ff80 	bl	800d450 <etharp_free_entry>
 800d550:	e04a      	b.n	800d5e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d552:	492b      	ldr	r1, [pc, #172]	@ (800d600 <etharp_tmr+0x14c>)
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	4613      	mov	r3, r2
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	4413      	add	r3, r2
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	440b      	add	r3, r1
 800d560:	3314      	adds	r3, #20
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2b03      	cmp	r3, #3
 800d566:	d10a      	bne.n	800d57e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d568:	4925      	ldr	r1, [pc, #148]	@ (800d600 <etharp_tmr+0x14c>)
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	4613      	mov	r3, r2
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	4413      	add	r3, r2
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	440b      	add	r3, r1
 800d576:	3314      	adds	r3, #20
 800d578:	2204      	movs	r2, #4
 800d57a:	701a      	strb	r2, [r3, #0]
 800d57c:	e034      	b.n	800d5e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d57e:	4920      	ldr	r1, [pc, #128]	@ (800d600 <etharp_tmr+0x14c>)
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	4613      	mov	r3, r2
 800d584:	005b      	lsls	r3, r3, #1
 800d586:	4413      	add	r3, r2
 800d588:	00db      	lsls	r3, r3, #3
 800d58a:	440b      	add	r3, r1
 800d58c:	3314      	adds	r3, #20
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b04      	cmp	r3, #4
 800d592:	d10a      	bne.n	800d5aa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d594:	491a      	ldr	r1, [pc, #104]	@ (800d600 <etharp_tmr+0x14c>)
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4613      	mov	r3, r2
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	4413      	add	r3, r2
 800d59e:	00db      	lsls	r3, r3, #3
 800d5a0:	440b      	add	r3, r1
 800d5a2:	3314      	adds	r3, #20
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	701a      	strb	r2, [r3, #0]
 800d5a8:	e01e      	b.n	800d5e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d5aa:	4915      	ldr	r1, [pc, #84]	@ (800d600 <etharp_tmr+0x14c>)
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	005b      	lsls	r3, r3, #1
 800d5b2:	4413      	add	r3, r2
 800d5b4:	00db      	lsls	r3, r3, #3
 800d5b6:	440b      	add	r3, r1
 800d5b8:	3314      	adds	r3, #20
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d113      	bne.n	800d5e8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d5c0:	490f      	ldr	r1, [pc, #60]	@ (800d600 <etharp_tmr+0x14c>)
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	005b      	lsls	r3, r3, #1
 800d5c8:	4413      	add	r3, r2
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	440b      	add	r3, r1
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	6818      	ldr	r0, [r3, #0]
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	4413      	add	r3, r2
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	4a08      	ldr	r2, [pc, #32]	@ (800d600 <etharp_tmr+0x14c>)
 800d5de:	4413      	add	r3, r2
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	f000 fe6e 	bl	800e2c4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	607b      	str	r3, [r7, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b09      	cmp	r3, #9
 800d5f2:	f77f af65 	ble.w	800d4c0 <etharp_tmr+0xc>
      }
    }
  }
}
 800d5f6:	bf00      	nop
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	20008214 	.word	0x20008214

0800d604 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b08a      	sub	sp, #40	@ 0x28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	460b      	mov	r3, r1
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d612:	230a      	movs	r3, #10
 800d614:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d616:	230a      	movs	r3, #10
 800d618:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d61a:	230a      	movs	r3, #10
 800d61c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d622:	230a      	movs	r3, #10
 800d624:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d626:	2300      	movs	r3, #0
 800d628:	83bb      	strh	r3, [r7, #28]
 800d62a:	2300      	movs	r3, #0
 800d62c:	837b      	strh	r3, [r7, #26]
 800d62e:	2300      	movs	r3, #0
 800d630:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d632:	2300      	movs	r3, #0
 800d634:	843b      	strh	r3, [r7, #32]
 800d636:	e0ae      	b.n	800d796 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d638:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d63c:	49a6      	ldr	r1, [pc, #664]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d63e:	4613      	mov	r3, r2
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	4413      	add	r3, r2
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	440b      	add	r3, r1
 800d648:	3314      	adds	r3, #20
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d64e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d652:	2b0a      	cmp	r3, #10
 800d654:	d105      	bne.n	800d662 <etharp_find_entry+0x5e>
 800d656:	7dfb      	ldrb	r3, [r7, #23]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d102      	bne.n	800d662 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d65c:	8c3b      	ldrh	r3, [r7, #32]
 800d65e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d660:	e095      	b.n	800d78e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 8092 	beq.w	800d78e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d66a:	7dfb      	ldrb	r3, [r7, #23]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d009      	beq.n	800d684 <etharp_find_entry+0x80>
 800d670:	7dfb      	ldrb	r3, [r7, #23]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d806      	bhi.n	800d684 <etharp_find_entry+0x80>
 800d676:	4b99      	ldr	r3, [pc, #612]	@ (800d8dc <etharp_find_entry+0x2d8>)
 800d678:	f240 1223 	movw	r2, #291	@ 0x123
 800d67c:	4998      	ldr	r1, [pc, #608]	@ (800d8e0 <etharp_find_entry+0x2dc>)
 800d67e:	4899      	ldr	r0, [pc, #612]	@ (800d8e4 <etharp_find_entry+0x2e0>)
 800d680:	f002 faac 	bl	800fbdc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d020      	beq.n	800d6cc <etharp_find_entry+0xc8>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6819      	ldr	r1, [r3, #0]
 800d68e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d692:	4891      	ldr	r0, [pc, #580]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d694:	4613      	mov	r3, r2
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	4413      	add	r3, r2
 800d69a:	00db      	lsls	r3, r3, #3
 800d69c:	4403      	add	r3, r0
 800d69e:	3304      	adds	r3, #4
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4299      	cmp	r1, r3
 800d6a4:	d112      	bne.n	800d6cc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00c      	beq.n	800d6c6 <etharp_find_entry+0xc2>
 800d6ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6b0:	4989      	ldr	r1, [pc, #548]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	4413      	add	r3, r2
 800d6b8:	00db      	lsls	r3, r3, #3
 800d6ba:	440b      	add	r3, r1
 800d6bc:	3308      	adds	r3, #8
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d102      	bne.n	800d6cc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d6c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d6ca:	e100      	b.n	800d8ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d6cc:	7dfb      	ldrb	r3, [r7, #23]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d140      	bne.n	800d754 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d6d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6d6:	4980      	ldr	r1, [pc, #512]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d6d8:	4613      	mov	r3, r2
 800d6da:	005b      	lsls	r3, r3, #1
 800d6dc:	4413      	add	r3, r2
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	440b      	add	r3, r1
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d01a      	beq.n	800d71e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d6e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6ec:	497a      	ldr	r1, [pc, #488]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	4413      	add	r3, r2
 800d6f4:	00db      	lsls	r3, r3, #3
 800d6f6:	440b      	add	r3, r1
 800d6f8:	3312      	adds	r3, #18
 800d6fa:	881b      	ldrh	r3, [r3, #0]
 800d6fc:	8bba      	ldrh	r2, [r7, #28]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d845      	bhi.n	800d78e <etharp_find_entry+0x18a>
            old_queue = i;
 800d702:	8c3b      	ldrh	r3, [r7, #32]
 800d704:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d706:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d70a:	4973      	ldr	r1, [pc, #460]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d70c:	4613      	mov	r3, r2
 800d70e:	005b      	lsls	r3, r3, #1
 800d710:	4413      	add	r3, r2
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	440b      	add	r3, r1
 800d716:	3312      	adds	r3, #18
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	83bb      	strh	r3, [r7, #28]
 800d71c:	e037      	b.n	800d78e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d71e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d722:	496d      	ldr	r1, [pc, #436]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d724:	4613      	mov	r3, r2
 800d726:	005b      	lsls	r3, r3, #1
 800d728:	4413      	add	r3, r2
 800d72a:	00db      	lsls	r3, r3, #3
 800d72c:	440b      	add	r3, r1
 800d72e:	3312      	adds	r3, #18
 800d730:	881b      	ldrh	r3, [r3, #0]
 800d732:	8b7a      	ldrh	r2, [r7, #26]
 800d734:	429a      	cmp	r2, r3
 800d736:	d82a      	bhi.n	800d78e <etharp_find_entry+0x18a>
            old_pending = i;
 800d738:	8c3b      	ldrh	r3, [r7, #32]
 800d73a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800d73c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d740:	4965      	ldr	r1, [pc, #404]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d742:	4613      	mov	r3, r2
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	4413      	add	r3, r2
 800d748:	00db      	lsls	r3, r3, #3
 800d74a:	440b      	add	r3, r1
 800d74c:	3312      	adds	r3, #18
 800d74e:	881b      	ldrh	r3, [r3, #0]
 800d750:	837b      	strh	r3, [r7, #26]
 800d752:	e01c      	b.n	800d78e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d754:	7dfb      	ldrb	r3, [r7, #23]
 800d756:	2b01      	cmp	r3, #1
 800d758:	d919      	bls.n	800d78e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d75a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d75e:	495e      	ldr	r1, [pc, #376]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d760:	4613      	mov	r3, r2
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	4413      	add	r3, r2
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	440b      	add	r3, r1
 800d76a:	3312      	adds	r3, #18
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	8b3a      	ldrh	r2, [r7, #24]
 800d770:	429a      	cmp	r2, r3
 800d772:	d80c      	bhi.n	800d78e <etharp_find_entry+0x18a>
            old_stable = i;
 800d774:	8c3b      	ldrh	r3, [r7, #32]
 800d776:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800d778:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d77c:	4956      	ldr	r1, [pc, #344]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d77e:	4613      	mov	r3, r2
 800d780:	005b      	lsls	r3, r3, #1
 800d782:	4413      	add	r3, r2
 800d784:	00db      	lsls	r3, r3, #3
 800d786:	440b      	add	r3, r1
 800d788:	3312      	adds	r3, #18
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d78e:	8c3b      	ldrh	r3, [r7, #32]
 800d790:	3301      	adds	r3, #1
 800d792:	b29b      	uxth	r3, r3
 800d794:	843b      	strh	r3, [r7, #32]
 800d796:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d79a:	2b09      	cmp	r3, #9
 800d79c:	f77f af4c 	ble.w	800d638 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d7a0:	7afb      	ldrb	r3, [r7, #11]
 800d7a2:	f003 0302 	and.w	r3, r3, #2
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d108      	bne.n	800d7bc <etharp_find_entry+0x1b8>
 800d7aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d7ae:	2b0a      	cmp	r3, #10
 800d7b0:	d107      	bne.n	800d7c2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	f003 0301 	and.w	r3, r3, #1
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d102      	bne.n	800d7c2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d7bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d7c0:	e085      	b.n	800d8ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d7c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d7c6:	2b09      	cmp	r3, #9
 800d7c8:	dc02      	bgt.n	800d7d0 <etharp_find_entry+0x1cc>
    i = empty;
 800d7ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d7cc:	843b      	strh	r3, [r7, #32]
 800d7ce:	e039      	b.n	800d844 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d7d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d7d4:	2b09      	cmp	r3, #9
 800d7d6:	dc14      	bgt.n	800d802 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d7d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d7da:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d7dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7e0:	493d      	ldr	r1, [pc, #244]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	4413      	add	r3, r2
 800d7e8:	00db      	lsls	r3, r3, #3
 800d7ea:	440b      	add	r3, r1
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d018      	beq.n	800d824 <etharp_find_entry+0x220>
 800d7f2:	4b3a      	ldr	r3, [pc, #232]	@ (800d8dc <etharp_find_entry+0x2d8>)
 800d7f4:	f240 126d 	movw	r2, #365	@ 0x16d
 800d7f8:	493b      	ldr	r1, [pc, #236]	@ (800d8e8 <etharp_find_entry+0x2e4>)
 800d7fa:	483a      	ldr	r0, [pc, #232]	@ (800d8e4 <etharp_find_entry+0x2e0>)
 800d7fc:	f002 f9ee 	bl	800fbdc <iprintf>
 800d800:	e010      	b.n	800d824 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d802:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d806:	2b09      	cmp	r3, #9
 800d808:	dc02      	bgt.n	800d810 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d80a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d80c:	843b      	strh	r3, [r7, #32]
 800d80e:	e009      	b.n	800d824 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d810:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d814:	2b09      	cmp	r3, #9
 800d816:	dc02      	bgt.n	800d81e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d818:	8bfb      	ldrh	r3, [r7, #30]
 800d81a:	843b      	strh	r3, [r7, #32]
 800d81c:	e002      	b.n	800d824 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d81e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d822:	e054      	b.n	800d8ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d824:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d828:	2b09      	cmp	r3, #9
 800d82a:	dd06      	ble.n	800d83a <etharp_find_entry+0x236>
 800d82c:	4b2b      	ldr	r3, [pc, #172]	@ (800d8dc <etharp_find_entry+0x2d8>)
 800d82e:	f240 127f 	movw	r2, #383	@ 0x17f
 800d832:	492e      	ldr	r1, [pc, #184]	@ (800d8ec <etharp_find_entry+0x2e8>)
 800d834:	482b      	ldr	r0, [pc, #172]	@ (800d8e4 <etharp_find_entry+0x2e0>)
 800d836:	f002 f9d1 	bl	800fbdc <iprintf>
    etharp_free_entry(i);
 800d83a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d83e:	4618      	mov	r0, r3
 800d840:	f7ff fe06 	bl	800d450 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d844:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d848:	2b09      	cmp	r3, #9
 800d84a:	dd06      	ble.n	800d85a <etharp_find_entry+0x256>
 800d84c:	4b23      	ldr	r3, [pc, #140]	@ (800d8dc <etharp_find_entry+0x2d8>)
 800d84e:	f240 1283 	movw	r2, #387	@ 0x183
 800d852:	4926      	ldr	r1, [pc, #152]	@ (800d8ec <etharp_find_entry+0x2e8>)
 800d854:	4823      	ldr	r0, [pc, #140]	@ (800d8e4 <etharp_find_entry+0x2e0>)
 800d856:	f002 f9c1 	bl	800fbdc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d85a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d85e:	491e      	ldr	r1, [pc, #120]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d860:	4613      	mov	r3, r2
 800d862:	005b      	lsls	r3, r3, #1
 800d864:	4413      	add	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	440b      	add	r3, r1
 800d86a:	3314      	adds	r3, #20
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d006      	beq.n	800d880 <etharp_find_entry+0x27c>
 800d872:	4b1a      	ldr	r3, [pc, #104]	@ (800d8dc <etharp_find_entry+0x2d8>)
 800d874:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800d878:	491d      	ldr	r1, [pc, #116]	@ (800d8f0 <etharp_find_entry+0x2ec>)
 800d87a:	481a      	ldr	r0, [pc, #104]	@ (800d8e4 <etharp_find_entry+0x2e0>)
 800d87c:	f002 f9ae 	bl	800fbdc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00b      	beq.n	800d89e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d886:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6819      	ldr	r1, [r3, #0]
 800d88e:	4812      	ldr	r0, [pc, #72]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d890:	4613      	mov	r3, r2
 800d892:	005b      	lsls	r3, r3, #1
 800d894:	4413      	add	r3, r2
 800d896:	00db      	lsls	r3, r3, #3
 800d898:	4403      	add	r3, r0
 800d89a:	3304      	adds	r3, #4
 800d89c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d89e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8a2:	490d      	ldr	r1, [pc, #52]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	005b      	lsls	r3, r3, #1
 800d8a8:	4413      	add	r3, r2
 800d8aa:	00db      	lsls	r3, r3, #3
 800d8ac:	440b      	add	r3, r1
 800d8ae:	3312      	adds	r3, #18
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d8b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8b8:	4907      	ldr	r1, [pc, #28]	@ (800d8d8 <etharp_find_entry+0x2d4>)
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	005b      	lsls	r3, r3, #1
 800d8be:	4413      	add	r3, r2
 800d8c0:	00db      	lsls	r3, r3, #3
 800d8c2:	440b      	add	r3, r1
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d8ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3728      	adds	r7, #40	@ 0x28
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20008214 	.word	0x20008214
 800d8dc:	08012d20 	.word	0x08012d20
 800d8e0:	08012d58 	.word	0x08012d58
 800d8e4:	08012d98 	.word	0x08012d98
 800d8e8:	08012dc0 	.word	0x08012dc0
 800d8ec:	08012dd8 	.word	0x08012dd8
 800d8f0:	08012dec 	.word	0x08012dec

0800d8f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af02      	add	r7, sp, #8
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d908:	2b06      	cmp	r3, #6
 800d90a:	d006      	beq.n	800d91a <etharp_update_arp_entry+0x26>
 800d90c:	4b48      	ldr	r3, [pc, #288]	@ (800da30 <etharp_update_arp_entry+0x13c>)
 800d90e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800d912:	4948      	ldr	r1, [pc, #288]	@ (800da34 <etharp_update_arp_entry+0x140>)
 800d914:	4848      	ldr	r0, [pc, #288]	@ (800da38 <etharp_update_arp_entry+0x144>)
 800d916:	f002 f961 	bl	800fbdc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d012      	beq.n	800d946 <etharp_update_arp_entry+0x52>
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00e      	beq.n	800d946 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68f9      	ldr	r1, [r7, #12]
 800d92e:	4618      	mov	r0, r3
 800d930:	f001 f8fe 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 800d934:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d936:	2b00      	cmp	r3, #0
 800d938:	d105      	bne.n	800d946 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d942:	2be0      	cmp	r3, #224	@ 0xe0
 800d944:	d102      	bne.n	800d94c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d946:	f06f 030f 	mvn.w	r3, #15
 800d94a:	e06c      	b.n	800da26 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d94c:	78fb      	ldrb	r3, [r7, #3]
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	4619      	mov	r1, r3
 800d952:	68b8      	ldr	r0, [r7, #8]
 800d954:	f7ff fe56 	bl	800d604 <etharp_find_entry>
 800d958:	4603      	mov	r3, r0
 800d95a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d95c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d960:	2b00      	cmp	r3, #0
 800d962:	da02      	bge.n	800d96a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d964:	8afb      	ldrh	r3, [r7, #22]
 800d966:	b25b      	sxtb	r3, r3
 800d968:	e05d      	b.n	800da26 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d96a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d96e:	4933      	ldr	r1, [pc, #204]	@ (800da3c <etharp_update_arp_entry+0x148>)
 800d970:	4613      	mov	r3, r2
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	4413      	add	r3, r2
 800d976:	00db      	lsls	r3, r3, #3
 800d978:	440b      	add	r3, r1
 800d97a:	3314      	adds	r3, #20
 800d97c:	2202      	movs	r2, #2
 800d97e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d980:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d984:	492d      	ldr	r1, [pc, #180]	@ (800da3c <etharp_update_arp_entry+0x148>)
 800d986:	4613      	mov	r3, r2
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	4413      	add	r3, r2
 800d98c:	00db      	lsls	r3, r3, #3
 800d98e:	440b      	add	r3, r1
 800d990:	3308      	adds	r3, #8
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d996:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d99a:	4613      	mov	r3, r2
 800d99c:	005b      	lsls	r3, r3, #1
 800d99e:	4413      	add	r3, r2
 800d9a0:	00db      	lsls	r3, r3, #3
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	4a25      	ldr	r2, [pc, #148]	@ (800da3c <etharp_update_arp_entry+0x148>)
 800d9a6:	4413      	add	r3, r2
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	2206      	movs	r2, #6
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f002 f9ef 	bl	800fd92 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d9b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9b8:	4920      	ldr	r1, [pc, #128]	@ (800da3c <etharp_update_arp_entry+0x148>)
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	005b      	lsls	r3, r3, #1
 800d9be:	4413      	add	r3, r2
 800d9c0:	00db      	lsls	r3, r3, #3
 800d9c2:	440b      	add	r3, r1
 800d9c4:	3312      	adds	r3, #18
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d9ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9ce:	491b      	ldr	r1, [pc, #108]	@ (800da3c <etharp_update_arp_entry+0x148>)
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	005b      	lsls	r3, r3, #1
 800d9d4:	4413      	add	r3, r2
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	440b      	add	r3, r1
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d021      	beq.n	800da24 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d9e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9e4:	4915      	ldr	r1, [pc, #84]	@ (800da3c <etharp_update_arp_entry+0x148>)
 800d9e6:	4613      	mov	r3, r2
 800d9e8:	005b      	lsls	r3, r3, #1
 800d9ea:	4413      	add	r3, r2
 800d9ec:	00db      	lsls	r3, r3, #3
 800d9ee:	440b      	add	r3, r1
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d9f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9f8:	4910      	ldr	r1, [pc, #64]	@ (800da3c <etharp_update_arp_entry+0x148>)
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	4413      	add	r3, r2
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	440b      	add	r3, r1
 800da04:	2200      	movs	r2, #0
 800da06:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800da0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6939      	ldr	r1, [r7, #16]
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f001 ff97 	bl	800f94c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800da1e:	6938      	ldr	r0, [r7, #16]
 800da20:	f7f9 fe6e 	bl	8007700 <pbuf_free>
  }
  return ERR_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	08012d20 	.word	0x08012d20
 800da34:	08012e18 	.word	0x08012e18
 800da38:	08012d98 	.word	0x08012d98
 800da3c:	20008214 	.word	0x20008214

0800da40 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da48:	2300      	movs	r3, #0
 800da4a:	60fb      	str	r3, [r7, #12]
 800da4c:	e01e      	b.n	800da8c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800da4e:	4913      	ldr	r1, [pc, #76]	@ (800da9c <etharp_cleanup_netif+0x5c>)
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4613      	mov	r3, r2
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	4413      	add	r3, r2
 800da58:	00db      	lsls	r3, r3, #3
 800da5a:	440b      	add	r3, r1
 800da5c:	3314      	adds	r3, #20
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800da62:	7afb      	ldrb	r3, [r7, #11]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00e      	beq.n	800da86 <etharp_cleanup_netif+0x46>
 800da68:	490c      	ldr	r1, [pc, #48]	@ (800da9c <etharp_cleanup_netif+0x5c>)
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	4613      	mov	r3, r2
 800da6e:	005b      	lsls	r3, r3, #1
 800da70:	4413      	add	r3, r2
 800da72:	00db      	lsls	r3, r3, #3
 800da74:	440b      	add	r3, r1
 800da76:	3308      	adds	r3, #8
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d102      	bne.n	800da86 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f7ff fce5 	bl	800d450 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	3301      	adds	r3, #1
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2b09      	cmp	r3, #9
 800da90:	dddd      	ble.n	800da4e <etharp_cleanup_netif+0xe>
    }
  }
}
 800da92:	bf00      	nop
 800da94:	bf00      	nop
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	20008214 	.word	0x20008214

0800daa0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800daa0:	b5b0      	push	{r4, r5, r7, lr}
 800daa2:	b08a      	sub	sp, #40	@ 0x28
 800daa4:	af04      	add	r7, sp, #16
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d107      	bne.n	800dac0 <etharp_input+0x20>
 800dab0:	4b3d      	ldr	r3, [pc, #244]	@ (800dba8 <etharp_input+0x108>)
 800dab2:	f240 228a 	movw	r2, #650	@ 0x28a
 800dab6:	493d      	ldr	r1, [pc, #244]	@ (800dbac <etharp_input+0x10c>)
 800dab8:	483d      	ldr	r0, [pc, #244]	@ (800dbb0 <etharp_input+0x110>)
 800daba:	f002 f88f 	bl	800fbdc <iprintf>
 800dabe:	e06f      	b.n	800dba0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dad0:	d10c      	bne.n	800daec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dad6:	2b06      	cmp	r3, #6
 800dad8:	d108      	bne.n	800daec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d104      	bne.n	800daec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	885b      	ldrh	r3, [r3, #2]
 800dae6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dae8:	2b08      	cmp	r3, #8
 800daea:	d003      	beq.n	800daf4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7f9 fe07 	bl	8007700 <pbuf_free>
    return;
 800daf2:	e055      	b.n	800dba0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	330e      	adds	r3, #14
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	3318      	adds	r3, #24
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	3304      	adds	r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d102      	bne.n	800db14 <etharp_input+0x74>
    for_us = 0;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]
 800db12:	e009      	b.n	800db28 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	3304      	adds	r3, #4
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	bf0c      	ite	eq
 800db20:	2301      	moveq	r3, #1
 800db22:	2300      	movne	r3, #0
 800db24:	b2db      	uxtb	r3, r3
 800db26:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	f103 0208 	add.w	r2, r3, #8
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <etharp_input+0x98>
 800db34:	2301      	movs	r3, #1
 800db36:	e000      	b.n	800db3a <etharp_input+0x9a>
 800db38:	2302      	movs	r3, #2
 800db3a:	f107 010c 	add.w	r1, r7, #12
 800db3e:	6838      	ldr	r0, [r7, #0]
 800db40:	f7ff fed8 	bl	800d8f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	88db      	ldrh	r3, [r3, #6]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db4e:	d003      	beq.n	800db58 <etharp_input+0xb8>
 800db50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db54:	d01e      	beq.n	800db94 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800db56:	e020      	b.n	800db9a <etharp_input+0xfa>
      if (for_us) {
 800db58:	7dfb      	ldrb	r3, [r7, #23]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d01c      	beq.n	800db98 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	3208      	adds	r2, #8
        etharp_raw(netif,
 800db78:	2102      	movs	r1, #2
 800db7a:	9103      	str	r1, [sp, #12]
 800db7c:	f107 010c 	add.w	r1, r7, #12
 800db80:	9102      	str	r1, [sp, #8]
 800db82:	9201      	str	r2, [sp, #4]
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	462b      	mov	r3, r5
 800db88:	4622      	mov	r2, r4
 800db8a:	4601      	mov	r1, r0
 800db8c:	6838      	ldr	r0, [r7, #0]
 800db8e:	f000 faeb 	bl	800e168 <etharp_raw>
      break;
 800db92:	e001      	b.n	800db98 <etharp_input+0xf8>
      break;
 800db94:	bf00      	nop
 800db96:	e000      	b.n	800db9a <etharp_input+0xfa>
      break;
 800db98:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7f9 fdb0 	bl	8007700 <pbuf_free>
}
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bdb0      	pop	{r4, r5, r7, pc}
 800dba6:	bf00      	nop
 800dba8:	08012d20 	.word	0x08012d20
 800dbac:	08012e70 	.word	0x08012e70
 800dbb0:	08012d98 	.word	0x08012d98

0800dbb4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af02      	add	r7, sp, #8
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dbc2:	79fa      	ldrb	r2, [r7, #7]
 800dbc4:	4944      	ldr	r1, [pc, #272]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	005b      	lsls	r3, r3, #1
 800dbca:	4413      	add	r3, r2
 800dbcc:	00db      	lsls	r3, r3, #3
 800dbce:	440b      	add	r3, r1
 800dbd0:	3314      	adds	r3, #20
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d806      	bhi.n	800dbe6 <etharp_output_to_arp_index+0x32>
 800dbd8:	4b40      	ldr	r3, [pc, #256]	@ (800dcdc <etharp_output_to_arp_index+0x128>)
 800dbda:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800dbde:	4940      	ldr	r1, [pc, #256]	@ (800dce0 <etharp_output_to_arp_index+0x12c>)
 800dbe0:	4840      	ldr	r0, [pc, #256]	@ (800dce4 <etharp_output_to_arp_index+0x130>)
 800dbe2:	f001 fffb 	bl	800fbdc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dbe6:	79fa      	ldrb	r2, [r7, #7]
 800dbe8:	493b      	ldr	r1, [pc, #236]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dbea:	4613      	mov	r3, r2
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	4413      	add	r3, r2
 800dbf0:	00db      	lsls	r3, r3, #3
 800dbf2:	440b      	add	r3, r1
 800dbf4:	3314      	adds	r3, #20
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	2b02      	cmp	r3, #2
 800dbfa:	d153      	bne.n	800dca4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dbfc:	79fa      	ldrb	r2, [r7, #7]
 800dbfe:	4936      	ldr	r1, [pc, #216]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dc00:	4613      	mov	r3, r2
 800dc02:	005b      	lsls	r3, r3, #1
 800dc04:	4413      	add	r3, r2
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	440b      	add	r3, r1
 800dc0a:	3312      	adds	r3, #18
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800dc12:	d919      	bls.n	800dc48 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dc14:	79fa      	ldrb	r2, [r7, #7]
 800dc16:	4613      	mov	r3, r2
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	4413      	add	r3, r2
 800dc1c:	00db      	lsls	r3, r3, #3
 800dc1e:	4a2e      	ldr	r2, [pc, #184]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dc20:	4413      	add	r3, r2
 800dc22:	3304      	adds	r3, #4
 800dc24:	4619      	mov	r1, r3
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f000 fb4c 	bl	800e2c4 <etharp_request>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d138      	bne.n	800dca4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc32:	79fa      	ldrb	r2, [r7, #7]
 800dc34:	4928      	ldr	r1, [pc, #160]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dc36:	4613      	mov	r3, r2
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	4413      	add	r3, r2
 800dc3c:	00db      	lsls	r3, r3, #3
 800dc3e:	440b      	add	r3, r1
 800dc40:	3314      	adds	r3, #20
 800dc42:	2203      	movs	r2, #3
 800dc44:	701a      	strb	r2, [r3, #0]
 800dc46:	e02d      	b.n	800dca4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dc48:	79fa      	ldrb	r2, [r7, #7]
 800dc4a:	4923      	ldr	r1, [pc, #140]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	4413      	add	r3, r2
 800dc52:	00db      	lsls	r3, r3, #3
 800dc54:	440b      	add	r3, r1
 800dc56:	3312      	adds	r3, #18
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800dc5e:	d321      	bcc.n	800dca4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dc60:	79fa      	ldrb	r2, [r7, #7]
 800dc62:	4613      	mov	r3, r2
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	4413      	add	r3, r2
 800dc68:	00db      	lsls	r3, r3, #3
 800dc6a:	4a1b      	ldr	r2, [pc, #108]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dc6c:	4413      	add	r3, r2
 800dc6e:	1d19      	adds	r1, r3, #4
 800dc70:	79fa      	ldrb	r2, [r7, #7]
 800dc72:	4613      	mov	r3, r2
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	4413      	add	r3, r2
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	3308      	adds	r3, #8
 800dc7c:	4a16      	ldr	r2, [pc, #88]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dc7e:	4413      	add	r3, r2
 800dc80:	3304      	adds	r3, #4
 800dc82:	461a      	mov	r2, r3
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f000 fafb 	bl	800e280 <etharp_request_dst>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d109      	bne.n	800dca4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc90:	79fa      	ldrb	r2, [r7, #7]
 800dc92:	4911      	ldr	r1, [pc, #68]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dc94:	4613      	mov	r3, r2
 800dc96:	005b      	lsls	r3, r3, #1
 800dc98:	4413      	add	r3, r2
 800dc9a:	00db      	lsls	r3, r3, #3
 800dc9c:	440b      	add	r3, r1
 800dc9e:	3314      	adds	r3, #20
 800dca0:	2203      	movs	r2, #3
 800dca2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800dcaa:	79fa      	ldrb	r2, [r7, #7]
 800dcac:	4613      	mov	r3, r2
 800dcae:	005b      	lsls	r3, r3, #1
 800dcb0:	4413      	add	r3, r2
 800dcb2:	00db      	lsls	r3, r3, #3
 800dcb4:	3308      	adds	r3, #8
 800dcb6:	4a08      	ldr	r2, [pc, #32]	@ (800dcd8 <etharp_output_to_arp_index+0x124>)
 800dcb8:	4413      	add	r3, r2
 800dcba:	3304      	adds	r3, #4
 800dcbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dcc0:	9200      	str	r2, [sp, #0]
 800dcc2:	460a      	mov	r2, r1
 800dcc4:	68b9      	ldr	r1, [r7, #8]
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f001 fe40 	bl	800f94c <ethernet_output>
 800dccc:	4603      	mov	r3, r0
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	20008214 	.word	0x20008214
 800dcdc:	08012d20 	.word	0x08012d20
 800dce0:	08012e90 	.word	0x08012e90
 800dce4:	08012d98 	.word	0x08012d98

0800dce8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08a      	sub	sp, #40	@ 0x28
 800dcec:	af02      	add	r7, sp, #8
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d106      	bne.n	800dd0c <etharp_output+0x24>
 800dcfe:	4b73      	ldr	r3, [pc, #460]	@ (800decc <etharp_output+0x1e4>)
 800dd00:	f240 321e 	movw	r2, #798	@ 0x31e
 800dd04:	4972      	ldr	r1, [pc, #456]	@ (800ded0 <etharp_output+0x1e8>)
 800dd06:	4873      	ldr	r0, [pc, #460]	@ (800ded4 <etharp_output+0x1ec>)
 800dd08:	f001 ff68 	bl	800fbdc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d106      	bne.n	800dd20 <etharp_output+0x38>
 800dd12:	4b6e      	ldr	r3, [pc, #440]	@ (800decc <etharp_output+0x1e4>)
 800dd14:	f240 321f 	movw	r2, #799	@ 0x31f
 800dd18:	496f      	ldr	r1, [pc, #444]	@ (800ded8 <etharp_output+0x1f0>)
 800dd1a:	486e      	ldr	r0, [pc, #440]	@ (800ded4 <etharp_output+0x1ec>)
 800dd1c:	f001 ff5e 	bl	800fbdc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d106      	bne.n	800dd34 <etharp_output+0x4c>
 800dd26:	4b69      	ldr	r3, [pc, #420]	@ (800decc <etharp_output+0x1e4>)
 800dd28:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800dd2c:	496b      	ldr	r1, [pc, #428]	@ (800dedc <etharp_output+0x1f4>)
 800dd2e:	4869      	ldr	r0, [pc, #420]	@ (800ded4 <etharp_output+0x1ec>)
 800dd30:	f001 ff54 	bl	800fbdc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	68f9      	ldr	r1, [r7, #12]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 fef8 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d002      	beq.n	800dd4c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dd46:	4b66      	ldr	r3, [pc, #408]	@ (800dee0 <etharp_output+0x1f8>)
 800dd48:	61fb      	str	r3, [r7, #28]
 800dd4a:	e0af      	b.n	800deac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd54:	2be0      	cmp	r3, #224	@ 0xe0
 800dd56:	d118      	bne.n	800dd8a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dd60:	235e      	movs	r3, #94	@ 0x5e
 800dd62:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	3301      	adds	r3, #1
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	3302      	adds	r3, #2
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	3303      	adds	r3, #3
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dd82:	f107 0310 	add.w	r3, r7, #16
 800dd86:	61fb      	str	r3, [r7, #28]
 800dd88:	e090      	b.n	800deac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	3304      	adds	r3, #4
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	405a      	eors	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	3308      	adds	r3, #8
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4013      	ands	r3, r2
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d012      	beq.n	800ddc8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dda8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d00b      	beq.n	800ddc8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	330c      	adds	r3, #12
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d003      	beq.n	800ddc2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	330c      	adds	r3, #12
 800ddbe:	61bb      	str	r3, [r7, #24]
 800ddc0:	e002      	b.n	800ddc8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ddc2:	f06f 0303 	mvn.w	r3, #3
 800ddc6:	e07d      	b.n	800dec4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ddc8:	4b46      	ldr	r3, [pc, #280]	@ (800dee4 <etharp_output+0x1fc>)
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	4a46      	ldr	r2, [pc, #280]	@ (800dee8 <etharp_output+0x200>)
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	005b      	lsls	r3, r3, #1
 800ddd4:	440b      	add	r3, r1
 800ddd6:	00db      	lsls	r3, r3, #3
 800ddd8:	4413      	add	r3, r2
 800ddda:	3314      	adds	r3, #20
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d925      	bls.n	800de2e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dde2:	4b40      	ldr	r3, [pc, #256]	@ (800dee4 <etharp_output+0x1fc>)
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	4619      	mov	r1, r3
 800dde8:	4a3f      	ldr	r2, [pc, #252]	@ (800dee8 <etharp_output+0x200>)
 800ddea:	460b      	mov	r3, r1
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	440b      	add	r3, r1
 800ddf0:	00db      	lsls	r3, r3, #3
 800ddf2:	4413      	add	r3, r2
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d117      	bne.n	800de2e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	4b38      	ldr	r3, [pc, #224]	@ (800dee4 <etharp_output+0x1fc>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	4618      	mov	r0, r3
 800de08:	4937      	ldr	r1, [pc, #220]	@ (800dee8 <etharp_output+0x200>)
 800de0a:	4603      	mov	r3, r0
 800de0c:	005b      	lsls	r3, r3, #1
 800de0e:	4403      	add	r3, r0
 800de10:	00db      	lsls	r3, r3, #3
 800de12:	440b      	add	r3, r1
 800de14:	3304      	adds	r3, #4
 800de16:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800de18:	429a      	cmp	r2, r3
 800de1a:	d108      	bne.n	800de2e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800de1c:	4b31      	ldr	r3, [pc, #196]	@ (800dee4 <etharp_output+0x1fc>)
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	461a      	mov	r2, r3
 800de22:	68b9      	ldr	r1, [r7, #8]
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f7ff fec5 	bl	800dbb4 <etharp_output_to_arp_index>
 800de2a:	4603      	mov	r3, r0
 800de2c:	e04a      	b.n	800dec4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de2e:	2300      	movs	r3, #0
 800de30:	75fb      	strb	r3, [r7, #23]
 800de32:	e031      	b.n	800de98 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de34:	7dfa      	ldrb	r2, [r7, #23]
 800de36:	492c      	ldr	r1, [pc, #176]	@ (800dee8 <etharp_output+0x200>)
 800de38:	4613      	mov	r3, r2
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	4413      	add	r3, r2
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	440b      	add	r3, r1
 800de42:	3314      	adds	r3, #20
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d923      	bls.n	800de92 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800de4a:	7dfa      	ldrb	r2, [r7, #23]
 800de4c:	4926      	ldr	r1, [pc, #152]	@ (800dee8 <etharp_output+0x200>)
 800de4e:	4613      	mov	r3, r2
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	4413      	add	r3, r2
 800de54:	00db      	lsls	r3, r3, #3
 800de56:	440b      	add	r3, r1
 800de58:	3308      	adds	r3, #8
 800de5a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d117      	bne.n	800de92 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	6819      	ldr	r1, [r3, #0]
 800de66:	7dfa      	ldrb	r2, [r7, #23]
 800de68:	481f      	ldr	r0, [pc, #124]	@ (800dee8 <etharp_output+0x200>)
 800de6a:	4613      	mov	r3, r2
 800de6c:	005b      	lsls	r3, r3, #1
 800de6e:	4413      	add	r3, r2
 800de70:	00db      	lsls	r3, r3, #3
 800de72:	4403      	add	r3, r0
 800de74:	3304      	adds	r3, #4
 800de76:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800de78:	4299      	cmp	r1, r3
 800de7a:	d10a      	bne.n	800de92 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800de7c:	4a19      	ldr	r2, [pc, #100]	@ (800dee4 <etharp_output+0x1fc>)
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
 800de80:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	461a      	mov	r2, r3
 800de86:	68b9      	ldr	r1, [r7, #8]
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f7ff fe93 	bl	800dbb4 <etharp_output_to_arp_index>
 800de8e:	4603      	mov	r3, r0
 800de90:	e018      	b.n	800dec4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de92:	7dfb      	ldrb	r3, [r7, #23]
 800de94:	3301      	adds	r3, #1
 800de96:	75fb      	strb	r3, [r7, #23]
 800de98:	7dfb      	ldrb	r3, [r7, #23]
 800de9a:	2b09      	cmp	r3, #9
 800de9c:	d9ca      	bls.n	800de34 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	69b9      	ldr	r1, [r7, #24]
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f000 f822 	bl	800deec <etharp_query>
 800dea8:	4603      	mov	r3, r0
 800deaa:	e00b      	b.n	800dec4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800deb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	68b9      	ldr	r1, [r7, #8]
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f001 fd45 	bl	800f94c <ethernet_output>
 800dec2:	4603      	mov	r3, r0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3720      	adds	r7, #32
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	08012d20 	.word	0x08012d20
 800ded0:	08012e70 	.word	0x08012e70
 800ded4:	08012d98 	.word	0x08012d98
 800ded8:	08012ec0 	.word	0x08012ec0
 800dedc:	08012e60 	.word	0x08012e60
 800dee0:	080134dc 	.word	0x080134dc
 800dee4:	20008304 	.word	0x20008304
 800dee8:	20008214 	.word	0x20008214

0800deec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08c      	sub	sp, #48	@ 0x30
 800def0:	af02      	add	r7, sp, #8
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	3326      	adds	r3, #38	@ 0x26
 800defc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800defe:	23ff      	movs	r3, #255	@ 0xff
 800df00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	68f9      	ldr	r1, [r7, #12]
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 fe0e 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10c      	bne.n	800df34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df22:	2be0      	cmp	r3, #224	@ 0xe0
 800df24:	d006      	beq.n	800df34 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d003      	beq.n	800df34 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d102      	bne.n	800df3a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df34:	f06f 030f 	mvn.w	r3, #15
 800df38:	e101      	b.n	800e13e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	2101      	movs	r1, #1
 800df3e:	68b8      	ldr	r0, [r7, #8]
 800df40:	f7ff fb60 	bl	800d604 <etharp_find_entry>
 800df44:	4603      	mov	r3, r0
 800df46:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800df48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	da02      	bge.n	800df56 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800df50:	8a7b      	ldrh	r3, [r7, #18]
 800df52:	b25b      	sxtb	r3, r3
 800df54:	e0f3      	b.n	800e13e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800df56:	8a7b      	ldrh	r3, [r7, #18]
 800df58:	2b7e      	cmp	r3, #126	@ 0x7e
 800df5a:	d906      	bls.n	800df6a <etharp_query+0x7e>
 800df5c:	4b7a      	ldr	r3, [pc, #488]	@ (800e148 <etharp_query+0x25c>)
 800df5e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800df62:	497a      	ldr	r1, [pc, #488]	@ (800e14c <etharp_query+0x260>)
 800df64:	487a      	ldr	r0, [pc, #488]	@ (800e150 <etharp_query+0x264>)
 800df66:	f001 fe39 	bl	800fbdc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800df6a:	8a7b      	ldrh	r3, [r7, #18]
 800df6c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800df6e:	7c7a      	ldrb	r2, [r7, #17]
 800df70:	4978      	ldr	r1, [pc, #480]	@ (800e154 <etharp_query+0x268>)
 800df72:	4613      	mov	r3, r2
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	4413      	add	r3, r2
 800df78:	00db      	lsls	r3, r3, #3
 800df7a:	440b      	add	r3, r1
 800df7c:	3314      	adds	r3, #20
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d115      	bne.n	800dfb0 <etharp_query+0xc4>
    is_new_entry = 1;
 800df84:	2301      	movs	r3, #1
 800df86:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800df88:	7c7a      	ldrb	r2, [r7, #17]
 800df8a:	4972      	ldr	r1, [pc, #456]	@ (800e154 <etharp_query+0x268>)
 800df8c:	4613      	mov	r3, r2
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	4413      	add	r3, r2
 800df92:	00db      	lsls	r3, r3, #3
 800df94:	440b      	add	r3, r1
 800df96:	3314      	adds	r3, #20
 800df98:	2201      	movs	r2, #1
 800df9a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800df9c:	7c7a      	ldrb	r2, [r7, #17]
 800df9e:	496d      	ldr	r1, [pc, #436]	@ (800e154 <etharp_query+0x268>)
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	4413      	add	r3, r2
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	440b      	add	r3, r1
 800dfaa:	3308      	adds	r3, #8
 800dfac:	68fa      	ldr	r2, [r7, #12]
 800dfae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800dfb0:	7c7a      	ldrb	r2, [r7, #17]
 800dfb2:	4968      	ldr	r1, [pc, #416]	@ (800e154 <etharp_query+0x268>)
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	005b      	lsls	r3, r3, #1
 800dfb8:	4413      	add	r3, r2
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	440b      	add	r3, r1
 800dfbe:	3314      	adds	r3, #20
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d011      	beq.n	800dfea <etharp_query+0xfe>
 800dfc6:	7c7a      	ldrb	r2, [r7, #17]
 800dfc8:	4962      	ldr	r1, [pc, #392]	@ (800e154 <etharp_query+0x268>)
 800dfca:	4613      	mov	r3, r2
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	4413      	add	r3, r2
 800dfd0:	00db      	lsls	r3, r3, #3
 800dfd2:	440b      	add	r3, r1
 800dfd4:	3314      	adds	r3, #20
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d806      	bhi.n	800dfea <etharp_query+0xfe>
 800dfdc:	4b5a      	ldr	r3, [pc, #360]	@ (800e148 <etharp_query+0x25c>)
 800dfde:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800dfe2:	495d      	ldr	r1, [pc, #372]	@ (800e158 <etharp_query+0x26c>)
 800dfe4:	485a      	ldr	r0, [pc, #360]	@ (800e150 <etharp_query+0x264>)
 800dfe6:	f001 fdf9 	bl	800fbdc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d102      	bne.n	800dff6 <etharp_query+0x10a>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10c      	bne.n	800e010 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800dff6:	68b9      	ldr	r1, [r7, #8]
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f000 f963 	bl	800e2c4 <etharp_request>
 800dffe:	4603      	mov	r3, r0
 800e000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d102      	bne.n	800e010 <etharp_query+0x124>
      return result;
 800e00a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e00e:	e096      	b.n	800e13e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d106      	bne.n	800e024 <etharp_query+0x138>
 800e016:	4b4c      	ldr	r3, [pc, #304]	@ (800e148 <etharp_query+0x25c>)
 800e018:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800e01c:	494f      	ldr	r1, [pc, #316]	@ (800e15c <etharp_query+0x270>)
 800e01e:	484c      	ldr	r0, [pc, #304]	@ (800e150 <etharp_query+0x264>)
 800e020:	f001 fddc 	bl	800fbdc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e024:	7c7a      	ldrb	r2, [r7, #17]
 800e026:	494b      	ldr	r1, [pc, #300]	@ (800e154 <etharp_query+0x268>)
 800e028:	4613      	mov	r3, r2
 800e02a:	005b      	lsls	r3, r3, #1
 800e02c:	4413      	add	r3, r2
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	440b      	add	r3, r1
 800e032:	3314      	adds	r3, #20
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2b01      	cmp	r3, #1
 800e038:	d917      	bls.n	800e06a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e03a:	4a49      	ldr	r2, [pc, #292]	@ (800e160 <etharp_query+0x274>)
 800e03c:	7c7b      	ldrb	r3, [r7, #17]
 800e03e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e040:	7c7a      	ldrb	r2, [r7, #17]
 800e042:	4613      	mov	r3, r2
 800e044:	005b      	lsls	r3, r3, #1
 800e046:	4413      	add	r3, r2
 800e048:	00db      	lsls	r3, r3, #3
 800e04a:	3308      	adds	r3, #8
 800e04c:	4a41      	ldr	r2, [pc, #260]	@ (800e154 <etharp_query+0x268>)
 800e04e:	4413      	add	r3, r2
 800e050:	3304      	adds	r3, #4
 800e052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e056:	9200      	str	r2, [sp, #0]
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f001 fc75 	bl	800f94c <ethernet_output>
 800e062:	4603      	mov	r3, r0
 800e064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e068:	e067      	b.n	800e13a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e06a:	7c7a      	ldrb	r2, [r7, #17]
 800e06c:	4939      	ldr	r1, [pc, #228]	@ (800e154 <etharp_query+0x268>)
 800e06e:	4613      	mov	r3, r2
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	4413      	add	r3, r2
 800e074:	00db      	lsls	r3, r3, #3
 800e076:	440b      	add	r3, r1
 800e078:	3314      	adds	r3, #20
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d15c      	bne.n	800e13a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e080:	2300      	movs	r3, #0
 800e082:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e088:	e01c      	b.n	800e0c4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	895a      	ldrh	r2, [r3, #10]
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	891b      	ldrh	r3, [r3, #8]
 800e092:	429a      	cmp	r2, r3
 800e094:	d10a      	bne.n	800e0ac <etharp_query+0x1c0>
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d006      	beq.n	800e0ac <etharp_query+0x1c0>
 800e09e:	4b2a      	ldr	r3, [pc, #168]	@ (800e148 <etharp_query+0x25c>)
 800e0a0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e0a4:	492f      	ldr	r1, [pc, #188]	@ (800e164 <etharp_query+0x278>)
 800e0a6:	482a      	ldr	r0, [pc, #168]	@ (800e150 <etharp_query+0x264>)
 800e0a8:	f001 fd98 	bl	800fbdc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	7b1b      	ldrb	r3, [r3, #12]
 800e0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <etharp_query+0x1d2>
        copy_needed = 1;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	61bb      	str	r3, [r7, #24]
        break;
 800e0bc:	e005      	b.n	800e0ca <etharp_query+0x1de>
      }
      p = p->next;
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e0c4:	69fb      	ldr	r3, [r7, #28]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1df      	bne.n	800e08a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e0ca:	69bb      	ldr	r3, [r7, #24]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d007      	beq.n	800e0e0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e0d6:	200e      	movs	r0, #14
 800e0d8:	f7f9 fd6e 	bl	8007bb8 <pbuf_clone>
 800e0dc:	61f8      	str	r0, [r7, #28]
 800e0de:	e004      	b.n	800e0ea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e0e4:	69f8      	ldr	r0, [r7, #28]
 800e0e6:	f7f9 fbab 	bl	8007840 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d021      	beq.n	800e134 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e0f0:	7c7a      	ldrb	r2, [r7, #17]
 800e0f2:	4918      	ldr	r1, [pc, #96]	@ (800e154 <etharp_query+0x268>)
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	005b      	lsls	r3, r3, #1
 800e0f8:	4413      	add	r3, r2
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	440b      	add	r3, r1
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00a      	beq.n	800e11a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e104:	7c7a      	ldrb	r2, [r7, #17]
 800e106:	4913      	ldr	r1, [pc, #76]	@ (800e154 <etharp_query+0x268>)
 800e108:	4613      	mov	r3, r2
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	4413      	add	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	440b      	add	r3, r1
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4618      	mov	r0, r3
 800e116:	f7f9 faf3 	bl	8007700 <pbuf_free>
      }
      arp_table[i].q = p;
 800e11a:	7c7a      	ldrb	r2, [r7, #17]
 800e11c:	490d      	ldr	r1, [pc, #52]	@ (800e154 <etharp_query+0x268>)
 800e11e:	4613      	mov	r3, r2
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	4413      	add	r3, r2
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	440b      	add	r3, r1
 800e128:	69fa      	ldr	r2, [r7, #28]
 800e12a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e12c:	2300      	movs	r3, #0
 800e12e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e132:	e002      	b.n	800e13a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e134:	23ff      	movs	r3, #255	@ 0xff
 800e136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800e13a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3728      	adds	r7, #40	@ 0x28
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	08012d20 	.word	0x08012d20
 800e14c:	08012ecc 	.word	0x08012ecc
 800e150:	08012d98 	.word	0x08012d98
 800e154:	20008214 	.word	0x20008214
 800e158:	08012edc 	.word	0x08012edc
 800e15c:	08012ec0 	.word	0x08012ec0
 800e160:	20008304 	.word	0x20008304
 800e164:	08012f04 	.word	0x08012f04

0800e168 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08a      	sub	sp, #40	@ 0x28
 800e16c:	af02      	add	r7, sp, #8
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	607a      	str	r2, [r7, #4]
 800e174:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d106      	bne.n	800e18e <etharp_raw+0x26>
 800e180:	4b3a      	ldr	r3, [pc, #232]	@ (800e26c <etharp_raw+0x104>)
 800e182:	f240 4257 	movw	r2, #1111	@ 0x457
 800e186:	493a      	ldr	r1, [pc, #232]	@ (800e270 <etharp_raw+0x108>)
 800e188:	483a      	ldr	r0, [pc, #232]	@ (800e274 <etharp_raw+0x10c>)
 800e18a:	f001 fd27 	bl	800fbdc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e18e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e192:	211c      	movs	r1, #28
 800e194:	200e      	movs	r0, #14
 800e196:	f7f8 ffcf 	bl	8007138 <pbuf_alloc>
 800e19a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e1a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1a6:	e05d      	b.n	800e264 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	895b      	ldrh	r3, [r3, #10]
 800e1ac:	2b1b      	cmp	r3, #27
 800e1ae:	d806      	bhi.n	800e1be <etharp_raw+0x56>
 800e1b0:	4b2e      	ldr	r3, [pc, #184]	@ (800e26c <etharp_raw+0x104>)
 800e1b2:	f240 4262 	movw	r2, #1122	@ 0x462
 800e1b6:	4930      	ldr	r1, [pc, #192]	@ (800e278 <etharp_raw+0x110>)
 800e1b8:	482e      	ldr	r0, [pc, #184]	@ (800e274 <etharp_raw+0x10c>)
 800e1ba:	f001 fd0f 	bl	800fbdc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e1c4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7f7 ff60 	bl	800608c <lwip_htons>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e1da:	2b06      	cmp	r3, #6
 800e1dc:	d006      	beq.n	800e1ec <etharp_raw+0x84>
 800e1de:	4b23      	ldr	r3, [pc, #140]	@ (800e26c <etharp_raw+0x104>)
 800e1e0:	f240 4269 	movw	r2, #1129	@ 0x469
 800e1e4:	4925      	ldr	r1, [pc, #148]	@ (800e27c <etharp_raw+0x114>)
 800e1e6:	4823      	ldr	r0, [pc, #140]	@ (800e274 <etharp_raw+0x10c>)
 800e1e8:	f001 fcf8 	bl	800fbdc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	3308      	adds	r3, #8
 800e1f0:	2206      	movs	r2, #6
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 fdcc 	bl	800fd92 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	3312      	adds	r3, #18
 800e1fe:	2206      	movs	r2, #6
 800e200:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e202:	4618      	mov	r0, r3
 800e204:	f001 fdc5 	bl	800fd92 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	330e      	adds	r3, #14
 800e20c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e20e:	6812      	ldr	r2, [r2, #0]
 800e210:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	3318      	adds	r3, #24
 800e216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e218:	6812      	ldr	r2, [r2, #0]
 800e21a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	2200      	movs	r2, #0
 800e220:	701a      	strb	r2, [r3, #0]
 800e222:	2200      	movs	r2, #0
 800e224:	f042 0201 	orr.w	r2, r2, #1
 800e228:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f042 0208 	orr.w	r2, r2, #8
 800e232:	709a      	strb	r2, [r3, #2]
 800e234:	2200      	movs	r2, #0
 800e236:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2206      	movs	r2, #6
 800e23c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	2204      	movs	r2, #4
 800e242:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e244:	f640 0306 	movw	r3, #2054	@ 0x806
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	69b9      	ldr	r1, [r7, #24]
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f001 fb7b 	bl	800f94c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e256:	69b8      	ldr	r0, [r7, #24]
 800e258:	f7f9 fa52 	bl	8007700 <pbuf_free>
  p = NULL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e260:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3720      	adds	r7, #32
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	08012d20 	.word	0x08012d20
 800e270:	08012e70 	.word	0x08012e70
 800e274:	08012d98 	.word	0x08012d98
 800e278:	08012f20 	.word	0x08012f20
 800e27c:	08012f54 	.word	0x08012f54

0800e280 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af04      	add	r7, sp, #16
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	60b9      	str	r1, [r7, #8]
 800e28a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e29c:	2201      	movs	r2, #1
 800e29e:	9203      	str	r2, [sp, #12]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	9202      	str	r2, [sp, #8]
 800e2a4:	4a06      	ldr	r2, [pc, #24]	@ (800e2c0 <etharp_request_dst+0x40>)
 800e2a6:	9201      	str	r2, [sp, #4]
 800e2a8:	9300      	str	r3, [sp, #0]
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f7ff ff5a 	bl	800e168 <etharp_raw>
 800e2b4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	080134e4 	.word	0x080134e4

0800e2c4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e2ce:	4a05      	ldr	r2, [pc, #20]	@ (800e2e4 <etharp_request+0x20>)
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7ff ffd4 	bl	800e280 <etharp_request_dst>
 800e2d8:	4603      	mov	r3, r0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	080134dc 	.word	0x080134dc

0800e2e8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b08e      	sub	sp, #56	@ 0x38
 800e2ec:	af04      	add	r7, sp, #16
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e2f2:	4b79      	ldr	r3, [pc, #484]	@ (800e4d8 <icmp_input+0x1f0>)
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	f003 030f 	and.w	r3, r3, #15
 800e300:	b2db      	uxtb	r3, r3
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	b2db      	uxtb	r3, r3
 800e306:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800e308:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e30a:	2b13      	cmp	r3, #19
 800e30c:	f240 80cd 	bls.w	800e4aa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	895b      	ldrh	r3, [r3, #10]
 800e314:	2b03      	cmp	r3, #3
 800e316:	f240 80ca 	bls.w	800e4ae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e324:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f000 80b7 	beq.w	800e49c <icmp_input+0x1b4>
 800e32e:	2b08      	cmp	r3, #8
 800e330:	f040 80b7 	bne.w	800e4a2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e334:	4b69      	ldr	r3, [pc, #420]	@ (800e4dc <icmp_input+0x1f4>)
 800e336:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e338:	4b67      	ldr	r3, [pc, #412]	@ (800e4d8 <icmp_input+0x1f0>)
 800e33a:	695b      	ldr	r3, [r3, #20]
 800e33c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e340:	2be0      	cmp	r3, #224	@ 0xe0
 800e342:	f000 80bb 	beq.w	800e4bc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e346:	4b64      	ldr	r3, [pc, #400]	@ (800e4d8 <icmp_input+0x1f0>)
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	4a63      	ldr	r2, [pc, #396]	@ (800e4d8 <icmp_input+0x1f0>)
 800e34c:	6812      	ldr	r2, [r2, #0]
 800e34e:	4611      	mov	r1, r2
 800e350:	4618      	mov	r0, r3
 800e352:	f000 fbed 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f040 80b1 	bne.w	800e4c0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	891b      	ldrh	r3, [r3, #8]
 800e362:	2b07      	cmp	r3, #7
 800e364:	f240 80a5 	bls.w	800e4b2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e368:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e36a:	330e      	adds	r3, #14
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7f9 f930 	bl	80075d4 <pbuf_add_header>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d04b      	beq.n	800e412 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	891a      	ldrh	r2, [r3, #8]
 800e37e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e380:	4413      	add	r3, r2
 800e382:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	891b      	ldrh	r3, [r3, #8]
 800e388:	8b7a      	ldrh	r2, [r7, #26]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	f0c0 809a 	bcc.w	800e4c4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e390:	8b7b      	ldrh	r3, [r7, #26]
 800e392:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e396:	4619      	mov	r1, r3
 800e398:	200e      	movs	r0, #14
 800e39a:	f7f8 fecd 	bl	8007138 <pbuf_alloc>
 800e39e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 8090 	beq.w	800e4c8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	895b      	ldrh	r3, [r3, #10]
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3b0:	3308      	adds	r3, #8
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d203      	bcs.n	800e3be <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e3b6:	6978      	ldr	r0, [r7, #20]
 800e3b8:	f7f9 f9a2 	bl	8007700 <pbuf_free>
          goto icmperr;
 800e3bc:	e085      	b.n	800e4ca <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e3c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f001 fce3 	bl	800fd92 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e3cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	6978      	ldr	r0, [r7, #20]
 800e3d2:	f7f9 f90f 	bl	80075f4 <pbuf_remove_header>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d009      	beq.n	800e3f0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e3dc:	4b40      	ldr	r3, [pc, #256]	@ (800e4e0 <icmp_input+0x1f8>)
 800e3de:	22b6      	movs	r2, #182	@ 0xb6
 800e3e0:	4940      	ldr	r1, [pc, #256]	@ (800e4e4 <icmp_input+0x1fc>)
 800e3e2:	4841      	ldr	r0, [pc, #260]	@ (800e4e8 <icmp_input+0x200>)
 800e3e4:	f001 fbfa 	bl	800fbdc <iprintf>
          pbuf_free(r);
 800e3e8:	6978      	ldr	r0, [r7, #20]
 800e3ea:	f7f9 f989 	bl	8007700 <pbuf_free>
          goto icmperr;
 800e3ee:	e06c      	b.n	800e4ca <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e3f0:	6879      	ldr	r1, [r7, #4]
 800e3f2:	6978      	ldr	r0, [r7, #20]
 800e3f4:	f7f9 fa9c 	bl	8007930 <pbuf_copy>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e3fe:	6978      	ldr	r0, [r7, #20]
 800e400:	f7f9 f97e 	bl	8007700 <pbuf_free>
          goto icmperr;
 800e404:	e061      	b.n	800e4ca <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7f9 f97a 	bl	8007700 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	607b      	str	r3, [r7, #4]
 800e410:	e00f      	b.n	800e432 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e412:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e414:	330e      	adds	r3, #14
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7f9 f8eb 	bl	80075f4 <pbuf_remove_header>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	d006      	beq.n	800e432 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e424:	4b2e      	ldr	r3, [pc, #184]	@ (800e4e0 <icmp_input+0x1f8>)
 800e426:	22c7      	movs	r2, #199	@ 0xc7
 800e428:	4930      	ldr	r1, [pc, #192]	@ (800e4ec <icmp_input+0x204>)
 800e42a:	482f      	ldr	r0, [pc, #188]	@ (800e4e8 <icmp_input+0x200>)
 800e42c:	f001 fbd6 	bl	800fbdc <iprintf>
          goto icmperr;
 800e430:	e04b      	b.n	800e4ca <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e438:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7f9 f8c9 	bl	80075d4 <pbuf_add_header>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d12b      	bne.n	800e4a0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	681a      	ldr	r2, [r3, #0]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e456:	4b20      	ldr	r3, [pc, #128]	@ (800e4d8 <icmp_input+0x1f0>)
 800e458:	691a      	ldr	r2, [r3, #16]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	2200      	movs	r2, #0
 800e462:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	2200      	movs	r2, #0
 800e468:	709a      	strb	r2, [r3, #2]
 800e46a:	2200      	movs	r2, #0
 800e46c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	22ff      	movs	r2, #255	@ 0xff
 800e472:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2200      	movs	r2, #0
 800e478:	729a      	strb	r2, [r3, #10]
 800e47a:	2200      	movs	r2, #0
 800e47c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	9302      	str	r3, [sp, #8]
 800e482:	2301      	movs	r3, #1
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	2300      	movs	r3, #0
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	23ff      	movs	r3, #255	@ 0xff
 800e48c:	2200      	movs	r2, #0
 800e48e:	69f9      	ldr	r1, [r7, #28]
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fa75 	bl	800e980 <ip4_output_if>
 800e496:	4603      	mov	r3, r0
 800e498:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e49a:	e001      	b.n	800e4a0 <icmp_input+0x1b8>
      break;
 800e49c:	bf00      	nop
 800e49e:	e000      	b.n	800e4a2 <icmp_input+0x1ba>
      break;
 800e4a0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7f9 f92c 	bl	8007700 <pbuf_free>
  return;
 800e4a8:	e013      	b.n	800e4d2 <icmp_input+0x1ea>
    goto lenerr;
 800e4aa:	bf00      	nop
 800e4ac:	e002      	b.n	800e4b4 <icmp_input+0x1cc>
    goto lenerr;
 800e4ae:	bf00      	nop
 800e4b0:	e000      	b.n	800e4b4 <icmp_input+0x1cc>
        goto lenerr;
 800e4b2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7f9 f923 	bl	8007700 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e4ba:	e00a      	b.n	800e4d2 <icmp_input+0x1ea>
        goto icmperr;
 800e4bc:	bf00      	nop
 800e4be:	e004      	b.n	800e4ca <icmp_input+0x1e2>
        goto icmperr;
 800e4c0:	bf00      	nop
 800e4c2:	e002      	b.n	800e4ca <icmp_input+0x1e2>
          goto icmperr;
 800e4c4:	bf00      	nop
 800e4c6:	e000      	b.n	800e4ca <icmp_input+0x1e2>
          goto icmperr;
 800e4c8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7f9 f918 	bl	8007700 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e4d0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e4d2:	3728      	adds	r7, #40	@ 0x28
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	20005298 	.word	0x20005298
 800e4dc:	200052ac 	.word	0x200052ac
 800e4e0:	08012f98 	.word	0x08012f98
 800e4e4:	08012fd0 	.word	0x08012fd0
 800e4e8:	08013008 	.word	0x08013008
 800e4ec:	08013030 	.word	0x08013030

0800e4f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e4fc:	78fb      	ldrb	r3, [r7, #3]
 800e4fe:	461a      	mov	r2, r3
 800e500:	2103      	movs	r1, #3
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f814 	bl	800e530 <icmp_send_response>
}
 800e508:	bf00      	nop
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	460b      	mov	r3, r1
 800e51a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e51c:	78fb      	ldrb	r3, [r7, #3]
 800e51e:	461a      	mov	r2, r3
 800e520:	210b      	movs	r1, #11
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f804 	bl	800e530 <icmp_send_response>
}
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08c      	sub	sp, #48	@ 0x30
 800e534:	af04      	add	r7, sp, #16
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	70fb      	strb	r3, [r7, #3]
 800e53c:	4613      	mov	r3, r2
 800e53e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e540:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e544:	2124      	movs	r1, #36	@ 0x24
 800e546:	2022      	movs	r0, #34	@ 0x22
 800e548:	f7f8 fdf6 	bl	8007138 <pbuf_alloc>
 800e54c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d04c      	beq.n	800e5ee <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	895b      	ldrh	r3, [r3, #10]
 800e558:	2b23      	cmp	r3, #35	@ 0x23
 800e55a:	d806      	bhi.n	800e56a <icmp_send_response+0x3a>
 800e55c:	4b26      	ldr	r3, [pc, #152]	@ (800e5f8 <icmp_send_response+0xc8>)
 800e55e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800e562:	4926      	ldr	r1, [pc, #152]	@ (800e5fc <icmp_send_response+0xcc>)
 800e564:	4826      	ldr	r0, [pc, #152]	@ (800e600 <icmp_send_response+0xd0>)
 800e566:	f001 fb39 	bl	800fbdc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	78fa      	ldrb	r2, [r7, #3]
 800e57a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	78ba      	ldrb	r2, [r7, #2]
 800e580:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	2200      	movs	r2, #0
 800e586:	711a      	strb	r2, [r3, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	2200      	movs	r2, #0
 800e590:	719a      	strb	r2, [r3, #6]
 800e592:	2200      	movs	r2, #0
 800e594:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	f103 0008 	add.w	r0, r3, #8
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	221c      	movs	r2, #28
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	f001 fbf4 	bl	800fd92 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e5b0:	f107 030c 	add.w	r3, r7, #12
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f000 f825 	bl	800e604 <ip4_route>
 800e5ba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d011      	beq.n	800e5e6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	709a      	strb	r2, [r3, #2]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e5cc:	f107 020c 	add.w	r2, r7, #12
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	9302      	str	r3, [sp, #8]
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	9301      	str	r3, [sp, #4]
 800e5d8:	2300      	movs	r3, #0
 800e5da:	9300      	str	r3, [sp, #0]
 800e5dc:	23ff      	movs	r3, #255	@ 0xff
 800e5de:	2100      	movs	r1, #0
 800e5e0:	69f8      	ldr	r0, [r7, #28]
 800e5e2:	f000 f9cd 	bl	800e980 <ip4_output_if>
  }
  pbuf_free(q);
 800e5e6:	69f8      	ldr	r0, [r7, #28]
 800e5e8:	f7f9 f88a 	bl	8007700 <pbuf_free>
 800e5ec:	e000      	b.n	800e5f0 <icmp_send_response+0xc0>
    return;
 800e5ee:	bf00      	nop
}
 800e5f0:	3720      	adds	r7, #32
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	08012f98 	.word	0x08012f98
 800e5fc:	08013064 	.word	0x08013064
 800e600:	08013008 	.word	0x08013008

0800e604 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e60c:	4b33      	ldr	r3, [pc, #204]	@ (800e6dc <ip4_route+0xd8>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	60fb      	str	r3, [r7, #12]
 800e612:	e036      	b.n	800e682 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e61a:	f003 0301 	and.w	r3, r3, #1
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	2b00      	cmp	r3, #0
 800e622:	d02b      	beq.n	800e67c <ip4_route+0x78>
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e62a:	089b      	lsrs	r3, r3, #2
 800e62c:	f003 0301 	and.w	r3, r3, #1
 800e630:	b2db      	uxtb	r3, r3
 800e632:	2b00      	cmp	r3, #0
 800e634:	d022      	beq.n	800e67c <ip4_route+0x78>
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3304      	adds	r3, #4
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d01d      	beq.n	800e67c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681a      	ldr	r2, [r3, #0]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	3304      	adds	r3, #4
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	405a      	eors	r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	3308      	adds	r3, #8
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4013      	ands	r3, r2
 800e654:	2b00      	cmp	r3, #0
 800e656:	d101      	bne.n	800e65c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	e038      	b.n	800e6ce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e662:	f003 0302 	and.w	r3, r3, #2
 800e666:	2b00      	cmp	r3, #0
 800e668:	d108      	bne.n	800e67c <ip4_route+0x78>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	330c      	adds	r3, #12
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	429a      	cmp	r2, r3
 800e676:	d101      	bne.n	800e67c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	e028      	b.n	800e6ce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	60fb      	str	r3, [r7, #12]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1c5      	bne.n	800e614 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e688:	4b15      	ldr	r3, [pc, #84]	@ (800e6e0 <ip4_route+0xdc>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d01a      	beq.n	800e6c6 <ip4_route+0xc2>
 800e690:	4b13      	ldr	r3, [pc, #76]	@ (800e6e0 <ip4_route+0xdc>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e698:	f003 0301 	and.w	r3, r3, #1
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d012      	beq.n	800e6c6 <ip4_route+0xc2>
 800e6a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e6e0 <ip4_route+0xdc>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e6a8:	f003 0304 	and.w	r3, r3, #4
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00a      	beq.n	800e6c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800e6e0 <ip4_route+0xdc>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	3304      	adds	r3, #4
 800e6b6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d004      	beq.n	800e6c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e6c4:	d101      	bne.n	800e6ca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e001      	b.n	800e6ce <ip4_route+0xca>
  }

  return netif_default;
 800e6ca:	4b05      	ldr	r3, [pc, #20]	@ (800e6e0 <ip4_route+0xdc>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3714      	adds	r7, #20
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	200081a8 	.word	0x200081a8
 800e6e0:	200081ac 	.word	0x200081ac

0800e6e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d016      	beq.n	800e72a <ip4_input_accept+0x46>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	3304      	adds	r3, #4
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d011      	beq.n	800e72a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e706:	4b0b      	ldr	r3, [pc, #44]	@ (800e734 <ip4_input_accept+0x50>)
 800e708:	695a      	ldr	r2, [r3, #20]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3304      	adds	r3, #4
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	429a      	cmp	r2, r3
 800e712:	d008      	beq.n	800e726 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e714:	4b07      	ldr	r3, [pc, #28]	@ (800e734 <ip4_input_accept+0x50>)
 800e716:	695b      	ldr	r3, [r3, #20]
 800e718:	6879      	ldr	r1, [r7, #4]
 800e71a:	4618      	mov	r0, r3
 800e71c:	f000 fa08 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 800e720:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e726:	2301      	movs	r3, #1
 800e728:	e000      	b.n	800e72c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20005298 	.word	0x20005298

0800e738 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	091b      	lsrs	r3, r3, #4
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	2b04      	cmp	r3, #4
 800e752:	d004      	beq.n	800e75e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f7f8 ffd3 	bl	8007700 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e75a:	2300      	movs	r3, #0
 800e75c:	e107      	b.n	800e96e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	f003 030f 	and.w	r3, r3, #15
 800e766:	b2db      	uxtb	r3, r3
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	885b      	ldrh	r3, [r3, #2]
 800e772:	b29b      	uxth	r3, r3
 800e774:	4618      	mov	r0, r3
 800e776:	f7f7 fc89 	bl	800608c <lwip_htons>
 800e77a:	4603      	mov	r3, r0
 800e77c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	891b      	ldrh	r3, [r3, #8]
 800e782:	89ba      	ldrh	r2, [r7, #12]
 800e784:	429a      	cmp	r2, r3
 800e786:	d204      	bcs.n	800e792 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e788:	89bb      	ldrh	r3, [r7, #12]
 800e78a:	4619      	mov	r1, r3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7f8 fe31 	bl	80073f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	895b      	ldrh	r3, [r3, #10]
 800e796:	89fa      	ldrh	r2, [r7, #14]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d807      	bhi.n	800e7ac <ip4_input+0x74>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	891b      	ldrh	r3, [r3, #8]
 800e7a0:	89ba      	ldrh	r2, [r7, #12]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d802      	bhi.n	800e7ac <ip4_input+0x74>
 800e7a6:	89fb      	ldrh	r3, [r7, #14]
 800e7a8:	2b13      	cmp	r3, #19
 800e7aa:	d804      	bhi.n	800e7b6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7f8 ffa7 	bl	8007700 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	e0db      	b.n	800e96e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	4a6f      	ldr	r2, [pc, #444]	@ (800e978 <ip4_input+0x240>)
 800e7bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	4a6d      	ldr	r2, [pc, #436]	@ (800e978 <ip4_input+0x240>)
 800e7c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e7c6:	4b6c      	ldr	r3, [pc, #432]	@ (800e978 <ip4_input+0x240>)
 800e7c8:	695b      	ldr	r3, [r3, #20]
 800e7ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e7ce:	2be0      	cmp	r3, #224	@ 0xe0
 800e7d0:	d112      	bne.n	800e7f8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e7d8:	f003 0301 	and.w	r3, r3, #1
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d007      	beq.n	800e7f2 <ip4_input+0xba>
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d002      	beq.n	800e7f2 <ip4_input+0xba>
      netif = inp;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	613b      	str	r3, [r7, #16]
 800e7f0:	e02a      	b.n	800e848 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	613b      	str	r3, [r7, #16]
 800e7f6:	e027      	b.n	800e848 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e7f8:	6838      	ldr	r0, [r7, #0]
 800e7fa:	f7ff ff73 	bl	800e6e4 <ip4_input_accept>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d002      	beq.n	800e80a <ip4_input+0xd2>
      netif = inp;
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	613b      	str	r3, [r7, #16]
 800e808:	e01e      	b.n	800e848 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e80a:	2300      	movs	r3, #0
 800e80c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e80e:	4b5a      	ldr	r3, [pc, #360]	@ (800e978 <ip4_input+0x240>)
 800e810:	695b      	ldr	r3, [r3, #20]
 800e812:	b2db      	uxtb	r3, r3
 800e814:	2b7f      	cmp	r3, #127	@ 0x7f
 800e816:	d017      	beq.n	800e848 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e818:	4b58      	ldr	r3, [pc, #352]	@ (800e97c <ip4_input+0x244>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	613b      	str	r3, [r7, #16]
 800e81e:	e00e      	b.n	800e83e <ip4_input+0x106>
          if (netif == inp) {
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	429a      	cmp	r2, r3
 800e826:	d006      	beq.n	800e836 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e828:	6938      	ldr	r0, [r7, #16]
 800e82a:	f7ff ff5b 	bl	800e6e4 <ip4_input_accept>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d108      	bne.n	800e846 <ip4_input+0x10e>
 800e834:	e000      	b.n	800e838 <ip4_input+0x100>
            continue;
 800e836:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	613b      	str	r3, [r7, #16]
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1ed      	bne.n	800e820 <ip4_input+0xe8>
 800e844:	e000      	b.n	800e848 <ip4_input+0x110>
            break;
 800e846:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e848:	4b4b      	ldr	r3, [pc, #300]	@ (800e978 <ip4_input+0x240>)
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	6839      	ldr	r1, [r7, #0]
 800e84e:	4618      	mov	r0, r3
 800e850:	f000 f96e 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d105      	bne.n	800e866 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e85a:	4b47      	ldr	r3, [pc, #284]	@ (800e978 <ip4_input+0x240>)
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e862:	2be0      	cmp	r3, #224	@ 0xe0
 800e864:	d104      	bne.n	800e870 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7f8 ff4a 	bl	8007700 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	e07e      	b.n	800e96e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d104      	bne.n	800e880 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7f8 ff42 	bl	8007700 <pbuf_free>
    return ERR_OK;
 800e87c:	2300      	movs	r3, #0
 800e87e:	e076      	b.n	800e96e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	88db      	ldrh	r3, [r3, #6]
 800e884:	b29b      	uxth	r3, r3
 800e886:	461a      	mov	r2, r3
 800e888:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800e88c:	4013      	ands	r3, r2
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00b      	beq.n	800e8aa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 fc92 	bl	800f1bc <ip4_reass>
 800e898:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <ip4_input+0x16c>
      return ERR_OK;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	e064      	b.n	800e96e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e8aa:	4a33      	ldr	r2, [pc, #204]	@ (800e978 <ip4_input+0x240>)
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e8b0:	4a31      	ldr	r2, [pc, #196]	@ (800e978 <ip4_input+0x240>)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e8b6:	4a30      	ldr	r2, [pc, #192]	@ (800e978 <ip4_input+0x240>)
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	f003 030f 	and.w	r3, r3, #15
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	4b2a      	ldr	r3, [pc, #168]	@ (800e978 <ip4_input+0x240>)
 800e8ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e8d0:	89fb      	ldrh	r3, [r7, #14]
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7f8 fe8d 	bl	80075f4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	7a5b      	ldrb	r3, [r3, #9]
 800e8de:	2b11      	cmp	r3, #17
 800e8e0:	d006      	beq.n	800e8f0 <ip4_input+0x1b8>
 800e8e2:	2b11      	cmp	r3, #17
 800e8e4:	dc13      	bgt.n	800e90e <ip4_input+0x1d6>
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d00c      	beq.n	800e904 <ip4_input+0x1cc>
 800e8ea:	2b06      	cmp	r3, #6
 800e8ec:	d005      	beq.n	800e8fa <ip4_input+0x1c2>
 800e8ee:	e00e      	b.n	800e90e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e8f0:	6839      	ldr	r1, [r7, #0]
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f7fe fc68 	bl	800d1c8 <udp_input>
        break;
 800e8f8:	e026      	b.n	800e948 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7fa fd29 	bl	8009354 <tcp_input>
        break;
 800e902:	e021      	b.n	800e948 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e904:	6839      	ldr	r1, [r7, #0]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f7ff fcee 	bl	800e2e8 <icmp_input>
        break;
 800e90c:	e01c      	b.n	800e948 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e90e:	4b1a      	ldr	r3, [pc, #104]	@ (800e978 <ip4_input+0x240>)
 800e910:	695b      	ldr	r3, [r3, #20]
 800e912:	6939      	ldr	r1, [r7, #16]
 800e914:	4618      	mov	r0, r3
 800e916:	f000 f90b 	bl	800eb30 <ip4_addr_isbroadcast_u32>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d10f      	bne.n	800e940 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e920:	4b15      	ldr	r3, [pc, #84]	@ (800e978 <ip4_input+0x240>)
 800e922:	695b      	ldr	r3, [r3, #20]
 800e924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e928:	2be0      	cmp	r3, #224	@ 0xe0
 800e92a:	d009      	beq.n	800e940 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e92c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e930:	4619      	mov	r1, r3
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7f8 fed1 	bl	80076da <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e938:	2102      	movs	r1, #2
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7ff fdd8 	bl	800e4f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f7f8 fedd 	bl	8007700 <pbuf_free>
        break;
 800e946:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e948:	4b0b      	ldr	r3, [pc, #44]	@ (800e978 <ip4_input+0x240>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e94e:	4b0a      	ldr	r3, [pc, #40]	@ (800e978 <ip4_input+0x240>)
 800e950:	2200      	movs	r2, #0
 800e952:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e954:	4b08      	ldr	r3, [pc, #32]	@ (800e978 <ip4_input+0x240>)
 800e956:	2200      	movs	r2, #0
 800e958:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e95a:	4b07      	ldr	r3, [pc, #28]	@ (800e978 <ip4_input+0x240>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e960:	4b05      	ldr	r3, [pc, #20]	@ (800e978 <ip4_input+0x240>)
 800e962:	2200      	movs	r2, #0
 800e964:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e966:	4b04      	ldr	r3, [pc, #16]	@ (800e978 <ip4_input+0x240>)
 800e968:	2200      	movs	r2, #0
 800e96a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3718      	adds	r7, #24
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	20005298 	.word	0x20005298
 800e97c:	200081a8 	.word	0x200081a8

0800e980 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b08a      	sub	sp, #40	@ 0x28
 800e984:	af04      	add	r7, sp, #16
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
 800e98c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d009      	beq.n	800e9ac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d003      	beq.n	800e9a6 <ip4_output_if+0x26>
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d102      	bne.n	800e9ac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e9ac:	78fa      	ldrb	r2, [r7, #3]
 800e9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b0:	9302      	str	r3, [sp, #8]
 800e9b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e9b6:	9301      	str	r3, [sp, #4]
 800e9b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	6979      	ldr	r1, [r7, #20]
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f000 f805 	bl	800e9d4 <ip4_output_if_src>
 800e9ca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3718      	adds	r7, #24
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b088      	sub	sp, #32
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
 800e9e0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	7b9b      	ldrb	r3, [r3, #14]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d006      	beq.n	800e9f8 <ip4_output_if_src+0x24>
 800e9ea:	4b4b      	ldr	r3, [pc, #300]	@ (800eb18 <ip4_output_if_src+0x144>)
 800e9ec:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800e9f0:	494a      	ldr	r1, [pc, #296]	@ (800eb1c <ip4_output_if_src+0x148>)
 800e9f2:	484b      	ldr	r0, [pc, #300]	@ (800eb20 <ip4_output_if_src+0x14c>)
 800e9f4:	f001 f8f2 	bl	800fbdc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d060      	beq.n	800eac0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e9fe:	2314      	movs	r3, #20
 800ea00:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ea02:	2114      	movs	r1, #20
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f7f8 fde5 	bl	80075d4 <pbuf_add_header>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d002      	beq.n	800ea16 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ea10:	f06f 0301 	mvn.w	r3, #1
 800ea14:	e07c      	b.n	800eb10 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	895b      	ldrh	r3, [r3, #10]
 800ea20:	2b13      	cmp	r3, #19
 800ea22:	d806      	bhi.n	800ea32 <ip4_output_if_src+0x5e>
 800ea24:	4b3c      	ldr	r3, [pc, #240]	@ (800eb18 <ip4_output_if_src+0x144>)
 800ea26:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800ea2a:	493e      	ldr	r1, [pc, #248]	@ (800eb24 <ip4_output_if_src+0x150>)
 800ea2c:	483c      	ldr	r0, [pc, #240]	@ (800eb20 <ip4_output_if_src+0x14c>)
 800ea2e:	f001 f8d5 	bl	800fbdc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	78fa      	ldrb	r2, [r7, #3]
 800ea36:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800ea3e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ea48:	8b7b      	ldrh	r3, [r7, #26]
 800ea4a:	089b      	lsrs	r3, r3, #2
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea54:	b2da      	uxtb	r2, r3
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ea60:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	891b      	ldrh	r3, [r3, #8]
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7f7 fb10 	bl	800608c <lwip_htons>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	2200      	movs	r2, #0
 800ea78:	719a      	strb	r2, [r3, #6]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ea7e:	4b2a      	ldr	r3, [pc, #168]	@ (800eb28 <ip4_output_if_src+0x154>)
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7f7 fb02 	bl	800608c <lwip_htons>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ea90:	4b25      	ldr	r3, [pc, #148]	@ (800eb28 <ip4_output_if_src+0x154>)
 800ea92:	881b      	ldrh	r3, [r3, #0]
 800ea94:	3301      	adds	r3, #1
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	4b23      	ldr	r3, [pc, #140]	@ (800eb28 <ip4_output_if_src+0x154>)
 800ea9a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d104      	bne.n	800eaac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800eaa2:	4b22      	ldr	r3, [pc, #136]	@ (800eb2c <ip4_output_if_src+0x158>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	60da      	str	r2, [r3, #12]
 800eaaa:	e003      	b.n	800eab4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	2200      	movs	r2, #0
 800eab8:	729a      	strb	r2, [r3, #10]
 800eaba:	2200      	movs	r2, #0
 800eabc:	72da      	strb	r2, [r3, #11]
 800eabe:	e00f      	b.n	800eae0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	895b      	ldrh	r3, [r3, #10]
 800eac4:	2b13      	cmp	r3, #19
 800eac6:	d802      	bhi.n	800eace <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eac8:	f06f 0301 	mvn.w	r3, #1
 800eacc:	e020      	b.n	800eb10 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	691b      	ldr	r3, [r3, #16]
 800ead8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eada:	f107 0314 	add.w	r3, r7, #20
 800eade:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800eae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00c      	beq.n	800eb02 <ip4_output_if_src+0x12e>
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	891a      	ldrh	r2, [r3, #8]
 800eaec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d906      	bls.n	800eb02 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f000 fd53 	bl	800f5a4 <ip4_frag>
 800eafe:	4603      	mov	r3, r0
 800eb00:	e006      	b.n	800eb10 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	68f9      	ldr	r1, [r7, #12]
 800eb0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb0c:	4798      	blx	r3
 800eb0e:	4603      	mov	r3, r0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3720      	adds	r7, #32
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	08013090 	.word	0x08013090
 800eb1c:	080130c4 	.word	0x080130c4
 800eb20:	080130d0 	.word	0x080130d0
 800eb24:	080130f8 	.word	0x080130f8
 800eb28:	20008306 	.word	0x20008306
 800eb2c:	080134d8 	.word	0x080134d8

0800eb30 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb44:	d002      	beq.n	800eb4c <ip4_addr_isbroadcast_u32+0x1c>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d101      	bne.n	800eb50 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e02a      	b.n	800eba6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eb56:	f003 0302 	and.w	r3, r3, #2
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d101      	bne.n	800eb62 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	e021      	b.n	800eba6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	3304      	adds	r3, #4
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d101      	bne.n	800eb72 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e019      	b.n	800eba6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	3304      	adds	r3, #4
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	405a      	eors	r2, r3
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4013      	ands	r3, r2
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10d      	bne.n	800eba4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	3308      	adds	r3, #8
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	43da      	mvns	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	3308      	adds	r3, #8
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d101      	bne.n	800eba4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800eba0:	2301      	movs	r3, #1
 800eba2:	e000      	b.n	800eba6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800eba4:	2300      	movs	r3, #0
  }
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3714      	adds	r7, #20
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
	...

0800ebb4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b084      	sub	sp, #16
 800ebb8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ebbe:	4b12      	ldr	r3, [pc, #72]	@ (800ec08 <ip_reass_tmr+0x54>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ebc4:	e018      	b.n	800ebf8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	7fdb      	ldrb	r3, [r3, #31]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d00b      	beq.n	800ebe6 <ip_reass_tmr+0x32>
      r->timer--;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	7fdb      	ldrb	r3, [r3, #31]
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	60fb      	str	r3, [r7, #12]
 800ebe4:	e008      	b.n	800ebf8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ebf0:	68b9      	ldr	r1, [r7, #8]
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 f80a 	bl	800ec0c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1e3      	bne.n	800ebc6 <ip_reass_tmr+0x12>
    }
  }
}
 800ebfe:	bf00      	nop
 800ec00:	bf00      	nop
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20008308 	.word	0x20008308

0800ec0c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d105      	bne.n	800ec2e <ip_reass_free_complete_datagram+0x22>
 800ec22:	4b45      	ldr	r3, [pc, #276]	@ (800ed38 <ip_reass_free_complete_datagram+0x12c>)
 800ec24:	22ab      	movs	r2, #171	@ 0xab
 800ec26:	4945      	ldr	r1, [pc, #276]	@ (800ed3c <ip_reass_free_complete_datagram+0x130>)
 800ec28:	4845      	ldr	r0, [pc, #276]	@ (800ed40 <ip_reass_free_complete_datagram+0x134>)
 800ec2a:	f000 ffd7 	bl	800fbdc <iprintf>
  if (prev != NULL) {
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00a      	beq.n	800ec4a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d005      	beq.n	800ec4a <ip_reass_free_complete_datagram+0x3e>
 800ec3e:	4b3e      	ldr	r3, [pc, #248]	@ (800ed38 <ip_reass_free_complete_datagram+0x12c>)
 800ec40:	22ad      	movs	r2, #173	@ 0xad
 800ec42:	4940      	ldr	r1, [pc, #256]	@ (800ed44 <ip_reass_free_complete_datagram+0x138>)
 800ec44:	483e      	ldr	r0, [pc, #248]	@ (800ed40 <ip_reass_free_complete_datagram+0x134>)
 800ec46:	f000 ffc9 	bl	800fbdc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	889b      	ldrh	r3, [r3, #4]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d12a      	bne.n	800ecb2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	6858      	ldr	r0, [r3, #4]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	3308      	adds	r3, #8
 800ec72:	2214      	movs	r2, #20
 800ec74:	4619      	mov	r1, r3
 800ec76:	f001 f88c 	bl	800fd92 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ec7a:	2101      	movs	r1, #1
 800ec7c:	69b8      	ldr	r0, [r7, #24]
 800ec7e:	f7ff fc47 	bl	800e510 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ec82:	69b8      	ldr	r0, [r7, #24]
 800ec84:	f7f8 fdc4 	bl	8007810 <pbuf_clen>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ec8c:	8bfa      	ldrh	r2, [r7, #30]
 800ec8e:	8a7b      	ldrh	r3, [r7, #18]
 800ec90:	4413      	add	r3, r2
 800ec92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec96:	db05      	blt.n	800eca4 <ip_reass_free_complete_datagram+0x98>
 800ec98:	4b27      	ldr	r3, [pc, #156]	@ (800ed38 <ip_reass_free_complete_datagram+0x12c>)
 800ec9a:	22bc      	movs	r2, #188	@ 0xbc
 800ec9c:	492a      	ldr	r1, [pc, #168]	@ (800ed48 <ip_reass_free_complete_datagram+0x13c>)
 800ec9e:	4828      	ldr	r0, [pc, #160]	@ (800ed40 <ip_reass_free_complete_datagram+0x134>)
 800eca0:	f000 ff9c 	bl	800fbdc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800eca4:	8bfa      	ldrh	r2, [r7, #30]
 800eca6:	8a7b      	ldrh	r3, [r7, #18]
 800eca8:	4413      	add	r3, r2
 800ecaa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ecac:	69b8      	ldr	r0, [r7, #24]
 800ecae:	f7f8 fd27 	bl	8007700 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ecb8:	e01f      	b.n	800ecfa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f7f8 fda0 	bl	8007810 <pbuf_clen>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ecd4:	8bfa      	ldrh	r2, [r7, #30]
 800ecd6:	8a7b      	ldrh	r3, [r7, #18]
 800ecd8:	4413      	add	r3, r2
 800ecda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecde:	db05      	blt.n	800ecec <ip_reass_free_complete_datagram+0xe0>
 800ece0:	4b15      	ldr	r3, [pc, #84]	@ (800ed38 <ip_reass_free_complete_datagram+0x12c>)
 800ece2:	22cc      	movs	r2, #204	@ 0xcc
 800ece4:	4918      	ldr	r1, [pc, #96]	@ (800ed48 <ip_reass_free_complete_datagram+0x13c>)
 800ece6:	4816      	ldr	r0, [pc, #88]	@ (800ed40 <ip_reass_free_complete_datagram+0x134>)
 800ece8:	f000 ff78 	bl	800fbdc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ecec:	8bfa      	ldrh	r2, [r7, #30]
 800ecee:	8a7b      	ldrh	r3, [r7, #18]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f7f8 fd03 	bl	8007700 <pbuf_free>
  while (p != NULL) {
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d1dc      	bne.n	800ecba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ed00:	6839      	ldr	r1, [r7, #0]
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 f8c2 	bl	800ee8c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ed08:	4b10      	ldr	r3, [pc, #64]	@ (800ed4c <ip_reass_free_complete_datagram+0x140>)
 800ed0a:	881b      	ldrh	r3, [r3, #0]
 800ed0c:	8bfa      	ldrh	r2, [r7, #30]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d905      	bls.n	800ed1e <ip_reass_free_complete_datagram+0x112>
 800ed12:	4b09      	ldr	r3, [pc, #36]	@ (800ed38 <ip_reass_free_complete_datagram+0x12c>)
 800ed14:	22d2      	movs	r2, #210	@ 0xd2
 800ed16:	490e      	ldr	r1, [pc, #56]	@ (800ed50 <ip_reass_free_complete_datagram+0x144>)
 800ed18:	4809      	ldr	r0, [pc, #36]	@ (800ed40 <ip_reass_free_complete_datagram+0x134>)
 800ed1a:	f000 ff5f 	bl	800fbdc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ed1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ed4c <ip_reass_free_complete_datagram+0x140>)
 800ed20:	881a      	ldrh	r2, [r3, #0]
 800ed22:	8bfb      	ldrh	r3, [r7, #30]
 800ed24:	1ad3      	subs	r3, r2, r3
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	4b08      	ldr	r3, [pc, #32]	@ (800ed4c <ip_reass_free_complete_datagram+0x140>)
 800ed2a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ed2c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3720      	adds	r7, #32
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	08013128 	.word	0x08013128
 800ed3c:	08013164 	.word	0x08013164
 800ed40:	08013170 	.word	0x08013170
 800ed44:	08013198 	.word	0x08013198
 800ed48:	080131ac 	.word	0x080131ac
 800ed4c:	2000830c 	.word	0x2000830c
 800ed50:	080131cc 	.word	0x080131cc

0800ed54 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b08a      	sub	sp, #40	@ 0x28
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ed62:	2300      	movs	r3, #0
 800ed64:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ed66:	2300      	movs	r3, #0
 800ed68:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ed72:	4b28      	ldr	r3, [pc, #160]	@ (800ee14 <ip_reass_remove_oldest_datagram+0xc0>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ed78:	e030      	b.n	800eddc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7c:	695a      	ldr	r2, [r3, #20]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d10c      	bne.n	800eda0 <ip_reass_remove_oldest_datagram+0x4c>
 800ed86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed88:	699a      	ldr	r2, [r3, #24]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	691b      	ldr	r3, [r3, #16]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d106      	bne.n	800eda0 <ip_reass_remove_oldest_datagram+0x4c>
 800ed92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed94:	899a      	ldrh	r2, [r3, #12]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	889b      	ldrh	r3, [r3, #4]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d014      	beq.n	800edca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	3301      	adds	r3, #1
 800eda4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d104      	bne.n	800edb6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800edac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	61bb      	str	r3, [r7, #24]
 800edb4:	e009      	b.n	800edca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800edb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edb8:	7fda      	ldrb	r2, [r3, #31]
 800edba:	6a3b      	ldr	r3, [r7, #32]
 800edbc:	7fdb      	ldrb	r3, [r3, #31]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d803      	bhi.n	800edca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800edc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edc4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800edca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800edd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800edd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800eddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1cb      	bne.n	800ed7a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ede2:	6a3b      	ldr	r3, [r7, #32]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d008      	beq.n	800edfa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ede8:	69b9      	ldr	r1, [r7, #24]
 800edea:	6a38      	ldr	r0, [r7, #32]
 800edec:	f7ff ff0e 	bl	800ec0c <ip_reass_free_complete_datagram>
 800edf0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	4413      	add	r3, r2
 800edf8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	da02      	bge.n	800ee08 <ip_reass_remove_oldest_datagram+0xb4>
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	dcac      	bgt.n	800ed62 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ee08:	697b      	ldr	r3, [r7, #20]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3728      	adds	r7, #40	@ 0x28
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	20008308 	.word	0x20008308

0800ee18 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ee22:	2004      	movs	r0, #4
 800ee24:	f7f7 fda6 	bl	8006974 <memp_malloc>
 800ee28:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d110      	bne.n	800ee52 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ee30:	6839      	ldr	r1, [r7, #0]
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff ff8e 	bl	800ed54 <ip_reass_remove_oldest_datagram>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	dc03      	bgt.n	800ee48 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ee40:	2004      	movs	r0, #4
 800ee42:	f7f7 fd97 	bl	8006974 <memp_malloc>
 800ee46:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d101      	bne.n	800ee52 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	e016      	b.n	800ee80 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ee52:	2220      	movs	r2, #32
 800ee54:	2100      	movs	r1, #0
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f000 ff25 	bl	800fca6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	220f      	movs	r2, #15
 800ee60:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ee62:	4b09      	ldr	r3, [pc, #36]	@ (800ee88 <ip_reass_enqueue_new_datagram+0x70>)
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ee6a:	4a07      	ldr	r2, [pc, #28]	@ (800ee88 <ip_reass_enqueue_new_datagram+0x70>)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	3308      	adds	r3, #8
 800ee74:	2214      	movs	r2, #20
 800ee76:	6879      	ldr	r1, [r7, #4]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f000 ff8a 	bl	800fd92 <memcpy>
  return ipr;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	20008308 	.word	0x20008308

0800ee8c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ee96:	4b10      	ldr	r3, [pc, #64]	@ (800eed8 <ip_reass_dequeue_datagram+0x4c>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d104      	bne.n	800eeaa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a0c      	ldr	r2, [pc, #48]	@ (800eed8 <ip_reass_dequeue_datagram+0x4c>)
 800eea6:	6013      	str	r3, [r2, #0]
 800eea8:	e00d      	b.n	800eec6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d106      	bne.n	800eebe <ip_reass_dequeue_datagram+0x32>
 800eeb0:	4b0a      	ldr	r3, [pc, #40]	@ (800eedc <ip_reass_dequeue_datagram+0x50>)
 800eeb2:	f240 1245 	movw	r2, #325	@ 0x145
 800eeb6:	490a      	ldr	r1, [pc, #40]	@ (800eee0 <ip_reass_dequeue_datagram+0x54>)
 800eeb8:	480a      	ldr	r0, [pc, #40]	@ (800eee4 <ip_reass_dequeue_datagram+0x58>)
 800eeba:	f000 fe8f 	bl	800fbdc <iprintf>
    prev->next = ipr->next;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800eec6:	6879      	ldr	r1, [r7, #4]
 800eec8:	2004      	movs	r0, #4
 800eeca:	f7f7 fdc3 	bl	8006a54 <memp_free>
}
 800eece:	bf00      	nop
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	20008308 	.word	0x20008308
 800eedc:	08013128 	.word	0x08013128
 800eee0:	080131f0 	.word	0x080131f0
 800eee4:	08013170 	.word	0x08013170

0800eee8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b08c      	sub	sp, #48	@ 0x30
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800eef4:	2300      	movs	r3, #0
 800eef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800eef8:	2301      	movs	r3, #1
 800eefa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	885b      	ldrh	r3, [r3, #2]
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7f7 f8bf 	bl	800608c <lwip_htons>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	f003 030f 	and.w	r3, r3, #15
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800ef20:	7e7b      	ldrb	r3, [r7, #25]
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	8b7a      	ldrh	r2, [r7, #26]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d202      	bcs.n	800ef30 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ef2e:	e135      	b.n	800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800ef30:	7e7b      	ldrb	r3, [r7, #25]
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	8b7a      	ldrh	r2, [r7, #26]
 800ef36:	1ad3      	subs	r3, r2, r3
 800ef38:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	88db      	ldrh	r3, [r3, #6]
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7f7 f8a3 	bl	800608c <lwip_htons>
 800ef46:	4603      	mov	r3, r0
 800ef48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	00db      	lsls	r3, r3, #3
 800ef50:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800ef58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	701a      	strb	r2, [r3, #0]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	705a      	strb	r2, [r3, #1]
 800ef62:	2200      	movs	r2, #0
 800ef64:	709a      	strb	r2, [r3, #2]
 800ef66:	2200      	movs	r2, #0
 800ef68:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ef6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6c:	8afa      	ldrh	r2, [r7, #22]
 800ef6e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ef70:	8afa      	ldrh	r2, [r7, #22]
 800ef72:	8b7b      	ldrh	r3, [r7, #26]
 800ef74:	4413      	add	r3, r2
 800ef76:	b29a      	uxth	r2, r3
 800ef78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ef7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7e:	88db      	ldrh	r3, [r3, #6]
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	8afa      	ldrh	r2, [r7, #22]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d902      	bls.n	800ef8e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ef88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ef8c:	e106      	b.n	800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef94:	e068      	b.n	800f068 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ef96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ef9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef9e:	889b      	ldrh	r3, [r3, #4]
 800efa0:	b29a      	uxth	r2, r3
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	889b      	ldrh	r3, [r3, #4]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d235      	bcs.n	800f018 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800efac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efb0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800efb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d020      	beq.n	800effa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800efb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efba:	889b      	ldrh	r3, [r3, #4]
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc0:	88db      	ldrh	r3, [r3, #6]
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d307      	bcc.n	800efd8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800efc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efca:	88db      	ldrh	r3, [r3, #6]
 800efcc:	b29a      	uxth	r2, r3
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	889b      	ldrh	r3, [r3, #4]
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d902      	bls.n	800efde <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800efd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800efdc:	e0de      	b.n	800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800efde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe0:	68ba      	ldr	r2, [r7, #8]
 800efe2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800efe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe6:	88db      	ldrh	r3, [r3, #6]
 800efe8:	b29a      	uxth	r2, r3
 800efea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efec:	889b      	ldrh	r3, [r3, #4]
 800efee:	b29b      	uxth	r3, r3
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d03d      	beq.n	800f070 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800eff8:	e03a      	b.n	800f070 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800effa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800effc:	88db      	ldrh	r3, [r3, #6]
 800effe:	b29a      	uxth	r2, r3
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	889b      	ldrh	r3, [r3, #4]
 800f004:	b29b      	uxth	r3, r3
 800f006:	429a      	cmp	r2, r3
 800f008:	d902      	bls.n	800f010 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f00a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f00e:	e0c5      	b.n	800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	605a      	str	r2, [r3, #4]
      break;
 800f016:	e02b      	b.n	800f070 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f01a:	889b      	ldrh	r3, [r3, #4]
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	889b      	ldrh	r3, [r3, #4]
 800f022:	b29b      	uxth	r3, r3
 800f024:	429a      	cmp	r2, r3
 800f026:	d102      	bne.n	800f02e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f02c:	e0b6      	b.n	800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f030:	889b      	ldrh	r3, [r3, #4]
 800f032:	b29a      	uxth	r2, r3
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	88db      	ldrh	r3, [r3, #6]
 800f038:	b29b      	uxth	r3, r3
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d202      	bcs.n	800f044 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f03e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f042:	e0ab      	b.n	800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f046:	2b00      	cmp	r3, #0
 800f048:	d009      	beq.n	800f05e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f04c:	88db      	ldrh	r3, [r3, #6]
 800f04e:	b29a      	uxth	r2, r3
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	889b      	ldrh	r3, [r3, #4]
 800f054:	b29b      	uxth	r3, r3
 800f056:	429a      	cmp	r2, r3
 800f058:	d001      	beq.n	800f05e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f05a:	2300      	movs	r3, #0
 800f05c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800f068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d193      	bne.n	800ef96 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f06e:	e000      	b.n	800f072 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f070:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f074:	2b00      	cmp	r3, #0
 800f076:	d12d      	bne.n	800f0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d01c      	beq.n	800f0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f080:	88db      	ldrh	r3, [r3, #6]
 800f082:	b29a      	uxth	r2, r3
 800f084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f086:	889b      	ldrh	r3, [r3, #4]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d906      	bls.n	800f09c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f08e:	4b45      	ldr	r3, [pc, #276]	@ (800f1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f090:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800f094:	4944      	ldr	r1, [pc, #272]	@ (800f1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f096:	4845      	ldr	r0, [pc, #276]	@ (800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f098:	f000 fda0 	bl	800fbdc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09e:	68ba      	ldr	r2, [r7, #8]
 800f0a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0a4:	88db      	ldrh	r3, [r3, #6]
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0aa:	889b      	ldrh	r3, [r3, #4]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d010      	beq.n	800f0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	623b      	str	r3, [r7, #32]
 800f0b6:	e00d      	b.n	800f0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d006      	beq.n	800f0ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f0c0:	4b38      	ldr	r3, [pc, #224]	@ (800f1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f0c2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800f0c6:	493a      	ldr	r1, [pc, #232]	@ (800f1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f0c8:	4838      	ldr	r0, [pc, #224]	@ (800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f0ca:	f000 fd87 	bl	800fbdc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d105      	bne.n	800f0e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	7f9b      	ldrb	r3, [r3, #30]
 800f0de:	f003 0301 	and.w	r3, r3, #1
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d059      	beq.n	800f19a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f0e6:	6a3b      	ldr	r3, [r7, #32]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d04f      	beq.n	800f18c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d006      	beq.n	800f102 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	889b      	ldrh	r3, [r3, #4]
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d002      	beq.n	800f108 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f102:	2300      	movs	r3, #0
 800f104:	623b      	str	r3, [r7, #32]
 800f106:	e041      	b.n	800f18c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f10a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800f10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f112:	e012      	b.n	800f13a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800f11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f11c:	88db      	ldrh	r3, [r3, #6]
 800f11e:	b29a      	uxth	r2, r3
 800f120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f122:	889b      	ldrh	r3, [r3, #4]
 800f124:	b29b      	uxth	r3, r3
 800f126:	429a      	cmp	r2, r3
 800f128:	d002      	beq.n	800f130 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f12a:	2300      	movs	r3, #0
 800f12c:	623b      	str	r3, [r7, #32]
            break;
 800f12e:	e007      	b.n	800f140 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f132:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800f134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d1e9      	bne.n	800f114 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f140:	6a3b      	ldr	r3, [r7, #32]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d022      	beq.n	800f18c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d106      	bne.n	800f15c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f14e:	4b15      	ldr	r3, [pc, #84]	@ (800f1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f150:	f240 12df 	movw	r2, #479	@ 0x1df
 800f154:	4917      	ldr	r1, [pc, #92]	@ (800f1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f156:	4815      	ldr	r0, [pc, #84]	@ (800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f158:	f000 fd40 	bl	800fbdc <iprintf>
          LWIP_ASSERT("sanity check",
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f164:	429a      	cmp	r2, r3
 800f166:	d106      	bne.n	800f176 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f168:	4b0e      	ldr	r3, [pc, #56]	@ (800f1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f16a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f16e:	4911      	ldr	r1, [pc, #68]	@ (800f1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f170:	480e      	ldr	r0, [pc, #56]	@ (800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f172:	f000 fd33 	bl	800fbdc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d006      	beq.n	800f18c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f17e:	4b09      	ldr	r3, [pc, #36]	@ (800f1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f180:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f184:	490c      	ldr	r1, [pc, #48]	@ (800f1b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f186:	4809      	ldr	r0, [pc, #36]	@ (800f1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f188:	f000 fd28 	bl	800fbdc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f18c:	6a3b      	ldr	r3, [r7, #32]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	bf14      	ite	ne
 800f192:	2301      	movne	r3, #1
 800f194:	2300      	moveq	r3, #0
 800f196:	b2db      	uxtb	r3, r3
 800f198:	e000      	b.n	800f19c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3730      	adds	r7, #48	@ 0x30
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	08013128 	.word	0x08013128
 800f1a8:	0801320c 	.word	0x0801320c
 800f1ac:	08013170 	.word	0x08013170
 800f1b0:	0801322c 	.word	0x0801322c
 800f1b4:	08013264 	.word	0x08013264
 800f1b8:	08013274 	.word	0x08013274

0800f1bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b08e      	sub	sp, #56	@ 0x38
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	f003 030f 	and.w	r3, r3, #15
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	b2db      	uxtb	r3, r3
 800f1d8:	2b14      	cmp	r3, #20
 800f1da:	f040 8171 	bne.w	800f4c0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e0:	88db      	ldrh	r3, [r3, #6]
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7f6 ff51 	bl	800608c <lwip_htons>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1f0:	b29b      	uxth	r3, r3
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f8:	885b      	ldrh	r3, [r3, #2]
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7f6 ff45 	bl	800608c <lwip_htons>
 800f202:	4603      	mov	r3, r0
 800f204:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	f003 030f 	and.w	r3, r3, #15
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800f216:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f21e:	429a      	cmp	r2, r3
 800f220:	f0c0 8150 	bcc.w	800f4c4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f224:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f228:	b29b      	uxth	r3, r3
 800f22a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f7f8 faed 	bl	8007810 <pbuf_clen>
 800f236:	4603      	mov	r3, r0
 800f238:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f23a:	4b8c      	ldr	r3, [pc, #560]	@ (800f46c <ip4_reass+0x2b0>)
 800f23c:	881b      	ldrh	r3, [r3, #0]
 800f23e:	461a      	mov	r2, r3
 800f240:	8c3b      	ldrh	r3, [r7, #32]
 800f242:	4413      	add	r3, r2
 800f244:	2b0a      	cmp	r3, #10
 800f246:	dd10      	ble.n	800f26a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f248:	8c3b      	ldrh	r3, [r7, #32]
 800f24a:	4619      	mov	r1, r3
 800f24c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f24e:	f7ff fd81 	bl	800ed54 <ip_reass_remove_oldest_datagram>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	f000 8137 	beq.w	800f4c8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f25a:	4b84      	ldr	r3, [pc, #528]	@ (800f46c <ip4_reass+0x2b0>)
 800f25c:	881b      	ldrh	r3, [r3, #0]
 800f25e:	461a      	mov	r2, r3
 800f260:	8c3b      	ldrh	r3, [r7, #32]
 800f262:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f264:	2b0a      	cmp	r3, #10
 800f266:	f300 812f 	bgt.w	800f4c8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f26a:	4b81      	ldr	r3, [pc, #516]	@ (800f470 <ip4_reass+0x2b4>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f270:	e015      	b.n	800f29e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f274:	695a      	ldr	r2, [r3, #20]
 800f276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d10c      	bne.n	800f298 <ip4_reass+0xdc>
 800f27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f280:	699a      	ldr	r2, [r3, #24]
 800f282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f284:	691b      	ldr	r3, [r3, #16]
 800f286:	429a      	cmp	r2, r3
 800f288:	d106      	bne.n	800f298 <ip4_reass+0xdc>
 800f28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f28c:	899a      	ldrh	r2, [r3, #12]
 800f28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f290:	889b      	ldrh	r3, [r3, #4]
 800f292:	b29b      	uxth	r3, r3
 800f294:	429a      	cmp	r2, r3
 800f296:	d006      	beq.n	800f2a6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1e6      	bne.n	800f272 <ip4_reass+0xb6>
 800f2a4:	e000      	b.n	800f2a8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f2a6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d109      	bne.n	800f2c2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f2ae:	8c3b      	ldrh	r3, [r7, #32]
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f2b4:	f7ff fdb0 	bl	800ee18 <ip_reass_enqueue_new_datagram>
 800f2b8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d11c      	bne.n	800f2fa <ip4_reass+0x13e>
      goto nullreturn;
 800f2c0:	e105      	b.n	800f4ce <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c4:	88db      	ldrh	r3, [r3, #6]
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7f6 fedf 	bl	800608c <lwip_htons>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d110      	bne.n	800f2fa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2da:	89db      	ldrh	r3, [r3, #14]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7f6 fed5 	bl	800608c <lwip_htons>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d006      	beq.n	800f2fa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ee:	3308      	adds	r3, #8
 800f2f0:	2214      	movs	r2, #20
 800f2f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f000 fd4c 	bl	800fd92 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2fc:	88db      	ldrh	r3, [r3, #6]
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	f003 0320 	and.w	r3, r3, #32
 800f304:	2b00      	cmp	r3, #0
 800f306:	bf0c      	ite	eq
 800f308:	2301      	moveq	r3, #1
 800f30a:	2300      	movne	r3, #0
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d00e      	beq.n	800f334 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f316:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f318:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f31a:	4413      	add	r3, r2
 800f31c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f31e:	8b7a      	ldrh	r2, [r7, #26]
 800f320:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f322:	429a      	cmp	r2, r3
 800f324:	f0c0 80a0 	bcc.w	800f468 <ip4_reass+0x2ac>
 800f328:	8b7b      	ldrh	r3, [r7, #26]
 800f32a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f32e:	4293      	cmp	r3, r2
 800f330:	f200 809a 	bhi.w	800f468 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f334:	69fa      	ldr	r2, [r7, #28]
 800f336:	6879      	ldr	r1, [r7, #4]
 800f338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f33a:	f7ff fdd5 	bl	800eee8 <ip_reass_chain_frag_into_datagram_and_validate>
 800f33e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f346:	f000 809b 	beq.w	800f480 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f34a:	4b48      	ldr	r3, [pc, #288]	@ (800f46c <ip4_reass+0x2b0>)
 800f34c:	881a      	ldrh	r2, [r3, #0]
 800f34e:	8c3b      	ldrh	r3, [r7, #32]
 800f350:	4413      	add	r3, r2
 800f352:	b29a      	uxth	r2, r3
 800f354:	4b45      	ldr	r3, [pc, #276]	@ (800f46c <ip4_reass+0x2b0>)
 800f356:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00d      	beq.n	800f37a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f35e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f362:	4413      	add	r3, r2
 800f364:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f368:	8a7a      	ldrh	r2, [r7, #18]
 800f36a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f36e:	7f9b      	ldrb	r3, [r3, #30]
 800f370:	f043 0301 	orr.w	r3, r3, #1
 800f374:	b2da      	uxtb	r2, r3
 800f376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f378:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d171      	bne.n	800f464 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f382:	8b9b      	ldrh	r3, [r3, #28]
 800f384:	3314      	adds	r3, #20
 800f386:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f39c:	3308      	adds	r3, #8
 800f39e:	2214      	movs	r2, #20
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3a4:	f000 fcf5 	bl	800fd92 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f3a8:	8a3b      	ldrh	r3, [r7, #16]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7f6 fe6e 	bl	800608c <lwip_htons>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	719a      	strb	r2, [r3, #6]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	729a      	strb	r2, [r3, #10]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f3d2:	e00d      	b.n	800f3f0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f3da:	2114      	movs	r1, #20
 800f3dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f3de:	f7f8 f909 	bl	80075f4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f3e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7f8 fa4d 	bl	8007884 <pbuf_cat>
      r = iprh->next_pbuf;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800f3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1ee      	bne.n	800f3d4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f3f6:	4b1e      	ldr	r3, [pc, #120]	@ (800f470 <ip4_reass+0x2b4>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d102      	bne.n	800f406 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f400:	2300      	movs	r3, #0
 800f402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f404:	e010      	b.n	800f428 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f406:	4b1a      	ldr	r3, [pc, #104]	@ (800f470 <ip4_reass+0x2b4>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f40c:	e007      	b.n	800f41e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f414:	429a      	cmp	r2, r3
 800f416:	d006      	beq.n	800f426 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f420:	2b00      	cmp	r3, #0
 800f422:	d1f4      	bne.n	800f40e <ip4_reass+0x252>
 800f424:	e000      	b.n	800f428 <ip4_reass+0x26c>
          break;
 800f426:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f428:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f42a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f42c:	f7ff fd2e 	bl	800ee8c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7f8 f9ed 	bl	8007810 <pbuf_clen>
 800f436:	4603      	mov	r3, r0
 800f438:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f43a:	4b0c      	ldr	r3, [pc, #48]	@ (800f46c <ip4_reass+0x2b0>)
 800f43c:	881b      	ldrh	r3, [r3, #0]
 800f43e:	8c3a      	ldrh	r2, [r7, #32]
 800f440:	429a      	cmp	r2, r3
 800f442:	d906      	bls.n	800f452 <ip4_reass+0x296>
 800f444:	4b0b      	ldr	r3, [pc, #44]	@ (800f474 <ip4_reass+0x2b8>)
 800f446:	f240 229b 	movw	r2, #667	@ 0x29b
 800f44a:	490b      	ldr	r1, [pc, #44]	@ (800f478 <ip4_reass+0x2bc>)
 800f44c:	480b      	ldr	r0, [pc, #44]	@ (800f47c <ip4_reass+0x2c0>)
 800f44e:	f000 fbc5 	bl	800fbdc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f452:	4b06      	ldr	r3, [pc, #24]	@ (800f46c <ip4_reass+0x2b0>)
 800f454:	881a      	ldrh	r2, [r3, #0]
 800f456:	8c3b      	ldrh	r3, [r7, #32]
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	b29a      	uxth	r2, r3
 800f45c:	4b03      	ldr	r3, [pc, #12]	@ (800f46c <ip4_reass+0x2b0>)
 800f45e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	e038      	b.n	800f4d6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f464:	2300      	movs	r3, #0
 800f466:	e036      	b.n	800f4d6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f468:	bf00      	nop
 800f46a:	e00a      	b.n	800f482 <ip4_reass+0x2c6>
 800f46c:	2000830c 	.word	0x2000830c
 800f470:	20008308 	.word	0x20008308
 800f474:	08013128 	.word	0x08013128
 800f478:	08013298 	.word	0x08013298
 800f47c:	08013170 	.word	0x08013170
    goto nullreturn_ipr;
 800f480:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f484:	2b00      	cmp	r3, #0
 800f486:	d106      	bne.n	800f496 <ip4_reass+0x2da>
 800f488:	4b15      	ldr	r3, [pc, #84]	@ (800f4e0 <ip4_reass+0x324>)
 800f48a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800f48e:	4915      	ldr	r1, [pc, #84]	@ (800f4e4 <ip4_reass+0x328>)
 800f490:	4815      	ldr	r0, [pc, #84]	@ (800f4e8 <ip4_reass+0x32c>)
 800f492:	f000 fba3 	bl	800fbdc <iprintf>
  if (ipr->p == NULL) {
 800f496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d116      	bne.n	800f4cc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f49e:	4b13      	ldr	r3, [pc, #76]	@ (800f4ec <ip4_reass+0x330>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d006      	beq.n	800f4b6 <ip4_reass+0x2fa>
 800f4a8:	4b0d      	ldr	r3, [pc, #52]	@ (800f4e0 <ip4_reass+0x324>)
 800f4aa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800f4ae:	4910      	ldr	r1, [pc, #64]	@ (800f4f0 <ip4_reass+0x334>)
 800f4b0:	480d      	ldr	r0, [pc, #52]	@ (800f4e8 <ip4_reass+0x32c>)
 800f4b2:	f000 fb93 	bl	800fbdc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f4b6:	2100      	movs	r1, #0
 800f4b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f4ba:	f7ff fce7 	bl	800ee8c <ip_reass_dequeue_datagram>
 800f4be:	e006      	b.n	800f4ce <ip4_reass+0x312>
    goto nullreturn;
 800f4c0:	bf00      	nop
 800f4c2:	e004      	b.n	800f4ce <ip4_reass+0x312>
    goto nullreturn;
 800f4c4:	bf00      	nop
 800f4c6:	e002      	b.n	800f4ce <ip4_reass+0x312>
      goto nullreturn;
 800f4c8:	bf00      	nop
 800f4ca:	e000      	b.n	800f4ce <ip4_reass+0x312>
  }

nullreturn:
 800f4cc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7f8 f916 	bl	8007700 <pbuf_free>
  return NULL;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3738      	adds	r7, #56	@ 0x38
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	08013128 	.word	0x08013128
 800f4e4:	080132b4 	.word	0x080132b4
 800f4e8:	08013170 	.word	0x08013170
 800f4ec:	20008308 	.word	0x20008308
 800f4f0:	080132c0 	.word	0x080132c0

0800f4f4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f4f8:	2005      	movs	r0, #5
 800f4fa:	f7f7 fa3b 	bl	8006974 <memp_malloc>
 800f4fe:	4603      	mov	r3, r0
}
 800f500:	4618      	mov	r0, r3
 800f502:	bd80      	pop	{r7, pc}

0800f504 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d106      	bne.n	800f520 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f512:	4b07      	ldr	r3, [pc, #28]	@ (800f530 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f514:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800f518:	4906      	ldr	r1, [pc, #24]	@ (800f534 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f51a:	4807      	ldr	r0, [pc, #28]	@ (800f538 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f51c:	f000 fb5e 	bl	800fbdc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f520:	6879      	ldr	r1, [r7, #4]
 800f522:	2005      	movs	r0, #5
 800f524:	f7f7 fa96 	bl	8006a54 <memp_free>
}
 800f528:	bf00      	nop
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	08013128 	.word	0x08013128
 800f534:	080132e0 	.word	0x080132e0
 800f538:	08013170 	.word	0x08013170

0800f53c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b084      	sub	sp, #16
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d106      	bne.n	800f55c <ipfrag_free_pbuf_custom+0x20>
 800f54e:	4b11      	ldr	r3, [pc, #68]	@ (800f594 <ipfrag_free_pbuf_custom+0x58>)
 800f550:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800f554:	4910      	ldr	r1, [pc, #64]	@ (800f598 <ipfrag_free_pbuf_custom+0x5c>)
 800f556:	4811      	ldr	r0, [pc, #68]	@ (800f59c <ipfrag_free_pbuf_custom+0x60>)
 800f558:	f000 fb40 	bl	800fbdc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f55c:	68fa      	ldr	r2, [r7, #12]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	429a      	cmp	r2, r3
 800f562:	d006      	beq.n	800f572 <ipfrag_free_pbuf_custom+0x36>
 800f564:	4b0b      	ldr	r3, [pc, #44]	@ (800f594 <ipfrag_free_pbuf_custom+0x58>)
 800f566:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800f56a:	490d      	ldr	r1, [pc, #52]	@ (800f5a0 <ipfrag_free_pbuf_custom+0x64>)
 800f56c:	480b      	ldr	r0, [pc, #44]	@ (800f59c <ipfrag_free_pbuf_custom+0x60>)
 800f56e:	f000 fb35 	bl	800fbdc <iprintf>
  if (pcr->original != NULL) {
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	695b      	ldr	r3, [r3, #20]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d004      	beq.n	800f584 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	695b      	ldr	r3, [r3, #20]
 800f57e:	4618      	mov	r0, r3
 800f580:	f7f8 f8be 	bl	8007700 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f7ff ffbd 	bl	800f504 <ip_frag_free_pbuf_custom_ref>
}
 800f58a:	bf00      	nop
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	08013128 	.word	0x08013128
 800f598:	080132ec 	.word	0x080132ec
 800f59c:	08013170 	.word	0x08013170
 800f5a0:	080132f8 	.word	0x080132f8

0800f5a4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b094      	sub	sp, #80	@ 0x50
 800f5a8:	af02      	add	r7, sp, #8
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f5ba:	3b14      	subs	r3, #20
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	da00      	bge.n	800f5c2 <ip4_frag+0x1e>
 800f5c0:	3307      	adds	r3, #7
 800f5c2:	10db      	asrs	r3, r3, #3
 800f5c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f5c6:	2314      	movs	r3, #20
 800f5c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800f5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5d2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	f003 030f 	and.w	r3, r3, #15
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	009b      	lsls	r3, r3, #2
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b14      	cmp	r3, #20
 800f5e4:	d002      	beq.n	800f5ec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f5e6:	f06f 0305 	mvn.w	r3, #5
 800f5ea:	e110      	b.n	800f80e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	895b      	ldrh	r3, [r3, #10]
 800f5f0:	2b13      	cmp	r3, #19
 800f5f2:	d809      	bhi.n	800f608 <ip4_frag+0x64>
 800f5f4:	4b88      	ldr	r3, [pc, #544]	@ (800f818 <ip4_frag+0x274>)
 800f5f6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800f5fa:	4988      	ldr	r1, [pc, #544]	@ (800f81c <ip4_frag+0x278>)
 800f5fc:	4888      	ldr	r0, [pc, #544]	@ (800f820 <ip4_frag+0x27c>)
 800f5fe:	f000 faed 	bl	800fbdc <iprintf>
 800f602:	f06f 0305 	mvn.w	r3, #5
 800f606:	e102      	b.n	800f80e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f60a:	88db      	ldrh	r3, [r3, #6]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	4618      	mov	r0, r3
 800f610:	f7f6 fd3c 	bl	800608c <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800f618:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f61a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f61e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f622:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f628:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	891b      	ldrh	r3, [r3, #8]
 800f62e:	3b14      	subs	r3, #20
 800f630:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800f634:	e0e1      	b.n	800f7fa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f636:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f638:	00db      	lsls	r3, r3, #3
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f640:	4293      	cmp	r3, r2
 800f642:	bf28      	it	cs
 800f644:	4613      	movcs	r3, r2
 800f646:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f648:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f64c:	2114      	movs	r1, #20
 800f64e:	200e      	movs	r0, #14
 800f650:	f7f7 fd72 	bl	8007138 <pbuf_alloc>
 800f654:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800f656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f000 80d5 	beq.w	800f808 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f660:	895b      	ldrh	r3, [r3, #10]
 800f662:	2b13      	cmp	r3, #19
 800f664:	d806      	bhi.n	800f674 <ip4_frag+0xd0>
 800f666:	4b6c      	ldr	r3, [pc, #432]	@ (800f818 <ip4_frag+0x274>)
 800f668:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800f66c:	496d      	ldr	r1, [pc, #436]	@ (800f824 <ip4_frag+0x280>)
 800f66e:	486c      	ldr	r0, [pc, #432]	@ (800f820 <ip4_frag+0x27c>)
 800f670:	f000 fab4 	bl	800fbdc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	2214      	movs	r2, #20
 800f67a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f67c:	4618      	mov	r0, r3
 800f67e:	f000 fb88 	bl	800fd92 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800f688:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f68a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800f68e:	e064      	b.n	800f75a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	895a      	ldrh	r2, [r3, #10]
 800f694:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f696:	1ad3      	subs	r3, r2, r3
 800f698:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	895b      	ldrh	r3, [r3, #10]
 800f69e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d906      	bls.n	800f6b2 <ip4_frag+0x10e>
 800f6a4:	4b5c      	ldr	r3, [pc, #368]	@ (800f818 <ip4_frag+0x274>)
 800f6a6:	f240 322d 	movw	r2, #813	@ 0x32d
 800f6aa:	495f      	ldr	r1, [pc, #380]	@ (800f828 <ip4_frag+0x284>)
 800f6ac:	485c      	ldr	r0, [pc, #368]	@ (800f820 <ip4_frag+0x27c>)
 800f6ae:	f000 fa95 	bl	800fbdc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f6b2:	8bfa      	ldrh	r2, [r7, #30]
 800f6b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	bf28      	it	cs
 800f6bc:	4613      	movcs	r3, r2
 800f6be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f6c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d105      	bne.n	800f6d6 <ip4_frag+0x132>
        poff = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	60fb      	str	r3, [r7, #12]
        continue;
 800f6d4:	e041      	b.n	800f75a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f6d6:	f7ff ff0d 	bl	800f4f4 <ip_frag_alloc_pbuf_custom_ref>
 800f6da:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d103      	bne.n	800f6ea <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f6e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f6e4:	f7f8 f80c 	bl	8007700 <pbuf_free>
        goto memerr;
 800f6e8:	e08f      	b.n	800f80a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f6ea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f6f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800f6f2:	4413      	add	r3, r2
 800f6f4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800f6f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f6fc:	9201      	str	r2, [sp, #4]
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	4603      	mov	r3, r0
 800f702:	2241      	movs	r2, #65	@ 0x41
 800f704:	2000      	movs	r0, #0
 800f706:	f7f7 fe41 	bl	800738c <pbuf_alloced_custom>
 800f70a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d106      	bne.n	800f720 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f712:	69b8      	ldr	r0, [r7, #24]
 800f714:	f7ff fef6 	bl	800f504 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f718:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f71a:	f7f7 fff1 	bl	8007700 <pbuf_free>
        goto memerr;
 800f71e:	e074      	b.n	800f80a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f7f8 f88d 	bl	8007840 <pbuf_ref>
      pcr->original = p;
 800f726:	69bb      	ldr	r3, [r7, #24]
 800f728:	68fa      	ldr	r2, [r7, #12]
 800f72a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	4a3f      	ldr	r2, [pc, #252]	@ (800f82c <ip4_frag+0x288>)
 800f730:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f732:	6979      	ldr	r1, [r7, #20]
 800f734:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f736:	f7f8 f8a5 	bl	8007884 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f73a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800f73e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800f748:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d004      	beq.n	800f75a <ip4_frag+0x1b6>
        poff = 0;
 800f750:	2300      	movs	r3, #0
 800f752:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f75a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d196      	bne.n	800f690 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f762:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800f764:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800f768:	4413      	add	r3, r2
 800f76a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f770:	f1a3 0213 	sub.w	r2, r3, #19
 800f774:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f778:	429a      	cmp	r2, r3
 800f77a:	bfcc      	ite	gt
 800f77c:	2301      	movgt	r3, #1
 800f77e:	2300      	movle	r3, #0
 800f780:	b2db      	uxtb	r3, r3
 800f782:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f784:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800f788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f78c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800f78e:	6a3b      	ldr	r3, [r7, #32]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d002      	beq.n	800f79a <ip4_frag+0x1f6>
 800f794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f796:	2b00      	cmp	r3, #0
 800f798:	d003      	beq.n	800f7a2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f79a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f79c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f7a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f7a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7f6 fc71 	bl	800608c <lwip_htons>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f7b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f7b4:	3314      	adds	r3, #20
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7f6 fc67 	bl	800608c <lwip_htons>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	461a      	mov	r2, r3
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	729a      	strb	r2, [r3, #10]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	695b      	ldr	r3, [r3, #20]
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f7d8:	68b8      	ldr	r0, [r7, #8]
 800f7da:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f7dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f7de:	f7f7 ff8f 	bl	8007700 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f7e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f7e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800f7ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800f7f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800f7fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f47f af19 	bne.w	800f636 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f804:	2300      	movs	r3, #0
 800f806:	e002      	b.n	800f80e <ip4_frag+0x26a>
      goto memerr;
 800f808:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f80a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3748      	adds	r7, #72	@ 0x48
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	08013128 	.word	0x08013128
 800f81c:	08013304 	.word	0x08013304
 800f820:	08013170 	.word	0x08013170
 800f824:	08013320 	.word	0x08013320
 800f828:	08013340 	.word	0x08013340
 800f82c:	0800f53d 	.word	0x0800f53d

0800f830 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f83a:	230e      	movs	r3, #14
 800f83c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	895b      	ldrh	r3, [r3, #10]
 800f842:	2b0e      	cmp	r3, #14
 800f844:	d96e      	bls.n	800f924 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	7bdb      	ldrb	r3, [r3, #15]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d106      	bne.n	800f85c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f854:	3301      	adds	r3, #1
 800f856:	b2da      	uxtb	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	7b1a      	ldrb	r2, [r3, #12]
 800f866:	7b5b      	ldrb	r3, [r3, #13]
 800f868:	021b      	lsls	r3, r3, #8
 800f86a:	4313      	orrs	r3, r2
 800f86c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	2b00      	cmp	r3, #0
 800f878:	d023      	beq.n	800f8c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d10f      	bne.n	800f8a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	785b      	ldrb	r3, [r3, #1]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d11b      	bne.n	800f8c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f88e:	2b5e      	cmp	r3, #94	@ 0x5e
 800f890:	d117      	bne.n	800f8c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	7b5b      	ldrb	r3, [r3, #13]
 800f896:	f043 0310 	orr.w	r3, r3, #16
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	735a      	strb	r2, [r3, #13]
 800f8a0:	e00f      	b.n	800f8c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	2206      	movs	r2, #6
 800f8a6:	4928      	ldr	r1, [pc, #160]	@ (800f948 <ethernet_input+0x118>)
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f000 f9ec 	bl	800fc86 <memcmp>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d106      	bne.n	800f8c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	7b5b      	ldrb	r3, [r3, #13]
 800f8b8:	f043 0308 	orr.w	r3, r3, #8
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f8c2:	89fb      	ldrh	r3, [r7, #14]
 800f8c4:	2b08      	cmp	r3, #8
 800f8c6:	d003      	beq.n	800f8d0 <ethernet_input+0xa0>
 800f8c8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800f8cc:	d014      	beq.n	800f8f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f8ce:	e032      	b.n	800f936 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f8d6:	f003 0308 	and.w	r3, r3, #8
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d024      	beq.n	800f928 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f8de:	8afb      	ldrh	r3, [r7, #22]
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f7f7 fe86 	bl	80075f4 <pbuf_remove_header>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d11e      	bne.n	800f92c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f8ee:	6839      	ldr	r1, [r7, #0]
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7fe ff21 	bl	800e738 <ip4_input>
      break;
 800f8f6:	e013      	b.n	800f920 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f8fe:	f003 0308 	and.w	r3, r3, #8
 800f902:	2b00      	cmp	r3, #0
 800f904:	d014      	beq.n	800f930 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f906:	8afb      	ldrh	r3, [r7, #22]
 800f908:	4619      	mov	r1, r3
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7f7 fe72 	bl	80075f4 <pbuf_remove_header>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d10e      	bne.n	800f934 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7fe f8c1 	bl	800daa0 <etharp_input>
      break;
 800f91e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	e00c      	b.n	800f93e <ethernet_input+0x10e>
    goto free_and_return;
 800f924:	bf00      	nop
 800f926:	e006      	b.n	800f936 <ethernet_input+0x106>
        goto free_and_return;
 800f928:	bf00      	nop
 800f92a:	e004      	b.n	800f936 <ethernet_input+0x106>
        goto free_and_return;
 800f92c:	bf00      	nop
 800f92e:	e002      	b.n	800f936 <ethernet_input+0x106>
        goto free_and_return;
 800f930:	bf00      	nop
 800f932:	e000      	b.n	800f936 <ethernet_input+0x106>
        goto free_and_return;
 800f934:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7f7 fee2 	bl	8007700 <pbuf_free>
  return ERR_OK;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3718      	adds	r7, #24
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	080134dc 	.word	0x080134dc

0800f94c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b086      	sub	sp, #24
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
 800f958:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f95a:	8c3b      	ldrh	r3, [r7, #32]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7f6 fb95 	bl	800608c <lwip_htons>
 800f962:	4603      	mov	r3, r0
 800f964:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f966:	210e      	movs	r1, #14
 800f968:	68b8      	ldr	r0, [r7, #8]
 800f96a:	f7f7 fe33 	bl	80075d4 <pbuf_add_header>
 800f96e:	4603      	mov	r3, r0
 800f970:	2b00      	cmp	r3, #0
 800f972:	d125      	bne.n	800f9c0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	8afa      	ldrh	r2, [r7, #22]
 800f97e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	2206      	movs	r2, #6
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	4618      	mov	r0, r3
 800f988:	f000 fa03 	bl	800fd92 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	3306      	adds	r3, #6
 800f990:	2206      	movs	r2, #6
 800f992:	6879      	ldr	r1, [r7, #4]
 800f994:	4618      	mov	r0, r3
 800f996:	f000 f9fc 	bl	800fd92 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f9a0:	2b06      	cmp	r3, #6
 800f9a2:	d006      	beq.n	800f9b2 <ethernet_output+0x66>
 800f9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800f9d0 <ethernet_output+0x84>)
 800f9a6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800f9aa:	490a      	ldr	r1, [pc, #40]	@ (800f9d4 <ethernet_output+0x88>)
 800f9ac:	480a      	ldr	r0, [pc, #40]	@ (800f9d8 <ethernet_output+0x8c>)
 800f9ae:	f000 f915 	bl	800fbdc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	699b      	ldr	r3, [r3, #24]
 800f9b6:	68b9      	ldr	r1, [r7, #8]
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	4798      	blx	r3
 800f9bc:	4603      	mov	r3, r0
 800f9be:	e002      	b.n	800f9c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f9c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f9c2:	f06f 0301 	mvn.w	r3, #1
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3718      	adds	r7, #24
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	08013350 	.word	0x08013350
 800f9d4:	08013388 	.word	0x08013388
 800f9d8:	080133bc 	.word	0x080133bc

0800f9dc <rand>:
 800f9dc:	4b16      	ldr	r3, [pc, #88]	@ (800fa38 <rand+0x5c>)
 800f9de:	b510      	push	{r4, lr}
 800f9e0:	681c      	ldr	r4, [r3, #0]
 800f9e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f9e4:	b9b3      	cbnz	r3, 800fa14 <rand+0x38>
 800f9e6:	2018      	movs	r0, #24
 800f9e8:	f000 fa4a 	bl	800fe80 <malloc>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	6320      	str	r0, [r4, #48]	@ 0x30
 800f9f0:	b920      	cbnz	r0, 800f9fc <rand+0x20>
 800f9f2:	4b12      	ldr	r3, [pc, #72]	@ (800fa3c <rand+0x60>)
 800f9f4:	4812      	ldr	r0, [pc, #72]	@ (800fa40 <rand+0x64>)
 800f9f6:	2152      	movs	r1, #82	@ 0x52
 800f9f8:	f000 f9da 	bl	800fdb0 <__assert_func>
 800f9fc:	4911      	ldr	r1, [pc, #68]	@ (800fa44 <rand+0x68>)
 800f9fe:	4b12      	ldr	r3, [pc, #72]	@ (800fa48 <rand+0x6c>)
 800fa00:	e9c0 1300 	strd	r1, r3, [r0]
 800fa04:	4b11      	ldr	r3, [pc, #68]	@ (800fa4c <rand+0x70>)
 800fa06:	6083      	str	r3, [r0, #8]
 800fa08:	230b      	movs	r3, #11
 800fa0a:	8183      	strh	r3, [r0, #12]
 800fa0c:	2100      	movs	r1, #0
 800fa0e:	2001      	movs	r0, #1
 800fa10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800fa14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fa16:	480e      	ldr	r0, [pc, #56]	@ (800fa50 <rand+0x74>)
 800fa18:	690b      	ldr	r3, [r1, #16]
 800fa1a:	694c      	ldr	r4, [r1, #20]
 800fa1c:	4a0d      	ldr	r2, [pc, #52]	@ (800fa54 <rand+0x78>)
 800fa1e:	4358      	muls	r0, r3
 800fa20:	fb02 0004 	mla	r0, r2, r4, r0
 800fa24:	fba3 3202 	umull	r3, r2, r3, r2
 800fa28:	3301      	adds	r3, #1
 800fa2a:	eb40 0002 	adc.w	r0, r0, r2
 800fa2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800fa32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800fa36:	bd10      	pop	{r4, pc}
 800fa38:	20000038 	.word	0x20000038
 800fa3c:	080134ea 	.word	0x080134ea
 800fa40:	08013501 	.word	0x08013501
 800fa44:	abcd330e 	.word	0xabcd330e
 800fa48:	e66d1234 	.word	0xe66d1234
 800fa4c:	0005deec 	.word	0x0005deec
 800fa50:	5851f42d 	.word	0x5851f42d
 800fa54:	4c957f2d 	.word	0x4c957f2d

0800fa58 <std>:
 800fa58:	2300      	movs	r3, #0
 800fa5a:	b510      	push	{r4, lr}
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	e9c0 3300 	strd	r3, r3, [r0]
 800fa62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa66:	6083      	str	r3, [r0, #8]
 800fa68:	8181      	strh	r1, [r0, #12]
 800fa6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa6c:	81c2      	strh	r2, [r0, #14]
 800fa6e:	6183      	str	r3, [r0, #24]
 800fa70:	4619      	mov	r1, r3
 800fa72:	2208      	movs	r2, #8
 800fa74:	305c      	adds	r0, #92	@ 0x5c
 800fa76:	f000 f916 	bl	800fca6 <memset>
 800fa7a:	4b0d      	ldr	r3, [pc, #52]	@ (800fab0 <std+0x58>)
 800fa7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa7e:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <std+0x5c>)
 800fa80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa82:	4b0d      	ldr	r3, [pc, #52]	@ (800fab8 <std+0x60>)
 800fa84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa86:	4b0d      	ldr	r3, [pc, #52]	@ (800fabc <std+0x64>)
 800fa88:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa8a:	4b0d      	ldr	r3, [pc, #52]	@ (800fac0 <std+0x68>)
 800fa8c:	6224      	str	r4, [r4, #32]
 800fa8e:	429c      	cmp	r4, r3
 800fa90:	d006      	beq.n	800faa0 <std+0x48>
 800fa92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa96:	4294      	cmp	r4, r2
 800fa98:	d002      	beq.n	800faa0 <std+0x48>
 800fa9a:	33d0      	adds	r3, #208	@ 0xd0
 800fa9c:	429c      	cmp	r4, r3
 800fa9e:	d105      	bne.n	800faac <std+0x54>
 800faa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800faa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faa8:	f000 b970 	b.w	800fd8c <__retarget_lock_init_recursive>
 800faac:	bd10      	pop	{r4, pc}
 800faae:	bf00      	nop
 800fab0:	0800fc01 	.word	0x0800fc01
 800fab4:	0800fc23 	.word	0x0800fc23
 800fab8:	0800fc5b 	.word	0x0800fc5b
 800fabc:	0800fc7f 	.word	0x0800fc7f
 800fac0:	20008310 	.word	0x20008310

0800fac4 <stdio_exit_handler>:
 800fac4:	4a02      	ldr	r2, [pc, #8]	@ (800fad0 <stdio_exit_handler+0xc>)
 800fac6:	4903      	ldr	r1, [pc, #12]	@ (800fad4 <stdio_exit_handler+0x10>)
 800fac8:	4803      	ldr	r0, [pc, #12]	@ (800fad8 <stdio_exit_handler+0x14>)
 800faca:	f000 b869 	b.w	800fba0 <_fwalk_sglue>
 800face:	bf00      	nop
 800fad0:	2000002c 	.word	0x2000002c
 800fad4:	08010691 	.word	0x08010691
 800fad8:	2000003c 	.word	0x2000003c

0800fadc <cleanup_stdio>:
 800fadc:	6841      	ldr	r1, [r0, #4]
 800fade:	4b0c      	ldr	r3, [pc, #48]	@ (800fb10 <cleanup_stdio+0x34>)
 800fae0:	4299      	cmp	r1, r3
 800fae2:	b510      	push	{r4, lr}
 800fae4:	4604      	mov	r4, r0
 800fae6:	d001      	beq.n	800faec <cleanup_stdio+0x10>
 800fae8:	f000 fdd2 	bl	8010690 <_fflush_r>
 800faec:	68a1      	ldr	r1, [r4, #8]
 800faee:	4b09      	ldr	r3, [pc, #36]	@ (800fb14 <cleanup_stdio+0x38>)
 800faf0:	4299      	cmp	r1, r3
 800faf2:	d002      	beq.n	800fafa <cleanup_stdio+0x1e>
 800faf4:	4620      	mov	r0, r4
 800faf6:	f000 fdcb 	bl	8010690 <_fflush_r>
 800fafa:	68e1      	ldr	r1, [r4, #12]
 800fafc:	4b06      	ldr	r3, [pc, #24]	@ (800fb18 <cleanup_stdio+0x3c>)
 800fafe:	4299      	cmp	r1, r3
 800fb00:	d004      	beq.n	800fb0c <cleanup_stdio+0x30>
 800fb02:	4620      	mov	r0, r4
 800fb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb08:	f000 bdc2 	b.w	8010690 <_fflush_r>
 800fb0c:	bd10      	pop	{r4, pc}
 800fb0e:	bf00      	nop
 800fb10:	20008310 	.word	0x20008310
 800fb14:	20008378 	.word	0x20008378
 800fb18:	200083e0 	.word	0x200083e0

0800fb1c <global_stdio_init.part.0>:
 800fb1c:	b510      	push	{r4, lr}
 800fb1e:	4b0b      	ldr	r3, [pc, #44]	@ (800fb4c <global_stdio_init.part.0+0x30>)
 800fb20:	4c0b      	ldr	r4, [pc, #44]	@ (800fb50 <global_stdio_init.part.0+0x34>)
 800fb22:	4a0c      	ldr	r2, [pc, #48]	@ (800fb54 <global_stdio_init.part.0+0x38>)
 800fb24:	601a      	str	r2, [r3, #0]
 800fb26:	4620      	mov	r0, r4
 800fb28:	2200      	movs	r2, #0
 800fb2a:	2104      	movs	r1, #4
 800fb2c:	f7ff ff94 	bl	800fa58 <std>
 800fb30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb34:	2201      	movs	r2, #1
 800fb36:	2109      	movs	r1, #9
 800fb38:	f7ff ff8e 	bl	800fa58 <std>
 800fb3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb40:	2202      	movs	r2, #2
 800fb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb46:	2112      	movs	r1, #18
 800fb48:	f7ff bf86 	b.w	800fa58 <std>
 800fb4c:	20008448 	.word	0x20008448
 800fb50:	20008310 	.word	0x20008310
 800fb54:	0800fac5 	.word	0x0800fac5

0800fb58 <__sfp_lock_acquire>:
 800fb58:	4801      	ldr	r0, [pc, #4]	@ (800fb60 <__sfp_lock_acquire+0x8>)
 800fb5a:	f000 b918 	b.w	800fd8e <__retarget_lock_acquire_recursive>
 800fb5e:	bf00      	nop
 800fb60:	20008451 	.word	0x20008451

0800fb64 <__sfp_lock_release>:
 800fb64:	4801      	ldr	r0, [pc, #4]	@ (800fb6c <__sfp_lock_release+0x8>)
 800fb66:	f000 b913 	b.w	800fd90 <__retarget_lock_release_recursive>
 800fb6a:	bf00      	nop
 800fb6c:	20008451 	.word	0x20008451

0800fb70 <__sinit>:
 800fb70:	b510      	push	{r4, lr}
 800fb72:	4604      	mov	r4, r0
 800fb74:	f7ff fff0 	bl	800fb58 <__sfp_lock_acquire>
 800fb78:	6a23      	ldr	r3, [r4, #32]
 800fb7a:	b11b      	cbz	r3, 800fb84 <__sinit+0x14>
 800fb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb80:	f7ff bff0 	b.w	800fb64 <__sfp_lock_release>
 800fb84:	4b04      	ldr	r3, [pc, #16]	@ (800fb98 <__sinit+0x28>)
 800fb86:	6223      	str	r3, [r4, #32]
 800fb88:	4b04      	ldr	r3, [pc, #16]	@ (800fb9c <__sinit+0x2c>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1f5      	bne.n	800fb7c <__sinit+0xc>
 800fb90:	f7ff ffc4 	bl	800fb1c <global_stdio_init.part.0>
 800fb94:	e7f2      	b.n	800fb7c <__sinit+0xc>
 800fb96:	bf00      	nop
 800fb98:	0800fadd 	.word	0x0800fadd
 800fb9c:	20008448 	.word	0x20008448

0800fba0 <_fwalk_sglue>:
 800fba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fba4:	4607      	mov	r7, r0
 800fba6:	4688      	mov	r8, r1
 800fba8:	4614      	mov	r4, r2
 800fbaa:	2600      	movs	r6, #0
 800fbac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbb0:	f1b9 0901 	subs.w	r9, r9, #1
 800fbb4:	d505      	bpl.n	800fbc2 <_fwalk_sglue+0x22>
 800fbb6:	6824      	ldr	r4, [r4, #0]
 800fbb8:	2c00      	cmp	r4, #0
 800fbba:	d1f7      	bne.n	800fbac <_fwalk_sglue+0xc>
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbc2:	89ab      	ldrh	r3, [r5, #12]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d907      	bls.n	800fbd8 <_fwalk_sglue+0x38>
 800fbc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	d003      	beq.n	800fbd8 <_fwalk_sglue+0x38>
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4638      	mov	r0, r7
 800fbd4:	47c0      	blx	r8
 800fbd6:	4306      	orrs	r6, r0
 800fbd8:	3568      	adds	r5, #104	@ 0x68
 800fbda:	e7e9      	b.n	800fbb0 <_fwalk_sglue+0x10>

0800fbdc <iprintf>:
 800fbdc:	b40f      	push	{r0, r1, r2, r3}
 800fbde:	b507      	push	{r0, r1, r2, lr}
 800fbe0:	4906      	ldr	r1, [pc, #24]	@ (800fbfc <iprintf+0x20>)
 800fbe2:	ab04      	add	r3, sp, #16
 800fbe4:	6808      	ldr	r0, [r1, #0]
 800fbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbea:	6881      	ldr	r1, [r0, #8]
 800fbec:	9301      	str	r3, [sp, #4]
 800fbee:	f000 fa27 	bl	8010040 <_vfiprintf_r>
 800fbf2:	b003      	add	sp, #12
 800fbf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbf8:	b004      	add	sp, #16
 800fbfa:	4770      	bx	lr
 800fbfc:	20000038 	.word	0x20000038

0800fc00 <__sread>:
 800fc00:	b510      	push	{r4, lr}
 800fc02:	460c      	mov	r4, r1
 800fc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc08:	f000 f878 	bl	800fcfc <_read_r>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	bfab      	itete	ge
 800fc10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fc12:	89a3      	ldrhlt	r3, [r4, #12]
 800fc14:	181b      	addge	r3, r3, r0
 800fc16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fc1a:	bfac      	ite	ge
 800fc1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fc1e:	81a3      	strhlt	r3, [r4, #12]
 800fc20:	bd10      	pop	{r4, pc}

0800fc22 <__swrite>:
 800fc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc26:	461f      	mov	r7, r3
 800fc28:	898b      	ldrh	r3, [r1, #12]
 800fc2a:	05db      	lsls	r3, r3, #23
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	460c      	mov	r4, r1
 800fc30:	4616      	mov	r6, r2
 800fc32:	d505      	bpl.n	800fc40 <__swrite+0x1e>
 800fc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc38:	2302      	movs	r3, #2
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f000 f84c 	bl	800fcd8 <_lseek_r>
 800fc40:	89a3      	ldrh	r3, [r4, #12]
 800fc42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc4a:	81a3      	strh	r3, [r4, #12]
 800fc4c:	4632      	mov	r2, r6
 800fc4e:	463b      	mov	r3, r7
 800fc50:	4628      	mov	r0, r5
 800fc52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc56:	f000 b863 	b.w	800fd20 <_write_r>

0800fc5a <__sseek>:
 800fc5a:	b510      	push	{r4, lr}
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc62:	f000 f839 	bl	800fcd8 <_lseek_r>
 800fc66:	1c43      	adds	r3, r0, #1
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	bf15      	itete	ne
 800fc6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc76:	81a3      	strheq	r3, [r4, #12]
 800fc78:	bf18      	it	ne
 800fc7a:	81a3      	strhne	r3, [r4, #12]
 800fc7c:	bd10      	pop	{r4, pc}

0800fc7e <__sclose>:
 800fc7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc82:	f000 b819 	b.w	800fcb8 <_close_r>

0800fc86 <memcmp>:
 800fc86:	b510      	push	{r4, lr}
 800fc88:	3901      	subs	r1, #1
 800fc8a:	4402      	add	r2, r0
 800fc8c:	4290      	cmp	r0, r2
 800fc8e:	d101      	bne.n	800fc94 <memcmp+0xe>
 800fc90:	2000      	movs	r0, #0
 800fc92:	e005      	b.n	800fca0 <memcmp+0x1a>
 800fc94:	7803      	ldrb	r3, [r0, #0]
 800fc96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fc9a:	42a3      	cmp	r3, r4
 800fc9c:	d001      	beq.n	800fca2 <memcmp+0x1c>
 800fc9e:	1b18      	subs	r0, r3, r4
 800fca0:	bd10      	pop	{r4, pc}
 800fca2:	3001      	adds	r0, #1
 800fca4:	e7f2      	b.n	800fc8c <memcmp+0x6>

0800fca6 <memset>:
 800fca6:	4402      	add	r2, r0
 800fca8:	4603      	mov	r3, r0
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d100      	bne.n	800fcb0 <memset+0xa>
 800fcae:	4770      	bx	lr
 800fcb0:	f803 1b01 	strb.w	r1, [r3], #1
 800fcb4:	e7f9      	b.n	800fcaa <memset+0x4>
	...

0800fcb8 <_close_r>:
 800fcb8:	b538      	push	{r3, r4, r5, lr}
 800fcba:	4d06      	ldr	r5, [pc, #24]	@ (800fcd4 <_close_r+0x1c>)
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	4608      	mov	r0, r1
 800fcc2:	602b      	str	r3, [r5, #0]
 800fcc4:	f7f1 f9b6 	bl	8001034 <_close>
 800fcc8:	1c43      	adds	r3, r0, #1
 800fcca:	d102      	bne.n	800fcd2 <_close_r+0x1a>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b103      	cbz	r3, 800fcd2 <_close_r+0x1a>
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	bd38      	pop	{r3, r4, r5, pc}
 800fcd4:	2000844c 	.word	0x2000844c

0800fcd8 <_lseek_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4d07      	ldr	r5, [pc, #28]	@ (800fcf8 <_lseek_r+0x20>)
 800fcdc:	4604      	mov	r4, r0
 800fcde:	4608      	mov	r0, r1
 800fce0:	4611      	mov	r1, r2
 800fce2:	2200      	movs	r2, #0
 800fce4:	602a      	str	r2, [r5, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	f7f1 f9cb 	bl	8001082 <_lseek>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_lseek_r+0x1e>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_lseek_r+0x1e>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	2000844c 	.word	0x2000844c

0800fcfc <_read_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4d07      	ldr	r5, [pc, #28]	@ (800fd1c <_read_r+0x20>)
 800fd00:	4604      	mov	r4, r0
 800fd02:	4608      	mov	r0, r1
 800fd04:	4611      	mov	r1, r2
 800fd06:	2200      	movs	r2, #0
 800fd08:	602a      	str	r2, [r5, #0]
 800fd0a:	461a      	mov	r2, r3
 800fd0c:	f7f1 f959 	bl	8000fc2 <_read>
 800fd10:	1c43      	adds	r3, r0, #1
 800fd12:	d102      	bne.n	800fd1a <_read_r+0x1e>
 800fd14:	682b      	ldr	r3, [r5, #0]
 800fd16:	b103      	cbz	r3, 800fd1a <_read_r+0x1e>
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	bd38      	pop	{r3, r4, r5, pc}
 800fd1c:	2000844c 	.word	0x2000844c

0800fd20 <_write_r>:
 800fd20:	b538      	push	{r3, r4, r5, lr}
 800fd22:	4d07      	ldr	r5, [pc, #28]	@ (800fd40 <_write_r+0x20>)
 800fd24:	4604      	mov	r4, r0
 800fd26:	4608      	mov	r0, r1
 800fd28:	4611      	mov	r1, r2
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	602a      	str	r2, [r5, #0]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	f7f1 f964 	bl	8000ffc <_write>
 800fd34:	1c43      	adds	r3, r0, #1
 800fd36:	d102      	bne.n	800fd3e <_write_r+0x1e>
 800fd38:	682b      	ldr	r3, [r5, #0]
 800fd3a:	b103      	cbz	r3, 800fd3e <_write_r+0x1e>
 800fd3c:	6023      	str	r3, [r4, #0]
 800fd3e:	bd38      	pop	{r3, r4, r5, pc}
 800fd40:	2000844c 	.word	0x2000844c

0800fd44 <__libc_init_array>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	4d0d      	ldr	r5, [pc, #52]	@ (800fd7c <__libc_init_array+0x38>)
 800fd48:	4c0d      	ldr	r4, [pc, #52]	@ (800fd80 <__libc_init_array+0x3c>)
 800fd4a:	1b64      	subs	r4, r4, r5
 800fd4c:	10a4      	asrs	r4, r4, #2
 800fd4e:	2600      	movs	r6, #0
 800fd50:	42a6      	cmp	r6, r4
 800fd52:	d109      	bne.n	800fd68 <__libc_init_array+0x24>
 800fd54:	4d0b      	ldr	r5, [pc, #44]	@ (800fd84 <__libc_init_array+0x40>)
 800fd56:	4c0c      	ldr	r4, [pc, #48]	@ (800fd88 <__libc_init_array+0x44>)
 800fd58:	f000 fe48 	bl	80109ec <_init>
 800fd5c:	1b64      	subs	r4, r4, r5
 800fd5e:	10a4      	asrs	r4, r4, #2
 800fd60:	2600      	movs	r6, #0
 800fd62:	42a6      	cmp	r6, r4
 800fd64:	d105      	bne.n	800fd72 <__libc_init_array+0x2e>
 800fd66:	bd70      	pop	{r4, r5, r6, pc}
 800fd68:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd6c:	4798      	blx	r3
 800fd6e:	3601      	adds	r6, #1
 800fd70:	e7ee      	b.n	800fd50 <__libc_init_array+0xc>
 800fd72:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd76:	4798      	blx	r3
 800fd78:	3601      	adds	r6, #1
 800fd7a:	e7f2      	b.n	800fd62 <__libc_init_array+0x1e>
 800fd7c:	080135d0 	.word	0x080135d0
 800fd80:	080135d0 	.word	0x080135d0
 800fd84:	080135d0 	.word	0x080135d0
 800fd88:	080135d4 	.word	0x080135d4

0800fd8c <__retarget_lock_init_recursive>:
 800fd8c:	4770      	bx	lr

0800fd8e <__retarget_lock_acquire_recursive>:
 800fd8e:	4770      	bx	lr

0800fd90 <__retarget_lock_release_recursive>:
 800fd90:	4770      	bx	lr

0800fd92 <memcpy>:
 800fd92:	440a      	add	r2, r1
 800fd94:	4291      	cmp	r1, r2
 800fd96:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fd9a:	d100      	bne.n	800fd9e <memcpy+0xc>
 800fd9c:	4770      	bx	lr
 800fd9e:	b510      	push	{r4, lr}
 800fda0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fda4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fda8:	4291      	cmp	r1, r2
 800fdaa:	d1f9      	bne.n	800fda0 <memcpy+0xe>
 800fdac:	bd10      	pop	{r4, pc}
	...

0800fdb0 <__assert_func>:
 800fdb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdb2:	4614      	mov	r4, r2
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	4b09      	ldr	r3, [pc, #36]	@ (800fddc <__assert_func+0x2c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4605      	mov	r5, r0
 800fdbc:	68d8      	ldr	r0, [r3, #12]
 800fdbe:	b14c      	cbz	r4, 800fdd4 <__assert_func+0x24>
 800fdc0:	4b07      	ldr	r3, [pc, #28]	@ (800fde0 <__assert_func+0x30>)
 800fdc2:	9100      	str	r1, [sp, #0]
 800fdc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdc8:	4906      	ldr	r1, [pc, #24]	@ (800fde4 <__assert_func+0x34>)
 800fdca:	462b      	mov	r3, r5
 800fdcc:	f000 fc88 	bl	80106e0 <fiprintf>
 800fdd0:	f000 fd3c 	bl	801084c <abort>
 800fdd4:	4b04      	ldr	r3, [pc, #16]	@ (800fde8 <__assert_func+0x38>)
 800fdd6:	461c      	mov	r4, r3
 800fdd8:	e7f3      	b.n	800fdc2 <__assert_func+0x12>
 800fdda:	bf00      	nop
 800fddc:	20000038 	.word	0x20000038
 800fde0:	08013559 	.word	0x08013559
 800fde4:	08013566 	.word	0x08013566
 800fde8:	08013594 	.word	0x08013594

0800fdec <_free_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4605      	mov	r5, r0
 800fdf0:	2900      	cmp	r1, #0
 800fdf2:	d041      	beq.n	800fe78 <_free_r+0x8c>
 800fdf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdf8:	1f0c      	subs	r4, r1, #4
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	bfb8      	it	lt
 800fdfe:	18e4      	addlt	r4, r4, r3
 800fe00:	f000 f8e8 	bl	800ffd4 <__malloc_lock>
 800fe04:	4a1d      	ldr	r2, [pc, #116]	@ (800fe7c <_free_r+0x90>)
 800fe06:	6813      	ldr	r3, [r2, #0]
 800fe08:	b933      	cbnz	r3, 800fe18 <_free_r+0x2c>
 800fe0a:	6063      	str	r3, [r4, #4]
 800fe0c:	6014      	str	r4, [r2, #0]
 800fe0e:	4628      	mov	r0, r5
 800fe10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe14:	f000 b8e4 	b.w	800ffe0 <__malloc_unlock>
 800fe18:	42a3      	cmp	r3, r4
 800fe1a:	d908      	bls.n	800fe2e <_free_r+0x42>
 800fe1c:	6820      	ldr	r0, [r4, #0]
 800fe1e:	1821      	adds	r1, r4, r0
 800fe20:	428b      	cmp	r3, r1
 800fe22:	bf01      	itttt	eq
 800fe24:	6819      	ldreq	r1, [r3, #0]
 800fe26:	685b      	ldreq	r3, [r3, #4]
 800fe28:	1809      	addeq	r1, r1, r0
 800fe2a:	6021      	streq	r1, [r4, #0]
 800fe2c:	e7ed      	b.n	800fe0a <_free_r+0x1e>
 800fe2e:	461a      	mov	r2, r3
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	b10b      	cbz	r3, 800fe38 <_free_r+0x4c>
 800fe34:	42a3      	cmp	r3, r4
 800fe36:	d9fa      	bls.n	800fe2e <_free_r+0x42>
 800fe38:	6811      	ldr	r1, [r2, #0]
 800fe3a:	1850      	adds	r0, r2, r1
 800fe3c:	42a0      	cmp	r0, r4
 800fe3e:	d10b      	bne.n	800fe58 <_free_r+0x6c>
 800fe40:	6820      	ldr	r0, [r4, #0]
 800fe42:	4401      	add	r1, r0
 800fe44:	1850      	adds	r0, r2, r1
 800fe46:	4283      	cmp	r3, r0
 800fe48:	6011      	str	r1, [r2, #0]
 800fe4a:	d1e0      	bne.n	800fe0e <_free_r+0x22>
 800fe4c:	6818      	ldr	r0, [r3, #0]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	6053      	str	r3, [r2, #4]
 800fe52:	4408      	add	r0, r1
 800fe54:	6010      	str	r0, [r2, #0]
 800fe56:	e7da      	b.n	800fe0e <_free_r+0x22>
 800fe58:	d902      	bls.n	800fe60 <_free_r+0x74>
 800fe5a:	230c      	movs	r3, #12
 800fe5c:	602b      	str	r3, [r5, #0]
 800fe5e:	e7d6      	b.n	800fe0e <_free_r+0x22>
 800fe60:	6820      	ldr	r0, [r4, #0]
 800fe62:	1821      	adds	r1, r4, r0
 800fe64:	428b      	cmp	r3, r1
 800fe66:	bf04      	itt	eq
 800fe68:	6819      	ldreq	r1, [r3, #0]
 800fe6a:	685b      	ldreq	r3, [r3, #4]
 800fe6c:	6063      	str	r3, [r4, #4]
 800fe6e:	bf04      	itt	eq
 800fe70:	1809      	addeq	r1, r1, r0
 800fe72:	6021      	streq	r1, [r4, #0]
 800fe74:	6054      	str	r4, [r2, #4]
 800fe76:	e7ca      	b.n	800fe0e <_free_r+0x22>
 800fe78:	bd38      	pop	{r3, r4, r5, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20008458 	.word	0x20008458

0800fe80 <malloc>:
 800fe80:	4b02      	ldr	r3, [pc, #8]	@ (800fe8c <malloc+0xc>)
 800fe82:	4601      	mov	r1, r0
 800fe84:	6818      	ldr	r0, [r3, #0]
 800fe86:	f000 b825 	b.w	800fed4 <_malloc_r>
 800fe8a:	bf00      	nop
 800fe8c:	20000038 	.word	0x20000038

0800fe90 <sbrk_aligned>:
 800fe90:	b570      	push	{r4, r5, r6, lr}
 800fe92:	4e0f      	ldr	r6, [pc, #60]	@ (800fed0 <sbrk_aligned+0x40>)
 800fe94:	460c      	mov	r4, r1
 800fe96:	6831      	ldr	r1, [r6, #0]
 800fe98:	4605      	mov	r5, r0
 800fe9a:	b911      	cbnz	r1, 800fea2 <sbrk_aligned+0x12>
 800fe9c:	f000 fcc6 	bl	801082c <_sbrk_r>
 800fea0:	6030      	str	r0, [r6, #0]
 800fea2:	4621      	mov	r1, r4
 800fea4:	4628      	mov	r0, r5
 800fea6:	f000 fcc1 	bl	801082c <_sbrk_r>
 800feaa:	1c43      	adds	r3, r0, #1
 800feac:	d103      	bne.n	800feb6 <sbrk_aligned+0x26>
 800feae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800feb2:	4620      	mov	r0, r4
 800feb4:	bd70      	pop	{r4, r5, r6, pc}
 800feb6:	1cc4      	adds	r4, r0, #3
 800feb8:	f024 0403 	bic.w	r4, r4, #3
 800febc:	42a0      	cmp	r0, r4
 800febe:	d0f8      	beq.n	800feb2 <sbrk_aligned+0x22>
 800fec0:	1a21      	subs	r1, r4, r0
 800fec2:	4628      	mov	r0, r5
 800fec4:	f000 fcb2 	bl	801082c <_sbrk_r>
 800fec8:	3001      	adds	r0, #1
 800feca:	d1f2      	bne.n	800feb2 <sbrk_aligned+0x22>
 800fecc:	e7ef      	b.n	800feae <sbrk_aligned+0x1e>
 800fece:	bf00      	nop
 800fed0:	20008454 	.word	0x20008454

0800fed4 <_malloc_r>:
 800fed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fed8:	1ccd      	adds	r5, r1, #3
 800feda:	f025 0503 	bic.w	r5, r5, #3
 800fede:	3508      	adds	r5, #8
 800fee0:	2d0c      	cmp	r5, #12
 800fee2:	bf38      	it	cc
 800fee4:	250c      	movcc	r5, #12
 800fee6:	2d00      	cmp	r5, #0
 800fee8:	4606      	mov	r6, r0
 800feea:	db01      	blt.n	800fef0 <_malloc_r+0x1c>
 800feec:	42a9      	cmp	r1, r5
 800feee:	d904      	bls.n	800fefa <_malloc_r+0x26>
 800fef0:	230c      	movs	r3, #12
 800fef2:	6033      	str	r3, [r6, #0]
 800fef4:	2000      	movs	r0, #0
 800fef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fefa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ffd0 <_malloc_r+0xfc>
 800fefe:	f000 f869 	bl	800ffd4 <__malloc_lock>
 800ff02:	f8d8 3000 	ldr.w	r3, [r8]
 800ff06:	461c      	mov	r4, r3
 800ff08:	bb44      	cbnz	r4, 800ff5c <_malloc_r+0x88>
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f7ff ffbf 	bl	800fe90 <sbrk_aligned>
 800ff12:	1c43      	adds	r3, r0, #1
 800ff14:	4604      	mov	r4, r0
 800ff16:	d158      	bne.n	800ffca <_malloc_r+0xf6>
 800ff18:	f8d8 4000 	ldr.w	r4, [r8]
 800ff1c:	4627      	mov	r7, r4
 800ff1e:	2f00      	cmp	r7, #0
 800ff20:	d143      	bne.n	800ffaa <_malloc_r+0xd6>
 800ff22:	2c00      	cmp	r4, #0
 800ff24:	d04b      	beq.n	800ffbe <_malloc_r+0xea>
 800ff26:	6823      	ldr	r3, [r4, #0]
 800ff28:	4639      	mov	r1, r7
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	eb04 0903 	add.w	r9, r4, r3
 800ff30:	f000 fc7c 	bl	801082c <_sbrk_r>
 800ff34:	4581      	cmp	r9, r0
 800ff36:	d142      	bne.n	800ffbe <_malloc_r+0xea>
 800ff38:	6821      	ldr	r1, [r4, #0]
 800ff3a:	1a6d      	subs	r5, r5, r1
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4630      	mov	r0, r6
 800ff40:	f7ff ffa6 	bl	800fe90 <sbrk_aligned>
 800ff44:	3001      	adds	r0, #1
 800ff46:	d03a      	beq.n	800ffbe <_malloc_r+0xea>
 800ff48:	6823      	ldr	r3, [r4, #0]
 800ff4a:	442b      	add	r3, r5
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff52:	685a      	ldr	r2, [r3, #4]
 800ff54:	bb62      	cbnz	r2, 800ffb0 <_malloc_r+0xdc>
 800ff56:	f8c8 7000 	str.w	r7, [r8]
 800ff5a:	e00f      	b.n	800ff7c <_malloc_r+0xa8>
 800ff5c:	6822      	ldr	r2, [r4, #0]
 800ff5e:	1b52      	subs	r2, r2, r5
 800ff60:	d420      	bmi.n	800ffa4 <_malloc_r+0xd0>
 800ff62:	2a0b      	cmp	r2, #11
 800ff64:	d917      	bls.n	800ff96 <_malloc_r+0xc2>
 800ff66:	1961      	adds	r1, r4, r5
 800ff68:	42a3      	cmp	r3, r4
 800ff6a:	6025      	str	r5, [r4, #0]
 800ff6c:	bf18      	it	ne
 800ff6e:	6059      	strne	r1, [r3, #4]
 800ff70:	6863      	ldr	r3, [r4, #4]
 800ff72:	bf08      	it	eq
 800ff74:	f8c8 1000 	streq.w	r1, [r8]
 800ff78:	5162      	str	r2, [r4, r5]
 800ff7a:	604b      	str	r3, [r1, #4]
 800ff7c:	4630      	mov	r0, r6
 800ff7e:	f000 f82f 	bl	800ffe0 <__malloc_unlock>
 800ff82:	f104 000b 	add.w	r0, r4, #11
 800ff86:	1d23      	adds	r3, r4, #4
 800ff88:	f020 0007 	bic.w	r0, r0, #7
 800ff8c:	1ac2      	subs	r2, r0, r3
 800ff8e:	bf1c      	itt	ne
 800ff90:	1a1b      	subne	r3, r3, r0
 800ff92:	50a3      	strne	r3, [r4, r2]
 800ff94:	e7af      	b.n	800fef6 <_malloc_r+0x22>
 800ff96:	6862      	ldr	r2, [r4, #4]
 800ff98:	42a3      	cmp	r3, r4
 800ff9a:	bf0c      	ite	eq
 800ff9c:	f8c8 2000 	streq.w	r2, [r8]
 800ffa0:	605a      	strne	r2, [r3, #4]
 800ffa2:	e7eb      	b.n	800ff7c <_malloc_r+0xa8>
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	6864      	ldr	r4, [r4, #4]
 800ffa8:	e7ae      	b.n	800ff08 <_malloc_r+0x34>
 800ffaa:	463c      	mov	r4, r7
 800ffac:	687f      	ldr	r7, [r7, #4]
 800ffae:	e7b6      	b.n	800ff1e <_malloc_r+0x4a>
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	42a3      	cmp	r3, r4
 800ffb6:	d1fb      	bne.n	800ffb0 <_malloc_r+0xdc>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	6053      	str	r3, [r2, #4]
 800ffbc:	e7de      	b.n	800ff7c <_malloc_r+0xa8>
 800ffbe:	230c      	movs	r3, #12
 800ffc0:	6033      	str	r3, [r6, #0]
 800ffc2:	4630      	mov	r0, r6
 800ffc4:	f000 f80c 	bl	800ffe0 <__malloc_unlock>
 800ffc8:	e794      	b.n	800fef4 <_malloc_r+0x20>
 800ffca:	6005      	str	r5, [r0, #0]
 800ffcc:	e7d6      	b.n	800ff7c <_malloc_r+0xa8>
 800ffce:	bf00      	nop
 800ffd0:	20008458 	.word	0x20008458

0800ffd4 <__malloc_lock>:
 800ffd4:	4801      	ldr	r0, [pc, #4]	@ (800ffdc <__malloc_lock+0x8>)
 800ffd6:	f7ff beda 	b.w	800fd8e <__retarget_lock_acquire_recursive>
 800ffda:	bf00      	nop
 800ffdc:	20008450 	.word	0x20008450

0800ffe0 <__malloc_unlock>:
 800ffe0:	4801      	ldr	r0, [pc, #4]	@ (800ffe8 <__malloc_unlock+0x8>)
 800ffe2:	f7ff bed5 	b.w	800fd90 <__retarget_lock_release_recursive>
 800ffe6:	bf00      	nop
 800ffe8:	20008450 	.word	0x20008450

0800ffec <__sfputc_r>:
 800ffec:	6893      	ldr	r3, [r2, #8]
 800ffee:	3b01      	subs	r3, #1
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	b410      	push	{r4}
 800fff4:	6093      	str	r3, [r2, #8]
 800fff6:	da08      	bge.n	801000a <__sfputc_r+0x1e>
 800fff8:	6994      	ldr	r4, [r2, #24]
 800fffa:	42a3      	cmp	r3, r4
 800fffc:	db01      	blt.n	8010002 <__sfputc_r+0x16>
 800fffe:	290a      	cmp	r1, #10
 8010000:	d103      	bne.n	801000a <__sfputc_r+0x1e>
 8010002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010006:	f000 bb7d 	b.w	8010704 <__swbuf_r>
 801000a:	6813      	ldr	r3, [r2, #0]
 801000c:	1c58      	adds	r0, r3, #1
 801000e:	6010      	str	r0, [r2, #0]
 8010010:	7019      	strb	r1, [r3, #0]
 8010012:	4608      	mov	r0, r1
 8010014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010018:	4770      	bx	lr

0801001a <__sfputs_r>:
 801001a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001c:	4606      	mov	r6, r0
 801001e:	460f      	mov	r7, r1
 8010020:	4614      	mov	r4, r2
 8010022:	18d5      	adds	r5, r2, r3
 8010024:	42ac      	cmp	r4, r5
 8010026:	d101      	bne.n	801002c <__sfputs_r+0x12>
 8010028:	2000      	movs	r0, #0
 801002a:	e007      	b.n	801003c <__sfputs_r+0x22>
 801002c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010030:	463a      	mov	r2, r7
 8010032:	4630      	mov	r0, r6
 8010034:	f7ff ffda 	bl	800ffec <__sfputc_r>
 8010038:	1c43      	adds	r3, r0, #1
 801003a:	d1f3      	bne.n	8010024 <__sfputs_r+0xa>
 801003c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010040 <_vfiprintf_r>:
 8010040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010044:	460d      	mov	r5, r1
 8010046:	b09d      	sub	sp, #116	@ 0x74
 8010048:	4614      	mov	r4, r2
 801004a:	4698      	mov	r8, r3
 801004c:	4606      	mov	r6, r0
 801004e:	b118      	cbz	r0, 8010058 <_vfiprintf_r+0x18>
 8010050:	6a03      	ldr	r3, [r0, #32]
 8010052:	b90b      	cbnz	r3, 8010058 <_vfiprintf_r+0x18>
 8010054:	f7ff fd8c 	bl	800fb70 <__sinit>
 8010058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801005a:	07d9      	lsls	r1, r3, #31
 801005c:	d405      	bmi.n	801006a <_vfiprintf_r+0x2a>
 801005e:	89ab      	ldrh	r3, [r5, #12]
 8010060:	059a      	lsls	r2, r3, #22
 8010062:	d402      	bmi.n	801006a <_vfiprintf_r+0x2a>
 8010064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010066:	f7ff fe92 	bl	800fd8e <__retarget_lock_acquire_recursive>
 801006a:	89ab      	ldrh	r3, [r5, #12]
 801006c:	071b      	lsls	r3, r3, #28
 801006e:	d501      	bpl.n	8010074 <_vfiprintf_r+0x34>
 8010070:	692b      	ldr	r3, [r5, #16]
 8010072:	b99b      	cbnz	r3, 801009c <_vfiprintf_r+0x5c>
 8010074:	4629      	mov	r1, r5
 8010076:	4630      	mov	r0, r6
 8010078:	f000 fb82 	bl	8010780 <__swsetup_r>
 801007c:	b170      	cbz	r0, 801009c <_vfiprintf_r+0x5c>
 801007e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010080:	07dc      	lsls	r4, r3, #31
 8010082:	d504      	bpl.n	801008e <_vfiprintf_r+0x4e>
 8010084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010088:	b01d      	add	sp, #116	@ 0x74
 801008a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008e:	89ab      	ldrh	r3, [r5, #12]
 8010090:	0598      	lsls	r0, r3, #22
 8010092:	d4f7      	bmi.n	8010084 <_vfiprintf_r+0x44>
 8010094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010096:	f7ff fe7b 	bl	800fd90 <__retarget_lock_release_recursive>
 801009a:	e7f3      	b.n	8010084 <_vfiprintf_r+0x44>
 801009c:	2300      	movs	r3, #0
 801009e:	9309      	str	r3, [sp, #36]	@ 0x24
 80100a0:	2320      	movs	r3, #32
 80100a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80100a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80100aa:	2330      	movs	r3, #48	@ 0x30
 80100ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801025c <_vfiprintf_r+0x21c>
 80100b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80100b4:	f04f 0901 	mov.w	r9, #1
 80100b8:	4623      	mov	r3, r4
 80100ba:	469a      	mov	sl, r3
 80100bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100c0:	b10a      	cbz	r2, 80100c6 <_vfiprintf_r+0x86>
 80100c2:	2a25      	cmp	r2, #37	@ 0x25
 80100c4:	d1f9      	bne.n	80100ba <_vfiprintf_r+0x7a>
 80100c6:	ebba 0b04 	subs.w	fp, sl, r4
 80100ca:	d00b      	beq.n	80100e4 <_vfiprintf_r+0xa4>
 80100cc:	465b      	mov	r3, fp
 80100ce:	4622      	mov	r2, r4
 80100d0:	4629      	mov	r1, r5
 80100d2:	4630      	mov	r0, r6
 80100d4:	f7ff ffa1 	bl	801001a <__sfputs_r>
 80100d8:	3001      	adds	r0, #1
 80100da:	f000 80a7 	beq.w	801022c <_vfiprintf_r+0x1ec>
 80100de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100e0:	445a      	add	r2, fp
 80100e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80100e4:	f89a 3000 	ldrb.w	r3, [sl]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	f000 809f 	beq.w	801022c <_vfiprintf_r+0x1ec>
 80100ee:	2300      	movs	r3, #0
 80100f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80100f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100f8:	f10a 0a01 	add.w	sl, sl, #1
 80100fc:	9304      	str	r3, [sp, #16]
 80100fe:	9307      	str	r3, [sp, #28]
 8010100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010104:	931a      	str	r3, [sp, #104]	@ 0x68
 8010106:	4654      	mov	r4, sl
 8010108:	2205      	movs	r2, #5
 801010a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801010e:	4853      	ldr	r0, [pc, #332]	@ (801025c <_vfiprintf_r+0x21c>)
 8010110:	f7f0 f896 	bl	8000240 <memchr>
 8010114:	9a04      	ldr	r2, [sp, #16]
 8010116:	b9d8      	cbnz	r0, 8010150 <_vfiprintf_r+0x110>
 8010118:	06d1      	lsls	r1, r2, #27
 801011a:	bf44      	itt	mi
 801011c:	2320      	movmi	r3, #32
 801011e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010122:	0713      	lsls	r3, r2, #28
 8010124:	bf44      	itt	mi
 8010126:	232b      	movmi	r3, #43	@ 0x2b
 8010128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801012c:	f89a 3000 	ldrb.w	r3, [sl]
 8010130:	2b2a      	cmp	r3, #42	@ 0x2a
 8010132:	d015      	beq.n	8010160 <_vfiprintf_r+0x120>
 8010134:	9a07      	ldr	r2, [sp, #28]
 8010136:	4654      	mov	r4, sl
 8010138:	2000      	movs	r0, #0
 801013a:	f04f 0c0a 	mov.w	ip, #10
 801013e:	4621      	mov	r1, r4
 8010140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010144:	3b30      	subs	r3, #48	@ 0x30
 8010146:	2b09      	cmp	r3, #9
 8010148:	d94b      	bls.n	80101e2 <_vfiprintf_r+0x1a2>
 801014a:	b1b0      	cbz	r0, 801017a <_vfiprintf_r+0x13a>
 801014c:	9207      	str	r2, [sp, #28]
 801014e:	e014      	b.n	801017a <_vfiprintf_r+0x13a>
 8010150:	eba0 0308 	sub.w	r3, r0, r8
 8010154:	fa09 f303 	lsl.w	r3, r9, r3
 8010158:	4313      	orrs	r3, r2
 801015a:	9304      	str	r3, [sp, #16]
 801015c:	46a2      	mov	sl, r4
 801015e:	e7d2      	b.n	8010106 <_vfiprintf_r+0xc6>
 8010160:	9b03      	ldr	r3, [sp, #12]
 8010162:	1d19      	adds	r1, r3, #4
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	9103      	str	r1, [sp, #12]
 8010168:	2b00      	cmp	r3, #0
 801016a:	bfbb      	ittet	lt
 801016c:	425b      	neglt	r3, r3
 801016e:	f042 0202 	orrlt.w	r2, r2, #2
 8010172:	9307      	strge	r3, [sp, #28]
 8010174:	9307      	strlt	r3, [sp, #28]
 8010176:	bfb8      	it	lt
 8010178:	9204      	strlt	r2, [sp, #16]
 801017a:	7823      	ldrb	r3, [r4, #0]
 801017c:	2b2e      	cmp	r3, #46	@ 0x2e
 801017e:	d10a      	bne.n	8010196 <_vfiprintf_r+0x156>
 8010180:	7863      	ldrb	r3, [r4, #1]
 8010182:	2b2a      	cmp	r3, #42	@ 0x2a
 8010184:	d132      	bne.n	80101ec <_vfiprintf_r+0x1ac>
 8010186:	9b03      	ldr	r3, [sp, #12]
 8010188:	1d1a      	adds	r2, r3, #4
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	9203      	str	r2, [sp, #12]
 801018e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010192:	3402      	adds	r4, #2
 8010194:	9305      	str	r3, [sp, #20]
 8010196:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801026c <_vfiprintf_r+0x22c>
 801019a:	7821      	ldrb	r1, [r4, #0]
 801019c:	2203      	movs	r2, #3
 801019e:	4650      	mov	r0, sl
 80101a0:	f7f0 f84e 	bl	8000240 <memchr>
 80101a4:	b138      	cbz	r0, 80101b6 <_vfiprintf_r+0x176>
 80101a6:	9b04      	ldr	r3, [sp, #16]
 80101a8:	eba0 000a 	sub.w	r0, r0, sl
 80101ac:	2240      	movs	r2, #64	@ 0x40
 80101ae:	4082      	lsls	r2, r0
 80101b0:	4313      	orrs	r3, r2
 80101b2:	3401      	adds	r4, #1
 80101b4:	9304      	str	r3, [sp, #16]
 80101b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ba:	4829      	ldr	r0, [pc, #164]	@ (8010260 <_vfiprintf_r+0x220>)
 80101bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80101c0:	2206      	movs	r2, #6
 80101c2:	f7f0 f83d 	bl	8000240 <memchr>
 80101c6:	2800      	cmp	r0, #0
 80101c8:	d03f      	beq.n	801024a <_vfiprintf_r+0x20a>
 80101ca:	4b26      	ldr	r3, [pc, #152]	@ (8010264 <_vfiprintf_r+0x224>)
 80101cc:	bb1b      	cbnz	r3, 8010216 <_vfiprintf_r+0x1d6>
 80101ce:	9b03      	ldr	r3, [sp, #12]
 80101d0:	3307      	adds	r3, #7
 80101d2:	f023 0307 	bic.w	r3, r3, #7
 80101d6:	3308      	adds	r3, #8
 80101d8:	9303      	str	r3, [sp, #12]
 80101da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101dc:	443b      	add	r3, r7
 80101de:	9309      	str	r3, [sp, #36]	@ 0x24
 80101e0:	e76a      	b.n	80100b8 <_vfiprintf_r+0x78>
 80101e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80101e6:	460c      	mov	r4, r1
 80101e8:	2001      	movs	r0, #1
 80101ea:	e7a8      	b.n	801013e <_vfiprintf_r+0xfe>
 80101ec:	2300      	movs	r3, #0
 80101ee:	3401      	adds	r4, #1
 80101f0:	9305      	str	r3, [sp, #20]
 80101f2:	4619      	mov	r1, r3
 80101f4:	f04f 0c0a 	mov.w	ip, #10
 80101f8:	4620      	mov	r0, r4
 80101fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101fe:	3a30      	subs	r2, #48	@ 0x30
 8010200:	2a09      	cmp	r2, #9
 8010202:	d903      	bls.n	801020c <_vfiprintf_r+0x1cc>
 8010204:	2b00      	cmp	r3, #0
 8010206:	d0c6      	beq.n	8010196 <_vfiprintf_r+0x156>
 8010208:	9105      	str	r1, [sp, #20]
 801020a:	e7c4      	b.n	8010196 <_vfiprintf_r+0x156>
 801020c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010210:	4604      	mov	r4, r0
 8010212:	2301      	movs	r3, #1
 8010214:	e7f0      	b.n	80101f8 <_vfiprintf_r+0x1b8>
 8010216:	ab03      	add	r3, sp, #12
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	462a      	mov	r2, r5
 801021c:	4b12      	ldr	r3, [pc, #72]	@ (8010268 <_vfiprintf_r+0x228>)
 801021e:	a904      	add	r1, sp, #16
 8010220:	4630      	mov	r0, r6
 8010222:	f3af 8000 	nop.w
 8010226:	4607      	mov	r7, r0
 8010228:	1c78      	adds	r0, r7, #1
 801022a:	d1d6      	bne.n	80101da <_vfiprintf_r+0x19a>
 801022c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801022e:	07d9      	lsls	r1, r3, #31
 8010230:	d405      	bmi.n	801023e <_vfiprintf_r+0x1fe>
 8010232:	89ab      	ldrh	r3, [r5, #12]
 8010234:	059a      	lsls	r2, r3, #22
 8010236:	d402      	bmi.n	801023e <_vfiprintf_r+0x1fe>
 8010238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801023a:	f7ff fda9 	bl	800fd90 <__retarget_lock_release_recursive>
 801023e:	89ab      	ldrh	r3, [r5, #12]
 8010240:	065b      	lsls	r3, r3, #25
 8010242:	f53f af1f 	bmi.w	8010084 <_vfiprintf_r+0x44>
 8010246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010248:	e71e      	b.n	8010088 <_vfiprintf_r+0x48>
 801024a:	ab03      	add	r3, sp, #12
 801024c:	9300      	str	r3, [sp, #0]
 801024e:	462a      	mov	r2, r5
 8010250:	4b05      	ldr	r3, [pc, #20]	@ (8010268 <_vfiprintf_r+0x228>)
 8010252:	a904      	add	r1, sp, #16
 8010254:	4630      	mov	r0, r6
 8010256:	f000 f879 	bl	801034c <_printf_i>
 801025a:	e7e4      	b.n	8010226 <_vfiprintf_r+0x1e6>
 801025c:	08013595 	.word	0x08013595
 8010260:	0801359f 	.word	0x0801359f
 8010264:	00000000 	.word	0x00000000
 8010268:	0801001b 	.word	0x0801001b
 801026c:	0801359b 	.word	0x0801359b

08010270 <_printf_common>:
 8010270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010274:	4616      	mov	r6, r2
 8010276:	4698      	mov	r8, r3
 8010278:	688a      	ldr	r2, [r1, #8]
 801027a:	690b      	ldr	r3, [r1, #16]
 801027c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010280:	4293      	cmp	r3, r2
 8010282:	bfb8      	it	lt
 8010284:	4613      	movlt	r3, r2
 8010286:	6033      	str	r3, [r6, #0]
 8010288:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801028c:	4607      	mov	r7, r0
 801028e:	460c      	mov	r4, r1
 8010290:	b10a      	cbz	r2, 8010296 <_printf_common+0x26>
 8010292:	3301      	adds	r3, #1
 8010294:	6033      	str	r3, [r6, #0]
 8010296:	6823      	ldr	r3, [r4, #0]
 8010298:	0699      	lsls	r1, r3, #26
 801029a:	bf42      	ittt	mi
 801029c:	6833      	ldrmi	r3, [r6, #0]
 801029e:	3302      	addmi	r3, #2
 80102a0:	6033      	strmi	r3, [r6, #0]
 80102a2:	6825      	ldr	r5, [r4, #0]
 80102a4:	f015 0506 	ands.w	r5, r5, #6
 80102a8:	d106      	bne.n	80102b8 <_printf_common+0x48>
 80102aa:	f104 0a19 	add.w	sl, r4, #25
 80102ae:	68e3      	ldr	r3, [r4, #12]
 80102b0:	6832      	ldr	r2, [r6, #0]
 80102b2:	1a9b      	subs	r3, r3, r2
 80102b4:	42ab      	cmp	r3, r5
 80102b6:	dc26      	bgt.n	8010306 <_printf_common+0x96>
 80102b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80102bc:	6822      	ldr	r2, [r4, #0]
 80102be:	3b00      	subs	r3, #0
 80102c0:	bf18      	it	ne
 80102c2:	2301      	movne	r3, #1
 80102c4:	0692      	lsls	r2, r2, #26
 80102c6:	d42b      	bmi.n	8010320 <_printf_common+0xb0>
 80102c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80102cc:	4641      	mov	r1, r8
 80102ce:	4638      	mov	r0, r7
 80102d0:	47c8      	blx	r9
 80102d2:	3001      	adds	r0, #1
 80102d4:	d01e      	beq.n	8010314 <_printf_common+0xa4>
 80102d6:	6823      	ldr	r3, [r4, #0]
 80102d8:	6922      	ldr	r2, [r4, #16]
 80102da:	f003 0306 	and.w	r3, r3, #6
 80102de:	2b04      	cmp	r3, #4
 80102e0:	bf02      	ittt	eq
 80102e2:	68e5      	ldreq	r5, [r4, #12]
 80102e4:	6833      	ldreq	r3, [r6, #0]
 80102e6:	1aed      	subeq	r5, r5, r3
 80102e8:	68a3      	ldr	r3, [r4, #8]
 80102ea:	bf0c      	ite	eq
 80102ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102f0:	2500      	movne	r5, #0
 80102f2:	4293      	cmp	r3, r2
 80102f4:	bfc4      	itt	gt
 80102f6:	1a9b      	subgt	r3, r3, r2
 80102f8:	18ed      	addgt	r5, r5, r3
 80102fa:	2600      	movs	r6, #0
 80102fc:	341a      	adds	r4, #26
 80102fe:	42b5      	cmp	r5, r6
 8010300:	d11a      	bne.n	8010338 <_printf_common+0xc8>
 8010302:	2000      	movs	r0, #0
 8010304:	e008      	b.n	8010318 <_printf_common+0xa8>
 8010306:	2301      	movs	r3, #1
 8010308:	4652      	mov	r2, sl
 801030a:	4641      	mov	r1, r8
 801030c:	4638      	mov	r0, r7
 801030e:	47c8      	blx	r9
 8010310:	3001      	adds	r0, #1
 8010312:	d103      	bne.n	801031c <_printf_common+0xac>
 8010314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801031c:	3501      	adds	r5, #1
 801031e:	e7c6      	b.n	80102ae <_printf_common+0x3e>
 8010320:	18e1      	adds	r1, r4, r3
 8010322:	1c5a      	adds	r2, r3, #1
 8010324:	2030      	movs	r0, #48	@ 0x30
 8010326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801032a:	4422      	add	r2, r4
 801032c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010334:	3302      	adds	r3, #2
 8010336:	e7c7      	b.n	80102c8 <_printf_common+0x58>
 8010338:	2301      	movs	r3, #1
 801033a:	4622      	mov	r2, r4
 801033c:	4641      	mov	r1, r8
 801033e:	4638      	mov	r0, r7
 8010340:	47c8      	blx	r9
 8010342:	3001      	adds	r0, #1
 8010344:	d0e6      	beq.n	8010314 <_printf_common+0xa4>
 8010346:	3601      	adds	r6, #1
 8010348:	e7d9      	b.n	80102fe <_printf_common+0x8e>
	...

0801034c <_printf_i>:
 801034c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010350:	7e0f      	ldrb	r7, [r1, #24]
 8010352:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010354:	2f78      	cmp	r7, #120	@ 0x78
 8010356:	4691      	mov	r9, r2
 8010358:	4680      	mov	r8, r0
 801035a:	460c      	mov	r4, r1
 801035c:	469a      	mov	sl, r3
 801035e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010362:	d807      	bhi.n	8010374 <_printf_i+0x28>
 8010364:	2f62      	cmp	r7, #98	@ 0x62
 8010366:	d80a      	bhi.n	801037e <_printf_i+0x32>
 8010368:	2f00      	cmp	r7, #0
 801036a:	f000 80d1 	beq.w	8010510 <_printf_i+0x1c4>
 801036e:	2f58      	cmp	r7, #88	@ 0x58
 8010370:	f000 80b8 	beq.w	80104e4 <_printf_i+0x198>
 8010374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801037c:	e03a      	b.n	80103f4 <_printf_i+0xa8>
 801037e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010382:	2b15      	cmp	r3, #21
 8010384:	d8f6      	bhi.n	8010374 <_printf_i+0x28>
 8010386:	a101      	add	r1, pc, #4	@ (adr r1, 801038c <_printf_i+0x40>)
 8010388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801038c:	080103e5 	.word	0x080103e5
 8010390:	080103f9 	.word	0x080103f9
 8010394:	08010375 	.word	0x08010375
 8010398:	08010375 	.word	0x08010375
 801039c:	08010375 	.word	0x08010375
 80103a0:	08010375 	.word	0x08010375
 80103a4:	080103f9 	.word	0x080103f9
 80103a8:	08010375 	.word	0x08010375
 80103ac:	08010375 	.word	0x08010375
 80103b0:	08010375 	.word	0x08010375
 80103b4:	08010375 	.word	0x08010375
 80103b8:	080104f7 	.word	0x080104f7
 80103bc:	08010423 	.word	0x08010423
 80103c0:	080104b1 	.word	0x080104b1
 80103c4:	08010375 	.word	0x08010375
 80103c8:	08010375 	.word	0x08010375
 80103cc:	08010519 	.word	0x08010519
 80103d0:	08010375 	.word	0x08010375
 80103d4:	08010423 	.word	0x08010423
 80103d8:	08010375 	.word	0x08010375
 80103dc:	08010375 	.word	0x08010375
 80103e0:	080104b9 	.word	0x080104b9
 80103e4:	6833      	ldr	r3, [r6, #0]
 80103e6:	1d1a      	adds	r2, r3, #4
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	6032      	str	r2, [r6, #0]
 80103ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80103f4:	2301      	movs	r3, #1
 80103f6:	e09c      	b.n	8010532 <_printf_i+0x1e6>
 80103f8:	6833      	ldr	r3, [r6, #0]
 80103fa:	6820      	ldr	r0, [r4, #0]
 80103fc:	1d19      	adds	r1, r3, #4
 80103fe:	6031      	str	r1, [r6, #0]
 8010400:	0606      	lsls	r6, r0, #24
 8010402:	d501      	bpl.n	8010408 <_printf_i+0xbc>
 8010404:	681d      	ldr	r5, [r3, #0]
 8010406:	e003      	b.n	8010410 <_printf_i+0xc4>
 8010408:	0645      	lsls	r5, r0, #25
 801040a:	d5fb      	bpl.n	8010404 <_printf_i+0xb8>
 801040c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010410:	2d00      	cmp	r5, #0
 8010412:	da03      	bge.n	801041c <_printf_i+0xd0>
 8010414:	232d      	movs	r3, #45	@ 0x2d
 8010416:	426d      	negs	r5, r5
 8010418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801041c:	4858      	ldr	r0, [pc, #352]	@ (8010580 <_printf_i+0x234>)
 801041e:	230a      	movs	r3, #10
 8010420:	e011      	b.n	8010446 <_printf_i+0xfa>
 8010422:	6821      	ldr	r1, [r4, #0]
 8010424:	6833      	ldr	r3, [r6, #0]
 8010426:	0608      	lsls	r0, r1, #24
 8010428:	f853 5b04 	ldr.w	r5, [r3], #4
 801042c:	d402      	bmi.n	8010434 <_printf_i+0xe8>
 801042e:	0649      	lsls	r1, r1, #25
 8010430:	bf48      	it	mi
 8010432:	b2ad      	uxthmi	r5, r5
 8010434:	2f6f      	cmp	r7, #111	@ 0x6f
 8010436:	4852      	ldr	r0, [pc, #328]	@ (8010580 <_printf_i+0x234>)
 8010438:	6033      	str	r3, [r6, #0]
 801043a:	bf14      	ite	ne
 801043c:	230a      	movne	r3, #10
 801043e:	2308      	moveq	r3, #8
 8010440:	2100      	movs	r1, #0
 8010442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010446:	6866      	ldr	r6, [r4, #4]
 8010448:	60a6      	str	r6, [r4, #8]
 801044a:	2e00      	cmp	r6, #0
 801044c:	db05      	blt.n	801045a <_printf_i+0x10e>
 801044e:	6821      	ldr	r1, [r4, #0]
 8010450:	432e      	orrs	r6, r5
 8010452:	f021 0104 	bic.w	r1, r1, #4
 8010456:	6021      	str	r1, [r4, #0]
 8010458:	d04b      	beq.n	80104f2 <_printf_i+0x1a6>
 801045a:	4616      	mov	r6, r2
 801045c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010460:	fb03 5711 	mls	r7, r3, r1, r5
 8010464:	5dc7      	ldrb	r7, [r0, r7]
 8010466:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801046a:	462f      	mov	r7, r5
 801046c:	42bb      	cmp	r3, r7
 801046e:	460d      	mov	r5, r1
 8010470:	d9f4      	bls.n	801045c <_printf_i+0x110>
 8010472:	2b08      	cmp	r3, #8
 8010474:	d10b      	bne.n	801048e <_printf_i+0x142>
 8010476:	6823      	ldr	r3, [r4, #0]
 8010478:	07df      	lsls	r7, r3, #31
 801047a:	d508      	bpl.n	801048e <_printf_i+0x142>
 801047c:	6923      	ldr	r3, [r4, #16]
 801047e:	6861      	ldr	r1, [r4, #4]
 8010480:	4299      	cmp	r1, r3
 8010482:	bfde      	ittt	le
 8010484:	2330      	movle	r3, #48	@ 0x30
 8010486:	f806 3c01 	strble.w	r3, [r6, #-1]
 801048a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801048e:	1b92      	subs	r2, r2, r6
 8010490:	6122      	str	r2, [r4, #16]
 8010492:	f8cd a000 	str.w	sl, [sp]
 8010496:	464b      	mov	r3, r9
 8010498:	aa03      	add	r2, sp, #12
 801049a:	4621      	mov	r1, r4
 801049c:	4640      	mov	r0, r8
 801049e:	f7ff fee7 	bl	8010270 <_printf_common>
 80104a2:	3001      	adds	r0, #1
 80104a4:	d14a      	bne.n	801053c <_printf_i+0x1f0>
 80104a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80104aa:	b004      	add	sp, #16
 80104ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104b0:	6823      	ldr	r3, [r4, #0]
 80104b2:	f043 0320 	orr.w	r3, r3, #32
 80104b6:	6023      	str	r3, [r4, #0]
 80104b8:	4832      	ldr	r0, [pc, #200]	@ (8010584 <_printf_i+0x238>)
 80104ba:	2778      	movs	r7, #120	@ 0x78
 80104bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80104c0:	6823      	ldr	r3, [r4, #0]
 80104c2:	6831      	ldr	r1, [r6, #0]
 80104c4:	061f      	lsls	r7, r3, #24
 80104c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80104ca:	d402      	bmi.n	80104d2 <_printf_i+0x186>
 80104cc:	065f      	lsls	r7, r3, #25
 80104ce:	bf48      	it	mi
 80104d0:	b2ad      	uxthmi	r5, r5
 80104d2:	6031      	str	r1, [r6, #0]
 80104d4:	07d9      	lsls	r1, r3, #31
 80104d6:	bf44      	itt	mi
 80104d8:	f043 0320 	orrmi.w	r3, r3, #32
 80104dc:	6023      	strmi	r3, [r4, #0]
 80104de:	b11d      	cbz	r5, 80104e8 <_printf_i+0x19c>
 80104e0:	2310      	movs	r3, #16
 80104e2:	e7ad      	b.n	8010440 <_printf_i+0xf4>
 80104e4:	4826      	ldr	r0, [pc, #152]	@ (8010580 <_printf_i+0x234>)
 80104e6:	e7e9      	b.n	80104bc <_printf_i+0x170>
 80104e8:	6823      	ldr	r3, [r4, #0]
 80104ea:	f023 0320 	bic.w	r3, r3, #32
 80104ee:	6023      	str	r3, [r4, #0]
 80104f0:	e7f6      	b.n	80104e0 <_printf_i+0x194>
 80104f2:	4616      	mov	r6, r2
 80104f4:	e7bd      	b.n	8010472 <_printf_i+0x126>
 80104f6:	6833      	ldr	r3, [r6, #0]
 80104f8:	6825      	ldr	r5, [r4, #0]
 80104fa:	6961      	ldr	r1, [r4, #20]
 80104fc:	1d18      	adds	r0, r3, #4
 80104fe:	6030      	str	r0, [r6, #0]
 8010500:	062e      	lsls	r6, r5, #24
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	d501      	bpl.n	801050a <_printf_i+0x1be>
 8010506:	6019      	str	r1, [r3, #0]
 8010508:	e002      	b.n	8010510 <_printf_i+0x1c4>
 801050a:	0668      	lsls	r0, r5, #25
 801050c:	d5fb      	bpl.n	8010506 <_printf_i+0x1ba>
 801050e:	8019      	strh	r1, [r3, #0]
 8010510:	2300      	movs	r3, #0
 8010512:	6123      	str	r3, [r4, #16]
 8010514:	4616      	mov	r6, r2
 8010516:	e7bc      	b.n	8010492 <_printf_i+0x146>
 8010518:	6833      	ldr	r3, [r6, #0]
 801051a:	1d1a      	adds	r2, r3, #4
 801051c:	6032      	str	r2, [r6, #0]
 801051e:	681e      	ldr	r6, [r3, #0]
 8010520:	6862      	ldr	r2, [r4, #4]
 8010522:	2100      	movs	r1, #0
 8010524:	4630      	mov	r0, r6
 8010526:	f7ef fe8b 	bl	8000240 <memchr>
 801052a:	b108      	cbz	r0, 8010530 <_printf_i+0x1e4>
 801052c:	1b80      	subs	r0, r0, r6
 801052e:	6060      	str	r0, [r4, #4]
 8010530:	6863      	ldr	r3, [r4, #4]
 8010532:	6123      	str	r3, [r4, #16]
 8010534:	2300      	movs	r3, #0
 8010536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801053a:	e7aa      	b.n	8010492 <_printf_i+0x146>
 801053c:	6923      	ldr	r3, [r4, #16]
 801053e:	4632      	mov	r2, r6
 8010540:	4649      	mov	r1, r9
 8010542:	4640      	mov	r0, r8
 8010544:	47d0      	blx	sl
 8010546:	3001      	adds	r0, #1
 8010548:	d0ad      	beq.n	80104a6 <_printf_i+0x15a>
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	079b      	lsls	r3, r3, #30
 801054e:	d413      	bmi.n	8010578 <_printf_i+0x22c>
 8010550:	68e0      	ldr	r0, [r4, #12]
 8010552:	9b03      	ldr	r3, [sp, #12]
 8010554:	4298      	cmp	r0, r3
 8010556:	bfb8      	it	lt
 8010558:	4618      	movlt	r0, r3
 801055a:	e7a6      	b.n	80104aa <_printf_i+0x15e>
 801055c:	2301      	movs	r3, #1
 801055e:	4632      	mov	r2, r6
 8010560:	4649      	mov	r1, r9
 8010562:	4640      	mov	r0, r8
 8010564:	47d0      	blx	sl
 8010566:	3001      	adds	r0, #1
 8010568:	d09d      	beq.n	80104a6 <_printf_i+0x15a>
 801056a:	3501      	adds	r5, #1
 801056c:	68e3      	ldr	r3, [r4, #12]
 801056e:	9903      	ldr	r1, [sp, #12]
 8010570:	1a5b      	subs	r3, r3, r1
 8010572:	42ab      	cmp	r3, r5
 8010574:	dcf2      	bgt.n	801055c <_printf_i+0x210>
 8010576:	e7eb      	b.n	8010550 <_printf_i+0x204>
 8010578:	2500      	movs	r5, #0
 801057a:	f104 0619 	add.w	r6, r4, #25
 801057e:	e7f5      	b.n	801056c <_printf_i+0x220>
 8010580:	080135a6 	.word	0x080135a6
 8010584:	080135b7 	.word	0x080135b7

08010588 <__sflush_r>:
 8010588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801058c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010590:	0716      	lsls	r6, r2, #28
 8010592:	4605      	mov	r5, r0
 8010594:	460c      	mov	r4, r1
 8010596:	d454      	bmi.n	8010642 <__sflush_r+0xba>
 8010598:	684b      	ldr	r3, [r1, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	dc02      	bgt.n	80105a4 <__sflush_r+0x1c>
 801059e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	dd48      	ble.n	8010636 <__sflush_r+0xae>
 80105a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105a6:	2e00      	cmp	r6, #0
 80105a8:	d045      	beq.n	8010636 <__sflush_r+0xae>
 80105aa:	2300      	movs	r3, #0
 80105ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105b0:	682f      	ldr	r7, [r5, #0]
 80105b2:	6a21      	ldr	r1, [r4, #32]
 80105b4:	602b      	str	r3, [r5, #0]
 80105b6:	d030      	beq.n	801061a <__sflush_r+0x92>
 80105b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105ba:	89a3      	ldrh	r3, [r4, #12]
 80105bc:	0759      	lsls	r1, r3, #29
 80105be:	d505      	bpl.n	80105cc <__sflush_r+0x44>
 80105c0:	6863      	ldr	r3, [r4, #4]
 80105c2:	1ad2      	subs	r2, r2, r3
 80105c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105c6:	b10b      	cbz	r3, 80105cc <__sflush_r+0x44>
 80105c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105ca:	1ad2      	subs	r2, r2, r3
 80105cc:	2300      	movs	r3, #0
 80105ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105d0:	6a21      	ldr	r1, [r4, #32]
 80105d2:	4628      	mov	r0, r5
 80105d4:	47b0      	blx	r6
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	89a3      	ldrh	r3, [r4, #12]
 80105da:	d106      	bne.n	80105ea <__sflush_r+0x62>
 80105dc:	6829      	ldr	r1, [r5, #0]
 80105de:	291d      	cmp	r1, #29
 80105e0:	d82b      	bhi.n	801063a <__sflush_r+0xb2>
 80105e2:	4a2a      	ldr	r2, [pc, #168]	@ (801068c <__sflush_r+0x104>)
 80105e4:	40ca      	lsrs	r2, r1
 80105e6:	07d6      	lsls	r6, r2, #31
 80105e8:	d527      	bpl.n	801063a <__sflush_r+0xb2>
 80105ea:	2200      	movs	r2, #0
 80105ec:	6062      	str	r2, [r4, #4]
 80105ee:	04d9      	lsls	r1, r3, #19
 80105f0:	6922      	ldr	r2, [r4, #16]
 80105f2:	6022      	str	r2, [r4, #0]
 80105f4:	d504      	bpl.n	8010600 <__sflush_r+0x78>
 80105f6:	1c42      	adds	r2, r0, #1
 80105f8:	d101      	bne.n	80105fe <__sflush_r+0x76>
 80105fa:	682b      	ldr	r3, [r5, #0]
 80105fc:	b903      	cbnz	r3, 8010600 <__sflush_r+0x78>
 80105fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8010600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010602:	602f      	str	r7, [r5, #0]
 8010604:	b1b9      	cbz	r1, 8010636 <__sflush_r+0xae>
 8010606:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801060a:	4299      	cmp	r1, r3
 801060c:	d002      	beq.n	8010614 <__sflush_r+0x8c>
 801060e:	4628      	mov	r0, r5
 8010610:	f7ff fbec 	bl	800fdec <_free_r>
 8010614:	2300      	movs	r3, #0
 8010616:	6363      	str	r3, [r4, #52]	@ 0x34
 8010618:	e00d      	b.n	8010636 <__sflush_r+0xae>
 801061a:	2301      	movs	r3, #1
 801061c:	4628      	mov	r0, r5
 801061e:	47b0      	blx	r6
 8010620:	4602      	mov	r2, r0
 8010622:	1c50      	adds	r0, r2, #1
 8010624:	d1c9      	bne.n	80105ba <__sflush_r+0x32>
 8010626:	682b      	ldr	r3, [r5, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d0c6      	beq.n	80105ba <__sflush_r+0x32>
 801062c:	2b1d      	cmp	r3, #29
 801062e:	d001      	beq.n	8010634 <__sflush_r+0xac>
 8010630:	2b16      	cmp	r3, #22
 8010632:	d11e      	bne.n	8010672 <__sflush_r+0xea>
 8010634:	602f      	str	r7, [r5, #0]
 8010636:	2000      	movs	r0, #0
 8010638:	e022      	b.n	8010680 <__sflush_r+0xf8>
 801063a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801063e:	b21b      	sxth	r3, r3
 8010640:	e01b      	b.n	801067a <__sflush_r+0xf2>
 8010642:	690f      	ldr	r7, [r1, #16]
 8010644:	2f00      	cmp	r7, #0
 8010646:	d0f6      	beq.n	8010636 <__sflush_r+0xae>
 8010648:	0793      	lsls	r3, r2, #30
 801064a:	680e      	ldr	r6, [r1, #0]
 801064c:	bf08      	it	eq
 801064e:	694b      	ldreq	r3, [r1, #20]
 8010650:	600f      	str	r7, [r1, #0]
 8010652:	bf18      	it	ne
 8010654:	2300      	movne	r3, #0
 8010656:	eba6 0807 	sub.w	r8, r6, r7
 801065a:	608b      	str	r3, [r1, #8]
 801065c:	f1b8 0f00 	cmp.w	r8, #0
 8010660:	dde9      	ble.n	8010636 <__sflush_r+0xae>
 8010662:	6a21      	ldr	r1, [r4, #32]
 8010664:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010666:	4643      	mov	r3, r8
 8010668:	463a      	mov	r2, r7
 801066a:	4628      	mov	r0, r5
 801066c:	47b0      	blx	r6
 801066e:	2800      	cmp	r0, #0
 8010670:	dc08      	bgt.n	8010684 <__sflush_r+0xfc>
 8010672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801067a:	81a3      	strh	r3, [r4, #12]
 801067c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010684:	4407      	add	r7, r0
 8010686:	eba8 0800 	sub.w	r8, r8, r0
 801068a:	e7e7      	b.n	801065c <__sflush_r+0xd4>
 801068c:	20400001 	.word	0x20400001

08010690 <_fflush_r>:
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	690b      	ldr	r3, [r1, #16]
 8010694:	4605      	mov	r5, r0
 8010696:	460c      	mov	r4, r1
 8010698:	b913      	cbnz	r3, 80106a0 <_fflush_r+0x10>
 801069a:	2500      	movs	r5, #0
 801069c:	4628      	mov	r0, r5
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	b118      	cbz	r0, 80106aa <_fflush_r+0x1a>
 80106a2:	6a03      	ldr	r3, [r0, #32]
 80106a4:	b90b      	cbnz	r3, 80106aa <_fflush_r+0x1a>
 80106a6:	f7ff fa63 	bl	800fb70 <__sinit>
 80106aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d0f3      	beq.n	801069a <_fflush_r+0xa>
 80106b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106b4:	07d0      	lsls	r0, r2, #31
 80106b6:	d404      	bmi.n	80106c2 <_fflush_r+0x32>
 80106b8:	0599      	lsls	r1, r3, #22
 80106ba:	d402      	bmi.n	80106c2 <_fflush_r+0x32>
 80106bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106be:	f7ff fb66 	bl	800fd8e <__retarget_lock_acquire_recursive>
 80106c2:	4628      	mov	r0, r5
 80106c4:	4621      	mov	r1, r4
 80106c6:	f7ff ff5f 	bl	8010588 <__sflush_r>
 80106ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106cc:	07da      	lsls	r2, r3, #31
 80106ce:	4605      	mov	r5, r0
 80106d0:	d4e4      	bmi.n	801069c <_fflush_r+0xc>
 80106d2:	89a3      	ldrh	r3, [r4, #12]
 80106d4:	059b      	lsls	r3, r3, #22
 80106d6:	d4e1      	bmi.n	801069c <_fflush_r+0xc>
 80106d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106da:	f7ff fb59 	bl	800fd90 <__retarget_lock_release_recursive>
 80106de:	e7dd      	b.n	801069c <_fflush_r+0xc>

080106e0 <fiprintf>:
 80106e0:	b40e      	push	{r1, r2, r3}
 80106e2:	b503      	push	{r0, r1, lr}
 80106e4:	4601      	mov	r1, r0
 80106e6:	ab03      	add	r3, sp, #12
 80106e8:	4805      	ldr	r0, [pc, #20]	@ (8010700 <fiprintf+0x20>)
 80106ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80106ee:	6800      	ldr	r0, [r0, #0]
 80106f0:	9301      	str	r3, [sp, #4]
 80106f2:	f7ff fca5 	bl	8010040 <_vfiprintf_r>
 80106f6:	b002      	add	sp, #8
 80106f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80106fc:	b003      	add	sp, #12
 80106fe:	4770      	bx	lr
 8010700:	20000038 	.word	0x20000038

08010704 <__swbuf_r>:
 8010704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010706:	460e      	mov	r6, r1
 8010708:	4614      	mov	r4, r2
 801070a:	4605      	mov	r5, r0
 801070c:	b118      	cbz	r0, 8010716 <__swbuf_r+0x12>
 801070e:	6a03      	ldr	r3, [r0, #32]
 8010710:	b90b      	cbnz	r3, 8010716 <__swbuf_r+0x12>
 8010712:	f7ff fa2d 	bl	800fb70 <__sinit>
 8010716:	69a3      	ldr	r3, [r4, #24]
 8010718:	60a3      	str	r3, [r4, #8]
 801071a:	89a3      	ldrh	r3, [r4, #12]
 801071c:	071a      	lsls	r2, r3, #28
 801071e:	d501      	bpl.n	8010724 <__swbuf_r+0x20>
 8010720:	6923      	ldr	r3, [r4, #16]
 8010722:	b943      	cbnz	r3, 8010736 <__swbuf_r+0x32>
 8010724:	4621      	mov	r1, r4
 8010726:	4628      	mov	r0, r5
 8010728:	f000 f82a 	bl	8010780 <__swsetup_r>
 801072c:	b118      	cbz	r0, 8010736 <__swbuf_r+0x32>
 801072e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010732:	4638      	mov	r0, r7
 8010734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	6922      	ldr	r2, [r4, #16]
 801073a:	1a98      	subs	r0, r3, r2
 801073c:	6963      	ldr	r3, [r4, #20]
 801073e:	b2f6      	uxtb	r6, r6
 8010740:	4283      	cmp	r3, r0
 8010742:	4637      	mov	r7, r6
 8010744:	dc05      	bgt.n	8010752 <__swbuf_r+0x4e>
 8010746:	4621      	mov	r1, r4
 8010748:	4628      	mov	r0, r5
 801074a:	f7ff ffa1 	bl	8010690 <_fflush_r>
 801074e:	2800      	cmp	r0, #0
 8010750:	d1ed      	bne.n	801072e <__swbuf_r+0x2a>
 8010752:	68a3      	ldr	r3, [r4, #8]
 8010754:	3b01      	subs	r3, #1
 8010756:	60a3      	str	r3, [r4, #8]
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	1c5a      	adds	r2, r3, #1
 801075c:	6022      	str	r2, [r4, #0]
 801075e:	701e      	strb	r6, [r3, #0]
 8010760:	6962      	ldr	r2, [r4, #20]
 8010762:	1c43      	adds	r3, r0, #1
 8010764:	429a      	cmp	r2, r3
 8010766:	d004      	beq.n	8010772 <__swbuf_r+0x6e>
 8010768:	89a3      	ldrh	r3, [r4, #12]
 801076a:	07db      	lsls	r3, r3, #31
 801076c:	d5e1      	bpl.n	8010732 <__swbuf_r+0x2e>
 801076e:	2e0a      	cmp	r6, #10
 8010770:	d1df      	bne.n	8010732 <__swbuf_r+0x2e>
 8010772:	4621      	mov	r1, r4
 8010774:	4628      	mov	r0, r5
 8010776:	f7ff ff8b 	bl	8010690 <_fflush_r>
 801077a:	2800      	cmp	r0, #0
 801077c:	d0d9      	beq.n	8010732 <__swbuf_r+0x2e>
 801077e:	e7d6      	b.n	801072e <__swbuf_r+0x2a>

08010780 <__swsetup_r>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	4b29      	ldr	r3, [pc, #164]	@ (8010828 <__swsetup_r+0xa8>)
 8010784:	4605      	mov	r5, r0
 8010786:	6818      	ldr	r0, [r3, #0]
 8010788:	460c      	mov	r4, r1
 801078a:	b118      	cbz	r0, 8010794 <__swsetup_r+0x14>
 801078c:	6a03      	ldr	r3, [r0, #32]
 801078e:	b90b      	cbnz	r3, 8010794 <__swsetup_r+0x14>
 8010790:	f7ff f9ee 	bl	800fb70 <__sinit>
 8010794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010798:	0719      	lsls	r1, r3, #28
 801079a:	d422      	bmi.n	80107e2 <__swsetup_r+0x62>
 801079c:	06da      	lsls	r2, r3, #27
 801079e:	d407      	bmi.n	80107b0 <__swsetup_r+0x30>
 80107a0:	2209      	movs	r2, #9
 80107a2:	602a      	str	r2, [r5, #0]
 80107a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107a8:	81a3      	strh	r3, [r4, #12]
 80107aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107ae:	e033      	b.n	8010818 <__swsetup_r+0x98>
 80107b0:	0758      	lsls	r0, r3, #29
 80107b2:	d512      	bpl.n	80107da <__swsetup_r+0x5a>
 80107b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107b6:	b141      	cbz	r1, 80107ca <__swsetup_r+0x4a>
 80107b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107bc:	4299      	cmp	r1, r3
 80107be:	d002      	beq.n	80107c6 <__swsetup_r+0x46>
 80107c0:	4628      	mov	r0, r5
 80107c2:	f7ff fb13 	bl	800fdec <_free_r>
 80107c6:	2300      	movs	r3, #0
 80107c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80107ca:	89a3      	ldrh	r3, [r4, #12]
 80107cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80107d0:	81a3      	strh	r3, [r4, #12]
 80107d2:	2300      	movs	r3, #0
 80107d4:	6063      	str	r3, [r4, #4]
 80107d6:	6923      	ldr	r3, [r4, #16]
 80107d8:	6023      	str	r3, [r4, #0]
 80107da:	89a3      	ldrh	r3, [r4, #12]
 80107dc:	f043 0308 	orr.w	r3, r3, #8
 80107e0:	81a3      	strh	r3, [r4, #12]
 80107e2:	6923      	ldr	r3, [r4, #16]
 80107e4:	b94b      	cbnz	r3, 80107fa <__swsetup_r+0x7a>
 80107e6:	89a3      	ldrh	r3, [r4, #12]
 80107e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80107ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80107f0:	d003      	beq.n	80107fa <__swsetup_r+0x7a>
 80107f2:	4621      	mov	r1, r4
 80107f4:	4628      	mov	r0, r5
 80107f6:	f000 f856 	bl	80108a6 <__smakebuf_r>
 80107fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107fe:	f013 0201 	ands.w	r2, r3, #1
 8010802:	d00a      	beq.n	801081a <__swsetup_r+0x9a>
 8010804:	2200      	movs	r2, #0
 8010806:	60a2      	str	r2, [r4, #8]
 8010808:	6962      	ldr	r2, [r4, #20]
 801080a:	4252      	negs	r2, r2
 801080c:	61a2      	str	r2, [r4, #24]
 801080e:	6922      	ldr	r2, [r4, #16]
 8010810:	b942      	cbnz	r2, 8010824 <__swsetup_r+0xa4>
 8010812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010816:	d1c5      	bne.n	80107a4 <__swsetup_r+0x24>
 8010818:	bd38      	pop	{r3, r4, r5, pc}
 801081a:	0799      	lsls	r1, r3, #30
 801081c:	bf58      	it	pl
 801081e:	6962      	ldrpl	r2, [r4, #20]
 8010820:	60a2      	str	r2, [r4, #8]
 8010822:	e7f4      	b.n	801080e <__swsetup_r+0x8e>
 8010824:	2000      	movs	r0, #0
 8010826:	e7f7      	b.n	8010818 <__swsetup_r+0x98>
 8010828:	20000038 	.word	0x20000038

0801082c <_sbrk_r>:
 801082c:	b538      	push	{r3, r4, r5, lr}
 801082e:	4d06      	ldr	r5, [pc, #24]	@ (8010848 <_sbrk_r+0x1c>)
 8010830:	2300      	movs	r3, #0
 8010832:	4604      	mov	r4, r0
 8010834:	4608      	mov	r0, r1
 8010836:	602b      	str	r3, [r5, #0]
 8010838:	f7f0 fc30 	bl	800109c <_sbrk>
 801083c:	1c43      	adds	r3, r0, #1
 801083e:	d102      	bne.n	8010846 <_sbrk_r+0x1a>
 8010840:	682b      	ldr	r3, [r5, #0]
 8010842:	b103      	cbz	r3, 8010846 <_sbrk_r+0x1a>
 8010844:	6023      	str	r3, [r4, #0]
 8010846:	bd38      	pop	{r3, r4, r5, pc}
 8010848:	2000844c 	.word	0x2000844c

0801084c <abort>:
 801084c:	b508      	push	{r3, lr}
 801084e:	2006      	movs	r0, #6
 8010850:	f000 f88e 	bl	8010970 <raise>
 8010854:	2001      	movs	r0, #1
 8010856:	f7f0 fba9 	bl	8000fac <_exit>

0801085a <__swhatbuf_r>:
 801085a:	b570      	push	{r4, r5, r6, lr}
 801085c:	460c      	mov	r4, r1
 801085e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010862:	2900      	cmp	r1, #0
 8010864:	b096      	sub	sp, #88	@ 0x58
 8010866:	4615      	mov	r5, r2
 8010868:	461e      	mov	r6, r3
 801086a:	da0d      	bge.n	8010888 <__swhatbuf_r+0x2e>
 801086c:	89a3      	ldrh	r3, [r4, #12]
 801086e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010872:	f04f 0100 	mov.w	r1, #0
 8010876:	bf14      	ite	ne
 8010878:	2340      	movne	r3, #64	@ 0x40
 801087a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801087e:	2000      	movs	r0, #0
 8010880:	6031      	str	r1, [r6, #0]
 8010882:	602b      	str	r3, [r5, #0]
 8010884:	b016      	add	sp, #88	@ 0x58
 8010886:	bd70      	pop	{r4, r5, r6, pc}
 8010888:	466a      	mov	r2, sp
 801088a:	f000 f879 	bl	8010980 <_fstat_r>
 801088e:	2800      	cmp	r0, #0
 8010890:	dbec      	blt.n	801086c <__swhatbuf_r+0x12>
 8010892:	9901      	ldr	r1, [sp, #4]
 8010894:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010898:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801089c:	4259      	negs	r1, r3
 801089e:	4159      	adcs	r1, r3
 80108a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108a4:	e7eb      	b.n	801087e <__swhatbuf_r+0x24>

080108a6 <__smakebuf_r>:
 80108a6:	898b      	ldrh	r3, [r1, #12]
 80108a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80108aa:	079d      	lsls	r5, r3, #30
 80108ac:	4606      	mov	r6, r0
 80108ae:	460c      	mov	r4, r1
 80108b0:	d507      	bpl.n	80108c2 <__smakebuf_r+0x1c>
 80108b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80108b6:	6023      	str	r3, [r4, #0]
 80108b8:	6123      	str	r3, [r4, #16]
 80108ba:	2301      	movs	r3, #1
 80108bc:	6163      	str	r3, [r4, #20]
 80108be:	b003      	add	sp, #12
 80108c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108c2:	ab01      	add	r3, sp, #4
 80108c4:	466a      	mov	r2, sp
 80108c6:	f7ff ffc8 	bl	801085a <__swhatbuf_r>
 80108ca:	9f00      	ldr	r7, [sp, #0]
 80108cc:	4605      	mov	r5, r0
 80108ce:	4639      	mov	r1, r7
 80108d0:	4630      	mov	r0, r6
 80108d2:	f7ff faff 	bl	800fed4 <_malloc_r>
 80108d6:	b948      	cbnz	r0, 80108ec <__smakebuf_r+0x46>
 80108d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108dc:	059a      	lsls	r2, r3, #22
 80108de:	d4ee      	bmi.n	80108be <__smakebuf_r+0x18>
 80108e0:	f023 0303 	bic.w	r3, r3, #3
 80108e4:	f043 0302 	orr.w	r3, r3, #2
 80108e8:	81a3      	strh	r3, [r4, #12]
 80108ea:	e7e2      	b.n	80108b2 <__smakebuf_r+0xc>
 80108ec:	89a3      	ldrh	r3, [r4, #12]
 80108ee:	6020      	str	r0, [r4, #0]
 80108f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108f4:	81a3      	strh	r3, [r4, #12]
 80108f6:	9b01      	ldr	r3, [sp, #4]
 80108f8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80108fc:	b15b      	cbz	r3, 8010916 <__smakebuf_r+0x70>
 80108fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010902:	4630      	mov	r0, r6
 8010904:	f000 f84e 	bl	80109a4 <_isatty_r>
 8010908:	b128      	cbz	r0, 8010916 <__smakebuf_r+0x70>
 801090a:	89a3      	ldrh	r3, [r4, #12]
 801090c:	f023 0303 	bic.w	r3, r3, #3
 8010910:	f043 0301 	orr.w	r3, r3, #1
 8010914:	81a3      	strh	r3, [r4, #12]
 8010916:	89a3      	ldrh	r3, [r4, #12]
 8010918:	431d      	orrs	r5, r3
 801091a:	81a5      	strh	r5, [r4, #12]
 801091c:	e7cf      	b.n	80108be <__smakebuf_r+0x18>

0801091e <_raise_r>:
 801091e:	291f      	cmp	r1, #31
 8010920:	b538      	push	{r3, r4, r5, lr}
 8010922:	4605      	mov	r5, r0
 8010924:	460c      	mov	r4, r1
 8010926:	d904      	bls.n	8010932 <_raise_r+0x14>
 8010928:	2316      	movs	r3, #22
 801092a:	6003      	str	r3, [r0, #0]
 801092c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010930:	bd38      	pop	{r3, r4, r5, pc}
 8010932:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010934:	b112      	cbz	r2, 801093c <_raise_r+0x1e>
 8010936:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801093a:	b94b      	cbnz	r3, 8010950 <_raise_r+0x32>
 801093c:	4628      	mov	r0, r5
 801093e:	f000 f853 	bl	80109e8 <_getpid_r>
 8010942:	4622      	mov	r2, r4
 8010944:	4601      	mov	r1, r0
 8010946:	4628      	mov	r0, r5
 8010948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801094c:	f000 b83a 	b.w	80109c4 <_kill_r>
 8010950:	2b01      	cmp	r3, #1
 8010952:	d00a      	beq.n	801096a <_raise_r+0x4c>
 8010954:	1c59      	adds	r1, r3, #1
 8010956:	d103      	bne.n	8010960 <_raise_r+0x42>
 8010958:	2316      	movs	r3, #22
 801095a:	6003      	str	r3, [r0, #0]
 801095c:	2001      	movs	r0, #1
 801095e:	e7e7      	b.n	8010930 <_raise_r+0x12>
 8010960:	2100      	movs	r1, #0
 8010962:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010966:	4620      	mov	r0, r4
 8010968:	4798      	blx	r3
 801096a:	2000      	movs	r0, #0
 801096c:	e7e0      	b.n	8010930 <_raise_r+0x12>
	...

08010970 <raise>:
 8010970:	4b02      	ldr	r3, [pc, #8]	@ (801097c <raise+0xc>)
 8010972:	4601      	mov	r1, r0
 8010974:	6818      	ldr	r0, [r3, #0]
 8010976:	f7ff bfd2 	b.w	801091e <_raise_r>
 801097a:	bf00      	nop
 801097c:	20000038 	.word	0x20000038

08010980 <_fstat_r>:
 8010980:	b538      	push	{r3, r4, r5, lr}
 8010982:	4d07      	ldr	r5, [pc, #28]	@ (80109a0 <_fstat_r+0x20>)
 8010984:	2300      	movs	r3, #0
 8010986:	4604      	mov	r4, r0
 8010988:	4608      	mov	r0, r1
 801098a:	4611      	mov	r1, r2
 801098c:	602b      	str	r3, [r5, #0]
 801098e:	f7f0 fb5d 	bl	800104c <_fstat>
 8010992:	1c43      	adds	r3, r0, #1
 8010994:	d102      	bne.n	801099c <_fstat_r+0x1c>
 8010996:	682b      	ldr	r3, [r5, #0]
 8010998:	b103      	cbz	r3, 801099c <_fstat_r+0x1c>
 801099a:	6023      	str	r3, [r4, #0]
 801099c:	bd38      	pop	{r3, r4, r5, pc}
 801099e:	bf00      	nop
 80109a0:	2000844c 	.word	0x2000844c

080109a4 <_isatty_r>:
 80109a4:	b538      	push	{r3, r4, r5, lr}
 80109a6:	4d06      	ldr	r5, [pc, #24]	@ (80109c0 <_isatty_r+0x1c>)
 80109a8:	2300      	movs	r3, #0
 80109aa:	4604      	mov	r4, r0
 80109ac:	4608      	mov	r0, r1
 80109ae:	602b      	str	r3, [r5, #0]
 80109b0:	f7f0 fb5c 	bl	800106c <_isatty>
 80109b4:	1c43      	adds	r3, r0, #1
 80109b6:	d102      	bne.n	80109be <_isatty_r+0x1a>
 80109b8:	682b      	ldr	r3, [r5, #0]
 80109ba:	b103      	cbz	r3, 80109be <_isatty_r+0x1a>
 80109bc:	6023      	str	r3, [r4, #0]
 80109be:	bd38      	pop	{r3, r4, r5, pc}
 80109c0:	2000844c 	.word	0x2000844c

080109c4 <_kill_r>:
 80109c4:	b538      	push	{r3, r4, r5, lr}
 80109c6:	4d07      	ldr	r5, [pc, #28]	@ (80109e4 <_kill_r+0x20>)
 80109c8:	2300      	movs	r3, #0
 80109ca:	4604      	mov	r4, r0
 80109cc:	4608      	mov	r0, r1
 80109ce:	4611      	mov	r1, r2
 80109d0:	602b      	str	r3, [r5, #0]
 80109d2:	f7f0 fad9 	bl	8000f88 <_kill>
 80109d6:	1c43      	adds	r3, r0, #1
 80109d8:	d102      	bne.n	80109e0 <_kill_r+0x1c>
 80109da:	682b      	ldr	r3, [r5, #0]
 80109dc:	b103      	cbz	r3, 80109e0 <_kill_r+0x1c>
 80109de:	6023      	str	r3, [r4, #0]
 80109e0:	bd38      	pop	{r3, r4, r5, pc}
 80109e2:	bf00      	nop
 80109e4:	2000844c 	.word	0x2000844c

080109e8 <_getpid_r>:
 80109e8:	f7f0 bac5 	b.w	8000f76 <_getpid>

080109ec <_init>:
 80109ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ee:	bf00      	nop
 80109f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109f2:	bc08      	pop	{r3}
 80109f4:	469e      	mov	lr, r3
 80109f6:	4770      	bx	lr

080109f8 <_fini>:
 80109f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fa:	bf00      	nop
 80109fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109fe:	bc08      	pop	{r3}
 8010a00:	469e      	mov	lr, r3
 8010a02:	4770      	bx	lr
