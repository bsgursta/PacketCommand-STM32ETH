
Ethernet_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd10  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  0800ff10  0800ff10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ad4  08012ad4  000141c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012ad4  08012ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012adc  08012adc  000141c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012adc  08012adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012ae0  08012ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08012ae4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08012b6c  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012c0c  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008230  200001c8  08012cac  000141c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200083f8  08012cac  000143f8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000141c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002185f  00000000  00000000  000141f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005a50  00000000  00000000  00035a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001888  00000000  00000000  0003b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001379  00000000  00000000  0003cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000ec80  00000000  00000000  0003e0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002722b  00000000  00000000  0004cd29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010c812  00000000  00000000  00073f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00180766  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006cc8  00000000  00000000  001807ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  00187474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fef8 	.word	0x0800fef8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	0800fef8 	.word	0x0800fef8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000610:	f000 f980 	bl	8000914 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fceb 	bl	8000fee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f80a 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f8d8 	bl	80007d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000620:	f000 f878 	bl	8000714 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f8a6 	bl	8000774 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000628:	f004 fb52 	bl	8004cd0 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <main+0x20>

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	@ 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00e fdb7 	bl	800f1b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000654:	f002 fa1c 	bl	8002a90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a2b      	ldr	r2, [pc, #172]	@ (800070c <SystemClock_Config+0xdc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
 8000664:	4b29      	ldr	r3, [pc, #164]	@ (800070c <SystemClock_Config+0xdc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000670:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <SystemClock_Config+0xe0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a25      	ldr	r2, [pc, #148]	@ (8000710 <SystemClock_Config+0xe0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <SystemClock_Config+0xe0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006a4:	2360      	movs	r3, #96	@ 0x60
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fa49 	bl	8002b50 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c4:	f000 f954 	bl	8000970 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c8:	f002 f9f2 	bl	8002ab0 <HAL_PWREx_EnableOverDrive>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d2:	f000 f94d 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	2103      	movs	r1, #3
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fcda 	bl	80030ac <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006fe:	f000 f937 	bl	8000970 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_USART3_UART_Init+0x58>)
 800071a:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <MX_USART3_UART_Init+0x5c>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_USART3_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART3_UART_Init+0x58>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000758:	f003 faf6 	bl	8003d48 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f905 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001e4 	.word	0x200001e4
 8000770:	40004800 	.word	0x40004800

08000774 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800077e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2206      	movs	r2, #6
 8000784:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2202      	movs	r2, #2
 800078a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2202      	movs	r2, #2
 8000796:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2201      	movs	r2, #1
 800079c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	f002 f82f 	bl	800281a <HAL_PCD_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f8d5 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000026c 	.word	0x2000026c

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b47      	ldr	r3, [pc, #284]	@ (8000904 <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a46      	ldr	r2, [pc, #280]	@ (8000904 <MX_GPIO_Init+0x134>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b44      	ldr	r3, [pc, #272]	@ (8000904 <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b41      	ldr	r3, [pc, #260]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a40      	ldr	r2, [pc, #256]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b3e      	ldr	r3, [pc, #248]	@ (8000904 <MX_GPIO_Init+0x134>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b3b      	ldr	r3, [pc, #236]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a3a      	ldr	r2, [pc, #232]	@ (8000904 <MX_GPIO_Init+0x134>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b38      	ldr	r3, [pc, #224]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b35      	ldr	r3, [pc, #212]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a34      	ldr	r2, [pc, #208]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b32      	ldr	r3, [pc, #200]	@ (8000904 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a2e      	ldr	r2, [pc, #184]	@ (8000904 <MX_GPIO_Init+0x134>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b2c      	ldr	r3, [pc, #176]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	4b29      	ldr	r3, [pc, #164]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a28      	ldr	r2, [pc, #160]	@ (8000904 <MX_GPIO_Init+0x134>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b26      	ldr	r3, [pc, #152]	@ (8000904 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800087c:	4822      	ldr	r0, [pc, #136]	@ (8000908 <MX_GPIO_Init+0x138>)
 800087e:	f001 ffb3 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2140      	movs	r1, #64	@ 0x40
 8000886:	4821      	ldr	r0, [pc, #132]	@ (800090c <MX_GPIO_Init+0x13c>)
 8000888:	f001 ffae 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	481b      	ldr	r0, [pc, #108]	@ (8000910 <MX_GPIO_Init+0x140>)
 80008a4:	f001 fdf4 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008a8:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4811      	ldr	r0, [pc, #68]	@ (8000908 <MX_GPIO_Init+0x138>)
 80008c2:	f001 fde5 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c6:	2340      	movs	r3, #64	@ 0x40
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	480b      	ldr	r0, [pc, #44]	@ (800090c <MX_GPIO_Init+0x13c>)
 80008de:	f001 fdd7 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e2:	2380      	movs	r3, #128	@ 0x80
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_GPIO_Init+0x13c>)
 80008f6:	f001 fdcb 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008fa:	bf00      	nop
 80008fc:	3730      	adds	r7, #48	@ 0x30
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40021800 	.word	0x40021800
 8000910:	40020800 	.word	0x40020800

08000914 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000926:	f000 fcc9 	bl	80012bc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800092a:	2301      	movs	r3, #1
 800092c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800092e:	2300      	movs	r3, #0
 8000930:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MPU_Config+0x58>)
 8000934:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000936:	230d      	movs	r3, #13
 8000938:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800093a:	2300      	movs	r3, #0
 800093c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800093e:	2301      	movs	r3, #1
 8000940:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000942:	2303      	movs	r3, #3
 8000944:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000946:	2301      	movs	r3, #1
 8000948:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800094a:	2301      	movs	r3, #1
 800094c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000956:	463b      	mov	r3, r7
 8000958:	4618      	mov	r0, r3
 800095a:	f000 fce7 	bl	800132c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 800095e:	2006      	movs	r0, #6
 8000960:	f000 fcc4 	bl	80012ec <HAL_MPU_Enable>

}
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2007c000 	.word	0x2007c000

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <HAL_MspInit+0x44>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a0e      	ldr	r2, [pc, #56]	@ (80009c0 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <HAL_MspInit+0x44>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <HAL_MspInit+0x44>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a08      	ldr	r2, [pc, #32]	@ (80009c0 <HAL_MspInit+0x44>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_MspInit+0x44>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0ae      	sub	sp, #184	@ 0xb8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2290      	movs	r2, #144	@ 0x90
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f00e fbe4 	bl	800f1b2 <memset>
  if(huart->Instance==USART3)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a22      	ldr	r2, [pc, #136]	@ (8000a78 <HAL_UART_MspInit+0xb4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d13c      	bne.n	8000a6e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fd78 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a0e:	f7ff ffaf 	bl	8000970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a19      	ldr	r2, [pc, #100]	@ (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <HAL_UART_MspInit+0xb8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a62:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <HAL_UART_MspInit+0xbc>)
 8000a6a:	f001 fd11 	bl	8002490 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000a6e:	bf00      	nop
 8000a70:	37b8      	adds	r7, #184	@ 0xb8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40004800 	.word	0x40004800
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020c00 	.word	0x40020c00

08000a84 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0ae      	sub	sp, #184	@ 0xb8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2290      	movs	r2, #144	@ 0x90
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f00e fb84 	bl	800f1b2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ab2:	d159      	bne.n	8000b68 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ab4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ab8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fd17 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ad0:	f7ff ff4e 	bl	8000970 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad8:	4a25      	ldr	r2, [pc, #148]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae0:	4b23      	ldr	r3, [pc, #140]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000aec:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b06:	230a      	movs	r3, #10
 8000b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4818      	ldr	r0, [pc, #96]	@ (8000b74 <HAL_PCD_MspInit+0xf0>)
 8000b14:	f001 fcbc 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4810      	ldr	r0, [pc, #64]	@ (8000b74 <HAL_PCD_MspInit+0xf0>)
 8000b34:	f001 fcac 	bl	8002490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b38:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b42:	6353      	str	r3, [r2, #52]	@ 0x34
 8000b44:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b54:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000b56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <HAL_PCD_MspInit+0xec>)
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000b68:	bf00      	nop
 8000b6a:	37b8      	adds	r7, #184	@ 0xb8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 fa4b 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <_kill>:

int _kill(int pid, int sig)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <_kill+0x20>)
 8000bf4:	2216      	movs	r2, #22
 8000bf6:	601a      	str	r2, [r3, #0]
  return -1;
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	200083e8 	.word	0x200083e8

08000c0c <_exit>:

void _exit (int status)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ffe5 	bl	8000be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c1e:	bf00      	nop
 8000c20:	e7fd      	b.n	8000c1e <_exit+0x12>

08000c22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	e00a      	b.n	8000c4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c34:	f3af 8000 	nop.w
 8000c38:	4601      	mov	r1, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	60ba      	str	r2, [r7, #8]
 8000c40:	b2ca      	uxtb	r2, r1
 8000c42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbf0      	blt.n	8000c34 <_read+0x12>
  }

  return len;
 8000c52:	687b      	ldr	r3, [r7, #4]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e009      	b.n	8000c82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	60ba      	str	r2, [r7, #8]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dbf1      	blt.n	8000c6e <_write+0x12>
  }
  return len;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_close>:

int _close(int file)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_isatty>:

int _isatty(int file)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b085      	sub	sp, #20
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	@ (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d205      	bcs.n	8000d38 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <_sbrk+0x6c>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a06      	ldr	r2, [pc, #24]	@ (8000d60 <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	371c      	adds	r7, #28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	20080000 	.word	0x20080000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	2000074c 	.word	0x2000074c
 8000d64:	200083f8 	.word	0x200083f8
 8000d68:	200083e8 	.word	0x200083e8

08000d6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d94:	f7ff ffea 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f00e fa47 	bl	800f250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fc23 	bl	800060c <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000dd4:	08012ae4 	.word	0x08012ae4
  ldr r2, =_sbss
 8000dd8:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000ddc:	200083f8 	.word	0x200083f8

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>

08000de2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00b      	beq.n	8000e0a <LAN8742_RegisterBusIO+0x28>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d007      	beq.n	8000e0a <LAN8742_RegisterBusIO+0x28>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <LAN8742_RegisterBusIO+0x28>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e0e:	e014      	b.n	8000e3a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d139      	bne.n	8000ed6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d002      	beq.n	8000e70 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2220      	movs	r2, #32
 8000e74:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e01c      	b.n	8000eb6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f107 020c 	add.w	r2, r7, #12
 8000e84:	2112      	movs	r1, #18
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	4798      	blx	r3
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	da03      	bge.n	8000e98 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000e90:	f06f 0304 	mvn.w	r3, #4
 8000e94:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000e96:	e00b      	b.n	8000eb0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d105      	bne.n	8000eb0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
         break;
 8000eae:	e005      	b.n	8000ebc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b1f      	cmp	r3, #31
 8000eba:	d9df      	bls.n	8000e7c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b1f      	cmp	r3, #31
 8000ec2:	d902      	bls.n	8000eca <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ec4:	f06f 0302 	mvn.w	r3, #2
 8000ec8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000ed6:	693b      	ldr	r3, [r7, #16]
 }
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6810      	ldr	r0, [r2, #0]
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4798      	blx	r3
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	da02      	bge.n	8000f08 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f02:	f06f 0304 	mvn.w	r3, #4
 8000f06:	e06e      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6810      	ldr	r0, [r2, #0]
 8000f10:	f107 020c 	add.w	r2, r7, #12
 8000f14:	2101      	movs	r1, #1
 8000f16:	4798      	blx	r3
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da02      	bge.n	8000f24 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f1e:	f06f 0304 	mvn.w	r3, #4
 8000f22:	e060      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e059      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6810      	ldr	r0, [r2, #0]
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4798      	blx	r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da02      	bge.n	8000f4e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f48:	f06f 0304 	mvn.w	r3, #4
 8000f4c:	e04b      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d11b      	bne.n	8000f90 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <LAN8742_GetLinkState+0x90>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	e03a      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e033      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	e02c      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	e02a      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6810      	ldr	r0, [r2, #0]
 8000f98:	f107 020c 	add.w	r2, r7, #12
 8000f9c:	211f      	movs	r1, #31
 8000f9e:	4798      	blx	r3
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	da02      	bge.n	8000fac <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000fa6:	f06f 0304 	mvn.w	r3, #4
 8000faa:	e01c      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	e015      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 031c 	and.w	r3, r3, #28
 8000fc0:	2b18      	cmp	r3, #24
 8000fc2:	d101      	bne.n	8000fc8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e00e      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 031c 	and.w	r3, r3, #28
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d101      	bne.n	8000fd6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e007      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f003 031c 	and.w	r3, r3, #28
 8000fdc:	2b14      	cmp	r3, #20
 8000fde:	d101      	bne.n	8000fe4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e000      	b.n	8000fe6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fe4:	2305      	movs	r3, #5
    }
  }
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f92e 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f805 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffe:	f7ff fcbd 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f93b 	bl	80012a2 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001044:	f000 f911 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	20000750 	.word	0x20000750

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000750 	.word	0x20000750

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <__NVIC_SetPriorityGrouping+0x40>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	4313      	orrs	r3, r2
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x40>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	05fa0000 	.word	0x05fa0000

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	@ (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff47 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff5c 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffb0 	bl	8001210 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012c0:	f3bf 8f5f 	dmb	sy
}
 80012c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <HAL_MPU_Disable+0x28>)
 80012c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ca:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <HAL_MPU_Disable+0x28>)
 80012cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012d0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012d2:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_MPU_Disable+0x2c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00
 80012e8:	e000ed90 	.word	0xe000ed90

080012ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <HAL_MPU_Enable+0x38>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <HAL_MPU_Enable+0x3c>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001302:	4a09      	ldr	r2, [pc, #36]	@ (8001328 <HAL_MPU_Enable+0x3c>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001308:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800130a:	f3bf 8f4f 	dsb	sy
}
 800130e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001310:	f3bf 8f6f 	isb	sy
}
 8001314:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed90 	.word	0xe000ed90
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	785a      	ldrb	r2, [r3, #1]
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_MPU_ConfigRegion+0x7c>)
 800133a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <HAL_MPU_ConfigRegion+0x7c>)
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	4a19      	ldr	r2, [pc, #100]	@ (80013a8 <HAL_MPU_ConfigRegion+0x7c>)
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001348:	4a17      	ldr	r2, [pc, #92]	@ (80013a8 <HAL_MPU_ConfigRegion+0x7c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7b1b      	ldrb	r3, [r3, #12]
 8001354:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7adb      	ldrb	r3, [r3, #11]
 800135a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800135c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7a9b      	ldrb	r3, [r3, #10]
 8001362:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001364:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7b5b      	ldrb	r3, [r3, #13]
 800136a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800136c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7b9b      	ldrb	r3, [r3, #14]
 8001372:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001374:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	7bdb      	ldrb	r3, [r3, #15]
 800137a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800137c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	7a5b      	ldrb	r3, [r3, #9]
 8001382:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001384:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7a1b      	ldrb	r3, [r3, #8]
 800138a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800138c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001396:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001398:	6113      	str	r3, [r2, #16]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed90 	.word	0xe000ed90

080013ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e086      	b.n	80014cc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d106      	bne.n	80013d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2220      	movs	r2, #32
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f003 ff1f 	bl	8005214 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b3f      	ldr	r3, [pc, #252]	@ (80014d4 <HAL_ETH_Init+0x128>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	4a3e      	ldr	r2, [pc, #248]	@ (80014d4 <HAL_ETH_Init+0x128>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e2:	4b3c      	ldr	r3, [pc, #240]	@ (80014d4 <HAL_ETH_Init+0x128>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ee:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <HAL_ETH_Init+0x12c>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a39      	ldr	r2, [pc, #228]	@ (80014d8 <HAL_ETH_Init+0x12c>)
 80013f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80013f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HAL_ETH_Init+0x12c>)
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4935      	ldr	r1, [pc, #212]	@ (80014d8 <HAL_ETH_Init+0x12c>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001408:	4b33      	ldr	r3, [pc, #204]	@ (80014d8 <HAL_ETH_Init+0x12c>)
 800140a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001422:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001424:	f7ff fe34 	bl	8001090 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800142a:	e011      	b.n	8001450 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800142c:	f7ff fe30 	bl	8001090 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800143a:	d909      	bls.n	8001450 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2204      	movs	r2, #4
 8001440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	22e0      	movs	r2, #224	@ 0xe0
 8001448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e03d      	b.n	80014cc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1e4      	bne.n	800142c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fd58 	bl	8001f18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fe03 	bl	8002074 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fe59 	bl	8002126 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	461a      	mov	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fdc1 	bl	8002004 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001490:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <HAL_ETH_Init+0x130>)
 80014a0:	430b      	orrs	r3, r1
 80014a2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80014b6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2210      	movs	r2, #16
 80014c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40013800 	.word	0x40013800
 80014dc:	00020060 	.word	0x00020060

080014e0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014ee:	2b10      	cmp	r3, #16
 80014f0:	d150      	bne.n	8001594 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2220      	movs	r2, #32
 80014f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f939 	bl	8001778 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0208 	orr.w	r2, r2, #8
 8001514:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff fdc2 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0204 	orr.w	r2, r2, #4
 800153a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff fdaf 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fb7c 	bl	8001c50 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800156a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800156e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001586:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2240      	movs	r2, #64	@ 0x40
 800158c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	e000      	b.n	8001596 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
  }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015ac:	2b40      	cmp	r3, #64	@ 0x40
 80015ae:	d14a      	bne.n	8001646 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2220      	movs	r2, #32
 80015b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80015ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ce:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f023 0302 	bic.w	r3, r3, #2
 80015e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015e6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0204 	bic.w	r2, r2, #4
 80015f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fd51 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fb1e 	bl	8001c50 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0208 	bic.w	r2, r2, #8
 8001622:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fd3b 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2210      	movs	r2, #16
 800163e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
  }
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07c      	b.n	8001770 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800167c:	2b40      	cmp	r3, #64	@ 0x40
 800167e:	d176      	bne.n	800176e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001680:	2200      	movs	r2, #0
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fdbd 	bl	8002204 <ETH_Prepare_Tx_Descriptors>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001696:	f043 0202 	orr.w	r2, r3, #2
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e065      	b.n	8001770 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80016a4:	f3bf 8f4f 	dsb	sy
}
 80016a8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3206      	adds	r2, #6
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d904      	bls.n	80016d4 <HAL_ETH_Transmit+0x84>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	1f1a      	subs	r2, r3, #4
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3106      	adds	r1, #6
 80016e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016e8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80016ea:	f7ff fcd1 	bl	8001090 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016f0:	e037      	b.n	8001762 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d011      	beq.n	8001728 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170a:	f043 0208 	orr.w	r2, r3, #8
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800171c:	695a      	ldr	r2, [r3, #20]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e023      	b.n	8001770 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800172e:	d018      	beq.n	8001762 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001730:	f7ff fcae 	bl	8001090 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	d302      	bcc.n	8001746 <HAL_ETH_Transmit+0xf6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10d      	bne.n	8001762 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800174c:	f043 0204 	orr.w	r2, r3, #4
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800175c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e006      	b.n	8001770 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	dbc3      	blt.n	80016f2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
  }
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001784:	2301      	movs	r3, #1
 8001786:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800178c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	3212      	adds	r2, #18
 8001794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001798:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800179e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017a0:	e042      	b.n	8001828 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d112      	bne.n	80017d0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fec2 	bl	8005538 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	74fb      	strb	r3, [r7, #19]
 80017be:	e007      	b.n	80017d0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	461a      	mov	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	461a      	mov	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017d0:	7cfb      	ldrb	r3, [r7, #19]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d028      	beq.n	8001828 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	4b26      	ldr	r3, [pc, #152]	@ (800187c <ETH_UpdateDescriptor+0x104>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6053      	str	r3, [r2, #4]
 80017ea:	e005      	b.n	80017f8 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	3301      	adds	r3, #1
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d902      	bls.n	8001816 <ETH_UpdateDescriptor+0x9e>
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	3b04      	subs	r3, #4
 8001814:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	3212      	adds	r2, #18
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	617b      	str	r3, [r7, #20]
      desccount--;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	3b01      	subs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <ETH_UpdateDescriptor+0xbc>
 800182e:	7cfb      	ldrb	r3, [r7, #19]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1b6      	bne.n	80017a2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	429a      	cmp	r2, r3
 800183c:	d01a      	beq.n	8001874 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3303      	adds	r3, #3
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001848:	f3bf 8f5f 	dmb	sy
}
 800184c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6919      	ldr	r1, [r3, #16]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	18ca      	adds	r2, r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001866:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001874:	bf00      	nop
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	80004000 	.word	0x80004000

08001880 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f003 031c 	and.w	r3, r3, #28
 800189c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	02db      	lsls	r3, r3, #11
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	019b      	lsls	r3, r3, #6
 80018ae:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f023 0302 	bic.w	r3, r3, #2
 80018be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80018d0:	f7ff fbde 	bl	8001090 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018d6:	e00d      	b.n	80018f4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80018d8:	f7ff fbda 	bl	8001090 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e6:	d301      	bcc.n	80018ec <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e010      	b.n	800190e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ec      	bne.n	80018d8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	b29b      	uxth	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 031c 	and.w	r3, r3, #28
 8001932:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	02db      	lsls	r3, r3, #11
 8001938:	b29b      	uxth	r3, r3
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	019b      	lsls	r3, r3, #6
 8001944:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001970:	f7ff fb8e 	bl	8001090 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001976:	e00d      	b.n	8001994 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001978:	f7ff fb8a 	bl	8001090 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001986:	d301      	bcc.n	800198c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e009      	b.n	80019a0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ec      	bne.n	8001978 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0e6      	b.n	8001b8a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf14      	ite	ne
 80019ca:	2301      	movne	r3, #1
 80019cc:	2300      	moveq	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf14      	ite	ne
 8001a44:	2301      	movne	r3, #1
 8001a46:	2300      	moveq	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00b      	b.n	8001bc2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f870 	bl	8001c9c <ETH_SetMACConfig>

    return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e000      	b.n	8001bc2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
  }
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f023 031c 	bic.w	r3, r3, #28
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001be4:	f001 fc54 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 8001be8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d804      	bhi.n	8001bfc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f043 0308 	orr.w	r3, r3, #8
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e019      	b.n	8001c30 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4a11      	ldr	r2, [pc, #68]	@ (8001c44 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d204      	bcs.n	8001c0e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f043 030c 	orr.w	r3, r3, #12
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e010      	b.n	8001c30 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d90c      	bls.n	8001c30 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4a0c      	ldr	r2, [pc, #48]	@ (8001c4c <HAL_ETH_SetMDIOClockRange+0x80>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d804      	bhi.n	8001c28 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e003      	b.n	8001c30 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	611a      	str	r2, [r3, #16]
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	02160ebf 	.word	0x02160ebf
 8001c44:	03938700 	.word	0x03938700
 8001c48:	05f5e0ff 	.word	0x05f5e0ff
 8001c4c:	08f0d17f 	.word	0x08f0d17f

08001c50 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c72:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff fa11 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c90:	6193      	str	r3, [r2, #24]
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <ETH_SetMACConfig+0x164>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7b9b      	ldrb	r3, [r3, #14]
 8001cba:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	7c12      	ldrb	r2, [r2, #16]
 8001cc0:	2a00      	cmp	r2, #0
 8001cc2:	d102      	bne.n	8001cca <ETH_SetMACConfig+0x2e>
 8001cc4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001cc8:	e000      	b.n	8001ccc <ETH_SetMACConfig+0x30>
 8001cca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ccc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	7c52      	ldrb	r2, [r2, #17]
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d102      	bne.n	8001cdc <ETH_SetMACConfig+0x40>
 8001cd6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cda:	e000      	b.n	8001cde <ETH_SetMACConfig+0x42>
 8001cdc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cde:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ce4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	7fdb      	ldrb	r3, [r3, #31]
 8001cea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cec:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	7f92      	ldrb	r2, [r2, #30]
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	d102      	bne.n	8001d02 <ETH_SetMACConfig+0x66>
 8001cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d00:	e000      	b.n	8001d04 <ETH_SetMACConfig+0x68>
 8001d02:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	7f1b      	ldrb	r3, [r3, #28]
 8001d0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d22:	2a00      	cmp	r2, #0
 8001d24:	d102      	bne.n	8001d2c <ETH_SetMACConfig+0x90>
 8001d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d2a:	e000      	b.n	8001d2e <ETH_SetMACConfig+0x92>
 8001d2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	7bdb      	ldrb	r3, [r3, #15]
 8001d34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff f9a2 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d101      	bne.n	8001d92 <ETH_SetMACConfig+0xf6>
 8001d8e:	2280      	movs	r2, #128	@ 0x80
 8001d90:	e000      	b.n	8001d94 <ETH_SetMACConfig+0xf8>
 8001d92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001da2:	2a01      	cmp	r2, #1
 8001da4:	d101      	bne.n	8001daa <ETH_SetMACConfig+0x10e>
 8001da6:	2208      	movs	r2, #8
 8001da8:	e000      	b.n	8001dac <ETH_SetMACConfig+0x110>
 8001daa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001dac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001db4:	2a01      	cmp	r2, #1
 8001db6:	d101      	bne.n	8001dbc <ETH_SetMACConfig+0x120>
 8001db8:	2204      	movs	r2, #4
 8001dba:	e000      	b.n	8001dbe <ETH_SetMACConfig+0x122>
 8001dbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001dc6:	2a01      	cmp	r2, #1
 8001dc8:	d101      	bne.n	8001dce <ETH_SetMACConfig+0x132>
 8001dca:	2202      	movs	r2, #2
 8001dcc:	e000      	b.n	8001dd0 <ETH_SetMACConfig+0x134>
 8001dce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff f95d 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	fd20810f 	.word	0xfd20810f

08001e04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <ETH_SetDMAConfig+0x110>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7b1b      	ldrb	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <ETH_SetDMAConfig+0x2c>
 8001e2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e2e:	e000      	b.n	8001e32 <ETH_SetDMAConfig+0x2e>
 8001e30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	7b5b      	ldrb	r3, [r3, #13]
 8001e36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	7f52      	ldrb	r2, [r2, #29]
 8001e3e:	2a00      	cmp	r2, #0
 8001e40:	d102      	bne.n	8001e48 <ETH_SetDMAConfig+0x44>
 8001e42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e46:	e000      	b.n	8001e4a <ETH_SetDMAConfig+0x46>
 8001e48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	7b9b      	ldrb	r3, [r3, #14]
 8001e50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	7f1b      	ldrb	r3, [r3, #28]
 8001e5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7f9b      	ldrb	r3, [r3, #30]
 8001e66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff f904 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	791b      	ldrb	r3, [r3, #4]
 8001eb2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eb8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ebe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ec4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ecc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ece:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ed6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001edc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ee6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff f8d5 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	f8de3f23 	.word	0xf8de3f23

08001f18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0a6      	sub	sp, #152	@ 0x98
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f84:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe7f 	bl	8001c9c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fac:	2301      	movs	r3, #1
 8001fae:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fd8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fde:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff05 	bl	8001e04 <ETH_SetDMAConfig>
}
 8001ffa:	bf00      	nop
 8001ffc:	3798      	adds	r7, #152	@ 0x98
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3305      	adds	r3, #5
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	3204      	adds	r2, #4
 800201c:	7812      	ldrb	r2, [r2, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <ETH_MACAddressConfig+0x68>)
 8002026:	4413      	add	r3, r2
 8002028:	461a      	mov	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3303      	adds	r3, #3
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	061a      	lsls	r2, r3, #24
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3302      	adds	r3, #2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3301      	adds	r3, #1
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	4313      	orrs	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <ETH_MACAddressConfig+0x6c>)
 8002056:	4413      	add	r3, r2
 8002058:	461a      	mov	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40028040 	.word	0x40028040
 8002070:	40028044 	.word	0x40028044

08002074 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	e03e      	b.n	8002100 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2200      	movs	r2, #0
 800209e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	3206      	adds	r2, #6
 80020b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d80c      	bhi.n	80020e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68d9      	ldr	r1, [r3, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	e004      	b.n	80020ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d9bd      	bls.n	8002082 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002118:	611a      	str	r2, [r3, #16]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002126:	b480      	push	{r7}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e048      	b.n	80021c6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6919      	ldr	r1, [r3, #16]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002170:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	3212      	adds	r2, #18
 8002192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d80c      	bhi.n	80021b6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6919      	ldr	r1, [r3, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	e004      	b.n	80021c0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3301      	adds	r3, #1
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d9b3      	bls.n	8002134 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f6:	60da      	str	r2, [r3, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002204:	b480      	push	{r7}
 8002206:	b091      	sub	sp, #68	@ 0x44
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3318      	adds	r3, #24
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800222a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002242:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002246:	d007      	beq.n	8002258 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224c:	3304      	adds	r3, #4
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002258:	2302      	movs	r3, #2
 800225a:	e111      	b.n	8002480 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225e:	3301      	adds	r3, #1
 8002260:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4b86      	ldr	r3, [pc, #536]	@ (800248c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002272:	4013      	ands	r3, r2
 8002274:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002276:	6852      	ldr	r2, [r2, #4]
 8002278:	431a      	orrs	r2, r3
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800228a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	431a      	orrs	r2, r3
 8002298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80022c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80022ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022dc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80022de:	e082      	b.n	80023e6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80022e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ea:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80022f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80022fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e005      	b.n	800230c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800230c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230e:	3301      	adds	r3, #1
 8002310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002314:	2b03      	cmp	r3, #3
 8002316:	d902      	bls.n	800231e <ETH_Prepare_Tx_Descriptors+0x11a>
 8002318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800231a:	3b04      	subs	r3, #4
 800231c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002326:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002334:	d007      	beq.n	8002346 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800233a:	3304      	adds	r3, #4
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d029      	beq.n	800239a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800234e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002352:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002354:	2300      	movs	r3, #0
 8002356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002358:	e019      	b.n	800238e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800235a:	f3bf 8f5f 	dmb	sy
}
 800235e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800236c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800236e:	3301      	adds	r3, #1
 8002370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002374:	2b03      	cmp	r3, #3
 8002376:	d902      	bls.n	800237e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800237a:	3b04      	subs	r3, #4
 800237c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002386:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238a:	3301      	adds	r3, #1
 800238c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800238e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002392:	429a      	cmp	r2, r3
 8002394:	d3e1      	bcc.n	800235a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002396:	2302      	movs	r3, #2
 8002398:	e072      	b.n	8002480 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80023a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80023a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a8:	3301      	adds	r3, #1
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80023ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80023b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ba:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4b32      	ldr	r3, [pc, #200]	@ (800248c <ETH_Prepare_Tx_Descriptors+0x288>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023c6:	6852      	ldr	r2, [r2, #4]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	3301      	adds	r3, #1
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80023d4:	f3bf 8f5f 	dmb	sy
}
 80023d8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f47f af78 	bne.w	80022e0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e005      	b.n	8002410 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800240c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	6a3a      	ldr	r2, [r7, #32]
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002426:	f3bf 8f5f 	dmb	sy
}
 800242a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800242c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002436:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800243e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002440:	3304      	adds	r3, #4
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800244c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244e:	f3ef 8310 	mrs	r3, PRIMASK
 8002452:	613b      	str	r3, [r7, #16]
  return(result);
 8002454:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	2301      	movs	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f383 8810 	msr	PRIMASK, r3
}
 8002462:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246a:	4413      	add	r3, r2
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	629a      	str	r2, [r3, #40]	@ 0x28
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f383 8810 	msr	PRIMASK, r3
}
 800247c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3744      	adds	r7, #68	@ 0x44
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	ffffe000 	.word	0xffffe000

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e175      	b.n	800279c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 8164 	bne.w	8002796 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d005      	beq.n	80024e6 <HAL_GPIO_Init+0x56>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d130      	bne.n	8002548 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	2203      	movs	r2, #3
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 0201 	and.w	r2, r3, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b03      	cmp	r3, #3
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	69b9      	ldr	r1, [r7, #24]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80be 	beq.w	8002796 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	4b66      	ldr	r3, [pc, #408]	@ (80027b4 <HAL_GPIO_Init+0x324>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a65      	ldr	r2, [pc, #404]	@ (80027b4 <HAL_GPIO_Init+0x324>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b63      	ldr	r3, [pc, #396]	@ (80027b4 <HAL_GPIO_Init+0x324>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002632:	4a61      	ldr	r2, [pc, #388]	@ (80027b8 <HAL_GPIO_Init+0x328>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a58      	ldr	r2, [pc, #352]	@ (80027bc <HAL_GPIO_Init+0x32c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d037      	beq.n	80026ce <HAL_GPIO_Init+0x23e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a57      	ldr	r2, [pc, #348]	@ (80027c0 <HAL_GPIO_Init+0x330>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d031      	beq.n	80026ca <HAL_GPIO_Init+0x23a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a56      	ldr	r2, [pc, #344]	@ (80027c4 <HAL_GPIO_Init+0x334>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d02b      	beq.n	80026c6 <HAL_GPIO_Init+0x236>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a55      	ldr	r2, [pc, #340]	@ (80027c8 <HAL_GPIO_Init+0x338>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d025      	beq.n	80026c2 <HAL_GPIO_Init+0x232>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a54      	ldr	r2, [pc, #336]	@ (80027cc <HAL_GPIO_Init+0x33c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01f      	beq.n	80026be <HAL_GPIO_Init+0x22e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a53      	ldr	r2, [pc, #332]	@ (80027d0 <HAL_GPIO_Init+0x340>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d019      	beq.n	80026ba <HAL_GPIO_Init+0x22a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a52      	ldr	r2, [pc, #328]	@ (80027d4 <HAL_GPIO_Init+0x344>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0x226>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a51      	ldr	r2, [pc, #324]	@ (80027d8 <HAL_GPIO_Init+0x348>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_Init+0x222>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a50      	ldr	r2, [pc, #320]	@ (80027dc <HAL_GPIO_Init+0x34c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x21e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4f      	ldr	r2, [pc, #316]	@ (80027e0 <HAL_GPIO_Init+0x350>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_Init+0x21a>
 80026a6:	2309      	movs	r3, #9
 80026a8:	e012      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026aa:	230a      	movs	r3, #10
 80026ac:	e010      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ae:	2308      	movs	r3, #8
 80026b0:	e00e      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e00c      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026b6:	2306      	movs	r3, #6
 80026b8:	e00a      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026be:	2304      	movs	r3, #4
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x240>
 80026ce:	2300      	movs	r3, #0
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026e0:	4935      	ldr	r1, [pc, #212]	@ (80027b8 <HAL_GPIO_Init+0x328>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ee:	4b3d      	ldr	r3, [pc, #244]	@ (80027e4 <HAL_GPIO_Init+0x354>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002712:	4a34      	ldr	r2, [pc, #208]	@ (80027e4 <HAL_GPIO_Init+0x354>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002718:	4b32      	ldr	r3, [pc, #200]	@ (80027e4 <HAL_GPIO_Init+0x354>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800273c:	4a29      	ldr	r2, [pc, #164]	@ (80027e4 <HAL_GPIO_Init+0x354>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002742:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <HAL_GPIO_Init+0x354>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002766:	4a1f      	ldr	r2, [pc, #124]	@ (80027e4 <HAL_GPIO_Init+0x354>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276c:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <HAL_GPIO_Init+0x354>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002790:	4a14      	ldr	r2, [pc, #80]	@ (80027e4 <HAL_GPIO_Init+0x354>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	f67f ae86 	bls.w	80024b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3724      	adds	r7, #36	@ 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020c00 	.word	0x40020c00
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40021400 	.word	0x40021400
 80027d4:	40021800 	.word	0x40021800
 80027d8:	40021c00 	.word	0x40021c00
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40022400 	.word	0x40022400
 80027e4:	40013c00 	.word	0x40013c00

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af02      	add	r7, sp, #8
 8002820:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e108      	b.n	8002a3e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe f91c 	bl	8000a84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2203      	movs	r2, #3
 8002850:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800285a:	d102      	bne.n	8002862 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f001 ff96 	bl	8004798 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	7c1a      	ldrb	r2, [r3, #16]
 8002874:	f88d 2000 	strb.w	r2, [sp]
 8002878:	3304      	adds	r3, #4
 800287a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287c:	f001 ff32 	bl	80046e4 <USB_CoreInit>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0d5      	b.n	8002a3e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f001 ff8e 	bl	80047ba <USB_SetCurrentMode>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0c6      	b.n	8002a3e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e04a      	b.n	800294c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3315      	adds	r3, #21
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3314      	adds	r3, #20
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	b298      	uxth	r0, r3
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	332e      	adds	r3, #46	@ 0x2e
 80028f2:	4602      	mov	r2, r0
 80028f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3318      	adds	r3, #24
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	331c      	adds	r3, #28
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3320      	adds	r3, #32
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3324      	adds	r3, #36	@ 0x24
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	3301      	adds	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	791b      	ldrb	r3, [r3, #4]
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	429a      	cmp	r2, r3
 8002954:	d3af      	bcc.n	80028b6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e044      	b.n	80029e6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	3301      	adds	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	791b      	ldrb	r3, [r3, #4]
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3b5      	bcc.n	800295c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7c1a      	ldrb	r2, [r3, #16]
 80029f8:	f88d 2000 	strb.w	r2, [sp]
 80029fc:	3304      	adds	r3, #4
 80029fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a00:	f001 ff28 	bl	8004854 <USB_DevInit>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e013      	b.n	8002a3e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7b1b      	ldrb	r3, [r3, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d102      	bne.n	8002a32 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f80b 	bl	8002a48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f002 f8e3 	bl	8004c02 <USB_DevDisconnect>

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a76:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_PCDEx_ActivateLPM+0x44>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	10000003 	.word	0x10000003

08002a90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9e:	6013      	str	r3, [r2, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40007000 	.word	0x40007000

08002ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b23      	ldr	r3, [pc, #140]	@ (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a22      	ldr	r2, [pc, #136]	@ (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ade:	f7fe fad7 	bl	8001090 <HAL_GetTick>
 8002ae2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ae4:	e009      	b.n	8002afa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ae6:	f7fe fad3 	bl	8001090 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002af4:	d901      	bls.n	8002afa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e022      	b.n	8002b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b08:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b14:	f7fe fabc 	bl	8001090 <HAL_GetTick>
 8002b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b1a:	e009      	b.n	8002b30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b1c:	f7fe fab8 	bl	8001090 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b2a:	d901      	bls.n	8002b30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e007      	b.n	8002b40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40007000 	.word	0x40007000

08002b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e29b      	b.n	800309e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8087 	beq.w	8002c82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b74:	4b96      	ldr	r3, [pc, #600]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b80:	4b93      	ldr	r3, [pc, #588]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d112      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62>
 8002b8c:	4b90      	ldr	r3, [pc, #576]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x130>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d168      	bne.n	8002c80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e275      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x7a>
 8002bbc:	4b84      	ldr	r3, [pc, #528]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a83      	ldr	r2, [pc, #524]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e02e      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x9c>
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b7c      	ldr	r3, [pc, #496]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7b      	ldr	r2, [pc, #492]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002be4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e01d      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bf4:	d10c      	bne.n	8002c10 <HAL_RCC_OscConfig+0xc0>
 8002bf6:	4b76      	ldr	r3, [pc, #472]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a75      	ldr	r2, [pc, #468]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	4b73      	ldr	r3, [pc, #460]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a72      	ldr	r2, [pc, #456]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_OscConfig+0xd8>
 8002c10:	4b6f      	ldr	r3, [pc, #444]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a6e      	ldr	r2, [pc, #440]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d013      	beq.n	8002c58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe fa2e 	bl	8001090 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7fe fa2a 	bl	8001090 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	@ 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e229      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b61      	ldr	r3, [pc, #388]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xe8>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fa1a 	bl	8001090 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c60:	f7fe fa16 	bl	8001090 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	@ 0x64
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e215      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	4b57      	ldr	r3, [pc, #348]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x110>
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d069      	beq.n	8002d62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c8e:	4b50      	ldr	r3, [pc, #320]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d11c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d116      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb2:	4b47      	ldr	r3, [pc, #284]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1e9      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	4b41      	ldr	r3, [pc, #260]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	493d      	ldr	r1, [pc, #244]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	e040      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a38      	ldr	r2, [pc, #224]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe f9cc 	bl	8001090 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fe f9c8 	bl	8001090 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1c7      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4929      	ldr	r1, [pc, #164]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
 8002d2e:	e018      	b.n	8002d62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a26      	ldr	r2, [pc, #152]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe f9a8 	bl	8001090 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d44:	f7fe f9a4 	bl	8001090 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1a3      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d038      	beq.n	8002de0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d019      	beq.n	8002daa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7a:	4a15      	ldr	r2, [pc, #84]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe f985 	bl	8001090 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe f981 	bl	8001090 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e180      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x23a>
 8002da8:	e01a      	b.n	8002de0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_RCC_OscConfig+0x280>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db6:	f7fe f96b 	bl	8001090 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbe:	f7fe f967 	bl	8001090 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d903      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e166      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
 8002dd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b92      	ldr	r3, [pc, #584]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a4 	beq.w	8002f36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dee:	4b8c      	ldr	r3, [pc, #560]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10d      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	4b89      	ldr	r3, [pc, #548]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	4a88      	ldr	r2, [pc, #544]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e06:	4b86      	ldr	r3, [pc, #536]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e16:	4b83      	ldr	r3, [pc, #524]	@ (8003024 <HAL_RCC_OscConfig+0x4d4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d118      	bne.n	8002e54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e22:	4b80      	ldr	r3, [pc, #512]	@ (8003024 <HAL_RCC_OscConfig+0x4d4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7f      	ldr	r2, [pc, #508]	@ (8003024 <HAL_RCC_OscConfig+0x4d4>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe f92f 	bl	8001090 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fe f92b 	bl	8001090 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	@ 0x64
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e12a      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e48:	4b76      	ldr	r3, [pc, #472]	@ (8003024 <HAL_RCC_OscConfig+0x4d4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x31a>
 8002e5c:	4b70      	ldr	r3, [pc, #448]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	4a6f      	ldr	r2, [pc, #444]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e68:	e02d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x33c>
 8002e72:	4b6b      	ldr	r3, [pc, #428]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	4a6a      	ldr	r2, [pc, #424]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7e:	4b68      	ldr	r3, [pc, #416]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e82:	4a67      	ldr	r2, [pc, #412]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e8a:	e01c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d10c      	bne.n	8002eae <HAL_RCC_OscConfig+0x35e>
 8002e94:	4b62      	ldr	r3, [pc, #392]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	4a61      	ldr	r2, [pc, #388]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea0:	4b5f      	ldr	r3, [pc, #380]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea4:	4a5e      	ldr	r2, [pc, #376]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eac:	e00b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x376>
 8002eae:	4b5c      	ldr	r3, [pc, #368]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eba:	4b59      	ldr	r3, [pc, #356]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	4a58      	ldr	r2, [pc, #352]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d015      	beq.n	8002efa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7fe f8df 	bl	8001090 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fe f8db 	bl	8001090 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0d8      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	4b4c      	ldr	r3, [pc, #304]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ee      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x386>
 8002ef8:	e014      	b.n	8002f24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fe f8c9 	bl	8001090 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe f8c5 	bl	8001090 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0c2      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	4b41      	ldr	r3, [pc, #260]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ee      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80ae 	beq.w	800309c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f40:	4b37      	ldr	r3, [pc, #220]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d06d      	beq.n	8003028 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d14b      	bne.n	8002fec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b32      	ldr	r3, [pc, #200]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a31      	ldr	r2, [pc, #196]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe f896 	bl	8001090 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe f892 	bl	8001090 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e091      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb0:	071b      	lsls	r3, r3, #28
 8002fb2:	491b      	ldr	r1, [pc, #108]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b19      	ldr	r3, [pc, #100]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe f864 	bl	8001090 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe f860 	bl	8001090 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e05f      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x47c>
 8002fea:	e057      	b.n	800309c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8002ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe f84a 	bl	8001090 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe f846 	bl	8001090 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e045      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	4b03      	ldr	r3, [pc, #12]	@ (8003020 <HAL_RCC_OscConfig+0x4d0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x4b0>
 800301e:	e03d      	b.n	800309c <HAL_RCC_OscConfig+0x54c>
 8003020:	40023800 	.word	0x40023800
 8003024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <HAL_RCC_OscConfig+0x558>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d030      	beq.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d129      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d122      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800305e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003060:	4293      	cmp	r3, r2
 8003062:	d119      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	3b01      	subs	r3, #1
 8003072:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d10f      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800

080030ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0d0      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d910      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b67      	ldr	r3, [pc, #412]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 020f 	bic.w	r2, r3, #15
 80030da:	4965      	ldr	r1, [pc, #404]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d040      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d115      	bne.n	800318e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316e:	4b41      	ldr	r3, [pc, #260]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e073      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317e:	4b3d      	ldr	r3, [pc, #244]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06b      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b39      	ldr	r3, [pc, #228]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4936      	ldr	r1, [pc, #216]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fd ff76 	bl	8001090 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fd ff72 	bl	8001090 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e053      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b2d      	ldr	r3, [pc, #180]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d0:	4b27      	ldr	r3, [pc, #156]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d210      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 020f 	bic.w	r2, r3, #15
 80031e6:	4922      	ldr	r1, [pc, #136]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800322a:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f821 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	@ (8003278 <HAL_RCC_ClockConfig+0x1cc>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	@ (800327c <HAL_RCC_ClockConfig+0x1d0>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <HAL_RCC_ClockConfig+0x1d4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fed2 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	080128f0 	.word	0x080128f0
 800327c:	20000000 	.word	0x20000000
 8003280:	20000004 	.word	0x20000004

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003288:	b094      	sub	sp, #80	@ 0x50
 800328a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003290:	2300      	movs	r3, #0
 8003292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003294:	2300      	movs	r3, #0
 8003296:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329c:	4b79      	ldr	r3, [pc, #484]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d00d      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x40>
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	f200 80e1 	bhi.w	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x34>
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x3a>
 80032b6:	e0db      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b73      	ldr	r3, [pc, #460]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032bc:	e0db      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032be:	4b73      	ldr	r3, [pc, #460]	@ (800348c <HAL_RCC_GetSysClockFreq+0x208>)
 80032c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032c2:	e0d8      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b6a      	ldr	r3, [pc, #424]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	2200      	movs	r2, #0
 80032e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ee:	2300      	movs	r3, #0
 80032f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80032f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	0159      	lsls	r1, r3, #5
 8003304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003308:	0150      	lsls	r0, r2, #5
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4621      	mov	r1, r4
 8003310:	1a51      	subs	r1, r2, r1
 8003312:	6139      	str	r1, [r7, #16]
 8003314:	4629      	mov	r1, r5
 8003316:	eb63 0301 	sbc.w	r3, r3, r1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003328:	4659      	mov	r1, fp
 800332a:	018b      	lsls	r3, r1, #6
 800332c:	4651      	mov	r1, sl
 800332e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003332:	4651      	mov	r1, sl
 8003334:	018a      	lsls	r2, r1, #6
 8003336:	4651      	mov	r1, sl
 8003338:	ebb2 0801 	subs.w	r8, r2, r1
 800333c:	4659      	mov	r1, fp
 800333e:	eb63 0901 	sbc.w	r9, r3, r1
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003356:	4690      	mov	r8, r2
 8003358:	4699      	mov	r9, r3
 800335a:	4623      	mov	r3, r4
 800335c:	eb18 0303 	adds.w	r3, r8, r3
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	462b      	mov	r3, r5
 8003364:	eb49 0303 	adc.w	r3, r9, r3
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003376:	4629      	mov	r1, r5
 8003378:	024b      	lsls	r3, r1, #9
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003380:	4621      	mov	r1, r4
 8003382:	024a      	lsls	r2, r1, #9
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338a:	2200      	movs	r2, #0
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800338e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003394:	f7fc ffa4 	bl	80002e0 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a0:	e058      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b38      	ldr	r3, [pc, #224]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	2200      	movs	r2, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	4611      	mov	r1, r2
 80033ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	f04f 0000 	mov.w	r0, #0
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ce:	0150      	lsls	r0, r2, #5
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4641      	mov	r1, r8
 80033d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f4:	ebb2 040a 	subs.w	r4, r2, sl
 80033f8:	eb63 050b 	sbc.w	r5, r3, fp
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	00eb      	lsls	r3, r5, #3
 8003406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340a:	00e2      	lsls	r2, r4, #3
 800340c:	4614      	mov	r4, r2
 800340e:	461d      	mov	r5, r3
 8003410:	4643      	mov	r3, r8
 8003412:	18e3      	adds	r3, r4, r3
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	464b      	mov	r3, r9
 8003418:	eb45 0303 	adc.w	r3, r5, r3
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342a:	4629      	mov	r1, r5
 800342c:	028b      	lsls	r3, r1, #10
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003434:	4621      	mov	r1, r4
 8003436:	028a      	lsls	r2, r1, #10
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800343e:	2200      	movs	r2, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	61fa      	str	r2, [r7, #28]
 8003444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003448:	f7fc ff4a 	bl	80002e0 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003478:	4618      	mov	r0, r3
 800347a:	3750      	adds	r7, #80	@ 0x50
 800347c:	46bd      	mov	sp, r7
 800347e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400
 800348c:	007a1200 	.word	0x007a1200

08003490 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a9b      	lsrs	r3, r3, #10
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08012900 	.word	0x08012900

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffdc 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0b5b      	lsrs	r3, r3, #13
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08012900 	.word	0x08012900

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d012      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003520:	4b69      	ldr	r3, [pc, #420]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a68      	ldr	r2, [pc, #416]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003526:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800352a:	6093      	str	r3, [r2, #8]
 800352c:	4b66      	ldr	r3, [pc, #408]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003534:	4964      	ldr	r1, [pc, #400]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d017      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003552:	4b5d      	ldr	r3, [pc, #372]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003558:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	4959      	ldr	r1, [pc, #356]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800356c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003570:	d101      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003572:	2301      	movs	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d017      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800358e:	4b4e      	ldr	r3, [pc, #312]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003594:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	494a      	ldr	r1, [pc, #296]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 808b 	beq.w	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	4b3a      	ldr	r3, [pc, #232]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	4a39      	ldr	r2, [pc, #228]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e8:	4b37      	ldr	r3, [pc, #220]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035f4:	4b35      	ldr	r3, [pc, #212]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a34      	ldr	r2, [pc, #208]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003600:	f7fd fd46 	bl	8001090 <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fd fd42 	bl	8001090 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	@ 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e38f      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800361a:	4b2c      	ldr	r3, [pc, #176]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003626:	4b28      	ldr	r3, [pc, #160]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d035      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	429a      	cmp	r2, r3
 8003642:	d02e      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003644:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800364c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800364e:	4b1e      	ldr	r3, [pc, #120]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	4a1d      	ldr	r2, [pc, #116]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003658:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800365a:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365e:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003664:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003666:	4a18      	ldr	r2, [pc, #96]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800366c:	4b16      	ldr	r3, [pc, #88]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b01      	cmp	r3, #1
 8003676:	d114      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fd0a 	bl	8001090 <HAL_GetTick>
 800367c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367e:	e00a      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fd fd06 	bl	8001090 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e351      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ee      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036ae:	d111      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036be:	400b      	ands	r3, r1
 80036c0:	4901      	ldr	r1, [pc, #4]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
 80036c6:	e00b      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	0ffffcff 	.word	0x0ffffcff
 80036d4:	4bac      	ldr	r3, [pc, #688]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4aab      	ldr	r2, [pc, #684]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036da:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80036de:	6093      	str	r3, [r2, #8]
 80036e0:	4ba9      	ldr	r3, [pc, #676]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	49a6      	ldr	r1, [pc, #664]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d010      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036fe:	4ba2      	ldr	r3, [pc, #648]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003704:	4aa0      	ldr	r2, [pc, #640]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800370a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800370e:	4b9e      	ldr	r3, [pc, #632]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003710:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	499b      	ldr	r1, [pc, #620]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800372c:	4b96      	ldr	r3, [pc, #600]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003732:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800373a:	4993      	ldr	r1, [pc, #588]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800374e:	4b8e      	ldr	r3, [pc, #568]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003754:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800375c:	498a      	ldr	r1, [pc, #552]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003770:	4b85      	ldr	r3, [pc, #532]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377e:	4982      	ldr	r1, [pc, #520]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003792:	4b7d      	ldr	r3, [pc, #500]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003798:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a0:	4979      	ldr	r1, [pc, #484]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b4:	4b74      	ldr	r3, [pc, #464]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	4971      	ldr	r1, [pc, #452]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037dc:	f023 020c 	bic.w	r2, r3, #12
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e4:	4968      	ldr	r1, [pc, #416]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037f8:	4b63      	ldr	r3, [pc, #396]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	4960      	ldr	r1, [pc, #384]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800381a:	4b5b      	ldr	r3, [pc, #364]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003820:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003828:	4957      	ldr	r1, [pc, #348]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800383c:	4b52      	ldr	r3, [pc, #328]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003842:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384a:	494f      	ldr	r1, [pc, #316]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800385e:	4b4a      	ldr	r3, [pc, #296]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003864:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386c:	4946      	ldr	r1, [pc, #280]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003880:	4b41      	ldr	r3, [pc, #260]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388e:	493e      	ldr	r1, [pc, #248]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038a2:	4b39      	ldr	r3, [pc, #228]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b0:	4935      	ldr	r1, [pc, #212]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038c4:	4b30      	ldr	r3, [pc, #192]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038d2:	492d      	ldr	r1, [pc, #180]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d011      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038f4:	4924      	ldr	r1, [pc, #144]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003904:	d101      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003916:	2301      	movs	r3, #1
 8003918:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003926:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003934:	4914      	ldr	r1, [pc, #80]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003948:	4b0f      	ldr	r3, [pc, #60]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003958:	490b      	ldr	r1, [pc, #44]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00f      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003972:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800397c:	4902      	ldr	r1, [pc, #8]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003984:	e002      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003998:	4b8a      	ldr	r3, [pc, #552]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800399e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	4986      	ldr	r1, [pc, #536]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039bc:	4b81      	ldr	r3, [pc, #516]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039cc:	497d      	ldr	r1, [pc, #500]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d006      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80d6 	beq.w	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039e8:	4b76      	ldr	r3, [pc, #472]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a75      	ldr	r2, [pc, #468]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f4:	f7fd fb4c 	bl	8001090 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039fc:	f7fd fb48 	bl	8001090 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	@ 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e195      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d021      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11d      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a2e:	4b65      	ldr	r3, [pc, #404]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a3c:	4b61      	ldr	r3, [pc, #388]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a42:	0e1b      	lsrs	r3, r3, #24
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	019a      	lsls	r2, r3, #6
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	071b      	lsls	r3, r3, #28
 8003a62:	4958      	ldr	r1, [pc, #352]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02e      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a94:	d129      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a96:	4b4b      	ldr	r3, [pc, #300]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003aa4:	4b47      	ldr	r3, [pc, #284]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aaa:	0f1b      	lsrs	r3, r3, #28
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	019a      	lsls	r2, r3, #6
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	041b      	lsls	r3, r3, #16
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	071b      	lsls	r3, r3, #28
 8003aca:	493e      	ldr	r1, [pc, #248]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad8:	f023 021f 	bic.w	r2, r3, #31
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	4938      	ldr	r1, [pc, #224]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01d      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003af6:	4b33      	ldr	r3, [pc, #204]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b04:	4b2f      	ldr	r3, [pc, #188]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b0a:	0f1b      	lsrs	r3, r3, #28
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	019a      	lsls	r2, r3, #6
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	071b      	lsls	r3, r3, #28
 8003b2a:	4926      	ldr	r1, [pc, #152]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d011      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	019a      	lsls	r2, r3, #6
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	071b      	lsls	r3, r3, #28
 8003b5a:	491a      	ldr	r1, [pc, #104]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b62:	4b18      	ldr	r3, [pc, #96]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a17      	ldr	r2, [pc, #92]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b6e:	f7fd fa8f 	bl	8001090 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b76:	f7fd fa8b 	bl	8001090 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b64      	cmp	r3, #100	@ 0x64
 8003b82:	d901      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e0d8      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b88:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	f040 80ce 	bne.w	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b9c:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a08      	ldr	r2, [pc, #32]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba8:	f7fd fa72 	bl	8001090 <HAL_GetTick>
 8003bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bb0:	f7fd fa6e 	bl	8001090 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	@ 0x64
 8003bbc:	d904      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e0bb      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bd4:	d0ec      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02e      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d12a      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bfe:	4b51      	ldr	r3, [pc, #324]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	0f1b      	lsrs	r3, r3, #28
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	019a      	lsls	r2, r3, #6
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	061b      	lsls	r3, r3, #24
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	071b      	lsls	r3, r3, #28
 8003c32:	4944      	ldr	r1, [pc, #272]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c3a:	4b42      	ldr	r3, [pc, #264]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	493d      	ldr	r1, [pc, #244]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d022      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c68:	d11d      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c6a:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	0e1b      	lsrs	r3, r3, #24
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c78:	4b32      	ldr	r3, [pc, #200]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7e:	0f1b      	lsrs	r3, r3, #28
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	019a      	lsls	r2, r3, #6
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	431a      	orrs	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	071b      	lsls	r3, r3, #28
 8003c9e:	4929      	ldr	r1, [pc, #164]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d028      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cb2:	4b24      	ldr	r3, [pc, #144]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb8:	0e1b      	lsrs	r3, r3, #24
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cc0:	4b20      	ldr	r3, [pc, #128]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	019a      	lsls	r2, r3, #6
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	041b      	lsls	r3, r3, #16
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	071b      	lsls	r3, r3, #28
 8003ce6:	4917      	ldr	r1, [pc, #92]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cee:	4b15      	ldr	r3, [pc, #84]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	4911      	ldr	r1, [pc, #68]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d04:	4b0f      	ldr	r3, [pc, #60]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0e      	ldr	r2, [pc, #56]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd f9be 	bl	8001090 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d18:	f7fd f9ba 	bl	8001090 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	@ 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e007      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d36:	d1ef      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e040      	b.n	8003ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc fe2a 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	@ 0x24
 8003d74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa8c 	bl	80042ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f825 	bl	8003de4 <UART_SetConfig>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e01b      	b.n	8003ddc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fb0b 	bl	80043f0 <UART_CheckIdleState>
 8003dda:	4603      	mov	r3, r0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4ba6      	ldr	r3, [pc, #664]	@ (80040a8 <UART_SetConfig+0x2c4>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a94      	ldr	r2, [pc, #592]	@ (80040ac <UART_SetConfig+0x2c8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d120      	bne.n	8003ea2 <UART_SetConfig+0xbe>
 8003e60:	4b93      	ldr	r3, [pc, #588]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d816      	bhi.n	8003e9c <UART_SetConfig+0xb8>
 8003e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e74 <UART_SetConfig+0x90>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003e85 	.word	0x08003e85
 8003e78:	08003e91 	.word	0x08003e91
 8003e7c:	08003e8b 	.word	0x08003e8b
 8003e80:	08003e97 	.word	0x08003e97
 8003e84:	2301      	movs	r3, #1
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e150      	b.n	800412c <UART_SetConfig+0x348>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e14d      	b.n	800412c <UART_SetConfig+0x348>
 8003e90:	2304      	movs	r3, #4
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e14a      	b.n	800412c <UART_SetConfig+0x348>
 8003e96:	2308      	movs	r3, #8
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e147      	b.n	800412c <UART_SetConfig+0x348>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e144      	b.n	800412c <UART_SetConfig+0x348>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a83      	ldr	r2, [pc, #524]	@ (80040b4 <UART_SetConfig+0x2d0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d132      	bne.n	8003f12 <UART_SetConfig+0x12e>
 8003eac:	4b80      	ldr	r3, [pc, #512]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d828      	bhi.n	8003f0c <UART_SetConfig+0x128>
 8003eba:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <UART_SetConfig+0xdc>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003f0d 	.word	0x08003f0d
 8003ec8:	08003f0d 	.word	0x08003f0d
 8003ecc:	08003f0d 	.word	0x08003f0d
 8003ed0:	08003f01 	.word	0x08003f01
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003f0d 	.word	0x08003f0d
 8003edc:	08003f0d 	.word	0x08003f0d
 8003ee0:	08003efb 	.word	0x08003efb
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f0d 	.word	0x08003f0d
 8003ef0:	08003f07 	.word	0x08003f07
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e118      	b.n	800412c <UART_SetConfig+0x348>
 8003efa:	2302      	movs	r3, #2
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e115      	b.n	800412c <UART_SetConfig+0x348>
 8003f00:	2304      	movs	r3, #4
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e112      	b.n	800412c <UART_SetConfig+0x348>
 8003f06:	2308      	movs	r3, #8
 8003f08:	77fb      	strb	r3, [r7, #31]
 8003f0a:	e10f      	b.n	800412c <UART_SetConfig+0x348>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e10c      	b.n	800412c <UART_SetConfig+0x348>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a68      	ldr	r2, [pc, #416]	@ (80040b8 <UART_SetConfig+0x2d4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d120      	bne.n	8003f5e <UART_SetConfig+0x17a>
 8003f1c:	4b64      	ldr	r3, [pc, #400]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f26:	2b30      	cmp	r3, #48	@ 0x30
 8003f28:	d013      	beq.n	8003f52 <UART_SetConfig+0x16e>
 8003f2a:	2b30      	cmp	r3, #48	@ 0x30
 8003f2c:	d814      	bhi.n	8003f58 <UART_SetConfig+0x174>
 8003f2e:	2b20      	cmp	r3, #32
 8003f30:	d009      	beq.n	8003f46 <UART_SetConfig+0x162>
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	d810      	bhi.n	8003f58 <UART_SetConfig+0x174>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <UART_SetConfig+0x15c>
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d006      	beq.n	8003f4c <UART_SetConfig+0x168>
 8003f3e:	e00b      	b.n	8003f58 <UART_SetConfig+0x174>
 8003f40:	2300      	movs	r3, #0
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e0f2      	b.n	800412c <UART_SetConfig+0x348>
 8003f46:	2302      	movs	r3, #2
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e0ef      	b.n	800412c <UART_SetConfig+0x348>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e0ec      	b.n	800412c <UART_SetConfig+0x348>
 8003f52:	2308      	movs	r3, #8
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e0e9      	b.n	800412c <UART_SetConfig+0x348>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e0e6      	b.n	800412c <UART_SetConfig+0x348>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a56      	ldr	r2, [pc, #344]	@ (80040bc <UART_SetConfig+0x2d8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d120      	bne.n	8003faa <UART_SetConfig+0x1c6>
 8003f68:	4b51      	ldr	r3, [pc, #324]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f74:	d013      	beq.n	8003f9e <UART_SetConfig+0x1ba>
 8003f76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f78:	d814      	bhi.n	8003fa4 <UART_SetConfig+0x1c0>
 8003f7a:	2b80      	cmp	r3, #128	@ 0x80
 8003f7c:	d009      	beq.n	8003f92 <UART_SetConfig+0x1ae>
 8003f7e:	2b80      	cmp	r3, #128	@ 0x80
 8003f80:	d810      	bhi.n	8003fa4 <UART_SetConfig+0x1c0>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <UART_SetConfig+0x1a8>
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d006      	beq.n	8003f98 <UART_SetConfig+0x1b4>
 8003f8a:	e00b      	b.n	8003fa4 <UART_SetConfig+0x1c0>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e0cc      	b.n	800412c <UART_SetConfig+0x348>
 8003f92:	2302      	movs	r3, #2
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e0c9      	b.n	800412c <UART_SetConfig+0x348>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	e0c6      	b.n	800412c <UART_SetConfig+0x348>
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	77fb      	strb	r3, [r7, #31]
 8003fa2:	e0c3      	b.n	800412c <UART_SetConfig+0x348>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	77fb      	strb	r3, [r7, #31]
 8003fa8:	e0c0      	b.n	800412c <UART_SetConfig+0x348>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a44      	ldr	r2, [pc, #272]	@ (80040c0 <UART_SetConfig+0x2dc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d125      	bne.n	8004000 <UART_SetConfig+0x21c>
 8003fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc2:	d017      	beq.n	8003ff4 <UART_SetConfig+0x210>
 8003fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc8:	d817      	bhi.n	8003ffa <UART_SetConfig+0x216>
 8003fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fce:	d00b      	beq.n	8003fe8 <UART_SetConfig+0x204>
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fd4:	d811      	bhi.n	8003ffa <UART_SetConfig+0x216>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <UART_SetConfig+0x1fe>
 8003fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fde:	d006      	beq.n	8003fee <UART_SetConfig+0x20a>
 8003fe0:	e00b      	b.n	8003ffa <UART_SetConfig+0x216>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e0a1      	b.n	800412c <UART_SetConfig+0x348>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e09e      	b.n	800412c <UART_SetConfig+0x348>
 8003fee:	2304      	movs	r3, #4
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e09b      	b.n	800412c <UART_SetConfig+0x348>
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e098      	b.n	800412c <UART_SetConfig+0x348>
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	77fb      	strb	r3, [r7, #31]
 8003ffe:	e095      	b.n	800412c <UART_SetConfig+0x348>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2f      	ldr	r2, [pc, #188]	@ (80040c4 <UART_SetConfig+0x2e0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d125      	bne.n	8004056 <UART_SetConfig+0x272>
 800400a:	4b29      	ldr	r3, [pc, #164]	@ (80040b0 <UART_SetConfig+0x2cc>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004010:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004014:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004018:	d017      	beq.n	800404a <UART_SetConfig+0x266>
 800401a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800401e:	d817      	bhi.n	8004050 <UART_SetConfig+0x26c>
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004024:	d00b      	beq.n	800403e <UART_SetConfig+0x25a>
 8004026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800402a:	d811      	bhi.n	8004050 <UART_SetConfig+0x26c>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <UART_SetConfig+0x254>
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004034:	d006      	beq.n	8004044 <UART_SetConfig+0x260>
 8004036:	e00b      	b.n	8004050 <UART_SetConfig+0x26c>
 8004038:	2301      	movs	r3, #1
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e076      	b.n	800412c <UART_SetConfig+0x348>
 800403e:	2302      	movs	r3, #2
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e073      	b.n	800412c <UART_SetConfig+0x348>
 8004044:	2304      	movs	r3, #4
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e070      	b.n	800412c <UART_SetConfig+0x348>
 800404a:	2308      	movs	r3, #8
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e06d      	b.n	800412c <UART_SetConfig+0x348>
 8004050:	2310      	movs	r3, #16
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e06a      	b.n	800412c <UART_SetConfig+0x348>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1b      	ldr	r2, [pc, #108]	@ (80040c8 <UART_SetConfig+0x2e4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d138      	bne.n	80040d2 <UART_SetConfig+0x2ee>
 8004060:	4b13      	ldr	r3, [pc, #76]	@ (80040b0 <UART_SetConfig+0x2cc>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004066:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800406a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800406e:	d017      	beq.n	80040a0 <UART_SetConfig+0x2bc>
 8004070:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004074:	d82a      	bhi.n	80040cc <UART_SetConfig+0x2e8>
 8004076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407a:	d00b      	beq.n	8004094 <UART_SetConfig+0x2b0>
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004080:	d824      	bhi.n	80040cc <UART_SetConfig+0x2e8>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <UART_SetConfig+0x2aa>
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408a:	d006      	beq.n	800409a <UART_SetConfig+0x2b6>
 800408c:	e01e      	b.n	80040cc <UART_SetConfig+0x2e8>
 800408e:	2300      	movs	r3, #0
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e04b      	b.n	800412c <UART_SetConfig+0x348>
 8004094:	2302      	movs	r3, #2
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e048      	b.n	800412c <UART_SetConfig+0x348>
 800409a:	2304      	movs	r3, #4
 800409c:	77fb      	strb	r3, [r7, #31]
 800409e:	e045      	b.n	800412c <UART_SetConfig+0x348>
 80040a0:	2308      	movs	r3, #8
 80040a2:	77fb      	strb	r3, [r7, #31]
 80040a4:	e042      	b.n	800412c <UART_SetConfig+0x348>
 80040a6:	bf00      	nop
 80040a8:	efff69f3 	.word	0xefff69f3
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40004400 	.word	0x40004400
 80040b8:	40004800 	.word	0x40004800
 80040bc:	40004c00 	.word	0x40004c00
 80040c0:	40005000 	.word	0x40005000
 80040c4:	40011400 	.word	0x40011400
 80040c8:	40007800 	.word	0x40007800
 80040cc:	2310      	movs	r3, #16
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e02c      	b.n	800412c <UART_SetConfig+0x348>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a72      	ldr	r2, [pc, #456]	@ (80042a0 <UART_SetConfig+0x4bc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d125      	bne.n	8004128 <UART_SetConfig+0x344>
 80040dc:	4b71      	ldr	r3, [pc, #452]	@ (80042a4 <UART_SetConfig+0x4c0>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040ea:	d017      	beq.n	800411c <UART_SetConfig+0x338>
 80040ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040f0:	d817      	bhi.n	8004122 <UART_SetConfig+0x33e>
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f6:	d00b      	beq.n	8004110 <UART_SetConfig+0x32c>
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040fc:	d811      	bhi.n	8004122 <UART_SetConfig+0x33e>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <UART_SetConfig+0x326>
 8004102:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004106:	d006      	beq.n	8004116 <UART_SetConfig+0x332>
 8004108:	e00b      	b.n	8004122 <UART_SetConfig+0x33e>
 800410a:	2300      	movs	r3, #0
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e00d      	b.n	800412c <UART_SetConfig+0x348>
 8004110:	2302      	movs	r3, #2
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e00a      	b.n	800412c <UART_SetConfig+0x348>
 8004116:	2304      	movs	r3, #4
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e007      	b.n	800412c <UART_SetConfig+0x348>
 800411c:	2308      	movs	r3, #8
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e004      	b.n	800412c <UART_SetConfig+0x348>
 8004122:	2310      	movs	r3, #16
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e001      	b.n	800412c <UART_SetConfig+0x348>
 8004128:	2310      	movs	r3, #16
 800412a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004134:	d15b      	bne.n	80041ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004136:	7ffb      	ldrb	r3, [r7, #31]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d828      	bhi.n	800418e <UART_SetConfig+0x3aa>
 800413c:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <UART_SetConfig+0x360>)
 800413e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004142:	bf00      	nop
 8004144:	08004169 	.word	0x08004169
 8004148:	08004171 	.word	0x08004171
 800414c:	08004179 	.word	0x08004179
 8004150:	0800418f 	.word	0x0800418f
 8004154:	0800417f 	.word	0x0800417f
 8004158:	0800418f 	.word	0x0800418f
 800415c:	0800418f 	.word	0x0800418f
 8004160:	0800418f 	.word	0x0800418f
 8004164:	08004187 	.word	0x08004187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004168:	f7ff f99e 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 800416c:	61b8      	str	r0, [r7, #24]
        break;
 800416e:	e013      	b.n	8004198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004170:	f7ff f9ae 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8004174:	61b8      	str	r0, [r7, #24]
        break;
 8004176:	e00f      	b.n	8004198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004178:	4b4b      	ldr	r3, [pc, #300]	@ (80042a8 <UART_SetConfig+0x4c4>)
 800417a:	61bb      	str	r3, [r7, #24]
        break;
 800417c:	e00c      	b.n	8004198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417e:	f7ff f881 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8004182:	61b8      	str	r0, [r7, #24]
        break;
 8004184:	e008      	b.n	8004198 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800418a:	61bb      	str	r3, [r7, #24]
        break;
 800418c:	e004      	b.n	8004198 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	77bb      	strb	r3, [r7, #30]
        break;
 8004196:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d074      	beq.n	8004288 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	005a      	lsls	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	441a      	add	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b0f      	cmp	r3, #15
 80041b8:	d916      	bls.n	80041e8 <UART_SetConfig+0x404>
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c0:	d212      	bcs.n	80041e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f023 030f 	bic.w	r3, r3, #15
 80041ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	89fb      	ldrh	r3, [r7, #14]
 80041da:	4313      	orrs	r3, r2
 80041dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	89fa      	ldrh	r2, [r7, #14]
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	e04f      	b.n	8004288 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	77bb      	strb	r3, [r7, #30]
 80041ec:	e04c      	b.n	8004288 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ee:	7ffb      	ldrb	r3, [r7, #31]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d828      	bhi.n	8004246 <UART_SetConfig+0x462>
 80041f4:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <UART_SetConfig+0x418>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004229 	.word	0x08004229
 8004204:	08004231 	.word	0x08004231
 8004208:	08004247 	.word	0x08004247
 800420c:	08004237 	.word	0x08004237
 8004210:	08004247 	.word	0x08004247
 8004214:	08004247 	.word	0x08004247
 8004218:	08004247 	.word	0x08004247
 800421c:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7ff f942 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8004224:	61b8      	str	r0, [r7, #24]
        break;
 8004226:	e013      	b.n	8004250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7ff f952 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 800422c:	61b8      	str	r0, [r7, #24]
        break;
 800422e:	e00f      	b.n	8004250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b1d      	ldr	r3, [pc, #116]	@ (80042a8 <UART_SetConfig+0x4c4>)
 8004232:	61bb      	str	r3, [r7, #24]
        break;
 8004234:	e00c      	b.n	8004250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7ff f825 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800423a:	61b8      	str	r0, [r7, #24]
        break;
 800423c:	e008      	b.n	8004250 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004242:	61bb      	str	r3, [r7, #24]
        break;
 8004244:	e004      	b.n	8004250 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	77bb      	strb	r3, [r7, #30]
        break;
 800424e:	bf00      	nop
    }

    if (pclk != 0U)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	085a      	lsrs	r2, r3, #1
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	441a      	add	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b0f      	cmp	r3, #15
 800426e:	d909      	bls.n	8004284 <UART_SetConfig+0x4a0>
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004276:	d205      	bcs.n	8004284 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	e001      	b.n	8004288 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004294:	7fbb      	ldrb	r3, [r7, #30]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40007c00 	.word	0x40007c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	00f42400 	.word	0x00f42400

080042ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043aa:	d10a      	bne.n	80043c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b098      	sub	sp, #96	@ 0x60
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004400:	f7fc fe46 	bl	8001090 <HAL_GetTick>
 8004404:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d12e      	bne.n	8004472 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004414:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441c:	2200      	movs	r2, #0
 800441e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f88c 	bl	8004540 <UART_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d021      	beq.n	8004472 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004442:	653b      	str	r3, [r7, #80]	@ 0x50
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800444c:	647b      	str	r3, [r7, #68]	@ 0x44
 800444e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800445a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e6      	bne.n	800442e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e062      	b.n	8004538 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b04      	cmp	r3, #4
 800447e:	d149      	bne.n	8004514 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004480:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004488:	2200      	movs	r2, #0
 800448a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f856 	bl	8004540 <UART_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d03c      	beq.n	8004514 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	623b      	str	r3, [r7, #32]
   return(result);
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	60fb      	str	r3, [r7, #12]
   return(result);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044ec:	61fa      	str	r2, [r7, #28]
 80044ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	617b      	str	r3, [r7, #20]
   return(result);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2220      	movs	r2, #32
 8004504:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e011      	b.n	8004538 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3758      	adds	r7, #88	@ 0x58
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004550:	e04f      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004558:	d04b      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fc fd99 	bl	8001090 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <UART_WaitOnFlagUntilTimeout+0x30>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e04e      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d037      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b80      	cmp	r3, #128	@ 0x80
 8004586:	d034      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b40      	cmp	r3, #64	@ 0x40
 800458c:	d031      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d110      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2208      	movs	r2, #8
 80045a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f838 	bl	800461a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2208      	movs	r2, #8
 80045ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e029      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045cc:	d111      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f81e 	bl	800461a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e00f      	b.n	8004612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4013      	ands	r3, r2
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	429a      	cmp	r2, r3
 800460e:	d0a0      	beq.n	8004552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800461a:	b480      	push	{r7}
 800461c:	b095      	sub	sp, #84	@ 0x54
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004632:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004640:	643b      	str	r3, [r7, #64]	@ 0x40
 8004642:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004646:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800464e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e6      	bne.n	8004622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	61fb      	str	r3, [r7, #28]
   return(result);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004674:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004676:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800467a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468c:	2b01      	cmp	r3, #1
 800468e:	d118      	bne.n	80046c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	60bb      	str	r3, [r7, #8]
   return(result);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f023 0310 	bic.w	r3, r3, #16
 80046a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6979      	ldr	r1, [r7, #20]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	613b      	str	r3, [r7, #16]
   return(result);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e6      	bne.n	8004690 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046d6:	bf00      	nop
 80046d8:	3754      	adds	r7, #84	@ 0x54
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046e4:	b084      	sub	sp, #16
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	f107 001c 	add.w	r0, r7, #28
 80046f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d121      	bne.n	8004742 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004702:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	4b21      	ldr	r3, [pc, #132]	@ (8004794 <USB_CoreInit+0xb0>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004722:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004726:	2b01      	cmp	r3, #1
 8004728:	d105      	bne.n	8004736 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa92 	bl	8004c60 <USB_CoreReset>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e010      	b.n	8004764 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fa86 	bl	8004c60 <USB_CoreReset>
 8004754:	4603      	mov	r3, r0
 8004756:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004764:	7fbb      	ldrb	r3, [r7, #30]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d10b      	bne.n	8004782 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f043 0206 	orr.w	r2, r3, #6
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800478e:	b004      	add	sp, #16
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	ffbdffbf 	.word	0xffbdffbf

08004798 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f023 0201 	bic.w	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	460b      	mov	r3, r1
 80047c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d115      	bne.n	8004808 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047e8:	200a      	movs	r0, #10
 80047ea:	f7fc fc5d 	bl	80010a8 <HAL_Delay>
      ms += 10U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	330a      	adds	r3, #10
 80047f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fa25 	bl	8004c44 <USB_GetMode>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d01e      	beq.n	800483e <USB_SetCurrentMode+0x84>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2bc7      	cmp	r3, #199	@ 0xc7
 8004804:	d9f0      	bls.n	80047e8 <USB_SetCurrentMode+0x2e>
 8004806:	e01a      	b.n	800483e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d115      	bne.n	800483a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800481a:	200a      	movs	r0, #10
 800481c:	f7fc fc44 	bl	80010a8 <HAL_Delay>
      ms += 10U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	330a      	adds	r3, #10
 8004824:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa0c 	bl	8004c44 <USB_GetMode>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <USB_SetCurrentMode+0x84>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2bc7      	cmp	r3, #199	@ 0xc7
 8004836:	d9f0      	bls.n	800481a <USB_SetCurrentMode+0x60>
 8004838:	e001      	b.n	800483e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e005      	b.n	800484a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2bc8      	cmp	r3, #200	@ 0xc8
 8004842:	d101      	bne.n	8004848 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004854:	b084      	sub	sp, #16
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	e009      	b.n	8004888 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	3340      	adds	r3, #64	@ 0x40
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	2200      	movs	r2, #0
 8004880:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3301      	adds	r3, #1
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b0e      	cmp	r3, #14
 800488c:	d9f2      	bls.n	8004874 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800488e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004892:	2b00      	cmp	r3, #0
 8004894:	d11c      	bne.n	80048d0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048a4:	f043 0302 	orr.w	r3, r3, #2
 80048a8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ae:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e005      	b.n	80048dc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048e2:	461a      	mov	r2, r3
 80048e4:	2300      	movs	r3, #0
 80048e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d10d      	bne.n	800490c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d104      	bne.n	8004902 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048f8:	2100      	movs	r1, #0
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f968 	bl	8004bd0 <USB_SetDevSpeed>
 8004900:	e008      	b.n	8004914 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004902:	2101      	movs	r1, #1
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f963 	bl	8004bd0 <USB_SetDevSpeed>
 800490a:	e003      	b.n	8004914 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800490c:	2103      	movs	r1, #3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f95e 	bl	8004bd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004914:	2110      	movs	r1, #16
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f8fa 	bl	8004b10 <USB_FlushTxFifo>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f924 	bl	8004b74 <USB_FlushRxFifo>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493c:	461a      	mov	r2, r3
 800493e:	2300      	movs	r3, #0
 8004940:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004954:	461a      	mov	r2, r3
 8004956:	2300      	movs	r3, #0
 8004958:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	e043      	b.n	80049e8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004972:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004976:	d118      	bne.n	80049aa <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800498a:	461a      	mov	r2, r3
 800498c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e013      	b.n	80049bc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e008      	b.n	80049bc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b6:	461a      	mov	r2, r3
 80049b8:	2300      	movs	r3, #0
 80049ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049da:	461a      	mov	r2, r3
 80049dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3301      	adds	r3, #1
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049ec:	461a      	mov	r2, r3
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d3b5      	bcc.n	8004960 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	e043      	b.n	8004a82 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a10:	d118      	bne.n	8004a44 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a24:	461a      	mov	r2, r3
 8004a26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e013      	b.n	8004a56 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e008      	b.n	8004a56 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a50:	461a      	mov	r2, r3
 8004a52:	2300      	movs	r3, #0
 8004a54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a62:	461a      	mov	r2, r3
 8004a64:	2300      	movs	r3, #0
 8004a66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a74:	461a      	mov	r2, r3
 8004a76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a86:	461a      	mov	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d3b5      	bcc.n	80049fa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004aae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d105      	bne.n	8004ac4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f043 0210 	orr.w	r2, r3, #16
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8004b08 <USB_DevInit+0x2b4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ad0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f043 0208 	orr.w	r2, r3, #8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ae4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d105      	bne.n	8004af8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <USB_DevInit+0x2b8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b04:	b004      	add	sp, #16
 8004b06:	4770      	bx	lr
 8004b08:	803c3800 	.word	0x803c3800
 8004b0c:	40000004 	.word	0x40000004

08004b10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3301      	adds	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b2a:	d901      	bls.n	8004b30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e01b      	b.n	8004b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	daf2      	bge.n	8004b1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	019b      	lsls	r3, r3, #6
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b54:	d901      	bls.n	8004b5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e006      	b.n	8004b68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d0f0      	beq.n	8004b48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3301      	adds	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b8c:	d901      	bls.n	8004b92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e018      	b.n	8004bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	daf2      	bge.n	8004b80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bb0:	d901      	bls.n	8004bb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e006      	b.n	8004bc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d0f0      	beq.n	8004ba4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004c1c:	f023 0303 	bic.w	r3, r3, #3
 8004c20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f003 0301 	and.w	r3, r3, #1
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c78:	d901      	bls.n	8004c7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e022      	b.n	8004cc4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	daf2      	bge.n	8004c6c <USB_CoreReset+0xc>

  count = 10U;
 8004c86:	230a      	movs	r3, #10
 8004c88:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004c8a:	e002      	b.n	8004c92 <USB_CoreReset+0x32>
  {
    count--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f9      	bne.n	8004c8c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f043 0201 	orr.w	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cb0:	d901      	bls.n	8004cb6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e006      	b.n	8004cc4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d0f0      	beq.n	8004ca4 <USB_CoreReset+0x44>

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 0;
 8004cd6:	4b87      	ldr	r3, [pc, #540]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 8004cdc:	4b85      	ldr	r3, [pc, #532]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004ce2:	4b84      	ldr	r3, [pc, #528]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 0;
 8004ce8:	4b82      	ldr	r3, [pc, #520]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 0;
 8004cee:	4b82      	ldr	r3, [pc, #520]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 0;
 8004cf4:	4b80      	ldr	r3, [pc, #512]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8004cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004d00:	4b7d      	ldr	r3, [pc, #500]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8004d06:	4b7d      	ldr	r3, [pc, #500]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004d0c:	4b7b      	ldr	r3, [pc, #492]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004d12:	4b7a      	ldr	r3, [pc, #488]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004d18:	4b78      	ldr	r3, [pc, #480]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8004d1e:	f000 fc6a 	bl	80055f6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d22:	4b74      	ldr	r3, [pc, #464]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	061a      	lsls	r2, r3, #24
 8004d28:	4b72      	ldr	r3, [pc, #456]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d2a:	785b      	ldrb	r3, [r3, #1]
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	4b70      	ldr	r3, [pc, #448]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d32:	789b      	ldrb	r3, [r3, #2]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	4313      	orrs	r3, r2
 8004d38:	4a6e      	ldr	r2, [pc, #440]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d3a:	78d2      	ldrb	r2, [r2, #3]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	061a      	lsls	r2, r3, #24
 8004d40:	4b6c      	ldr	r3, [pc, #432]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	0619      	lsls	r1, r3, #24
 8004d46:	4b6b      	ldr	r3, [pc, #428]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	4319      	orrs	r1, r3
 8004d4e:	4b69      	ldr	r3, [pc, #420]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d50:	789b      	ldrb	r3, [r3, #2]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	430b      	orrs	r3, r1
 8004d56:	4967      	ldr	r1, [pc, #412]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d58:	78c9      	ldrb	r1, [r1, #3]
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004d62:	431a      	orrs	r2, r3
 8004d64:	4b63      	ldr	r3, [pc, #396]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	0619      	lsls	r1, r3, #24
 8004d6a:	4b62      	ldr	r3, [pc, #392]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d6c:	785b      	ldrb	r3, [r3, #1]
 8004d6e:	041b      	lsls	r3, r3, #16
 8004d70:	4319      	orrs	r1, r3
 8004d72:	4b60      	ldr	r3, [pc, #384]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d74:	789b      	ldrb	r3, [r3, #2]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	495e      	ldr	r1, [pc, #376]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d7c:	78c9      	ldrb	r1, [r1, #3]
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	0a1b      	lsrs	r3, r3, #8
 8004d82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004d86:	431a      	orrs	r2, r3
 8004d88:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	0619      	lsls	r1, r3, #24
 8004d8e:	4b59      	ldr	r3, [pc, #356]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d90:	785b      	ldrb	r3, [r3, #1]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	4319      	orrs	r1, r3
 8004d96:	4b57      	ldr	r3, [pc, #348]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004d98:	789b      	ldrb	r3, [r3, #2]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	4955      	ldr	r1, [pc, #340]	@ (8004ef4 <MX_LWIP_Init+0x224>)
 8004da0:	78c9      	ldrb	r1, [r1, #3]
 8004da2:	430b      	orrs	r3, r1
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	4313      	orrs	r3, r2
 8004da8:	4a55      	ldr	r2, [pc, #340]	@ (8004f00 <MX_LWIP_Init+0x230>)
 8004daa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004dac:	4b52      	ldr	r3, [pc, #328]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	061a      	lsls	r2, r3, #24
 8004db2:	4b51      	ldr	r3, [pc, #324]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	431a      	orrs	r2, r3
 8004dba:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004dbc:	789b      	ldrb	r3, [r3, #2]
 8004dbe:	021b      	lsls	r3, r3, #8
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	4a4d      	ldr	r2, [pc, #308]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004dc4:	78d2      	ldrb	r2, [r2, #3]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	061a      	lsls	r2, r3, #24
 8004dca:	4b4b      	ldr	r3, [pc, #300]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	0619      	lsls	r1, r3, #24
 8004dd0:	4b49      	ldr	r3, [pc, #292]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	4319      	orrs	r1, r3
 8004dd8:	4b47      	ldr	r3, [pc, #284]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004dda:	789b      	ldrb	r3, [r3, #2]
 8004ddc:	021b      	lsls	r3, r3, #8
 8004dde:	430b      	orrs	r3, r1
 8004de0:	4945      	ldr	r1, [pc, #276]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004de2:	78c9      	ldrb	r1, [r1, #3]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004dec:	431a      	orrs	r2, r3
 8004dee:	4b42      	ldr	r3, [pc, #264]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	0619      	lsls	r1, r3, #24
 8004df4:	4b40      	ldr	r3, [pc, #256]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	4319      	orrs	r1, r3
 8004dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004dfe:	789b      	ldrb	r3, [r3, #2]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	430b      	orrs	r3, r1
 8004e04:	493c      	ldr	r1, [pc, #240]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004e06:	78c9      	ldrb	r1, [r1, #3]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e10:	431a      	orrs	r2, r3
 8004e12:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	0619      	lsls	r1, r3, #24
 8004e18:	4b37      	ldr	r3, [pc, #220]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	4319      	orrs	r1, r3
 8004e20:	4b35      	ldr	r3, [pc, #212]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004e22:	789b      	ldrb	r3, [r3, #2]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	430b      	orrs	r3, r1
 8004e28:	4933      	ldr	r1, [pc, #204]	@ (8004ef8 <MX_LWIP_Init+0x228>)
 8004e2a:	78c9      	ldrb	r1, [r1, #3]
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	0e1b      	lsrs	r3, r3, #24
 8004e30:	4313      	orrs	r3, r2
 8004e32:	4a34      	ldr	r2, [pc, #208]	@ (8004f04 <MX_LWIP_Init+0x234>)
 8004e34:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e36:	4b31      	ldr	r3, [pc, #196]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	061a      	lsls	r2, r3, #24
 8004e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e3e:	785b      	ldrb	r3, [r3, #1]
 8004e40:	041b      	lsls	r3, r3, #16
 8004e42:	431a      	orrs	r2, r3
 8004e44:	4b2d      	ldr	r3, [pc, #180]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e46:	789b      	ldrb	r3, [r3, #2]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e4e:	78d2      	ldrb	r2, [r2, #3]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	061a      	lsls	r2, r3, #24
 8004e54:	4b29      	ldr	r3, [pc, #164]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	0619      	lsls	r1, r3, #24
 8004e5a:	4b28      	ldr	r3, [pc, #160]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	041b      	lsls	r3, r3, #16
 8004e60:	4319      	orrs	r1, r3
 8004e62:	4b26      	ldr	r3, [pc, #152]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e64:	789b      	ldrb	r3, [r3, #2]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	4924      	ldr	r1, [pc, #144]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e6c:	78c9      	ldrb	r1, [r1, #3]
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e76:	431a      	orrs	r2, r3
 8004e78:	4b20      	ldr	r3, [pc, #128]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	0619      	lsls	r1, r3, #24
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	4319      	orrs	r1, r3
 8004e86:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e88:	789b      	ldrb	r3, [r3, #2]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	491b      	ldr	r1, [pc, #108]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e90:	78c9      	ldrb	r1, [r1, #3]
 8004e92:	430b      	orrs	r3, r1
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	4b17      	ldr	r3, [pc, #92]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	0619      	lsls	r1, r3, #24
 8004ea2:	4b16      	ldr	r3, [pc, #88]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	041b      	lsls	r3, r3, #16
 8004ea8:	4319      	orrs	r1, r3
 8004eaa:	4b14      	ldr	r3, [pc, #80]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004eac:	789b      	ldrb	r3, [r3, #2]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	4912      	ldr	r1, [pc, #72]	@ (8004efc <MX_LWIP_Init+0x22c>)
 8004eb4:	78c9      	ldrb	r1, [r1, #3]
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	0e1b      	lsrs	r3, r3, #24
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	4a12      	ldr	r2, [pc, #72]	@ (8004f08 <MX_LWIP_Init+0x238>)
 8004ebe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004ec0:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <MX_LWIP_Init+0x23c>)
 8004ec2:	9302      	str	r3, [sp, #8]
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <MX_LWIP_Init+0x240>)
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <MX_LWIP_Init+0x238>)
 8004ece:	4a0d      	ldr	r2, [pc, #52]	@ (8004f04 <MX_LWIP_Init+0x234>)
 8004ed0:	490b      	ldr	r1, [pc, #44]	@ (8004f00 <MX_LWIP_Init+0x230>)
 8004ed2:	4810      	ldr	r0, [pc, #64]	@ (8004f14 <MX_LWIP_Init+0x244>)
 8004ed4:	f001 f876 	bl	8005fc4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ed8:	480e      	ldr	r0, [pc, #56]	@ (8004f14 <MX_LWIP_Init+0x244>)
 8004eda:	f001 fa25 	bl	8006328 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004ede:	480d      	ldr	r0, [pc, #52]	@ (8004f14 <MX_LWIP_Init+0x244>)
 8004ee0:	f001 fa32 	bl	8006348 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004ee4:	490c      	ldr	r1, [pc, #48]	@ (8004f18 <MX_LWIP_Init+0x248>)
 8004ee6:	480b      	ldr	r0, [pc, #44]	@ (8004f14 <MX_LWIP_Init+0x244>)
 8004ee8:	f001 fb30 	bl	800654c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20000794 	.word	0x20000794
 8004ef8:	20000798 	.word	0x20000798
 8004efc:	2000079c 	.word	0x2000079c
 8004f00:	20000788 	.word	0x20000788
 8004f04:	2000078c 	.word	0x2000078c
 8004f08:	20000790 	.word	0x20000790
 8004f0c:	0800ed3d 	.word	0x0800ed3d
 8004f10:	08005175 	.word	0x08005175
 8004f14:	20000754 	.word	0x20000754
 8004f18:	08004f1d 	.word	0x08004f1d

08004f1c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004f3c:	4b44      	ldr	r3, [pc, #272]	@ (8005050 <low_level_init+0x120>)
 8004f3e:	4a45      	ldr	r2, [pc, #276]	@ (8005054 <low_level_init+0x124>)
 8004f40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004f42:	2300      	movs	r3, #0
 8004f44:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004f46:	2380      	movs	r3, #128	@ 0x80
 8004f48:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004f4a:	23e1      	movs	r3, #225	@ 0xe1
 8004f4c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004f52:	2300      	movs	r3, #0
 8004f54:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004f56:	2300      	movs	r3, #0
 8004f58:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004f5a:	4a3d      	ldr	r2, [pc, #244]	@ (8005050 <low_level_init+0x120>)
 8004f5c:	f107 0308 	add.w	r3, r7, #8
 8004f60:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004f62:	4b3b      	ldr	r3, [pc, #236]	@ (8005050 <low_level_init+0x120>)
 8004f64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f68:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004f6a:	4b39      	ldr	r3, [pc, #228]	@ (8005050 <low_level_init+0x120>)
 8004f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8005058 <low_level_init+0x128>)
 8004f6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004f70:	4b37      	ldr	r3, [pc, #220]	@ (8005050 <low_level_init+0x120>)
 8004f72:	4a3a      	ldr	r2, [pc, #232]	@ (800505c <low_level_init+0x12c>)
 8004f74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004f76:	4b36      	ldr	r3, [pc, #216]	@ (8005050 <low_level_init+0x120>)
 8004f78:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004f7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004f7e:	4834      	ldr	r0, [pc, #208]	@ (8005050 <low_level_init+0x120>)
 8004f80:	f7fc fa14 	bl	80013ac <HAL_ETH_Init>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004f88:	2238      	movs	r2, #56	@ 0x38
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4834      	ldr	r0, [pc, #208]	@ (8005060 <low_level_init+0x130>)
 8004f8e:	f00a f910 	bl	800f1b2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004f92:	4b33      	ldr	r3, [pc, #204]	@ (8005060 <low_level_init+0x130>)
 8004f94:	2221      	movs	r2, #33	@ 0x21
 8004f96:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004f98:	4b31      	ldr	r3, [pc, #196]	@ (8005060 <low_level_init+0x130>)
 8004f9a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004f9e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8005060 <low_level_init+0x130>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004fa6:	482f      	ldr	r0, [pc, #188]	@ (8005064 <low_level_init+0x134>)
 8004fa8:	f000 fed4 	bl	8005d54 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2206      	movs	r2, #6
 8004fb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004fb4:	4b26      	ldr	r3, [pc, #152]	@ (8005050 <low_level_init+0x120>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	781a      	ldrb	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004fc0:	4b23      	ldr	r3, [pc, #140]	@ (8005050 <low_level_init+0x120>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	785a      	ldrb	r2, [r3, #1]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004fcc:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <low_level_init+0x120>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	789a      	ldrb	r2, [r3, #2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8005050 <low_level_init+0x120>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	78da      	ldrb	r2, [r3, #3]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <low_level_init+0x120>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	791a      	ldrb	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004ff0:	4b17      	ldr	r3, [pc, #92]	@ (8005050 <low_level_init+0x120>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	795a      	ldrb	r2, [r3, #5]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005002:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800500a:	f043 030a 	orr.w	r3, r3, #10
 800500e:	b2da      	uxtb	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005016:	4914      	ldr	r1, [pc, #80]	@ (8005068 <low_level_init+0x138>)
 8005018:	4814      	ldr	r0, [pc, #80]	@ (800506c <low_level_init+0x13c>)
 800501a:	f7fb fee2 	bl	8000de2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800501e:	4813      	ldr	r0, [pc, #76]	@ (800506c <low_level_init+0x13c>)
 8005020:	f7fb ff11 	bl	8000e46 <LAN8742_Init>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d006      	beq.n	8005038 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 fa5e 	bl	80064ec <netif_set_link_down>
    netif_set_down(netif);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 f9f5 	bl	8006420 <netif_set_down>
 8005036:	e008      	b.n	800504a <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9ee 	bl	8005420 <ethernet_link_check_state>
 8005044:	e001      	b.n	800504a <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8005046:	f7fb fc93 	bl	8000970 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	2000512c 	.word	0x2000512c
 8005054:	40028000 	.word	0x40028000
 8005058:	20000128 	.word	0x20000128
 800505c:	20000088 	.word	0x20000088
 8005060:	200051dc 	.word	0x200051dc
 8005064:	08012908 	.word	0x08012908
 8005068:	2000000c 	.word	0x2000000c
 800506c:	20005214 	.word	0x20005214

08005070 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b092      	sub	sp, #72	@ 0x48
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005088:	f107 030c 	add.w	r3, r7, #12
 800508c:	2230      	movs	r2, #48	@ 0x30
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f00a f88e 	bl	800f1b2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005096:	f107 030c 	add.w	r3, r7, #12
 800509a:	2230      	movs	r2, #48	@ 0x30
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f00a f887 	bl	800f1b2 <memset>

  for(q = p; q != NULL; q = q->next)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050a8:	e045      	b.n	8005136 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80050aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d902      	bls.n	80050b6 <low_level_output+0x46>
      return ERR_IF;
 80050b0:	f06f 030b 	mvn.w	r3, #11
 80050b4:	e055      	b.n	8005162 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80050b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050bc:	4613      	mov	r3, r2
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	4413      	add	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	3348      	adds	r3, #72	@ 0x48
 80050c6:	443b      	add	r3, r7
 80050c8:	3b3c      	subs	r3, #60	@ 0x3c
 80050ca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80050cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ce:	895b      	ldrh	r3, [r3, #10]
 80050d0:	4619      	mov	r1, r3
 80050d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050d4:	4613      	mov	r3, r2
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	3348      	adds	r3, #72	@ 0x48
 80050de:	443b      	add	r3, r7
 80050e0:	3b38      	subs	r3, #56	@ 0x38
 80050e2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80050e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d011      	beq.n	800510e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80050ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ec:	1e5a      	subs	r2, r3, #1
 80050ee:	f107 000c 	add.w	r0, r7, #12
 80050f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050f4:	460b      	mov	r3, r1
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	440b      	add	r3, r1
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	18c1      	adds	r1, r0, r3
 80050fe:	4613      	mov	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	3348      	adds	r3, #72	@ 0x48
 8005108:	443b      	add	r3, r7
 800510a:	3b34      	subs	r3, #52	@ 0x34
 800510c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800510e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	3348      	adds	r3, #72	@ 0x48
 8005122:	443b      	add	r3, r7
 8005124:	3b34      	subs	r3, #52	@ 0x34
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
    }

    i++;
 800512a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800512c:	3301      	adds	r3, #1
 800512e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	643b      	str	r3, [r7, #64]	@ 0x40
 8005136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1b6      	bne.n	80050aa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	891b      	ldrh	r3, [r3, #8]
 8005140:	461a      	mov	r2, r3
 8005142:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <low_level_output+0xfc>)
 8005144:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005146:	4a09      	ldr	r2, [pc, #36]	@ (800516c <low_level_output+0xfc>)
 8005148:	f107 030c 	add.w	r3, r7, #12
 800514c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800514e:	4a07      	ldr	r2, [pc, #28]	@ (800516c <low_level_output+0xfc>)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005154:	2214      	movs	r2, #20
 8005156:	4905      	ldr	r1, [pc, #20]	@ (800516c <low_level_output+0xfc>)
 8005158:	4805      	ldr	r0, [pc, #20]	@ (8005170 <low_level_output+0x100>)
 800515a:	f7fc fa79 	bl	8001650 <HAL_ETH_Transmit>

  return errval;
 800515e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005162:	4618      	mov	r0, r3
 8005164:	3748      	adds	r7, #72	@ 0x48
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200051dc 	.word	0x200051dc
 8005170:	2000512c 	.word	0x2000512c

08005174 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <ethernetif_init+0x1c>
 8005182:	4b0e      	ldr	r3, [pc, #56]	@ (80051bc <ethernetif_init+0x48>)
 8005184:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005188:	490d      	ldr	r1, [pc, #52]	@ (80051c0 <ethernetif_init+0x4c>)
 800518a:	480e      	ldr	r0, [pc, #56]	@ (80051c4 <ethernetif_init+0x50>)
 800518c:	f009 ffac 	bl	800f0e8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2273      	movs	r2, #115	@ 0x73
 8005194:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2274      	movs	r2, #116	@ 0x74
 800519c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a09      	ldr	r2, [pc, #36]	@ (80051c8 <ethernetif_init+0x54>)
 80051a4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a08      	ldr	r2, [pc, #32]	@ (80051cc <ethernetif_init+0x58>)
 80051aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff febf 	bl	8004f30 <low_level_init>

  return ERR_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	0800ff10 	.word	0x0800ff10
 80051c0:	0800ff2c 	.word	0x0800ff2c
 80051c4:	0800ff3c 	.word	0x0800ff3c
 80051c8:	0800d1f5 	.word	0x0800d1f5
 80051cc:	08005071 	.word	0x08005071

080051d0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	4807      	ldr	r0, [pc, #28]	@ (80051fc <pbuf_free_custom+0x2c>)
 80051e0:	f000 fe9a 	bl	8005f18 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80051e4:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <pbuf_free_custom+0x30>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d102      	bne.n	80051f2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80051ec:	4b04      	ldr	r3, [pc, #16]	@ (8005200 <pbuf_free_custom+0x30>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
  }
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	08012908 	.word	0x08012908
 8005200:	20005128 	.word	0x20005128

08005204 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005208:	f7fb ff42 	bl	8001090 <HAL_GetTick>
 800520c:	4603      	mov	r3, r0
}
 800520e:	4618      	mov	r0, r3
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08e      	sub	sp, #56	@ 0x38
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a4e      	ldr	r2, [pc, #312]	@ (800536c <HAL_ETH_MspInit+0x158>)
 8005232:	4293      	cmp	r3, r2
 8005234:	f040 8096 	bne.w	8005364 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005238:	4b4d      	ldr	r3, [pc, #308]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	4a4c      	ldr	r2, [pc, #304]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 800523e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005242:	6313      	str	r3, [r2, #48]	@ 0x30
 8005244:	4b4a      	ldr	r3, [pc, #296]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 8005246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	4b47      	ldr	r3, [pc, #284]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	4a46      	ldr	r2, [pc, #280]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 8005256:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800525a:	6313      	str	r3, [r2, #48]	@ 0x30
 800525c:	4b44      	ldr	r3, [pc, #272]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4b41      	ldr	r3, [pc, #260]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	4a40      	ldr	r2, [pc, #256]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 800526e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005272:	6313      	str	r3, [r2, #48]	@ 0x30
 8005274:	4b3e      	ldr	r3, [pc, #248]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 8005276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005280:	4b3b      	ldr	r3, [pc, #236]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 8005282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005284:	4a3a      	ldr	r2, [pc, #232]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 8005286:	f043 0304 	orr.w	r3, r3, #4
 800528a:	6313      	str	r3, [r2, #48]	@ 0x30
 800528c:	4b38      	ldr	r3, [pc, #224]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 800528e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005298:	4b35      	ldr	r3, [pc, #212]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 800529a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529c:	4a34      	ldr	r2, [pc, #208]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80052a4:	4b32      	ldr	r3, [pc, #200]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80052bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80052c8:	4b29      	ldr	r3, [pc, #164]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	4a28      	ldr	r2, [pc, #160]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 80052ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80052d4:	4b26      	ldr	r3, [pc, #152]	@ (8005370 <HAL_ETH_MspInit+0x15c>)
 80052d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80052e0:	2332      	movs	r3, #50	@ 0x32
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e4:	2302      	movs	r3, #2
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ec:	2303      	movs	r3, #3
 80052ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052f0:	230b      	movs	r3, #11
 80052f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052f8:	4619      	mov	r1, r3
 80052fa:	481e      	ldr	r0, [pc, #120]	@ (8005374 <HAL_ETH_MspInit+0x160>)
 80052fc:	f7fd f8c8 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005300:	2386      	movs	r3, #134	@ 0x86
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005304:	2302      	movs	r3, #2
 8005306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800530c:	2303      	movs	r3, #3
 800530e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005310:	230b      	movs	r3, #11
 8005312:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005318:	4619      	mov	r1, r3
 800531a:	4817      	ldr	r0, [pc, #92]	@ (8005378 <HAL_ETH_MspInit+0x164>)
 800531c:	f7fd f8b8 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8005320:	f242 0301 	movw	r3, #8193	@ 0x2001
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005326:	2302      	movs	r3, #2
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532a:	2300      	movs	r3, #0
 800532c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800532e:	2303      	movs	r3, #3
 8005330:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005332:	230b      	movs	r3, #11
 8005334:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800533a:	4619      	mov	r1, r3
 800533c:	480f      	ldr	r0, [pc, #60]	@ (800537c <HAL_ETH_MspInit+0x168>)
 800533e:	f7fd f8a7 	bl	8002490 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005342:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005346:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005348:	2302      	movs	r3, #2
 800534a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534c:	2300      	movs	r3, #0
 800534e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005350:	2303      	movs	r3, #3
 8005352:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005354:	230b      	movs	r3, #11
 8005356:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800535c:	4619      	mov	r1, r3
 800535e:	4808      	ldr	r0, [pc, #32]	@ (8005380 <HAL_ETH_MspInit+0x16c>)
 8005360:	f7fd f896 	bl	8002490 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005364:	bf00      	nop
 8005366:	3738      	adds	r7, #56	@ 0x38
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40028000 	.word	0x40028000
 8005370:	40023800 	.word	0x40023800
 8005374:	40020800 	.word	0x40020800
 8005378:	40020000 	.word	0x40020000
 800537c:	40020400 	.word	0x40020400
 8005380:	40021800 	.word	0x40021800

08005384 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005388:	4802      	ldr	r0, [pc, #8]	@ (8005394 <ETH_PHY_IO_Init+0x10>)
 800538a:	f7fc fc1f 	bl	8001bcc <HAL_ETH_SetMDIOClockRange>

  return 0;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	2000512c 	.word	0x2000512c

08005398 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return 0;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	68f9      	ldr	r1, [r7, #12]
 80053ba:	4807      	ldr	r0, [pc, #28]	@ (80053d8 <ETH_PHY_IO_ReadReg+0x30>)
 80053bc:	f7fc fa60 	bl	8001880 <HAL_ETH_ReadPHYRegister>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053ca:	e000      	b.n	80053ce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2000512c 	.word	0x2000512c

080053dc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	68f9      	ldr	r1, [r7, #12]
 80053ee:	4807      	ldr	r0, [pc, #28]	@ (800540c <ETH_PHY_IO_WriteReg+0x30>)
 80053f0:	f7fc fa91 	bl	8001916 <HAL_ETH_WritePHYRegister>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053fe:	e000      	b.n	8005402 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	2000512c 	.word	0x2000512c

08005410 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005414:	f7fb fe3c 	bl	8001090 <HAL_GetTick>
 8005418:	4603      	mov	r3, r0
}
 800541a:	4618      	mov	r0, r3
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b0a0      	sub	sp, #128	@ 0x80
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005428:	f107 030c 	add.w	r3, r7, #12
 800542c:	2264      	movs	r2, #100	@ 0x64
 800542e:	2100      	movs	r1, #0
 8005430:	4618      	mov	r0, r3
 8005432:	f009 febe 	bl	800f1b2 <memset>
  int32_t PHYLinkState = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800543e:	2300      	movs	r3, #0
 8005440:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005442:	2300      	movs	r3, #0
 8005444:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005446:	483a      	ldr	r0, [pc, #232]	@ (8005530 <ethernet_link_check_state+0x110>)
 8005448:	f7fb fd4a 	bl	8000ee0 <LAN8742_GetLinkState>
 800544c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005454:	089b      	lsrs	r3, r3, #2
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <ethernet_link_check_state+0x5a>
 8005460:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005462:	2b01      	cmp	r3, #1
 8005464:	dc09      	bgt.n	800547a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005466:	4833      	ldr	r0, [pc, #204]	@ (8005534 <ethernet_link_check_state+0x114>)
 8005468:	f7fc f899 	bl	800159e <HAL_ETH_Stop>
    netif_set_down(netif);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 ffd7 	bl	8006420 <netif_set_down>
    netif_set_link_down(netif);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 f83a 	bl	80064ec <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005478:	e055      	b.n	8005526 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d14e      	bne.n	8005526 <ethernet_link_check_state+0x106>
 8005488:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800548a:	2b01      	cmp	r3, #1
 800548c:	dd4b      	ble.n	8005526 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800548e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005490:	3b02      	subs	r3, #2
 8005492:	2b03      	cmp	r3, #3
 8005494:	d82a      	bhi.n	80054ec <ethernet_link_check_state+0xcc>
 8005496:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <ethernet_link_check_state+0x7c>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054bf 	.word	0x080054bf
 80054a4:	080054cf 	.word	0x080054cf
 80054a8:	080054df 	.word	0x080054df
      duplex = ETH_FULLDUPLEX_MODE;
 80054ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80054b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80054b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80054b8:	2301      	movs	r3, #1
 80054ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80054bc:	e017      	b.n	80054ee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80054be:	2300      	movs	r3, #0
 80054c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80054c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80054c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80054c8:	2301      	movs	r3, #1
 80054ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80054cc:	e00f      	b.n	80054ee <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80054ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80054d2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80054d4:	2300      	movs	r3, #0
 80054d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80054d8:	2301      	movs	r3, #1
 80054da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80054dc:	e007      	b.n	80054ee <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80054de:	2300      	movs	r3, #0
 80054e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80054e2:	2300      	movs	r3, #0
 80054e4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80054ea:	e000      	b.n	80054ee <ethernet_link_check_state+0xce>
      break;
 80054ec:	bf00      	nop
    if(linkchanged)
 80054ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d018      	beq.n	8005526 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80054f4:	f107 030c 	add.w	r3, r7, #12
 80054f8:	4619      	mov	r1, r3
 80054fa:	480e      	ldr	r0, [pc, #56]	@ (8005534 <ethernet_link_check_state+0x114>)
 80054fc:	f7fc fa54 	bl	80019a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005502:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005506:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	4619      	mov	r1, r3
 800550e:	4809      	ldr	r0, [pc, #36]	@ (8005534 <ethernet_link_check_state+0x114>)
 8005510:	f7fc fb41 	bl	8001b96 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005514:	4807      	ldr	r0, [pc, #28]	@ (8005534 <ethernet_link_check_state+0x114>)
 8005516:	f7fb ffe3 	bl	80014e0 <HAL_ETH_Start>
      netif_set_up(netif);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 ff14 	bl	8006348 <netif_set_up>
      netif_set_link_up(netif);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 ffaf 	bl	8006484 <netif_set_link_up>
}
 8005526:	bf00      	nop
 8005528:	3780      	adds	r7, #128	@ 0x80
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20005214 	.word	0x20005214
 8005534:	2000512c 	.word	0x2000512c

08005538 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005540:	4812      	ldr	r0, [pc, #72]	@ (800558c <HAL_ETH_RxAllocateCallback+0x54>)
 8005542:	f000 fc7b 	bl	8005e3c <memp_malloc_pool>
 8005546:	60f8      	str	r0, [r7, #12]
  if (p)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d014      	beq.n	8005578 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f103 0220 	add.w	r2, r3, #32
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a0d      	ldr	r2, [pc, #52]	@ (8005590 <HAL_ETH_RxAllocateCallback+0x58>)
 800555c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005566:	9201      	str	r2, [sp, #4]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2241      	movs	r2, #65	@ 0x41
 800556e:	2100      	movs	r1, #0
 8005570:	2000      	movs	r0, #0
 8005572:	f001 f991 	bl	8006898 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005576:	e005      	b.n	8005584 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005578:	4b06      	ldr	r3, [pc, #24]	@ (8005594 <HAL_ETH_RxAllocateCallback+0x5c>)
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	08012908 	.word	0x08012908
 8005590:	080051d1 	.word	0x080051d1
 8005594:	20005128 	.word	0x20005128

08005598 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80055a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	b21a      	sxth	r2, r3
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	b21b      	sxth	r3, r3
 80055b6:	b29b      	uxth	r3, r3
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	061a      	lsls	r2, r3, #24
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	0e1b      	lsrs	r3, r3, #24
 80055e8:	4313      	orrs	r3, r2
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b082      	sub	sp, #8
 80055fa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005600:	f000 f8d4 	bl	80057ac <mem_init>
  memp_init();
 8005604:	f000 fbd6 	bl	8005db4 <memp_init>
  pbuf_init();
  netif_init();
 8005608:	f000 fcd4 	bl	8005fb4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800560c:	f006 ffec 	bl	800c5e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005610:	f001 fd8a 	bl	8007128 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005614:	f006 ffa0 	bl	800c558 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800562a:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <ptr_to_mem+0x20>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	4413      	add	r3, r2
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2000524c 	.word	0x2000524c

08005644 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <mem_to_ptr+0x20>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	b29b      	uxth	r3, r3
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	2000524c 	.word	0x2000524c

08005668 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005670:	4b45      	ldr	r3, [pc, #276]	@ (8005788 <plug_holes+0x120>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	429a      	cmp	r2, r3
 8005678:	d206      	bcs.n	8005688 <plug_holes+0x20>
 800567a:	4b44      	ldr	r3, [pc, #272]	@ (800578c <plug_holes+0x124>)
 800567c:	f240 12df 	movw	r2, #479	@ 0x1df
 8005680:	4943      	ldr	r1, [pc, #268]	@ (8005790 <plug_holes+0x128>)
 8005682:	4844      	ldr	r0, [pc, #272]	@ (8005794 <plug_holes+0x12c>)
 8005684:	f009 fd30 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005688:	4b43      	ldr	r3, [pc, #268]	@ (8005798 <plug_holes+0x130>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d306      	bcc.n	80056a0 <plug_holes+0x38>
 8005692:	4b3e      	ldr	r3, [pc, #248]	@ (800578c <plug_holes+0x124>)
 8005694:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005698:	4940      	ldr	r1, [pc, #256]	@ (800579c <plug_holes+0x134>)
 800569a:	483e      	ldr	r0, [pc, #248]	@ (8005794 <plug_holes+0x12c>)
 800569c:	f009 fd24 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	791b      	ldrb	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d006      	beq.n	80056b6 <plug_holes+0x4e>
 80056a8:	4b38      	ldr	r3, [pc, #224]	@ (800578c <plug_holes+0x124>)
 80056aa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80056ae:	493c      	ldr	r1, [pc, #240]	@ (80057a0 <plug_holes+0x138>)
 80056b0:	4838      	ldr	r0, [pc, #224]	@ (8005794 <plug_holes+0x12c>)
 80056b2:	f009 fd19 	bl	800f0e8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 80056be:	d906      	bls.n	80056ce <plug_holes+0x66>
 80056c0:	4b32      	ldr	r3, [pc, #200]	@ (800578c <plug_holes+0x124>)
 80056c2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80056c6:	4937      	ldr	r1, [pc, #220]	@ (80057a4 <plug_holes+0x13c>)
 80056c8:	4832      	ldr	r0, [pc, #200]	@ (8005794 <plug_holes+0x12c>)
 80056ca:	f009 fd0d 	bl	800f0e8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ffa4 	bl	8005620 <ptr_to_mem>
 80056d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d024      	beq.n	800572c <plug_holes+0xc4>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	791b      	ldrb	r3, [r3, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d120      	bne.n	800572c <plug_holes+0xc4>
 80056ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005798 <plug_holes+0x130>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d01b      	beq.n	800572c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80056f4:	4b2c      	ldr	r3, [pc, #176]	@ (80057a8 <plug_holes+0x140>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d102      	bne.n	8005704 <plug_holes+0x9c>
      lfree = mem;
 80056fe:	4a2a      	ldr	r2, [pc, #168]	@ (80057a8 <plug_holes+0x140>)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	881a      	ldrh	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005714:	d00a      	beq.n	800572c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ff80 	bl	8005620 <ptr_to_mem>
 8005720:	4604      	mov	r4, r0
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ff8e 	bl	8005644 <mem_to_ptr>
 8005728:	4603      	mov	r3, r0
 800572a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	885b      	ldrh	r3, [r3, #2]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff ff75 	bl	8005620 <ptr_to_mem>
 8005736:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d01f      	beq.n	8005780 <plug_holes+0x118>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	791b      	ldrb	r3, [r3, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11b      	bne.n	8005780 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005748:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <plug_holes+0x140>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d102      	bne.n	8005758 <plug_holes+0xf0>
      lfree = pmem;
 8005752:	4a15      	ldr	r2, [pc, #84]	@ (80057a8 <plug_holes+0x140>)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	881a      	ldrh	r2, [r3, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005768:	d00a      	beq.n	8005780 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff ff56 	bl	8005620 <ptr_to_mem>
 8005774:	4604      	mov	r4, r0
 8005776:	68b8      	ldr	r0, [r7, #8]
 8005778:	f7ff ff64 	bl	8005644 <mem_to_ptr>
 800577c:	4603      	mov	r3, r0
 800577e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	bd90      	pop	{r4, r7, pc}
 8005788:	2000524c 	.word	0x2000524c
 800578c:	0800ff64 	.word	0x0800ff64
 8005790:	0800ff94 	.word	0x0800ff94
 8005794:	0800ffac 	.word	0x0800ffac
 8005798:	20005250 	.word	0x20005250
 800579c:	0800ffd4 	.word	0x0800ffd4
 80057a0:	0800fff0 	.word	0x0800fff0
 80057a4:	0801000c 	.word	0x0801000c
 80057a8:	20005254 	.word	0x20005254

080057ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80057b2:	4b16      	ldr	r3, [pc, #88]	@ (800580c <mem_init+0x60>)
 80057b4:	4a16      	ldr	r2, [pc, #88]	@ (8005810 <mem_init+0x64>)
 80057b6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80057b8:	4b14      	ldr	r3, [pc, #80]	@ (800580c <mem_init+0x60>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 80057c4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80057d2:	f44f 5010 	mov.w	r0, #9216	@ 0x2400
 80057d6:	f7ff ff23 	bl	8005620 <ptr_to_mem>
 80057da:	4603      	mov	r3, r0
 80057dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005814 <mem_init+0x68>)
 80057de:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80057e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <mem_init+0x68>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2201      	movs	r2, #1
 80057e6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005814 <mem_init+0x68>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 80057f0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80057f2:	4b08      	ldr	r3, [pc, #32]	@ (8005814 <mem_init+0x68>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 80057fa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80057fc:	4b03      	ldr	r3, [pc, #12]	@ (800580c <mem_init+0x60>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a05      	ldr	r2, [pc, #20]	@ (8005818 <mem_init+0x6c>)
 8005802:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	2000524c 	.word	0x2000524c
 8005810:	2007d900 	.word	0x2007d900
 8005814:	20005250 	.word	0x20005250
 8005818:	20005254 	.word	0x20005254

0800581c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ff0d 	bl	8005644 <mem_to_ptr>
 800582a:	4603      	mov	r3, r0
 800582c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fef4 	bl	8005620 <ptr_to_mem>
 8005838:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	885b      	ldrh	r3, [r3, #2]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff feee 	bl	8005620 <ptr_to_mem>
 8005844:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800584e:	d818      	bhi.n	8005882 <mem_link_valid+0x66>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	885b      	ldrh	r3, [r3, #2]
 8005854:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005858:	d813      	bhi.n	8005882 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800585e:	8afa      	ldrh	r2, [r7, #22]
 8005860:	429a      	cmp	r2, r3
 8005862:	d004      	beq.n	800586e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	8afa      	ldrh	r2, [r7, #22]
 800586a:	429a      	cmp	r2, r3
 800586c:	d109      	bne.n	8005882 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800586e:	4b08      	ldr	r3, [pc, #32]	@ (8005890 <mem_link_valid+0x74>)
 8005870:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	429a      	cmp	r2, r3
 8005876:	d006      	beq.n	8005886 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	885b      	ldrh	r3, [r3, #2]
 800587c:	8afa      	ldrh	r2, [r7, #22]
 800587e:	429a      	cmp	r2, r3
 8005880:	d001      	beq.n	8005886 <mem_link_valid+0x6a>
    return 0;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <mem_link_valid+0x6c>
  }
  return 1;
 8005886:	2301      	movs	r3, #1
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20005250 	.word	0x20005250

08005894 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d04c      	beq.n	800593c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80058ac:	4b25      	ldr	r3, [pc, #148]	@ (8005944 <mem_free+0xb0>)
 80058ae:	f240 2273 	movw	r2, #627	@ 0x273
 80058b2:	4925      	ldr	r1, [pc, #148]	@ (8005948 <mem_free+0xb4>)
 80058b4:	4825      	ldr	r0, [pc, #148]	@ (800594c <mem_free+0xb8>)
 80058b6:	f009 fc17 	bl	800f0e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80058ba:	e040      	b.n	800593e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3b08      	subs	r3, #8
 80058c0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80058c2:	4b23      	ldr	r3, [pc, #140]	@ (8005950 <mem_free+0xbc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d306      	bcc.n	80058da <mem_free+0x46>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f103 020c 	add.w	r2, r3, #12
 80058d2:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <mem_free+0xc0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d907      	bls.n	80058ea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80058da:	4b1a      	ldr	r3, [pc, #104]	@ (8005944 <mem_free+0xb0>)
 80058dc:	f240 227f 	movw	r2, #639	@ 0x27f
 80058e0:	491d      	ldr	r1, [pc, #116]	@ (8005958 <mem_free+0xc4>)
 80058e2:	481a      	ldr	r0, [pc, #104]	@ (800594c <mem_free+0xb8>)
 80058e4:	f009 fc00 	bl	800f0e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80058e8:	e029      	b.n	800593e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	791b      	ldrb	r3, [r3, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80058f2:	4b14      	ldr	r3, [pc, #80]	@ (8005944 <mem_free+0xb0>)
 80058f4:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80058f8:	4918      	ldr	r1, [pc, #96]	@ (800595c <mem_free+0xc8>)
 80058fa:	4814      	ldr	r0, [pc, #80]	@ (800594c <mem_free+0xb8>)
 80058fc:	f009 fbf4 	bl	800f0e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005900:	e01d      	b.n	800593e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff ff8a 	bl	800581c <mem_link_valid>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d107      	bne.n	800591e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800590e:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <mem_free+0xb0>)
 8005910:	f240 2295 	movw	r2, #661	@ 0x295
 8005914:	4912      	ldr	r1, [pc, #72]	@ (8005960 <mem_free+0xcc>)
 8005916:	480d      	ldr	r0, [pc, #52]	@ (800594c <mem_free+0xb8>)
 8005918:	f009 fbe6 	bl	800f0e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800591c:	e00f      	b.n	800593e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <mem_free+0xd0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	429a      	cmp	r2, r3
 800592c:	d202      	bcs.n	8005934 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800592e:	4a0d      	ldr	r2, [pc, #52]	@ (8005964 <mem_free+0xd0>)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f7ff fe97 	bl	8005668 <plug_holes>
 800593a:	e000      	b.n	800593e <mem_free+0xaa>
    return;
 800593c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	0800ff64 	.word	0x0800ff64
 8005948:	08010038 	.word	0x08010038
 800594c:	0800ffac 	.word	0x0800ffac
 8005950:	2000524c 	.word	0x2000524c
 8005954:	20005250 	.word	0x20005250
 8005958:	0801005c 	.word	0x0801005c
 800595c:	08010078 	.word	0x08010078
 8005960:	080100a0 	.word	0x080100a0
 8005964:	20005254 	.word	0x20005254

08005968 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005974:	887b      	ldrh	r3, [r7, #2]
 8005976:	3303      	adds	r3, #3
 8005978:	b29b      	uxth	r3, r3
 800597a:	f023 0303 	bic.w	r3, r3, #3
 800597e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005980:	8bfb      	ldrh	r3, [r7, #30]
 8005982:	2b0b      	cmp	r3, #11
 8005984:	d801      	bhi.n	800598a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005986:	230c      	movs	r3, #12
 8005988:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800598a:	8bfb      	ldrh	r3, [r7, #30]
 800598c:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005990:	d803      	bhi.n	800599a <mem_trim+0x32>
 8005992:	8bfa      	ldrh	r2, [r7, #30]
 8005994:	887b      	ldrh	r3, [r7, #2]
 8005996:	429a      	cmp	r2, r3
 8005998:	d201      	bcs.n	800599e <mem_trim+0x36>
    return NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	e0cc      	b.n	8005b38 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800599e:	4b68      	ldr	r3, [pc, #416]	@ (8005b40 <mem_trim+0x1d8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d304      	bcc.n	80059b2 <mem_trim+0x4a>
 80059a8:	4b66      	ldr	r3, [pc, #408]	@ (8005b44 <mem_trim+0x1dc>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d306      	bcc.n	80059c0 <mem_trim+0x58>
 80059b2:	4b65      	ldr	r3, [pc, #404]	@ (8005b48 <mem_trim+0x1e0>)
 80059b4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80059b8:	4964      	ldr	r1, [pc, #400]	@ (8005b4c <mem_trim+0x1e4>)
 80059ba:	4865      	ldr	r0, [pc, #404]	@ (8005b50 <mem_trim+0x1e8>)
 80059bc:	f009 fb94 	bl	800f0e8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80059c0:	4b5f      	ldr	r3, [pc, #380]	@ (8005b40 <mem_trim+0x1d8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d304      	bcc.n	80059d4 <mem_trim+0x6c>
 80059ca:	4b5e      	ldr	r3, [pc, #376]	@ (8005b44 <mem_trim+0x1dc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d301      	bcc.n	80059d8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	e0af      	b.n	8005b38 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3b08      	subs	r3, #8
 80059dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80059de:	69b8      	ldr	r0, [r7, #24]
 80059e0:	f7ff fe30 	bl	8005644 <mem_to_ptr>
 80059e4:	4603      	mov	r3, r0
 80059e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	881a      	ldrh	r2, [r3, #0]
 80059ec:	8afb      	ldrh	r3, [r7, #22]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b08      	subs	r3, #8
 80059f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80059f6:	8bfa      	ldrh	r2, [r7, #30]
 80059f8:	8abb      	ldrh	r3, [r7, #20]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d906      	bls.n	8005a0c <mem_trim+0xa4>
 80059fe:	4b52      	ldr	r3, [pc, #328]	@ (8005b48 <mem_trim+0x1e0>)
 8005a00:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8005a04:	4953      	ldr	r1, [pc, #332]	@ (8005b54 <mem_trim+0x1ec>)
 8005a06:	4852      	ldr	r0, [pc, #328]	@ (8005b50 <mem_trim+0x1e8>)
 8005a08:	f009 fb6e 	bl	800f0e8 <iprintf>
  if (newsize > size) {
 8005a0c:	8bfa      	ldrh	r2, [r7, #30]
 8005a0e:	8abb      	ldrh	r3, [r7, #20]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d901      	bls.n	8005a18 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e08f      	b.n	8005b38 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005a18:	8bfa      	ldrh	r2, [r7, #30]
 8005a1a:	8abb      	ldrh	r3, [r7, #20]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d101      	bne.n	8005a24 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	e089      	b.n	8005b38 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fdf9 	bl	8005620 <ptr_to_mem>
 8005a2e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	791b      	ldrb	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d13f      	bne.n	8005ab8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005a40:	d106      	bne.n	8005a50 <mem_trim+0xe8>
 8005a42:	4b41      	ldr	r3, [pc, #260]	@ (8005b48 <mem_trim+0x1e0>)
 8005a44:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8005a48:	4943      	ldr	r1, [pc, #268]	@ (8005b58 <mem_trim+0x1f0>)
 8005a4a:	4841      	ldr	r0, [pc, #260]	@ (8005b50 <mem_trim+0x1e8>)
 8005a4c:	f009 fb4c 	bl	800f0e8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005a56:	8afa      	ldrh	r2, [r7, #22]
 8005a58:	8bfb      	ldrh	r3, [r7, #30]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3308      	adds	r3, #8
 8005a60:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005a62:	4b3e      	ldr	r3, [pc, #248]	@ (8005b5c <mem_trim+0x1f4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d106      	bne.n	8005a7a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005a6c:	89fb      	ldrh	r3, [r7, #14]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fdd6 	bl	8005620 <ptr_to_mem>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4a39      	ldr	r2, [pc, #228]	@ (8005b5c <mem_trim+0x1f4>)
 8005a78:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005a7a:	89fb      	ldrh	r3, [r7, #14]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fdcf 	bl	8005620 <ptr_to_mem>
 8005a82:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2200      	movs	r2, #0
 8005a88:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	89ba      	ldrh	r2, [r7, #12]
 8005a8e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	8afa      	ldrh	r2, [r7, #22]
 8005a94:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	89fa      	ldrh	r2, [r7, #14]
 8005a9a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005aa4:	d047      	beq.n	8005b36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff fdb8 	bl	8005620 <ptr_to_mem>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	89fb      	ldrh	r3, [r7, #14]
 8005ab4:	8053      	strh	r3, [r2, #2]
 8005ab6:	e03e      	b.n	8005b36 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005ab8:	8bfb      	ldrh	r3, [r7, #30]
 8005aba:	f103 0214 	add.w	r2, r3, #20
 8005abe:	8abb      	ldrh	r3, [r7, #20]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d838      	bhi.n	8005b36 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005ac4:	8afa      	ldrh	r2, [r7, #22]
 8005ac6:	8bfb      	ldrh	r3, [r7, #30]
 8005ac8:	4413      	add	r3, r2
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3308      	adds	r3, #8
 8005ace:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005ad8:	d106      	bne.n	8005ae8 <mem_trim+0x180>
 8005ada:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <mem_trim+0x1e0>)
 8005adc:	f240 3216 	movw	r2, #790	@ 0x316
 8005ae0:	491d      	ldr	r1, [pc, #116]	@ (8005b58 <mem_trim+0x1f0>)
 8005ae2:	481b      	ldr	r0, [pc, #108]	@ (8005b50 <mem_trim+0x1e8>)
 8005ae4:	f009 fb00 	bl	800f0e8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fd98 	bl	8005620 <ptr_to_mem>
 8005af0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005af2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b5c <mem_trim+0x1f4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d202      	bcs.n	8005b02 <mem_trim+0x19a>
      lfree = mem2;
 8005afc:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <mem_trim+0x1f4>)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2200      	movs	r2, #0
 8005b06:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	881a      	ldrh	r2, [r3, #0]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	8afa      	ldrh	r2, [r7, #22]
 8005b14:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	89fa      	ldrh	r2, [r7, #14]
 8005b1a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005b24:	d007      	beq.n	8005b36 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fd78 	bl	8005620 <ptr_to_mem>
 8005b30:	4602      	mov	r2, r0
 8005b32:	89fb      	ldrh	r3, [r7, #14]
 8005b34:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005b36:	687b      	ldr	r3, [r7, #4]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	2000524c 	.word	0x2000524c
 8005b44:	20005250 	.word	0x20005250
 8005b48:	0800ff64 	.word	0x0800ff64
 8005b4c:	080100d4 	.word	0x080100d4
 8005b50:	0800ffac 	.word	0x0800ffac
 8005b54:	080100ec 	.word	0x080100ec
 8005b58:	0801010c 	.word	0x0801010c
 8005b5c:	20005254 	.word	0x20005254

08005b60 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <mem_malloc+0x14>
    return NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e0d9      	b.n	8005d28 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	3303      	adds	r3, #3
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005b80:	8bbb      	ldrh	r3, [r7, #28]
 8005b82:	2b0b      	cmp	r3, #11
 8005b84:	d801      	bhi.n	8005b8a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005b86:	230c      	movs	r3, #12
 8005b88:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005b8a:	8bbb      	ldrh	r3, [r7, #28]
 8005b8c:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005b90:	d803      	bhi.n	8005b9a <mem_malloc+0x3a>
 8005b92:	8bba      	ldrh	r2, [r7, #28]
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d201      	bcs.n	8005b9e <mem_malloc+0x3e>
    return NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e0c4      	b.n	8005d28 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005b9e:	4b64      	ldr	r3, [pc, #400]	@ (8005d30 <mem_malloc+0x1d0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fd4e 	bl	8005644 <mem_to_ptr>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	83fb      	strh	r3, [r7, #30]
 8005bac:	e0b4      	b.n	8005d18 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005bae:	8bfb      	ldrh	r3, [r7, #30]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fd35 	bl	8005620 <ptr_to_mem>
 8005bb6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	791b      	ldrb	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 80a4 	bne.w	8005d0a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	8bfb      	ldrh	r3, [r7, #30]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	f1a3 0208 	sub.w	r2, r3, #8
 8005bd0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	f0c0 8099 	bcc.w	8005d0a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	8bfb      	ldrh	r3, [r7, #30]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f1a3 0208 	sub.w	r2, r3, #8
 8005be6:	8bbb      	ldrh	r3, [r7, #28]
 8005be8:	3314      	adds	r3, #20
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d333      	bcc.n	8005c56 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005bee:	8bfa      	ldrh	r2, [r7, #30]
 8005bf0:	8bbb      	ldrh	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005bfa:	8a7b      	ldrh	r3, [r7, #18]
 8005bfc:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005c00:	d106      	bne.n	8005c10 <mem_malloc+0xb0>
 8005c02:	4b4c      	ldr	r3, [pc, #304]	@ (8005d34 <mem_malloc+0x1d4>)
 8005c04:	f240 3287 	movw	r2, #903	@ 0x387
 8005c08:	494b      	ldr	r1, [pc, #300]	@ (8005d38 <mem_malloc+0x1d8>)
 8005c0a:	484c      	ldr	r0, [pc, #304]	@ (8005d3c <mem_malloc+0x1dc>)
 8005c0c:	f009 fa6c 	bl	800f0e8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005c10:	8a7b      	ldrh	r3, [r7, #18]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff fd04 	bl	8005620 <ptr_to_mem>
 8005c18:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	881a      	ldrh	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8bfa      	ldrh	r2, [r7, #30]
 8005c2c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	8a7a      	ldrh	r2, [r7, #18]
 8005c32:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2201      	movs	r2, #1
 8005c38:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8005c42:	d00b      	beq.n	8005c5c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fce9 	bl	8005620 <ptr_to_mem>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	8a7b      	ldrh	r3, [r7, #18]
 8005c52:	8053      	strh	r3, [r2, #2]
 8005c54:	e002      	b.n	8005c5c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005c5c:	4b34      	ldr	r3, [pc, #208]	@ (8005d30 <mem_malloc+0x1d0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d127      	bne.n	8005cb6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005c66:	4b32      	ldr	r3, [pc, #200]	@ (8005d30 <mem_malloc+0x1d0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005c6c:	e005      	b.n	8005c7a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fcd4 	bl	8005620 <ptr_to_mem>
 8005c78:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	791b      	ldrb	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <mem_malloc+0x12c>
 8005c82:	4b2f      	ldr	r3, [pc, #188]	@ (8005d40 <mem_malloc+0x1e0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d1f0      	bne.n	8005c6e <mem_malloc+0x10e>
          }
          lfree = cur;
 8005c8c:	4a28      	ldr	r2, [pc, #160]	@ (8005d30 <mem_malloc+0x1d0>)
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005c92:	4b27      	ldr	r3, [pc, #156]	@ (8005d30 <mem_malloc+0x1d0>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4b2a      	ldr	r3, [pc, #168]	@ (8005d40 <mem_malloc+0x1e0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d00b      	beq.n	8005cb6 <mem_malloc+0x156>
 8005c9e:	4b24      	ldr	r3, [pc, #144]	@ (8005d30 <mem_malloc+0x1d0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d006      	beq.n	8005cb6 <mem_malloc+0x156>
 8005ca8:	4b22      	ldr	r3, [pc, #136]	@ (8005d34 <mem_malloc+0x1d4>)
 8005caa:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8005cae:	4925      	ldr	r1, [pc, #148]	@ (8005d44 <mem_malloc+0x1e4>)
 8005cb0:	4822      	ldr	r0, [pc, #136]	@ (8005d3c <mem_malloc+0x1dc>)
 8005cb2:	f009 fa19 	bl	800f0e8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005cb6:	8bba      	ldrh	r2, [r7, #28]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	4413      	add	r3, r2
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	4a20      	ldr	r2, [pc, #128]	@ (8005d40 <mem_malloc+0x1e0>)
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d906      	bls.n	8005cd4 <mem_malloc+0x174>
 8005cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d34 <mem_malloc+0x1d4>)
 8005cc8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8005ccc:	491e      	ldr	r1, [pc, #120]	@ (8005d48 <mem_malloc+0x1e8>)
 8005cce:	481b      	ldr	r0, [pc, #108]	@ (8005d3c <mem_malloc+0x1dc>)
 8005cd0:	f009 fa0a 	bl	800f0e8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d006      	beq.n	8005cec <mem_malloc+0x18c>
 8005cde:	4b15      	ldr	r3, [pc, #84]	@ (8005d34 <mem_malloc+0x1d4>)
 8005ce0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8005ce4:	4919      	ldr	r1, [pc, #100]	@ (8005d4c <mem_malloc+0x1ec>)
 8005ce6:	4815      	ldr	r0, [pc, #84]	@ (8005d3c <mem_malloc+0x1dc>)
 8005ce8:	f009 f9fe 	bl	800f0e8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d006      	beq.n	8005d04 <mem_malloc+0x1a4>
 8005cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d34 <mem_malloc+0x1d4>)
 8005cf8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8005cfc:	4914      	ldr	r1, [pc, #80]	@ (8005d50 <mem_malloc+0x1f0>)
 8005cfe:	480f      	ldr	r0, [pc, #60]	@ (8005d3c <mem_malloc+0x1dc>)
 8005d00:	f009 f9f2 	bl	800f0e8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	3308      	adds	r3, #8
 8005d08:	e00e      	b.n	8005d28 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005d0a:	8bfb      	ldrh	r3, [r7, #30]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fc87 	bl	8005620 <ptr_to_mem>
 8005d12:	4603      	mov	r3, r0
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005d18:	8bfa      	ldrh	r2, [r7, #30]
 8005d1a:	8bbb      	ldrh	r3, [r7, #28]
 8005d1c:	f5c3 5310 	rsb	r3, r3, #9216	@ 0x2400
 8005d20:	429a      	cmp	r2, r3
 8005d22:	f4ff af44 	bcc.w	8005bae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20005254 	.word	0x20005254
 8005d34:	0800ff64 	.word	0x0800ff64
 8005d38:	0801010c 	.word	0x0801010c
 8005d3c:	0800ffac 	.word	0x0800ffac
 8005d40:	20005250 	.word	0x20005250
 8005d44:	08010120 	.word	0x08010120
 8005d48:	0801013c 	.word	0x0801013c
 8005d4c:	0801016c 	.word	0x0801016c
 8005d50:	0801019c 	.word	0x0801019c

08005d54 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	3303      	adds	r3, #3
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e011      	b.n	8005d9a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	885b      	ldrh	r3, [r3, #2]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4293      	cmp	r3, r2
 8005da4:	dbe7      	blt.n	8005d76 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005dba:	2300      	movs	r3, #0
 8005dbc:	80fb      	strh	r3, [r7, #6]
 8005dbe:	e009      	b.n	8005dd4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005dc0:	88fb      	ldrh	r3, [r7, #6]
 8005dc2:	4a08      	ldr	r2, [pc, #32]	@ (8005de4 <memp_init+0x30>)
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff ffc3 	bl	8005d54 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	80fb      	strh	r3, [r7, #6]
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d9f2      	bls.n	8005dc0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	08012980 	.word	0x08012980

08005de8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d012      	beq.n	8005e24 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d006      	beq.n	8005e20 <do_memp_malloc_pool+0x38>
 8005e12:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <do_memp_malloc_pool+0x48>)
 8005e14:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005e18:	4906      	ldr	r1, [pc, #24]	@ (8005e34 <do_memp_malloc_pool+0x4c>)
 8005e1a:	4807      	ldr	r0, [pc, #28]	@ (8005e38 <do_memp_malloc_pool+0x50>)
 8005e1c:	f009 f964 	bl	800f0e8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	e000      	b.n	8005e26 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	080101c0 	.word	0x080101c0
 8005e34:	080101f0 	.word	0x080101f0
 8005e38:	08010214 	.word	0x08010214

08005e3c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <memp_malloc_pool+0x1c>
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <memp_malloc_pool+0x38>)
 8005e4c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8005e50:	4909      	ldr	r1, [pc, #36]	@ (8005e78 <memp_malloc_pool+0x3c>)
 8005e52:	480a      	ldr	r0, [pc, #40]	@ (8005e7c <memp_malloc_pool+0x40>)
 8005e54:	f009 f948 	bl	800f0e8 <iprintf>
  if (desc == NULL) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <memp_malloc_pool+0x26>
    return NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e003      	b.n	8005e6a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ffc0 	bl	8005de8 <do_memp_malloc_pool>
 8005e68:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	080101c0 	.word	0x080101c0
 8005e78:	0801023c 	.word	0x0801023c
 8005e7c:	08010214 	.word	0x08010214

08005e80 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	4603      	mov	r3, r0
 8005e88:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d908      	bls.n	8005ea2 <memp_malloc+0x22>
 8005e90:	4b0a      	ldr	r3, [pc, #40]	@ (8005ebc <memp_malloc+0x3c>)
 8005e92:	f240 1257 	movw	r2, #343	@ 0x157
 8005e96:	490a      	ldr	r1, [pc, #40]	@ (8005ec0 <memp_malloc+0x40>)
 8005e98:	480a      	ldr	r0, [pc, #40]	@ (8005ec4 <memp_malloc+0x44>)
 8005e9a:	f009 f925 	bl	800f0e8 <iprintf>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e008      	b.n	8005eb4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	4a08      	ldr	r2, [pc, #32]	@ (8005ec8 <memp_malloc+0x48>)
 8005ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ff9c 	bl	8005de8 <do_memp_malloc_pool>
 8005eb0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	080101c0 	.word	0x080101c0
 8005ec0:	08010250 	.word	0x08010250
 8005ec4:	08010214 	.word	0x08010214
 8005ec8:	08012980 	.word	0x08012980

08005ecc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d006      	beq.n	8005eee <do_memp_free_pool+0x22>
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f0c <do_memp_free_pool+0x40>)
 8005ee2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005ee6:	490a      	ldr	r1, [pc, #40]	@ (8005f10 <do_memp_free_pool+0x44>)
 8005ee8:	480a      	ldr	r0, [pc, #40]	@ (8005f14 <do_memp_free_pool+0x48>)
 8005eea:	f009 f8fd 	bl	800f0e8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	080101c0 	.word	0x080101c0
 8005f10:	08010270 	.word	0x08010270
 8005f14:	08010214 	.word	0x08010214

08005f18 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d106      	bne.n	8005f36 <memp_free_pool+0x1e>
 8005f28:	4b0a      	ldr	r3, [pc, #40]	@ (8005f54 <memp_free_pool+0x3c>)
 8005f2a:	f240 1295 	movw	r2, #405	@ 0x195
 8005f2e:	490a      	ldr	r1, [pc, #40]	@ (8005f58 <memp_free_pool+0x40>)
 8005f30:	480a      	ldr	r0, [pc, #40]	@ (8005f5c <memp_free_pool+0x44>)
 8005f32:	f009 f8d9 	bl	800f0e8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <memp_free_pool+0x34>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ffc1 	bl	8005ecc <do_memp_free_pool>
 8005f4a:	e000      	b.n	8005f4e <memp_free_pool+0x36>
    return;
 8005f4c:	bf00      	nop
}
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	080101c0 	.word	0x080101c0
 8005f58:	0801023c 	.word	0x0801023c
 8005f5c:	08010214 	.word	0x08010214

08005f60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	6039      	str	r1, [r7, #0]
 8005f6a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d907      	bls.n	8005f82 <memp_free+0x22>
 8005f72:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <memp_free+0x44>)
 8005f74:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005f78:	490b      	ldr	r1, [pc, #44]	@ (8005fa8 <memp_free+0x48>)
 8005f7a:	480c      	ldr	r0, [pc, #48]	@ (8005fac <memp_free+0x4c>)
 8005f7c:	f009 f8b4 	bl	800f0e8 <iprintf>
 8005f80:	e00c      	b.n	8005f9c <memp_free+0x3c>

  if (mem == NULL) {
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005f88:	79fb      	ldrb	r3, [r7, #7]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	@ (8005fb0 <memp_free+0x50>)
 8005f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f90:	6839      	ldr	r1, [r7, #0]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff ff9a 	bl	8005ecc <do_memp_free_pool>
 8005f98:	e000      	b.n	8005f9c <memp_free+0x3c>
    return;
 8005f9a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	080101c0 	.word	0x080101c0
 8005fa8:	08010290 	.word	0x08010290
 8005fac:	08010214 	.word	0x08010214
 8005fb0:	08012980 	.word	0x08012980

08005fb4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005fb8:	bf00      	nop
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <netif_add+0x26>
 8005fd8:	4b57      	ldr	r3, [pc, #348]	@ (8006138 <netif_add+0x174>)
 8005fda:	f240 1227 	movw	r2, #295	@ 0x127
 8005fde:	4957      	ldr	r1, [pc, #348]	@ (800613c <netif_add+0x178>)
 8005fe0:	4857      	ldr	r0, [pc, #348]	@ (8006140 <netif_add+0x17c>)
 8005fe2:	f009 f881 	bl	800f0e8 <iprintf>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e0a2      	b.n	8006130 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d108      	bne.n	8006002 <netif_add+0x3e>
 8005ff0:	4b51      	ldr	r3, [pc, #324]	@ (8006138 <netif_add+0x174>)
 8005ff2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005ff6:	4953      	ldr	r1, [pc, #332]	@ (8006144 <netif_add+0x180>)
 8005ff8:	4851      	ldr	r0, [pc, #324]	@ (8006140 <netif_add+0x17c>)
 8005ffa:	f009 f875 	bl	800f0e8 <iprintf>
 8005ffe:	2300      	movs	r3, #0
 8006000:	e096      	b.n	8006130 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006008:	4b4f      	ldr	r3, [pc, #316]	@ (8006148 <netif_add+0x184>)
 800600a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006012:	4b4d      	ldr	r3, [pc, #308]	@ (8006148 <netif_add+0x184>)
 8006014:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800601c:	4b4a      	ldr	r3, [pc, #296]	@ (8006148 <netif_add+0x184>)
 800601e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a45      	ldr	r2, [pc, #276]	@ (800614c <netif_add+0x188>)
 8006036:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006052:	4b3f      	ldr	r3, [pc, #252]	@ (8006150 <netif_add+0x18c>)
 8006054:	781a      	ldrb	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006060:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f913 	bl	8006294 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	4798      	blx	r3
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <netif_add+0xba>
    return NULL;
 800607a:	2300      	movs	r3, #0
 800607c:	e058      	b.n	8006130 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006084:	2bff      	cmp	r3, #255	@ 0xff
 8006086:	d103      	bne.n	8006090 <netif_add+0xcc>
        netif->num = 0;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006094:	4b2f      	ldr	r3, [pc, #188]	@ (8006154 <netif_add+0x190>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	617b      	str	r3, [r7, #20]
 800609a:	e02b      	b.n	80060f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d106      	bne.n	80060b2 <netif_add+0xee>
 80060a4:	4b24      	ldr	r3, [pc, #144]	@ (8006138 <netif_add+0x174>)
 80060a6:	f240 128b 	movw	r2, #395	@ 0x18b
 80060aa:	492b      	ldr	r1, [pc, #172]	@ (8006158 <netif_add+0x194>)
 80060ac:	4824      	ldr	r0, [pc, #144]	@ (8006140 <netif_add+0x17c>)
 80060ae:	f009 f81b 	bl	800f0e8 <iprintf>
        num_netifs++;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	3301      	adds	r3, #1
 80060b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2bff      	cmp	r3, #255	@ 0xff
 80060bc:	dd06      	ble.n	80060cc <netif_add+0x108>
 80060be:	4b1e      	ldr	r3, [pc, #120]	@ (8006138 <netif_add+0x174>)
 80060c0:	f240 128d 	movw	r2, #397	@ 0x18d
 80060c4:	4925      	ldr	r1, [pc, #148]	@ (800615c <netif_add+0x198>)
 80060c6:	481e      	ldr	r0, [pc, #120]	@ (8006140 <netif_add+0x17c>)
 80060c8:	f009 f80e 	bl	800f0e8 <iprintf>
        if (netif2->num == netif->num) {
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060d8:	429a      	cmp	r2, r3
 80060da:	d108      	bne.n	80060ee <netif_add+0x12a>
          netif->num++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060e2:	3301      	adds	r3, #1
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80060ec:	e005      	b.n	80060fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1d0      	bne.n	800609c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1be      	bne.n	800607e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006106:	2bfe      	cmp	r3, #254	@ 0xfe
 8006108:	d103      	bne.n	8006112 <netif_add+0x14e>
    netif_num = 0;
 800610a:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <netif_add+0x18c>)
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e006      	b.n	8006120 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006118:	3301      	adds	r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	4b0c      	ldr	r3, [pc, #48]	@ (8006150 <netif_add+0x18c>)
 800611e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006120:	4b0c      	ldr	r3, [pc, #48]	@ (8006154 <netif_add+0x190>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006128:	4a0a      	ldr	r2, [pc, #40]	@ (8006154 <netif_add+0x190>)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800612e:	68fb      	ldr	r3, [r7, #12]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	080102ac 	.word	0x080102ac
 800613c:	08010340 	.word	0x08010340
 8006140:	080102fc 	.word	0x080102fc
 8006144:	0801035c 	.word	0x0801035c
 8006148:	080129e4 	.word	0x080129e4
 800614c:	0800656f 	.word	0x0800656f
 8006150:	2000814c 	.word	0x2000814c
 8006154:	20008144 	.word	0x20008144
 8006158:	08010380 	.word	0x08010380
 800615c:	08010394 	.word	0x08010394

08006160 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f002 fb25 	bl	80087bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f006 fbc1 	bl	800c8fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <netif_do_set_ipaddr+0x20>
 8006196:	4b1d      	ldr	r3, [pc, #116]	@ (800620c <netif_do_set_ipaddr+0x88>)
 8006198:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800619c:	491c      	ldr	r1, [pc, #112]	@ (8006210 <netif_do_set_ipaddr+0x8c>)
 800619e:	481d      	ldr	r0, [pc, #116]	@ (8006214 <netif_do_set_ipaddr+0x90>)
 80061a0:	f008 ffa2 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <netif_do_set_ipaddr+0x34>
 80061aa:	4b18      	ldr	r3, [pc, #96]	@ (800620c <netif_do_set_ipaddr+0x88>)
 80061ac:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80061b0:	4917      	ldr	r1, [pc, #92]	@ (8006210 <netif_do_set_ipaddr+0x8c>)
 80061b2:	4818      	ldr	r0, [pc, #96]	@ (8006214 <netif_do_set_ipaddr+0x90>)
 80061b4:	f008 ff98 	bl	800f0e8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3304      	adds	r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d01c      	beq.n	8006200 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3304      	adds	r3, #4
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80061d6:	f107 0314 	add.w	r3, r7, #20
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ffbf 	bl	8006160 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <netif_do_set_ipaddr+0x6a>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	e000      	b.n	80061f0 <netif_do_set_ipaddr+0x6c>
 80061ee:	2300      	movs	r3, #0
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80061f4:	2101      	movs	r1, #1
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f8d2 	bl	80063a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	080102ac 	.word	0x080102ac
 8006210:	080103c4 	.word	0x080103c4
 8006214:	080102fc 	.word	0x080102fc

08006218 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3308      	adds	r3, #8
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d00a      	beq.n	8006248 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <netif_do_set_netmask+0x26>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	e000      	b.n	8006240 <netif_do_set_netmask+0x28>
 800623e:	2300      	movs	r3, #0
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	60f8      	str	r0, [r7, #12]
 800625e:	60b9      	str	r1, [r7, #8]
 8006260:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	330c      	adds	r3, #12
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d00a      	beq.n	8006286 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <netif_do_set_gw+0x26>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	e000      	b.n	800627e <netif_do_set_gw+0x28>
 800627c:	2300      	movs	r3, #0
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80062b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006324 <netif_set_addr+0x90>)
 80062b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80062ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006324 <netif_set_addr+0x90>)
 80062bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80062c4:	4b17      	ldr	r3, [pc, #92]	@ (8006324 <netif_set_addr+0x90>)
 80062c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <netif_set_addr+0x42>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <netif_set_addr+0x46>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <netif_set_addr+0x48>
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80062e4:	f107 0310 	add.w	r3, r7, #16
 80062e8:	461a      	mov	r2, r3
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff ff49 	bl	8006184 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff ff8e 	bl	8006218 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff ffa8 	bl	8006256 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800630c:	f107 0310 	add.w	r3, r7, #16
 8006310:	461a      	mov	r2, r3
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff ff35 	bl	8006184 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800631a:	bf00      	nop
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	080129e4 	.word	0x080129e4

08006328 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006330:	4a04      	ldr	r2, [pc, #16]	@ (8006344 <netif_set_default+0x1c>)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20008148 	.word	0x20008148

08006348 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <netif_set_up+0x1e>
 8006356:	4b0f      	ldr	r3, [pc, #60]	@ (8006394 <netif_set_up+0x4c>)
 8006358:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800635c:	490e      	ldr	r1, [pc, #56]	@ (8006398 <netif_set_up+0x50>)
 800635e:	480f      	ldr	r0, [pc, #60]	@ (800639c <netif_set_up+0x54>)
 8006360:	f008 fec2 	bl	800f0e8 <iprintf>
 8006364:	e013      	b.n	800638e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10c      	bne.n	800638e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	b2da      	uxtb	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006386:	2103      	movs	r1, #3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f809 	bl	80063a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	080102ac 	.word	0x080102ac
 8006398:	08010434 	.word	0x08010434
 800639c:	080102fc 	.word	0x080102fc

080063a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <netif_issue_reports+0x20>
 80063b2:	4b18      	ldr	r3, [pc, #96]	@ (8006414 <netif_issue_reports+0x74>)
 80063b4:	f240 326d 	movw	r2, #877	@ 0x36d
 80063b8:	4917      	ldr	r1, [pc, #92]	@ (8006418 <netif_issue_reports+0x78>)
 80063ba:	4818      	ldr	r0, [pc, #96]	@ (800641c <netif_issue_reports+0x7c>)
 80063bc:	f008 fe94 	bl	800f0e8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01e      	beq.n	800640c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d017      	beq.n	800640c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d013      	beq.n	800640e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3304      	adds	r3, #4
 80063ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f007 f9e3 	bl	800d7d0 <etharp_request>
 800640a:	e000      	b.n	800640e <netif_issue_reports+0x6e>
    return;
 800640c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	080102ac 	.word	0x080102ac
 8006418:	08010450 	.word	0x08010450
 800641c:	080102fc 	.word	0x080102fc

08006420 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d107      	bne.n	800643e <netif_set_down+0x1e>
 800642e:	4b12      	ldr	r3, [pc, #72]	@ (8006478 <netif_set_down+0x58>)
 8006430:	f240 329b 	movw	r2, #923	@ 0x39b
 8006434:	4911      	ldr	r1, [pc, #68]	@ (800647c <netif_set_down+0x5c>)
 8006436:	4812      	ldr	r0, [pc, #72]	@ (8006480 <netif_set_down+0x60>)
 8006438:	f008 fe56 	bl	800f0e8 <iprintf>
 800643c:	e019      	b.n	8006472 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d012      	beq.n	8006472 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f006 fd6d 	bl	800cf4c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	080102ac 	.word	0x080102ac
 800647c:	08010474 	.word	0x08010474
 8006480:	080102fc 	.word	0x080102fc

08006484 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <netif_set_link_up+0x1e>
 8006492:	4b13      	ldr	r3, [pc, #76]	@ (80064e0 <netif_set_link_up+0x5c>)
 8006494:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006498:	4912      	ldr	r1, [pc, #72]	@ (80064e4 <netif_set_link_up+0x60>)
 800649a:	4813      	ldr	r0, [pc, #76]	@ (80064e8 <netif_set_link_up+0x64>)
 800649c:	f008 fe24 	bl	800f0e8 <iprintf>
 80064a0:	e01b      	b.n	80064da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d114      	bne.n	80064da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80064b6:	f043 0304 	orr.w	r3, r3, #4
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80064c2:	2103      	movs	r1, #3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ff6b 	bl	80063a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <netif_set_link_up+0x56>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	080102ac 	.word	0x080102ac
 80064e4:	08010494 	.word	0x08010494
 80064e8:	080102fc 	.word	0x080102fc

080064ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d107      	bne.n	800650a <netif_set_link_down+0x1e>
 80064fa:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <netif_set_link_down+0x54>)
 80064fc:	f240 4206 	movw	r2, #1030	@ 0x406
 8006500:	4910      	ldr	r1, [pc, #64]	@ (8006544 <netif_set_link_down+0x58>)
 8006502:	4811      	ldr	r0, [pc, #68]	@ (8006548 <netif_set_link_down+0x5c>)
 8006504:	f008 fdf0 	bl	800f0e8 <iprintf>
 8006508:	e017      	b.n	800653a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800651e:	f023 0304 	bic.w	r3, r3, #4
 8006522:	b2da      	uxtb	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <netif_set_link_down+0x4e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	080102ac 	.word	0x080102ac
 8006544:	080104b8 	.word	0x080104b8
 8006548:	080102fc 	.word	0x080102fc

0800654c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	61da      	str	r2, [r3, #28]
  }
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	60f8      	str	r0, [r7, #12]
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800657a:	f06f 030b 	mvn.w	r3, #11
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
	...

0800658c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d013      	beq.n	80065c4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800659c:	4b0d      	ldr	r3, [pc, #52]	@ (80065d4 <netif_get_by_index+0x48>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e00c      	b.n	80065be <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80065aa:	3301      	adds	r3, #1
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	79fa      	ldrb	r2, [r7, #7]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d101      	bne.n	80065b8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	e006      	b.n	80065c6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1ef      	bne.n	80065a4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20008144 	.word	0x20008144

080065d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80065dc:	4b03      	ldr	r3, [pc, #12]	@ (80065ec <pbuf_pool_is_empty+0x14>)
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80065e2:	bf00      	nop
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	2000814d 	.word	0x2000814d

080065f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	4611      	mov	r1, r2
 80065fc:	461a      	mov	r2, r3
 80065fe:	460b      	mov	r3, r1
 8006600:	80fb      	strh	r3, [r7, #6]
 8006602:	4613      	mov	r3, r2
 8006604:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	88fa      	ldrh	r2, [r7, #6]
 8006616:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	88ba      	ldrh	r2, [r7, #4]
 800661c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800661e:	8b3b      	ldrh	r3, [r7, #24]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	7f3a      	ldrb	r2, [r7, #28]
 800662a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	73da      	strb	r2, [r3, #15]
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	@ 0x30
 8006648:	af02      	add	r7, sp, #8
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
 800664e:	460b      	mov	r3, r1
 8006650:	80bb      	strh	r3, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800665a:	887b      	ldrh	r3, [r7, #2]
 800665c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006660:	d07f      	beq.n	8006762 <pbuf_alloc+0x11e>
 8006662:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006666:	f300 80c8 	bgt.w	80067fa <pbuf_alloc+0x1b6>
 800666a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800666e:	d010      	beq.n	8006692 <pbuf_alloc+0x4e>
 8006670:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006674:	f300 80c1 	bgt.w	80067fa <pbuf_alloc+0x1b6>
 8006678:	2b01      	cmp	r3, #1
 800667a:	d002      	beq.n	8006682 <pbuf_alloc+0x3e>
 800667c:	2b41      	cmp	r3, #65	@ 0x41
 800667e:	f040 80bc 	bne.w	80067fa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	88bb      	ldrh	r3, [r7, #4]
 8006686:	4619      	mov	r1, r3
 8006688:	2000      	movs	r0, #0
 800668a:	f000 f8d1 	bl	8006830 <pbuf_alloc_reference>
 800668e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8006690:	e0bd      	b.n	800680e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800669a:	88bb      	ldrh	r3, [r7, #4]
 800669c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800669e:	2008      	movs	r0, #8
 80066a0:	f7ff fbee 	bl	8005e80 <memp_malloc>
 80066a4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80066ac:	f7ff ff94 	bl	80065d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80066b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <pbuf_alloc+0x78>
            pbuf_free(p);
 80066b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066b8:	f000 faa8 	bl	8006c0c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	e0a7      	b.n	8006810 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80066c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066c2:	3303      	adds	r3, #3
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8b7a      	ldrh	r2, [r7, #26]
 80066d4:	4293      	cmp	r3, r2
 80066d6:	bf28      	it	cs
 80066d8:	4613      	movcs	r3, r2
 80066da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80066dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80066de:	3310      	adds	r3, #16
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	3303      	adds	r3, #3
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	4618      	mov	r0, r3
 80066ec:	89f9      	ldrh	r1, [r7, #14]
 80066ee:	8b7a      	ldrh	r2, [r7, #26]
 80066f0:	2300      	movs	r3, #0
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	887b      	ldrh	r3, [r7, #2]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	460b      	mov	r3, r1
 80066fa:	4601      	mov	r1, r0
 80066fc:	6938      	ldr	r0, [r7, #16]
 80066fe:	f7ff ff77 	bl	80065f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f003 0303 	and.w	r3, r3, #3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d006      	beq.n	800671c <pbuf_alloc+0xd8>
 800670e:	4b42      	ldr	r3, [pc, #264]	@ (8006818 <pbuf_alloc+0x1d4>)
 8006710:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006714:	4941      	ldr	r1, [pc, #260]	@ (800681c <pbuf_alloc+0x1d8>)
 8006716:	4842      	ldr	r0, [pc, #264]	@ (8006820 <pbuf_alloc+0x1dc>)
 8006718:	f008 fce6 	bl	800f0e8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800671c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800671e:	3303      	adds	r3, #3
 8006720:	f023 0303 	bic.w	r3, r3, #3
 8006724:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006728:	d106      	bne.n	8006738 <pbuf_alloc+0xf4>
 800672a:	4b3b      	ldr	r3, [pc, #236]	@ (8006818 <pbuf_alloc+0x1d4>)
 800672c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006730:	493c      	ldr	r1, [pc, #240]	@ (8006824 <pbuf_alloc+0x1e0>)
 8006732:	483b      	ldr	r0, [pc, #236]	@ (8006820 <pbuf_alloc+0x1dc>)
 8006734:	f008 fcd8 	bl	800f0e8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	2b00      	cmp	r3, #0
 800673c:	d102      	bne.n	8006744 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
 8006742:	e002      	b.n	800674a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800674e:	8b7a      	ldrh	r2, [r7, #26]
 8006750:	89fb      	ldrh	r3, [r7, #14]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800675a:	8b7b      	ldrh	r3, [r7, #26]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d19e      	bne.n	800669e <pbuf_alloc+0x5a>
      break;
 8006760:	e055      	b.n	800680e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006762:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006764:	3303      	adds	r3, #3
 8006766:	b29b      	uxth	r3, r3
 8006768:	f023 0303 	bic.w	r3, r3, #3
 800676c:	b29a      	uxth	r2, r3
 800676e:	88bb      	ldrh	r3, [r7, #4]
 8006770:	3303      	adds	r3, #3
 8006772:	b29b      	uxth	r3, r3
 8006774:	f023 0303 	bic.w	r3, r3, #3
 8006778:	b29b      	uxth	r3, r3
 800677a:	4413      	add	r3, r2
 800677c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800677e:	8b3b      	ldrh	r3, [r7, #24]
 8006780:	3310      	adds	r3, #16
 8006782:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006784:	8b3a      	ldrh	r2, [r7, #24]
 8006786:	88bb      	ldrh	r3, [r7, #4]
 8006788:	3303      	adds	r3, #3
 800678a:	f023 0303 	bic.w	r3, r3, #3
 800678e:	429a      	cmp	r2, r3
 8006790:	d306      	bcc.n	80067a0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006792:	8afa      	ldrh	r2, [r7, #22]
 8006794:	88bb      	ldrh	r3, [r7, #4]
 8006796:	3303      	adds	r3, #3
 8006798:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800679c:	429a      	cmp	r2, r3
 800679e:	d201      	bcs.n	80067a4 <pbuf_alloc+0x160>
        return NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e035      	b.n	8006810 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80067a4:	8afb      	ldrh	r3, [r7, #22]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff f9da 	bl	8005b60 <mem_malloc>
 80067ac:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <pbuf_alloc+0x174>
        return NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	e02b      	b.n	8006810 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80067b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80067ba:	3310      	adds	r3, #16
 80067bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067be:	4413      	add	r3, r2
 80067c0:	3303      	adds	r3, #3
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	4618      	mov	r0, r3
 80067c8:	88b9      	ldrh	r1, [r7, #4]
 80067ca:	88ba      	ldrh	r2, [r7, #4]
 80067cc:	2300      	movs	r3, #0
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	887b      	ldrh	r3, [r7, #2]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	460b      	mov	r3, r1
 80067d6:	4601      	mov	r1, r0
 80067d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067da:	f7ff ff09 	bl	80065f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d010      	beq.n	800680c <pbuf_alloc+0x1c8>
 80067ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <pbuf_alloc+0x1d4>)
 80067ec:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80067f0:	490d      	ldr	r1, [pc, #52]	@ (8006828 <pbuf_alloc+0x1e4>)
 80067f2:	480b      	ldr	r0, [pc, #44]	@ (8006820 <pbuf_alloc+0x1dc>)
 80067f4:	f008 fc78 	bl	800f0e8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80067f8:	e008      	b.n	800680c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80067fa:	4b07      	ldr	r3, [pc, #28]	@ (8006818 <pbuf_alloc+0x1d4>)
 80067fc:	f240 1227 	movw	r2, #295	@ 0x127
 8006800:	490a      	ldr	r1, [pc, #40]	@ (800682c <pbuf_alloc+0x1e8>)
 8006802:	4807      	ldr	r0, [pc, #28]	@ (8006820 <pbuf_alloc+0x1dc>)
 8006804:	f008 fc70 	bl	800f0e8 <iprintf>
      return NULL;
 8006808:	2300      	movs	r3, #0
 800680a:	e001      	b.n	8006810 <pbuf_alloc+0x1cc>
      break;
 800680c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006810:	4618      	mov	r0, r3
 8006812:	3728      	adds	r7, #40	@ 0x28
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	080104dc 	.word	0x080104dc
 800681c:	0801050c 	.word	0x0801050c
 8006820:	0801053c 	.word	0x0801053c
 8006824:	08010564 	.word	0x08010564
 8006828:	08010598 	.word	0x08010598
 800682c:	080105c4 	.word	0x080105c4

08006830 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af02      	add	r7, sp, #8
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	807b      	strh	r3, [r7, #2]
 800683c:	4613      	mov	r3, r2
 800683e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006840:	883b      	ldrh	r3, [r7, #0]
 8006842:	2b41      	cmp	r3, #65	@ 0x41
 8006844:	d009      	beq.n	800685a <pbuf_alloc_reference+0x2a>
 8006846:	883b      	ldrh	r3, [r7, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d006      	beq.n	800685a <pbuf_alloc_reference+0x2a>
 800684c:	4b0f      	ldr	r3, [pc, #60]	@ (800688c <pbuf_alloc_reference+0x5c>)
 800684e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8006852:	490f      	ldr	r1, [pc, #60]	@ (8006890 <pbuf_alloc_reference+0x60>)
 8006854:	480f      	ldr	r0, [pc, #60]	@ (8006894 <pbuf_alloc_reference+0x64>)
 8006856:	f008 fc47 	bl	800f0e8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800685a:	2007      	movs	r0, #7
 800685c:	f7ff fb10 	bl	8005e80 <memp_malloc>
 8006860:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006868:	2300      	movs	r3, #0
 800686a:	e00b      	b.n	8006884 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800686c:	8879      	ldrh	r1, [r7, #2]
 800686e:	887a      	ldrh	r2, [r7, #2]
 8006870:	2300      	movs	r3, #0
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	883b      	ldrh	r3, [r7, #0]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	460b      	mov	r3, r1
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7ff feb7 	bl	80065f0 <pbuf_init_alloced_pbuf>
  return p;
 8006882:	68fb      	ldr	r3, [r7, #12]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	080104dc 	.word	0x080104dc
 8006890:	080105e0 	.word	0x080105e0
 8006894:	0801053c 	.word	0x0801053c

08006898 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]
 80068a4:	460b      	mov	r3, r1
 80068a6:	81bb      	strh	r3, [r7, #12]
 80068a8:	4613      	mov	r3, r2
 80068aa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80068b0:	8a7b      	ldrh	r3, [r7, #18]
 80068b2:	3303      	adds	r3, #3
 80068b4:	f023 0203 	bic.w	r2, r3, #3
 80068b8:	89bb      	ldrh	r3, [r7, #12]
 80068ba:	441a      	add	r2, r3
 80068bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068be:	429a      	cmp	r2, r3
 80068c0:	d901      	bls.n	80068c6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e018      	b.n	80068f8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80068cc:	8a7b      	ldrh	r3, [r7, #18]
 80068ce:	3303      	adds	r3, #3
 80068d0:	f023 0303 	bic.w	r3, r3, #3
 80068d4:	6a3a      	ldr	r2, [r7, #32]
 80068d6:	4413      	add	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e001      	b.n	80068e0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	89b9      	ldrh	r1, [r7, #12]
 80068e4:	89ba      	ldrh	r2, [r7, #12]
 80068e6:	2302      	movs	r3, #2
 80068e8:	9301      	str	r3, [sp, #4]
 80068ea:	897b      	ldrh	r3, [r7, #10]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	460b      	mov	r3, r1
 80068f0:	6979      	ldr	r1, [r7, #20]
 80068f2:	f7ff fe7d 	bl	80065f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80068f6:	687b      	ldr	r3, [r7, #4]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <pbuf_realloc+0x20>
 8006912:	4b3a      	ldr	r3, [pc, #232]	@ (80069fc <pbuf_realloc+0xfc>)
 8006914:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8006918:	4939      	ldr	r1, [pc, #228]	@ (8006a00 <pbuf_realloc+0x100>)
 800691a:	483a      	ldr	r0, [pc, #232]	@ (8006a04 <pbuf_realloc+0x104>)
 800691c:	f008 fbe4 	bl	800f0e8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	891b      	ldrh	r3, [r3, #8]
 8006924:	887a      	ldrh	r2, [r7, #2]
 8006926:	429a      	cmp	r2, r3
 8006928:	d263      	bcs.n	80069f2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	891a      	ldrh	r2, [r3, #8]
 800692e:	887b      	ldrh	r3, [r7, #2]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006934:	887b      	ldrh	r3, [r7, #2]
 8006936:	817b      	strh	r3, [r7, #10]
  q = p;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800693c:	e018      	b.n	8006970 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	895b      	ldrh	r3, [r3, #10]
 8006942:	897a      	ldrh	r2, [r7, #10]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	891a      	ldrh	r2, [r3, #8]
 800694c:	893b      	ldrh	r3, [r7, #8]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <pbuf_realloc+0x70>
 8006962:	4b26      	ldr	r3, [pc, #152]	@ (80069fc <pbuf_realloc+0xfc>)
 8006964:	f240 12af 	movw	r2, #431	@ 0x1af
 8006968:	4927      	ldr	r1, [pc, #156]	@ (8006a08 <pbuf_realloc+0x108>)
 800696a:	4826      	ldr	r0, [pc, #152]	@ (8006a04 <pbuf_realloc+0x104>)
 800696c:	f008 fbbc 	bl	800f0e8 <iprintf>
  while (rem_len > q->len) {
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	895b      	ldrh	r3, [r3, #10]
 8006974:	897a      	ldrh	r2, [r7, #10]
 8006976:	429a      	cmp	r2, r3
 8006978:	d8e1      	bhi.n	800693e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	7b1b      	ldrb	r3, [r3, #12]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	2b00      	cmp	r3, #0
 8006984:	d121      	bne.n	80069ca <pbuf_realloc+0xca>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	895b      	ldrh	r3, [r3, #10]
 800698a:	897a      	ldrh	r2, [r7, #10]
 800698c:	429a      	cmp	r2, r3
 800698e:	d01c      	beq.n	80069ca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	7b5b      	ldrb	r3, [r3, #13]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d116      	bne.n	80069ca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	897b      	ldrh	r3, [r7, #10]
 80069a8:	4413      	add	r3, r2
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4619      	mov	r1, r3
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7fe ffda 	bl	8005968 <mem_trim>
 80069b4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d106      	bne.n	80069ca <pbuf_realloc+0xca>
 80069bc:	4b0f      	ldr	r3, [pc, #60]	@ (80069fc <pbuf_realloc+0xfc>)
 80069be:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80069c2:	4912      	ldr	r1, [pc, #72]	@ (8006a0c <pbuf_realloc+0x10c>)
 80069c4:	480f      	ldr	r0, [pc, #60]	@ (8006a04 <pbuf_realloc+0x104>)
 80069c6:	f008 fb8f 	bl	800f0e8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	897a      	ldrh	r2, [r7, #10]
 80069ce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	895a      	ldrh	r2, [r3, #10]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f911 	bl	8006c0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	e000      	b.n	80069f4 <pbuf_realloc+0xf4>
    return;
 80069f2:	bf00      	nop

}
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	080104dc 	.word	0x080104dc
 8006a00:	080105f4 	.word	0x080105f4
 8006a04:	0801053c 	.word	0x0801053c
 8006a08:	0801060c 	.word	0x0801060c
 8006a0c:	08010624 	.word	0x08010624

08006a10 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <pbuf_add_header_impl+0x22>
 8006a24:	4b2b      	ldr	r3, [pc, #172]	@ (8006ad4 <pbuf_add_header_impl+0xc4>)
 8006a26:	f240 12df 	movw	r2, #479	@ 0x1df
 8006a2a:	492b      	ldr	r1, [pc, #172]	@ (8006ad8 <pbuf_add_header_impl+0xc8>)
 8006a2c:	482b      	ldr	r0, [pc, #172]	@ (8006adc <pbuf_add_header_impl+0xcc>)
 8006a2e:	f008 fb5b 	bl	800f0e8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <pbuf_add_header_impl+0x30>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a3e:	d301      	bcc.n	8006a44 <pbuf_add_header_impl+0x34>
    return 1;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e043      	b.n	8006acc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <pbuf_add_header_impl+0x3e>
    return 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e03e      	b.n	8006acc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	891a      	ldrh	r2, [r3, #8]
 8006a56:	8a7b      	ldrh	r3, [r7, #18]
 8006a58:	4413      	add	r3, r2
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8a7a      	ldrh	r2, [r7, #18]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d901      	bls.n	8006a66 <pbuf_add_header_impl+0x56>
    return 1;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e032      	b.n	8006acc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	7b1b      	ldrb	r3, [r3, #12]
 8006a6a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006a6c:	8a3b      	ldrh	r3, [r7, #16]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00c      	beq.n	8006a90 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	425b      	negs	r3, r3
 8006a7e:	4413      	add	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3310      	adds	r3, #16
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d20d      	bcs.n	8006aa8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e01d      	b.n	8006acc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d006      	beq.n	8006aa4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	425b      	negs	r3, r3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	e001      	b.n	8006aa8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e011      	b.n	8006acc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	895a      	ldrh	r2, [r3, #10]
 8006ab2:	8a7b      	ldrh	r3, [r7, #18]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	891a      	ldrh	r2, [r3, #8]
 8006ac0:	8a7b      	ldrh	r3, [r7, #18]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	811a      	strh	r2, [r3, #8]


  return 0;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	080104dc 	.word	0x080104dc
 8006ad8:	08010640 	.word	0x08010640
 8006adc:	0801053c 	.word	0x0801053c

08006ae0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006aea:	2200      	movs	r2, #0
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff ff8e 	bl	8006a10 <pbuf_add_header_impl>
 8006af4:	4603      	mov	r3, r0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <pbuf_remove_header+0x1e>
 8006b10:	4b20      	ldr	r3, [pc, #128]	@ (8006b94 <pbuf_remove_header+0x94>)
 8006b12:	f240 224b 	movw	r2, #587	@ 0x24b
 8006b16:	4920      	ldr	r1, [pc, #128]	@ (8006b98 <pbuf_remove_header+0x98>)
 8006b18:	4820      	ldr	r0, [pc, #128]	@ (8006b9c <pbuf_remove_header+0x9c>)
 8006b1a:	f008 fae5 	bl	800f0e8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <pbuf_remove_header+0x2c>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b2a:	d301      	bcc.n	8006b30 <pbuf_remove_header+0x30>
    return 1;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e02c      	b.n	8006b8a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <pbuf_remove_header+0x3a>
    return 0;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e027      	b.n	8006b8a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	895b      	ldrh	r3, [r3, #10]
 8006b42:	89fa      	ldrh	r2, [r7, #14]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d908      	bls.n	8006b5a <pbuf_remove_header+0x5a>
 8006b48:	4b12      	ldr	r3, [pc, #72]	@ (8006b94 <pbuf_remove_header+0x94>)
 8006b4a:	f240 2255 	movw	r2, #597	@ 0x255
 8006b4e:	4914      	ldr	r1, [pc, #80]	@ (8006ba0 <pbuf_remove_header+0xa0>)
 8006b50:	4812      	ldr	r0, [pc, #72]	@ (8006b9c <pbuf_remove_header+0x9c>)
 8006b52:	f008 fac9 	bl	800f0e8 <iprintf>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e017      	b.n	8006b8a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	441a      	add	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	895a      	ldrh	r2, [r3, #10]
 8006b70:	89fb      	ldrh	r3, [r7, #14]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	891a      	ldrh	r2, [r3, #8]
 8006b7e:	89fb      	ldrh	r3, [r7, #14]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	080104dc 	.word	0x080104dc
 8006b98:	08010640 	.word	0x08010640
 8006b9c:	0801053c 	.word	0x0801053c
 8006ba0:	0801064c 	.word	0x0801064c

08006ba4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	807b      	strh	r3, [r7, #2]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006bb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	da08      	bge.n	8006bce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006bbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bc0:	425b      	negs	r3, r3
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff ff9b 	bl	8006b00 <pbuf_remove_header>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	e007      	b.n	8006bde <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006bce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bd2:	787a      	ldrb	r2, [r7, #1]
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff ff1a 	bl	8006a10 <pbuf_add_header_impl>
 8006bdc:	4603      	mov	r3, r0
  }
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006bf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff ffd2 	bl	8006ba4 <pbuf_header_impl>
 8006c00:	4603      	mov	r3, r0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d106      	bne.n	8006c2e <pbuf_free+0x22>
 8006c20:	4b38      	ldr	r3, [pc, #224]	@ (8006d04 <pbuf_free+0xf8>)
 8006c22:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8006c26:	4938      	ldr	r1, [pc, #224]	@ (8006d08 <pbuf_free+0xfc>)
 8006c28:	4838      	ldr	r0, [pc, #224]	@ (8006d0c <pbuf_free+0x100>)
 8006c2a:	f008 fa5d 	bl	800f0e8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e063      	b.n	8006cfa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006c36:	e05c      	b.n	8006cf2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7b9b      	ldrb	r3, [r3, #14]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <pbuf_free+0x42>
 8006c40:	4b30      	ldr	r3, [pc, #192]	@ (8006d04 <pbuf_free+0xf8>)
 8006c42:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8006c46:	4932      	ldr	r1, [pc, #200]	@ (8006d10 <pbuf_free+0x104>)
 8006c48:	4830      	ldr	r0, [pc, #192]	@ (8006d0c <pbuf_free+0x100>)
 8006c4a:	f008 fa4d 	bl	800f0e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	7b9b      	ldrb	r3, [r3, #14]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	739a      	strb	r2, [r3, #14]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	7b9b      	ldrb	r3, [r3, #14]
 8006c5e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006c60:	7dbb      	ldrb	r3, [r7, #22]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d143      	bne.n	8006cee <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	7b1b      	ldrb	r3, [r3, #12]
 8006c70:	f003 030f 	and.w	r3, r3, #15
 8006c74:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	7b5b      	ldrb	r3, [r3, #13]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d011      	beq.n	8006ca6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <pbuf_free+0x90>
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d04 <pbuf_free+0xf8>)
 8006c90:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8006c94:	491f      	ldr	r1, [pc, #124]	@ (8006d14 <pbuf_free+0x108>)
 8006c96:	481d      	ldr	r0, [pc, #116]	@ (8006d0c <pbuf_free+0x100>)
 8006c98:	f008 fa26 	bl	800f0e8 <iprintf>
        pc->custom_free_function(p);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
 8006ca4:	e01d      	b.n	8006ce2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d104      	bne.n	8006cb6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006cac:	6879      	ldr	r1, [r7, #4]
 8006cae:	2008      	movs	r0, #8
 8006cb0:	f7ff f956 	bl	8005f60 <memp_free>
 8006cb4:	e015      	b.n	8006ce2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d104      	bne.n	8006cc6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	2007      	movs	r0, #7
 8006cc0:	f7ff f94e 	bl	8005f60 <memp_free>
 8006cc4:	e00d      	b.n	8006ce2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d103      	bne.n	8006cd4 <pbuf_free+0xc8>
          mem_free(p);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7fe fde1 	bl	8005894 <mem_free>
 8006cd2:	e006      	b.n	8006ce2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <pbuf_free+0xf8>)
 8006cd6:	f240 320f 	movw	r2, #783	@ 0x30f
 8006cda:	490f      	ldr	r1, [pc, #60]	@ (8006d18 <pbuf_free+0x10c>)
 8006cdc:	480b      	ldr	r0, [pc, #44]	@ (8006d0c <pbuf_free+0x100>)
 8006cde:	f008 fa03 	bl	800f0e8 <iprintf>
        }
      }
      count++;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	e001      	b.n	8006cf2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d19f      	bne.n	8006c38 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	080104dc 	.word	0x080104dc
 8006d08:	08010640 	.word	0x08010640
 8006d0c:	0801053c 	.word	0x0801053c
 8006d10:	0801066c 	.word	0x0801066c
 8006d14:	08010684 	.word	0x08010684
 8006d18:	080106a8 	.word	0x080106a8

08006d1c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006d28:	e005      	b.n	8006d36 <pbuf_clen+0x1a>
    ++len;
 8006d2a:	89fb      	ldrh	r3, [r7, #14]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f6      	bne.n	8006d2a <pbuf_clen+0xe>
  }
  return len;
 8006d3c:	89fb      	ldrh	r3, [r7, #14]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d010      	beq.n	8006d7c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7b9b      	ldrb	r3, [r3, #14]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	7b9b      	ldrb	r3, [r3, #14]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <pbuf_ref+0x30>
 8006d6e:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <pbuf_ref+0x38>)
 8006d70:	f240 3242 	movw	r2, #834	@ 0x342
 8006d74:	4904      	ldr	r1, [pc, #16]	@ (8006d88 <pbuf_ref+0x3c>)
 8006d76:	4805      	ldr	r0, [pc, #20]	@ (8006d8c <pbuf_ref+0x40>)
 8006d78:	f008 f9b6 	bl	800f0e8 <iprintf>
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	080104dc 	.word	0x080104dc
 8006d88:	080106bc 	.word	0x080106bc
 8006d8c:	0801053c 	.word	0x0801053c

08006d90 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <pbuf_cat+0x16>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d107      	bne.n	8006db6 <pbuf_cat+0x26>
 8006da6:	4b20      	ldr	r3, [pc, #128]	@ (8006e28 <pbuf_cat+0x98>)
 8006da8:	f240 3259 	movw	r2, #857	@ 0x359
 8006dac:	491f      	ldr	r1, [pc, #124]	@ (8006e2c <pbuf_cat+0x9c>)
 8006dae:	4820      	ldr	r0, [pc, #128]	@ (8006e30 <pbuf_cat+0xa0>)
 8006db0:	f008 f99a 	bl	800f0e8 <iprintf>
 8006db4:	e034      	b.n	8006e20 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	e00a      	b.n	8006dd2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	891a      	ldrh	r2, [r3, #8]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	891b      	ldrh	r3, [r3, #8]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	891a      	ldrh	r2, [r3, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	895b      	ldrh	r3, [r3, #10]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d006      	beq.n	8006df4 <pbuf_cat+0x64>
 8006de6:	4b10      	ldr	r3, [pc, #64]	@ (8006e28 <pbuf_cat+0x98>)
 8006de8:	f240 3262 	movw	r2, #866	@ 0x362
 8006dec:	4911      	ldr	r1, [pc, #68]	@ (8006e34 <pbuf_cat+0xa4>)
 8006dee:	4810      	ldr	r0, [pc, #64]	@ (8006e30 <pbuf_cat+0xa0>)
 8006df0:	f008 f97a 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d006      	beq.n	8006e0a <pbuf_cat+0x7a>
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <pbuf_cat+0x98>)
 8006dfe:	f240 3263 	movw	r2, #867	@ 0x363
 8006e02:	490d      	ldr	r1, [pc, #52]	@ (8006e38 <pbuf_cat+0xa8>)
 8006e04:	480a      	ldr	r0, [pc, #40]	@ (8006e30 <pbuf_cat+0xa0>)
 8006e06:	f008 f96f 	bl	800f0e8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	891a      	ldrh	r2, [r3, #8]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	891b      	ldrh	r3, [r3, #8]
 8006e12:	4413      	add	r3, r2
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	080104dc 	.word	0x080104dc
 8006e2c:	080106d0 	.word	0x080106d0
 8006e30:	0801053c 	.word	0x0801053c
 8006e34:	08010708 	.word	0x08010708
 8006e38:	08010738 	.word	0x08010738

08006e3c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <pbuf_copy+0x2a>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <pbuf_copy+0x2a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	891a      	ldrh	r2, [r3, #8]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	891b      	ldrh	r3, [r3, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d209      	bcs.n	8006e7a <pbuf_copy+0x3e>
 8006e66:	4b57      	ldr	r3, [pc, #348]	@ (8006fc4 <pbuf_copy+0x188>)
 8006e68:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8006e6c:	4956      	ldr	r1, [pc, #344]	@ (8006fc8 <pbuf_copy+0x18c>)
 8006e6e:	4857      	ldr	r0, [pc, #348]	@ (8006fcc <pbuf_copy+0x190>)
 8006e70:	f008 f93a 	bl	800f0e8 <iprintf>
 8006e74:	f06f 030f 	mvn.w	r3, #15
 8006e78:	e09f      	b.n	8006fba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	895b      	ldrh	r3, [r3, #10]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	895b      	ldrh	r3, [r3, #10]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1acb      	subs	r3, r1, r3
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d306      	bcc.n	8006ea0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	895b      	ldrh	r3, [r3, #10]
 8006e96:	461a      	mov	r2, r3
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e005      	b.n	8006eac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	895b      	ldrh	r3, [r3, #10]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	18d0      	adds	r0, r2, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4413      	add	r3, r2
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	f008 f9ed 	bl	800f29e <memcpy>
    offset_to += len;
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	895b      	ldrh	r3, [r3, #10]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d906      	bls.n	8006eee <pbuf_copy+0xb2>
 8006ee0:	4b38      	ldr	r3, [pc, #224]	@ (8006fc4 <pbuf_copy+0x188>)
 8006ee2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006ee6:	493a      	ldr	r1, [pc, #232]	@ (8006fd0 <pbuf_copy+0x194>)
 8006ee8:	4838      	ldr	r0, [pc, #224]	@ (8006fcc <pbuf_copy+0x190>)
 8006eea:	f008 f8fd 	bl	800f0e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	895b      	ldrh	r3, [r3, #10]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d906      	bls.n	8006f08 <pbuf_copy+0xcc>
 8006efa:	4b32      	ldr	r3, [pc, #200]	@ (8006fc4 <pbuf_copy+0x188>)
 8006efc:	f240 32da 	movw	r2, #986	@ 0x3da
 8006f00:	4934      	ldr	r1, [pc, #208]	@ (8006fd4 <pbuf_copy+0x198>)
 8006f02:	4832      	ldr	r0, [pc, #200]	@ (8006fcc <pbuf_copy+0x190>)
 8006f04:	f008 f8f0 	bl	800f0e8 <iprintf>
    if (offset_from >= p_from->len) {
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	895b      	ldrh	r3, [r3, #10]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d304      	bcc.n	8006f1e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	895b      	ldrh	r3, [r3, #10]
 8006f22:	461a      	mov	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d114      	bne.n	8006f54 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10c      	bne.n	8006f54 <pbuf_copy+0x118>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <pbuf_copy+0x118>
 8006f40:	4b20      	ldr	r3, [pc, #128]	@ (8006fc4 <pbuf_copy+0x188>)
 8006f42:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8006f46:	4924      	ldr	r1, [pc, #144]	@ (8006fd8 <pbuf_copy+0x19c>)
 8006f48:	4820      	ldr	r0, [pc, #128]	@ (8006fcc <pbuf_copy+0x190>)
 8006f4a:	f008 f8cd 	bl	800f0e8 <iprintf>
 8006f4e:	f06f 030f 	mvn.w	r3, #15
 8006f52:	e032      	b.n	8006fba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d013      	beq.n	8006f82 <pbuf_copy+0x146>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	895a      	ldrh	r2, [r3, #10]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	891b      	ldrh	r3, [r3, #8]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d10d      	bne.n	8006f82 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d009      	beq.n	8006f82 <pbuf_copy+0x146>
 8006f6e:	4b15      	ldr	r3, [pc, #84]	@ (8006fc4 <pbuf_copy+0x188>)
 8006f70:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8006f74:	4919      	ldr	r1, [pc, #100]	@ (8006fdc <pbuf_copy+0x1a0>)
 8006f76:	4815      	ldr	r0, [pc, #84]	@ (8006fcc <pbuf_copy+0x190>)
 8006f78:	f008 f8b6 	bl	800f0e8 <iprintf>
 8006f7c:	f06f 0305 	mvn.w	r3, #5
 8006f80:	e01b      	b.n	8006fba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <pbuf_copy+0x174>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	895a      	ldrh	r2, [r3, #10]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	891b      	ldrh	r3, [r3, #8]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d10d      	bne.n	8006fb0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d009      	beq.n	8006fb0 <pbuf_copy+0x174>
 8006f9c:	4b09      	ldr	r3, [pc, #36]	@ (8006fc4 <pbuf_copy+0x188>)
 8006f9e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006fa2:	490e      	ldr	r1, [pc, #56]	@ (8006fdc <pbuf_copy+0x1a0>)
 8006fa4:	4809      	ldr	r0, [pc, #36]	@ (8006fcc <pbuf_copy+0x190>)
 8006fa6:	f008 f89f 	bl	800f0e8 <iprintf>
 8006faa:	f06f 0305 	mvn.w	r3, #5
 8006fae:	e004      	b.n	8006fba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f47f af61 	bne.w	8006e7a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3718      	adds	r7, #24
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	080104dc 	.word	0x080104dc
 8006fc8:	08010784 	.word	0x08010784
 8006fcc:	0801053c 	.word	0x0801053c
 8006fd0:	080107b4 	.word	0x080107b4
 8006fd4:	080107cc 	.word	0x080107cc
 8006fd8:	080107e8 	.word	0x080107e8
 8006fdc:	080107f8 	.word	0x080107f8

08006fe0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4611      	mov	r1, r2
 8006fec:	461a      	mov	r2, r3
 8006fee:	460b      	mov	r3, r1
 8006ff0:	80fb      	strh	r3, [r7, #6]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d108      	bne.n	8007016 <pbuf_copy_partial+0x36>
 8007004:	4b2b      	ldr	r3, [pc, #172]	@ (80070b4 <pbuf_copy_partial+0xd4>)
 8007006:	f240 420a 	movw	r2, #1034	@ 0x40a
 800700a:	492b      	ldr	r1, [pc, #172]	@ (80070b8 <pbuf_copy_partial+0xd8>)
 800700c:	482b      	ldr	r0, [pc, #172]	@ (80070bc <pbuf_copy_partial+0xdc>)
 800700e:	f008 f86b 	bl	800f0e8 <iprintf>
 8007012:	2300      	movs	r3, #0
 8007014:	e04a      	b.n	80070ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d108      	bne.n	800702e <pbuf_copy_partial+0x4e>
 800701c:	4b25      	ldr	r3, [pc, #148]	@ (80070b4 <pbuf_copy_partial+0xd4>)
 800701e:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007022:	4927      	ldr	r1, [pc, #156]	@ (80070c0 <pbuf_copy_partial+0xe0>)
 8007024:	4825      	ldr	r0, [pc, #148]	@ (80070bc <pbuf_copy_partial+0xdc>)
 8007026:	f008 f85f 	bl	800f0e8 <iprintf>
 800702a:	2300      	movs	r3, #0
 800702c:	e03e      	b.n	80070ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	61fb      	str	r3, [r7, #28]
 8007032:	e034      	b.n	800709e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007034:	88bb      	ldrh	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <pbuf_copy_partial+0x70>
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	895b      	ldrh	r3, [r3, #10]
 800703e:	88ba      	ldrh	r2, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d305      	bcc.n	8007050 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	895b      	ldrh	r3, [r3, #10]
 8007048:	88ba      	ldrh	r2, [r7, #4]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	80bb      	strh	r3, [r7, #4]
 800704e:	e023      	b.n	8007098 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	895a      	ldrh	r2, [r3, #10]
 8007054:	88bb      	ldrh	r3, [r7, #4]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800705a:	8b3a      	ldrh	r2, [r7, #24]
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	429a      	cmp	r2, r3
 8007060:	d901      	bls.n	8007066 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007066:	8b7b      	ldrh	r3, [r7, #26]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	18d0      	adds	r0, r2, r3
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	88bb      	ldrh	r3, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	8b3a      	ldrh	r2, [r7, #24]
 8007076:	4619      	mov	r1, r3
 8007078:	f008 f911 	bl	800f29e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800707c:	8afa      	ldrh	r2, [r7, #22]
 800707e:	8b3b      	ldrh	r3, [r7, #24]
 8007080:	4413      	add	r3, r2
 8007082:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007084:	8b7a      	ldrh	r2, [r7, #26]
 8007086:	8b3b      	ldrh	r3, [r7, #24]
 8007088:	4413      	add	r3, r2
 800708a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800708c:	88fa      	ldrh	r2, [r7, #6]
 800708e:	8b3b      	ldrh	r3, [r7, #24]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <pbuf_copy_partial+0xca>
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1c4      	bne.n	8007034 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80070aa:	8afb      	ldrh	r3, [r7, #22]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3720      	adds	r7, #32
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	080104dc 	.word	0x080104dc
 80070b8:	08010824 	.word	0x08010824
 80070bc:	0801053c 	.word	0x0801053c
 80070c0:	08010844 	.word	0x08010844

080070c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	603a      	str	r2, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
 80070d0:	460b      	mov	r3, r1
 80070d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	8919      	ldrh	r1, [r3, #8]
 80070d8:	88ba      	ldrh	r2, [r7, #4]
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff fab1 	bl	8006644 <pbuf_alloc>
 80070e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <pbuf_clone+0x2a>
    return NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e011      	b.n	8007112 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f7ff fea3 	bl	8006e3c <pbuf_copy>
 80070f6:	4603      	mov	r3, r0
 80070f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80070fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d006      	beq.n	8007110 <pbuf_clone+0x4c>
 8007102:	4b06      	ldr	r3, [pc, #24]	@ (800711c <pbuf_clone+0x58>)
 8007104:	f240 5224 	movw	r2, #1316	@ 0x524
 8007108:	4905      	ldr	r1, [pc, #20]	@ (8007120 <pbuf_clone+0x5c>)
 800710a:	4806      	ldr	r0, [pc, #24]	@ (8007124 <pbuf_clone+0x60>)
 800710c:	f007 ffec 	bl	800f0e8 <iprintf>
  return q;
 8007110:	68fb      	ldr	r3, [r7, #12]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	080104dc 	.word	0x080104dc
 8007120:	08010950 	.word	0x08010950
 8007124:	0801053c 	.word	0x0801053c

08007128 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800712c:	f007 fedc 	bl	800eee8 <rand>
 8007130:	4603      	mov	r3, r0
 8007132:	b29b      	uxth	r3, r3
 8007134:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007138:	b29b      	uxth	r3, r3
 800713a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800713e:	b29a      	uxth	r2, r3
 8007140:	4b01      	ldr	r3, [pc, #4]	@ (8007148 <tcp_init+0x20>)
 8007142:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007144:	bf00      	nop
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000020 	.word	0x20000020

0800714c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7d1b      	ldrb	r3, [r3, #20]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d105      	bne.n	8007168 <tcp_free+0x1c>
 800715c:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <tcp_free+0x2c>)
 800715e:	22d4      	movs	r2, #212	@ 0xd4
 8007160:	4906      	ldr	r1, [pc, #24]	@ (800717c <tcp_free+0x30>)
 8007162:	4807      	ldr	r0, [pc, #28]	@ (8007180 <tcp_free+0x34>)
 8007164:	f007 ffc0 	bl	800f0e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	2001      	movs	r0, #1
 800716c:	f7fe fef8 	bl	8005f60 <memp_free>
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	080109dc 	.word	0x080109dc
 800717c:	08010a0c 	.word	0x08010a0c
 8007180:	08010a20 	.word	0x08010a20

08007184 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7d1b      	ldrb	r3, [r3, #20]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d105      	bne.n	80071a0 <tcp_free_listen+0x1c>
 8007194:	4b06      	ldr	r3, [pc, #24]	@ (80071b0 <tcp_free_listen+0x2c>)
 8007196:	22df      	movs	r2, #223	@ 0xdf
 8007198:	4906      	ldr	r1, [pc, #24]	@ (80071b4 <tcp_free_listen+0x30>)
 800719a:	4807      	ldr	r0, [pc, #28]	@ (80071b8 <tcp_free_listen+0x34>)
 800719c:	f007 ffa4 	bl	800f0e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	2002      	movs	r0, #2
 80071a4:	f7fe fedc 	bl	8005f60 <memp_free>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	080109dc 	.word	0x080109dc
 80071b4:	08010a48 	.word	0x08010a48
 80071b8:	08010a20 	.word	0x08010a20

080071bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80071c0:	f000 fea4 	bl	8007f0c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80071c4:	4b07      	ldr	r3, [pc, #28]	@ (80071e4 <tcp_tmr+0x28>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	4b05      	ldr	r3, [pc, #20]	@ (80071e4 <tcp_tmr+0x28>)
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	4b04      	ldr	r3, [pc, #16]	@ (80071e4 <tcp_tmr+0x28>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80071dc:	f000 fb54 	bl	8007888 <tcp_slowtmr>
  }
}
 80071e0:	bf00      	nop
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20008165 	.word	0x20008165

080071e8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <tcp_remove_listener+0x1c>
 80071f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <tcp_remove_listener+0x48>)
 80071fa:	22ff      	movs	r2, #255	@ 0xff
 80071fc:	490d      	ldr	r1, [pc, #52]	@ (8007234 <tcp_remove_listener+0x4c>)
 80071fe:	480e      	ldr	r0, [pc, #56]	@ (8007238 <tcp_remove_listener+0x50>)
 8007200:	f007 ff72 	bl	800f0e8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	e00a      	b.n	8007220 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d102      	bne.n	800721a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f1      	bne.n	800720a <tcp_remove_listener+0x22>
    }
  }
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	080109dc 	.word	0x080109dc
 8007234:	08010a64 	.word	0x08010a64
 8007238:	08010a20 	.word	0x08010a20

0800723c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d106      	bne.n	8007258 <tcp_listen_closed+0x1c>
 800724a:	4b14      	ldr	r3, [pc, #80]	@ (800729c <tcp_listen_closed+0x60>)
 800724c:	f240 1211 	movw	r2, #273	@ 0x111
 8007250:	4913      	ldr	r1, [pc, #76]	@ (80072a0 <tcp_listen_closed+0x64>)
 8007252:	4814      	ldr	r0, [pc, #80]	@ (80072a4 <tcp_listen_closed+0x68>)
 8007254:	f007 ff48 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	7d1b      	ldrb	r3, [r3, #20]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d006      	beq.n	800726e <tcp_listen_closed+0x32>
 8007260:	4b0e      	ldr	r3, [pc, #56]	@ (800729c <tcp_listen_closed+0x60>)
 8007262:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007266:	4910      	ldr	r1, [pc, #64]	@ (80072a8 <tcp_listen_closed+0x6c>)
 8007268:	480e      	ldr	r0, [pc, #56]	@ (80072a4 <tcp_listen_closed+0x68>)
 800726a:	f007 ff3d 	bl	800f0e8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800726e:	2301      	movs	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	e00b      	b.n	800728c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007274:	4a0d      	ldr	r2, [pc, #52]	@ (80072ac <tcp_listen_closed+0x70>)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ffb1 	bl	80071e8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b03      	cmp	r3, #3
 8007290:	d9f0      	bls.n	8007274 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007292:	bf00      	nop
 8007294:	bf00      	nop
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	080109dc 	.word	0x080109dc
 80072a0:	08010a8c 	.word	0x08010a8c
 80072a4:	08010a20 	.word	0x08010a20
 80072a8:	08010a98 	.word	0x08010a98
 80072ac:	080129bc 	.word	0x080129bc

080072b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80072b0:	b5b0      	push	{r4, r5, r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af04      	add	r7, sp, #16
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <tcp_close_shutdown+0x20>
 80072c2:	4b63      	ldr	r3, [pc, #396]	@ (8007450 <tcp_close_shutdown+0x1a0>)
 80072c4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80072c8:	4962      	ldr	r1, [pc, #392]	@ (8007454 <tcp_close_shutdown+0x1a4>)
 80072ca:	4863      	ldr	r0, [pc, #396]	@ (8007458 <tcp_close_shutdown+0x1a8>)
 80072cc:	f007 ff0c 	bl	800f0e8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80072d0:	78fb      	ldrb	r3, [r7, #3]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d066      	beq.n	80073a4 <tcp_close_shutdown+0xf4>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7d1b      	ldrb	r3, [r3, #20]
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d003      	beq.n	80072e6 <tcp_close_shutdown+0x36>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7d1b      	ldrb	r3, [r3, #20]
 80072e2:	2b07      	cmp	r3, #7
 80072e4:	d15e      	bne.n	80073a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d104      	bne.n	80072f8 <tcp_close_shutdown+0x48>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80072f6:	d055      	beq.n	80073a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8b5b      	ldrh	r3, [r3, #26]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <tcp_close_shutdown+0x62>
 8007304:	4b52      	ldr	r3, [pc, #328]	@ (8007450 <tcp_close_shutdown+0x1a0>)
 8007306:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800730a:	4954      	ldr	r1, [pc, #336]	@ (800745c <tcp_close_shutdown+0x1ac>)
 800730c:	4852      	ldr	r0, [pc, #328]	@ (8007458 <tcp_close_shutdown+0x1a8>)
 800730e:	f007 feeb 	bl	800f0e8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800731a:	687d      	ldr	r5, [r7, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3304      	adds	r3, #4
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	8ad2      	ldrh	r2, [r2, #22]
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	8b09      	ldrh	r1, [r1, #24]
 8007328:	9102      	str	r1, [sp, #8]
 800732a:	9201      	str	r2, [sp, #4]
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	462b      	mov	r3, r5
 8007330:	4622      	mov	r2, r4
 8007332:	4601      	mov	r1, r0
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f004 fe8d 	bl	800c054 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 f8c8 	bl	80084d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007340:	4b47      	ldr	r3, [pc, #284]	@ (8007460 <tcp_close_shutdown+0x1b0>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	429a      	cmp	r2, r3
 8007348:	d105      	bne.n	8007356 <tcp_close_shutdown+0xa6>
 800734a:	4b45      	ldr	r3, [pc, #276]	@ (8007460 <tcp_close_shutdown+0x1b0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4a43      	ldr	r2, [pc, #268]	@ (8007460 <tcp_close_shutdown+0x1b0>)
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e013      	b.n	800737e <tcp_close_shutdown+0xce>
 8007356:	4b42      	ldr	r3, [pc, #264]	@ (8007460 <tcp_close_shutdown+0x1b0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e00c      	b.n	8007378 <tcp_close_shutdown+0xc8>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d104      	bne.n	8007372 <tcp_close_shutdown+0xc2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	60da      	str	r2, [r3, #12]
 8007370:	e005      	b.n	800737e <tcp_close_shutdown+0xce>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1ef      	bne.n	800735e <tcp_close_shutdown+0xae>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	60da      	str	r2, [r3, #12]
 8007384:	4b37      	ldr	r3, [pc, #220]	@ (8007464 <tcp_close_shutdown+0x1b4>)
 8007386:	2201      	movs	r2, #1
 8007388:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800738a:	4b37      	ldr	r3, [pc, #220]	@ (8007468 <tcp_close_shutdown+0x1b8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d102      	bne.n	800739a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007394:	f003 fd5c 	bl	800ae50 <tcp_trigger_input_pcb_close>
 8007398:	e002      	b.n	80073a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fed6 	bl	800714c <tcp_free>
      }
      return ERR_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	e050      	b.n	8007446 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7d1b      	ldrb	r3, [r3, #20]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d03b      	beq.n	8007424 <tcp_close_shutdown+0x174>
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	dc44      	bgt.n	800743a <tcp_close_shutdown+0x18a>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <tcp_close_shutdown+0x10a>
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d02a      	beq.n	800740e <tcp_close_shutdown+0x15e>
 80073b8:	e03f      	b.n	800743a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8adb      	ldrh	r3, [r3, #22]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d021      	beq.n	8007406 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80073c2:	4b2a      	ldr	r3, [pc, #168]	@ (800746c <tcp_close_shutdown+0x1bc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d105      	bne.n	80073d8 <tcp_close_shutdown+0x128>
 80073cc:	4b27      	ldr	r3, [pc, #156]	@ (800746c <tcp_close_shutdown+0x1bc>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	4a26      	ldr	r2, [pc, #152]	@ (800746c <tcp_close_shutdown+0x1bc>)
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	e013      	b.n	8007400 <tcp_close_shutdown+0x150>
 80073d8:	4b24      	ldr	r3, [pc, #144]	@ (800746c <tcp_close_shutdown+0x1bc>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	e00c      	b.n	80073fa <tcp_close_shutdown+0x14a>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d104      	bne.n	80073f4 <tcp_close_shutdown+0x144>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	60da      	str	r2, [r3, #12]
 80073f2:	e005      	b.n	8007400 <tcp_close_shutdown+0x150>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1ef      	bne.n	80073e0 <tcp_close_shutdown+0x130>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fea0 	bl	800714c <tcp_free>
      break;
 800740c:	e01a      	b.n	8007444 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff ff14 	bl	800723c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	4816      	ldr	r0, [pc, #88]	@ (8007470 <tcp_close_shutdown+0x1c0>)
 8007418:	f001 f8aa 	bl	8008570 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff feb1 	bl	8007184 <tcp_free_listen>
      break;
 8007422:	e00f      	b.n	8007444 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	480e      	ldr	r0, [pc, #56]	@ (8007460 <tcp_close_shutdown+0x1b0>)
 8007428:	f001 f8a2 	bl	8008570 <tcp_pcb_remove>
 800742c:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <tcp_close_shutdown+0x1b4>)
 800742e:	2201      	movs	r2, #1
 8007430:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fe8a 	bl	800714c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007438:	e004      	b.n	8007444 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f81a 	bl	8007474 <tcp_close_shutdown_fin>
 8007440:	4603      	mov	r3, r0
 8007442:	e000      	b.n	8007446 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bdb0      	pop	{r4, r5, r7, pc}
 800744e:	bf00      	nop
 8007450:	080109dc 	.word	0x080109dc
 8007454:	08010ab0 	.word	0x08010ab0
 8007458:	08010a20 	.word	0x08010a20
 800745c:	08010ad0 	.word	0x08010ad0
 8007460:	2000815c 	.word	0x2000815c
 8007464:	20008164 	.word	0x20008164
 8007468:	2000819c 	.word	0x2000819c
 800746c:	20008154 	.word	0x20008154
 8007470:	20008158 	.word	0x20008158

08007474 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <tcp_close_shutdown_fin+0x1c>
 8007482:	4b2e      	ldr	r3, [pc, #184]	@ (800753c <tcp_close_shutdown_fin+0xc8>)
 8007484:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007488:	492d      	ldr	r1, [pc, #180]	@ (8007540 <tcp_close_shutdown_fin+0xcc>)
 800748a:	482e      	ldr	r0, [pc, #184]	@ (8007544 <tcp_close_shutdown_fin+0xd0>)
 800748c:	f007 fe2c 	bl	800f0e8 <iprintf>

  switch (pcb->state) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7d1b      	ldrb	r3, [r3, #20]
 8007494:	2b07      	cmp	r3, #7
 8007496:	d020      	beq.n	80074da <tcp_close_shutdown_fin+0x66>
 8007498:	2b07      	cmp	r3, #7
 800749a:	dc2b      	bgt.n	80074f4 <tcp_close_shutdown_fin+0x80>
 800749c:	2b03      	cmp	r3, #3
 800749e:	d002      	beq.n	80074a6 <tcp_close_shutdown_fin+0x32>
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d00d      	beq.n	80074c0 <tcp_close_shutdown_fin+0x4c>
 80074a4:	e026      	b.n	80074f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f003 fee2 	bl	800b270 <tcp_send_fin>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80074b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d11f      	bne.n	80074f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2205      	movs	r2, #5
 80074bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80074be:	e01b      	b.n	80074f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f003 fed5 	bl	800b270 <tcp_send_fin>
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80074ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d114      	bne.n	80074fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2205      	movs	r2, #5
 80074d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80074d8:	e010      	b.n	80074fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f003 fec8 	bl	800b270 <tcp_send_fin>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80074e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2209      	movs	r2, #9
 80074f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80074f2:	e005      	b.n	8007500 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e01c      	b.n	8007532 <tcp_close_shutdown_fin+0xbe>
      break;
 80074f8:	bf00      	nop
 80074fa:	e002      	b.n	8007502 <tcp_close_shutdown_fin+0x8e>
      break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <tcp_close_shutdown_fin+0x8e>
      break;
 8007500:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d103      	bne.n	8007512 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f003 ffee 	bl	800b4ec <tcp_output>
 8007510:	e00d      	b.n	800752e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800751a:	d108      	bne.n	800752e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	8b5b      	ldrh	r3, [r3, #26]
 8007520:	f043 0308 	orr.w	r3, r3, #8
 8007524:	b29a      	uxth	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e001      	b.n	8007532 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800752e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	080109dc 	.word	0x080109dc
 8007540:	08010a8c 	.word	0x08010a8c
 8007544:	08010a20 	.word	0x08010a20

08007548 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <tcp_close+0x22>
 8007556:	4b0f      	ldr	r3, [pc, #60]	@ (8007594 <tcp_close+0x4c>)
 8007558:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800755c:	490e      	ldr	r1, [pc, #56]	@ (8007598 <tcp_close+0x50>)
 800755e:	480f      	ldr	r0, [pc, #60]	@ (800759c <tcp_close+0x54>)
 8007560:	f007 fdc2 	bl	800f0e8 <iprintf>
 8007564:	f06f 030f 	mvn.w	r3, #15
 8007568:	e00f      	b.n	800758a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7d1b      	ldrb	r3, [r3, #20]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d006      	beq.n	8007580 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8b5b      	ldrh	r3, [r3, #26]
 8007576:	f043 0310 	orr.w	r3, r3, #16
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007580:	2101      	movs	r1, #1
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff fe94 	bl	80072b0 <tcp_close_shutdown>
 8007588:	4603      	mov	r3, r0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	080109dc 	.word	0x080109dc
 8007598:	08010aec 	.word	0x08010aec
 800759c:	08010a20 	.word	0x08010a20

080075a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08e      	sub	sp, #56	@ 0x38
 80075a4:	af04      	add	r7, sp, #16
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d107      	bne.n	80075c0 <tcp_abandon+0x20>
 80075b0:	4b52      	ldr	r3, [pc, #328]	@ (80076fc <tcp_abandon+0x15c>)
 80075b2:	f240 223d 	movw	r2, #573	@ 0x23d
 80075b6:	4952      	ldr	r1, [pc, #328]	@ (8007700 <tcp_abandon+0x160>)
 80075b8:	4852      	ldr	r0, [pc, #328]	@ (8007704 <tcp_abandon+0x164>)
 80075ba:	f007 fd95 	bl	800f0e8 <iprintf>
 80075be:	e099      	b.n	80076f4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	7d1b      	ldrb	r3, [r3, #20]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d106      	bne.n	80075d6 <tcp_abandon+0x36>
 80075c8:	4b4c      	ldr	r3, [pc, #304]	@ (80076fc <tcp_abandon+0x15c>)
 80075ca:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80075ce:	494e      	ldr	r1, [pc, #312]	@ (8007708 <tcp_abandon+0x168>)
 80075d0:	484c      	ldr	r0, [pc, #304]	@ (8007704 <tcp_abandon+0x164>)
 80075d2:	f007 fd89 	bl	800f0e8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7d1b      	ldrb	r3, [r3, #20]
 80075da:	2b0a      	cmp	r3, #10
 80075dc:	d107      	bne.n	80075ee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	484a      	ldr	r0, [pc, #296]	@ (800770c <tcp_abandon+0x16c>)
 80075e2:	f000 ffc5 	bl	8008570 <tcp_pcb_remove>
    tcp_free(pcb);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fdb0 	bl	800714c <tcp_free>
 80075ec:	e082      	b.n	80076f4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007600:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007608:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	7d1b      	ldrb	r3, [r3, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d126      	bne.n	8007666 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8adb      	ldrh	r3, [r3, #22]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d02e      	beq.n	800767e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007620:	4b3b      	ldr	r3, [pc, #236]	@ (8007710 <tcp_abandon+0x170>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	429a      	cmp	r2, r3
 8007628:	d105      	bne.n	8007636 <tcp_abandon+0x96>
 800762a:	4b39      	ldr	r3, [pc, #228]	@ (8007710 <tcp_abandon+0x170>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	4a37      	ldr	r2, [pc, #220]	@ (8007710 <tcp_abandon+0x170>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	e013      	b.n	800765e <tcp_abandon+0xbe>
 8007636:	4b36      	ldr	r3, [pc, #216]	@ (8007710 <tcp_abandon+0x170>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	e00c      	b.n	8007658 <tcp_abandon+0xb8>
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d104      	bne.n	8007652 <tcp_abandon+0xb2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	60da      	str	r2, [r3, #12]
 8007650:	e005      	b.n	800765e <tcp_abandon+0xbe>
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1ef      	bne.n	800763e <tcp_abandon+0x9e>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	60da      	str	r2, [r3, #12]
 8007664:	e00b      	b.n	800767e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	8adb      	ldrh	r3, [r3, #22]
 800766e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007670:	6879      	ldr	r1, [r7, #4]
 8007672:	4828      	ldr	r0, [pc, #160]	@ (8007714 <tcp_abandon+0x174>)
 8007674:	f000 ff7c 	bl	8008570 <tcp_pcb_remove>
 8007678:	4b27      	ldr	r3, [pc, #156]	@ (8007718 <tcp_abandon+0x178>)
 800767a:	2201      	movs	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007682:	2b00      	cmp	r3, #0
 8007684:	d004      	beq.n	8007690 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fd1e 	bl	80080cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fd15 	bl	80080cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fd0c 	bl	80080cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00e      	beq.n	80076d8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	8b12      	ldrh	r2, [r2, #24]
 80076c4:	9202      	str	r2, [sp, #8]
 80076c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80076c8:	9201      	str	r2, [sp, #4]
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	460b      	mov	r3, r1
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	69b9      	ldr	r1, [r7, #24]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f004 fcbe 	bl	800c054 <tcp_rst>
    }
    last_state = pcb->state;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	7d1b      	ldrb	r3, [r3, #20]
 80076dc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff fd34 	bl	800714c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <tcp_abandon+0x154>
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f06f 010c 	mvn.w	r1, #12
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	4798      	blx	r3
  }
}
 80076f4:	3728      	adds	r7, #40	@ 0x28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	080109dc 	.word	0x080109dc
 8007700:	08010b20 	.word	0x08010b20
 8007704:	08010a20 	.word	0x08010a20
 8007708:	08010b3c 	.word	0x08010b3c
 800770c:	20008160 	.word	0x20008160
 8007710:	20008154 	.word	0x20008154
 8007714:	2000815c 	.word	0x2000815c
 8007718:	20008164 	.word	0x20008164

0800771c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007724:	2101      	movs	r1, #1
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff ff3a 	bl	80075a0 <tcp_abandon>
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d106      	bne.n	8007750 <tcp_update_rcv_ann_wnd+0x1c>
 8007742:	4b25      	ldr	r3, [pc, #148]	@ (80077d8 <tcp_update_rcv_ann_wnd+0xa4>)
 8007744:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8007748:	4924      	ldr	r1, [pc, #144]	@ (80077dc <tcp_update_rcv_ann_wnd+0xa8>)
 800774a:	4825      	ldr	r0, [pc, #148]	@ (80077e0 <tcp_update_rcv_ann_wnd+0xac>)
 800774c:	f007 fccc 	bl	800f0e8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007758:	4413      	add	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8007764:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007768:	bf28      	it	cs
 800776a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800776e:	b292      	uxth	r2, r2
 8007770:	4413      	add	r3, r2
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	db08      	blt.n	800778c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	e020      	b.n	80077ce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	dd03      	ble.n	80077a2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80077a0:	e014      	b.n	80077cc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b4:	d306      	bcc.n	80077c4 <tcp_update_rcv_ann_wnd+0x90>
 80077b6:	4b08      	ldr	r3, [pc, #32]	@ (80077d8 <tcp_update_rcv_ann_wnd+0xa4>)
 80077b8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80077bc:	4909      	ldr	r1, [pc, #36]	@ (80077e4 <tcp_update_rcv_ann_wnd+0xb0>)
 80077be:	4808      	ldr	r0, [pc, #32]	@ (80077e0 <tcp_update_rcv_ann_wnd+0xac>)
 80077c0:	f007 fc92 	bl	800f0e8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80077cc:	2300      	movs	r3, #0
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	080109dc 	.word	0x080109dc
 80077dc:	08010c38 	.word	0x08010c38
 80077e0:	08010a20 	.word	0x08010a20
 80077e4:	08010c5c 	.word	0x08010c5c

080077e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d107      	bne.n	800780a <tcp_recved+0x22>
 80077fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007878 <tcp_recved+0x90>)
 80077fc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8007800:	491e      	ldr	r1, [pc, #120]	@ (800787c <tcp_recved+0x94>)
 8007802:	481f      	ldr	r0, [pc, #124]	@ (8007880 <tcp_recved+0x98>)
 8007804:	f007 fc70 	bl	800f0e8 <iprintf>
 8007808:	e032      	b.n	8007870 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7d1b      	ldrb	r3, [r3, #20]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d106      	bne.n	8007820 <tcp_recved+0x38>
 8007812:	4b19      	ldr	r3, [pc, #100]	@ (8007878 <tcp_recved+0x90>)
 8007814:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8007818:	491a      	ldr	r1, [pc, #104]	@ (8007884 <tcp_recved+0x9c>)
 800781a:	4819      	ldr	r0, [pc, #100]	@ (8007880 <tcp_recved+0x98>)
 800781c:	f007 fc64 	bl	800f0e8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007824:	887b      	ldrh	r3, [r7, #2]
 8007826:	4413      	add	r3, r2
 8007828:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800782a:	89fb      	ldrh	r3, [r7, #14]
 800782c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007830:	d804      	bhi.n	800783c <tcp_recved+0x54>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007836:	89fa      	ldrh	r2, [r7, #14]
 8007838:	429a      	cmp	r2, r3
 800783a:	d204      	bcs.n	8007846 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007842:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007844:	e002      	b.n	800784c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	89fa      	ldrh	r2, [r7, #14]
 800784a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ff71 	bl	8007734 <tcp_update_rcv_ann_wnd>
 8007852:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800785a:	d309      	bcc.n	8007870 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	8b5b      	ldrh	r3, [r3, #26]
 8007860:	f043 0302 	orr.w	r3, r3, #2
 8007864:	b29a      	uxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f003 fe3e 	bl	800b4ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	080109dc 	.word	0x080109dc
 800787c:	08010c78 	.word	0x08010c78
 8007880:	08010a20 	.word	0x08010a20
 8007884:	08010c90 	.word	0x08010c90

08007888 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007888:	b5b0      	push	{r4, r5, r7, lr}
 800788a:	b090      	sub	sp, #64	@ 0x40
 800788c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8007894:	4b95      	ldr	r3, [pc, #596]	@ (8007aec <tcp_slowtmr+0x264>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	4a94      	ldr	r2, [pc, #592]	@ (8007aec <tcp_slowtmr+0x264>)
 800789c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800789e:	4b94      	ldr	r3, [pc, #592]	@ (8007af0 <tcp_slowtmr+0x268>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	3301      	adds	r3, #1
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	4b92      	ldr	r3, [pc, #584]	@ (8007af0 <tcp_slowtmr+0x268>)
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	e000      	b.n	80078ae <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80078ac:	bf00      	nop
  prev = NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80078b2:	4b90      	ldr	r3, [pc, #576]	@ (8007af4 <tcp_slowtmr+0x26c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80078b8:	e29d      	b.n	8007df6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80078ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078bc:	7d1b      	ldrb	r3, [r3, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <tcp_slowtmr+0x48>
 80078c2:	4b8d      	ldr	r3, [pc, #564]	@ (8007af8 <tcp_slowtmr+0x270>)
 80078c4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80078c8:	498c      	ldr	r1, [pc, #560]	@ (8007afc <tcp_slowtmr+0x274>)
 80078ca:	488d      	ldr	r0, [pc, #564]	@ (8007b00 <tcp_slowtmr+0x278>)
 80078cc:	f007 fc0c 	bl	800f0e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80078d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d2:	7d1b      	ldrb	r3, [r3, #20]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d106      	bne.n	80078e6 <tcp_slowtmr+0x5e>
 80078d8:	4b87      	ldr	r3, [pc, #540]	@ (8007af8 <tcp_slowtmr+0x270>)
 80078da:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80078de:	4989      	ldr	r1, [pc, #548]	@ (8007b04 <tcp_slowtmr+0x27c>)
 80078e0:	4887      	ldr	r0, [pc, #540]	@ (8007b00 <tcp_slowtmr+0x278>)
 80078e2:	f007 fc01 	bl	800f0e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80078e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e8:	7d1b      	ldrb	r3, [r3, #20]
 80078ea:	2b0a      	cmp	r3, #10
 80078ec:	d106      	bne.n	80078fc <tcp_slowtmr+0x74>
 80078ee:	4b82      	ldr	r3, [pc, #520]	@ (8007af8 <tcp_slowtmr+0x270>)
 80078f0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80078f4:	4984      	ldr	r1, [pc, #528]	@ (8007b08 <tcp_slowtmr+0x280>)
 80078f6:	4882      	ldr	r0, [pc, #520]	@ (8007b00 <tcp_slowtmr+0x278>)
 80078f8:	f007 fbf6 	bl	800f0e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80078fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fe:	7f9a      	ldrb	r2, [r3, #30]
 8007900:	4b7b      	ldr	r3, [pc, #492]	@ (8007af0 <tcp_slowtmr+0x268>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d105      	bne.n	8007914 <tcp_slowtmr+0x8c>
      prev = pcb;
 8007908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8007912:	e270      	b.n	8007df6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8007914:	4b76      	ldr	r3, [pc, #472]	@ (8007af0 <tcp_slowtmr+0x268>)
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792a:	7d1b      	ldrb	r3, [r3, #20]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d10a      	bne.n	8007946 <tcp_slowtmr+0xbe>
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007936:	2b05      	cmp	r3, #5
 8007938:	d905      	bls.n	8007946 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800793a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800793e:	3301      	adds	r3, #1
 8007940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007944:	e11e      	b.n	8007b84 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007948:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800794c:	2b0b      	cmp	r3, #11
 800794e:	d905      	bls.n	800795c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007954:	3301      	adds	r3, #1
 8007956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800795a:	e113      	b.n	8007b84 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800795c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007962:	2b00      	cmp	r3, #0
 8007964:	d075      	beq.n	8007a52 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796a:	2b00      	cmp	r3, #0
 800796c:	d006      	beq.n	800797c <tcp_slowtmr+0xf4>
 800796e:	4b62      	ldr	r3, [pc, #392]	@ (8007af8 <tcp_slowtmr+0x270>)
 8007970:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8007974:	4965      	ldr	r1, [pc, #404]	@ (8007b0c <tcp_slowtmr+0x284>)
 8007976:	4862      	ldr	r0, [pc, #392]	@ (8007b00 <tcp_slowtmr+0x278>)
 8007978:	f007 fbb6 	bl	800f0e8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800797c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <tcp_slowtmr+0x10a>
 8007984:	4b5c      	ldr	r3, [pc, #368]	@ (8007af8 <tcp_slowtmr+0x270>)
 8007986:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800798a:	4961      	ldr	r1, [pc, #388]	@ (8007b10 <tcp_slowtmr+0x288>)
 800798c:	485c      	ldr	r0, [pc, #368]	@ (8007b00 <tcp_slowtmr+0x278>)
 800798e:	f007 fbab 	bl	800f0e8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007994:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8007998:	2b0b      	cmp	r3, #11
 800799a:	d905      	bls.n	80079a8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800799c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079a0:	3301      	adds	r3, #1
 80079a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80079a6:	e0ed      	b.n	8007b84 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80079ae:	3b01      	subs	r3, #1
 80079b0:	4a58      	ldr	r2, [pc, #352]	@ (8007b14 <tcp_slowtmr+0x28c>)
 80079b2:	5cd3      	ldrb	r3, [r2, r3]
 80079b4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80079b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80079bc:	7c7a      	ldrb	r2, [r7, #17]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d907      	bls.n	80079d2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80079c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80079c8:	3301      	adds	r3, #1
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80079d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80079d8:	7c7a      	ldrb	r2, [r7, #17]
 80079da:	429a      	cmp	r2, r3
 80079dc:	f200 80d2 	bhi.w	8007b84 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80079e0:	2301      	movs	r3, #1
 80079e2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80079e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d108      	bne.n	8007a00 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80079ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079f0:	f004 fc24 	bl	800c23c <tcp_zero_window_probe>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d014      	beq.n	8007a24 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80079fa:	2300      	movs	r3, #0
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	e011      	b.n	8007a24 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a06:	4619      	mov	r1, r3
 8007a08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a0a:	f003 fae9 	bl	800afe0 <tcp_split_unsent_seg>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d107      	bne.n	8007a24 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8007a14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a16:	f003 fd69 	bl	800b4ec <tcp_output>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 80ac 	beq.w	8007b84 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a36:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007a3a:	2b06      	cmp	r3, #6
 8007a3c:	f200 80a2 	bhi.w	8007b84 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a42:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007a46:	3301      	adds	r3, #1
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007a50:	e098      	b.n	8007b84 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	db0f      	blt.n	8007a7c <tcp_slowtmr+0x1f4>
 8007a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007a62:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d008      	beq.n	8007a7c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3301      	adds	r3, #1
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	b21a      	sxth	r2, r3
 8007a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	db7b      	blt.n	8007b84 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007a8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a8e:	f004 f821 	bl	800bad4 <tcp_rexmit_rto_prepare>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d007      	beq.n	8007aa8 <tcp_slowtmr+0x220>
 8007a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d171      	bne.n	8007b84 <tcp_slowtmr+0x2fc>
 8007aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d06d      	beq.n	8007b84 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8007aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aaa:	7d1b      	ldrb	r3, [r3, #20]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d03a      	beq.n	8007b26 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ab6:	2b0c      	cmp	r3, #12
 8007ab8:	bf28      	it	cs
 8007aba:	230c      	movcs	r3, #12
 8007abc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007ac4:	10db      	asrs	r3, r3, #3
 8007ac6:	b21b      	sxth	r3, r3
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007ad0:	4413      	add	r3, r2
 8007ad2:	7efa      	ldrb	r2, [r7, #27]
 8007ad4:	4910      	ldr	r1, [pc, #64]	@ (8007b18 <tcp_slowtmr+0x290>)
 8007ad6:	5c8a      	ldrb	r2, [r1, r2]
 8007ad8:	4093      	lsls	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	dc1a      	bgt.n	8007b1c <tcp_slowtmr+0x294>
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	b21a      	sxth	r2, r3
 8007aea:	e019      	b.n	8007b20 <tcp_slowtmr+0x298>
 8007aec:	20008150 	.word	0x20008150
 8007af0:	20008166 	.word	0x20008166
 8007af4:	2000815c 	.word	0x2000815c
 8007af8:	080109dc 	.word	0x080109dc
 8007afc:	08010d20 	.word	0x08010d20
 8007b00:	08010a20 	.word	0x08010a20
 8007b04:	08010d4c 	.word	0x08010d4c
 8007b08:	08010d78 	.word	0x08010d78
 8007b0c:	08010da8 	.word	0x08010da8
 8007b10:	08010ddc 	.word	0x08010ddc
 8007b14:	080129b4 	.word	0x080129b4
 8007b18:	080129a4 	.word	0x080129a4
 8007b1c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8007b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b28:	2200      	movs	r2, #0
 8007b2a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8007b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	bf28      	it	cs
 8007b3c:	4613      	movcs	r3, r2
 8007b3e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007b40:	8a7b      	ldrh	r3, [r7, #18]
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b48:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8007b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d206      	bcs.n	8007b6c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b72:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8007b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007b7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b80:	f004 f818 	bl	800bbb4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8007b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b86:	7d1b      	ldrb	r3, [r3, #20]
 8007b88:	2b06      	cmp	r3, #6
 8007b8a:	d111      	bne.n	8007bb0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8007b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8e:	8b5b      	ldrh	r3, [r3, #26]
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b98:	4b9c      	ldr	r3, [pc, #624]	@ (8007e0c <tcp_slowtmr+0x584>)
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b28      	cmp	r3, #40	@ 0x28
 8007ba4:	d904      	bls.n	8007bb0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8007ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007baa:	3301      	adds	r3, #1
 8007bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	7a5b      	ldrb	r3, [r3, #9]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d04a      	beq.n	8007c52 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d003      	beq.n	8007bcc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8007bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007bc8:	2b07      	cmp	r3, #7
 8007bca:	d142      	bne.n	8007c52 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bcc:	4b8f      	ldr	r3, [pc, #572]	@ (8007e0c <tcp_slowtmr+0x584>)
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8007e10 <tcp_slowtmr+0x588>)
 8007bde:	440b      	add	r3, r1
 8007be0:	498c      	ldr	r1, [pc, #560]	@ (8007e14 <tcp_slowtmr+0x58c>)
 8007be2:	fba1 1303 	umull	r1, r3, r1, r3
 8007be6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d90a      	bls.n	8007c02 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8007bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8007bf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007c00:	e027      	b.n	8007c52 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c02:	4b82      	ldr	r3, [pc, #520]	@ (8007e0c <tcp_slowtmr+0x584>)
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8007c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c14:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007c18:	4618      	mov	r0, r3
 8007c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8007e18 <tcp_slowtmr+0x590>)
 8007c1c:	fb00 f303 	mul.w	r3, r0, r3
 8007c20:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007c22:	497c      	ldr	r1, [pc, #496]	@ (8007e14 <tcp_slowtmr+0x58c>)
 8007c24:	fba1 1303 	umull	r1, r3, r1, r3
 8007c28:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d911      	bls.n	8007c52 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c30:	f004 fac4 	bl	800c1bc <tcp_keepalive>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8007c3a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d107      	bne.n	8007c52 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c44:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007c48:	3301      	adds	r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8007c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d011      	beq.n	8007c7e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8007e0c <tcp_slowtmr+0x584>)
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	1ad2      	subs	r2, r2, r3
 8007c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	440b      	add	r3, r1
 8007c72:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d302      	bcc.n	8007c7e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8007c78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c7a:	f000 fddd 	bl	8008838 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8007c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c80:	7d1b      	ldrb	r3, [r3, #20]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d10b      	bne.n	8007c9e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c86:	4b61      	ldr	r3, [pc, #388]	@ (8007e0c <tcp_slowtmr+0x584>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b28      	cmp	r3, #40	@ 0x28
 8007c92:	d904      	bls.n	8007c9e <tcp_slowtmr+0x416>
        ++pcb_remove;
 8007c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c98:	3301      	adds	r3, #1
 8007c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8007c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca0:	7d1b      	ldrb	r3, [r3, #20]
 8007ca2:	2b09      	cmp	r3, #9
 8007ca4:	d10b      	bne.n	8007cbe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007ca6:	4b59      	ldr	r3, [pc, #356]	@ (8007e0c <tcp_slowtmr+0x584>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2bf0      	cmp	r3, #240	@ 0xf0
 8007cb2:	d904      	bls.n	8007cbe <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cb8:	3301      	adds	r3, #1
 8007cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8007cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d060      	beq.n	8007d88 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8007cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ccc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8007cce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cd0:	f000 fbfe 	bl	80084d0 <tcp_pcb_purge>
      if (prev != NULL) {
 8007cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d010      	beq.n	8007cfc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007cda:	4b50      	ldr	r3, [pc, #320]	@ (8007e1c <tcp_slowtmr+0x594>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d106      	bne.n	8007cf2 <tcp_slowtmr+0x46a>
 8007ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8007e20 <tcp_slowtmr+0x598>)
 8007ce6:	f240 526d 	movw	r2, #1389	@ 0x56d
 8007cea:	494e      	ldr	r1, [pc, #312]	@ (8007e24 <tcp_slowtmr+0x59c>)
 8007cec:	484e      	ldr	r0, [pc, #312]	@ (8007e28 <tcp_slowtmr+0x5a0>)
 8007cee:	f007 f9fb 	bl	800f0e8 <iprintf>
        prev->next = pcb->next;
 8007cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf4:	68da      	ldr	r2, [r3, #12]
 8007cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf8:	60da      	str	r2, [r3, #12]
 8007cfa:	e00f      	b.n	8007d1c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007cfc:	4b47      	ldr	r3, [pc, #284]	@ (8007e1c <tcp_slowtmr+0x594>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d006      	beq.n	8007d14 <tcp_slowtmr+0x48c>
 8007d06:	4b46      	ldr	r3, [pc, #280]	@ (8007e20 <tcp_slowtmr+0x598>)
 8007d08:	f240 5271 	movw	r2, #1393	@ 0x571
 8007d0c:	4947      	ldr	r1, [pc, #284]	@ (8007e2c <tcp_slowtmr+0x5a4>)
 8007d0e:	4846      	ldr	r0, [pc, #280]	@ (8007e28 <tcp_slowtmr+0x5a0>)
 8007d10:	f007 f9ea 	bl	800f0e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	4a40      	ldr	r2, [pc, #256]	@ (8007e1c <tcp_slowtmr+0x594>)
 8007d1a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8007d1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d013      	beq.n	8007d4c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d26:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007d2c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8007d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d30:	3304      	adds	r3, #4
 8007d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d34:	8ad2      	ldrh	r2, [r2, #22]
 8007d36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d38:	8b09      	ldrh	r1, [r1, #24]
 8007d3a:	9102      	str	r1, [sp, #8]
 8007d3c:	9201      	str	r2, [sp, #4]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	462b      	mov	r3, r5
 8007d42:	4622      	mov	r2, r4
 8007d44:	4601      	mov	r1, r0
 8007d46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d48:	f004 f984 	bl	800c054 <tcp_rst>
      err_arg = pcb->callback_arg;
 8007d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	7d1b      	ldrb	r3, [r3, #20]
 8007d56:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007d62:	6838      	ldr	r0, [r7, #0]
 8007d64:	f7ff f9f2 	bl	800714c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007d68:	4b31      	ldr	r3, [pc, #196]	@ (8007e30 <tcp_slowtmr+0x5a8>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <tcp_slowtmr+0x4f6>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f06f 010c 	mvn.w	r1, #12
 8007d7a:	68b8      	ldr	r0, [r7, #8]
 8007d7c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8007e30 <tcp_slowtmr+0x5a8>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d037      	beq.n	8007df6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007d86:	e592      	b.n	80078ae <tcp_slowtmr+0x26>
      prev = pcb;
 8007d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8007d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d94:	7f1b      	ldrb	r3, [r3, #28]
 8007d96:	3301      	adds	r3, #1
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da0:	7f1a      	ldrb	r2, [r3, #28]
 8007da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da4:	7f5b      	ldrb	r3, [r3, #29]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d325      	bcc.n	8007df6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dac:	2200      	movs	r2, #0
 8007dae:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8007db0:	4b1f      	ldr	r3, [pc, #124]	@ (8007e30 <tcp_slowtmr+0x5a8>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00b      	beq.n	8007dd8 <tcp_slowtmr+0x550>
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dc8:	6912      	ldr	r2, [r2, #16]
 8007dca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007dd6:	e002      	b.n	8007dde <tcp_slowtmr+0x556>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8007dde:	4b14      	ldr	r3, [pc, #80]	@ (8007e30 <tcp_slowtmr+0x5a8>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f47f ad62 	bne.w	80078ac <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007de8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007df0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007df2:	f003 fb7b 	bl	800b4ec <tcp_output>
  while (pcb != NULL) {
 8007df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f47f ad5e 	bne.w	80078ba <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8007e02:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <tcp_slowtmr+0x5ac>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007e08:	e069      	b.n	8007ede <tcp_slowtmr+0x656>
 8007e0a:	bf00      	nop
 8007e0c:	20008150 	.word	0x20008150
 8007e10:	000a4cb8 	.word	0x000a4cb8
 8007e14:	10624dd3 	.word	0x10624dd3
 8007e18:	000124f8 	.word	0x000124f8
 8007e1c:	2000815c 	.word	0x2000815c
 8007e20:	080109dc 	.word	0x080109dc
 8007e24:	08010e14 	.word	0x08010e14
 8007e28:	08010a20 	.word	0x08010a20
 8007e2c:	08010e40 	.word	0x08010e40
 8007e30:	20008164 	.word	0x20008164
 8007e34:	20008160 	.word	0x20008160
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3a:	7d1b      	ldrb	r3, [r3, #20]
 8007e3c:	2b0a      	cmp	r3, #10
 8007e3e:	d006      	beq.n	8007e4e <tcp_slowtmr+0x5c6>
 8007e40:	4b2b      	ldr	r3, [pc, #172]	@ (8007ef0 <tcp_slowtmr+0x668>)
 8007e42:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8007e46:	492b      	ldr	r1, [pc, #172]	@ (8007ef4 <tcp_slowtmr+0x66c>)
 8007e48:	482b      	ldr	r0, [pc, #172]	@ (8007ef8 <tcp_slowtmr+0x670>)
 8007e4a:	f007 f94d 	bl	800f0e8 <iprintf>
    pcb_remove = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007e54:	4b29      	ldr	r3, [pc, #164]	@ (8007efc <tcp_slowtmr+0x674>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2bf0      	cmp	r3, #240	@ 0xf0
 8007e60:	d904      	bls.n	8007e6c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8007e62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e66:	3301      	adds	r3, #1
 8007e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d02f      	beq.n	8007ed4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007e74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e76:	f000 fb2b 	bl	80084d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d010      	beq.n	8007ea2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007e80:	4b1f      	ldr	r3, [pc, #124]	@ (8007f00 <tcp_slowtmr+0x678>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d106      	bne.n	8007e98 <tcp_slowtmr+0x610>
 8007e8a:	4b19      	ldr	r3, [pc, #100]	@ (8007ef0 <tcp_slowtmr+0x668>)
 8007e8c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007e90:	491c      	ldr	r1, [pc, #112]	@ (8007f04 <tcp_slowtmr+0x67c>)
 8007e92:	4819      	ldr	r0, [pc, #100]	@ (8007ef8 <tcp_slowtmr+0x670>)
 8007e94:	f007 f928 	bl	800f0e8 <iprintf>
        prev->next = pcb->next;
 8007e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9e:	60da      	str	r2, [r3, #12]
 8007ea0:	e00f      	b.n	8007ec2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007ea2:	4b17      	ldr	r3, [pc, #92]	@ (8007f00 <tcp_slowtmr+0x678>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d006      	beq.n	8007eba <tcp_slowtmr+0x632>
 8007eac:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <tcp_slowtmr+0x668>)
 8007eae:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8007eb2:	4915      	ldr	r1, [pc, #84]	@ (8007f08 <tcp_slowtmr+0x680>)
 8007eb4:	4810      	ldr	r0, [pc, #64]	@ (8007ef8 <tcp_slowtmr+0x670>)
 8007eb6:	f007 f917 	bl	800f0e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	4a10      	ldr	r2, [pc, #64]	@ (8007f00 <tcp_slowtmr+0x678>)
 8007ec0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8007ecc:	69f8      	ldr	r0, [r7, #28]
 8007ece:	f7ff f93d 	bl	800714c <tcp_free>
 8007ed2:	e004      	b.n	8007ede <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8007ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1a9      	bne.n	8007e38 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007ee4:	bf00      	nop
 8007ee6:	bf00      	nop
 8007ee8:	3730      	adds	r7, #48	@ 0x30
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bdb0      	pop	{r4, r5, r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	080109dc 	.word	0x080109dc
 8007ef4:	08010e6c 	.word	0x08010e6c
 8007ef8:	08010a20 	.word	0x08010a20
 8007efc:	20008150 	.word	0x20008150
 8007f00:	20008160 	.word	0x20008160
 8007f04:	08010e9c 	.word	0x08010e9c
 8007f08:	08010ec4 	.word	0x08010ec4

08007f0c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007f12:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc8 <tcp_fasttmr+0xbc>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	3301      	adds	r3, #1
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8007fc8 <tcp_fasttmr+0xbc>)
 8007f1c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007fcc <tcp_fasttmr+0xc0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007f24:	e048      	b.n	8007fb8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	7f9a      	ldrb	r2, [r3, #30]
 8007f2a:	4b27      	ldr	r3, [pc, #156]	@ (8007fc8 <tcp_fasttmr+0xbc>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d03f      	beq.n	8007fb2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007f32:	4b25      	ldr	r3, [pc, #148]	@ (8007fc8 <tcp_fasttmr+0xbc>)
 8007f34:	781a      	ldrb	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	8b5b      	ldrh	r3, [r3, #26]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d010      	beq.n	8007f68 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	8b5b      	ldrh	r3, [r3, #26]
 8007f4a:	f043 0302 	orr.w	r3, r3, #2
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f003 fac9 	bl	800b4ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8b5b      	ldrh	r3, [r3, #26]
 8007f5e:	f023 0303 	bic.w	r3, r3, #3
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	8b5b      	ldrh	r3, [r3, #26]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d009      	beq.n	8007f88 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8b5b      	ldrh	r3, [r3, #26]
 8007f78:	f023 0308 	bic.w	r3, r3, #8
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff fa76 	bl	8007474 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007f96:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd0 <tcp_fasttmr+0xc4>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f819 	bl	8007fd4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd0 <tcp_fasttmr+0xc4>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d000      	beq.n	8007fac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007faa:	e7b8      	b.n	8007f1e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	607b      	str	r3, [r7, #4]
 8007fb0:	e002      	b.n	8007fb8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1b3      	bne.n	8007f26 <tcp_fasttmr+0x1a>
    }
  }
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20008166 	.word	0x20008166
 8007fcc:	2000815c 	.word	0x2000815c
 8007fd0:	20008164 	.word	0x20008164

08007fd4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007fd4:	b590      	push	{r4, r7, lr}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <tcp_process_refused_data+0x22>
 8007fe2:	4b37      	ldr	r3, [pc, #220]	@ (80080c0 <tcp_process_refused_data+0xec>)
 8007fe4:	f240 6209 	movw	r2, #1545	@ 0x609
 8007fe8:	4936      	ldr	r1, [pc, #216]	@ (80080c4 <tcp_process_refused_data+0xf0>)
 8007fea:	4837      	ldr	r0, [pc, #220]	@ (80080c8 <tcp_process_refused_data+0xf4>)
 8007fec:	f007 f87c 	bl	800f0e8 <iprintf>
 8007ff0:	f06f 030f 	mvn.w	r3, #15
 8007ff4:	e060      	b.n	80080b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ffa:	7b5b      	ldrb	r3, [r3, #13]
 8007ffc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008002:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <tcp_process_refused_data+0x58>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6918      	ldr	r0, [r3, #16]
 800801e:	2300      	movs	r3, #0
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	47a0      	blx	r4
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]
 800802a:	e007      	b.n	800803c <tcp_process_refused_data+0x68>
 800802c:	2300      	movs	r3, #0
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	2000      	movs	r0, #0
 8008034:	f000 f8a4 	bl	8008180 <tcp_recv_null>
 8008038:	4603      	mov	r3, r0
 800803a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800803c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d12a      	bne.n	800809a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	f003 0320 	and.w	r3, r3, #32
 800804a:	2b00      	cmp	r3, #0
 800804c:	d033      	beq.n	80080b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008052:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008056:	d005      	beq.n	8008064 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800805c:	3301      	adds	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <tcp_process_refused_data+0xb2>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6918      	ldr	r0, [r3, #16]
 8008078:	2300      	movs	r3, #0
 800807a:	2200      	movs	r2, #0
 800807c:	6879      	ldr	r1, [r7, #4]
 800807e:	47a0      	blx	r4
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]
 8008084:	e001      	b.n	800808a <tcp_process_refused_data+0xb6>
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800808a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800808e:	f113 0f0d 	cmn.w	r3, #13
 8008092:	d110      	bne.n	80080b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008094:	f06f 030c 	mvn.w	r3, #12
 8008098:	e00e      	b.n	80080b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800809a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800809e:	f113 0f0d 	cmn.w	r3, #13
 80080a2:	d102      	bne.n	80080aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80080a4:	f06f 030c 	mvn.w	r3, #12
 80080a8:	e006      	b.n	80080b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80080b0:	f06f 0304 	mvn.w	r3, #4
 80080b4:	e000      	b.n	80080b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd90      	pop	{r4, r7, pc}
 80080c0:	080109dc 	.word	0x080109dc
 80080c4:	08010eec 	.word	0x08010eec
 80080c8:	08010a20 	.word	0x08010a20

080080cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80080d4:	e007      	b.n	80080e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f80a 	bl	80080f6 <tcp_seg_free>
    seg = next;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1f4      	bne.n	80080d6 <tcp_segs_free+0xa>
  }
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00c      	beq.n	800811e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d004      	beq.n	8008116 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fd7b 	bl	8006c0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	2003      	movs	r0, #3
 800811a:	f7fd ff21 	bl	8005f60 <memp_free>
  }
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d106      	bne.n	8008144 <tcp_seg_copy+0x1c>
 8008136:	4b0f      	ldr	r3, [pc, #60]	@ (8008174 <tcp_seg_copy+0x4c>)
 8008138:	f240 6282 	movw	r2, #1666	@ 0x682
 800813c:	490e      	ldr	r1, [pc, #56]	@ (8008178 <tcp_seg_copy+0x50>)
 800813e:	480f      	ldr	r0, [pc, #60]	@ (800817c <tcp_seg_copy+0x54>)
 8008140:	f006 ffd2 	bl	800f0e8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008144:	2003      	movs	r0, #3
 8008146:	f7fd fe9b 	bl	8005e80 <memp_malloc>
 800814a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <tcp_seg_copy+0x2e>
    return NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	e00a      	b.n	800816c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008156:	2210      	movs	r2, #16
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f007 f89f 	bl	800f29e <memcpy>
  pbuf_ref(cseg->p);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe fdf1 	bl	8006d4c <pbuf_ref>
  return cseg;
 800816a:	68fb      	ldr	r3, [r7, #12]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	080109dc 	.word	0x080109dc
 8008178:	08010f30 	.word	0x08010f30
 800817c:	08010a20 	.word	0x08010a20

08008180 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <tcp_recv_null+0x28>
 8008194:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <tcp_recv_null+0x60>)
 8008196:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800819a:	4912      	ldr	r1, [pc, #72]	@ (80081e4 <tcp_recv_null+0x64>)
 800819c:	4812      	ldr	r0, [pc, #72]	@ (80081e8 <tcp_recv_null+0x68>)
 800819e:	f006 ffa3 	bl	800f0e8 <iprintf>
 80081a2:	f06f 030f 	mvn.w	r3, #15
 80081a6:	e016      	b.n	80081d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	891b      	ldrh	r3, [r3, #8]
 80081b2:	4619      	mov	r1, r3
 80081b4:	68b8      	ldr	r0, [r7, #8]
 80081b6:	f7ff fb17 	bl	80077e8 <tcp_recved>
    pbuf_free(p);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fe fd26 	bl	8006c0c <pbuf_free>
 80081c0:	e008      	b.n	80081d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80081c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d104      	bne.n	80081d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80081ca:	68b8      	ldr	r0, [r7, #8]
 80081cc:	f7ff f9bc 	bl	8007548 <tcp_close>
 80081d0:	4603      	mov	r3, r0
 80081d2:	e000      	b.n	80081d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	080109dc 	.word	0x080109dc
 80081e4:	08010f4c 	.word	0x08010f4c
 80081e8:	08010a20 	.word	0x08010a20

080081ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80081f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	db01      	blt.n	8008202 <tcp_kill_prio+0x16>
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	e000      	b.n	8008204 <tcp_kill_prio+0x18>
 8008202:	237f      	movs	r3, #127	@ 0x7f
 8008204:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008206:	7afb      	ldrb	r3, [r7, #11]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d034      	beq.n	8008276 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3b01      	subs	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008216:	2300      	movs	r3, #0
 8008218:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800821a:	4b19      	ldr	r3, [pc, #100]	@ (8008280 <tcp_kill_prio+0x94>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e01f      	b.n	8008262 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	7d5b      	ldrb	r3, [r3, #21]
 8008226:	7afa      	ldrb	r2, [r7, #11]
 8008228:	429a      	cmp	r2, r3
 800822a:	d80c      	bhi.n	8008246 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008230:	7afa      	ldrb	r2, [r7, #11]
 8008232:	429a      	cmp	r2, r3
 8008234:	d112      	bne.n	800825c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008236:	4b13      	ldr	r3, [pc, #76]	@ (8008284 <tcp_kill_prio+0x98>)
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	429a      	cmp	r2, r3
 8008244:	d80a      	bhi.n	800825c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008246:	4b0f      	ldr	r3, [pc, #60]	@ (8008284 <tcp_kill_prio+0x98>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	7d5b      	ldrb	r3, [r3, #21]
 800825a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1dc      	bne.n	8008222 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800826e:	6938      	ldr	r0, [r7, #16]
 8008270:	f7ff fa54 	bl	800771c <tcp_abort>
 8008274:	e000      	b.n	8008278 <tcp_kill_prio+0x8c>
    return;
 8008276:	bf00      	nop
  }
}
 8008278:	3718      	adds	r7, #24
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	2000815c 	.word	0x2000815c
 8008284:	20008150 	.word	0x20008150

08008288 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	2b08      	cmp	r3, #8
 8008296:	d009      	beq.n	80082ac <tcp_kill_state+0x24>
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	2b09      	cmp	r3, #9
 800829c:	d006      	beq.n	80082ac <tcp_kill_state+0x24>
 800829e:	4b1a      	ldr	r3, [pc, #104]	@ (8008308 <tcp_kill_state+0x80>)
 80082a0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80082a4:	4919      	ldr	r1, [pc, #100]	@ (800830c <tcp_kill_state+0x84>)
 80082a6:	481a      	ldr	r0, [pc, #104]	@ (8008310 <tcp_kill_state+0x88>)
 80082a8:	f006 ff1e 	bl	800f0e8 <iprintf>

  inactivity = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082b4:	4b17      	ldr	r3, [pc, #92]	@ (8008314 <tcp_kill_state+0x8c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	e017      	b.n	80082ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	7d1b      	ldrb	r3, [r3, #20]
 80082c0:	79fa      	ldrb	r2, [r7, #7]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d10f      	bne.n	80082e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80082c6:	4b14      	ldr	r3, [pc, #80]	@ (8008318 <tcp_kill_state+0x90>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	6a1b      	ldr	r3, [r3, #32]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d807      	bhi.n	80082e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80082d6:	4b10      	ldr	r3, [pc, #64]	@ (8008318 <tcp_kill_state+0x90>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e4      	bne.n	80082bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80082f8:	2100      	movs	r1, #0
 80082fa:	6938      	ldr	r0, [r7, #16]
 80082fc:	f7ff f950 	bl	80075a0 <tcp_abandon>
  }
}
 8008300:	bf00      	nop
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	080109dc 	.word	0x080109dc
 800830c:	08010f68 	.word	0x08010f68
 8008310:	08010a20 	.word	0x08010a20
 8008314:	2000815c 	.word	0x2000815c
 8008318:	20008150 	.word	0x20008150

0800831c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008326:	2300      	movs	r3, #0
 8008328:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800832a:	4b12      	ldr	r3, [pc, #72]	@ (8008374 <tcp_kill_timewait+0x58>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	e012      	b.n	8008358 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008332:	4b11      	ldr	r3, [pc, #68]	@ (8008378 <tcp_kill_timewait+0x5c>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	429a      	cmp	r2, r3
 8008340:	d807      	bhi.n	8008352 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008342:	4b0d      	ldr	r3, [pc, #52]	@ (8008378 <tcp_kill_timewait+0x5c>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	60fb      	str	r3, [r7, #12]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e9      	bne.n	8008332 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008364:	68b8      	ldr	r0, [r7, #8]
 8008366:	f7ff f9d9 	bl	800771c <tcp_abort>
  }
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20008160 	.word	0x20008160
 8008378:	20008150 	.word	0x20008150

0800837c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008382:	4b10      	ldr	r3, [pc, #64]	@ (80083c4 <tcp_handle_closepend+0x48>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008388:	e014      	b.n	80083b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	8b5b      	ldrh	r3, [r3, #26]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d009      	beq.n	80083b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	8b5b      	ldrh	r3, [r3, #26]
 80083a0:	f023 0308 	bic.w	r3, r3, #8
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff f862 	bl	8007474 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e7      	bne.n	800838a <tcp_handle_closepend+0xe>
  }
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	2000815c 	.word	0x2000815c

080083c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083d2:	2001      	movs	r0, #1
 80083d4:	f7fd fd54 	bl	8005e80 <memp_malloc>
 80083d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d126      	bne.n	800842e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80083e0:	f7ff ffcc 	bl	800837c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80083e4:	f7ff ff9a 	bl	800831c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083e8:	2001      	movs	r0, #1
 80083ea:	f7fd fd49 	bl	8005e80 <memp_malloc>
 80083ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d11b      	bne.n	800842e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80083f6:	2009      	movs	r0, #9
 80083f8:	f7ff ff46 	bl	8008288 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083fc:	2001      	movs	r0, #1
 80083fe:	f7fd fd3f 	bl	8005e80 <memp_malloc>
 8008402:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d111      	bne.n	800842e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800840a:	2008      	movs	r0, #8
 800840c:	f7ff ff3c 	bl	8008288 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008410:	2001      	movs	r0, #1
 8008412:	f7fd fd35 	bl	8005e80 <memp_malloc>
 8008416:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d107      	bne.n	800842e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff fee3 	bl	80081ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008426:	2001      	movs	r0, #1
 8008428:	f7fd fd2a 	bl	8005e80 <memp_malloc>
 800842c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d03f      	beq.n	80084b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008434:	229c      	movs	r2, #156	@ 0x9c
 8008436:	2100      	movs	r1, #0
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f006 feba 	bl	800f1b2 <memset>
    pcb->prio = prio;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	79fa      	ldrb	r2, [r7, #7]
 8008442:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800844a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008454:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	22ff      	movs	r2, #255	@ 0xff
 8008462:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800846a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2206      	movs	r2, #6
 8008470:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2206      	movs	r2, #6
 8008478:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008480:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800848a:	4b0d      	ldr	r3, [pc, #52]	@ (80084c0 <tcp_alloc+0xf8>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008492:	4b0c      	ldr	r3, [pc, #48]	@ (80084c4 <tcp_alloc+0xfc>)
 8008494:	781a      	ldrb	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80084a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4a08      	ldr	r2, [pc, #32]	@ (80084c8 <tcp_alloc+0x100>)
 80084a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a07      	ldr	r2, [pc, #28]	@ (80084cc <tcp_alloc+0x104>)
 80084b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80084b4:	68fb      	ldr	r3, [r7, #12]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	20008150 	.word	0x20008150
 80084c4:	20008166 	.word	0x20008166
 80084c8:	08008181 	.word	0x08008181
 80084cc:	006ddd00 	.word	0x006ddd00

080084d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d107      	bne.n	80084ee <tcp_pcb_purge+0x1e>
 80084de:	4b21      	ldr	r3, [pc, #132]	@ (8008564 <tcp_pcb_purge+0x94>)
 80084e0:	f640 0251 	movw	r2, #2129	@ 0x851
 80084e4:	4920      	ldr	r1, [pc, #128]	@ (8008568 <tcp_pcb_purge+0x98>)
 80084e6:	4821      	ldr	r0, [pc, #132]	@ (800856c <tcp_pcb_purge+0x9c>)
 80084e8:	f006 fdfe 	bl	800f0e8 <iprintf>
 80084ec:	e037      	b.n	800855e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	7d1b      	ldrb	r3, [r3, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d033      	beq.n	800855e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80084fa:	2b0a      	cmp	r3, #10
 80084fc:	d02f      	beq.n	800855e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008502:	2b01      	cmp	r3, #1
 8008504:	d02b      	beq.n	800855e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800850a:	2b00      	cmp	r3, #0
 800850c:	d007      	beq.n	800851e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fb7a 	bl	8006c0c <pbuf_free>
      pcb->refused_data = NULL;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f986 	bl	8008838 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008532:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff fdc7 	bl	80080cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff fdc2 	bl	80080cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	080109dc 	.word	0x080109dc
 8008568:	08011028 	.word	0x08011028
 800856c:	08010a20 	.word	0x08010a20

08008570 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <tcp_pcb_remove+0x1e>
 8008580:	4b3e      	ldr	r3, [pc, #248]	@ (800867c <tcp_pcb_remove+0x10c>)
 8008582:	f640 0283 	movw	r2, #2179	@ 0x883
 8008586:	493e      	ldr	r1, [pc, #248]	@ (8008680 <tcp_pcb_remove+0x110>)
 8008588:	483e      	ldr	r0, [pc, #248]	@ (8008684 <tcp_pcb_remove+0x114>)
 800858a:	f006 fdad 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d106      	bne.n	80085a2 <tcp_pcb_remove+0x32>
 8008594:	4b39      	ldr	r3, [pc, #228]	@ (800867c <tcp_pcb_remove+0x10c>)
 8008596:	f640 0284 	movw	r2, #2180	@ 0x884
 800859a:	493b      	ldr	r1, [pc, #236]	@ (8008688 <tcp_pcb_remove+0x118>)
 800859c:	4839      	ldr	r0, [pc, #228]	@ (8008684 <tcp_pcb_remove+0x114>)
 800859e:	f006 fda3 	bl	800f0e8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d105      	bne.n	80085b8 <tcp_pcb_remove+0x48>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e013      	b.n	80085e0 <tcp_pcb_remove+0x70>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	e00c      	b.n	80085da <tcp_pcb_remove+0x6a>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d104      	bne.n	80085d4 <tcp_pcb_remove+0x64>
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	60da      	str	r2, [r3, #12]
 80085d2:	e005      	b.n	80085e0 <tcp_pcb_remove+0x70>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1ef      	bne.n	80085c0 <tcp_pcb_remove+0x50>
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80085e6:	6838      	ldr	r0, [r7, #0]
 80085e8:	f7ff ff72 	bl	80084d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	7d1b      	ldrb	r3, [r3, #20]
 80085f0:	2b0a      	cmp	r3, #10
 80085f2:	d013      	beq.n	800861c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d00f      	beq.n	800861c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	8b5b      	ldrh	r3, [r3, #26]
 8008600:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008604:	2b00      	cmp	r3, #0
 8008606:	d009      	beq.n	800861c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	8b5b      	ldrh	r3, [r3, #26]
 800860c:	f043 0302 	orr.w	r3, r3, #2
 8008610:	b29a      	uxth	r2, r3
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008616:	6838      	ldr	r0, [r7, #0]
 8008618:	f002 ff68 	bl	800b4ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	7d1b      	ldrb	r3, [r3, #20]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d020      	beq.n	8008666 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d006      	beq.n	800863a <tcp_pcb_remove+0xca>
 800862c:	4b13      	ldr	r3, [pc, #76]	@ (800867c <tcp_pcb_remove+0x10c>)
 800862e:	f640 0293 	movw	r2, #2195	@ 0x893
 8008632:	4916      	ldr	r1, [pc, #88]	@ (800868c <tcp_pcb_remove+0x11c>)
 8008634:	4813      	ldr	r0, [pc, #76]	@ (8008684 <tcp_pcb_remove+0x114>)
 8008636:	f006 fd57 	bl	800f0e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800863e:	2b00      	cmp	r3, #0
 8008640:	d006      	beq.n	8008650 <tcp_pcb_remove+0xe0>
 8008642:	4b0e      	ldr	r3, [pc, #56]	@ (800867c <tcp_pcb_remove+0x10c>)
 8008644:	f640 0294 	movw	r2, #2196	@ 0x894
 8008648:	4911      	ldr	r1, [pc, #68]	@ (8008690 <tcp_pcb_remove+0x120>)
 800864a:	480e      	ldr	r0, [pc, #56]	@ (8008684 <tcp_pcb_remove+0x114>)
 800864c:	f006 fd4c 	bl	800f0e8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008654:	2b00      	cmp	r3, #0
 8008656:	d006      	beq.n	8008666 <tcp_pcb_remove+0xf6>
 8008658:	4b08      	ldr	r3, [pc, #32]	@ (800867c <tcp_pcb_remove+0x10c>)
 800865a:	f640 0296 	movw	r2, #2198	@ 0x896
 800865e:	490d      	ldr	r1, [pc, #52]	@ (8008694 <tcp_pcb_remove+0x124>)
 8008660:	4808      	ldr	r0, [pc, #32]	@ (8008684 <tcp_pcb_remove+0x114>)
 8008662:	f006 fd41 	bl	800f0e8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2200      	movs	r2, #0
 800866a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2200      	movs	r2, #0
 8008670:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	080109dc 	.word	0x080109dc
 8008680:	08011044 	.word	0x08011044
 8008684:	08010a20 	.word	0x08010a20
 8008688:	08011060 	.word	0x08011060
 800868c:	08011080 	.word	0x08011080
 8008690:	08011098 	.word	0x08011098
 8008694:	080110b4 	.word	0x080110b4

08008698 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <tcp_next_iss+0x1c>
 80086a6:	4b0a      	ldr	r3, [pc, #40]	@ (80086d0 <tcp_next_iss+0x38>)
 80086a8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80086ac:	4909      	ldr	r1, [pc, #36]	@ (80086d4 <tcp_next_iss+0x3c>)
 80086ae:	480a      	ldr	r0, [pc, #40]	@ (80086d8 <tcp_next_iss+0x40>)
 80086b0:	f006 fd1a 	bl	800f0e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80086b4:	4b09      	ldr	r3, [pc, #36]	@ (80086dc <tcp_next_iss+0x44>)
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <tcp_next_iss+0x48>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4413      	add	r3, r2
 80086be:	4a07      	ldr	r2, [pc, #28]	@ (80086dc <tcp_next_iss+0x44>)
 80086c0:	6013      	str	r3, [r2, #0]
  return iss;
 80086c2:	4b06      	ldr	r3, [pc, #24]	@ (80086dc <tcp_next_iss+0x44>)
 80086c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	080109dc 	.word	0x080109dc
 80086d4:	080110cc 	.word	0x080110cc
 80086d8:	08010a20 	.word	0x08010a20
 80086dc:	20000024 	.word	0x20000024
 80086e0:	20008150 	.word	0x20008150

080086e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d106      	bne.n	8008706 <tcp_eff_send_mss_netif+0x22>
 80086f8:	4b14      	ldr	r3, [pc, #80]	@ (800874c <tcp_eff_send_mss_netif+0x68>)
 80086fa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80086fe:	4914      	ldr	r1, [pc, #80]	@ (8008750 <tcp_eff_send_mss_netif+0x6c>)
 8008700:	4814      	ldr	r0, [pc, #80]	@ (8008754 <tcp_eff_send_mss_netif+0x70>)
 8008702:	f006 fcf1 	bl	800f0e8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800870c:	89fb      	ldrh	r3, [r7, #14]
 800870e:	e019      	b.n	8008744 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008714:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008716:	8afb      	ldrh	r3, [r7, #22]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d012      	beq.n	8008742 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800871c:	2328      	movs	r3, #40	@ 0x28
 800871e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008720:	8afa      	ldrh	r2, [r7, #22]
 8008722:	8abb      	ldrh	r3, [r7, #20]
 8008724:	429a      	cmp	r2, r3
 8008726:	d904      	bls.n	8008732 <tcp_eff_send_mss_netif+0x4e>
 8008728:	8afa      	ldrh	r2, [r7, #22]
 800872a:	8abb      	ldrh	r3, [r7, #20]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	b29b      	uxth	r3, r3
 8008730:	e000      	b.n	8008734 <tcp_eff_send_mss_netif+0x50>
 8008732:	2300      	movs	r3, #0
 8008734:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008736:	8a7a      	ldrh	r2, [r7, #18]
 8008738:	89fb      	ldrh	r3, [r7, #14]
 800873a:	4293      	cmp	r3, r2
 800873c:	bf28      	it	cs
 800873e:	4613      	movcs	r3, r2
 8008740:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008742:	89fb      	ldrh	r3, [r7, #14]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	080109dc 	.word	0x080109dc
 8008750:	080110e8 	.word	0x080110e8
 8008754:	08010a20 	.word	0x08010a20

08008758 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d119      	bne.n	80087a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800876c:	4b10      	ldr	r3, [pc, #64]	@ (80087b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800876e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008772:	4910      	ldr	r1, [pc, #64]	@ (80087b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008774:	4810      	ldr	r0, [pc, #64]	@ (80087b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008776:	f006 fcb7 	bl	800f0e8 <iprintf>

  while (pcb != NULL) {
 800877a:	e011      	b.n	80087a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	429a      	cmp	r2, r3
 8008786:	d108      	bne.n	800879a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7fe ffc4 	bl	800771c <tcp_abort>
      pcb = next;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	e002      	b.n	80087a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1ea      	bne.n	800877c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80087a6:	bf00      	nop
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	080109dc 	.word	0x080109dc
 80087b4:	08011110 	.word	0x08011110
 80087b8:	08010a20 	.word	0x08010a20

080087bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d02a      	beq.n	8008822 <tcp_netif_ip_addr_changed+0x66>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d026      	beq.n	8008822 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80087d4:	4b15      	ldr	r3, [pc, #84]	@ (800882c <tcp_netif_ip_addr_changed+0x70>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff ffbc 	bl	8008758 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80087e0:	4b13      	ldr	r3, [pc, #76]	@ (8008830 <tcp_netif_ip_addr_changed+0x74>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff ffb6 	bl	8008758 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d017      	beq.n	8008822 <tcp_netif_ip_addr_changed+0x66>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d013      	beq.n	8008822 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80087fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008834 <tcp_netif_ip_addr_changed+0x78>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e00c      	b.n	800881c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d103      	bne.n	8008816 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1ef      	bne.n	8008802 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008822:	bf00      	nop
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	2000815c 	.word	0x2000815c
 8008830:	20008154 	.word	0x20008154
 8008834:	20008158 	.word	0x20008158

08008838 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008844:	2b00      	cmp	r3, #0
 8008846:	d007      	beq.n	8008858 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff fc3d 	bl	80080cc <tcp_segs_free>
    pcb->ooseq = NULL;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b08d      	sub	sp, #52	@ 0x34
 8008864:	af04      	add	r7, sp, #16
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d105      	bne.n	800887c <tcp_input+0x1c>
 8008870:	4b9b      	ldr	r3, [pc, #620]	@ (8008ae0 <tcp_input+0x280>)
 8008872:	2283      	movs	r2, #131	@ 0x83
 8008874:	499b      	ldr	r1, [pc, #620]	@ (8008ae4 <tcp_input+0x284>)
 8008876:	489c      	ldr	r0, [pc, #624]	@ (8008ae8 <tcp_input+0x288>)
 8008878:	f006 fc36 	bl	800f0e8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	4a9a      	ldr	r2, [pc, #616]	@ (8008aec <tcp_input+0x28c>)
 8008882:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	895b      	ldrh	r3, [r3, #10]
 8008888:	2b13      	cmp	r3, #19
 800888a:	f240 83d1 	bls.w	8009030 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800888e:	4b98      	ldr	r3, [pc, #608]	@ (8008af0 <tcp_input+0x290>)
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	4a97      	ldr	r2, [pc, #604]	@ (8008af0 <tcp_input+0x290>)
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f005 fbcf 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 83c7 	bne.w	8009034 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80088a6:	4b92      	ldr	r3, [pc, #584]	@ (8008af0 <tcp_input+0x290>)
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80088ae:	2be0      	cmp	r3, #224	@ 0xe0
 80088b0:	f000 83c0 	beq.w	8009034 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80088b4:	4b8d      	ldr	r3, [pc, #564]	@ (8008aec <tcp_input+0x28c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	899b      	ldrh	r3, [r3, #12]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fc fe6b 	bl	8005598 <lwip_htons>
 80088c2:	4603      	mov	r3, r0
 80088c4:	0b1b      	lsrs	r3, r3, #12
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80088ce:	7cbb      	ldrb	r3, [r7, #18]
 80088d0:	2b13      	cmp	r3, #19
 80088d2:	f240 83b1 	bls.w	8009038 <tcp_input+0x7d8>
 80088d6:	7cbb      	ldrb	r3, [r7, #18]
 80088d8:	b29a      	uxth	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	891b      	ldrh	r3, [r3, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	f200 83aa 	bhi.w	8009038 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80088e4:	7cbb      	ldrb	r3, [r7, #18]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	3b14      	subs	r3, #20
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	4b81      	ldr	r3, [pc, #516]	@ (8008af4 <tcp_input+0x294>)
 80088ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80088f0:	4b81      	ldr	r3, [pc, #516]	@ (8008af8 <tcp_input+0x298>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	895a      	ldrh	r2, [r3, #10]
 80088fa:	7cbb      	ldrb	r3, [r7, #18]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	429a      	cmp	r2, r3
 8008900:	d309      	bcc.n	8008916 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008902:	4b7c      	ldr	r3, [pc, #496]	@ (8008af4 <tcp_input+0x294>)
 8008904:	881a      	ldrh	r2, [r3, #0]
 8008906:	4b7d      	ldr	r3, [pc, #500]	@ (8008afc <tcp_input+0x29c>)
 8008908:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800890a:	7cbb      	ldrb	r3, [r7, #18]
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fe f8f6 	bl	8006b00 <pbuf_remove_header>
 8008914:	e04e      	b.n	80089b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d105      	bne.n	800892a <tcp_input+0xca>
 800891e:	4b70      	ldr	r3, [pc, #448]	@ (8008ae0 <tcp_input+0x280>)
 8008920:	22c2      	movs	r2, #194	@ 0xc2
 8008922:	4977      	ldr	r1, [pc, #476]	@ (8008b00 <tcp_input+0x2a0>)
 8008924:	4870      	ldr	r0, [pc, #448]	@ (8008ae8 <tcp_input+0x288>)
 8008926:	f006 fbdf 	bl	800f0e8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800892a:	2114      	movs	r1, #20
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7fe f8e7 	bl	8006b00 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	895a      	ldrh	r2, [r3, #10]
 8008936:	4b71      	ldr	r3, [pc, #452]	@ (8008afc <tcp_input+0x29c>)
 8008938:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800893a:	4b6e      	ldr	r3, [pc, #440]	@ (8008af4 <tcp_input+0x294>)
 800893c:	881a      	ldrh	r2, [r3, #0]
 800893e:	4b6f      	ldr	r3, [pc, #444]	@ (8008afc <tcp_input+0x29c>)
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008946:	4b6d      	ldr	r3, [pc, #436]	@ (8008afc <tcp_input+0x29c>)
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe f8d7 	bl	8006b00 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	895b      	ldrh	r3, [r3, #10]
 8008958:	8a3a      	ldrh	r2, [r7, #16]
 800895a:	429a      	cmp	r2, r3
 800895c:	f200 836e 	bhi.w	800903c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	4a64      	ldr	r2, [pc, #400]	@ (8008af8 <tcp_input+0x298>)
 8008968:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	8a3a      	ldrh	r2, [r7, #16]
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe f8c4 	bl	8006b00 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	891a      	ldrh	r2, [r3, #8]
 800897c:	8a3b      	ldrh	r3, [r7, #16]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	895b      	ldrh	r3, [r3, #10]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <tcp_input+0x13a>
 800898e:	4b54      	ldr	r3, [pc, #336]	@ (8008ae0 <tcp_input+0x280>)
 8008990:	22df      	movs	r2, #223	@ 0xdf
 8008992:	495c      	ldr	r1, [pc, #368]	@ (8008b04 <tcp_input+0x2a4>)
 8008994:	4854      	ldr	r0, [pc, #336]	@ (8008ae8 <tcp_input+0x288>)
 8008996:	f006 fba7 	bl	800f0e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	891a      	ldrh	r2, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	891b      	ldrh	r3, [r3, #8]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d005      	beq.n	80089b4 <tcp_input+0x154>
 80089a8:	4b4d      	ldr	r3, [pc, #308]	@ (8008ae0 <tcp_input+0x280>)
 80089aa:	22e0      	movs	r2, #224	@ 0xe0
 80089ac:	4956      	ldr	r1, [pc, #344]	@ (8008b08 <tcp_input+0x2a8>)
 80089ae:	484e      	ldr	r0, [pc, #312]	@ (8008ae8 <tcp_input+0x288>)
 80089b0:	f006 fb9a 	bl	800f0e8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80089b4:	4b4d      	ldr	r3, [pc, #308]	@ (8008aec <tcp_input+0x28c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4a4b      	ldr	r2, [pc, #300]	@ (8008aec <tcp_input+0x28c>)
 80089be:	6814      	ldr	r4, [r2, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fc fde9 	bl	8005598 <lwip_htons>
 80089c6:	4603      	mov	r3, r0
 80089c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80089ca:	4b48      	ldr	r3, [pc, #288]	@ (8008aec <tcp_input+0x28c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	885b      	ldrh	r3, [r3, #2]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	4a46      	ldr	r2, [pc, #280]	@ (8008aec <tcp_input+0x28c>)
 80089d4:	6814      	ldr	r4, [r2, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fc fdde 	bl	8005598 <lwip_htons>
 80089dc:	4603      	mov	r3, r0
 80089de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80089e0:	4b42      	ldr	r3, [pc, #264]	@ (8008aec <tcp_input+0x28c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	4a41      	ldr	r2, [pc, #260]	@ (8008aec <tcp_input+0x28c>)
 80089e8:	6814      	ldr	r4, [r2, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fc fdea 	bl	80055c4 <lwip_htonl>
 80089f0:	4603      	mov	r3, r0
 80089f2:	6063      	str	r3, [r4, #4]
 80089f4:	6863      	ldr	r3, [r4, #4]
 80089f6:	4a45      	ldr	r2, [pc, #276]	@ (8008b0c <tcp_input+0x2ac>)
 80089f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80089fa:	4b3c      	ldr	r3, [pc, #240]	@ (8008aec <tcp_input+0x28c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	4a3a      	ldr	r2, [pc, #232]	@ (8008aec <tcp_input+0x28c>)
 8008a02:	6814      	ldr	r4, [r2, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fc fddd 	bl	80055c4 <lwip_htonl>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	60a3      	str	r3, [r4, #8]
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	4a3f      	ldr	r2, [pc, #252]	@ (8008b10 <tcp_input+0x2b0>)
 8008a12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008a14:	4b35      	ldr	r3, [pc, #212]	@ (8008aec <tcp_input+0x28c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	89db      	ldrh	r3, [r3, #14]
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	4a33      	ldr	r2, [pc, #204]	@ (8008aec <tcp_input+0x28c>)
 8008a1e:	6814      	ldr	r4, [r2, #0]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fc fdb9 	bl	8005598 <lwip_htons>
 8008a26:	4603      	mov	r3, r0
 8008a28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008a2a:	4b30      	ldr	r3, [pc, #192]	@ (8008aec <tcp_input+0x28c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	899b      	ldrh	r3, [r3, #12]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fc fdb0 	bl	8005598 <lwip_htons>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	4b34      	ldr	r3, [pc, #208]	@ (8008b14 <tcp_input+0x2b4>)
 8008a44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	891a      	ldrh	r2, [r3, #8]
 8008a4a:	4b33      	ldr	r3, [pc, #204]	@ (8008b18 <tcp_input+0x2b8>)
 8008a4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008a4e:	4b31      	ldr	r3, [pc, #196]	@ (8008b14 <tcp_input+0x2b4>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00c      	beq.n	8008a74 <tcp_input+0x214>
    tcplen++;
 8008a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b18 <tcp_input+0x2b8>)
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	4b2d      	ldr	r3, [pc, #180]	@ (8008b18 <tcp_input+0x2b8>)
 8008a64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	891a      	ldrh	r2, [r3, #8]
 8008a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b18 <tcp_input+0x2b8>)
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	f200 82e6 	bhi.w	8009040 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a78:	4b28      	ldr	r3, [pc, #160]	@ (8008b1c <tcp_input+0x2bc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	61fb      	str	r3, [r7, #28]
 8008a7e:	e09d      	b.n	8008bbc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	7d1b      	ldrb	r3, [r3, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d105      	bne.n	8008a94 <tcp_input+0x234>
 8008a88:	4b15      	ldr	r3, [pc, #84]	@ (8008ae0 <tcp_input+0x280>)
 8008a8a:	22fb      	movs	r2, #251	@ 0xfb
 8008a8c:	4924      	ldr	r1, [pc, #144]	@ (8008b20 <tcp_input+0x2c0>)
 8008a8e:	4816      	ldr	r0, [pc, #88]	@ (8008ae8 <tcp_input+0x288>)
 8008a90:	f006 fb2a 	bl	800f0e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	7d1b      	ldrb	r3, [r3, #20]
 8008a98:	2b0a      	cmp	r3, #10
 8008a9a:	d105      	bne.n	8008aa8 <tcp_input+0x248>
 8008a9c:	4b10      	ldr	r3, [pc, #64]	@ (8008ae0 <tcp_input+0x280>)
 8008a9e:	22fc      	movs	r2, #252	@ 0xfc
 8008aa0:	4920      	ldr	r1, [pc, #128]	@ (8008b24 <tcp_input+0x2c4>)
 8008aa2:	4811      	ldr	r0, [pc, #68]	@ (8008ae8 <tcp_input+0x288>)
 8008aa4:	f006 fb20 	bl	800f0e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	7d1b      	ldrb	r3, [r3, #20]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d105      	bne.n	8008abc <tcp_input+0x25c>
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae0 <tcp_input+0x280>)
 8008ab2:	22fd      	movs	r2, #253	@ 0xfd
 8008ab4:	491c      	ldr	r1, [pc, #112]	@ (8008b28 <tcp_input+0x2c8>)
 8008ab6:	480c      	ldr	r0, [pc, #48]	@ (8008ae8 <tcp_input+0x288>)
 8008ab8:	f006 fb16 	bl	800f0e8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	7a1b      	ldrb	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d033      	beq.n	8008b2c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	7a1a      	ldrb	r2, [r3, #8]
 8008ac8:	4b09      	ldr	r3, [pc, #36]	@ (8008af0 <tcp_input+0x290>)
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d029      	beq.n	8008b2c <tcp_input+0x2cc>
      prev = pcb;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	61bb      	str	r3, [r7, #24]
      continue;
 8008adc:	e06b      	b.n	8008bb6 <tcp_input+0x356>
 8008ade:	bf00      	nop
 8008ae0:	08011144 	.word	0x08011144
 8008ae4:	08011178 	.word	0x08011178
 8008ae8:	08011190 	.word	0x08011190
 8008aec:	20008178 	.word	0x20008178
 8008af0:	20005234 	.word	0x20005234
 8008af4:	2000817c 	.word	0x2000817c
 8008af8:	20008180 	.word	0x20008180
 8008afc:	2000817e 	.word	0x2000817e
 8008b00:	080111b8 	.word	0x080111b8
 8008b04:	080111c8 	.word	0x080111c8
 8008b08:	080111d4 	.word	0x080111d4
 8008b0c:	20008188 	.word	0x20008188
 8008b10:	2000818c 	.word	0x2000818c
 8008b14:	20008194 	.word	0x20008194
 8008b18:	20008192 	.word	0x20008192
 8008b1c:	2000815c 	.word	0x2000815c
 8008b20:	080111f4 	.word	0x080111f4
 8008b24:	0801121c 	.word	0x0801121c
 8008b28:	08011248 	.word	0x08011248
    }

    if (pcb->remote_port == tcphdr->src &&
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	8b1a      	ldrh	r2, [r3, #24]
 8008b30:	4b72      	ldr	r3, [pc, #456]	@ (8008cfc <tcp_input+0x49c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d13a      	bne.n	8008bb2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	8ada      	ldrh	r2, [r3, #22]
 8008b40:	4b6e      	ldr	r3, [pc, #440]	@ (8008cfc <tcp_input+0x49c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d132      	bne.n	8008bb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	4b6b      	ldr	r3, [pc, #428]	@ (8008d00 <tcp_input+0x4a0>)
 8008b52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d12c      	bne.n	8008bb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	4b68      	ldr	r3, [pc, #416]	@ (8008d00 <tcp_input+0x4a0>)
 8008b5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d126      	bne.n	8008bb2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	69fa      	ldr	r2, [r7, #28]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d106      	bne.n	8008b7c <tcp_input+0x31c>
 8008b6e:	4b65      	ldr	r3, [pc, #404]	@ (8008d04 <tcp_input+0x4a4>)
 8008b70:	f240 120d 	movw	r2, #269	@ 0x10d
 8008b74:	4964      	ldr	r1, [pc, #400]	@ (8008d08 <tcp_input+0x4a8>)
 8008b76:	4865      	ldr	r0, [pc, #404]	@ (8008d0c <tcp_input+0x4ac>)
 8008b78:	f006 fab6 	bl	800f0e8 <iprintf>
      if (prev != NULL) {
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <tcp_input+0x338>
        prev->next = pcb->next;
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008b8a:	4b61      	ldr	r3, [pc, #388]	@ (8008d10 <tcp_input+0x4b0>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008b92:	4a5f      	ldr	r2, [pc, #380]	@ (8008d10 <tcp_input+0x4b0>)
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d111      	bne.n	8008bc6 <tcp_input+0x366>
 8008ba2:	4b58      	ldr	r3, [pc, #352]	@ (8008d04 <tcp_input+0x4a4>)
 8008ba4:	f240 1215 	movw	r2, #277	@ 0x115
 8008ba8:	495a      	ldr	r1, [pc, #360]	@ (8008d14 <tcp_input+0x4b4>)
 8008baa:	4858      	ldr	r0, [pc, #352]	@ (8008d0c <tcp_input+0x4ac>)
 8008bac:	f006 fa9c 	bl	800f0e8 <iprintf>
      break;
 8008bb0:	e009      	b.n	8008bc6 <tcp_input+0x366>
    }
    prev = pcb;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	61fb      	str	r3, [r7, #28]
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f47f af5e 	bne.w	8008a80 <tcp_input+0x220>
 8008bc4:	e000      	b.n	8008bc8 <tcp_input+0x368>
      break;
 8008bc6:	bf00      	nop
  }

  if (pcb == NULL) {
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f040 80aa 	bne.w	8008d24 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bd0:	4b51      	ldr	r3, [pc, #324]	@ (8008d18 <tcp_input+0x4b8>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	e03f      	b.n	8008c58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	7d1b      	ldrb	r3, [r3, #20]
 8008bdc:	2b0a      	cmp	r3, #10
 8008bde:	d006      	beq.n	8008bee <tcp_input+0x38e>
 8008be0:	4b48      	ldr	r3, [pc, #288]	@ (8008d04 <tcp_input+0x4a4>)
 8008be2:	f240 121f 	movw	r2, #287	@ 0x11f
 8008be6:	494d      	ldr	r1, [pc, #308]	@ (8008d1c <tcp_input+0x4bc>)
 8008be8:	4848      	ldr	r0, [pc, #288]	@ (8008d0c <tcp_input+0x4ac>)
 8008bea:	f006 fa7d 	bl	800f0e8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	7a1b      	ldrb	r3, [r3, #8]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	7a1a      	ldrb	r2, [r3, #8]
 8008bfa:	4b41      	ldr	r3, [pc, #260]	@ (8008d00 <tcp_input+0x4a0>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c02:	3301      	adds	r3, #1
 8008c04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d122      	bne.n	8008c50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	8b1a      	ldrh	r2, [r3, #24]
 8008c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8008cfc <tcp_input+0x49c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d11b      	bne.n	8008c52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	8ada      	ldrh	r2, [r3, #22]
 8008c1e:	4b37      	ldr	r3, [pc, #220]	@ (8008cfc <tcp_input+0x49c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	885b      	ldrh	r3, [r3, #2]
 8008c24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d113      	bne.n	8008c52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	4b34      	ldr	r3, [pc, #208]	@ (8008d00 <tcp_input+0x4a0>)
 8008c30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d10d      	bne.n	8008c52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b31      	ldr	r3, [pc, #196]	@ (8008d00 <tcp_input+0x4a0>)
 8008c3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d107      	bne.n	8008c52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008c42:	69f8      	ldr	r0, [r7, #28]
 8008c44:	f000 fb56 	bl	80092f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7fd ffdf 	bl	8006c0c <pbuf_free>
        return;
 8008c4e:	e1fd      	b.n	800904c <tcp_input+0x7ec>
        continue;
 8008c50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	61fb      	str	r3, [r7, #28]
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1bc      	bne.n	8008bd8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008c62:	4b2f      	ldr	r3, [pc, #188]	@ (8008d20 <tcp_input+0x4c0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	e02a      	b.n	8008cc0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	7a1b      	ldrb	r3, [r3, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00c      	beq.n	8008c8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	7a1a      	ldrb	r2, [r3, #8]
 8008c76:	4b22      	ldr	r3, [pc, #136]	@ (8008d00 <tcp_input+0x4a0>)
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c7e:	3301      	adds	r3, #1
 8008c80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d002      	beq.n	8008c8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	61bb      	str	r3, [r7, #24]
        continue;
 8008c8a:	e016      	b.n	8008cba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	8ada      	ldrh	r2, [r3, #22]
 8008c90:	4b1a      	ldr	r3, [pc, #104]	@ (8008cfc <tcp_input+0x49c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	885b      	ldrh	r3, [r3, #2]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d10c      	bne.n	8008cb6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	4b17      	ldr	r3, [pc, #92]	@ (8008d00 <tcp_input+0x4a0>)
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d00f      	beq.n	8008cc8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00d      	beq.n	8008cca <tcp_input+0x46a>
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1d1      	bne.n	8008c6a <tcp_input+0x40a>
 8008cc6:	e000      	b.n	8008cca <tcp_input+0x46a>
            break;
 8008cc8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d029      	beq.n	8008d24 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00a      	beq.n	8008cec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008cde:	4b10      	ldr	r3, [pc, #64]	@ (8008d20 <tcp_input+0x4c0>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8008d20 <tcp_input+0x4c0>)
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008cec:	6978      	ldr	r0, [r7, #20]
 8008cee:	f000 fa03 	bl	80090f8 <tcp_listen_input>
      }
      pbuf_free(p);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f7fd ff8a 	bl	8006c0c <pbuf_free>
      return;
 8008cf8:	e1a8      	b.n	800904c <tcp_input+0x7ec>
 8008cfa:	bf00      	nop
 8008cfc:	20008178 	.word	0x20008178
 8008d00:	20005234 	.word	0x20005234
 8008d04:	08011144 	.word	0x08011144
 8008d08:	08011270 	.word	0x08011270
 8008d0c:	08011190 	.word	0x08011190
 8008d10:	2000815c 	.word	0x2000815c
 8008d14:	0801129c 	.word	0x0801129c
 8008d18:	20008160 	.word	0x20008160
 8008d1c:	080112c8 	.word	0x080112c8
 8008d20:	20008158 	.word	0x20008158
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 8158 	beq.w	8008fdc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008d2c:	4b95      	ldr	r3, [pc, #596]	@ (8008f84 <tcp_input+0x724>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	891a      	ldrh	r2, [r3, #8]
 8008d36:	4b93      	ldr	r3, [pc, #588]	@ (8008f84 <tcp_input+0x724>)
 8008d38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008d3a:	4a92      	ldr	r2, [pc, #584]	@ (8008f84 <tcp_input+0x724>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008d40:	4b91      	ldr	r3, [pc, #580]	@ (8008f88 <tcp_input+0x728>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a8f      	ldr	r2, [pc, #572]	@ (8008f84 <tcp_input+0x724>)
 8008d46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008d48:	4b90      	ldr	r3, [pc, #576]	@ (8008f8c <tcp_input+0x72c>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008d4e:	4b90      	ldr	r3, [pc, #576]	@ (8008f90 <tcp_input+0x730>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008d54:	4b8f      	ldr	r3, [pc, #572]	@ (8008f94 <tcp_input+0x734>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008d5a:	4b8f      	ldr	r3, [pc, #572]	@ (8008f98 <tcp_input+0x738>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	f003 0308 	and.w	r3, r3, #8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d006      	beq.n	8008d74 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7b5b      	ldrb	r3, [r3, #13]
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d017      	beq.n	8008dac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008d7c:	69f8      	ldr	r0, [r7, #28]
 8008d7e:	f7ff f929 	bl	8007fd4 <tcp_process_refused_data>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f113 0f0d 	cmn.w	r3, #13
 8008d88:	d007      	beq.n	8008d9a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00c      	beq.n	8008dac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008d92:	4b82      	ldr	r3, [pc, #520]	@ (8008f9c <tcp_input+0x73c>)
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d008      	beq.n	8008dac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f040 80e3 	bne.w	8008f6a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008da4:	69f8      	ldr	r0, [r7, #28]
 8008da6:	f003 f9a7 	bl	800c0f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008daa:	e0de      	b.n	8008f6a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008dac:	4a7c      	ldr	r2, [pc, #496]	@ (8008fa0 <tcp_input+0x740>)
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008db2:	69f8      	ldr	r0, [r7, #28]
 8008db4:	f000 fb18 	bl	80093e8 <tcp_process>
 8008db8:	4603      	mov	r3, r0
 8008dba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008dbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dc0:	f113 0f0d 	cmn.w	r3, #13
 8008dc4:	f000 80d3 	beq.w	8008f6e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008dc8:	4b71      	ldr	r3, [pc, #452]	@ (8008f90 <tcp_input+0x730>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d015      	beq.n	8008e00 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d008      	beq.n	8008df0 <tcp_input+0x590>
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	6912      	ldr	r2, [r2, #16]
 8008de8:	f06f 010d 	mvn.w	r1, #13
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008df0:	69f9      	ldr	r1, [r7, #28]
 8008df2:	486c      	ldr	r0, [pc, #432]	@ (8008fa4 <tcp_input+0x744>)
 8008df4:	f7ff fbbc 	bl	8008570 <tcp_pcb_remove>
        tcp_free(pcb);
 8008df8:	69f8      	ldr	r0, [r7, #28]
 8008dfa:	f7fe f9a7 	bl	800714c <tcp_free>
 8008dfe:	e0da      	b.n	8008fb6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008e04:	4b63      	ldr	r3, [pc, #396]	@ (8008f94 <tcp_input+0x734>)
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01d      	beq.n	8008e48 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008e0c:	4b61      	ldr	r3, [pc, #388]	@ (8008f94 <tcp_input+0x734>)
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00a      	beq.n	8008e32 <tcp_input+0x5d2>
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e22:	69fa      	ldr	r2, [r7, #28]
 8008e24:	6910      	ldr	r0, [r2, #16]
 8008e26:	89fa      	ldrh	r2, [r7, #14]
 8008e28:	69f9      	ldr	r1, [r7, #28]
 8008e2a:	4798      	blx	r3
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	74fb      	strb	r3, [r7, #19]
 8008e30:	e001      	b.n	8008e36 <tcp_input+0x5d6>
 8008e32:	2300      	movs	r3, #0
 8008e34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008e36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e3a:	f113 0f0d 	cmn.w	r3, #13
 8008e3e:	f000 8098 	beq.w	8008f72 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008e42:	4b54      	ldr	r3, [pc, #336]	@ (8008f94 <tcp_input+0x734>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008e48:	69f8      	ldr	r0, [r7, #28]
 8008e4a:	f000 f915 	bl	8009078 <tcp_input_delayed_close>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f040 8090 	bne.w	8008f76 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008e56:	4b4d      	ldr	r3, [pc, #308]	@ (8008f8c <tcp_input+0x72c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d041      	beq.n	8008ee2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d006      	beq.n	8008e74 <tcp_input+0x614>
 8008e66:	4b50      	ldr	r3, [pc, #320]	@ (8008fa8 <tcp_input+0x748>)
 8008e68:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8008e6c:	494f      	ldr	r1, [pc, #316]	@ (8008fac <tcp_input+0x74c>)
 8008e6e:	4850      	ldr	r0, [pc, #320]	@ (8008fb0 <tcp_input+0x750>)
 8008e70:	f006 f93a 	bl	800f0e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	8b5b      	ldrh	r3, [r3, #26]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d008      	beq.n	8008e92 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008e80:	4b42      	ldr	r3, [pc, #264]	@ (8008f8c <tcp_input+0x72c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fd fec1 	bl	8006c0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008e8a:	69f8      	ldr	r0, [r7, #28]
 8008e8c:	f7fe fc46 	bl	800771c <tcp_abort>
            goto aborted;
 8008e90:	e091      	b.n	8008fb6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00c      	beq.n	8008eb6 <tcp_input+0x656>
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	6918      	ldr	r0, [r3, #16]
 8008ea6:	4b39      	ldr	r3, [pc, #228]	@ (8008f8c <tcp_input+0x72c>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	69f9      	ldr	r1, [r7, #28]
 8008eae:	47a0      	blx	r4
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	74fb      	strb	r3, [r7, #19]
 8008eb4:	e008      	b.n	8008ec8 <tcp_input+0x668>
 8008eb6:	4b35      	ldr	r3, [pc, #212]	@ (8008f8c <tcp_input+0x72c>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	69f9      	ldr	r1, [r7, #28]
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f7ff f95e 	bl	8008180 <tcp_recv_null>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008ec8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ecc:	f113 0f0d 	cmn.w	r3, #13
 8008ed0:	d053      	beq.n	8008f7a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008ed2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008eda:	4b2c      	ldr	r3, [pc, #176]	@ (8008f8c <tcp_input+0x72c>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8008f90 <tcp_input+0x730>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d030      	beq.n	8008f50 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d009      	beq.n	8008f0a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008efa:	7b5a      	ldrb	r2, [r3, #13]
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f00:	f042 0220 	orr.w	r2, r2, #32
 8008f04:	b2d2      	uxtb	r2, r2
 8008f06:	735a      	strb	r2, [r3, #13]
 8008f08:	e022      	b.n	8008f50 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f0e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008f12:	d005      	beq.n	8008f20 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f18:	3301      	adds	r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00b      	beq.n	8008f42 <tcp_input+0x6e2>
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	6918      	ldr	r0, [r3, #16]
 8008f34:	2300      	movs	r3, #0
 8008f36:	2200      	movs	r2, #0
 8008f38:	69f9      	ldr	r1, [r7, #28]
 8008f3a:	47a0      	blx	r4
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	74fb      	strb	r3, [r7, #19]
 8008f40:	e001      	b.n	8008f46 <tcp_input+0x6e6>
 8008f42:	2300      	movs	r3, #0
 8008f44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008f46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f4a:	f113 0f0d 	cmn.w	r3, #13
 8008f4e:	d016      	beq.n	8008f7e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008f50:	4b13      	ldr	r3, [pc, #76]	@ (8008fa0 <tcp_input+0x740>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008f56:	69f8      	ldr	r0, [r7, #28]
 8008f58:	f000 f88e 	bl	8009078 <tcp_input_delayed_close>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d128      	bne.n	8008fb4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008f62:	69f8      	ldr	r0, [r7, #28]
 8008f64:	f002 fac2 	bl	800b4ec <tcp_output>
 8008f68:	e025      	b.n	8008fb6 <tcp_input+0x756>
        goto aborted;
 8008f6a:	bf00      	nop
 8008f6c:	e023      	b.n	8008fb6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008f6e:	bf00      	nop
 8008f70:	e021      	b.n	8008fb6 <tcp_input+0x756>
              goto aborted;
 8008f72:	bf00      	nop
 8008f74:	e01f      	b.n	8008fb6 <tcp_input+0x756>
          goto aborted;
 8008f76:	bf00      	nop
 8008f78:	e01d      	b.n	8008fb6 <tcp_input+0x756>
            goto aborted;
 8008f7a:	bf00      	nop
 8008f7c:	e01b      	b.n	8008fb6 <tcp_input+0x756>
              goto aborted;
 8008f7e:	bf00      	nop
 8008f80:	e019      	b.n	8008fb6 <tcp_input+0x756>
 8008f82:	bf00      	nop
 8008f84:	20008168 	.word	0x20008168
 8008f88:	20008178 	.word	0x20008178
 8008f8c:	20008198 	.word	0x20008198
 8008f90:	20008195 	.word	0x20008195
 8008f94:	20008190 	.word	0x20008190
 8008f98:	20008194 	.word	0x20008194
 8008f9c:	20008192 	.word	0x20008192
 8008fa0:	2000819c 	.word	0x2000819c
 8008fa4:	2000815c 	.word	0x2000815c
 8008fa8:	08011144 	.word	0x08011144
 8008fac:	080112f8 	.word	0x080112f8
 8008fb0:	08011190 	.word	0x08011190
          goto aborted;
 8008fb4:	bf00      	nop
    tcp_input_pcb = NULL;
 8008fb6:	4b27      	ldr	r3, [pc, #156]	@ (8009054 <tcp_input+0x7f4>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008fbc:	4b26      	ldr	r3, [pc, #152]	@ (8009058 <tcp_input+0x7f8>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008fc2:	4b26      	ldr	r3, [pc, #152]	@ (800905c <tcp_input+0x7fc>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d03f      	beq.n	800904a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008fca:	4b24      	ldr	r3, [pc, #144]	@ (800905c <tcp_input+0x7fc>)
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fd fe1c 	bl	8006c0c <pbuf_free>
      inseg.p = NULL;
 8008fd4:	4b21      	ldr	r3, [pc, #132]	@ (800905c <tcp_input+0x7fc>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008fda:	e036      	b.n	800904a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008fdc:	4b20      	ldr	r3, [pc, #128]	@ (8009060 <tcp_input+0x800>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	899b      	ldrh	r3, [r3, #12]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fc fad7 	bl	8005598 <lwip_htons>
 8008fea:	4603      	mov	r3, r0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f003 0304 	and.w	r3, r3, #4
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d118      	bne.n	8009028 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8009064 <tcp_input+0x804>)
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8009068 <tcp_input+0x808>)
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	4b1a      	ldr	r3, [pc, #104]	@ (800906c <tcp_input+0x80c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009006:	4b16      	ldr	r3, [pc, #88]	@ (8009060 <tcp_input+0x800>)
 8009008:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800900a:	885b      	ldrh	r3, [r3, #2]
 800900c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800900e:	4a14      	ldr	r2, [pc, #80]	@ (8009060 <tcp_input+0x800>)
 8009010:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009012:	8812      	ldrh	r2, [r2, #0]
 8009014:	b292      	uxth	r2, r2
 8009016:	9202      	str	r2, [sp, #8]
 8009018:	9301      	str	r3, [sp, #4]
 800901a:	4b15      	ldr	r3, [pc, #84]	@ (8009070 <tcp_input+0x810>)
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	4b15      	ldr	r3, [pc, #84]	@ (8009074 <tcp_input+0x814>)
 8009020:	4602      	mov	r2, r0
 8009022:	2000      	movs	r0, #0
 8009024:	f003 f816 	bl	800c054 <tcp_rst>
    pbuf_free(p);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7fd fdef 	bl	8006c0c <pbuf_free>
  return;
 800902e:	e00c      	b.n	800904a <tcp_input+0x7ea>
    goto dropped;
 8009030:	bf00      	nop
 8009032:	e006      	b.n	8009042 <tcp_input+0x7e2>
    goto dropped;
 8009034:	bf00      	nop
 8009036:	e004      	b.n	8009042 <tcp_input+0x7e2>
    goto dropped;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <tcp_input+0x7e2>
      goto dropped;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <tcp_input+0x7e2>
      goto dropped;
 8009040:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7fd fde2 	bl	8006c0c <pbuf_free>
 8009048:	e000      	b.n	800904c <tcp_input+0x7ec>
  return;
 800904a:	bf00      	nop
}
 800904c:	3724      	adds	r7, #36	@ 0x24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd90      	pop	{r4, r7, pc}
 8009052:	bf00      	nop
 8009054:	2000819c 	.word	0x2000819c
 8009058:	20008198 	.word	0x20008198
 800905c:	20008168 	.word	0x20008168
 8009060:	20008178 	.word	0x20008178
 8009064:	2000818c 	.word	0x2000818c
 8009068:	20008192 	.word	0x20008192
 800906c:	20008188 	.word	0x20008188
 8009070:	20005244 	.word	0x20005244
 8009074:	20005248 	.word	0x20005248

08009078 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <tcp_input_delayed_close+0x1c>
 8009086:	4b17      	ldr	r3, [pc, #92]	@ (80090e4 <tcp_input_delayed_close+0x6c>)
 8009088:	f240 225a 	movw	r2, #602	@ 0x25a
 800908c:	4916      	ldr	r1, [pc, #88]	@ (80090e8 <tcp_input_delayed_close+0x70>)
 800908e:	4817      	ldr	r0, [pc, #92]	@ (80090ec <tcp_input_delayed_close+0x74>)
 8009090:	f006 f82a 	bl	800f0e8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009094:	4b16      	ldr	r3, [pc, #88]	@ (80090f0 <tcp_input_delayed_close+0x78>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 0310 	and.w	r3, r3, #16
 800909c:	2b00      	cmp	r3, #0
 800909e:	d01c      	beq.n	80090da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	8b5b      	ldrh	r3, [r3, #26]
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10d      	bne.n	80090c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d008      	beq.n	80090c8 <tcp_input_delayed_close+0x50>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6912      	ldr	r2, [r2, #16]
 80090c0:	f06f 010e 	mvn.w	r1, #14
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	480a      	ldr	r0, [pc, #40]	@ (80090f4 <tcp_input_delayed_close+0x7c>)
 80090cc:	f7ff fa50 	bl	8008570 <tcp_pcb_remove>
    tcp_free(pcb);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7fe f83b 	bl	800714c <tcp_free>
    return 1;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	08011144 	.word	0x08011144
 80090e8:	08011314 	.word	0x08011314
 80090ec:	08011190 	.word	0x08011190
 80090f0:	20008195 	.word	0x20008195
 80090f4:	2000815c 	.word	0x2000815c

080090f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b08b      	sub	sp, #44	@ 0x2c
 80090fc:	af04      	add	r7, sp, #16
 80090fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009100:	4b6f      	ldr	r3, [pc, #444]	@ (80092c0 <tcp_listen_input+0x1c8>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 0304 	and.w	r3, r3, #4
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 80d2 	bne.w	80092b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d106      	bne.n	8009122 <tcp_listen_input+0x2a>
 8009114:	4b6b      	ldr	r3, [pc, #428]	@ (80092c4 <tcp_listen_input+0x1cc>)
 8009116:	f240 2281 	movw	r2, #641	@ 0x281
 800911a:	496b      	ldr	r1, [pc, #428]	@ (80092c8 <tcp_listen_input+0x1d0>)
 800911c:	486b      	ldr	r0, [pc, #428]	@ (80092cc <tcp_listen_input+0x1d4>)
 800911e:	f005 ffe3 	bl	800f0e8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009122:	4b67      	ldr	r3, [pc, #412]	@ (80092c0 <tcp_listen_input+0x1c8>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	d019      	beq.n	8009162 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800912e:	4b68      	ldr	r3, [pc, #416]	@ (80092d0 <tcp_listen_input+0x1d8>)
 8009130:	6819      	ldr	r1, [r3, #0]
 8009132:	4b68      	ldr	r3, [pc, #416]	@ (80092d4 <tcp_listen_input+0x1dc>)
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	4b67      	ldr	r3, [pc, #412]	@ (80092d8 <tcp_listen_input+0x1e0>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800913e:	4b67      	ldr	r3, [pc, #412]	@ (80092dc <tcp_listen_input+0x1e4>)
 8009140:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009142:	885b      	ldrh	r3, [r3, #2]
 8009144:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009146:	4a65      	ldr	r2, [pc, #404]	@ (80092dc <tcp_listen_input+0x1e4>)
 8009148:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800914a:	8812      	ldrh	r2, [r2, #0]
 800914c:	b292      	uxth	r2, r2
 800914e:	9202      	str	r2, [sp, #8]
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	4b63      	ldr	r3, [pc, #396]	@ (80092e0 <tcp_listen_input+0x1e8>)
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	4b63      	ldr	r3, [pc, #396]	@ (80092e4 <tcp_listen_input+0x1ec>)
 8009158:	4602      	mov	r2, r0
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f002 ff7a 	bl	800c054 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009160:	e0a9      	b.n	80092b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009162:	4b57      	ldr	r3, [pc, #348]	@ (80092c0 <tcp_listen_input+0x1c8>)
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 80a3 	beq.w	80092b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	7d5b      	ldrb	r3, [r3, #21]
 8009174:	4618      	mov	r0, r3
 8009176:	f7ff f927 	bl	80083c8 <tcp_alloc>
 800917a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d111      	bne.n	80091a6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <tcp_listen_input+0xa8>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	6910      	ldr	r0, [r2, #16]
 8009192:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009196:	2100      	movs	r1, #0
 8009198:	4798      	blx	r3
 800919a:	4603      	mov	r3, r0
 800919c:	73bb      	strb	r3, [r7, #14]
      return;
 800919e:	e08b      	b.n	80092b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091a0:	23f0      	movs	r3, #240	@ 0xf0
 80091a2:	73bb      	strb	r3, [r7, #14]
      return;
 80091a4:	e088      	b.n	80092b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80091a6:	4b50      	ldr	r3, [pc, #320]	@ (80092e8 <tcp_listen_input+0x1f0>)
 80091a8:	695a      	ldr	r2, [r3, #20]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80091ae:	4b4e      	ldr	r3, [pc, #312]	@ (80092e8 <tcp_listen_input+0x1f0>)
 80091b0:	691a      	ldr	r2, [r3, #16]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	8ada      	ldrh	r2, [r3, #22]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80091be:	4b47      	ldr	r3, [pc, #284]	@ (80092dc <tcp_listen_input+0x1e4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2203      	movs	r2, #3
 80091ce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80091d0:	4b41      	ldr	r3, [pc, #260]	@ (80092d8 <tcp_listen_input+0x1e0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80091e2:	6978      	ldr	r0, [r7, #20]
 80091e4:	f7ff fa58 	bl	8008698 <tcp_next_iss>
 80091e8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009202:	4b35      	ldr	r3, [pc, #212]	@ (80092d8 <tcp_listen_input+0x1e0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	1e5a      	subs	r2, r3, #1
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	7a5b      	ldrb	r3, [r3, #9]
 800921e:	f003 030c 	and.w	r3, r3, #12
 8009222:	b2da      	uxtb	r2, r3
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7a1a      	ldrb	r2, [r3, #8]
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009230:	4b2e      	ldr	r3, [pc, #184]	@ (80092ec <tcp_listen_input+0x1f4>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	60da      	str	r2, [r3, #12]
 8009238:	4a2c      	ldr	r2, [pc, #176]	@ (80092ec <tcp_listen_input+0x1f4>)
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	f003 f8cb 	bl	800c3d8 <tcp_timer_needed>
 8009242:	4b2b      	ldr	r3, [pc, #172]	@ (80092f0 <tcp_listen_input+0x1f8>)
 8009244:	2201      	movs	r2, #1
 8009246:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009248:	6978      	ldr	r0, [r7, #20]
 800924a:	f001 fd8b 	bl	800ad64 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800924e:	4b23      	ldr	r3, [pc, #140]	@ (80092dc <tcp_listen_input+0x1e4>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	89db      	ldrh	r3, [r3, #14]
 8009254:	b29a      	uxth	r2, r3
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	3304      	adds	r3, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f004 fc4d 	bl	800db10 <ip4_route>
 8009276:	4601      	mov	r1, r0
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	3304      	adds	r3, #4
 800927c:	461a      	mov	r2, r3
 800927e:	4620      	mov	r0, r4
 8009280:	f7ff fa30 	bl	80086e4 <tcp_eff_send_mss_netif>
 8009284:	4603      	mov	r3, r0
 8009286:	461a      	mov	r2, r3
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800928c:	2112      	movs	r1, #18
 800928e:	6978      	ldr	r0, [r7, #20]
 8009290:	f002 f83e 	bl	800b310 <tcp_enqueue_flags>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80092a0:	2100      	movs	r1, #0
 80092a2:	6978      	ldr	r0, [r7, #20]
 80092a4:	f7fe f97c 	bl	80075a0 <tcp_abandon>
      return;
 80092a8:	e006      	b.n	80092b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80092aa:	6978      	ldr	r0, [r7, #20]
 80092ac:	f002 f91e 	bl	800b4ec <tcp_output>
  return;
 80092b0:	e001      	b.n	80092b6 <tcp_listen_input+0x1be>
    return;
 80092b2:	bf00      	nop
 80092b4:	e000      	b.n	80092b8 <tcp_listen_input+0x1c0>
  return;
 80092b6:	bf00      	nop
}
 80092b8:	371c      	adds	r7, #28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd90      	pop	{r4, r7, pc}
 80092be:	bf00      	nop
 80092c0:	20008194 	.word	0x20008194
 80092c4:	08011144 	.word	0x08011144
 80092c8:	0801133c 	.word	0x0801133c
 80092cc:	08011190 	.word	0x08011190
 80092d0:	2000818c 	.word	0x2000818c
 80092d4:	20008192 	.word	0x20008192
 80092d8:	20008188 	.word	0x20008188
 80092dc:	20008178 	.word	0x20008178
 80092e0:	20005244 	.word	0x20005244
 80092e4:	20005248 	.word	0x20005248
 80092e8:	20005234 	.word	0x20005234
 80092ec:	2000815c 	.word	0x2000815c
 80092f0:	20008164 	.word	0x20008164

080092f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af04      	add	r7, sp, #16
 80092fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80092fc:	4b2f      	ldr	r3, [pc, #188]	@ (80093bc <tcp_timewait_input+0xc8>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d153      	bne.n	80093b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d106      	bne.n	800931c <tcp_timewait_input+0x28>
 800930e:	4b2c      	ldr	r3, [pc, #176]	@ (80093c0 <tcp_timewait_input+0xcc>)
 8009310:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009314:	492b      	ldr	r1, [pc, #172]	@ (80093c4 <tcp_timewait_input+0xd0>)
 8009316:	482c      	ldr	r0, [pc, #176]	@ (80093c8 <tcp_timewait_input+0xd4>)
 8009318:	f005 fee6 	bl	800f0e8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800931c:	4b27      	ldr	r3, [pc, #156]	@ (80093bc <tcp_timewait_input+0xc8>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d02a      	beq.n	800937e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009328:	4b28      	ldr	r3, [pc, #160]	@ (80093cc <tcp_timewait_input+0xd8>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	db2d      	blt.n	8009392 <tcp_timewait_input+0x9e>
 8009336:	4b25      	ldr	r3, [pc, #148]	@ (80093cc <tcp_timewait_input+0xd8>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009342:	440b      	add	r3, r1
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	dc23      	bgt.n	8009392 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800934a:	4b21      	ldr	r3, [pc, #132]	@ (80093d0 <tcp_timewait_input+0xdc>)
 800934c:	6819      	ldr	r1, [r3, #0]
 800934e:	4b21      	ldr	r3, [pc, #132]	@ (80093d4 <tcp_timewait_input+0xe0>)
 8009350:	881b      	ldrh	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	4b1d      	ldr	r3, [pc, #116]	@ (80093cc <tcp_timewait_input+0xd8>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800935a:	4b1f      	ldr	r3, [pc, #124]	@ (80093d8 <tcp_timewait_input+0xe4>)
 800935c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800935e:	885b      	ldrh	r3, [r3, #2]
 8009360:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009362:	4a1d      	ldr	r2, [pc, #116]	@ (80093d8 <tcp_timewait_input+0xe4>)
 8009364:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009366:	8812      	ldrh	r2, [r2, #0]
 8009368:	b292      	uxth	r2, r2
 800936a:	9202      	str	r2, [sp, #8]
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	4b1b      	ldr	r3, [pc, #108]	@ (80093dc <tcp_timewait_input+0xe8>)
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	4b1b      	ldr	r3, [pc, #108]	@ (80093e0 <tcp_timewait_input+0xec>)
 8009374:	4602      	mov	r2, r0
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f002 fe6c 	bl	800c054 <tcp_rst>
      return;
 800937c:	e01b      	b.n	80093b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800937e:	4b0f      	ldr	r3, [pc, #60]	@ (80093bc <tcp_timewait_input+0xc8>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800938a:	4b16      	ldr	r3, [pc, #88]	@ (80093e4 <tcp_timewait_input+0xf0>)
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009392:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <tcp_timewait_input+0xe0>)
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00c      	beq.n	80093b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	8b5b      	ldrh	r3, [r3, #26]
 800939e:	f043 0302 	orr.w	r3, r3, #2
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f002 f89f 	bl	800b4ec <tcp_output>
  }
  return;
 80093ae:	e001      	b.n	80093b4 <tcp_timewait_input+0xc0>
    return;
 80093b0:	bf00      	nop
 80093b2:	e000      	b.n	80093b6 <tcp_timewait_input+0xc2>
  return;
 80093b4:	bf00      	nop
}
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20008194 	.word	0x20008194
 80093c0:	08011144 	.word	0x08011144
 80093c4:	0801135c 	.word	0x0801135c
 80093c8:	08011190 	.word	0x08011190
 80093cc:	20008188 	.word	0x20008188
 80093d0:	2000818c 	.word	0x2000818c
 80093d4:	20008192 	.word	0x20008192
 80093d8:	20008178 	.word	0x20008178
 80093dc:	20005244 	.word	0x20005244
 80093e0:	20005248 	.word	0x20005248
 80093e4:	20008150 	.word	0x20008150

080093e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b08d      	sub	sp, #52	@ 0x34
 80093ec:	af04      	add	r7, sp, #16
 80093ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d106      	bne.n	800940c <tcp_process+0x24>
 80093fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009674 <tcp_process+0x28c>)
 8009400:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009404:	499c      	ldr	r1, [pc, #624]	@ (8009678 <tcp_process+0x290>)
 8009406:	489d      	ldr	r0, [pc, #628]	@ (800967c <tcp_process+0x294>)
 8009408:	f005 fe6e 	bl	800f0e8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800940c:	4b9c      	ldr	r3, [pc, #624]	@ (8009680 <tcp_process+0x298>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	d04e      	beq.n	80094b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	7d1b      	ldrb	r3, [r3, #20]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d108      	bne.n	8009432 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009424:	4b97      	ldr	r3, [pc, #604]	@ (8009684 <tcp_process+0x29c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	429a      	cmp	r2, r3
 800942a:	d123      	bne.n	8009474 <tcp_process+0x8c>
        acceptable = 1;
 800942c:	2301      	movs	r3, #1
 800942e:	76fb      	strb	r3, [r7, #27]
 8009430:	e020      	b.n	8009474 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009436:	4b94      	ldr	r3, [pc, #592]	@ (8009688 <tcp_process+0x2a0>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	429a      	cmp	r2, r3
 800943c:	d102      	bne.n	8009444 <tcp_process+0x5c>
        acceptable = 1;
 800943e:	2301      	movs	r3, #1
 8009440:	76fb      	strb	r3, [r7, #27]
 8009442:	e017      	b.n	8009474 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009444:	4b90      	ldr	r3, [pc, #576]	@ (8009688 <tcp_process+0x2a0>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	db10      	blt.n	8009474 <tcp_process+0x8c>
 8009452:	4b8d      	ldr	r3, [pc, #564]	@ (8009688 <tcp_process+0x2a0>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800945e:	440b      	add	r3, r1
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	dc06      	bgt.n	8009474 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	8b5b      	ldrh	r3, [r3, #26]
 800946a:	f043 0302 	orr.w	r3, r3, #2
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009474:	7efb      	ldrb	r3, [r7, #27]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d01b      	beq.n	80094b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	7d1b      	ldrb	r3, [r3, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <tcp_process+0xa8>
 8009482:	4b7c      	ldr	r3, [pc, #496]	@ (8009674 <tcp_process+0x28c>)
 8009484:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8009488:	4980      	ldr	r1, [pc, #512]	@ (800968c <tcp_process+0x2a4>)
 800948a:	487c      	ldr	r0, [pc, #496]	@ (800967c <tcp_process+0x294>)
 800948c:	f005 fe2c 	bl	800f0e8 <iprintf>
      recv_flags |= TF_RESET;
 8009490:	4b7f      	ldr	r3, [pc, #508]	@ (8009690 <tcp_process+0x2a8>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	f043 0308 	orr.w	r3, r3, #8
 8009498:	b2da      	uxtb	r2, r3
 800949a:	4b7d      	ldr	r3, [pc, #500]	@ (8009690 <tcp_process+0x2a8>)
 800949c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	8b5b      	ldrh	r3, [r3, #26]
 80094a2:	f023 0301 	bic.w	r3, r3, #1
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80094ac:	f06f 030d 	mvn.w	r3, #13
 80094b0:	e37a      	b.n	8009ba8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	e378      	b.n	8009ba8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80094b6:	4b72      	ldr	r3, [pc, #456]	@ (8009680 <tcp_process+0x298>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d010      	beq.n	80094e4 <tcp_process+0xfc>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	7d1b      	ldrb	r3, [r3, #20]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d00c      	beq.n	80094e4 <tcp_process+0xfc>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7d1b      	ldrb	r3, [r3, #20]
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d008      	beq.n	80094e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	8b5b      	ldrh	r3, [r3, #26]
 80094d6:	f043 0302 	orr.w	r3, r3, #2
 80094da:	b29a      	uxth	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	e361      	b.n	8009ba8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	8b5b      	ldrh	r3, [r3, #26]
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d103      	bne.n	80094f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80094f0:	4b68      	ldr	r3, [pc, #416]	@ (8009694 <tcp_process+0x2ac>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f001 fc2b 	bl	800ad64 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	7d1b      	ldrb	r3, [r3, #20]
 8009512:	3b02      	subs	r3, #2
 8009514:	2b07      	cmp	r3, #7
 8009516:	f200 8337 	bhi.w	8009b88 <tcp_process+0x7a0>
 800951a:	a201      	add	r2, pc, #4	@ (adr r2, 8009520 <tcp_process+0x138>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	08009541 	.word	0x08009541
 8009524:	08009771 	.word	0x08009771
 8009528:	080098e9 	.word	0x080098e9
 800952c:	08009913 	.word	0x08009913
 8009530:	08009a37 	.word	0x08009a37
 8009534:	080098e9 	.word	0x080098e9
 8009538:	08009ac3 	.word	0x08009ac3
 800953c:	08009b53 	.word	0x08009b53
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009540:	4b4f      	ldr	r3, [pc, #316]	@ (8009680 <tcp_process+0x298>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80e4 	beq.w	8009716 <tcp_process+0x32e>
 800954e:	4b4c      	ldr	r3, [pc, #304]	@ (8009680 <tcp_process+0x298>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 80dd 	beq.w	8009716 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	4b48      	ldr	r3, [pc, #288]	@ (8009684 <tcp_process+0x29c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	429a      	cmp	r2, r3
 8009568:	f040 80d5 	bne.w	8009716 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800956c:	4b46      	ldr	r3, [pc, #280]	@ (8009688 <tcp_process+0x2a0>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800957e:	4b41      	ldr	r3, [pc, #260]	@ (8009684 <tcp_process+0x29c>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009586:	4b44      	ldr	r3, [pc, #272]	@ (8009698 <tcp_process+0x2b0>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	89db      	ldrh	r3, [r3, #14]
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80095a0:	4b39      	ldr	r3, [pc, #228]	@ (8009688 <tcp_process+0x2a0>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	1e5a      	subs	r2, r3, #1
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2204      	movs	r2, #4
 80095ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4618      	mov	r0, r3
 80095ba:	f004 faa9 	bl	800db10 <ip4_route>
 80095be:	4601      	mov	r1, r0
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3304      	adds	r3, #4
 80095c4:	461a      	mov	r2, r3
 80095c6:	4620      	mov	r0, r4
 80095c8:	f7ff f88c 	bl	80086e4 <tcp_eff_send_mss_netif>
 80095cc:	4603      	mov	r3, r0
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80095d8:	009a      	lsls	r2, r3, #2
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80095e4:	428b      	cmp	r3, r1
 80095e6:	bf38      	it	cc
 80095e8:	460b      	movcc	r3, r1
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d204      	bcs.n	80095f8 <tcp_process+0x210>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	e00d      	b.n	8009614 <tcp_process+0x22c>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009602:	4293      	cmp	r3, r2
 8009604:	d904      	bls.n	8009610 <tcp_process+0x228>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	b29b      	uxth	r3, r3
 800960e:	e001      	b.n	8009614 <tcp_process+0x22c>
 8009610:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009620:	2b00      	cmp	r3, #0
 8009622:	d106      	bne.n	8009632 <tcp_process+0x24a>
 8009624:	4b13      	ldr	r3, [pc, #76]	@ (8009674 <tcp_process+0x28c>)
 8009626:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800962a:	491c      	ldr	r1, [pc, #112]	@ (800969c <tcp_process+0x2b4>)
 800962c:	4813      	ldr	r0, [pc, #76]	@ (800967c <tcp_process+0x294>)
 800962e:	f005 fd5b 	bl	800f0e8 <iprintf>
        --pcb->snd_queuelen;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009646:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d12a      	bne.n	80096a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009652:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d106      	bne.n	8009668 <tcp_process+0x280>
 800965a:	4b06      	ldr	r3, [pc, #24]	@ (8009674 <tcp_process+0x28c>)
 800965c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8009660:	490f      	ldr	r1, [pc, #60]	@ (80096a0 <tcp_process+0x2b8>)
 8009662:	4806      	ldr	r0, [pc, #24]	@ (800967c <tcp_process+0x294>)
 8009664:	f005 fd40 	bl	800f0e8 <iprintf>
          pcb->unsent = rseg->next;
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009670:	e01c      	b.n	80096ac <tcp_process+0x2c4>
 8009672:	bf00      	nop
 8009674:	08011144 	.word	0x08011144
 8009678:	0801137c 	.word	0x0801137c
 800967c:	08011190 	.word	0x08011190
 8009680:	20008194 	.word	0x20008194
 8009684:	2000818c 	.word	0x2000818c
 8009688:	20008188 	.word	0x20008188
 800968c:	08011398 	.word	0x08011398
 8009690:	20008195 	.word	0x20008195
 8009694:	20008150 	.word	0x20008150
 8009698:	20008178 	.word	0x20008178
 800969c:	080113b8 	.word	0x080113b8
 80096a0:	080113d0 	.word	0x080113d0
        } else {
          pcb->unacked = rseg->next;
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80096ac:	69f8      	ldr	r0, [r7, #28]
 80096ae:	f7fe fd22 	bl	80080f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d104      	bne.n	80096c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80096c0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80096c2:	e006      	b.n	80096d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00a      	beq.n	80096f2 <tcp_process+0x30a>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6910      	ldr	r0, [r2, #16]
 80096e6:	2200      	movs	r2, #0
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	4798      	blx	r3
 80096ec:	4603      	mov	r3, r0
 80096ee:	76bb      	strb	r3, [r7, #26]
 80096f0:	e001      	b.n	80096f6 <tcp_process+0x30e>
 80096f2:	2300      	movs	r3, #0
 80096f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80096f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80096fa:	f113 0f0d 	cmn.w	r3, #13
 80096fe:	d102      	bne.n	8009706 <tcp_process+0x31e>
          return ERR_ABRT;
 8009700:	f06f 030c 	mvn.w	r3, #12
 8009704:	e250      	b.n	8009ba8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	8b5b      	ldrh	r3, [r3, #26]
 800970a:	f043 0302 	orr.w	r3, r3, #2
 800970e:	b29a      	uxth	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009714:	e23a      	b.n	8009b8c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009716:	4b98      	ldr	r3, [pc, #608]	@ (8009978 <tcp_process+0x590>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	f003 0310 	and.w	r3, r3, #16
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 8234 	beq.w	8009b8c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009724:	4b95      	ldr	r3, [pc, #596]	@ (800997c <tcp_process+0x594>)
 8009726:	6819      	ldr	r1, [r3, #0]
 8009728:	4b95      	ldr	r3, [pc, #596]	@ (8009980 <tcp_process+0x598>)
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	461a      	mov	r2, r3
 800972e:	4b95      	ldr	r3, [pc, #596]	@ (8009984 <tcp_process+0x59c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009734:	4b94      	ldr	r3, [pc, #592]	@ (8009988 <tcp_process+0x5a0>)
 8009736:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800973c:	4a92      	ldr	r2, [pc, #584]	@ (8009988 <tcp_process+0x5a0>)
 800973e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009740:	8812      	ldrh	r2, [r2, #0]
 8009742:	b292      	uxth	r2, r2
 8009744:	9202      	str	r2, [sp, #8]
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	4b90      	ldr	r3, [pc, #576]	@ (800998c <tcp_process+0x5a4>)
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	4b90      	ldr	r3, [pc, #576]	@ (8009990 <tcp_process+0x5a8>)
 800974e:	4602      	mov	r2, r0
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f002 fc7f 	bl	800c054 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800975c:	2b05      	cmp	r3, #5
 800975e:	f200 8215 	bhi.w	8009b8c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f002 fa4b 	bl	800bc04 <tcp_rexmit_rto>
      break;
 800976e:	e20d      	b.n	8009b8c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009770:	4b81      	ldr	r3, [pc, #516]	@ (8009978 <tcp_process+0x590>)
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	f003 0310 	and.w	r3, r3, #16
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 80a1 	beq.w	80098c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800977e:	4b7f      	ldr	r3, [pc, #508]	@ (800997c <tcp_process+0x594>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	3b01      	subs	r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	db7e      	blt.n	800988c <tcp_process+0x4a4>
 800978e:	4b7b      	ldr	r3, [pc, #492]	@ (800997c <tcp_process+0x594>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	dc77      	bgt.n	800988c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2204      	movs	r2, #4
 80097a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d102      	bne.n	80097b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80097aa:	23fa      	movs	r3, #250	@ 0xfa
 80097ac:	76bb      	strb	r3, [r7, #26]
 80097ae:	e01d      	b.n	80097ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d106      	bne.n	80097c8 <tcp_process+0x3e0>
 80097ba:	4b76      	ldr	r3, [pc, #472]	@ (8009994 <tcp_process+0x5ac>)
 80097bc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80097c0:	4975      	ldr	r1, [pc, #468]	@ (8009998 <tcp_process+0x5b0>)
 80097c2:	4876      	ldr	r0, [pc, #472]	@ (800999c <tcp_process+0x5b4>)
 80097c4:	f005 fc90 	bl	800f0e8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <tcp_process+0x400>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	6910      	ldr	r0, [r2, #16]
 80097dc:	2200      	movs	r2, #0
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	4798      	blx	r3
 80097e2:	4603      	mov	r3, r0
 80097e4:	76bb      	strb	r3, [r7, #26]
 80097e6:	e001      	b.n	80097ec <tcp_process+0x404>
 80097e8:	23f0      	movs	r3, #240	@ 0xf0
 80097ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80097ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80097f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80097f8:	f113 0f0d 	cmn.w	r3, #13
 80097fc:	d002      	beq.n	8009804 <tcp_process+0x41c>
              tcp_abort(pcb);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7fd ff8c 	bl	800771c <tcp_abort>
            }
            return ERR_ABRT;
 8009804:	f06f 030c 	mvn.w	r3, #12
 8009808:	e1ce      	b.n	8009ba8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fae0 	bl	8009dd0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009810:	4b63      	ldr	r3, [pc, #396]	@ (80099a0 <tcp_process+0x5b8>)
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d005      	beq.n	8009824 <tcp_process+0x43c>
            recv_acked--;
 8009818:	4b61      	ldr	r3, [pc, #388]	@ (80099a0 <tcp_process+0x5b8>)
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	3b01      	subs	r3, #1
 800981e:	b29a      	uxth	r2, r3
 8009820:	4b5f      	ldr	r3, [pc, #380]	@ (80099a0 <tcp_process+0x5b8>)
 8009822:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009828:	009a      	lsls	r2, r3, #2
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	f241 111c 	movw	r1, #4380	@ 0x111c
 8009834:	428b      	cmp	r3, r1
 8009836:	bf38      	it	cc
 8009838:	460b      	movcc	r3, r1
 800983a:	429a      	cmp	r2, r3
 800983c:	d204      	bcs.n	8009848 <tcp_process+0x460>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	b29b      	uxth	r3, r3
 8009846:	e00d      	b.n	8009864 <tcp_process+0x47c>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009852:	4293      	cmp	r3, r2
 8009854:	d904      	bls.n	8009860 <tcp_process+0x478>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	b29b      	uxth	r3, r3
 800985e:	e001      	b.n	8009864 <tcp_process+0x47c>
 8009860:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800986a:	4b4e      	ldr	r3, [pc, #312]	@ (80099a4 <tcp_process+0x5bc>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	f003 0320 	and.w	r3, r3, #32
 8009872:	2b00      	cmp	r3, #0
 8009874:	d037      	beq.n	80098e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	8b5b      	ldrh	r3, [r3, #26]
 800987a:	f043 0302 	orr.w	r3, r3, #2
 800987e:	b29a      	uxth	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2207      	movs	r2, #7
 8009888:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800988a:	e02c      	b.n	80098e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800988c:	4b3b      	ldr	r3, [pc, #236]	@ (800997c <tcp_process+0x594>)
 800988e:	6819      	ldr	r1, [r3, #0]
 8009890:	4b3b      	ldr	r3, [pc, #236]	@ (8009980 <tcp_process+0x598>)
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	4b3b      	ldr	r3, [pc, #236]	@ (8009984 <tcp_process+0x59c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800989c:	4b3a      	ldr	r3, [pc, #232]	@ (8009988 <tcp_process+0x5a0>)
 800989e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098a0:	885b      	ldrh	r3, [r3, #2]
 80098a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098a4:	4a38      	ldr	r2, [pc, #224]	@ (8009988 <tcp_process+0x5a0>)
 80098a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098a8:	8812      	ldrh	r2, [r2, #0]
 80098aa:	b292      	uxth	r2, r2
 80098ac:	9202      	str	r2, [sp, #8]
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	4b36      	ldr	r3, [pc, #216]	@ (800998c <tcp_process+0x5a4>)
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4b36      	ldr	r3, [pc, #216]	@ (8009990 <tcp_process+0x5a8>)
 80098b6:	4602      	mov	r2, r0
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f002 fbcb 	bl	800c054 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80098be:	e167      	b.n	8009b90 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80098c0:	4b2d      	ldr	r3, [pc, #180]	@ (8009978 <tcp_process+0x590>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	f003 0302 	and.w	r3, r3, #2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 8161 	beq.w	8009b90 <tcp_process+0x7a8>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d2:	1e5a      	subs	r2, r3, #1
 80098d4:	4b2b      	ldr	r3, [pc, #172]	@ (8009984 <tcp_process+0x59c>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	f040 8159 	bne.w	8009b90 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f002 f9b2 	bl	800bc48 <tcp_rexmit>
      break;
 80098e4:	e154      	b.n	8009b90 <tcp_process+0x7a8>
 80098e6:	e153      	b.n	8009b90 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fa71 	bl	8009dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80098ee:	4b2d      	ldr	r3, [pc, #180]	@ (80099a4 <tcp_process+0x5bc>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 814c 	beq.w	8009b94 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	8b5b      	ldrh	r3, [r3, #26]
 8009900:	f043 0302 	orr.w	r3, r3, #2
 8009904:	b29a      	uxth	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2207      	movs	r2, #7
 800990e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009910:	e140      	b.n	8009b94 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fa5c 	bl	8009dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009918:	4b22      	ldr	r3, [pc, #136]	@ (80099a4 <tcp_process+0x5bc>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	f003 0320 	and.w	r3, r3, #32
 8009920:	2b00      	cmp	r3, #0
 8009922:	d071      	beq.n	8009a08 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009924:	4b14      	ldr	r3, [pc, #80]	@ (8009978 <tcp_process+0x590>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 0310 	and.w	r3, r3, #16
 800992c:	2b00      	cmp	r3, #0
 800992e:	d060      	beq.n	80099f2 <tcp_process+0x60a>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009934:	4b11      	ldr	r3, [pc, #68]	@ (800997c <tcp_process+0x594>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d15a      	bne.n	80099f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009940:	2b00      	cmp	r3, #0
 8009942:	d156      	bne.n	80099f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	8b5b      	ldrh	r3, [r3, #26]
 8009948:	f043 0302 	orr.w	r3, r3, #2
 800994c:	b29a      	uxth	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7fe fdbc 	bl	80084d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009958:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <tcp_process+0x5c0>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	429a      	cmp	r2, r3
 8009960:	d105      	bne.n	800996e <tcp_process+0x586>
 8009962:	4b11      	ldr	r3, [pc, #68]	@ (80099a8 <tcp_process+0x5c0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	4a0f      	ldr	r2, [pc, #60]	@ (80099a8 <tcp_process+0x5c0>)
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	e02e      	b.n	80099cc <tcp_process+0x5e4>
 800996e:	4b0e      	ldr	r3, [pc, #56]	@ (80099a8 <tcp_process+0x5c0>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e027      	b.n	80099c6 <tcp_process+0x5de>
 8009976:	bf00      	nop
 8009978:	20008194 	.word	0x20008194
 800997c:	2000818c 	.word	0x2000818c
 8009980:	20008192 	.word	0x20008192
 8009984:	20008188 	.word	0x20008188
 8009988:	20008178 	.word	0x20008178
 800998c:	20005244 	.word	0x20005244
 8009990:	20005248 	.word	0x20005248
 8009994:	08011144 	.word	0x08011144
 8009998:	080113e4 	.word	0x080113e4
 800999c:	08011190 	.word	0x08011190
 80099a0:	20008190 	.word	0x20008190
 80099a4:	20008195 	.word	0x20008195
 80099a8:	2000815c 	.word	0x2000815c
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d104      	bne.n	80099c0 <tcp_process+0x5d8>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	60da      	str	r2, [r3, #12]
 80099be:	e005      	b.n	80099cc <tcp_process+0x5e4>
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	617b      	str	r3, [r7, #20]
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1ef      	bne.n	80099ac <tcp_process+0x5c4>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	60da      	str	r2, [r3, #12]
 80099d2:	4b77      	ldr	r3, [pc, #476]	@ (8009bb0 <tcp_process+0x7c8>)
 80099d4:	2201      	movs	r2, #1
 80099d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	220a      	movs	r2, #10
 80099dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80099de:	4b75      	ldr	r3, [pc, #468]	@ (8009bb4 <tcp_process+0x7cc>)
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	60da      	str	r2, [r3, #12]
 80099e6:	4a73      	ldr	r2, [pc, #460]	@ (8009bb4 <tcp_process+0x7cc>)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	f002 fcf4 	bl	800c3d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80099f0:	e0d2      	b.n	8009b98 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	8b5b      	ldrh	r3, [r3, #26]
 80099f6:	f043 0302 	orr.w	r3, r3, #2
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2208      	movs	r2, #8
 8009a04:	751a      	strb	r2, [r3, #20]
      break;
 8009a06:	e0c7      	b.n	8009b98 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a08:	4b6b      	ldr	r3, [pc, #428]	@ (8009bb8 <tcp_process+0x7d0>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 80c1 	beq.w	8009b98 <tcp_process+0x7b0>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a1a:	4b68      	ldr	r3, [pc, #416]	@ (8009bbc <tcp_process+0x7d4>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	f040 80ba 	bne.w	8009b98 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f040 80b5 	bne.w	8009b98 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2206      	movs	r2, #6
 8009a32:	751a      	strb	r2, [r3, #20]
      break;
 8009a34:	e0b0      	b.n	8009b98 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f9ca 	bl	8009dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a3c:	4b60      	ldr	r3, [pc, #384]	@ (8009bc0 <tcp_process+0x7d8>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 80a9 	beq.w	8009b9c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	8b5b      	ldrh	r3, [r3, #26]
 8009a4e:	f043 0302 	orr.w	r3, r3, #2
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7fe fd39 	bl	80084d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009a5e:	4b59      	ldr	r3, [pc, #356]	@ (8009bc4 <tcp_process+0x7dc>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d105      	bne.n	8009a74 <tcp_process+0x68c>
 8009a68:	4b56      	ldr	r3, [pc, #344]	@ (8009bc4 <tcp_process+0x7dc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	4a55      	ldr	r2, [pc, #340]	@ (8009bc4 <tcp_process+0x7dc>)
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	e013      	b.n	8009a9c <tcp_process+0x6b4>
 8009a74:	4b53      	ldr	r3, [pc, #332]	@ (8009bc4 <tcp_process+0x7dc>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	613b      	str	r3, [r7, #16]
 8009a7a:	e00c      	b.n	8009a96 <tcp_process+0x6ae>
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d104      	bne.n	8009a90 <tcp_process+0x6a8>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	60da      	str	r2, [r3, #12]
 8009a8e:	e005      	b.n	8009a9c <tcp_process+0x6b4>
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	613b      	str	r3, [r7, #16]
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1ef      	bne.n	8009a7c <tcp_process+0x694>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	60da      	str	r2, [r3, #12]
 8009aa2:	4b43      	ldr	r3, [pc, #268]	@ (8009bb0 <tcp_process+0x7c8>)
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	220a      	movs	r2, #10
 8009aac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009aae:	4b41      	ldr	r3, [pc, #260]	@ (8009bb4 <tcp_process+0x7cc>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	60da      	str	r2, [r3, #12]
 8009ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8009bb4 <tcp_process+0x7cc>)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6013      	str	r3, [r2, #0]
 8009abc:	f002 fc8c 	bl	800c3d8 <tcp_timer_needed>
      }
      break;
 8009ac0:	e06c      	b.n	8009b9c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f984 	bl	8009dd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8009bb8 <tcp_process+0x7d0>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d065      	beq.n	8009ba0 <tcp_process+0x7b8>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ad8:	4b38      	ldr	r3, [pc, #224]	@ (8009bbc <tcp_process+0x7d4>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d15f      	bne.n	8009ba0 <tcp_process+0x7b8>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d15b      	bne.n	8009ba0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7fe fcf1 	bl	80084d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009aee:	4b35      	ldr	r3, [pc, #212]	@ (8009bc4 <tcp_process+0x7dc>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d105      	bne.n	8009b04 <tcp_process+0x71c>
 8009af8:	4b32      	ldr	r3, [pc, #200]	@ (8009bc4 <tcp_process+0x7dc>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	4a31      	ldr	r2, [pc, #196]	@ (8009bc4 <tcp_process+0x7dc>)
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	e013      	b.n	8009b2c <tcp_process+0x744>
 8009b04:	4b2f      	ldr	r3, [pc, #188]	@ (8009bc4 <tcp_process+0x7dc>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60fb      	str	r3, [r7, #12]
 8009b0a:	e00c      	b.n	8009b26 <tcp_process+0x73e>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d104      	bne.n	8009b20 <tcp_process+0x738>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	60da      	str	r2, [r3, #12]
 8009b1e:	e005      	b.n	8009b2c <tcp_process+0x744>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	60fb      	str	r3, [r7, #12]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1ef      	bne.n	8009b0c <tcp_process+0x724>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	60da      	str	r2, [r3, #12]
 8009b32:	4b1f      	ldr	r3, [pc, #124]	@ (8009bb0 <tcp_process+0x7c8>)
 8009b34:	2201      	movs	r2, #1
 8009b36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	220a      	movs	r2, #10
 8009b3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb4 <tcp_process+0x7cc>)
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	60da      	str	r2, [r3, #12]
 8009b46:	4a1b      	ldr	r2, [pc, #108]	@ (8009bb4 <tcp_process+0x7cc>)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	f002 fc44 	bl	800c3d8 <tcp_timer_needed>
      }
      break;
 8009b50:	e026      	b.n	8009ba0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f93c 	bl	8009dd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009b58:	4b17      	ldr	r3, [pc, #92]	@ (8009bb8 <tcp_process+0x7d0>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	f003 0310 	and.w	r3, r3, #16
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d01f      	beq.n	8009ba4 <tcp_process+0x7bc>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b68:	4b14      	ldr	r3, [pc, #80]	@ (8009bbc <tcp_process+0x7d4>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d119      	bne.n	8009ba4 <tcp_process+0x7bc>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d115      	bne.n	8009ba4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009b78:	4b11      	ldr	r3, [pc, #68]	@ (8009bc0 <tcp_process+0x7d8>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	f043 0310 	orr.w	r3, r3, #16
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc0 <tcp_process+0x7d8>)
 8009b84:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009b86:	e00d      	b.n	8009ba4 <tcp_process+0x7bc>
    default:
      break;
 8009b88:	bf00      	nop
 8009b8a:	e00c      	b.n	8009ba6 <tcp_process+0x7be>
      break;
 8009b8c:	bf00      	nop
 8009b8e:	e00a      	b.n	8009ba6 <tcp_process+0x7be>
      break;
 8009b90:	bf00      	nop
 8009b92:	e008      	b.n	8009ba6 <tcp_process+0x7be>
      break;
 8009b94:	bf00      	nop
 8009b96:	e006      	b.n	8009ba6 <tcp_process+0x7be>
      break;
 8009b98:	bf00      	nop
 8009b9a:	e004      	b.n	8009ba6 <tcp_process+0x7be>
      break;
 8009b9c:	bf00      	nop
 8009b9e:	e002      	b.n	8009ba6 <tcp_process+0x7be>
      break;
 8009ba0:	bf00      	nop
 8009ba2:	e000      	b.n	8009ba6 <tcp_process+0x7be>
      break;
 8009ba4:	bf00      	nop
  }
  return ERR_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3724      	adds	r7, #36	@ 0x24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd90      	pop	{r4, r7, pc}
 8009bb0:	20008164 	.word	0x20008164
 8009bb4:	20008160 	.word	0x20008160
 8009bb8:	20008194 	.word	0x20008194
 8009bbc:	2000818c 	.word	0x2000818c
 8009bc0:	20008195 	.word	0x20008195
 8009bc4:	2000815c 	.word	0x2000815c

08009bc8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009bc8:	b590      	push	{r4, r7, lr}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d106      	bne.n	8009be6 <tcp_oos_insert_segment+0x1e>
 8009bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8009cc8 <tcp_oos_insert_segment+0x100>)
 8009bda:	f240 421f 	movw	r2, #1055	@ 0x41f
 8009bde:	493b      	ldr	r1, [pc, #236]	@ (8009ccc <tcp_oos_insert_segment+0x104>)
 8009be0:	483b      	ldr	r0, [pc, #236]	@ (8009cd0 <tcp_oos_insert_segment+0x108>)
 8009be2:	f005 fa81 	bl	800f0e8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	899b      	ldrh	r3, [r3, #12]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fb fcd2 	bl	8005598 <lwip_htons>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d028      	beq.n	8009c52 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009c00:	6838      	ldr	r0, [r7, #0]
 8009c02:	f7fe fa63 	bl	80080cc <tcp_segs_free>
    next = NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	603b      	str	r3, [r7, #0]
 8009c0a:	e056      	b.n	8009cba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	899b      	ldrh	r3, [r3, #12]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fb fcbf 	bl	8005598 <lwip_htons>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00d      	beq.n	8009c42 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	899b      	ldrh	r3, [r3, #12]
 8009c2c:	b29c      	uxth	r4, r3
 8009c2e:	2001      	movs	r0, #1
 8009c30:	f7fb fcb2 	bl	8005598 <lwip_htons>
 8009c34:	4603      	mov	r3, r0
 8009c36:	461a      	mov	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	4322      	orrs	r2, r4
 8009c3e:	b292      	uxth	r2, r2
 8009c40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f7fe fa52 	bl	80080f6 <tcp_seg_free>
    while (next &&
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00e      	beq.n	8009c76 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	891b      	ldrh	r3, [r3, #8]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd4 <tcp_oos_insert_segment+0x10c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	441a      	add	r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	8909      	ldrh	r1, [r1, #8]
 8009c6e:	440b      	add	r3, r1
 8009c70:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	daca      	bge.n	8009c0c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01e      	beq.n	8009cba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	461a      	mov	r2, r3
 8009c82:	4b14      	ldr	r3, [pc, #80]	@ (8009cd4 <tcp_oos_insert_segment+0x10c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	441a      	add	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dd12      	ble.n	8009cba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009cd4 <tcp_oos_insert_segment+0x10c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	891b      	ldrh	r3, [r3, #8]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	f7fc fe23 	bl	8006900 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	601a      	str	r2, [r3, #0]
}
 8009cc0:	bf00      	nop
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd90      	pop	{r4, r7, pc}
 8009cc8:	08011144 	.word	0x08011144
 8009ccc:	08011404 	.word	0x08011404
 8009cd0:	08011190 	.word	0x08011190
 8009cd4:	20008188 	.word	0x20008188

08009cd8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009cd8:	b5b0      	push	{r4, r5, r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009ce6:	e03e      	b.n	8009d66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fd f810 	bl	8006d1c <pbuf_clen>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009d06:	8a7a      	ldrh	r2, [r7, #18]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d906      	bls.n	8009d1a <tcp_free_acked_segments+0x42>
 8009d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8009db8 <tcp_free_acked_segments+0xe0>)
 8009d0e:	f240 4257 	movw	r2, #1111	@ 0x457
 8009d12:	492a      	ldr	r1, [pc, #168]	@ (8009dbc <tcp_free_acked_segments+0xe4>)
 8009d14:	482a      	ldr	r0, [pc, #168]	@ (8009dc0 <tcp_free_acked_segments+0xe8>)
 8009d16:	f005 f9e7 	bl	800f0e8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8009d20:	8a7b      	ldrh	r3, [r7, #18]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	891a      	ldrh	r2, [r3, #8]
 8009d30:	4b24      	ldr	r3, [pc, #144]	@ (8009dc4 <tcp_free_acked_segments+0xec>)
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	4413      	add	r3, r2
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	4b22      	ldr	r3, [pc, #136]	@ (8009dc4 <tcp_free_acked_segments+0xec>)
 8009d3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009d3c:	6978      	ldr	r0, [r7, #20]
 8009d3e:	f7fe f9da 	bl	80080f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00c      	beq.n	8009d66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <tcp_free_acked_segments+0x8e>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <tcp_free_acked_segments+0x8e>
 8009d58:	4b17      	ldr	r3, [pc, #92]	@ (8009db8 <tcp_free_acked_segments+0xe0>)
 8009d5a:	f240 4261 	movw	r2, #1121	@ 0x461
 8009d5e:	491a      	ldr	r1, [pc, #104]	@ (8009dc8 <tcp_free_acked_segments+0xf0>)
 8009d60:	4817      	ldr	r0, [pc, #92]	@ (8009dc0 <tcp_free_acked_segments+0xe8>)
 8009d62:	f005 f9c1 	bl	800f0e8 <iprintf>
  while (seg_list != NULL &&
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d020      	beq.n	8009dae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fb fc26 	bl	80055c4 <lwip_htonl>
 8009d78:	4604      	mov	r4, r0
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	891b      	ldrh	r3, [r3, #8]
 8009d7e:	461d      	mov	r5, r3
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	899b      	ldrh	r3, [r3, #12]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fb fc05 	bl	8005598 <lwip_htons>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <tcp_free_acked_segments+0xc6>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e000      	b.n	8009da0 <tcp_free_acked_segments+0xc8>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	442b      	add	r3, r5
 8009da2:	18e2      	adds	r2, r4, r3
 8009da4:	4b09      	ldr	r3, [pc, #36]	@ (8009dcc <tcp_free_acked_segments+0xf4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dd9c      	ble.n	8009ce8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009dae:	68bb      	ldr	r3, [r7, #8]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bdb0      	pop	{r4, r5, r7, pc}
 8009db8:	08011144 	.word	0x08011144
 8009dbc:	0801142c 	.word	0x0801142c
 8009dc0:	08011190 	.word	0x08011190
 8009dc4:	20008190 	.word	0x20008190
 8009dc8:	08011454 	.word	0x08011454
 8009dcc:	2000818c 	.word	0x2000818c

08009dd0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009dd0:	b5b0      	push	{r4, r5, r7, lr}
 8009dd2:	b094      	sub	sp, #80	@ 0x50
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d106      	bne.n	8009df0 <tcp_receive+0x20>
 8009de2:	4b91      	ldr	r3, [pc, #580]	@ (800a028 <tcp_receive+0x258>)
 8009de4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009de8:	4990      	ldr	r1, [pc, #576]	@ (800a02c <tcp_receive+0x25c>)
 8009dea:	4891      	ldr	r0, [pc, #580]	@ (800a030 <tcp_receive+0x260>)
 8009dec:	f005 f97c 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	7d1b      	ldrb	r3, [r3, #20]
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	d806      	bhi.n	8009e06 <tcp_receive+0x36>
 8009df8:	4b8b      	ldr	r3, [pc, #556]	@ (800a028 <tcp_receive+0x258>)
 8009dfa:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009dfe:	498d      	ldr	r1, [pc, #564]	@ (800a034 <tcp_receive+0x264>)
 8009e00:	488b      	ldr	r0, [pc, #556]	@ (800a030 <tcp_receive+0x260>)
 8009e02:	f005 f971 	bl	800f0e8 <iprintf>

  if (flags & TCP_ACK) {
 8009e06:	4b8c      	ldr	r3, [pc, #560]	@ (800a038 <tcp_receive+0x268>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	f003 0310 	and.w	r3, r3, #16
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 8264 	beq.w	800a2dc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e20:	4413      	add	r3, r2
 8009e22:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e28:	4b84      	ldr	r3, [pc, #528]	@ (800a03c <tcp_receive+0x26c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	db1b      	blt.n	8009e6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e36:	4b81      	ldr	r3, [pc, #516]	@ (800a03c <tcp_receive+0x26c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d106      	bne.n	8009e4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e42:	4b7f      	ldr	r3, [pc, #508]	@ (800a040 <tcp_receive+0x270>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	db0e      	blt.n	8009e6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e50:	4b7b      	ldr	r3, [pc, #492]	@ (800a040 <tcp_receive+0x270>)
 8009e52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d125      	bne.n	8009ea4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009e58:	4b7a      	ldr	r3, [pc, #488]	@ (800a044 <tcp_receive+0x274>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	89db      	ldrh	r3, [r3, #14]
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d91c      	bls.n	8009ea4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009e6a:	4b76      	ldr	r3, [pc, #472]	@ (800a044 <tcp_receive+0x274>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	89db      	ldrh	r3, [r3, #14]
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d205      	bcs.n	8009e94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009e94:	4b69      	ldr	r3, [pc, #420]	@ (800a03c <tcp_receive+0x26c>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8009e9c:	4b68      	ldr	r3, [pc, #416]	@ (800a040 <tcp_receive+0x270>)
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009ea4:	4b66      	ldr	r3, [pc, #408]	@ (800a040 <tcp_receive+0x270>)
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dc58      	bgt.n	8009f64 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009eb2:	4b65      	ldr	r3, [pc, #404]	@ (800a048 <tcp_receive+0x278>)
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d14b      	bne.n	8009f52 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009ec4:	4413      	add	r3, r2
 8009ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d142      	bne.n	8009f52 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db3d      	blt.n	8009f52 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009eda:	4b59      	ldr	r3, [pc, #356]	@ (800a040 <tcp_receive+0x270>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d137      	bne.n	8009f52 <tcp_receive+0x182>
              found_dupack = 1;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009eec:	2bff      	cmp	r3, #255	@ 0xff
 8009eee:	d007      	beq.n	8009f00 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d91b      	bls.n	8009f42 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f14:	4413      	add	r3, r2
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d30a      	bcc.n	8009f38 <tcp_receive+0x168>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f2c:	4413      	add	r3, r2
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009f36:	e004      	b.n	8009f42 <tcp_receive+0x172>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	d902      	bls.n	8009f52 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 fee7 	bl	800bd20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f040 8161 	bne.w	800a21c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f62:	e15b      	b.n	800a21c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f64:	4b36      	ldr	r3, [pc, #216]	@ (800a040 <tcp_receive+0x270>)
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f2c0 814e 	blt.w	800a212 <tcp_receive+0x442>
 8009f76:	4b32      	ldr	r3, [pc, #200]	@ (800a040 <tcp_receive+0x270>)
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f300 8146 	bgt.w	800a212 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	8b5b      	ldrh	r3, [r3, #26]
 8009f8a:	f003 0304 	and.w	r3, r3, #4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d010      	beq.n	8009fb4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8b5b      	ldrh	r3, [r3, #26]
 8009f96:	f023 0304 	bic.w	r3, r3, #4
 8009f9a:	b29a      	uxth	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009fc2:	10db      	asrs	r3, r3, #3
 8009fc4:	b21b      	sxth	r3, r3
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	4413      	add	r3, r2
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	b21a      	sxth	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009fdc:	4b18      	ldr	r3, [pc, #96]	@ (800a040 <tcp_receive+0x270>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009ff4:	4b12      	ldr	r3, [pc, #72]	@ (800a040 <tcp_receive+0x270>)
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	7d1b      	ldrb	r3, [r3, #20]
 800a000:	2b03      	cmp	r3, #3
 800a002:	f240 8097 	bls.w	800a134 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800a012:	429a      	cmp	r2, r3
 800a014:	d245      	bcs.n	800a0a2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	8b5b      	ldrh	r3, [r3, #26]
 800a01a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d014      	beq.n	800a04c <tcp_receive+0x27c>
 800a022:	2301      	movs	r3, #1
 800a024:	e013      	b.n	800a04e <tcp_receive+0x27e>
 800a026:	bf00      	nop
 800a028:	08011144 	.word	0x08011144
 800a02c:	08011474 	.word	0x08011474
 800a030:	08011190 	.word	0x08011190
 800a034:	08011490 	.word	0x08011490
 800a038:	20008194 	.word	0x20008194
 800a03c:	20008188 	.word	0x20008188
 800a040:	2000818c 	.word	0x2000818c
 800a044:	20008178 	.word	0x20008178
 800a048:	20008192 	.word	0x20008192
 800a04c:	2302      	movs	r3, #2
 800a04e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a052:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a056:	b29a      	uxth	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a05c:	fb12 f303 	smulbb	r3, r2, r3
 800a060:	b29b      	uxth	r3, r3
 800a062:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a064:	4293      	cmp	r3, r2
 800a066:	bf28      	it	cs
 800a068:	4613      	movcs	r3, r2
 800a06a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a072:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a074:	4413      	add	r3, r2
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a07e:	429a      	cmp	r2, r3
 800a080:	d309      	bcc.n	800a096 <tcp_receive+0x2c6>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a088:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a08a:	4413      	add	r3, r2
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a094:	e04e      	b.n	800a134 <tcp_receive+0x364>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a09c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a0a0:	e048      	b.n	800a134 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a0a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a0aa:	4413      	add	r3, r2
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d309      	bcc.n	800a0cc <tcp_receive+0x2fc>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a0be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a0c0:	4413      	add	r3, r2
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a0ca:	e004      	b.n	800a0d6 <tcp_receive+0x306>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d326      	bcc.n	800a134 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a106:	4413      	add	r3, r2
 800a108:	b29a      	uxth	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a110:	429a      	cmp	r2, r3
 800a112:	d30a      	bcc.n	800a12a <tcp_receive+0x35a>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a11e:	4413      	add	r3, r2
 800a120:	b29a      	uxth	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800a128:	e004      	b.n	800a134 <tcp_receive+0x364>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a130:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a13c:	4a98      	ldr	r2, [pc, #608]	@ (800a3a0 <tcp_receive+0x5d0>)
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff fdca 	bl	8009cd8 <tcp_free_acked_segments>
 800a144:	4602      	mov	r2, r0
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a152:	4a94      	ldr	r2, [pc, #592]	@ (800a3a4 <tcp_receive+0x5d4>)
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff fdbf 	bl	8009cd8 <tcp_free_acked_segments>
 800a15a:	4602      	mov	r2, r0
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a164:	2b00      	cmp	r3, #0
 800a166:	d104      	bne.n	800a172 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a16e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a170:	e002      	b.n	800a178 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d103      	bne.n	800a18e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800a194:	4b84      	ldr	r3, [pc, #528]	@ (800a3a8 <tcp_receive+0x5d8>)
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	4413      	add	r3, r2
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	8b5b      	ldrh	r3, [r3, #26]
 800a1a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d035      	beq.n	800a21a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d118      	bne.n	800a1e8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00c      	beq.n	800a1d8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fb f9fa 	bl	80055c4 <lwip_htonl>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc20      	bgt.n	800a21a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	8b5b      	ldrh	r3, [r3, #26]
 800a1dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a1e6:	e018      	b.n	800a21a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fb f9e5 	bl	80055c4 <lwip_htonl>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	1ae3      	subs	r3, r4, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	dc0b      	bgt.n	800a21a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	8b5b      	ldrh	r3, [r3, #26]
 800a206:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a210:	e003      	b.n	800a21a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 ff70 	bl	800c0f8 <tcp_send_empty_ack>
 800a218:	e000      	b.n	800a21c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a21a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a220:	2b00      	cmp	r3, #0
 800a222:	d05b      	beq.n	800a2dc <tcp_receive+0x50c>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a228:	4b60      	ldr	r3, [pc, #384]	@ (800a3ac <tcp_receive+0x5dc>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	da54      	bge.n	800a2dc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a232:	4b5f      	ldr	r3, [pc, #380]	@ (800a3b0 <tcp_receive+0x5e0>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	b29a      	uxth	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	b29b      	uxth	r3, r3
 800a242:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a246:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a250:	10db      	asrs	r3, r3, #3
 800a252:	b21b      	sxth	r3, r3
 800a254:	b29b      	uxth	r3, r3
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	b29b      	uxth	r3, r3
 800a25a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a264:	b29a      	uxth	r2, r3
 800a266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a26a:	4413      	add	r3, r2
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	b21a      	sxth	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800a274:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a278:	2b00      	cmp	r3, #0
 800a27a:	da05      	bge.n	800a288 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a27c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a280:	425b      	negs	r3, r3
 800a282:	b29b      	uxth	r3, r3
 800a284:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a288:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a292:	109b      	asrs	r3, r3, #2
 800a294:	b21b      	sxth	r3, r3
 800a296:	b29b      	uxth	r3, r3
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a2ac:	4413      	add	r3, r2
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	b21a      	sxth	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a2bc:	10db      	asrs	r3, r3, #3
 800a2be:	b21b      	sxth	r3, r3
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	b21a      	sxth	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a2dc:	4b35      	ldr	r3, [pc, #212]	@ (800a3b4 <tcp_receive+0x5e4>)
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f000 84df 	beq.w	800aca4 <tcp_receive+0xed4>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	7d1b      	ldrb	r3, [r3, #20]
 800a2ea:	2b06      	cmp	r3, #6
 800a2ec:	f200 84da 	bhi.w	800aca4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2f4:	4b30      	ldr	r3, [pc, #192]	@ (800a3b8 <tcp_receive+0x5e8>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f2c0 808f 	blt.w	800a420 <tcp_receive+0x650>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a306:	4b2b      	ldr	r3, [pc, #172]	@ (800a3b4 <tcp_receive+0x5e4>)
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	4619      	mov	r1, r3
 800a30c:	4b2a      	ldr	r3, [pc, #168]	@ (800a3b8 <tcp_receive+0x5e8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	440b      	add	r3, r1
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	3301      	adds	r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	f300 8082 	bgt.w	800a420 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a31c:	4b27      	ldr	r3, [pc, #156]	@ (800a3bc <tcp_receive+0x5ec>)
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a326:	4b24      	ldr	r3, [pc, #144]	@ (800a3b8 <tcp_receive+0x5e8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a32e:	4b23      	ldr	r3, [pc, #140]	@ (800a3bc <tcp_receive+0x5ec>)
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d106      	bne.n	800a344 <tcp_receive+0x574>
 800a336:	4b22      	ldr	r3, [pc, #136]	@ (800a3c0 <tcp_receive+0x5f0>)
 800a338:	f240 5294 	movw	r2, #1428	@ 0x594
 800a33c:	4921      	ldr	r1, [pc, #132]	@ (800a3c4 <tcp_receive+0x5f4>)
 800a33e:	4822      	ldr	r0, [pc, #136]	@ (800a3c8 <tcp_receive+0x5f8>)
 800a340:	f004 fed2 	bl	800f0e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a346:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d906      	bls.n	800a35c <tcp_receive+0x58c>
 800a34e:	4b1c      	ldr	r3, [pc, #112]	@ (800a3c0 <tcp_receive+0x5f0>)
 800a350:	f240 5295 	movw	r2, #1429	@ 0x595
 800a354:	491d      	ldr	r1, [pc, #116]	@ (800a3cc <tcp_receive+0x5fc>)
 800a356:	481c      	ldr	r0, [pc, #112]	@ (800a3c8 <tcp_receive+0x5f8>)
 800a358:	f004 fec6 	bl	800f0e8 <iprintf>
      off = (u16_t)off32;
 800a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a362:	4b16      	ldr	r3, [pc, #88]	@ (800a3bc <tcp_receive+0x5ec>)
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	891b      	ldrh	r3, [r3, #8]
 800a368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d906      	bls.n	800a37e <tcp_receive+0x5ae>
 800a370:	4b13      	ldr	r3, [pc, #76]	@ (800a3c0 <tcp_receive+0x5f0>)
 800a372:	f240 5297 	movw	r2, #1431	@ 0x597
 800a376:	4916      	ldr	r1, [pc, #88]	@ (800a3d0 <tcp_receive+0x600>)
 800a378:	4813      	ldr	r0, [pc, #76]	@ (800a3c8 <tcp_receive+0x5f8>)
 800a37a:	f004 feb5 	bl	800f0e8 <iprintf>
      inseg.len -= off;
 800a37e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3bc <tcp_receive+0x5ec>)
 800a380:	891a      	ldrh	r2, [r3, #8]
 800a382:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	b29a      	uxth	r2, r3
 800a38a:	4b0c      	ldr	r3, [pc, #48]	@ (800a3bc <tcp_receive+0x5ec>)
 800a38c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a38e:	4b0b      	ldr	r3, [pc, #44]	@ (800a3bc <tcp_receive+0x5ec>)
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	891a      	ldrh	r2, [r3, #8]
 800a394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800a39c:	e02a      	b.n	800a3f4 <tcp_receive+0x624>
 800a39e:	bf00      	nop
 800a3a0:	080114ac 	.word	0x080114ac
 800a3a4:	080114b4 	.word	0x080114b4
 800a3a8:	20008190 	.word	0x20008190
 800a3ac:	2000818c 	.word	0x2000818c
 800a3b0:	20008150 	.word	0x20008150
 800a3b4:	20008192 	.word	0x20008192
 800a3b8:	20008188 	.word	0x20008188
 800a3bc:	20008168 	.word	0x20008168
 800a3c0:	08011144 	.word	0x08011144
 800a3c4:	080114bc 	.word	0x080114bc
 800a3c8:	08011190 	.word	0x08011190
 800a3cc:	080114cc 	.word	0x080114cc
 800a3d0:	080114dc 	.word	0x080114dc
        off -= p->len;
 800a3d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3d6:	895b      	ldrh	r3, [r3, #10]
 800a3d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a3e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a3e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a3e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a3ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800a3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f6:	895b      	ldrh	r3, [r3, #10]
 800a3f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d8e9      	bhi.n	800a3d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a404:	4619      	mov	r1, r3
 800a406:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a408:	f7fc fb7a 	bl	8006b00 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a410:	4a90      	ldr	r2, [pc, #576]	@ (800a654 <tcp_receive+0x884>)
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	4b90      	ldr	r3, [pc, #576]	@ (800a658 <tcp_receive+0x888>)
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	4a8e      	ldr	r2, [pc, #568]	@ (800a654 <tcp_receive+0x884>)
 800a41a:	6812      	ldr	r2, [r2, #0]
 800a41c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a41e:	e00d      	b.n	800a43c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a420:	4b8c      	ldr	r3, [pc, #560]	@ (800a654 <tcp_receive+0x884>)
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	da06      	bge.n	800a43c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	8b5b      	ldrh	r3, [r3, #26]
 800a432:	f043 0302 	orr.w	r3, r3, #2
 800a436:	b29a      	uxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a43c:	4b85      	ldr	r3, [pc, #532]	@ (800a654 <tcp_receive+0x884>)
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	f2c0 8427 	blt.w	800ac9a <tcp_receive+0xeca>
 800a44c:	4b81      	ldr	r3, [pc, #516]	@ (800a654 <tcp_receive+0x884>)
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a458:	440b      	add	r3, r1
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	3301      	adds	r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f300 841b 	bgt.w	800ac9a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a468:	4b7a      	ldr	r3, [pc, #488]	@ (800a654 <tcp_receive+0x884>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	f040 8298 	bne.w	800a9a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a472:	4b79      	ldr	r3, [pc, #484]	@ (800a658 <tcp_receive+0x888>)
 800a474:	891c      	ldrh	r4, [r3, #8]
 800a476:	4b78      	ldr	r3, [pc, #480]	@ (800a658 <tcp_receive+0x888>)
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	899b      	ldrh	r3, [r3, #12]
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fb f88a 	bl	8005598 <lwip_htons>
 800a484:	4603      	mov	r3, r0
 800a486:	b2db      	uxtb	r3, r3
 800a488:	f003 0303 	and.w	r3, r3, #3
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <tcp_receive+0x6c4>
 800a490:	2301      	movs	r3, #1
 800a492:	e000      	b.n	800a496 <tcp_receive+0x6c6>
 800a494:	2300      	movs	r3, #0
 800a496:	4423      	add	r3, r4
 800a498:	b29a      	uxth	r2, r3
 800a49a:	4b70      	ldr	r3, [pc, #448]	@ (800a65c <tcp_receive+0x88c>)
 800a49c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a4a2:	4b6e      	ldr	r3, [pc, #440]	@ (800a65c <tcp_receive+0x88c>)
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d274      	bcs.n	800a594 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a4aa:	4b6b      	ldr	r3, [pc, #428]	@ (800a658 <tcp_receive+0x888>)
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	899b      	ldrh	r3, [r3, #12]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fb f870 	bl	8005598 <lwip_htons>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d01e      	beq.n	800a502 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a4c4:	4b64      	ldr	r3, [pc, #400]	@ (800a658 <tcp_receive+0x888>)
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	899b      	ldrh	r3, [r3, #12]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	b21b      	sxth	r3, r3
 800a4ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a4d2:	b21c      	sxth	r4, r3
 800a4d4:	4b60      	ldr	r3, [pc, #384]	@ (800a658 <tcp_receive+0x888>)
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	899b      	ldrh	r3, [r3, #12]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fb f85b 	bl	8005598 <lwip_htons>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fb f853 	bl	8005598 <lwip_htons>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	b21b      	sxth	r3, r3
 800a4f6:	4323      	orrs	r3, r4
 800a4f8:	b21a      	sxth	r2, r3
 800a4fa:	4b57      	ldr	r3, [pc, #348]	@ (800a658 <tcp_receive+0x888>)
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	b292      	uxth	r2, r2
 800a500:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a506:	4b54      	ldr	r3, [pc, #336]	@ (800a658 <tcp_receive+0x888>)
 800a508:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a50a:	4b53      	ldr	r3, [pc, #332]	@ (800a658 <tcp_receive+0x888>)
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	899b      	ldrh	r3, [r3, #12]
 800a510:	b29b      	uxth	r3, r3
 800a512:	4618      	mov	r0, r3
 800a514:	f7fb f840 	bl	8005598 <lwip_htons>
 800a518:	4603      	mov	r3, r0
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d005      	beq.n	800a530 <tcp_receive+0x760>
            inseg.len -= 1;
 800a524:	4b4c      	ldr	r3, [pc, #304]	@ (800a658 <tcp_receive+0x888>)
 800a526:	891b      	ldrh	r3, [r3, #8]
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	4b4a      	ldr	r3, [pc, #296]	@ (800a658 <tcp_receive+0x888>)
 800a52e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a530:	4b49      	ldr	r3, [pc, #292]	@ (800a658 <tcp_receive+0x888>)
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	4a48      	ldr	r2, [pc, #288]	@ (800a658 <tcp_receive+0x888>)
 800a536:	8912      	ldrh	r2, [r2, #8]
 800a538:	4611      	mov	r1, r2
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fc f9e0 	bl	8006900 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a540:	4b45      	ldr	r3, [pc, #276]	@ (800a658 <tcp_receive+0x888>)
 800a542:	891c      	ldrh	r4, [r3, #8]
 800a544:	4b44      	ldr	r3, [pc, #272]	@ (800a658 <tcp_receive+0x888>)
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	899b      	ldrh	r3, [r3, #12]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fb f823 	bl	8005598 <lwip_htons>
 800a552:	4603      	mov	r3, r0
 800a554:	b2db      	uxtb	r3, r3
 800a556:	f003 0303 	and.w	r3, r3, #3
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <tcp_receive+0x792>
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <tcp_receive+0x794>
 800a562:	2300      	movs	r3, #0
 800a564:	4423      	add	r3, r4
 800a566:	b29a      	uxth	r2, r3
 800a568:	4b3c      	ldr	r3, [pc, #240]	@ (800a65c <tcp_receive+0x88c>)
 800a56a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a56c:	4b3b      	ldr	r3, [pc, #236]	@ (800a65c <tcp_receive+0x88c>)
 800a56e:	881b      	ldrh	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	4b38      	ldr	r3, [pc, #224]	@ (800a654 <tcp_receive+0x884>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	441a      	add	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a580:	440b      	add	r3, r1
 800a582:	429a      	cmp	r2, r3
 800a584:	d006      	beq.n	800a594 <tcp_receive+0x7c4>
 800a586:	4b36      	ldr	r3, [pc, #216]	@ (800a660 <tcp_receive+0x890>)
 800a588:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a58c:	4935      	ldr	r1, [pc, #212]	@ (800a664 <tcp_receive+0x894>)
 800a58e:	4836      	ldr	r0, [pc, #216]	@ (800a668 <tcp_receive+0x898>)
 800a590:	f004 fdaa 	bl	800f0e8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 80e6 	beq.w	800a76a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a59e:	4b2e      	ldr	r3, [pc, #184]	@ (800a658 <tcp_receive+0x888>)
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	899b      	ldrh	r3, [r3, #12]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fa fff6 	bl	8005598 <lwip_htons>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d010      	beq.n	800a5da <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a5b8:	e00a      	b.n	800a5d0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5be:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7fd fd93 	bl	80080f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1f0      	bne.n	800a5ba <tcp_receive+0x7ea>
 800a5d8:	e0c7      	b.n	800a76a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a5e0:	e051      	b.n	800a686 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	899b      	ldrh	r3, [r3, #12]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fa ffd4 	bl	8005598 <lwip_htons>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d03c      	beq.n	800a676 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a5fc:	4b16      	ldr	r3, [pc, #88]	@ (800a658 <tcp_receive+0x888>)
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	899b      	ldrh	r3, [r3, #12]
 800a602:	b29b      	uxth	r3, r3
 800a604:	4618      	mov	r0, r3
 800a606:	f7fa ffc7 	bl	8005598 <lwip_htons>
 800a60a:	4603      	mov	r3, r0
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a612:	2b00      	cmp	r3, #0
 800a614:	d12f      	bne.n	800a676 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a616:	4b10      	ldr	r3, [pc, #64]	@ (800a658 <tcp_receive+0x888>)
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	899b      	ldrh	r3, [r3, #12]
 800a61c:	b29c      	uxth	r4, r3
 800a61e:	2001      	movs	r0, #1
 800a620:	f7fa ffba 	bl	8005598 <lwip_htons>
 800a624:	4603      	mov	r3, r0
 800a626:	461a      	mov	r2, r3
 800a628:	4b0b      	ldr	r3, [pc, #44]	@ (800a658 <tcp_receive+0x888>)
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	4322      	orrs	r2, r4
 800a62e:	b292      	uxth	r2, r2
 800a630:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a632:	4b09      	ldr	r3, [pc, #36]	@ (800a658 <tcp_receive+0x888>)
 800a634:	891c      	ldrh	r4, [r3, #8]
 800a636:	4b08      	ldr	r3, [pc, #32]	@ (800a658 <tcp_receive+0x888>)
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	899b      	ldrh	r3, [r3, #12]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fa ffaa 	bl	8005598 <lwip_htons>
 800a644:	4603      	mov	r3, r0
 800a646:	b2db      	uxtb	r3, r3
 800a648:	f003 0303 	and.w	r3, r3, #3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00d      	beq.n	800a66c <tcp_receive+0x89c>
 800a650:	2301      	movs	r3, #1
 800a652:	e00c      	b.n	800a66e <tcp_receive+0x89e>
 800a654:	20008188 	.word	0x20008188
 800a658:	20008168 	.word	0x20008168
 800a65c:	20008192 	.word	0x20008192
 800a660:	08011144 	.word	0x08011144
 800a664:	080114ec 	.word	0x080114ec
 800a668:	08011190 	.word	0x08011190
 800a66c:	2300      	movs	r3, #0
 800a66e:	4423      	add	r3, r4
 800a670:	b29a      	uxth	r2, r3
 800a672:	4b98      	ldr	r3, [pc, #608]	@ (800a8d4 <tcp_receive+0xb04>)
 800a674:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a678:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a67a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800a680:	6938      	ldr	r0, [r7, #16]
 800a682:	f7fd fd38 	bl	80080f6 <tcp_seg_free>
            while (next &&
 800a686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00e      	beq.n	800a6aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a68c:	4b91      	ldr	r3, [pc, #580]	@ (800a8d4 <tcp_receive+0xb04>)
 800a68e:	881b      	ldrh	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	4b91      	ldr	r3, [pc, #580]	@ (800a8d8 <tcp_receive+0xb08>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	441a      	add	r2, r3
 800a698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6a0:	8909      	ldrh	r1, [r1, #8]
 800a6a2:	440b      	add	r3, r1
 800a6a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	da9b      	bge.n	800a5e2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d059      	beq.n	800a764 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a6b0:	4b88      	ldr	r3, [pc, #544]	@ (800a8d4 <tcp_receive+0xb04>)
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	4b88      	ldr	r3, [pc, #544]	@ (800a8d8 <tcp_receive+0xb08>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	441a      	add	r2, r3
 800a6bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dd4d      	ble.n	800a764 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	4b81      	ldr	r3, [pc, #516]	@ (800a8d8 <tcp_receive+0xb08>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	4b80      	ldr	r3, [pc, #512]	@ (800a8dc <tcp_receive+0xb0c>)
 800a6dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a6de:	4b7f      	ldr	r3, [pc, #508]	@ (800a8dc <tcp_receive+0xb0c>)
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	899b      	ldrh	r3, [r3, #12]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fa ff56 	bl	8005598 <lwip_htons>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d005      	beq.n	800a704 <tcp_receive+0x934>
                inseg.len -= 1;
 800a6f8:	4b78      	ldr	r3, [pc, #480]	@ (800a8dc <tcp_receive+0xb0c>)
 800a6fa:	891b      	ldrh	r3, [r3, #8]
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	4b76      	ldr	r3, [pc, #472]	@ (800a8dc <tcp_receive+0xb0c>)
 800a702:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a704:	4b75      	ldr	r3, [pc, #468]	@ (800a8dc <tcp_receive+0xb0c>)
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	4a74      	ldr	r2, [pc, #464]	@ (800a8dc <tcp_receive+0xb0c>)
 800a70a:	8912      	ldrh	r2, [r2, #8]
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fc f8f6 	bl	8006900 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a714:	4b71      	ldr	r3, [pc, #452]	@ (800a8dc <tcp_receive+0xb0c>)
 800a716:	891c      	ldrh	r4, [r3, #8]
 800a718:	4b70      	ldr	r3, [pc, #448]	@ (800a8dc <tcp_receive+0xb0c>)
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	899b      	ldrh	r3, [r3, #12]
 800a71e:	b29b      	uxth	r3, r3
 800a720:	4618      	mov	r0, r3
 800a722:	f7fa ff39 	bl	8005598 <lwip_htons>
 800a726:	4603      	mov	r3, r0
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <tcp_receive+0x966>
 800a732:	2301      	movs	r3, #1
 800a734:	e000      	b.n	800a738 <tcp_receive+0x968>
 800a736:	2300      	movs	r3, #0
 800a738:	4423      	add	r3, r4
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	4b65      	ldr	r3, [pc, #404]	@ (800a8d4 <tcp_receive+0xb04>)
 800a73e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a740:	4b64      	ldr	r3, [pc, #400]	@ (800a8d4 <tcp_receive+0xb04>)
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	461a      	mov	r2, r3
 800a746:	4b64      	ldr	r3, [pc, #400]	@ (800a8d8 <tcp_receive+0xb08>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	441a      	add	r2, r3
 800a74c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	429a      	cmp	r2, r3
 800a754:	d006      	beq.n	800a764 <tcp_receive+0x994>
 800a756:	4b62      	ldr	r3, [pc, #392]	@ (800a8e0 <tcp_receive+0xb10>)
 800a758:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a75c:	4961      	ldr	r1, [pc, #388]	@ (800a8e4 <tcp_receive+0xb14>)
 800a75e:	4862      	ldr	r0, [pc, #392]	@ (800a8e8 <tcp_receive+0xb18>)
 800a760:	f004 fcc2 	bl	800f0e8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a768:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a76a:	4b5a      	ldr	r3, [pc, #360]	@ (800a8d4 <tcp_receive+0xb04>)
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	4b59      	ldr	r3, [pc, #356]	@ (800a8d8 <tcp_receive+0xb08>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	441a      	add	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a77e:	4b55      	ldr	r3, [pc, #340]	@ (800a8d4 <tcp_receive+0xb04>)
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d206      	bcs.n	800a794 <tcp_receive+0x9c4>
 800a786:	4b56      	ldr	r3, [pc, #344]	@ (800a8e0 <tcp_receive+0xb10>)
 800a788:	f240 6207 	movw	r2, #1543	@ 0x607
 800a78c:	4957      	ldr	r1, [pc, #348]	@ (800a8ec <tcp_receive+0xb1c>)
 800a78e:	4856      	ldr	r0, [pc, #344]	@ (800a8e8 <tcp_receive+0xb18>)
 800a790:	f004 fcaa 	bl	800f0e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a798:	4b4e      	ldr	r3, [pc, #312]	@ (800a8d4 <tcp_receive+0xb04>)
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7fc ffc5 	bl	8007734 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a7aa:	4b4c      	ldr	r3, [pc, #304]	@ (800a8dc <tcp_receive+0xb0c>)
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	891b      	ldrh	r3, [r3, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d006      	beq.n	800a7c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a7b4:	4b49      	ldr	r3, [pc, #292]	@ (800a8dc <tcp_receive+0xb0c>)
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	4a4d      	ldr	r2, [pc, #308]	@ (800a8f0 <tcp_receive+0xb20>)
 800a7ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a7bc:	4b47      	ldr	r3, [pc, #284]	@ (800a8dc <tcp_receive+0xb0c>)
 800a7be:	2200      	movs	r2, #0
 800a7c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a7c2:	4b46      	ldr	r3, [pc, #280]	@ (800a8dc <tcp_receive+0xb0c>)
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	899b      	ldrh	r3, [r3, #12]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fa fee4 	bl	8005598 <lwip_htons>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80b8 	beq.w	800a94e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a7de:	4b45      	ldr	r3, [pc, #276]	@ (800a8f4 <tcp_receive+0xb24>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	f043 0320 	orr.w	r3, r3, #32
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	4b42      	ldr	r3, [pc, #264]	@ (800a8f4 <tcp_receive+0xb24>)
 800a7ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a7ec:	e0af      	b.n	800a94e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	4a36      	ldr	r2, [pc, #216]	@ (800a8d8 <tcp_receive+0xb08>)
 800a7fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	891b      	ldrh	r3, [r3, #8]
 800a804:	461c      	mov	r4, r3
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	899b      	ldrh	r3, [r3, #12]
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fa fec2 	bl	8005598 <lwip_htons>
 800a814:	4603      	mov	r3, r0
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 0303 	and.w	r3, r3, #3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <tcp_receive+0xa54>
 800a820:	2301      	movs	r3, #1
 800a822:	e000      	b.n	800a826 <tcp_receive+0xa56>
 800a824:	2300      	movs	r3, #0
 800a826:	191a      	adds	r2, r3, r4
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82c:	441a      	add	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a836:	461c      	mov	r4, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	891b      	ldrh	r3, [r3, #8]
 800a83c:	461d      	mov	r5, r3
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	899b      	ldrh	r3, [r3, #12]
 800a844:	b29b      	uxth	r3, r3
 800a846:	4618      	mov	r0, r3
 800a848:	f7fa fea6 	bl	8005598 <lwip_htons>
 800a84c:	4603      	mov	r3, r0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0303 	and.w	r3, r3, #3
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <tcp_receive+0xa8c>
 800a858:	2301      	movs	r3, #1
 800a85a:	e000      	b.n	800a85e <tcp_receive+0xa8e>
 800a85c:	2300      	movs	r3, #0
 800a85e:	442b      	add	r3, r5
 800a860:	429c      	cmp	r4, r3
 800a862:	d206      	bcs.n	800a872 <tcp_receive+0xaa2>
 800a864:	4b1e      	ldr	r3, [pc, #120]	@ (800a8e0 <tcp_receive+0xb10>)
 800a866:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a86a:	4923      	ldr	r1, [pc, #140]	@ (800a8f8 <tcp_receive+0xb28>)
 800a86c:	481e      	ldr	r0, [pc, #120]	@ (800a8e8 <tcp_receive+0xb18>)
 800a86e:	f004 fc3b 	bl	800f0e8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	891b      	ldrh	r3, [r3, #8]
 800a876:	461c      	mov	r4, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	899b      	ldrh	r3, [r3, #12]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	4618      	mov	r0, r3
 800a882:	f7fa fe89 	bl	8005598 <lwip_htons>
 800a886:	4603      	mov	r3, r0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <tcp_receive+0xac6>
 800a892:	2301      	movs	r3, #1
 800a894:	e000      	b.n	800a898 <tcp_receive+0xac8>
 800a896:	2300      	movs	r3, #0
 800a898:	1919      	adds	r1, r3, r4
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a89e:	b28b      	uxth	r3, r1
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7fc ff43 	bl	8007734 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	891b      	ldrh	r3, [r3, #8]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d028      	beq.n	800a90a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a8b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f0 <tcp_receive+0xb20>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d01d      	beq.n	800a8fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f0 <tcp_receive+0xb20>)
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	f7fc fa60 	bl	8006d90 <pbuf_cat>
 800a8d0:	e018      	b.n	800a904 <tcp_receive+0xb34>
 800a8d2:	bf00      	nop
 800a8d4:	20008192 	.word	0x20008192
 800a8d8:	20008188 	.word	0x20008188
 800a8dc:	20008168 	.word	0x20008168
 800a8e0:	08011144 	.word	0x08011144
 800a8e4:	08011524 	.word	0x08011524
 800a8e8:	08011190 	.word	0x08011190
 800a8ec:	08011560 	.word	0x08011560
 800a8f0:	20008198 	.word	0x20008198
 800a8f4:	20008195 	.word	0x20008195
 800a8f8:	08011580 	.word	0x08011580
            } else {
              recv_data = cseg->p;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	4a70      	ldr	r2, [pc, #448]	@ (800aac4 <tcp_receive+0xcf4>)
 800a902:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2200      	movs	r2, #0
 800a908:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	899b      	ldrh	r3, [r3, #12]
 800a910:	b29b      	uxth	r3, r3
 800a912:	4618      	mov	r0, r3
 800a914:	f7fa fe40 	bl	8005598 <lwip_htons>
 800a918:	4603      	mov	r3, r0
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 0301 	and.w	r3, r3, #1
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00d      	beq.n	800a940 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a924:	4b68      	ldr	r3, [pc, #416]	@ (800aac8 <tcp_receive+0xcf8>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f043 0320 	orr.w	r3, r3, #32
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	4b66      	ldr	r3, [pc, #408]	@ (800aac8 <tcp_receive+0xcf8>)
 800a930:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	7d1b      	ldrb	r3, [r3, #20]
 800a936:	2b04      	cmp	r3, #4
 800a938:	d102      	bne.n	800a940 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2207      	movs	r2, #7
 800a93e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a948:	68b8      	ldr	r0, [r7, #8]
 800a94a:	f7fd fbd4 	bl	80080f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a952:	2b00      	cmp	r3, #0
 800a954:	d008      	beq.n	800a968 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a962:	429a      	cmp	r2, r3
 800a964:	f43f af43 	beq.w	800a7ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	8b5b      	ldrh	r3, [r3, #26]
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00e      	beq.n	800a992 <tcp_receive+0xbc2>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	8b5b      	ldrh	r3, [r3, #26]
 800a978:	f023 0301 	bic.w	r3, r3, #1
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	835a      	strh	r2, [r3, #26]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	8b5b      	ldrh	r3, [r3, #26]
 800a986:	f043 0302 	orr.w	r3, r3, #2
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a990:	e187      	b.n	800aca2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	8b5b      	ldrh	r3, [r3, #26]
 800a996:	f043 0301 	orr.w	r3, r3, #1
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a9a0:	e17f      	b.n	800aca2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d106      	bne.n	800a9b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a9aa:	4848      	ldr	r0, [pc, #288]	@ (800aacc <tcp_receive+0xcfc>)
 800a9ac:	f7fd fbbc 	bl	8008128 <tcp_seg_copy>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	675a      	str	r2, [r3, #116]	@ 0x74
 800a9b6:	e16c      	b.n	800ac92 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9c2:	e156      	b.n	800ac72 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	4b41      	ldr	r3, [pc, #260]	@ (800aad0 <tcp_receive+0xd00>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d11d      	bne.n	800aa0e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a9d2:	4b3e      	ldr	r3, [pc, #248]	@ (800aacc <tcp_receive+0xcfc>)
 800a9d4:	891a      	ldrh	r2, [r3, #8]
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d8:	891b      	ldrh	r3, [r3, #8]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	f240 814e 	bls.w	800ac7c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a9e0:	483a      	ldr	r0, [pc, #232]	@ (800aacc <tcp_receive+0xcfc>)
 800a9e2:	f7fd fba1 	bl	8008128 <tcp_seg_copy>
 800a9e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 8148 	beq.w	800ac80 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d003      	beq.n	800a9fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	601a      	str	r2, [r3, #0]
 800a9fc:	e002      	b.n	800aa04 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800aa04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	f7ff f8de 	bl	8009bc8 <tcp_oos_insert_segment>
                }
                break;
 800aa0c:	e138      	b.n	800ac80 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800aa0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d117      	bne.n	800aa44 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800aa14:	4b2e      	ldr	r3, [pc, #184]	@ (800aad0 <tcp_receive+0xd00>)
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	da57      	bge.n	800aad4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa24:	4829      	ldr	r0, [pc, #164]	@ (800aacc <tcp_receive+0xcfc>)
 800aa26:	f7fd fb7f 	bl	8008128 <tcp_seg_copy>
 800aa2a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f000 8128 	beq.w	800ac84 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800aa3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa3c:	69b8      	ldr	r0, [r7, #24]
 800aa3e:	f7ff f8c3 	bl	8009bc8 <tcp_oos_insert_segment>
                  }
                  break;
 800aa42:	e11f      	b.n	800ac84 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aa44:	4b22      	ldr	r3, [pc, #136]	@ (800aad0 <tcp_receive+0xd00>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	db3e      	blt.n	800aad4 <tcp_receive+0xd04>
 800aa56:	4b1e      	ldr	r3, [pc, #120]	@ (800aad0 <tcp_receive+0xd00>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	3301      	adds	r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	dc35      	bgt.n	800aad4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800aa68:	4818      	ldr	r0, [pc, #96]	@ (800aacc <tcp_receive+0xcfc>)
 800aa6a:	f7fd fb5d 	bl	8008128 <tcp_seg_copy>
 800aa6e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 8108 	beq.w	800ac88 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800aa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa80:	8912      	ldrh	r2, [r2, #8]
 800aa82:	441a      	add	r2, r3
 800aa84:	4b12      	ldr	r3, [pc, #72]	@ (800aad0 <tcp_receive+0xd00>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dd12      	ble.n	800aab4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800aa8e:	4b10      	ldr	r3, [pc, #64]	@ (800aad0 <tcp_receive+0xd00>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaaa:	891b      	ldrh	r3, [r3, #8]
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7fb ff26 	bl	8006900 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800aab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab6:	69fa      	ldr	r2, [r7, #28]
 800aab8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800aaba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aabc:	69f8      	ldr	r0, [r7, #28]
 800aabe:	f7ff f883 	bl	8009bc8 <tcp_oos_insert_segment>
                  }
                  break;
 800aac2:	e0e1      	b.n	800ac88 <tcp_receive+0xeb8>
 800aac4:	20008198 	.word	0x20008198
 800aac8:	20008195 	.word	0x20008195
 800aacc:	20008168 	.word	0x20008168
 800aad0:	20008188 	.word	0x20008188
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800aad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f040 80c5 	bne.w	800ac6c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800aae2:	4b7f      	ldr	r3, [pc, #508]	@ (800ace0 <tcp_receive+0xf10>)
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f340 80bc 	ble.w	800ac6c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	899b      	ldrh	r3, [r3, #12]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fa fd4b 	bl	8005598 <lwip_htons>
 800ab02:	4603      	mov	r3, r0
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f040 80be 	bne.w	800ac8c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ab10:	4874      	ldr	r0, [pc, #464]	@ (800ace4 <tcp_receive+0xf14>)
 800ab12:	f7fd fb09 	bl	8008128 <tcp_seg_copy>
 800ab16:	4602      	mov	r2, r0
 800ab18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 80b5 	beq.w	800ac90 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab2e:	8912      	ldrh	r2, [r2, #8]
 800ab30:	441a      	add	r2, r3
 800ab32:	4b6b      	ldr	r3, [pc, #428]	@ (800ace0 <tcp_receive+0xf10>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	dd12      	ble.n	800ab62 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ab3c:	4b68      	ldr	r3, [pc, #416]	@ (800ace0 <tcp_receive+0xf10>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	1ad3      	subs	r3, r2, r3
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab50:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ab52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab58:	891b      	ldrh	r3, [r3, #8]
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	f7fb fecf 	bl	8006900 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ab62:	4b61      	ldr	r3, [pc, #388]	@ (800ace8 <tcp_receive+0xf18>)
 800ab64:	881b      	ldrh	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	4b5d      	ldr	r3, [pc, #372]	@ (800ace0 <tcp_receive+0xf10>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	441a      	add	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ab76:	440b      	add	r3, r1
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f340 8088 	ble.w	800ac90 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ab80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	899b      	ldrh	r3, [r3, #12]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fa fd04 	bl	8005598 <lwip_htons>
 800ab90:	4603      	mov	r3, r0
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d021      	beq.n	800abe0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	899b      	ldrh	r3, [r3, #12]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	b21b      	sxth	r3, r3
 800aba8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800abac:	b21c      	sxth	r4, r3
 800abae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	899b      	ldrh	r3, [r3, #12]
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fa fced 	bl	8005598 <lwip_htons>
 800abbe:	4603      	mov	r3, r0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fa fce5 	bl	8005598 <lwip_htons>
 800abce:	4603      	mov	r3, r0
 800abd0:	b21b      	sxth	r3, r3
 800abd2:	4323      	orrs	r3, r4
 800abd4:	b21a      	sxth	r2, r3
 800abd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	b292      	uxth	r2, r2
 800abde:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe4:	b29a      	uxth	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abea:	4413      	add	r3, r2
 800abec:	b299      	uxth	r1, r3
 800abee:	4b3c      	ldr	r3, [pc, #240]	@ (800ace0 <tcp_receive+0xf10>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	1a8a      	subs	r2, r1, r2
 800abfa:	b292      	uxth	r2, r2
 800abfc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800abfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	891b      	ldrh	r3, [r3, #8]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	f7fb fe77 	bl	8006900 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ac12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	891c      	ldrh	r4, [r3, #8]
 800ac18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	899b      	ldrh	r3, [r3, #12]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fa fcb8 	bl	8005598 <lwip_htons>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	f003 0303 	and.w	r3, r3, #3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <tcp_receive+0xe68>
 800ac34:	2301      	movs	r3, #1
 800ac36:	e000      	b.n	800ac3a <tcp_receive+0xe6a>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4423      	add	r3, r4
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	4b2a      	ldr	r3, [pc, #168]	@ (800ace8 <tcp_receive+0xf18>)
 800ac40:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ac42:	4b29      	ldr	r3, [pc, #164]	@ (800ace8 <tcp_receive+0xf18>)
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	4b25      	ldr	r3, [pc, #148]	@ (800ace0 <tcp_receive+0xf10>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	441a      	add	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ac56:	440b      	add	r3, r1
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d019      	beq.n	800ac90 <tcp_receive+0xec0>
 800ac5c:	4b23      	ldr	r3, [pc, #140]	@ (800acec <tcp_receive+0xf1c>)
 800ac5e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ac62:	4923      	ldr	r1, [pc, #140]	@ (800acf0 <tcp_receive+0xf20>)
 800ac64:	4823      	ldr	r0, [pc, #140]	@ (800acf4 <tcp_receive+0xf24>)
 800ac66:	f004 fa3f 	bl	800f0e8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ac6a:	e011      	b.n	800ac90 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f47f aea5 	bne.w	800a9c4 <tcp_receive+0xbf4>
 800ac7a:	e00a      	b.n	800ac92 <tcp_receive+0xec2>
                break;
 800ac7c:	bf00      	nop
 800ac7e:	e008      	b.n	800ac92 <tcp_receive+0xec2>
                break;
 800ac80:	bf00      	nop
 800ac82:	e006      	b.n	800ac92 <tcp_receive+0xec2>
                  break;
 800ac84:	bf00      	nop
 800ac86:	e004      	b.n	800ac92 <tcp_receive+0xec2>
                  break;
 800ac88:	bf00      	nop
 800ac8a:	e002      	b.n	800ac92 <tcp_receive+0xec2>
                  break;
 800ac8c:	bf00      	nop
 800ac8e:	e000      	b.n	800ac92 <tcp_receive+0xec2>
                break;
 800ac90:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f001 fa30 	bl	800c0f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ac98:	e003      	b.n	800aca2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f001 fa2c 	bl	800c0f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800aca0:	e01a      	b.n	800acd8 <tcp_receive+0xf08>
 800aca2:	e019      	b.n	800acd8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800aca4:	4b0e      	ldr	r3, [pc, #56]	@ (800ace0 <tcp_receive+0xf10>)
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	2b00      	cmp	r3, #0
 800acb0:	db0a      	blt.n	800acc8 <tcp_receive+0xef8>
 800acb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ace0 <tcp_receive+0xf10>)
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800acbe:	440b      	add	r3, r1
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	3301      	adds	r3, #1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dd07      	ble.n	800acd8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	8b5b      	ldrh	r3, [r3, #26]
 800accc:	f043 0302 	orr.w	r3, r3, #2
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800acd6:	e7ff      	b.n	800acd8 <tcp_receive+0xf08>
 800acd8:	bf00      	nop
 800acda:	3750      	adds	r7, #80	@ 0x50
 800acdc:	46bd      	mov	sp, r7
 800acde:	bdb0      	pop	{r4, r5, r7, pc}
 800ace0:	20008188 	.word	0x20008188
 800ace4:	20008168 	.word	0x20008168
 800ace8:	20008192 	.word	0x20008192
 800acec:	08011144 	.word	0x08011144
 800acf0:	080114ec 	.word	0x080114ec
 800acf4:	08011190 	.word	0x08011190

0800acf8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800acfe:	4b15      	ldr	r3, [pc, #84]	@ (800ad54 <tcp_get_next_optbyte+0x5c>)
 800ad00:	881b      	ldrh	r3, [r3, #0]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	b291      	uxth	r1, r2
 800ad06:	4a13      	ldr	r2, [pc, #76]	@ (800ad54 <tcp_get_next_optbyte+0x5c>)
 800ad08:	8011      	strh	r1, [r2, #0]
 800ad0a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ad0c:	4b12      	ldr	r3, [pc, #72]	@ (800ad58 <tcp_get_next_optbyte+0x60>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <tcp_get_next_optbyte+0x26>
 800ad14:	4b11      	ldr	r3, [pc, #68]	@ (800ad5c <tcp_get_next_optbyte+0x64>)
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	88fa      	ldrh	r2, [r7, #6]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d208      	bcs.n	800ad30 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ad1e:	4b10      	ldr	r3, [pc, #64]	@ (800ad60 <tcp_get_next_optbyte+0x68>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3314      	adds	r3, #20
 800ad24:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	e00b      	b.n	800ad48 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ad30:	88fb      	ldrh	r3, [r7, #6]
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	4b09      	ldr	r3, [pc, #36]	@ (800ad5c <tcp_get_next_optbyte+0x64>)
 800ad36:	881b      	ldrh	r3, [r3, #0]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ad3e:	4b06      	ldr	r3, [pc, #24]	@ (800ad58 <tcp_get_next_optbyte+0x60>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	797b      	ldrb	r3, [r7, #5]
 800ad44:	4413      	add	r3, r2
 800ad46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	20008184 	.word	0x20008184
 800ad58:	20008180 	.word	0x20008180
 800ad5c:	2000817e 	.word	0x2000817e
 800ad60:	20008178 	.word	0x20008178

0800ad64 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <tcp_parseopt+0x1c>
 800ad72:	4b32      	ldr	r3, [pc, #200]	@ (800ae3c <tcp_parseopt+0xd8>)
 800ad74:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ad78:	4931      	ldr	r1, [pc, #196]	@ (800ae40 <tcp_parseopt+0xdc>)
 800ad7a:	4832      	ldr	r0, [pc, #200]	@ (800ae44 <tcp_parseopt+0xe0>)
 800ad7c:	f004 f9b4 	bl	800f0e8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ad80:	4b31      	ldr	r3, [pc, #196]	@ (800ae48 <tcp_parseopt+0xe4>)
 800ad82:	881b      	ldrh	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d056      	beq.n	800ae36 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ad88:	4b30      	ldr	r3, [pc, #192]	@ (800ae4c <tcp_parseopt+0xe8>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	801a      	strh	r2, [r3, #0]
 800ad8e:	e046      	b.n	800ae1e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800ad90:	f7ff ffb2 	bl	800acf8 <tcp_get_next_optbyte>
 800ad94:	4603      	mov	r3, r0
 800ad96:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d006      	beq.n	800adac <tcp_parseopt+0x48>
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	dc2a      	bgt.n	800adf8 <tcp_parseopt+0x94>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d042      	beq.n	800ae2c <tcp_parseopt+0xc8>
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d038      	beq.n	800ae1c <tcp_parseopt+0xb8>
 800adaa:	e025      	b.n	800adf8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800adac:	f7ff ffa4 	bl	800acf8 <tcp_get_next_optbyte>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d13c      	bne.n	800ae30 <tcp_parseopt+0xcc>
 800adb6:	4b25      	ldr	r3, [pc, #148]	@ (800ae4c <tcp_parseopt+0xe8>)
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	4a22      	ldr	r2, [pc, #136]	@ (800ae48 <tcp_parseopt+0xe4>)
 800adbe:	8812      	ldrh	r2, [r2, #0]
 800adc0:	4293      	cmp	r3, r2
 800adc2:	da35      	bge.n	800ae30 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800adc4:	f7ff ff98 	bl	800acf8 <tcp_get_next_optbyte>
 800adc8:	4603      	mov	r3, r0
 800adca:	021b      	lsls	r3, r3, #8
 800adcc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800adce:	f7ff ff93 	bl	800acf8 <tcp_get_next_optbyte>
 800add2:	4603      	mov	r3, r0
 800add4:	461a      	mov	r2, r3
 800add6:	89bb      	ldrh	r3, [r7, #12]
 800add8:	4313      	orrs	r3, r2
 800adda:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800addc:	89bb      	ldrh	r3, [r7, #12]
 800adde:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ade2:	d804      	bhi.n	800adee <tcp_parseopt+0x8a>
 800ade4:	89bb      	ldrh	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <tcp_parseopt+0x8a>
 800adea:	89ba      	ldrh	r2, [r7, #12]
 800adec:	e001      	b.n	800adf2 <tcp_parseopt+0x8e>
 800adee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800adf6:	e012      	b.n	800ae1e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800adf8:	f7ff ff7e 	bl	800acf8 <tcp_get_next_optbyte>
 800adfc:	4603      	mov	r3, r0
 800adfe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ae00:	7afb      	ldrb	r3, [r7, #11]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d916      	bls.n	800ae34 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	4b10      	ldr	r3, [pc, #64]	@ (800ae4c <tcp_parseopt+0xe8>)
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	4413      	add	r3, r2
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	3b02      	subs	r3, #2
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	4b0d      	ldr	r3, [pc, #52]	@ (800ae4c <tcp_parseopt+0xe8>)
 800ae18:	801a      	strh	r2, [r3, #0]
 800ae1a:	e000      	b.n	800ae1e <tcp_parseopt+0xba>
          break;
 800ae1c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ae1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae4c <tcp_parseopt+0xe8>)
 800ae20:	881a      	ldrh	r2, [r3, #0]
 800ae22:	4b09      	ldr	r3, [pc, #36]	@ (800ae48 <tcp_parseopt+0xe4>)
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d3b2      	bcc.n	800ad90 <tcp_parseopt+0x2c>
 800ae2a:	e004      	b.n	800ae36 <tcp_parseopt+0xd2>
          return;
 800ae2c:	bf00      	nop
 800ae2e:	e002      	b.n	800ae36 <tcp_parseopt+0xd2>
            return;
 800ae30:	bf00      	nop
 800ae32:	e000      	b.n	800ae36 <tcp_parseopt+0xd2>
            return;
 800ae34:	bf00      	nop
      }
    }
  }
}
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	08011144 	.word	0x08011144
 800ae40:	080115a8 	.word	0x080115a8
 800ae44:	08011190 	.word	0x08011190
 800ae48:	2000817c 	.word	0x2000817c
 800ae4c:	20008184 	.word	0x20008184

0800ae50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ae50:	b480      	push	{r7}
 800ae52:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ae54:	4b05      	ldr	r3, [pc, #20]	@ (800ae6c <tcp_trigger_input_pcb_close+0x1c>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	f043 0310 	orr.w	r3, r3, #16
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	4b03      	ldr	r3, [pc, #12]	@ (800ae6c <tcp_trigger_input_pcb_close+0x1c>)
 800ae60:	701a      	strb	r2, [r3, #0]
}
 800ae62:	bf00      	nop
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	20008195 	.word	0x20008195

0800ae70 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00a      	beq.n	800ae98 <tcp_route+0x28>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	7a1b      	ldrb	r3, [r3, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d006      	beq.n	800ae98 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	7a1b      	ldrb	r3, [r3, #8]
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fb fb7c 	bl	800658c <netif_get_by_index>
 800ae94:	4603      	mov	r3, r0
 800ae96:	e003      	b.n	800aea0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f002 fe39 	bl	800db10 <ip4_route>
 800ae9e:	4603      	mov	r3, r0
  }
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800aea8:	b590      	push	{r4, r7, lr}
 800aeaa:	b087      	sub	sp, #28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	603b      	str	r3, [r7, #0]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d105      	bne.n	800aeca <tcp_create_segment+0x22>
 800aebe:	4b43      	ldr	r3, [pc, #268]	@ (800afcc <tcp_create_segment+0x124>)
 800aec0:	22a3      	movs	r2, #163	@ 0xa3
 800aec2:	4943      	ldr	r1, [pc, #268]	@ (800afd0 <tcp_create_segment+0x128>)
 800aec4:	4843      	ldr	r0, [pc, #268]	@ (800afd4 <tcp_create_segment+0x12c>)
 800aec6:	f004 f90f 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d105      	bne.n	800aedc <tcp_create_segment+0x34>
 800aed0:	4b3e      	ldr	r3, [pc, #248]	@ (800afcc <tcp_create_segment+0x124>)
 800aed2:	22a4      	movs	r2, #164	@ 0xa4
 800aed4:	4940      	ldr	r1, [pc, #256]	@ (800afd8 <tcp_create_segment+0x130>)
 800aed6:	483f      	ldr	r0, [pc, #252]	@ (800afd4 <tcp_create_segment+0x12c>)
 800aed8:	f004 f906 	bl	800f0e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aedc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800aeea:	2003      	movs	r0, #3
 800aeec:	f7fa ffc8 	bl	8005e80 <memp_malloc>
 800aef0:	6138      	str	r0, [r7, #16]
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d104      	bne.n	800af02 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800aef8:	68b8      	ldr	r0, [r7, #8]
 800aefa:	f7fb fe87 	bl	8006c0c <pbuf_free>
    return NULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	e060      	b.n	800afc4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800af08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	891a      	ldrh	r2, [r3, #8]
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	429a      	cmp	r2, r3
 800af20:	d205      	bcs.n	800af2e <tcp_create_segment+0x86>
 800af22:	4b2a      	ldr	r3, [pc, #168]	@ (800afcc <tcp_create_segment+0x124>)
 800af24:	22b0      	movs	r2, #176	@ 0xb0
 800af26:	492d      	ldr	r1, [pc, #180]	@ (800afdc <tcp_create_segment+0x134>)
 800af28:	482a      	ldr	r0, [pc, #168]	@ (800afd4 <tcp_create_segment+0x12c>)
 800af2a:	f004 f8dd 	bl	800f0e8 <iprintf>
  seg->len = p->tot_len - optlen;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	891a      	ldrh	r2, [r3, #8]
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	b29b      	uxth	r3, r3
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	b29a      	uxth	r2, r3
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800af3e:	2114      	movs	r1, #20
 800af40:	68b8      	ldr	r0, [r7, #8]
 800af42:	f7fb fdcd 	bl	8006ae0 <pbuf_add_header>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d004      	beq.n	800af56 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800af4c:	6938      	ldr	r0, [r7, #16]
 800af4e:	f7fd f8d2 	bl	80080f6 <tcp_seg_free>
    return NULL;
 800af52:	2300      	movs	r3, #0
 800af54:	e036      	b.n	800afc4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	8ada      	ldrh	r2, [r3, #22]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	68dc      	ldr	r4, [r3, #12]
 800af68:	4610      	mov	r0, r2
 800af6a:	f7fa fb15 	bl	8005598 <lwip_htons>
 800af6e:	4603      	mov	r3, r0
 800af70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8b1a      	ldrh	r2, [r3, #24]
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	68dc      	ldr	r4, [r3, #12]
 800af7a:	4610      	mov	r0, r2
 800af7c:	f7fa fb0c 	bl	8005598 <lwip_htons>
 800af80:	4603      	mov	r3, r0
 800af82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	68dc      	ldr	r4, [r3, #12]
 800af88:	6838      	ldr	r0, [r7, #0]
 800af8a:	f7fa fb1b 	bl	80055c4 <lwip_htonl>
 800af8e:	4603      	mov	r3, r0
 800af90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800af92:	7dfb      	ldrb	r3, [r7, #23]
 800af94:	089b      	lsrs	r3, r3, #2
 800af96:	b2db      	uxtb	r3, r3
 800af98:	3305      	adds	r3, #5
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	031b      	lsls	r3, r3, #12
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	79fb      	ldrb	r3, [r7, #7]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	4313      	orrs	r3, r2
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	68dc      	ldr	r4, [r3, #12]
 800afac:	4610      	mov	r0, r2
 800afae:	f7fa faf3 	bl	8005598 <lwip_htons>
 800afb2:	4603      	mov	r3, r0
 800afb4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	749a      	strb	r2, [r3, #18]
 800afbe:	2200      	movs	r2, #0
 800afc0:	74da      	strb	r2, [r3, #19]
  return seg;
 800afc2:	693b      	ldr	r3, [r7, #16]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	371c      	adds	r7, #28
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd90      	pop	{r4, r7, pc}
 800afcc:	080115c4 	.word	0x080115c4
 800afd0:	080115f8 	.word	0x080115f8
 800afd4:	08011618 	.word	0x08011618
 800afd8:	08011640 	.word	0x08011640
 800afdc:	08011664 	.word	0x08011664

0800afe0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800afe0:	b590      	push	{r4, r7, lr}
 800afe2:	b08b      	sub	sp, #44	@ 0x2c
 800afe4:	af02      	add	r7, sp, #8
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	460b      	mov	r3, r1
 800afea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	61fb      	str	r3, [r7, #28]
 800aff0:	2300      	movs	r3, #0
 800aff2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800aff4:	2300      	movs	r3, #0
 800aff6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d106      	bne.n	800b00c <tcp_split_unsent_seg+0x2c>
 800affe:	4b95      	ldr	r3, [pc, #596]	@ (800b254 <tcp_split_unsent_seg+0x274>)
 800b000:	f240 324b 	movw	r2, #843	@ 0x34b
 800b004:	4994      	ldr	r1, [pc, #592]	@ (800b258 <tcp_split_unsent_seg+0x278>)
 800b006:	4895      	ldr	r0, [pc, #596]	@ (800b25c <tcp_split_unsent_seg+0x27c>)
 800b008:	f004 f86e 	bl	800f0e8 <iprintf>

  useg = pcb->unsent;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b010:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d102      	bne.n	800b01e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b018:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b01c:	e116      	b.n	800b24c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b01e:	887b      	ldrh	r3, [r7, #2]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d109      	bne.n	800b038 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b024:	4b8b      	ldr	r3, [pc, #556]	@ (800b254 <tcp_split_unsent_seg+0x274>)
 800b026:	f240 3253 	movw	r2, #851	@ 0x353
 800b02a:	498d      	ldr	r1, [pc, #564]	@ (800b260 <tcp_split_unsent_seg+0x280>)
 800b02c:	488b      	ldr	r0, [pc, #556]	@ (800b25c <tcp_split_unsent_seg+0x27c>)
 800b02e:	f004 f85b 	bl	800f0e8 <iprintf>
    return ERR_VAL;
 800b032:	f06f 0305 	mvn.w	r3, #5
 800b036:	e109      	b.n	800b24c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	891b      	ldrh	r3, [r3, #8]
 800b03c:	887a      	ldrh	r2, [r7, #2]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d301      	bcc.n	800b046 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	e102      	b.n	800b24c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b04a:	887a      	ldrh	r2, [r7, #2]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d906      	bls.n	800b05e <tcp_split_unsent_seg+0x7e>
 800b050:	4b80      	ldr	r3, [pc, #512]	@ (800b254 <tcp_split_unsent_seg+0x274>)
 800b052:	f240 325b 	movw	r2, #859	@ 0x35b
 800b056:	4983      	ldr	r1, [pc, #524]	@ (800b264 <tcp_split_unsent_seg+0x284>)
 800b058:	4880      	ldr	r0, [pc, #512]	@ (800b25c <tcp_split_unsent_seg+0x27c>)
 800b05a:	f004 f845 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	891b      	ldrh	r3, [r3, #8]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <tcp_split_unsent_seg+0x94>
 800b066:	4b7b      	ldr	r3, [pc, #492]	@ (800b254 <tcp_split_unsent_seg+0x274>)
 800b068:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b06c:	497e      	ldr	r1, [pc, #504]	@ (800b268 <tcp_split_unsent_seg+0x288>)
 800b06e:	487b      	ldr	r0, [pc, #492]	@ (800b25c <tcp_split_unsent_seg+0x27c>)
 800b070:	f004 f83a 	bl	800f0e8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	7a9b      	ldrb	r3, [r3, #10]
 800b078:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	f003 0304 	and.w	r3, r3, #4
 800b084:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	891a      	ldrh	r2, [r3, #8]
 800b08a:	887b      	ldrh	r3, [r7, #2]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	b29a      	uxth	r2, r3
 800b094:	89bb      	ldrh	r3, [r7, #12]
 800b096:	4413      	add	r3, r2
 800b098:	b29b      	uxth	r3, r3
 800b09a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b09e:	4619      	mov	r1, r3
 800b0a0:	2036      	movs	r0, #54	@ 0x36
 800b0a2:	f7fb facf 	bl	8006644 <pbuf_alloc>
 800b0a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f000 80b7 	beq.w	800b21e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	891a      	ldrh	r2, [r3, #8]
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	891b      	ldrh	r3, [r3, #8]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	887b      	ldrh	r3, [r7, #2]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	6858      	ldr	r0, [r3, #4]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	18d1      	adds	r1, r2, r3
 800b0d0:	897b      	ldrh	r3, [r7, #10]
 800b0d2:	89ba      	ldrh	r2, [r7, #12]
 800b0d4:	f7fb ff84 	bl	8006fe0 <pbuf_copy_partial>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	461a      	mov	r2, r3
 800b0dc:	89bb      	ldrh	r3, [r7, #12]
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	f040 809f 	bne.w	800b222 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	899b      	ldrh	r3, [r3, #12]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fa fa53 	bl	8005598 <lwip_htons>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b100:	7efb      	ldrb	r3, [r7, #27]
 800b102:	f003 0308 	and.w	r3, r3, #8
 800b106:	2b00      	cmp	r3, #0
 800b108:	d007      	beq.n	800b11a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b10a:	7efb      	ldrb	r3, [r7, #27]
 800b10c:	f023 0308 	bic.w	r3, r3, #8
 800b110:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b112:	7ebb      	ldrb	r3, [r7, #26]
 800b114:	f043 0308 	orr.w	r3, r3, #8
 800b118:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b11a:	7efb      	ldrb	r3, [r7, #27]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d007      	beq.n	800b134 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b124:	7efb      	ldrb	r3, [r7, #27]
 800b126:	f023 0301 	bic.w	r3, r3, #1
 800b12a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b12c:	7ebb      	ldrb	r3, [r7, #26]
 800b12e:	f043 0301 	orr.w	r3, r3, #1
 800b132:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fa fa42 	bl	80055c4 <lwip_htonl>
 800b140:	4602      	mov	r2, r0
 800b142:	887b      	ldrh	r3, [r7, #2]
 800b144:	18d1      	adds	r1, r2, r3
 800b146:	7eba      	ldrb	r2, [r7, #26]
 800b148:	7bfb      	ldrb	r3, [r7, #15]
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	460b      	mov	r3, r1
 800b14e:	6939      	ldr	r1, [r7, #16]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f7ff fea9 	bl	800aea8 <tcp_create_segment>
 800b156:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d063      	beq.n	800b226 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	4618      	mov	r0, r3
 800b164:	f7fb fdda 	bl	8006d1c <pbuf_clen>
 800b168:	4603      	mov	r3, r0
 800b16a:	461a      	mov	r2, r3
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b172:	1a9b      	subs	r3, r3, r2
 800b174:	b29a      	uxth	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	6858      	ldr	r0, [r3, #4]
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	891a      	ldrh	r2, [r3, #8]
 800b186:	89bb      	ldrh	r3, [r7, #12]
 800b188:	1ad3      	subs	r3, r2, r3
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	4619      	mov	r1, r3
 800b18e:	f7fb fbb7 	bl	8006900 <pbuf_realloc>
  useg->len -= remainder;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	891a      	ldrh	r2, [r3, #8]
 800b196:	89bb      	ldrh	r3, [r7, #12]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	899b      	ldrh	r3, [r3, #12]
 800b1a6:	b29c      	uxth	r4, r3
 800b1a8:	7efb      	ldrb	r3, [r7, #27]
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fa f9f3 	bl	8005598 <lwip_htons>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	4322      	orrs	r2, r4
 800b1bc:	b292      	uxth	r2, r2
 800b1be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fb fda9 	bl	8006d1c <pbuf_clen>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b1d4:	4413      	add	r3, r2
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fb fd9a 	bl	8006d1c <pbuf_clen>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b1f2:	4413      	add	r3, r2
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	69fa      	ldr	r2, [r7, #28]
 800b208:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d103      	bne.n	800b21a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e016      	b.n	800b24c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b21e:	bf00      	nop
 800b220:	e002      	b.n	800b228 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b222:	bf00      	nop
 800b224:	e000      	b.n	800b228 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b226:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d006      	beq.n	800b23c <tcp_split_unsent_seg+0x25c>
 800b22e:	4b09      	ldr	r3, [pc, #36]	@ (800b254 <tcp_split_unsent_seg+0x274>)
 800b230:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b234:	490d      	ldr	r1, [pc, #52]	@ (800b26c <tcp_split_unsent_seg+0x28c>)
 800b236:	4809      	ldr	r0, [pc, #36]	@ (800b25c <tcp_split_unsent_seg+0x27c>)
 800b238:	f003 ff56 	bl	800f0e8 <iprintf>
  if (p != NULL) {
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b242:	6938      	ldr	r0, [r7, #16]
 800b244:	f7fb fce2 	bl	8006c0c <pbuf_free>
  }

  return ERR_MEM;
 800b248:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3724      	adds	r7, #36	@ 0x24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd90      	pop	{r4, r7, pc}
 800b254:	080115c4 	.word	0x080115c4
 800b258:	08011958 	.word	0x08011958
 800b25c:	08011618 	.word	0x08011618
 800b260:	0801197c 	.word	0x0801197c
 800b264:	080119a0 	.word	0x080119a0
 800b268:	080119b0 	.word	0x080119b0
 800b26c:	080119c0 	.word	0x080119c0

0800b270 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b270:	b590      	push	{r4, r7, lr}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <tcp_send_fin+0x1c>
 800b27e:	4b21      	ldr	r3, [pc, #132]	@ (800b304 <tcp_send_fin+0x94>)
 800b280:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b284:	4920      	ldr	r1, [pc, #128]	@ (800b308 <tcp_send_fin+0x98>)
 800b286:	4821      	ldr	r0, [pc, #132]	@ (800b30c <tcp_send_fin+0x9c>)
 800b288:	f003 ff2e 	bl	800f0e8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b290:	2b00      	cmp	r3, #0
 800b292:	d02e      	beq.n	800b2f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b298:	60fb      	str	r3, [r7, #12]
 800b29a:	e002      	b.n	800b2a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1f8      	bne.n	800b29c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	899b      	ldrh	r3, [r3, #12]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fa f970 	bl	8005598 <lwip_htons>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	f003 0307 	and.w	r3, r3, #7
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d116      	bne.n	800b2f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	899b      	ldrh	r3, [r3, #12]
 800b2ca:	b29c      	uxth	r4, r3
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f7fa f963 	bl	8005598 <lwip_htons>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	4322      	orrs	r2, r4
 800b2dc:	b292      	uxth	r2, r2
 800b2de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	8b5b      	ldrh	r3, [r3, #26]
 800b2e4:	f043 0320 	orr.w	r3, r3, #32
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e004      	b.n	800b2fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f80b 	bl	800b310 <tcp_enqueue_flags>
 800b2fa:	4603      	mov	r3, r0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	bd90      	pop	{r4, r7, pc}
 800b304:	080115c4 	.word	0x080115c4
 800b308:	080119cc 	.word	0x080119cc
 800b30c:	08011618 	.word	0x08011618

0800b310 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08a      	sub	sp, #40	@ 0x28
 800b314:	af02      	add	r7, sp, #8
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b324:	78fb      	ldrb	r3, [r7, #3]
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d106      	bne.n	800b33c <tcp_enqueue_flags+0x2c>
 800b32e:	4b67      	ldr	r3, [pc, #412]	@ (800b4cc <tcp_enqueue_flags+0x1bc>)
 800b330:	f240 4211 	movw	r2, #1041	@ 0x411
 800b334:	4966      	ldr	r1, [pc, #408]	@ (800b4d0 <tcp_enqueue_flags+0x1c0>)
 800b336:	4867      	ldr	r0, [pc, #412]	@ (800b4d4 <tcp_enqueue_flags+0x1c4>)
 800b338:	f003 fed6 	bl	800f0e8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d106      	bne.n	800b350 <tcp_enqueue_flags+0x40>
 800b342:	4b62      	ldr	r3, [pc, #392]	@ (800b4cc <tcp_enqueue_flags+0x1bc>)
 800b344:	f240 4213 	movw	r2, #1043	@ 0x413
 800b348:	4963      	ldr	r1, [pc, #396]	@ (800b4d8 <tcp_enqueue_flags+0x1c8>)
 800b34a:	4862      	ldr	r0, [pc, #392]	@ (800b4d4 <tcp_enqueue_flags+0x1c4>)
 800b34c:	f003 fecc 	bl	800f0e8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b350:	78fb      	ldrb	r3, [r7, #3]
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b35a:	2301      	movs	r3, #1
 800b35c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b35e:	7ffb      	ldrb	r3, [r7, #31]
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 0304 	and.w	r3, r3, #4
 800b368:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b36a:	7dfb      	ldrb	r3, [r7, #23]
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b372:	4619      	mov	r1, r3
 800b374:	2036      	movs	r0, #54	@ 0x36
 800b376:	f7fb f965 	bl	8006644 <pbuf_alloc>
 800b37a:	6138      	str	r0, [r7, #16]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d109      	bne.n	800b396 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	8b5b      	ldrh	r3, [r3, #26]
 800b386:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b394:	e095      	b.n	800b4c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	895a      	ldrh	r2, [r3, #10]
 800b39a:	7dfb      	ldrb	r3, [r7, #23]
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d206      	bcs.n	800b3b0 <tcp_enqueue_flags+0xa0>
 800b3a2:	4b4a      	ldr	r3, [pc, #296]	@ (800b4cc <tcp_enqueue_flags+0x1bc>)
 800b3a4:	f240 4239 	movw	r2, #1081	@ 0x439
 800b3a8:	494c      	ldr	r1, [pc, #304]	@ (800b4dc <tcp_enqueue_flags+0x1cc>)
 800b3aa:	484a      	ldr	r0, [pc, #296]	@ (800b4d4 <tcp_enqueue_flags+0x1c4>)
 800b3ac:	f003 fe9c 	bl	800f0e8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b3b4:	78fa      	ldrb	r2, [r7, #3]
 800b3b6:	7ffb      	ldrb	r3, [r7, #31]
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	6939      	ldr	r1, [r7, #16]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff fd72 	bl	800aea8 <tcp_create_segment>
 800b3c4:	60f8      	str	r0, [r7, #12]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d109      	bne.n	800b3e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	8b5b      	ldrh	r3, [r3, #26]
 800b3d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b3da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3de:	e070      	b.n	800b4c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	f003 0303 	and.w	r3, r3, #3
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d006      	beq.n	800b3fa <tcp_enqueue_flags+0xea>
 800b3ec:	4b37      	ldr	r3, [pc, #220]	@ (800b4cc <tcp_enqueue_flags+0x1bc>)
 800b3ee:	f240 4242 	movw	r2, #1090	@ 0x442
 800b3f2:	493b      	ldr	r1, [pc, #236]	@ (800b4e0 <tcp_enqueue_flags+0x1d0>)
 800b3f4:	4837      	ldr	r0, [pc, #220]	@ (800b4d4 <tcp_enqueue_flags+0x1c4>)
 800b3f6:	f003 fe77 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	891b      	ldrh	r3, [r3, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d006      	beq.n	800b410 <tcp_enqueue_flags+0x100>
 800b402:	4b32      	ldr	r3, [pc, #200]	@ (800b4cc <tcp_enqueue_flags+0x1bc>)
 800b404:	f240 4243 	movw	r2, #1091	@ 0x443
 800b408:	4936      	ldr	r1, [pc, #216]	@ (800b4e4 <tcp_enqueue_flags+0x1d4>)
 800b40a:	4832      	ldr	r0, [pc, #200]	@ (800b4d4 <tcp_enqueue_flags+0x1c4>)
 800b40c:	f003 fe6c 	bl	800f0e8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b414:	2b00      	cmp	r3, #0
 800b416:	d103      	bne.n	800b420 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b41e:	e00d      	b.n	800b43c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	e002      	b.n	800b42e <tcp_enqueue_flags+0x11e>
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	61bb      	str	r3, [r7, #24]
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1f8      	bne.n	800b428 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b444:	78fb      	ldrb	r3, [r7, #3]
 800b446:	f003 0302 	and.w	r3, r3, #2
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d104      	bne.n	800b458 <tcp_enqueue_flags+0x148>
 800b44e:	78fb      	ldrb	r3, [r7, #3]
 800b450:	f003 0301 	and.w	r3, r3, #1
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b462:	78fb      	ldrb	r3, [r7, #3]
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d006      	beq.n	800b47a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	8b5b      	ldrh	r3, [r3, #26]
 800b470:	f043 0320 	orr.w	r3, r3, #32
 800b474:	b29a      	uxth	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fb fc4c 	bl	8006d1c <pbuf_clen>
 800b484:	4603      	mov	r3, r0
 800b486:	461a      	mov	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b48e:	4413      	add	r3, r2
 800b490:	b29a      	uxth	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00e      	beq.n	800b4c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10a      	bne.n	800b4c0 <tcp_enqueue_flags+0x1b0>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d106      	bne.n	800b4c0 <tcp_enqueue_flags+0x1b0>
 800b4b2:	4b06      	ldr	r3, [pc, #24]	@ (800b4cc <tcp_enqueue_flags+0x1bc>)
 800b4b4:	f240 4265 	movw	r2, #1125	@ 0x465
 800b4b8:	490b      	ldr	r1, [pc, #44]	@ (800b4e8 <tcp_enqueue_flags+0x1d8>)
 800b4ba:	4806      	ldr	r0, [pc, #24]	@ (800b4d4 <tcp_enqueue_flags+0x1c4>)
 800b4bc:	f003 fe14 	bl	800f0e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	080115c4 	.word	0x080115c4
 800b4d0:	080119e8 	.word	0x080119e8
 800b4d4:	08011618 	.word	0x08011618
 800b4d8:	08011a40 	.word	0x08011a40
 800b4dc:	08011a60 	.word	0x08011a60
 800b4e0:	08011a9c 	.word	0x08011a9c
 800b4e4:	08011ab4 	.word	0x08011ab4
 800b4e8:	08011ae0 	.word	0x08011ae0

0800b4ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b4ec:	b5b0      	push	{r4, r5, r7, lr}
 800b4ee:	b08a      	sub	sp, #40	@ 0x28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d106      	bne.n	800b508 <tcp_output+0x1c>
 800b4fa:	4b8a      	ldr	r3, [pc, #552]	@ (800b724 <tcp_output+0x238>)
 800b4fc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b500:	4989      	ldr	r1, [pc, #548]	@ (800b728 <tcp_output+0x23c>)
 800b502:	488a      	ldr	r0, [pc, #552]	@ (800b72c <tcp_output+0x240>)
 800b504:	f003 fdf0 	bl	800f0e8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	7d1b      	ldrb	r3, [r3, #20]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d106      	bne.n	800b51e <tcp_output+0x32>
 800b510:	4b84      	ldr	r3, [pc, #528]	@ (800b724 <tcp_output+0x238>)
 800b512:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b516:	4986      	ldr	r1, [pc, #536]	@ (800b730 <tcp_output+0x244>)
 800b518:	4884      	ldr	r0, [pc, #528]	@ (800b72c <tcp_output+0x240>)
 800b51a:	f003 fde5 	bl	800f0e8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b51e:	4b85      	ldr	r3, [pc, #532]	@ (800b734 <tcp_output+0x248>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	429a      	cmp	r2, r3
 800b526:	d101      	bne.n	800b52c <tcp_output+0x40>
    return ERR_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	e1ce      	b.n	800b8ca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b538:	4293      	cmp	r3, r2
 800b53a:	bf28      	it	cs
 800b53c:	4613      	movcs	r3, r2
 800b53e:	b29b      	uxth	r3, r3
 800b540:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b546:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10b      	bne.n	800b566 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	8b5b      	ldrh	r3, [r3, #26]
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 81aa 	beq.w	800b8b0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fdcb 	bl	800c0f8 <tcp_send_empty_ack>
 800b562:	4603      	mov	r3, r0
 800b564:	e1b1      	b.n	800b8ca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3304      	adds	r3, #4
 800b56c:	461a      	mov	r2, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7ff fc7e 	bl	800ae70 <tcp_route>
 800b574:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d102      	bne.n	800b582 <tcp_output+0x96>
    return ERR_RTE;
 800b57c:	f06f 0303 	mvn.w	r3, #3
 800b580:	e1a3      	b.n	800b8ca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <tcp_output+0xa4>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d111      	bne.n	800b5b4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <tcp_output+0xb0>
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	3304      	adds	r3, #4
 800b59a:	e000      	b.n	800b59e <tcp_output+0xb2>
 800b59c:	2300      	movs	r3, #0
 800b59e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d102      	bne.n	800b5ac <tcp_output+0xc0>
      return ERR_RTE;
 800b5a6:	f06f 0303 	mvn.w	r3, #3
 800b5aa:	e18e      	b.n	800b8ca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fa f802 	bl	80055c4 <lwip_htonl>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5ca:	8912      	ldrh	r2, [r2, #8]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d227      	bcs.n	800b624 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b5da:	461a      	mov	r2, r3
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d114      	bne.n	800b60c <tcp_output+0x120>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d110      	bne.n	800b60c <tcp_output+0x120>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10b      	bne.n	800b60c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	8b5b      	ldrh	r3, [r3, #26]
 800b610:	f003 0302 	and.w	r3, r3, #2
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 814d 	beq.w	800b8b4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fd6c 	bl	800c0f8 <tcp_send_empty_ack>
 800b620:	4603      	mov	r3, r0
 800b622:	e152      	b.n	800b8ca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b630:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b632:	6a3b      	ldr	r3, [r7, #32]
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 811c 	beq.w	800b872 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b63a:	e002      	b.n	800b642 <tcp_output+0x156>
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	623b      	str	r3, [r7, #32]
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1f8      	bne.n	800b63c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b64a:	e112      	b.n	800b872 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	899b      	ldrh	r3, [r3, #12]
 800b652:	b29b      	uxth	r3, r3
 800b654:	4618      	mov	r0, r3
 800b656:	f7f9 ff9f 	bl	8005598 <lwip_htons>
 800b65a:	4603      	mov	r3, r0
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	f003 0304 	and.w	r3, r3, #4
 800b662:	2b00      	cmp	r3, #0
 800b664:	d006      	beq.n	800b674 <tcp_output+0x188>
 800b666:	4b2f      	ldr	r3, [pc, #188]	@ (800b724 <tcp_output+0x238>)
 800b668:	f240 5236 	movw	r2, #1334	@ 0x536
 800b66c:	4932      	ldr	r1, [pc, #200]	@ (800b738 <tcp_output+0x24c>)
 800b66e:	482f      	ldr	r0, [pc, #188]	@ (800b72c <tcp_output+0x240>)
 800b670:	f003 fd3a 	bl	800f0e8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01f      	beq.n	800b6bc <tcp_output+0x1d0>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	8b5b      	ldrh	r3, [r3, #26]
 800b680:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b684:	2b00      	cmp	r3, #0
 800b686:	d119      	bne.n	800b6bc <tcp_output+0x1d0>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <tcp_output+0x1bc>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d110      	bne.n	800b6bc <tcp_output+0x1d0>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b69e:	891a      	ldrh	r2, [r3, #8]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d209      	bcs.n	800b6bc <tcp_output+0x1d0>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d004      	beq.n	800b6bc <tcp_output+0x1d0>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b6b8:	2b08      	cmp	r3, #8
 800b6ba:	d901      	bls.n	800b6c0 <tcp_output+0x1d4>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e000      	b.n	800b6c2 <tcp_output+0x1d6>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	8b5b      	ldrh	r3, [r3, #26]
 800b6ca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f000 80e4 	beq.w	800b89c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	7d1b      	ldrb	r3, [r3, #20]
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d00d      	beq.n	800b6f8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	899b      	ldrh	r3, [r3, #12]
 800b6e2:	b29c      	uxth	r4, r3
 800b6e4:	2010      	movs	r0, #16
 800b6e6:	f7f9 ff57 	bl	8005598 <lwip_htons>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	4322      	orrs	r2, r4
 800b6f4:	b292      	uxth	r2, r2
 800b6f6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b6fe:	f000 f909 	bl	800b914 <tcp_output_segment>
 800b702:	4603      	mov	r3, r0
 800b704:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d016      	beq.n	800b73c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	8b5b      	ldrh	r3, [r3, #26]
 800b712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b716:	b29a      	uxth	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	835a      	strh	r2, [r3, #26]
      return err;
 800b71c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b720:	e0d3      	b.n	800b8ca <tcp_output+0x3de>
 800b722:	bf00      	nop
 800b724:	080115c4 	.word	0x080115c4
 800b728:	08011b08 	.word	0x08011b08
 800b72c:	08011618 	.word	0x08011618
 800b730:	08011b20 	.word	0x08011b20
 800b734:	2000819c 	.word	0x2000819c
 800b738:	08011b48 	.word	0x08011b48
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	7d1b      	ldrb	r3, [r3, #20]
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d006      	beq.n	800b75a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	8b5b      	ldrh	r3, [r3, #26]
 800b750:	f023 0303 	bic.w	r3, r3, #3
 800b754:	b29a      	uxth	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	4618      	mov	r0, r3
 800b762:	f7f9 ff2f 	bl	80055c4 <lwip_htonl>
 800b766:	4604      	mov	r4, r0
 800b768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76a:	891b      	ldrh	r3, [r3, #8]
 800b76c:	461d      	mov	r5, r3
 800b76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	899b      	ldrh	r3, [r3, #12]
 800b774:	b29b      	uxth	r3, r3
 800b776:	4618      	mov	r0, r3
 800b778:	f7f9 ff0e 	bl	8005598 <lwip_htons>
 800b77c:	4603      	mov	r3, r0
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	f003 0303 	and.w	r3, r3, #3
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <tcp_output+0x2a0>
 800b788:	2301      	movs	r3, #1
 800b78a:	e000      	b.n	800b78e <tcp_output+0x2a2>
 800b78c:	2300      	movs	r3, #0
 800b78e:	442b      	add	r3, r5
 800b790:	4423      	add	r3, r4
 800b792:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	da02      	bge.n	800b7a6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a8:	891b      	ldrh	r3, [r3, #8]
 800b7aa:	461c      	mov	r4, r3
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	899b      	ldrh	r3, [r3, #12]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7f9 feef 	bl	8005598 <lwip_htons>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <tcp_output+0x2de>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e000      	b.n	800b7cc <tcp_output+0x2e0>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	4423      	add	r3, r4
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d049      	beq.n	800b866 <tcp_output+0x37a>
      seg->next = NULL;
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <tcp_output+0x300>
        pcb->unacked = seg;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7e4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e8:	623b      	str	r3, [r7, #32]
 800b7ea:	e03f      	b.n	800b86c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7f9 fee6 	bl	80055c4 <lwip_htonl>
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	6a3b      	ldr	r3, [r7, #32]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4618      	mov	r0, r3
 800b802:	f7f9 fedf 	bl	80055c4 <lwip_htonl>
 800b806:	4603      	mov	r3, r0
 800b808:	1ae3      	subs	r3, r4, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	da24      	bge.n	800b858 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3370      	adds	r3, #112	@ 0x70
 800b812:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b814:	e002      	b.n	800b81c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d011      	beq.n	800b848 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f9 fec9 	bl	80055c4 <lwip_htonl>
 800b832:	4604      	mov	r4, r0
 800b834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f9 fec2 	bl	80055c4 <lwip_htonl>
 800b840:	4603      	mov	r3, r0
 800b842:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b844:	2b00      	cmp	r3, #0
 800b846:	dbe6      	blt.n	800b816 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	e009      	b.n	800b86c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b85c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	623b      	str	r3, [r7, #32]
 800b864:	e002      	b.n	800b86c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b866:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b868:	f7fc fc45 	bl	80080f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b870:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b874:	2b00      	cmp	r3, #0
 800b876:	d012      	beq.n	800b89e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f9 fea0 	bl	80055c4 <lwip_htonl>
 800b884:	4602      	mov	r2, r0
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b88e:	8912      	ldrh	r2, [r2, #8]
 800b890:	4413      	add	r3, r2
  while (seg != NULL &&
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	429a      	cmp	r2, r3
 800b896:	f4bf aed9 	bcs.w	800b64c <tcp_output+0x160>
 800b89a:	e000      	b.n	800b89e <tcp_output+0x3b2>
      break;
 800b89c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d108      	bne.n	800b8b8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800b8ae:	e004      	b.n	800b8ba <tcp_output+0x3ce>
    goto output_done;
 800b8b0:	bf00      	nop
 800b8b2:	e002      	b.n	800b8ba <tcp_output+0x3ce>
    goto output_done;
 800b8b4:	bf00      	nop
 800b8b6:	e000      	b.n	800b8ba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b8b8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	8b5b      	ldrh	r3, [r3, #26]
 800b8be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3728      	adds	r7, #40	@ 0x28
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8d2:	bf00      	nop

0800b8d4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d106      	bne.n	800b8f0 <tcp_output_segment_busy+0x1c>
 800b8e2:	4b09      	ldr	r3, [pc, #36]	@ (800b908 <tcp_output_segment_busy+0x34>)
 800b8e4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800b8e8:	4908      	ldr	r1, [pc, #32]	@ (800b90c <tcp_output_segment_busy+0x38>)
 800b8ea:	4809      	ldr	r0, [pc, #36]	@ (800b910 <tcp_output_segment_busy+0x3c>)
 800b8ec:	f003 fbfc 	bl	800f0e8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	7b9b      	ldrb	r3, [r3, #14]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d001      	beq.n	800b8fe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e000      	b.n	800b900 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3708      	adds	r7, #8
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	080115c4 	.word	0x080115c4
 800b90c:	08011b60 	.word	0x08011b60
 800b910:	08011618 	.word	0x08011618

0800b914 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b914:	b5b0      	push	{r4, r5, r7, lr}
 800b916:	b08c      	sub	sp, #48	@ 0x30
 800b918:	af04      	add	r7, sp, #16
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d106      	bne.n	800b934 <tcp_output_segment+0x20>
 800b926:	4b64      	ldr	r3, [pc, #400]	@ (800bab8 <tcp_output_segment+0x1a4>)
 800b928:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800b92c:	4963      	ldr	r1, [pc, #396]	@ (800babc <tcp_output_segment+0x1a8>)
 800b92e:	4864      	ldr	r0, [pc, #400]	@ (800bac0 <tcp_output_segment+0x1ac>)
 800b930:	f003 fbda 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d106      	bne.n	800b948 <tcp_output_segment+0x34>
 800b93a:	4b5f      	ldr	r3, [pc, #380]	@ (800bab8 <tcp_output_segment+0x1a4>)
 800b93c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800b940:	4960      	ldr	r1, [pc, #384]	@ (800bac4 <tcp_output_segment+0x1b0>)
 800b942:	485f      	ldr	r0, [pc, #380]	@ (800bac0 <tcp_output_segment+0x1ac>)
 800b944:	f003 fbd0 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d106      	bne.n	800b95c <tcp_output_segment+0x48>
 800b94e:	4b5a      	ldr	r3, [pc, #360]	@ (800bab8 <tcp_output_segment+0x1a4>)
 800b950:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800b954:	495c      	ldr	r1, [pc, #368]	@ (800bac8 <tcp_output_segment+0x1b4>)
 800b956:	485a      	ldr	r0, [pc, #360]	@ (800bac0 <tcp_output_segment+0x1ac>)
 800b958:	f003 fbc6 	bl	800f0e8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff ffb9 	bl	800b8d4 <tcp_output_segment_busy>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b968:	2300      	movs	r3, #0
 800b96a:	e0a1      	b.n	800bab0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	68dc      	ldr	r4, [r3, #12]
 800b974:	4610      	mov	r0, r2
 800b976:	f7f9 fe25 	bl	80055c4 <lwip_htonl>
 800b97a:	4603      	mov	r3, r0
 800b97c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68dc      	ldr	r4, [r3, #12]
 800b986:	4610      	mov	r0, r2
 800b988:	f7f9 fe06 	bl	8005598 <lwip_htons>
 800b98c:	4603      	mov	r3, r0
 800b98e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b998:	441a      	add	r2, r3
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	3314      	adds	r3, #20
 800b9a4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	7a9b      	ldrb	r3, [r3, #10]
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d015      	beq.n	800b9de <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800b9be:	f7fc fe91 	bl	80086e4 <tcp_eff_send_mss_netif>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b9c6:	8b7b      	ldrh	r3, [r7, #26]
 800b9c8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f9 fdf9 	bl	80055c4 <lwip_htonl>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	3304      	adds	r3, #4
 800b9dc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	da02      	bge.n	800b9ee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10c      	bne.n	800ba10 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b9f6:	4b35      	ldr	r3, [pc, #212]	@ (800bacc <tcp_output_segment+0x1b8>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7f9 fddd 	bl	80055c4 <lwip_htonl>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	68da      	ldr	r2, [r3, #12]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	8959      	ldrh	r1, [r3, #10]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	8b3a      	ldrh	r2, [r7, #24]
 800ba2a:	1a8a      	subs	r2, r1, r2
 800ba2c:	b292      	uxth	r2, r2
 800ba2e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	8919      	ldrh	r1, [r3, #8]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	8b3a      	ldrh	r2, [r7, #24]
 800ba3c:	1a8a      	subs	r2, r1, r2
 800ba3e:	b292      	uxth	r2, r2
 800ba40:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	68d2      	ldr	r2, [r2, #12]
 800ba4a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	741a      	strb	r2, [r3, #16]
 800ba54:	2200      	movs	r2, #0
 800ba56:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	68da      	ldr	r2, [r3, #12]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	7a9b      	ldrb	r3, [r3, #10]
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <tcp_output_segment+0x158>
 800ba68:	2318      	movs	r3, #24
 800ba6a:	e000      	b.n	800ba6e <tcp_output_segment+0x15a>
 800ba6c:	2314      	movs	r3, #20
 800ba6e:	4413      	add	r3, r2
 800ba70:	69fa      	ldr	r2, [r7, #28]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d006      	beq.n	800ba84 <tcp_output_segment+0x170>
 800ba76:	4b10      	ldr	r3, [pc, #64]	@ (800bab8 <tcp_output_segment+0x1a4>)
 800ba78:	f240 621c 	movw	r2, #1564	@ 0x61c
 800ba7c:	4914      	ldr	r1, [pc, #80]	@ (800bad0 <tcp_output_segment+0x1bc>)
 800ba7e:	4810      	ldr	r0, [pc, #64]	@ (800bac0 <tcp_output_segment+0x1ac>)
 800ba80:	f003 fb32 	bl	800f0e8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6858      	ldr	r0, [r3, #4]
 800ba88:	68b9      	ldr	r1, [r7, #8]
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	1d1c      	adds	r4, r3, #4
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	7add      	ldrb	r5, [r3, #11]
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	7a9b      	ldrb	r3, [r3, #10]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	9202      	str	r2, [sp, #8]
 800ba9a:	2206      	movs	r2, #6
 800ba9c:	9201      	str	r2, [sp, #4]
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	462b      	mov	r3, r5
 800baa2:	4622      	mov	r2, r4
 800baa4:	f002 f9f2 	bl	800de8c <ip4_output_if>
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800baac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3720      	adds	r7, #32
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bdb0      	pop	{r4, r5, r7, pc}
 800bab8:	080115c4 	.word	0x080115c4
 800babc:	08011b88 	.word	0x08011b88
 800bac0:	08011618 	.word	0x08011618
 800bac4:	08011ba8 	.word	0x08011ba8
 800bac8:	08011bc8 	.word	0x08011bc8
 800bacc:	20008150 	.word	0x20008150
 800bad0:	08011bec 	.word	0x08011bec

0800bad4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bad4:	b5b0      	push	{r4, r5, r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d106      	bne.n	800baf0 <tcp_rexmit_rto_prepare+0x1c>
 800bae2:	4b31      	ldr	r3, [pc, #196]	@ (800bba8 <tcp_rexmit_rto_prepare+0xd4>)
 800bae4:	f240 6263 	movw	r2, #1635	@ 0x663
 800bae8:	4930      	ldr	r1, [pc, #192]	@ (800bbac <tcp_rexmit_rto_prepare+0xd8>)
 800baea:	4831      	ldr	r0, [pc, #196]	@ (800bbb0 <tcp_rexmit_rto_prepare+0xdc>)
 800baec:	f003 fafc 	bl	800f0e8 <iprintf>

  if (pcb->unacked == NULL) {
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d102      	bne.n	800bafe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800baf8:	f06f 0305 	mvn.w	r3, #5
 800bafc:	e050      	b.n	800bba0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e00b      	b.n	800bb1e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff fee4 	bl	800b8d4 <tcp_output_segment_busy>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d002      	beq.n	800bb18 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bb12:	f06f 0305 	mvn.w	r3, #5
 800bb16:	e043      	b.n	800bba0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1ef      	bne.n	800bb06 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f7ff fed4 	bl	800b8d4 <tcp_output_segment_busy>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d002      	beq.n	800bb38 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bb32:	f06f 0305 	mvn.w	r3, #5
 800bb36:	e033      	b.n	800bba0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	8b5b      	ldrh	r3, [r3, #26]
 800bb52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7f9 fd2e 	bl	80055c4 <lwip_htonl>
 800bb68:	4604      	mov	r4, r0
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	891b      	ldrh	r3, [r3, #8]
 800bb6e:	461d      	mov	r5, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	899b      	ldrh	r3, [r3, #12]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7f9 fd0d 	bl	8005598 <lwip_htons>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	f003 0303 	and.w	r3, r3, #3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <tcp_rexmit_rto_prepare+0xba>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e000      	b.n	800bb90 <tcp_rexmit_rto_prepare+0xbc>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	442b      	add	r3, r5
 800bb92:	18e2      	adds	r2, r4, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bdb0      	pop	{r4, r5, r7, pc}
 800bba8:	080115c4 	.word	0x080115c4
 800bbac:	08011c00 	.word	0x08011c00
 800bbb0:	08011618 	.word	0x08011618

0800bbb4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <tcp_rexmit_rto_commit+0x1c>
 800bbc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf8 <tcp_rexmit_rto_commit+0x44>)
 800bbc4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800bbc8:	490c      	ldr	r1, [pc, #48]	@ (800bbfc <tcp_rexmit_rto_commit+0x48>)
 800bbca:	480d      	ldr	r0, [pc, #52]	@ (800bc00 <tcp_rexmit_rto_commit+0x4c>)
 800bbcc:	f003 fa8c 	bl	800f0e8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bbd6:	2bff      	cmp	r3, #255	@ 0xff
 800bbd8:	d007      	beq.n	800bbea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff fc7e 	bl	800b4ec <tcp_output>
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	080115c4 	.word	0x080115c4
 800bbfc:	08011c24 	.word	0x08011c24
 800bc00:	08011618 	.word	0x08011618

0800bc04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d106      	bne.n	800bc20 <tcp_rexmit_rto+0x1c>
 800bc12:	4b0a      	ldr	r3, [pc, #40]	@ (800bc3c <tcp_rexmit_rto+0x38>)
 800bc14:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800bc18:	4909      	ldr	r1, [pc, #36]	@ (800bc40 <tcp_rexmit_rto+0x3c>)
 800bc1a:	480a      	ldr	r0, [pc, #40]	@ (800bc44 <tcp_rexmit_rto+0x40>)
 800bc1c:	f003 fa64 	bl	800f0e8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff ff57 	bl	800bad4 <tcp_rexmit_rto_prepare>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d102      	bne.n	800bc32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7ff ffc1 	bl	800bbb4 <tcp_rexmit_rto_commit>
  }
}
 800bc32:	bf00      	nop
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	080115c4 	.word	0x080115c4
 800bc40:	08011c48 	.word	0x08011c48
 800bc44:	08011618 	.word	0x08011618

0800bc48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bc48:	b590      	push	{r4, r7, lr}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <tcp_rexmit+0x1c>
 800bc56:	4b2f      	ldr	r3, [pc, #188]	@ (800bd14 <tcp_rexmit+0xcc>)
 800bc58:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800bc5c:	492e      	ldr	r1, [pc, #184]	@ (800bd18 <tcp_rexmit+0xd0>)
 800bc5e:	482f      	ldr	r0, [pc, #188]	@ (800bd1c <tcp_rexmit+0xd4>)
 800bc60:	f003 fa42 	bl	800f0e8 <iprintf>

  if (pcb->unacked == NULL) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d102      	bne.n	800bc72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bc6c:	f06f 0305 	mvn.w	r3, #5
 800bc70:	e04c      	b.n	800bd0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bc78:	68b8      	ldr	r0, [r7, #8]
 800bc7a:	f7ff fe2b 	bl	800b8d4 <tcp_output_segment_busy>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d002      	beq.n	800bc8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bc84:	f06f 0305 	mvn.w	r3, #5
 800bc88:	e040      	b.n	800bd0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	336c      	adds	r3, #108	@ 0x6c
 800bc96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bc98:	e002      	b.n	800bca0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d011      	beq.n	800bccc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7f9 fc87 	bl	80055c4 <lwip_htonl>
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f9 fc80 	bl	80055c4 <lwip_htonl>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	dbe6      	blt.n	800bc9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	68ba      	ldr	r2, [r7, #8]
 800bcd8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d103      	bne.n	800bcea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bcf0:	2bff      	cmp	r3, #255	@ 0xff
 800bcf2:	d007      	beq.n	800bd04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd90      	pop	{r4, r7, pc}
 800bd14:	080115c4 	.word	0x080115c4
 800bd18:	08011c64 	.word	0x08011c64
 800bd1c:	08011618 	.word	0x08011618

0800bd20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d106      	bne.n	800bd3c <tcp_rexmit_fast+0x1c>
 800bd2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bdd8 <tcp_rexmit_fast+0xb8>)
 800bd30:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800bd34:	4929      	ldr	r1, [pc, #164]	@ (800bddc <tcp_rexmit_fast+0xbc>)
 800bd36:	482a      	ldr	r0, [pc, #168]	@ (800bde0 <tcp_rexmit_fast+0xc0>)
 800bd38:	f003 f9d6 	bl	800f0e8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d045      	beq.n	800bdd0 <tcp_rexmit_fast+0xb0>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	8b5b      	ldrh	r3, [r3, #26]
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d13f      	bne.n	800bdd0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff ff79 	bl	800bc48 <tcp_rexmit>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d139      	bne.n	800bdd0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	bf28      	it	cs
 800bd6c:	4613      	movcs	r3, r2
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	da00      	bge.n	800bd76 <tcp_rexmit_fast+0x56>
 800bd74:	3301      	adds	r3, #1
 800bd76:	105b      	asrs	r3, r3, #1
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bd86:	461a      	mov	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d206      	bcs.n	800bda0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdaa:	4619      	mov	r1, r3
 800bdac:	0049      	lsls	r1, r1, #1
 800bdae:	440b      	add	r3, r1
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	4413      	add	r3, r2
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	8b5b      	ldrh	r3, [r3, #26]
 800bdc0:	f043 0304 	orr.w	r3, r3, #4
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	080115c4 	.word	0x080115c4
 800bddc:	08011c7c 	.word	0x08011c7c
 800bde0:	08011618 	.word	0x08011618

0800bde4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	607b      	str	r3, [r7, #4]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	817b      	strh	r3, [r7, #10]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bdf6:	897a      	ldrh	r2, [r7, #10]
 800bdf8:	893b      	ldrh	r3, [r7, #8]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	3314      	adds	r3, #20
 800be00:	b29b      	uxth	r3, r3
 800be02:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800be06:	4619      	mov	r1, r3
 800be08:	2022      	movs	r0, #34	@ 0x22
 800be0a:	f7fa fc1b 	bl	8006644 <pbuf_alloc>
 800be0e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d04d      	beq.n	800beb2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800be16:	897b      	ldrh	r3, [r7, #10]
 800be18:	3313      	adds	r3, #19
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	8952      	ldrh	r2, [r2, #10]
 800be1e:	4293      	cmp	r3, r2
 800be20:	db06      	blt.n	800be30 <tcp_output_alloc_header_common+0x4c>
 800be22:	4b26      	ldr	r3, [pc, #152]	@ (800bebc <tcp_output_alloc_header_common+0xd8>)
 800be24:	f240 7223 	movw	r2, #1827	@ 0x723
 800be28:	4925      	ldr	r1, [pc, #148]	@ (800bec0 <tcp_output_alloc_header_common+0xdc>)
 800be2a:	4826      	ldr	r0, [pc, #152]	@ (800bec4 <tcp_output_alloc_header_common+0xe0>)
 800be2c:	f003 f95c 	bl	800f0e8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800be36:	8c3b      	ldrh	r3, [r7, #32]
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f9 fbad 	bl	8005598 <lwip_htons>
 800be3e:	4603      	mov	r3, r0
 800be40:	461a      	mov	r2, r3
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800be46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f9 fba5 	bl	8005598 <lwip_htons>
 800be4e:	4603      	mov	r3, r0
 800be50:	461a      	mov	r2, r3
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f7f9 fbb1 	bl	80055c4 <lwip_htonl>
 800be62:	4602      	mov	r2, r0
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800be68:	897b      	ldrh	r3, [r7, #10]
 800be6a:	089b      	lsrs	r3, r3, #2
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	3305      	adds	r3, #5
 800be70:	b29b      	uxth	r3, r3
 800be72:	031b      	lsls	r3, r3, #12
 800be74:	b29a      	uxth	r2, r3
 800be76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	4313      	orrs	r3, r2
 800be7e:	b29b      	uxth	r3, r3
 800be80:	4618      	mov	r0, r3
 800be82:	f7f9 fb89 	bl	8005598 <lwip_htons>
 800be86:	4603      	mov	r3, r0
 800be88:	461a      	mov	r2, r3
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800be8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800be90:	4618      	mov	r0, r3
 800be92:	f7f9 fb81 	bl	8005598 <lwip_htons>
 800be96:	4603      	mov	r3, r0
 800be98:	461a      	mov	r2, r3
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2200      	movs	r2, #0
 800bea2:	741a      	strb	r2, [r3, #16]
 800bea4:	2200      	movs	r2, #0
 800bea6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2200      	movs	r2, #0
 800beac:	749a      	strb	r2, [r3, #18]
 800beae:	2200      	movs	r2, #0
 800beb0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800beb2:	697b      	ldr	r3, [r7, #20]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	080115c4 	.word	0x080115c4
 800bec0:	08011c9c 	.word	0x08011c9c
 800bec4:	08011618 	.word	0x08011618

0800bec8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800bec8:	b5b0      	push	{r4, r5, r7, lr}
 800beca:	b08a      	sub	sp, #40	@ 0x28
 800becc:	af04      	add	r7, sp, #16
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	607b      	str	r3, [r7, #4]
 800bed2:	460b      	mov	r3, r1
 800bed4:	817b      	strh	r3, [r7, #10]
 800bed6:	4613      	mov	r3, r2
 800bed8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d106      	bne.n	800beee <tcp_output_alloc_header+0x26>
 800bee0:	4b15      	ldr	r3, [pc, #84]	@ (800bf38 <tcp_output_alloc_header+0x70>)
 800bee2:	f240 7242 	movw	r2, #1858	@ 0x742
 800bee6:	4915      	ldr	r1, [pc, #84]	@ (800bf3c <tcp_output_alloc_header+0x74>)
 800bee8:	4815      	ldr	r0, [pc, #84]	@ (800bf40 <tcp_output_alloc_header+0x78>)
 800beea:	f003 f8fd 	bl	800f0e8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	8adb      	ldrh	r3, [r3, #22]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	8b12      	ldrh	r2, [r2, #24]
 800befa:	68f9      	ldr	r1, [r7, #12]
 800befc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800befe:	893d      	ldrh	r5, [r7, #8]
 800bf00:	897c      	ldrh	r4, [r7, #10]
 800bf02:	9103      	str	r1, [sp, #12]
 800bf04:	2110      	movs	r1, #16
 800bf06:	9102      	str	r1, [sp, #8]
 800bf08:	9201      	str	r2, [sp, #4]
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	462a      	mov	r2, r5
 800bf10:	4621      	mov	r1, r4
 800bf12:	f7ff ff67 	bl	800bde4 <tcp_output_alloc_header_common>
 800bf16:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d006      	beq.n	800bf2c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800bf26:	441a      	add	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800bf2c:	697b      	ldr	r3, [r7, #20]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bdb0      	pop	{r4, r5, r7, pc}
 800bf36:	bf00      	nop
 800bf38:	080115c4 	.word	0x080115c4
 800bf3c:	08011ccc 	.word	0x08011ccc
 800bf40:	08011618 	.word	0x08011618

0800bf44 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	4611      	mov	r1, r2
 800bf50:	461a      	mov	r2, r3
 800bf52:	460b      	mov	r3, r1
 800bf54:	71fb      	strb	r3, [r7, #7]
 800bf56:	4613      	mov	r3, r2
 800bf58:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d106      	bne.n	800bf72 <tcp_output_fill_options+0x2e>
 800bf64:	4b12      	ldr	r3, [pc, #72]	@ (800bfb0 <tcp_output_fill_options+0x6c>)
 800bf66:	f240 7256 	movw	r2, #1878	@ 0x756
 800bf6a:	4912      	ldr	r1, [pc, #72]	@ (800bfb4 <tcp_output_fill_options+0x70>)
 800bf6c:	4812      	ldr	r0, [pc, #72]	@ (800bfb8 <tcp_output_fill_options+0x74>)
 800bf6e:	f003 f8bb 	bl	800f0e8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	3314      	adds	r3, #20
 800bf7c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bf7e:	8bfb      	ldrh	r3, [r7, #30]
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	461a      	mov	r2, r3
 800bf84:	79fb      	ldrb	r3, [r7, #7]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	f003 0304 	and.w	r3, r3, #4
 800bf8c:	4413      	add	r3, r2
 800bf8e:	3314      	adds	r3, #20
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	4413      	add	r3, r2
 800bf94:	697a      	ldr	r2, [r7, #20]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d006      	beq.n	800bfa8 <tcp_output_fill_options+0x64>
 800bf9a:	4b05      	ldr	r3, [pc, #20]	@ (800bfb0 <tcp_output_fill_options+0x6c>)
 800bf9c:	f240 7275 	movw	r2, #1909	@ 0x775
 800bfa0:	4906      	ldr	r1, [pc, #24]	@ (800bfbc <tcp_output_fill_options+0x78>)
 800bfa2:	4805      	ldr	r0, [pc, #20]	@ (800bfb8 <tcp_output_fill_options+0x74>)
 800bfa4:	f003 f8a0 	bl	800f0e8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bfa8:	bf00      	nop
 800bfaa:	3720      	adds	r7, #32
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	080115c4 	.word	0x080115c4
 800bfb4:	08011cf4 	.word	0x08011cf4
 800bfb8:	08011618 	.word	0x08011618
 800bfbc:	08011bec 	.word	0x08011bec

0800bfc0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08a      	sub	sp, #40	@ 0x28
 800bfc4:	af04      	add	r7, sp, #16
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
 800bfcc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d106      	bne.n	800bfe2 <tcp_output_control_segment+0x22>
 800bfd4:	4b1c      	ldr	r3, [pc, #112]	@ (800c048 <tcp_output_control_segment+0x88>)
 800bfd6:	f240 7287 	movw	r2, #1927	@ 0x787
 800bfda:	491c      	ldr	r1, [pc, #112]	@ (800c04c <tcp_output_control_segment+0x8c>)
 800bfdc:	481c      	ldr	r0, [pc, #112]	@ (800c050 <tcp_output_control_segment+0x90>)
 800bfde:	f003 f883 	bl	800f0e8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	6879      	ldr	r1, [r7, #4]
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f7fe ff42 	bl	800ae70 <tcp_route>
 800bfec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d102      	bne.n	800bffa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800bff4:	23fc      	movs	r3, #252	@ 0xfc
 800bff6:	75fb      	strb	r3, [r7, #23]
 800bff8:	e01c      	b.n	800c034 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d006      	beq.n	800c00e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	7adb      	ldrb	r3, [r3, #11]
 800c004:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	7a9b      	ldrb	r3, [r3, #10]
 800c00a:	757b      	strb	r3, [r7, #21]
 800c00c:	e003      	b.n	800c016 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c00e:	23ff      	movs	r3, #255	@ 0xff
 800c010:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c016:	7dba      	ldrb	r2, [r7, #22]
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	9302      	str	r3, [sp, #8]
 800c01c:	2306      	movs	r3, #6
 800c01e:	9301      	str	r3, [sp, #4]
 800c020:	7d7b      	ldrb	r3, [r7, #21]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	4613      	mov	r3, r2
 800c026:	683a      	ldr	r2, [r7, #0]
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	68b8      	ldr	r0, [r7, #8]
 800c02c:	f001 ff2e 	bl	800de8c <ip4_output_if>
 800c030:	4603      	mov	r3, r0
 800c032:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c034:	68b8      	ldr	r0, [r7, #8]
 800c036:	f7fa fde9 	bl	8006c0c <pbuf_free>
  return err;
 800c03a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3718      	adds	r7, #24
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	080115c4 	.word	0x080115c4
 800c04c:	08011d1c 	.word	0x08011d1c
 800c050:	08011618 	.word	0x08011618

0800c054 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c054:	b590      	push	{r4, r7, lr}
 800c056:	b08b      	sub	sp, #44	@ 0x2c
 800c058:	af04      	add	r7, sp, #16
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d106      	bne.n	800c076 <tcp_rst+0x22>
 800c068:	4b1f      	ldr	r3, [pc, #124]	@ (800c0e8 <tcp_rst+0x94>)
 800c06a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c06e:	491f      	ldr	r1, [pc, #124]	@ (800c0ec <tcp_rst+0x98>)
 800c070:	481f      	ldr	r0, [pc, #124]	@ (800c0f0 <tcp_rst+0x9c>)
 800c072:	f003 f839 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d106      	bne.n	800c08a <tcp_rst+0x36>
 800c07c:	4b1a      	ldr	r3, [pc, #104]	@ (800c0e8 <tcp_rst+0x94>)
 800c07e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c082:	491c      	ldr	r1, [pc, #112]	@ (800c0f4 <tcp_rst+0xa0>)
 800c084:	481a      	ldr	r0, [pc, #104]	@ (800c0f0 <tcp_rst+0x9c>)
 800c086:	f003 f82f 	bl	800f0e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c08a:	2300      	movs	r3, #0
 800c08c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c08e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c092:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	b29c      	uxth	r4, r3
 800c098:	68b8      	ldr	r0, [r7, #8]
 800c09a:	f7f9 fa93 	bl	80055c4 <lwip_htonl>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	8abb      	ldrh	r3, [r7, #20]
 800c0a2:	9303      	str	r3, [sp, #12]
 800c0a4:	2314      	movs	r3, #20
 800c0a6:	9302      	str	r3, [sp, #8]
 800c0a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7ff fe94 	bl	800bde4 <tcp_output_alloc_header_common>
 800c0bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00c      	beq.n	800c0de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	6939      	ldr	r1, [r7, #16]
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f7ff ff3a 	bl	800bf44 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	6939      	ldr	r1, [r7, #16]
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f7ff ff72 	bl	800bfc0 <tcp_output_control_segment>
 800c0dc:	e000      	b.n	800c0e0 <tcp_rst+0x8c>
    return;
 800c0de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c0e0:	371c      	adds	r7, #28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd90      	pop	{r4, r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	080115c4 	.word	0x080115c4
 800c0ec:	08011d48 	.word	0x08011d48
 800c0f0:	08011618 	.word	0x08011618
 800c0f4:	08011d64 	.word	0x08011d64

0800c0f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c0f8:	b590      	push	{r4, r7, lr}
 800c0fa:	b087      	sub	sp, #28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <tcp_send_empty_ack+0x24>
 800c10e:	4b28      	ldr	r3, [pc, #160]	@ (800c1b0 <tcp_send_empty_ack+0xb8>)
 800c110:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c114:	4927      	ldr	r1, [pc, #156]	@ (800c1b4 <tcp_send_empty_ack+0xbc>)
 800c116:	4828      	ldr	r0, [pc, #160]	@ (800c1b8 <tcp_send_empty_ack+0xc0>)
 800c118:	f002 ffe6 	bl	800f0e8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	b2db      	uxtb	r3, r3
 800c122:	f003 0304 	and.w	r3, r3, #4
 800c126:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c128:	7d7b      	ldrb	r3, [r7, #21]
 800c12a:	b29c      	uxth	r4, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c130:	4618      	mov	r0, r3
 800c132:	f7f9 fa47 	bl	80055c4 <lwip_htonl>
 800c136:	4603      	mov	r3, r0
 800c138:	2200      	movs	r2, #0
 800c13a:	4621      	mov	r1, r4
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7ff fec3 	bl	800bec8 <tcp_output_alloc_header>
 800c142:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	8b5b      	ldrh	r3, [r3, #26]
 800c14e:	f043 0303 	orr.w	r3, r3, #3
 800c152:	b29a      	uxth	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c158:	f06f 0301 	mvn.w	r3, #1
 800c15c:	e023      	b.n	800c1a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c15e:	7dbb      	ldrb	r3, [r7, #22]
 800c160:	7dfa      	ldrb	r2, [r7, #23]
 800c162:	6939      	ldr	r1, [r7, #16]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff feed 	bl	800bf44 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	3304      	adds	r3, #4
 800c170:	6939      	ldr	r1, [r7, #16]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff ff24 	bl	800bfc0 <tcp_output_control_segment>
 800c178:	4603      	mov	r3, r0
 800c17a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d007      	beq.n	800c194 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	8b5b      	ldrh	r3, [r3, #26]
 800c188:	f043 0303 	orr.w	r3, r3, #3
 800c18c:	b29a      	uxth	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	835a      	strh	r2, [r3, #26]
 800c192:	e006      	b.n	800c1a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	8b5b      	ldrh	r3, [r3, #26]
 800c198:	f023 0303 	bic.w	r3, r3, #3
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c1a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	371c      	adds	r7, #28
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd90      	pop	{r4, r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	080115c4 	.word	0x080115c4
 800c1b4:	08011d80 	.word	0x08011d80
 800c1b8:	08011618 	.word	0x08011618

0800c1bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c1bc:	b590      	push	{r4, r7, lr}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d106      	bne.n	800c1dc <tcp_keepalive+0x20>
 800c1ce:	4b18      	ldr	r3, [pc, #96]	@ (800c230 <tcp_keepalive+0x74>)
 800c1d0:	f640 0224 	movw	r2, #2084	@ 0x824
 800c1d4:	4917      	ldr	r1, [pc, #92]	@ (800c234 <tcp_keepalive+0x78>)
 800c1d6:	4818      	ldr	r0, [pc, #96]	@ (800c238 <tcp_keepalive+0x7c>)
 800c1d8:	f002 ff86 	bl	800f0e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
 800c1de:	b29c      	uxth	r4, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7f9 f9ec 	bl	80055c4 <lwip_htonl>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff fe68 	bl	800bec8 <tcp_output_alloc_header>
 800c1f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d102      	bne.n	800c206 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c204:	e010      	b.n	800c228 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c206:	7dfb      	ldrb	r3, [r7, #23]
 800c208:	2200      	movs	r2, #0
 800c20a:	6939      	ldr	r1, [r7, #16]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff fe99 	bl	800bf44 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3304      	adds	r3, #4
 800c218:	6939      	ldr	r1, [r7, #16]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f7ff fed0 	bl	800bfc0 <tcp_output_control_segment>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c224:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	371c      	adds	r7, #28
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd90      	pop	{r4, r7, pc}
 800c230:	080115c4 	.word	0x080115c4
 800c234:	08011da0 	.word	0x08011da0
 800c238:	08011618 	.word	0x08011618

0800c23c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c23c:	b590      	push	{r4, r7, lr}
 800c23e:	b08b      	sub	sp, #44	@ 0x2c
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c244:	2300      	movs	r3, #0
 800c246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d106      	bne.n	800c25e <tcp_zero_window_probe+0x22>
 800c250:	4b4c      	ldr	r3, [pc, #304]	@ (800c384 <tcp_zero_window_probe+0x148>)
 800c252:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c256:	494c      	ldr	r1, [pc, #304]	@ (800c388 <tcp_zero_window_probe+0x14c>)
 800c258:	484c      	ldr	r0, [pc, #304]	@ (800c38c <tcp_zero_window_probe+0x150>)
 800c25a:	f002 ff45 	bl	800f0e8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c262:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c264:	6a3b      	ldr	r3, [r7, #32]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d101      	bne.n	800c26e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	e086      	b.n	800c37c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c274:	2bff      	cmp	r3, #255	@ 0xff
 800c276:	d007      	beq.n	800c288 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c27e:	3301      	adds	r3, #1
 800c280:	b2da      	uxtb	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c288:	6a3b      	ldr	r3, [r7, #32]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	899b      	ldrh	r3, [r3, #12]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	4618      	mov	r0, r3
 800c292:	f7f9 f981 	bl	8005598 <lwip_htons>
 800c296:	4603      	mov	r3, r0
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 0301 	and.w	r3, r3, #1
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d005      	beq.n	800c2ae <tcp_zero_window_probe+0x72>
 800c2a2:	6a3b      	ldr	r3, [r7, #32]
 800c2a4:	891b      	ldrh	r3, [r3, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <tcp_zero_window_probe+0x72>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <tcp_zero_window_probe+0x74>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c2b2:	7ffb      	ldrb	r3, [r7, #31]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	bf0c      	ite	eq
 800c2b8:	2301      	moveq	r3, #1
 800c2ba:	2300      	movne	r3, #0
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2c4:	b299      	uxth	r1, r3
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	8bba      	ldrh	r2, [r7, #28]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f7ff fdfa 	bl	800bec8 <tcp_output_alloc_header>
 800c2d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c2dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c2e0:	e04c      	b.n	800c37c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c2e8:	7ffb      	ldrb	r3, [r7, #31]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d011      	beq.n	800c312 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	899b      	ldrh	r3, [r3, #12]
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	b21b      	sxth	r3, r3
 800c2f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c2fa:	b21c      	sxth	r4, r3
 800c2fc:	2011      	movs	r0, #17
 800c2fe:	f7f9 f94b 	bl	8005598 <lwip_htons>
 800c302:	4603      	mov	r3, r0
 800c304:	b21b      	sxth	r3, r3
 800c306:	4323      	orrs	r3, r4
 800c308:	b21b      	sxth	r3, r3
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	819a      	strh	r2, [r3, #12]
 800c310:	e010      	b.n	800c334 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	3314      	adds	r3, #20
 800c318:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	6858      	ldr	r0, [r3, #4]
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	891a      	ldrh	r2, [r3, #8]
 800c324:	6a3b      	ldr	r3, [r7, #32]
 800c326:	891b      	ldrh	r3, [r3, #8]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	2201      	movs	r2, #1
 800c32e:	6939      	ldr	r1, [r7, #16]
 800c330:	f7fa fe56 	bl	8006fe0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7f9 f942 	bl	80055c4 <lwip_htonl>
 800c340:	4603      	mov	r3, r0
 800c342:	3301      	adds	r3, #1
 800c344:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	da02      	bge.n	800c358 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c35c:	2200      	movs	r2, #0
 800c35e:	69b9      	ldr	r1, [r7, #24]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7ff fdef 	bl	800bf44 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3304      	adds	r3, #4
 800c36c:	69b9      	ldr	r1, [r7, #24]
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff fe26 	bl	800bfc0 <tcp_output_control_segment>
 800c374:	4603      	mov	r3, r0
 800c376:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c378:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	372c      	adds	r7, #44	@ 0x2c
 800c380:	46bd      	mov	sp, r7
 800c382:	bd90      	pop	{r4, r7, pc}
 800c384:	080115c4 	.word	0x080115c4
 800c388:	08011dbc 	.word	0x08011dbc
 800c38c:	08011618 	.word	0x08011618

0800c390 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c398:	f7fa ff10 	bl	80071bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c39c:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c8 <tcpip_tcp_timer+0x38>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d103      	bne.n	800c3ac <tcpip_tcp_timer+0x1c>
 800c3a4:	4b09      	ldr	r3, [pc, #36]	@ (800c3cc <tcpip_tcp_timer+0x3c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d005      	beq.n	800c3b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4908      	ldr	r1, [pc, #32]	@ (800c3d0 <tcpip_tcp_timer+0x40>)
 800c3b0:	20fa      	movs	r0, #250	@ 0xfa
 800c3b2:	f000 f8f3 	bl	800c59c <sys_timeout>
 800c3b6:	e003      	b.n	800c3c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c3b8:	4b06      	ldr	r3, [pc, #24]	@ (800c3d4 <tcpip_tcp_timer+0x44>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	601a      	str	r2, [r3, #0]
  }
}
 800c3be:	bf00      	nop
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	2000815c 	.word	0x2000815c
 800c3cc:	20008160 	.word	0x20008160
 800c3d0:	0800c391 	.word	0x0800c391
 800c3d4:	200081a8 	.word	0x200081a8

0800c3d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c408 <tcp_timer_needed+0x30>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10f      	bne.n	800c404 <tcp_timer_needed+0x2c>
 800c3e4:	4b09      	ldr	r3, [pc, #36]	@ (800c40c <tcp_timer_needed+0x34>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d103      	bne.n	800c3f4 <tcp_timer_needed+0x1c>
 800c3ec:	4b08      	ldr	r3, [pc, #32]	@ (800c410 <tcp_timer_needed+0x38>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d007      	beq.n	800c404 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c3f4:	4b04      	ldr	r3, [pc, #16]	@ (800c408 <tcp_timer_needed+0x30>)
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	4905      	ldr	r1, [pc, #20]	@ (800c414 <tcp_timer_needed+0x3c>)
 800c3fe:	20fa      	movs	r0, #250	@ 0xfa
 800c400:	f000 f8cc 	bl	800c59c <sys_timeout>
  }
}
 800c404:	bf00      	nop
 800c406:	bd80      	pop	{r7, pc}
 800c408:	200081a8 	.word	0x200081a8
 800c40c:	2000815c 	.word	0x2000815c
 800c410:	20008160 	.word	0x20008160
 800c414:	0800c391 	.word	0x0800c391

0800c418 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c424:	2006      	movs	r0, #6
 800c426:	f7f9 fd2b 	bl	8005e80 <memp_malloc>
 800c42a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d109      	bne.n	800c446 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d151      	bne.n	800c4dc <sys_timeout_abs+0xc4>
 800c438:	4b2a      	ldr	r3, [pc, #168]	@ (800c4e4 <sys_timeout_abs+0xcc>)
 800c43a:	22be      	movs	r2, #190	@ 0xbe
 800c43c:	492a      	ldr	r1, [pc, #168]	@ (800c4e8 <sys_timeout_abs+0xd0>)
 800c43e:	482b      	ldr	r0, [pc, #172]	@ (800c4ec <sys_timeout_abs+0xd4>)
 800c440:	f002 fe52 	bl	800f0e8 <iprintf>
    return;
 800c444:	e04a      	b.n	800c4dc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c45e:	4b24      	ldr	r3, [pc, #144]	@ (800c4f0 <sys_timeout_abs+0xd8>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d103      	bne.n	800c46e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c466:	4a22      	ldr	r2, [pc, #136]	@ (800c4f0 <sys_timeout_abs+0xd8>)
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	6013      	str	r3, [r2, #0]
    return;
 800c46c:	e037      	b.n	800c4de <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	685a      	ldr	r2, [r3, #4]
 800c472:	4b1f      	ldr	r3, [pc, #124]	@ (800c4f0 <sys_timeout_abs+0xd8>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	0fdb      	lsrs	r3, r3, #31
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	b2db      	uxtb	r3, r3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d007      	beq.n	800c496 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c486:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f0 <sys_timeout_abs+0xd8>)
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c48e:	4a18      	ldr	r2, [pc, #96]	@ (800c4f0 <sys_timeout_abs+0xd8>)
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	6013      	str	r3, [r2, #0]
 800c494:	e023      	b.n	800c4de <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c496:	4b16      	ldr	r3, [pc, #88]	@ (800c4f0 <sys_timeout_abs+0xd8>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	e01a      	b.n	800c4d4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <sys_timeout_abs+0xa6>
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	685a      	ldr	r2, [r3, #4]
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	0fdb      	lsrs	r3, r3, #31
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d007      	beq.n	800c4ce <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	693a      	ldr	r2, [r7, #16]
 800c4ca:	601a      	str	r2, [r3, #0]
        break;
 800c4cc:	e007      	b.n	800c4de <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	617b      	str	r3, [r7, #20]
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e1      	bne.n	800c49e <sys_timeout_abs+0x86>
 800c4da:	e000      	b.n	800c4de <sys_timeout_abs+0xc6>
    return;
 800c4dc:	bf00      	nop
      }
    }
  }
}
 800c4de:	3718      	adds	r7, #24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	08011de0 	.word	0x08011de0
 800c4e8:	08011e14 	.word	0x08011e14
 800c4ec:	08011e54 	.word	0x08011e54
 800c4f0:	200081a0 	.word	0x200081a0

0800c4f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	4798      	blx	r3

  now = sys_now();
 800c506:	f7f8 fe7d 	bl	8005204 <sys_now>
 800c50a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	4b0f      	ldr	r3, [pc, #60]	@ (800c550 <lwip_cyclic_timer+0x5c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4413      	add	r3, r2
 800c516:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	1ad3      	subs	r3, r2, r3
 800c51e:	0fdb      	lsrs	r3, r3, #31
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	b2db      	uxtb	r3, r3
 800c526:	2b00      	cmp	r3, #0
 800c528:	d009      	beq.n	800c53e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	4413      	add	r3, r2
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	4907      	ldr	r1, [pc, #28]	@ (800c554 <lwip_cyclic_timer+0x60>)
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff ff6e 	bl	800c418 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c53c:	e004      	b.n	800c548 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	4904      	ldr	r1, [pc, #16]	@ (800c554 <lwip_cyclic_timer+0x60>)
 800c542:	68f8      	ldr	r0, [r7, #12]
 800c544:	f7ff ff68 	bl	800c418 <sys_timeout_abs>
}
 800c548:	bf00      	nop
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	200081a4 	.word	0x200081a4
 800c554:	0800c4f5 	.word	0x0800c4f5

0800c558 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c55e:	2301      	movs	r3, #1
 800c560:	607b      	str	r3, [r7, #4]
 800c562:	e00e      	b.n	800c582 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c564:	4a0b      	ldr	r2, [pc, #44]	@ (800c594 <sys_timeouts_init+0x3c>)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	4a08      	ldr	r2, [pc, #32]	@ (800c594 <sys_timeouts_init+0x3c>)
 800c572:	4413      	add	r3, r2
 800c574:	461a      	mov	r2, r3
 800c576:	4908      	ldr	r1, [pc, #32]	@ (800c598 <sys_timeouts_init+0x40>)
 800c578:	f000 f810 	bl	800c59c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	3301      	adds	r3, #1
 800c580:	607b      	str	r3, [r7, #4]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2b02      	cmp	r3, #2
 800c586:	d9ed      	bls.n	800c564 <sys_timeouts_init+0xc>
  }
}
 800c588:	bf00      	nop
 800c58a:	bf00      	nop
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	080129cc 	.word	0x080129cc
 800c598:	0800c4f5 	.word	0x0800c4f5

0800c59c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5ae:	d306      	bcc.n	800c5be <sys_timeout+0x22>
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5dc <sys_timeout+0x40>)
 800c5b2:	f240 1229 	movw	r2, #297	@ 0x129
 800c5b6:	490a      	ldr	r1, [pc, #40]	@ (800c5e0 <sys_timeout+0x44>)
 800c5b8:	480a      	ldr	r0, [pc, #40]	@ (800c5e4 <sys_timeout+0x48>)
 800c5ba:	f002 fd95 	bl	800f0e8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c5be:	f7f8 fe21 	bl	8005204 <sys_now>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	68b9      	ldr	r1, [r7, #8]
 800c5ce:	6978      	ldr	r0, [r7, #20]
 800c5d0:	f7ff ff22 	bl	800c418 <sys_timeout_abs>
#endif
}
 800c5d4:	bf00      	nop
 800c5d6:	3718      	adds	r7, #24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	08011de0 	.word	0x08011de0
 800c5e0:	08011e7c 	.word	0x08011e7c
 800c5e4:	08011e54 	.word	0x08011e54

0800c5e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c5ec:	f002 fc7c 	bl	800eee8 <rand>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	4b01      	ldr	r3, [pc, #4]	@ (800c608 <udp_init+0x20>)
 800c602:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c604:	bf00      	nop
 800c606:	bd80      	pop	{r7, pc}
 800c608:	20000028 	.word	0x20000028

0800c60c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	60b9      	str	r1, [r7, #8]
 800c616:	4613      	mov	r3, r2
 800c618:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d105      	bne.n	800c62c <udp_input_local_match+0x20>
 800c620:	4b27      	ldr	r3, [pc, #156]	@ (800c6c0 <udp_input_local_match+0xb4>)
 800c622:	2287      	movs	r2, #135	@ 0x87
 800c624:	4927      	ldr	r1, [pc, #156]	@ (800c6c4 <udp_input_local_match+0xb8>)
 800c626:	4828      	ldr	r0, [pc, #160]	@ (800c6c8 <udp_input_local_match+0xbc>)
 800c628:	f002 fd5e 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d105      	bne.n	800c63e <udp_input_local_match+0x32>
 800c632:	4b23      	ldr	r3, [pc, #140]	@ (800c6c0 <udp_input_local_match+0xb4>)
 800c634:	2288      	movs	r2, #136	@ 0x88
 800c636:	4925      	ldr	r1, [pc, #148]	@ (800c6cc <udp_input_local_match+0xc0>)
 800c638:	4823      	ldr	r0, [pc, #140]	@ (800c6c8 <udp_input_local_match+0xbc>)
 800c63a:	f002 fd55 	bl	800f0e8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	7a1b      	ldrb	r3, [r3, #8]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00b      	beq.n	800c65e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	7a1a      	ldrb	r2, [r3, #8]
 800c64a:	4b21      	ldr	r3, [pc, #132]	@ (800c6d0 <udp_input_local_match+0xc4>)
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c652:	3301      	adds	r3, #1
 800c654:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c656:	429a      	cmp	r2, r3
 800c658:	d001      	beq.n	800c65e <udp_input_local_match+0x52>
    return 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	e02b      	b.n	800c6b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d018      	beq.n	800c696 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d013      	beq.n	800c692 <udp_input_local_match+0x86>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00f      	beq.n	800c692 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c672:	4b17      	ldr	r3, [pc, #92]	@ (800c6d0 <udp_input_local_match+0xc4>)
 800c674:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c676:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c67a:	d00a      	beq.n	800c692 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681a      	ldr	r2, [r3, #0]
 800c680:	4b13      	ldr	r3, [pc, #76]	@ (800c6d0 <udp_input_local_match+0xc4>)
 800c682:	695b      	ldr	r3, [r3, #20]
 800c684:	405a      	eors	r2, r3
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	3308      	adds	r3, #8
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d110      	bne.n	800c6b4 <udp_input_local_match+0xa8>
          return 1;
 800c692:	2301      	movs	r3, #1
 800c694:	e00f      	b.n	800c6b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d009      	beq.n	800c6b0 <udp_input_local_match+0xa4>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <udp_input_local_match+0xa4>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	4b09      	ldr	r3, [pc, #36]	@ (800c6d0 <udp_input_local_match+0xc4>)
 800c6aa:	695b      	ldr	r3, [r3, #20]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d101      	bne.n	800c6b4 <udp_input_local_match+0xa8>
        return 1;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e000      	b.n	800c6b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop
 800c6c0:	08011ec8 	.word	0x08011ec8
 800c6c4:	08011ef8 	.word	0x08011ef8
 800c6c8:	08011f1c 	.word	0x08011f1c
 800c6cc:	08011f44 	.word	0x08011f44
 800c6d0:	20005234 	.word	0x20005234

0800c6d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c6d4:	b590      	push	{r4, r7, lr}
 800c6d6:	b08d      	sub	sp, #52	@ 0x34
 800c6d8:	af02      	add	r7, sp, #8
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d105      	bne.n	800c6f4 <udp_input+0x20>
 800c6e8:	4b7c      	ldr	r3, [pc, #496]	@ (800c8dc <udp_input+0x208>)
 800c6ea:	22cf      	movs	r2, #207	@ 0xcf
 800c6ec:	497c      	ldr	r1, [pc, #496]	@ (800c8e0 <udp_input+0x20c>)
 800c6ee:	487d      	ldr	r0, [pc, #500]	@ (800c8e4 <udp_input+0x210>)
 800c6f0:	f002 fcfa 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d105      	bne.n	800c706 <udp_input+0x32>
 800c6fa:	4b78      	ldr	r3, [pc, #480]	@ (800c8dc <udp_input+0x208>)
 800c6fc:	22d0      	movs	r2, #208	@ 0xd0
 800c6fe:	497a      	ldr	r1, [pc, #488]	@ (800c8e8 <udp_input+0x214>)
 800c700:	4878      	ldr	r0, [pc, #480]	@ (800c8e4 <udp_input+0x210>)
 800c702:	f002 fcf1 	bl	800f0e8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	895b      	ldrh	r3, [r3, #10]
 800c70a:	2b07      	cmp	r3, #7
 800c70c:	d803      	bhi.n	800c716 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7fa fa7c 	bl	8006c0c <pbuf_free>
    goto end;
 800c714:	e0de      	b.n	800c8d4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c71c:	4b73      	ldr	r3, [pc, #460]	@ (800c8ec <udp_input+0x218>)
 800c71e:	695b      	ldr	r3, [r3, #20]
 800c720:	4a72      	ldr	r2, [pc, #456]	@ (800c8ec <udp_input+0x218>)
 800c722:	6812      	ldr	r2, [r2, #0]
 800c724:	4611      	mov	r1, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f001 fc88 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800c72c:	4603      	mov	r3, r0
 800c72e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	b29b      	uxth	r3, r3
 800c736:	4618      	mov	r0, r3
 800c738:	f7f8 ff2e 	bl	8005598 <lwip_htons>
 800c73c:	4603      	mov	r3, r0
 800c73e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	885b      	ldrh	r3, [r3, #2]
 800c744:	b29b      	uxth	r3, r3
 800c746:	4618      	mov	r0, r3
 800c748:	f7f8 ff26 	bl	8005598 <lwip_htons>
 800c74c:	4603      	mov	r3, r0
 800c74e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c750:	2300      	movs	r3, #0
 800c752:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c754:	2300      	movs	r3, #0
 800c756:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c758:	2300      	movs	r3, #0
 800c75a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c75c:	4b64      	ldr	r3, [pc, #400]	@ (800c8f0 <udp_input+0x21c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	627b      	str	r3, [r7, #36]	@ 0x24
 800c762:	e054      	b.n	800c80e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	8a5b      	ldrh	r3, [r3, #18]
 800c768:	89fa      	ldrh	r2, [r7, #14]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d14a      	bne.n	800c804 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c76e:	7cfb      	ldrb	r3, [r7, #19]
 800c770:	461a      	mov	r2, r3
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c776:	f7ff ff49 	bl	800c60c <udp_input_local_match>
 800c77a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d041      	beq.n	800c804 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	7c1b      	ldrb	r3, [r3, #16]
 800c784:	f003 0304 	and.w	r3, r3, #4
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d11d      	bne.n	800c7c8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d102      	bne.n	800c798 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	61fb      	str	r3, [r7, #28]
 800c796:	e017      	b.n	800c7c8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c798:	7cfb      	ldrb	r3, [r7, #19]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d014      	beq.n	800c7c8 <udp_input+0xf4>
 800c79e:	4b53      	ldr	r3, [pc, #332]	@ (800c8ec <udp_input+0x218>)
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7a6:	d10f      	bne.n	800c7c8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d008      	beq.n	800c7c8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	3304      	adds	r3, #4
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d101      	bne.n	800c7c8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ca:	8a9b      	ldrh	r3, [r3, #20]
 800c7cc:	8a3a      	ldrh	r2, [r7, #16]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d118      	bne.n	800c804 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d005      	beq.n	800c7e6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7dc:	685a      	ldr	r2, [r3, #4]
 800c7de:	4b43      	ldr	r3, [pc, #268]	@ (800c8ec <udp_input+0x218>)
 800c7e0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d10e      	bne.n	800c804 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c7e6:	6a3b      	ldr	r3, [r7, #32]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d014      	beq.n	800c816 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ee:	68da      	ldr	r2, [r3, #12]
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c7f4:	4b3e      	ldr	r3, [pc, #248]	@ (800c8f0 <udp_input+0x21c>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c7fc:	4a3c      	ldr	r2, [pc, #240]	@ (800c8f0 <udp_input+0x21c>)
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c800:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c802:	e008      	b.n	800c816 <udp_input+0x142>
      }
    }

    prev = pcb;
 800c804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c806:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1a7      	bne.n	800c764 <udp_input+0x90>
 800c814:	e000      	b.n	800c818 <udp_input+0x144>
        break;
 800c816:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d101      	bne.n	800c822 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <udp_input+0x15a>
    for_us = 1;
 800c828:	2301      	movs	r3, #1
 800c82a:	76fb      	strb	r3, [r7, #27]
 800c82c:	e00a      	b.n	800c844 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	3304      	adds	r3, #4
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	4b2d      	ldr	r3, [pc, #180]	@ (800c8ec <udp_input+0x218>)
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	429a      	cmp	r2, r3
 800c83a:	bf0c      	ite	eq
 800c83c:	2301      	moveq	r3, #1
 800c83e:	2300      	movne	r3, #0
 800c840:	b2db      	uxtb	r3, r3
 800c842:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c844:	7efb      	ldrb	r3, [r7, #27]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d041      	beq.n	800c8ce <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c84a:	2108      	movs	r1, #8
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7fa f957 	bl	8006b00 <pbuf_remove_header>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00a      	beq.n	800c86e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c858:	4b20      	ldr	r3, [pc, #128]	@ (800c8dc <udp_input+0x208>)
 800c85a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c85e:	4925      	ldr	r1, [pc, #148]	@ (800c8f4 <udp_input+0x220>)
 800c860:	4820      	ldr	r0, [pc, #128]	@ (800c8e4 <udp_input+0x210>)
 800c862:	f002 fc41 	bl	800f0e8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f7fa f9d0 	bl	8006c0c <pbuf_free>
      goto end;
 800c86c:	e032      	b.n	800c8d4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c870:	2b00      	cmp	r3, #0
 800c872:	d012      	beq.n	800c89a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00a      	beq.n	800c892 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87e:	699c      	ldr	r4, [r3, #24]
 800c880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c882:	69d8      	ldr	r0, [r3, #28]
 800c884:	8a3b      	ldrh	r3, [r7, #16]
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	4b1b      	ldr	r3, [pc, #108]	@ (800c8f8 <udp_input+0x224>)
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c88e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c890:	e021      	b.n	800c8d6 <udp_input+0x202>
        pbuf_free(p);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7fa f9ba 	bl	8006c0c <pbuf_free>
        goto end;
 800c898:	e01c      	b.n	800c8d4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c89a:	7cfb      	ldrb	r3, [r7, #19]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d112      	bne.n	800c8c6 <udp_input+0x1f2>
 800c8a0:	4b12      	ldr	r3, [pc, #72]	@ (800c8ec <udp_input+0x218>)
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c8a8:	2be0      	cmp	r3, #224	@ 0xe0
 800c8aa:	d00c      	beq.n	800c8c6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c8ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c8ec <udp_input+0x218>)
 800c8ae:	899b      	ldrh	r3, [r3, #12]
 800c8b0:	3308      	adds	r3, #8
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	b21b      	sxth	r3, r3
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f7fa f994 	bl	8006be6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c8be:	2103      	movs	r1, #3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 f89b 	bl	800d9fc <icmp_dest_unreach>
      pbuf_free(p);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7fa f9a0 	bl	8006c0c <pbuf_free>
  return;
 800c8cc:	e003      	b.n	800c8d6 <udp_input+0x202>
    pbuf_free(p);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7fa f99c 	bl	8006c0c <pbuf_free>
  return;
 800c8d4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c8d6:	372c      	adds	r7, #44	@ 0x2c
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd90      	pop	{r4, r7, pc}
 800c8dc:	08011ec8 	.word	0x08011ec8
 800c8e0:	08011f6c 	.word	0x08011f6c
 800c8e4:	08011f1c 	.word	0x08011f1c
 800c8e8:	08011f84 	.word	0x08011f84
 800c8ec:	20005234 	.word	0x20005234
 800c8f0:	200081ac 	.word	0x200081ac
 800c8f4:	08011fa0 	.word	0x08011fa0
 800c8f8:	20005244 	.word	0x20005244

0800c8fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d01e      	beq.n	800c94a <udp_netif_ip_addr_changed+0x4e>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d01a      	beq.n	800c94a <udp_netif_ip_addr_changed+0x4e>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d017      	beq.n	800c94a <udp_netif_ip_addr_changed+0x4e>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d013      	beq.n	800c94a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c922:	4b0d      	ldr	r3, [pc, #52]	@ (800c958 <udp_netif_ip_addr_changed+0x5c>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	e00c      	b.n	800c944 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	d103      	bne.n	800c93e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1ef      	bne.n	800c92a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c94a:	bf00      	nop
 800c94c:	3714      	adds	r7, #20
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	200081ac 	.word	0x200081ac

0800c95c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c964:	4915      	ldr	r1, [pc, #84]	@ (800c9bc <etharp_free_entry+0x60>)
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	4613      	mov	r3, r2
 800c96a:	005b      	lsls	r3, r3, #1
 800c96c:	4413      	add	r3, r2
 800c96e:	00db      	lsls	r3, r3, #3
 800c970:	440b      	add	r3, r1
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d013      	beq.n	800c9a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c978:	4910      	ldr	r1, [pc, #64]	@ (800c9bc <etharp_free_entry+0x60>)
 800c97a:	687a      	ldr	r2, [r7, #4]
 800c97c:	4613      	mov	r3, r2
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	4413      	add	r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	440b      	add	r3, r1
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fa f93f 	bl	8006c0c <pbuf_free>
    arp_table[i].q = NULL;
 800c98e:	490b      	ldr	r1, [pc, #44]	@ (800c9bc <etharp_free_entry+0x60>)
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	4613      	mov	r3, r2
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	4413      	add	r3, r2
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	440b      	add	r3, r1
 800c99c:	2200      	movs	r2, #0
 800c99e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c9a0:	4906      	ldr	r1, [pc, #24]	@ (800c9bc <etharp_free_entry+0x60>)
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	4413      	add	r3, r2
 800c9aa:	00db      	lsls	r3, r3, #3
 800c9ac:	440b      	add	r3, r1
 800c9ae:	3314      	adds	r3, #20
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c9b4:	bf00      	nop
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	200081b0 	.word	0x200081b0

0800c9c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	607b      	str	r3, [r7, #4]
 800c9ca:	e096      	b.n	800cafa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c9cc:	494f      	ldr	r1, [pc, #316]	@ (800cb0c <etharp_tmr+0x14c>)
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	4413      	add	r3, r2
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	440b      	add	r3, r1
 800c9da:	3314      	adds	r3, #20
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c9e0:	78fb      	ldrb	r3, [r7, #3]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f000 8086 	beq.w	800caf4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c9e8:	4948      	ldr	r1, [pc, #288]	@ (800cb0c <etharp_tmr+0x14c>)
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	440b      	add	r3, r1
 800c9f6:	3312      	adds	r3, #18
 800c9f8:	881b      	ldrh	r3, [r3, #0]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	b298      	uxth	r0, r3
 800c9fe:	4943      	ldr	r1, [pc, #268]	@ (800cb0c <etharp_tmr+0x14c>)
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	4413      	add	r3, r2
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	440b      	add	r3, r1
 800ca0c:	3312      	adds	r3, #18
 800ca0e:	4602      	mov	r2, r0
 800ca10:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ca12:	493e      	ldr	r1, [pc, #248]	@ (800cb0c <etharp_tmr+0x14c>)
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	4613      	mov	r3, r2
 800ca18:	005b      	lsls	r3, r3, #1
 800ca1a:	4413      	add	r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	440b      	add	r3, r1
 800ca20:	3312      	adds	r3, #18
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ca28:	d215      	bcs.n	800ca56 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ca2a:	4938      	ldr	r1, [pc, #224]	@ (800cb0c <etharp_tmr+0x14c>)
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	005b      	lsls	r3, r3, #1
 800ca32:	4413      	add	r3, r2
 800ca34:	00db      	lsls	r3, r3, #3
 800ca36:	440b      	add	r3, r1
 800ca38:	3314      	adds	r3, #20
 800ca3a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d10e      	bne.n	800ca5e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ca40:	4932      	ldr	r1, [pc, #200]	@ (800cb0c <etharp_tmr+0x14c>)
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	4613      	mov	r3, r2
 800ca46:	005b      	lsls	r3, r3, #1
 800ca48:	4413      	add	r3, r2
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	440b      	add	r3, r1
 800ca4e:	3312      	adds	r3, #18
 800ca50:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ca52:	2b04      	cmp	r3, #4
 800ca54:	d903      	bls.n	800ca5e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff ff80 	bl	800c95c <etharp_free_entry>
 800ca5c:	e04a      	b.n	800caf4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ca5e:	492b      	ldr	r1, [pc, #172]	@ (800cb0c <etharp_tmr+0x14c>)
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	4613      	mov	r3, r2
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	4413      	add	r3, r2
 800ca68:	00db      	lsls	r3, r3, #3
 800ca6a:	440b      	add	r3, r1
 800ca6c:	3314      	adds	r3, #20
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2b03      	cmp	r3, #3
 800ca72:	d10a      	bne.n	800ca8a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ca74:	4925      	ldr	r1, [pc, #148]	@ (800cb0c <etharp_tmr+0x14c>)
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	4413      	add	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	440b      	add	r3, r1
 800ca82:	3314      	adds	r3, #20
 800ca84:	2204      	movs	r2, #4
 800ca86:	701a      	strb	r2, [r3, #0]
 800ca88:	e034      	b.n	800caf4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ca8a:	4920      	ldr	r1, [pc, #128]	@ (800cb0c <etharp_tmr+0x14c>)
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	4413      	add	r3, r2
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	440b      	add	r3, r1
 800ca98:	3314      	adds	r3, #20
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b04      	cmp	r3, #4
 800ca9e:	d10a      	bne.n	800cab6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800caa0:	491a      	ldr	r1, [pc, #104]	@ (800cb0c <etharp_tmr+0x14c>)
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	4613      	mov	r3, r2
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	4413      	add	r3, r2
 800caaa:	00db      	lsls	r3, r3, #3
 800caac:	440b      	add	r3, r1
 800caae:	3314      	adds	r3, #20
 800cab0:	2202      	movs	r2, #2
 800cab2:	701a      	strb	r2, [r3, #0]
 800cab4:	e01e      	b.n	800caf4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cab6:	4915      	ldr	r1, [pc, #84]	@ (800cb0c <etharp_tmr+0x14c>)
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	4613      	mov	r3, r2
 800cabc:	005b      	lsls	r3, r3, #1
 800cabe:	4413      	add	r3, r2
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	440b      	add	r3, r1
 800cac4:	3314      	adds	r3, #20
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d113      	bne.n	800caf4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cacc:	490f      	ldr	r1, [pc, #60]	@ (800cb0c <etharp_tmr+0x14c>)
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	4613      	mov	r3, r2
 800cad2:	005b      	lsls	r3, r3, #1
 800cad4:	4413      	add	r3, r2
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	440b      	add	r3, r1
 800cada:	3308      	adds	r3, #8
 800cadc:	6818      	ldr	r0, [r3, #0]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	4613      	mov	r3, r2
 800cae2:	005b      	lsls	r3, r3, #1
 800cae4:	4413      	add	r3, r2
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	4a08      	ldr	r2, [pc, #32]	@ (800cb0c <etharp_tmr+0x14c>)
 800caea:	4413      	add	r3, r2
 800caec:	3304      	adds	r3, #4
 800caee:	4619      	mov	r1, r3
 800caf0:	f000 fe6e 	bl	800d7d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3301      	adds	r3, #1
 800caf8:	607b      	str	r3, [r7, #4]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2b09      	cmp	r3, #9
 800cafe:	f77f af65 	ble.w	800c9cc <etharp_tmr+0xc>
      }
    }
  }
}
 800cb02:	bf00      	nop
 800cb04:	bf00      	nop
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	200081b0 	.word	0x200081b0

0800cb10 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08a      	sub	sp, #40	@ 0x28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cb1e:	230a      	movs	r3, #10
 800cb20:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cb22:	230a      	movs	r3, #10
 800cb24:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cb26:	230a      	movs	r3, #10
 800cb28:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cb2e:	230a      	movs	r3, #10
 800cb30:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	83bb      	strh	r3, [r7, #28]
 800cb36:	2300      	movs	r3, #0
 800cb38:	837b      	strh	r3, [r7, #26]
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb3e:	2300      	movs	r3, #0
 800cb40:	843b      	strh	r3, [r7, #32]
 800cb42:	e0ae      	b.n	800cca2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cb44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb48:	49a6      	ldr	r1, [pc, #664]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4413      	add	r3, r2
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	440b      	add	r3, r1
 800cb54:	3314      	adds	r3, #20
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cb5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800cb5e:	2b0a      	cmp	r3, #10
 800cb60:	d105      	bne.n	800cb6e <etharp_find_entry+0x5e>
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d102      	bne.n	800cb6e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cb68:	8c3b      	ldrh	r3, [r7, #32]
 800cb6a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cb6c:	e095      	b.n	800cc9a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cb6e:	7dfb      	ldrb	r3, [r7, #23]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 8092 	beq.w	800cc9a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cb76:	7dfb      	ldrb	r3, [r7, #23]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d009      	beq.n	800cb90 <etharp_find_entry+0x80>
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d806      	bhi.n	800cb90 <etharp_find_entry+0x80>
 800cb82:	4b99      	ldr	r3, [pc, #612]	@ (800cde8 <etharp_find_entry+0x2d8>)
 800cb84:	f240 1223 	movw	r2, #291	@ 0x123
 800cb88:	4998      	ldr	r1, [pc, #608]	@ (800cdec <etharp_find_entry+0x2dc>)
 800cb8a:	4899      	ldr	r0, [pc, #612]	@ (800cdf0 <etharp_find_entry+0x2e0>)
 800cb8c:	f002 faac 	bl	800f0e8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d020      	beq.n	800cbd8 <etharp_find_entry+0xc8>
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6819      	ldr	r1, [r3, #0]
 800cb9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb9e:	4891      	ldr	r0, [pc, #580]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cba0:	4613      	mov	r3, r2
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	4413      	add	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	4403      	add	r3, r0
 800cbaa:	3304      	adds	r3, #4
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4299      	cmp	r1, r3
 800cbb0:	d112      	bne.n	800cbd8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00c      	beq.n	800cbd2 <etharp_find_entry+0xc2>
 800cbb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbbc:	4989      	ldr	r1, [pc, #548]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	005b      	lsls	r3, r3, #1
 800cbc2:	4413      	add	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	440b      	add	r3, r1
 800cbc8:	3308      	adds	r3, #8
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d102      	bne.n	800cbd8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cbd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cbd6:	e100      	b.n	800cdda <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cbd8:	7dfb      	ldrb	r3, [r7, #23]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d140      	bne.n	800cc60 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cbde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbe2:	4980      	ldr	r1, [pc, #512]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	4413      	add	r3, r2
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	440b      	add	r3, r1
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d01a      	beq.n	800cc2a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cbf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbf8:	497a      	ldr	r1, [pc, #488]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	4413      	add	r3, r2
 800cc00:	00db      	lsls	r3, r3, #3
 800cc02:	440b      	add	r3, r1
 800cc04:	3312      	adds	r3, #18
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	8bba      	ldrh	r2, [r7, #28]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d845      	bhi.n	800cc9a <etharp_find_entry+0x18a>
            old_queue = i;
 800cc0e:	8c3b      	ldrh	r3, [r7, #32]
 800cc10:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cc12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc16:	4973      	ldr	r1, [pc, #460]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cc18:	4613      	mov	r3, r2
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	4413      	add	r3, r2
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	440b      	add	r3, r1
 800cc22:	3312      	adds	r3, #18
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	83bb      	strh	r3, [r7, #28]
 800cc28:	e037      	b.n	800cc9a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cc2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc2e:	496d      	ldr	r1, [pc, #436]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cc30:	4613      	mov	r3, r2
 800cc32:	005b      	lsls	r3, r3, #1
 800cc34:	4413      	add	r3, r2
 800cc36:	00db      	lsls	r3, r3, #3
 800cc38:	440b      	add	r3, r1
 800cc3a:	3312      	adds	r3, #18
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	8b7a      	ldrh	r2, [r7, #26]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d82a      	bhi.n	800cc9a <etharp_find_entry+0x18a>
            old_pending = i;
 800cc44:	8c3b      	ldrh	r3, [r7, #32]
 800cc46:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800cc48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc4c:	4965      	ldr	r1, [pc, #404]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cc4e:	4613      	mov	r3, r2
 800cc50:	005b      	lsls	r3, r3, #1
 800cc52:	4413      	add	r3, r2
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	440b      	add	r3, r1
 800cc58:	3312      	adds	r3, #18
 800cc5a:	881b      	ldrh	r3, [r3, #0]
 800cc5c:	837b      	strh	r3, [r7, #26]
 800cc5e:	e01c      	b.n	800cc9a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d919      	bls.n	800cc9a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cc66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc6a:	495e      	ldr	r1, [pc, #376]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	4413      	add	r3, r2
 800cc72:	00db      	lsls	r3, r3, #3
 800cc74:	440b      	add	r3, r1
 800cc76:	3312      	adds	r3, #18
 800cc78:	881b      	ldrh	r3, [r3, #0]
 800cc7a:	8b3a      	ldrh	r2, [r7, #24]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d80c      	bhi.n	800cc9a <etharp_find_entry+0x18a>
            old_stable = i;
 800cc80:	8c3b      	ldrh	r3, [r7, #32]
 800cc82:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800cc84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc88:	4956      	ldr	r1, [pc, #344]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	4413      	add	r3, r2
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	440b      	add	r3, r1
 800cc94:	3312      	adds	r3, #18
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc9a:	8c3b      	ldrh	r3, [r7, #32]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	843b      	strh	r3, [r7, #32]
 800cca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cca6:	2b09      	cmp	r3, #9
 800cca8:	f77f af4c 	ble.w	800cb44 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ccac:	7afb      	ldrb	r3, [r7, #11]
 800ccae:	f003 0302 	and.w	r3, r3, #2
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d108      	bne.n	800ccc8 <etharp_find_entry+0x1b8>
 800ccb6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ccba:	2b0a      	cmp	r3, #10
 800ccbc:	d107      	bne.n	800ccce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ccbe:	7afb      	ldrb	r3, [r7, #11]
 800ccc0:	f003 0301 	and.w	r3, r3, #1
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ccc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cccc:	e085      	b.n	800cdda <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ccce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ccd2:	2b09      	cmp	r3, #9
 800ccd4:	dc02      	bgt.n	800ccdc <etharp_find_entry+0x1cc>
    i = empty;
 800ccd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccd8:	843b      	strh	r3, [r7, #32]
 800ccda:	e039      	b.n	800cd50 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ccdc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800cce0:	2b09      	cmp	r3, #9
 800cce2:	dc14      	bgt.n	800cd0e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cce4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cce6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccec:	493d      	ldr	r1, [pc, #244]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800ccee:	4613      	mov	r3, r2
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	4413      	add	r3, r2
 800ccf4:	00db      	lsls	r3, r3, #3
 800ccf6:	440b      	add	r3, r1
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d018      	beq.n	800cd30 <etharp_find_entry+0x220>
 800ccfe:	4b3a      	ldr	r3, [pc, #232]	@ (800cde8 <etharp_find_entry+0x2d8>)
 800cd00:	f240 126d 	movw	r2, #365	@ 0x16d
 800cd04:	493b      	ldr	r1, [pc, #236]	@ (800cdf4 <etharp_find_entry+0x2e4>)
 800cd06:	483a      	ldr	r0, [pc, #232]	@ (800cdf0 <etharp_find_entry+0x2e0>)
 800cd08:	f002 f9ee 	bl	800f0e8 <iprintf>
 800cd0c:	e010      	b.n	800cd30 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cd0e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cd12:	2b09      	cmp	r3, #9
 800cd14:	dc02      	bgt.n	800cd1c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cd16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cd18:	843b      	strh	r3, [r7, #32]
 800cd1a:	e009      	b.n	800cd30 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cd1c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cd20:	2b09      	cmp	r3, #9
 800cd22:	dc02      	bgt.n	800cd2a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cd24:	8bfb      	ldrh	r3, [r7, #30]
 800cd26:	843b      	strh	r3, [r7, #32]
 800cd28:	e002      	b.n	800cd30 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cd2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd2e:	e054      	b.n	800cdda <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cd30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd34:	2b09      	cmp	r3, #9
 800cd36:	dd06      	ble.n	800cd46 <etharp_find_entry+0x236>
 800cd38:	4b2b      	ldr	r3, [pc, #172]	@ (800cde8 <etharp_find_entry+0x2d8>)
 800cd3a:	f240 127f 	movw	r2, #383	@ 0x17f
 800cd3e:	492e      	ldr	r1, [pc, #184]	@ (800cdf8 <etharp_find_entry+0x2e8>)
 800cd40:	482b      	ldr	r0, [pc, #172]	@ (800cdf0 <etharp_find_entry+0x2e0>)
 800cd42:	f002 f9d1 	bl	800f0e8 <iprintf>
    etharp_free_entry(i);
 800cd46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7ff fe06 	bl	800c95c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cd50:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd54:	2b09      	cmp	r3, #9
 800cd56:	dd06      	ble.n	800cd66 <etharp_find_entry+0x256>
 800cd58:	4b23      	ldr	r3, [pc, #140]	@ (800cde8 <etharp_find_entry+0x2d8>)
 800cd5a:	f240 1283 	movw	r2, #387	@ 0x183
 800cd5e:	4926      	ldr	r1, [pc, #152]	@ (800cdf8 <etharp_find_entry+0x2e8>)
 800cd60:	4823      	ldr	r0, [pc, #140]	@ (800cdf0 <etharp_find_entry+0x2e0>)
 800cd62:	f002 f9c1 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cd66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd6a:	491e      	ldr	r1, [pc, #120]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	4413      	add	r3, r2
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	440b      	add	r3, r1
 800cd76:	3314      	adds	r3, #20
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d006      	beq.n	800cd8c <etharp_find_entry+0x27c>
 800cd7e:	4b1a      	ldr	r3, [pc, #104]	@ (800cde8 <etharp_find_entry+0x2d8>)
 800cd80:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800cd84:	491d      	ldr	r1, [pc, #116]	@ (800cdfc <etharp_find_entry+0x2ec>)
 800cd86:	481a      	ldr	r0, [pc, #104]	@ (800cdf0 <etharp_find_entry+0x2e0>)
 800cd88:	f002 f9ae 	bl	800f0e8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00b      	beq.n	800cdaa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cd92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6819      	ldr	r1, [r3, #0]
 800cd9a:	4812      	ldr	r0, [pc, #72]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	005b      	lsls	r3, r3, #1
 800cda0:	4413      	add	r3, r2
 800cda2:	00db      	lsls	r3, r3, #3
 800cda4:	4403      	add	r3, r0
 800cda6:	3304      	adds	r3, #4
 800cda8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cdaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdae:	490d      	ldr	r1, [pc, #52]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	4413      	add	r3, r2
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	440b      	add	r3, r1
 800cdba:	3312      	adds	r3, #18
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cdc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdc4:	4907      	ldr	r1, [pc, #28]	@ (800cde4 <etharp_find_entry+0x2d4>)
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	4413      	add	r3, r2
 800cdcc:	00db      	lsls	r3, r3, #3
 800cdce:	440b      	add	r3, r1
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cdd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3728      	adds	r7, #40	@ 0x28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	200081b0 	.word	0x200081b0
 800cde8:	0801222c 	.word	0x0801222c
 800cdec:	08012264 	.word	0x08012264
 800cdf0:	080122a4 	.word	0x080122a4
 800cdf4:	080122cc 	.word	0x080122cc
 800cdf8:	080122e4 	.word	0x080122e4
 800cdfc:	080122f8 	.word	0x080122f8

0800ce00 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b088      	sub	sp, #32
 800ce04:	af02      	add	r7, sp, #8
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ce14:	2b06      	cmp	r3, #6
 800ce16:	d006      	beq.n	800ce26 <etharp_update_arp_entry+0x26>
 800ce18:	4b48      	ldr	r3, [pc, #288]	@ (800cf3c <etharp_update_arp_entry+0x13c>)
 800ce1a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800ce1e:	4948      	ldr	r1, [pc, #288]	@ (800cf40 <etharp_update_arp_entry+0x140>)
 800ce20:	4848      	ldr	r0, [pc, #288]	@ (800cf44 <etharp_update_arp_entry+0x144>)
 800ce22:	f002 f961 	bl	800f0e8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d012      	beq.n	800ce52 <etharp_update_arp_entry+0x52>
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00e      	beq.n	800ce52 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68f9      	ldr	r1, [r7, #12]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f001 f8fe 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800ce40:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d105      	bne.n	800ce52 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce4e:	2be0      	cmp	r3, #224	@ 0xe0
 800ce50:	d102      	bne.n	800ce58 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce52:	f06f 030f 	mvn.w	r3, #15
 800ce56:	e06c      	b.n	800cf32 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ce58:	78fb      	ldrb	r3, [r7, #3]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	68b8      	ldr	r0, [r7, #8]
 800ce60:	f7ff fe56 	bl	800cb10 <etharp_find_entry>
 800ce64:	4603      	mov	r3, r0
 800ce66:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ce68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	da02      	bge.n	800ce76 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ce70:	8afb      	ldrh	r3, [r7, #22]
 800ce72:	b25b      	sxtb	r3, r3
 800ce74:	e05d      	b.n	800cf32 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ce76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce7a:	4933      	ldr	r1, [pc, #204]	@ (800cf48 <etharp_update_arp_entry+0x148>)
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	005b      	lsls	r3, r3, #1
 800ce80:	4413      	add	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	440b      	add	r3, r1
 800ce86:	3314      	adds	r3, #20
 800ce88:	2202      	movs	r2, #2
 800ce8a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ce8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce90:	492d      	ldr	r1, [pc, #180]	@ (800cf48 <etharp_update_arp_entry+0x148>)
 800ce92:	4613      	mov	r3, r2
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	4413      	add	r3, r2
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	440b      	add	r3, r1
 800ce9c:	3308      	adds	r3, #8
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cea2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cea6:	4613      	mov	r3, r2
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	4413      	add	r3, r2
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	3308      	adds	r3, #8
 800ceb0:	4a25      	ldr	r2, [pc, #148]	@ (800cf48 <etharp_update_arp_entry+0x148>)
 800ceb2:	4413      	add	r3, r2
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	2206      	movs	r2, #6
 800ceb8:	6879      	ldr	r1, [r7, #4]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f002 f9ef 	bl	800f29e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cec0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cec4:	4920      	ldr	r1, [pc, #128]	@ (800cf48 <etharp_update_arp_entry+0x148>)
 800cec6:	4613      	mov	r3, r2
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	4413      	add	r3, r2
 800cecc:	00db      	lsls	r3, r3, #3
 800cece:	440b      	add	r3, r1
 800ced0:	3312      	adds	r3, #18
 800ced2:	2200      	movs	r2, #0
 800ced4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ced6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ceda:	491b      	ldr	r1, [pc, #108]	@ (800cf48 <etharp_update_arp_entry+0x148>)
 800cedc:	4613      	mov	r3, r2
 800cede:	005b      	lsls	r3, r3, #1
 800cee0:	4413      	add	r3, r2
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	440b      	add	r3, r1
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d021      	beq.n	800cf30 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ceec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cef0:	4915      	ldr	r1, [pc, #84]	@ (800cf48 <etharp_update_arp_entry+0x148>)
 800cef2:	4613      	mov	r3, r2
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	4413      	add	r3, r2
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	440b      	add	r3, r1
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cf00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cf04:	4910      	ldr	r1, [pc, #64]	@ (800cf48 <etharp_update_arp_entry+0x148>)
 800cf06:	4613      	mov	r3, r2
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	4413      	add	r3, r2
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	440b      	add	r3, r1
 800cf10:	2200      	movs	r2, #0
 800cf12:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800cf1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6939      	ldr	r1, [r7, #16]
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f001 ff97 	bl	800ee58 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cf2a:	6938      	ldr	r0, [r7, #16]
 800cf2c:	f7f9 fe6e 	bl	8006c0c <pbuf_free>
  }
  return ERR_OK;
 800cf30:	2300      	movs	r3, #0
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	0801222c 	.word	0x0801222c
 800cf40:	08012324 	.word	0x08012324
 800cf44:	080122a4 	.word	0x080122a4
 800cf48:	200081b0 	.word	0x200081b0

0800cf4c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf54:	2300      	movs	r3, #0
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	e01e      	b.n	800cf98 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cf5a:	4913      	ldr	r1, [pc, #76]	@ (800cfa8 <etharp_cleanup_netif+0x5c>)
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	4413      	add	r3, r2
 800cf64:	00db      	lsls	r3, r3, #3
 800cf66:	440b      	add	r3, r1
 800cf68:	3314      	adds	r3, #20
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cf6e:	7afb      	ldrb	r3, [r7, #11]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00e      	beq.n	800cf92 <etharp_cleanup_netif+0x46>
 800cf74:	490c      	ldr	r1, [pc, #48]	@ (800cfa8 <etharp_cleanup_netif+0x5c>)
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	4613      	mov	r3, r2
 800cf7a:	005b      	lsls	r3, r3, #1
 800cf7c:	4413      	add	r3, r2
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	440b      	add	r3, r1
 800cf82:	3308      	adds	r3, #8
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d102      	bne.n	800cf92 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cf8c:	68f8      	ldr	r0, [r7, #12]
 800cf8e:	f7ff fce5 	bl	800c95c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	3301      	adds	r3, #1
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2b09      	cmp	r3, #9
 800cf9c:	dddd      	ble.n	800cf5a <etharp_cleanup_netif+0xe>
    }
  }
}
 800cf9e:	bf00      	nop
 800cfa0:	bf00      	nop
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	200081b0 	.word	0x200081b0

0800cfac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cfac:	b5b0      	push	{r4, r5, r7, lr}
 800cfae:	b08a      	sub	sp, #40	@ 0x28
 800cfb0:	af04      	add	r7, sp, #16
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d107      	bne.n	800cfcc <etharp_input+0x20>
 800cfbc:	4b3d      	ldr	r3, [pc, #244]	@ (800d0b4 <etharp_input+0x108>)
 800cfbe:	f240 228a 	movw	r2, #650	@ 0x28a
 800cfc2:	493d      	ldr	r1, [pc, #244]	@ (800d0b8 <etharp_input+0x10c>)
 800cfc4:	483d      	ldr	r0, [pc, #244]	@ (800d0bc <etharp_input+0x110>)
 800cfc6:	f002 f88f 	bl	800f0e8 <iprintf>
 800cfca:	e06f      	b.n	800d0ac <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	881b      	ldrh	r3, [r3, #0]
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfdc:	d10c      	bne.n	800cff8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cfe2:	2b06      	cmp	r3, #6
 800cfe4:	d108      	bne.n	800cff8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cfea:	2b04      	cmp	r3, #4
 800cfec:	d104      	bne.n	800cff8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	885b      	ldrh	r3, [r3, #2]
 800cff2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cff4:	2b08      	cmp	r3, #8
 800cff6:	d003      	beq.n	800d000 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7f9 fe07 	bl	8006c0c <pbuf_free>
    return;
 800cffe:	e055      	b.n	800d0ac <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	330e      	adds	r3, #14
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	3318      	adds	r3, #24
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	3304      	adds	r3, #4
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d102      	bne.n	800d020 <etharp_input+0x74>
    for_us = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	75fb      	strb	r3, [r7, #23]
 800d01e:	e009      	b.n	800d034 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d020:	68ba      	ldr	r2, [r7, #8]
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	3304      	adds	r3, #4
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	429a      	cmp	r2, r3
 800d02a:	bf0c      	ite	eq
 800d02c:	2301      	moveq	r3, #1
 800d02e:	2300      	movne	r3, #0
 800d030:	b2db      	uxtb	r3, r3
 800d032:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	f103 0208 	add.w	r2, r3, #8
 800d03a:	7dfb      	ldrb	r3, [r7, #23]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <etharp_input+0x98>
 800d040:	2301      	movs	r3, #1
 800d042:	e000      	b.n	800d046 <etharp_input+0x9a>
 800d044:	2302      	movs	r3, #2
 800d046:	f107 010c 	add.w	r1, r7, #12
 800d04a:	6838      	ldr	r0, [r7, #0]
 800d04c:	f7ff fed8 	bl	800ce00 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	88db      	ldrh	r3, [r3, #6]
 800d054:	b29b      	uxth	r3, r3
 800d056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d05a:	d003      	beq.n	800d064 <etharp_input+0xb8>
 800d05c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d060:	d01e      	beq.n	800d0a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d062:	e020      	b.n	800d0a6 <etharp_input+0xfa>
      if (for_us) {
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d01c      	beq.n	800d0a4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d080:	693a      	ldr	r2, [r7, #16]
 800d082:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d084:	2102      	movs	r1, #2
 800d086:	9103      	str	r1, [sp, #12]
 800d088:	f107 010c 	add.w	r1, r7, #12
 800d08c:	9102      	str	r1, [sp, #8]
 800d08e:	9201      	str	r2, [sp, #4]
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	462b      	mov	r3, r5
 800d094:	4622      	mov	r2, r4
 800d096:	4601      	mov	r1, r0
 800d098:	6838      	ldr	r0, [r7, #0]
 800d09a:	f000 faeb 	bl	800d674 <etharp_raw>
      break;
 800d09e:	e001      	b.n	800d0a4 <etharp_input+0xf8>
      break;
 800d0a0:	bf00      	nop
 800d0a2:	e000      	b.n	800d0a6 <etharp_input+0xfa>
      break;
 800d0a4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7f9 fdb0 	bl	8006c0c <pbuf_free>
}
 800d0ac:	3718      	adds	r7, #24
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bdb0      	pop	{r4, r5, r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	0801222c 	.word	0x0801222c
 800d0b8:	0801237c 	.word	0x0801237c
 800d0bc:	080122a4 	.word	0x080122a4

0800d0c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af02      	add	r7, sp, #8
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d0ce:	79fa      	ldrb	r2, [r7, #7]
 800d0d0:	4944      	ldr	r1, [pc, #272]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	4413      	add	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	440b      	add	r3, r1
 800d0dc:	3314      	adds	r3, #20
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d806      	bhi.n	800d0f2 <etharp_output_to_arp_index+0x32>
 800d0e4:	4b40      	ldr	r3, [pc, #256]	@ (800d1e8 <etharp_output_to_arp_index+0x128>)
 800d0e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d0ea:	4940      	ldr	r1, [pc, #256]	@ (800d1ec <etharp_output_to_arp_index+0x12c>)
 800d0ec:	4840      	ldr	r0, [pc, #256]	@ (800d1f0 <etharp_output_to_arp_index+0x130>)
 800d0ee:	f001 fffb 	bl	800f0e8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d0f2:	79fa      	ldrb	r2, [r7, #7]
 800d0f4:	493b      	ldr	r1, [pc, #236]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d0f6:	4613      	mov	r3, r2
 800d0f8:	005b      	lsls	r3, r3, #1
 800d0fa:	4413      	add	r3, r2
 800d0fc:	00db      	lsls	r3, r3, #3
 800d0fe:	440b      	add	r3, r1
 800d100:	3314      	adds	r3, #20
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b02      	cmp	r3, #2
 800d106:	d153      	bne.n	800d1b0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d108:	79fa      	ldrb	r2, [r7, #7]
 800d10a:	4936      	ldr	r1, [pc, #216]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d10c:	4613      	mov	r3, r2
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	4413      	add	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	440b      	add	r3, r1
 800d116:	3312      	adds	r3, #18
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800d11e:	d919      	bls.n	800d154 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d120:	79fa      	ldrb	r2, [r7, #7]
 800d122:	4613      	mov	r3, r2
 800d124:	005b      	lsls	r3, r3, #1
 800d126:	4413      	add	r3, r2
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	4a2e      	ldr	r2, [pc, #184]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d12c:	4413      	add	r3, r2
 800d12e:	3304      	adds	r3, #4
 800d130:	4619      	mov	r1, r3
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	f000 fb4c 	bl	800d7d0 <etharp_request>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d138      	bne.n	800d1b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d13e:	79fa      	ldrb	r2, [r7, #7]
 800d140:	4928      	ldr	r1, [pc, #160]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d142:	4613      	mov	r3, r2
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	4413      	add	r3, r2
 800d148:	00db      	lsls	r3, r3, #3
 800d14a:	440b      	add	r3, r1
 800d14c:	3314      	adds	r3, #20
 800d14e:	2203      	movs	r2, #3
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	e02d      	b.n	800d1b0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d154:	79fa      	ldrb	r2, [r7, #7]
 800d156:	4923      	ldr	r1, [pc, #140]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d158:	4613      	mov	r3, r2
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	4413      	add	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	440b      	add	r3, r1
 800d162:	3312      	adds	r3, #18
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800d16a:	d321      	bcc.n	800d1b0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d16c:	79fa      	ldrb	r2, [r7, #7]
 800d16e:	4613      	mov	r3, r2
 800d170:	005b      	lsls	r3, r3, #1
 800d172:	4413      	add	r3, r2
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	4a1b      	ldr	r2, [pc, #108]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d178:	4413      	add	r3, r2
 800d17a:	1d19      	adds	r1, r3, #4
 800d17c:	79fa      	ldrb	r2, [r7, #7]
 800d17e:	4613      	mov	r3, r2
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	4413      	add	r3, r2
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	3308      	adds	r3, #8
 800d188:	4a16      	ldr	r2, [pc, #88]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d18a:	4413      	add	r3, r2
 800d18c:	3304      	adds	r3, #4
 800d18e:	461a      	mov	r2, r3
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f000 fafb 	bl	800d78c <etharp_request_dst>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d109      	bne.n	800d1b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d19c:	79fa      	ldrb	r2, [r7, #7]
 800d19e:	4911      	ldr	r1, [pc, #68]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	4413      	add	r3, r2
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	440b      	add	r3, r1
 800d1aa:	3314      	adds	r3, #20
 800d1ac:	2203      	movs	r2, #3
 800d1ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800d1b6:	79fa      	ldrb	r2, [r7, #7]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	005b      	lsls	r3, r3, #1
 800d1bc:	4413      	add	r3, r2
 800d1be:	00db      	lsls	r3, r3, #3
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	4a08      	ldr	r2, [pc, #32]	@ (800d1e4 <etharp_output_to_arp_index+0x124>)
 800d1c4:	4413      	add	r3, r2
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1cc:	9200      	str	r2, [sp, #0]
 800d1ce:	460a      	mov	r2, r1
 800d1d0:	68b9      	ldr	r1, [r7, #8]
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f001 fe40 	bl	800ee58 <ethernet_output>
 800d1d8:	4603      	mov	r3, r0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	200081b0 	.word	0x200081b0
 800d1e8:	0801222c 	.word	0x0801222c
 800d1ec:	0801239c 	.word	0x0801239c
 800d1f0:	080122a4 	.word	0x080122a4

0800d1f4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b08a      	sub	sp, #40	@ 0x28
 800d1f8:	af02      	add	r7, sp, #8
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d106      	bne.n	800d218 <etharp_output+0x24>
 800d20a:	4b73      	ldr	r3, [pc, #460]	@ (800d3d8 <etharp_output+0x1e4>)
 800d20c:	f240 321e 	movw	r2, #798	@ 0x31e
 800d210:	4972      	ldr	r1, [pc, #456]	@ (800d3dc <etharp_output+0x1e8>)
 800d212:	4873      	ldr	r0, [pc, #460]	@ (800d3e0 <etharp_output+0x1ec>)
 800d214:	f001 ff68 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d106      	bne.n	800d22c <etharp_output+0x38>
 800d21e:	4b6e      	ldr	r3, [pc, #440]	@ (800d3d8 <etharp_output+0x1e4>)
 800d220:	f240 321f 	movw	r2, #799	@ 0x31f
 800d224:	496f      	ldr	r1, [pc, #444]	@ (800d3e4 <etharp_output+0x1f0>)
 800d226:	486e      	ldr	r0, [pc, #440]	@ (800d3e0 <etharp_output+0x1ec>)
 800d228:	f001 ff5e 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d106      	bne.n	800d240 <etharp_output+0x4c>
 800d232:	4b69      	ldr	r3, [pc, #420]	@ (800d3d8 <etharp_output+0x1e4>)
 800d234:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d238:	496b      	ldr	r1, [pc, #428]	@ (800d3e8 <etharp_output+0x1f4>)
 800d23a:	4869      	ldr	r0, [pc, #420]	@ (800d3e0 <etharp_output+0x1ec>)
 800d23c:	f001 ff54 	bl	800f0e8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68f9      	ldr	r1, [r7, #12]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fef8 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d002      	beq.n	800d258 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d252:	4b66      	ldr	r3, [pc, #408]	@ (800d3ec <etharp_output+0x1f8>)
 800d254:	61fb      	str	r3, [r7, #28]
 800d256:	e0af      	b.n	800d3b8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d260:	2be0      	cmp	r3, #224	@ 0xe0
 800d262:	d118      	bne.n	800d296 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d264:	2301      	movs	r3, #1
 800d266:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d268:	2300      	movs	r3, #0
 800d26a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d26c:	235e      	movs	r3, #94	@ 0x5e
 800d26e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	3301      	adds	r3, #1
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	3302      	adds	r3, #2
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3303      	adds	r3, #3
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d28e:	f107 0310 	add.w	r3, r7, #16
 800d292:	61fb      	str	r3, [r7, #28]
 800d294:	e090      	b.n	800d3b8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	3304      	adds	r3, #4
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	405a      	eors	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3308      	adds	r3, #8
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d012      	beq.n	800d2d4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d2b4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d00b      	beq.n	800d2d4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	330c      	adds	r3, #12
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	330c      	adds	r3, #12
 800d2ca:	61bb      	str	r3, [r7, #24]
 800d2cc:	e002      	b.n	800d2d4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d2ce:	f06f 0303 	mvn.w	r3, #3
 800d2d2:	e07d      	b.n	800d3d0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d2d4:	4b46      	ldr	r3, [pc, #280]	@ (800d3f0 <etharp_output+0x1fc>)
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	4619      	mov	r1, r3
 800d2da:	4a46      	ldr	r2, [pc, #280]	@ (800d3f4 <etharp_output+0x200>)
 800d2dc:	460b      	mov	r3, r1
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	440b      	add	r3, r1
 800d2e2:	00db      	lsls	r3, r3, #3
 800d2e4:	4413      	add	r3, r2
 800d2e6:	3314      	adds	r3, #20
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d925      	bls.n	800d33a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d2ee:	4b40      	ldr	r3, [pc, #256]	@ (800d3f0 <etharp_output+0x1fc>)
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	4a3f      	ldr	r2, [pc, #252]	@ (800d3f4 <etharp_output+0x200>)
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	005b      	lsls	r3, r3, #1
 800d2fa:	440b      	add	r3, r1
 800d2fc:	00db      	lsls	r3, r3, #3
 800d2fe:	4413      	add	r3, r2
 800d300:	3308      	adds	r3, #8
 800d302:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	429a      	cmp	r2, r3
 800d308:	d117      	bne.n	800d33a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	4b38      	ldr	r3, [pc, #224]	@ (800d3f0 <etharp_output+0x1fc>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	4618      	mov	r0, r3
 800d314:	4937      	ldr	r1, [pc, #220]	@ (800d3f4 <etharp_output+0x200>)
 800d316:	4603      	mov	r3, r0
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	4403      	add	r3, r0
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	440b      	add	r3, r1
 800d320:	3304      	adds	r3, #4
 800d322:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d324:	429a      	cmp	r2, r3
 800d326:	d108      	bne.n	800d33a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d328:	4b31      	ldr	r3, [pc, #196]	@ (800d3f0 <etharp_output+0x1fc>)
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	461a      	mov	r2, r3
 800d32e:	68b9      	ldr	r1, [r7, #8]
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7ff fec5 	bl	800d0c0 <etharp_output_to_arp_index>
 800d336:	4603      	mov	r3, r0
 800d338:	e04a      	b.n	800d3d0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d33a:	2300      	movs	r3, #0
 800d33c:	75fb      	strb	r3, [r7, #23]
 800d33e:	e031      	b.n	800d3a4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d340:	7dfa      	ldrb	r2, [r7, #23]
 800d342:	492c      	ldr	r1, [pc, #176]	@ (800d3f4 <etharp_output+0x200>)
 800d344:	4613      	mov	r3, r2
 800d346:	005b      	lsls	r3, r3, #1
 800d348:	4413      	add	r3, r2
 800d34a:	00db      	lsls	r3, r3, #3
 800d34c:	440b      	add	r3, r1
 800d34e:	3314      	adds	r3, #20
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	2b01      	cmp	r3, #1
 800d354:	d923      	bls.n	800d39e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d356:	7dfa      	ldrb	r2, [r7, #23]
 800d358:	4926      	ldr	r1, [pc, #152]	@ (800d3f4 <etharp_output+0x200>)
 800d35a:	4613      	mov	r3, r2
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	4413      	add	r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	440b      	add	r3, r1
 800d364:	3308      	adds	r3, #8
 800d366:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d117      	bne.n	800d39e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	6819      	ldr	r1, [r3, #0]
 800d372:	7dfa      	ldrb	r2, [r7, #23]
 800d374:	481f      	ldr	r0, [pc, #124]	@ (800d3f4 <etharp_output+0x200>)
 800d376:	4613      	mov	r3, r2
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	4413      	add	r3, r2
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	4403      	add	r3, r0
 800d380:	3304      	adds	r3, #4
 800d382:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d384:	4299      	cmp	r1, r3
 800d386:	d10a      	bne.n	800d39e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d388:	4a19      	ldr	r2, [pc, #100]	@ (800d3f0 <etharp_output+0x1fc>)
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
 800d38c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d38e:	7dfb      	ldrb	r3, [r7, #23]
 800d390:	461a      	mov	r2, r3
 800d392:	68b9      	ldr	r1, [r7, #8]
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f7ff fe93 	bl	800d0c0 <etharp_output_to_arp_index>
 800d39a:	4603      	mov	r3, r0
 800d39c:	e018      	b.n	800d3d0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	75fb      	strb	r3, [r7, #23]
 800d3a4:	7dfb      	ldrb	r3, [r7, #23]
 800d3a6:	2b09      	cmp	r3, #9
 800d3a8:	d9ca      	bls.n	800d340 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	69b9      	ldr	r1, [r7, #24]
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f000 f822 	bl	800d3f8 <etharp_query>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	e00b      	b.n	800d3d0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800d3be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	68b9      	ldr	r1, [r7, #8]
 800d3c8:	68f8      	ldr	r0, [r7, #12]
 800d3ca:	f001 fd45 	bl	800ee58 <ethernet_output>
 800d3ce:	4603      	mov	r3, r0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3720      	adds	r7, #32
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	0801222c 	.word	0x0801222c
 800d3dc:	0801237c 	.word	0x0801237c
 800d3e0:	080122a4 	.word	0x080122a4
 800d3e4:	080123cc 	.word	0x080123cc
 800d3e8:	0801236c 	.word	0x0801236c
 800d3ec:	080129e8 	.word	0x080129e8
 800d3f0:	200082a0 	.word	0x200082a0
 800d3f4:	200081b0 	.word	0x200081b0

0800d3f8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b08c      	sub	sp, #48	@ 0x30
 800d3fc:	af02      	add	r7, sp, #8
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	3326      	adds	r3, #38	@ 0x26
 800d408:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d40a:	23ff      	movs	r3, #255	@ 0xff
 800d40c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800d410:	2300      	movs	r3, #0
 800d412:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	68f9      	ldr	r1, [r7, #12]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 fe0e 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d10c      	bne.n	800d440 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d42e:	2be0      	cmp	r3, #224	@ 0xe0
 800d430:	d006      	beq.n	800d440 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d003      	beq.n	800d440 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d102      	bne.n	800d446 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d440:	f06f 030f 	mvn.w	r3, #15
 800d444:	e101      	b.n	800d64a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	2101      	movs	r1, #1
 800d44a:	68b8      	ldr	r0, [r7, #8]
 800d44c:	f7ff fb60 	bl	800cb10 <etharp_find_entry>
 800d450:	4603      	mov	r3, r0
 800d452:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d454:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	da02      	bge.n	800d462 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d45c:	8a7b      	ldrh	r3, [r7, #18]
 800d45e:	b25b      	sxtb	r3, r3
 800d460:	e0f3      	b.n	800d64a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d462:	8a7b      	ldrh	r3, [r7, #18]
 800d464:	2b7e      	cmp	r3, #126	@ 0x7e
 800d466:	d906      	bls.n	800d476 <etharp_query+0x7e>
 800d468:	4b7a      	ldr	r3, [pc, #488]	@ (800d654 <etharp_query+0x25c>)
 800d46a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800d46e:	497a      	ldr	r1, [pc, #488]	@ (800d658 <etharp_query+0x260>)
 800d470:	487a      	ldr	r0, [pc, #488]	@ (800d65c <etharp_query+0x264>)
 800d472:	f001 fe39 	bl	800f0e8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d476:	8a7b      	ldrh	r3, [r7, #18]
 800d478:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d47a:	7c7a      	ldrb	r2, [r7, #17]
 800d47c:	4978      	ldr	r1, [pc, #480]	@ (800d660 <etharp_query+0x268>)
 800d47e:	4613      	mov	r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4413      	add	r3, r2
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	440b      	add	r3, r1
 800d488:	3314      	adds	r3, #20
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d115      	bne.n	800d4bc <etharp_query+0xc4>
    is_new_entry = 1;
 800d490:	2301      	movs	r3, #1
 800d492:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d494:	7c7a      	ldrb	r2, [r7, #17]
 800d496:	4972      	ldr	r1, [pc, #456]	@ (800d660 <etharp_query+0x268>)
 800d498:	4613      	mov	r3, r2
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	4413      	add	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	440b      	add	r3, r1
 800d4a2:	3314      	adds	r3, #20
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d4a8:	7c7a      	ldrb	r2, [r7, #17]
 800d4aa:	496d      	ldr	r1, [pc, #436]	@ (800d660 <etharp_query+0x268>)
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	4413      	add	r3, r2
 800d4b2:	00db      	lsls	r3, r3, #3
 800d4b4:	440b      	add	r3, r1
 800d4b6:	3308      	adds	r3, #8
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d4bc:	7c7a      	ldrb	r2, [r7, #17]
 800d4be:	4968      	ldr	r1, [pc, #416]	@ (800d660 <etharp_query+0x268>)
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	005b      	lsls	r3, r3, #1
 800d4c4:	4413      	add	r3, r2
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	440b      	add	r3, r1
 800d4ca:	3314      	adds	r3, #20
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d011      	beq.n	800d4f6 <etharp_query+0xfe>
 800d4d2:	7c7a      	ldrb	r2, [r7, #17]
 800d4d4:	4962      	ldr	r1, [pc, #392]	@ (800d660 <etharp_query+0x268>)
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	005b      	lsls	r3, r3, #1
 800d4da:	4413      	add	r3, r2
 800d4dc:	00db      	lsls	r3, r3, #3
 800d4de:	440b      	add	r3, r1
 800d4e0:	3314      	adds	r3, #20
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d806      	bhi.n	800d4f6 <etharp_query+0xfe>
 800d4e8:	4b5a      	ldr	r3, [pc, #360]	@ (800d654 <etharp_query+0x25c>)
 800d4ea:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800d4ee:	495d      	ldr	r1, [pc, #372]	@ (800d664 <etharp_query+0x26c>)
 800d4f0:	485a      	ldr	r0, [pc, #360]	@ (800d65c <etharp_query+0x264>)
 800d4f2:	f001 fdf9 	bl	800f0e8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d4f6:	6a3b      	ldr	r3, [r7, #32]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d102      	bne.n	800d502 <etharp_query+0x10a>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10c      	bne.n	800d51c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d502:	68b9      	ldr	r1, [r7, #8]
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f000 f963 	bl	800d7d0 <etharp_request>
 800d50a:	4603      	mov	r3, r0
 800d50c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d102      	bne.n	800d51c <etharp_query+0x124>
      return result;
 800d516:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d51a:	e096      	b.n	800d64a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <etharp_query+0x138>
 800d522:	4b4c      	ldr	r3, [pc, #304]	@ (800d654 <etharp_query+0x25c>)
 800d524:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800d528:	494f      	ldr	r1, [pc, #316]	@ (800d668 <etharp_query+0x270>)
 800d52a:	484c      	ldr	r0, [pc, #304]	@ (800d65c <etharp_query+0x264>)
 800d52c:	f001 fddc 	bl	800f0e8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d530:	7c7a      	ldrb	r2, [r7, #17]
 800d532:	494b      	ldr	r1, [pc, #300]	@ (800d660 <etharp_query+0x268>)
 800d534:	4613      	mov	r3, r2
 800d536:	005b      	lsls	r3, r3, #1
 800d538:	4413      	add	r3, r2
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	440b      	add	r3, r1
 800d53e:	3314      	adds	r3, #20
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d917      	bls.n	800d576 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d546:	4a49      	ldr	r2, [pc, #292]	@ (800d66c <etharp_query+0x274>)
 800d548:	7c7b      	ldrb	r3, [r7, #17]
 800d54a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d54c:	7c7a      	ldrb	r2, [r7, #17]
 800d54e:	4613      	mov	r3, r2
 800d550:	005b      	lsls	r3, r3, #1
 800d552:	4413      	add	r3, r2
 800d554:	00db      	lsls	r3, r3, #3
 800d556:	3308      	adds	r3, #8
 800d558:	4a41      	ldr	r2, [pc, #260]	@ (800d660 <etharp_query+0x268>)
 800d55a:	4413      	add	r3, r2
 800d55c:	3304      	adds	r3, #4
 800d55e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d562:	9200      	str	r2, [sp, #0]
 800d564:	697a      	ldr	r2, [r7, #20]
 800d566:	6879      	ldr	r1, [r7, #4]
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f001 fc75 	bl	800ee58 <ethernet_output>
 800d56e:	4603      	mov	r3, r0
 800d570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d574:	e067      	b.n	800d646 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d576:	7c7a      	ldrb	r2, [r7, #17]
 800d578:	4939      	ldr	r1, [pc, #228]	@ (800d660 <etharp_query+0x268>)
 800d57a:	4613      	mov	r3, r2
 800d57c:	005b      	lsls	r3, r3, #1
 800d57e:	4413      	add	r3, r2
 800d580:	00db      	lsls	r3, r3, #3
 800d582:	440b      	add	r3, r1
 800d584:	3314      	adds	r3, #20
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d15c      	bne.n	800d646 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d594:	e01c      	b.n	800d5d0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	895a      	ldrh	r2, [r3, #10]
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	891b      	ldrh	r3, [r3, #8]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d10a      	bne.n	800d5b8 <etharp_query+0x1c0>
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d006      	beq.n	800d5b8 <etharp_query+0x1c0>
 800d5aa:	4b2a      	ldr	r3, [pc, #168]	@ (800d654 <etharp_query+0x25c>)
 800d5ac:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d5b0:	492f      	ldr	r1, [pc, #188]	@ (800d670 <etharp_query+0x278>)
 800d5b2:	482a      	ldr	r0, [pc, #168]	@ (800d65c <etharp_query+0x264>)
 800d5b4:	f001 fd98 	bl	800f0e8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	7b1b      	ldrb	r3, [r3, #12]
 800d5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <etharp_query+0x1d2>
        copy_needed = 1;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	61bb      	str	r3, [r7, #24]
        break;
 800d5c8:	e005      	b.n	800d5d6 <etharp_query+0x1de>
      }
      p = p->next;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1df      	bne.n	800d596 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d007      	beq.n	800d5ec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800d5e2:	200e      	movs	r0, #14
 800d5e4:	f7f9 fd6e 	bl	80070c4 <pbuf_clone>
 800d5e8:	61f8      	str	r0, [r7, #28]
 800d5ea:	e004      	b.n	800d5f6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d5f0:	69f8      	ldr	r0, [r7, #28]
 800d5f2:	f7f9 fbab 	bl	8006d4c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d021      	beq.n	800d640 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d5fc:	7c7a      	ldrb	r2, [r7, #17]
 800d5fe:	4918      	ldr	r1, [pc, #96]	@ (800d660 <etharp_query+0x268>)
 800d600:	4613      	mov	r3, r2
 800d602:	005b      	lsls	r3, r3, #1
 800d604:	4413      	add	r3, r2
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	440b      	add	r3, r1
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00a      	beq.n	800d626 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d610:	7c7a      	ldrb	r2, [r7, #17]
 800d612:	4913      	ldr	r1, [pc, #76]	@ (800d660 <etharp_query+0x268>)
 800d614:	4613      	mov	r3, r2
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	4413      	add	r3, r2
 800d61a:	00db      	lsls	r3, r3, #3
 800d61c:	440b      	add	r3, r1
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4618      	mov	r0, r3
 800d622:	f7f9 faf3 	bl	8006c0c <pbuf_free>
      }
      arp_table[i].q = p;
 800d626:	7c7a      	ldrb	r2, [r7, #17]
 800d628:	490d      	ldr	r1, [pc, #52]	@ (800d660 <etharp_query+0x268>)
 800d62a:	4613      	mov	r3, r2
 800d62c:	005b      	lsls	r3, r3, #1
 800d62e:	4413      	add	r3, r2
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	440b      	add	r3, r1
 800d634:	69fa      	ldr	r2, [r7, #28]
 800d636:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d638:	2300      	movs	r3, #0
 800d63a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d63e:	e002      	b.n	800d646 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d640:	23ff      	movs	r3, #255	@ 0xff
 800d642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800d646:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3728      	adds	r7, #40	@ 0x28
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	0801222c 	.word	0x0801222c
 800d658:	080123d8 	.word	0x080123d8
 800d65c:	080122a4 	.word	0x080122a4
 800d660:	200081b0 	.word	0x200081b0
 800d664:	080123e8 	.word	0x080123e8
 800d668:	080123cc 	.word	0x080123cc
 800d66c:	200082a0 	.word	0x200082a0
 800d670:	08012410 	.word	0x08012410

0800d674 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b08a      	sub	sp, #40	@ 0x28
 800d678:	af02      	add	r7, sp, #8
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d682:	2300      	movs	r3, #0
 800d684:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d106      	bne.n	800d69a <etharp_raw+0x26>
 800d68c:	4b3a      	ldr	r3, [pc, #232]	@ (800d778 <etharp_raw+0x104>)
 800d68e:	f240 4257 	movw	r2, #1111	@ 0x457
 800d692:	493a      	ldr	r1, [pc, #232]	@ (800d77c <etharp_raw+0x108>)
 800d694:	483a      	ldr	r0, [pc, #232]	@ (800d780 <etharp_raw+0x10c>)
 800d696:	f001 fd27 	bl	800f0e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d69a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d69e:	211c      	movs	r1, #28
 800d6a0:	200e      	movs	r0, #14
 800d6a2:	f7f8 ffcf 	bl	8006644 <pbuf_alloc>
 800d6a6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d102      	bne.n	800d6b4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d6ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6b2:	e05d      	b.n	800d770 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	895b      	ldrh	r3, [r3, #10]
 800d6b8:	2b1b      	cmp	r3, #27
 800d6ba:	d806      	bhi.n	800d6ca <etharp_raw+0x56>
 800d6bc:	4b2e      	ldr	r3, [pc, #184]	@ (800d778 <etharp_raw+0x104>)
 800d6be:	f240 4262 	movw	r2, #1122	@ 0x462
 800d6c2:	4930      	ldr	r1, [pc, #192]	@ (800d784 <etharp_raw+0x110>)
 800d6c4:	482e      	ldr	r0, [pc, #184]	@ (800d780 <etharp_raw+0x10c>)
 800d6c6:	f001 fd0f 	bl	800f0e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d6d0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7f7 ff60 	bl	8005598 <lwip_htons>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	461a      	mov	r2, r3
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d6e6:	2b06      	cmp	r3, #6
 800d6e8:	d006      	beq.n	800d6f8 <etharp_raw+0x84>
 800d6ea:	4b23      	ldr	r3, [pc, #140]	@ (800d778 <etharp_raw+0x104>)
 800d6ec:	f240 4269 	movw	r2, #1129	@ 0x469
 800d6f0:	4925      	ldr	r1, [pc, #148]	@ (800d788 <etharp_raw+0x114>)
 800d6f2:	4823      	ldr	r0, [pc, #140]	@ (800d780 <etharp_raw+0x10c>)
 800d6f4:	f001 fcf8 	bl	800f0e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	3308      	adds	r3, #8
 800d6fc:	2206      	movs	r2, #6
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	4618      	mov	r0, r3
 800d702:	f001 fdcc 	bl	800f29e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	3312      	adds	r3, #18
 800d70a:	2206      	movs	r2, #6
 800d70c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d70e:	4618      	mov	r0, r3
 800d710:	f001 fdc5 	bl	800f29e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	330e      	adds	r3, #14
 800d718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d71a:	6812      	ldr	r2, [r2, #0]
 800d71c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	3318      	adds	r3, #24
 800d722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d724:	6812      	ldr	r2, [r2, #0]
 800d726:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	2200      	movs	r2, #0
 800d72c:	701a      	strb	r2, [r3, #0]
 800d72e:	2200      	movs	r2, #0
 800d730:	f042 0201 	orr.w	r2, r2, #1
 800d734:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	2200      	movs	r2, #0
 800d73a:	f042 0208 	orr.w	r2, r2, #8
 800d73e:	709a      	strb	r2, [r3, #2]
 800d740:	2200      	movs	r2, #0
 800d742:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	2206      	movs	r2, #6
 800d748:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	2204      	movs	r2, #4
 800d74e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d750:	f640 0306 	movw	r3, #2054	@ 0x806
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	69b9      	ldr	r1, [r7, #24]
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f001 fb7b 	bl	800ee58 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d762:	69b8      	ldr	r0, [r7, #24]
 800d764:	f7f9 fa52 	bl	8006c0c <pbuf_free>
  p = NULL;
 800d768:	2300      	movs	r3, #0
 800d76a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d76c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3720      	adds	r7, #32
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	0801222c 	.word	0x0801222c
 800d77c:	0801237c 	.word	0x0801237c
 800d780:	080122a4 	.word	0x080122a4
 800d784:	0801242c 	.word	0x0801242c
 800d788:	08012460 	.word	0x08012460

0800d78c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b088      	sub	sp, #32
 800d790:	af04      	add	r7, sp, #16
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	9203      	str	r2, [sp, #12]
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	9202      	str	r2, [sp, #8]
 800d7b0:	4a06      	ldr	r2, [pc, #24]	@ (800d7cc <etharp_request_dst+0x40>)
 800d7b2:	9201      	str	r2, [sp, #4]
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f7ff ff5a 	bl	800d674 <etharp_raw>
 800d7c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	080129f0 	.word	0x080129f0

0800d7d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d7da:	4a05      	ldr	r2, [pc, #20]	@ (800d7f0 <etharp_request+0x20>)
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff ffd4 	bl	800d78c <etharp_request_dst>
 800d7e4:	4603      	mov	r3, r0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	080129e8 	.word	0x080129e8

0800d7f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b08e      	sub	sp, #56	@ 0x38
 800d7f8:	af04      	add	r7, sp, #16
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d7fe:	4b79      	ldr	r3, [pc, #484]	@ (800d9e4 <icmp_input+0x1f0>)
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	f003 030f 	and.w	r3, r3, #15
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	b2db      	uxtb	r3, r3
 800d812:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800d814:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d816:	2b13      	cmp	r3, #19
 800d818:	f240 80cd 	bls.w	800d9b6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	895b      	ldrh	r3, [r3, #10]
 800d820:	2b03      	cmp	r3, #3
 800d822:	f240 80ca 	bls.w	800d9ba <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d830:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 80b7 	beq.w	800d9a8 <icmp_input+0x1b4>
 800d83a:	2b08      	cmp	r3, #8
 800d83c:	f040 80b7 	bne.w	800d9ae <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d840:	4b69      	ldr	r3, [pc, #420]	@ (800d9e8 <icmp_input+0x1f4>)
 800d842:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d844:	4b67      	ldr	r3, [pc, #412]	@ (800d9e4 <icmp_input+0x1f0>)
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d84c:	2be0      	cmp	r3, #224	@ 0xe0
 800d84e:	f000 80bb 	beq.w	800d9c8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d852:	4b64      	ldr	r3, [pc, #400]	@ (800d9e4 <icmp_input+0x1f0>)
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	4a63      	ldr	r2, [pc, #396]	@ (800d9e4 <icmp_input+0x1f0>)
 800d858:	6812      	ldr	r2, [r2, #0]
 800d85a:	4611      	mov	r1, r2
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 fbed 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	f040 80b1 	bne.w	800d9cc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	891b      	ldrh	r3, [r3, #8]
 800d86e:	2b07      	cmp	r3, #7
 800d870:	f240 80a5 	bls.w	800d9be <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d874:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d876:	330e      	adds	r3, #14
 800d878:	4619      	mov	r1, r3
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7f9 f930 	bl	8006ae0 <pbuf_add_header>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d04b      	beq.n	800d91e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	891a      	ldrh	r2, [r3, #8]
 800d88a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d88c:	4413      	add	r3, r2
 800d88e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	891b      	ldrh	r3, [r3, #8]
 800d894:	8b7a      	ldrh	r2, [r7, #26]
 800d896:	429a      	cmp	r2, r3
 800d898:	f0c0 809a 	bcc.w	800d9d0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d89c:	8b7b      	ldrh	r3, [r7, #26]
 800d89e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	200e      	movs	r0, #14
 800d8a6:	f7f8 fecd 	bl	8006644 <pbuf_alloc>
 800d8aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f000 8090 	beq.w	800d9d4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	895b      	ldrh	r3, [r3, #10]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8bc:	3308      	adds	r3, #8
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d203      	bcs.n	800d8ca <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d8c2:	6978      	ldr	r0, [r7, #20]
 800d8c4:	f7f9 f9a2 	bl	8006c0c <pbuf_free>
          goto icmperr;
 800d8c8:	e085      	b.n	800d9d6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d8d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f001 fce3 	bl	800f29e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d8d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6978      	ldr	r0, [r7, #20]
 800d8de:	f7f9 f90f 	bl	8006b00 <pbuf_remove_header>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d009      	beq.n	800d8fc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d8e8:	4b40      	ldr	r3, [pc, #256]	@ (800d9ec <icmp_input+0x1f8>)
 800d8ea:	22b6      	movs	r2, #182	@ 0xb6
 800d8ec:	4940      	ldr	r1, [pc, #256]	@ (800d9f0 <icmp_input+0x1fc>)
 800d8ee:	4841      	ldr	r0, [pc, #260]	@ (800d9f4 <icmp_input+0x200>)
 800d8f0:	f001 fbfa 	bl	800f0e8 <iprintf>
          pbuf_free(r);
 800d8f4:	6978      	ldr	r0, [r7, #20]
 800d8f6:	f7f9 f989 	bl	8006c0c <pbuf_free>
          goto icmperr;
 800d8fa:	e06c      	b.n	800d9d6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d8fc:	6879      	ldr	r1, [r7, #4]
 800d8fe:	6978      	ldr	r0, [r7, #20]
 800d900:	f7f9 fa9c 	bl	8006e3c <pbuf_copy>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d90a:	6978      	ldr	r0, [r7, #20]
 800d90c:	f7f9 f97e 	bl	8006c0c <pbuf_free>
          goto icmperr;
 800d910:	e061      	b.n	800d9d6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7f9 f97a 	bl	8006c0c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	607b      	str	r3, [r7, #4]
 800d91c:	e00f      	b.n	800d93e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d91e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d920:	330e      	adds	r3, #14
 800d922:	4619      	mov	r1, r3
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7f9 f8eb 	bl	8006b00 <pbuf_remove_header>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d006      	beq.n	800d93e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d930:	4b2e      	ldr	r3, [pc, #184]	@ (800d9ec <icmp_input+0x1f8>)
 800d932:	22c7      	movs	r2, #199	@ 0xc7
 800d934:	4930      	ldr	r1, [pc, #192]	@ (800d9f8 <icmp_input+0x204>)
 800d936:	482f      	ldr	r0, [pc, #188]	@ (800d9f4 <icmp_input+0x200>)
 800d938:	f001 fbd6 	bl	800f0e8 <iprintf>
          goto icmperr;
 800d93c:	e04b      	b.n	800d9d6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d944:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d946:	4619      	mov	r1, r3
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7f9 f8c9 	bl	8006ae0 <pbuf_add_header>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d12b      	bne.n	800d9ac <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d962:	4b20      	ldr	r3, [pc, #128]	@ (800d9e4 <icmp_input+0x1f0>)
 800d964:	691a      	ldr	r2, [r3, #16]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2200      	movs	r2, #0
 800d96e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	2200      	movs	r2, #0
 800d974:	709a      	strb	r2, [r3, #2]
 800d976:	2200      	movs	r2, #0
 800d978:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	22ff      	movs	r2, #255	@ 0xff
 800d97e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2200      	movs	r2, #0
 800d984:	729a      	strb	r2, [r3, #10]
 800d986:	2200      	movs	r2, #0
 800d988:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	9302      	str	r3, [sp, #8]
 800d98e:	2301      	movs	r3, #1
 800d990:	9301      	str	r3, [sp, #4]
 800d992:	2300      	movs	r3, #0
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	23ff      	movs	r3, #255	@ 0xff
 800d998:	2200      	movs	r2, #0
 800d99a:	69f9      	ldr	r1, [r7, #28]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fa75 	bl	800de8c <ip4_output_if>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d9a6:	e001      	b.n	800d9ac <icmp_input+0x1b8>
      break;
 800d9a8:	bf00      	nop
 800d9aa:	e000      	b.n	800d9ae <icmp_input+0x1ba>
      break;
 800d9ac:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f7f9 f92c 	bl	8006c0c <pbuf_free>
  return;
 800d9b4:	e013      	b.n	800d9de <icmp_input+0x1ea>
    goto lenerr;
 800d9b6:	bf00      	nop
 800d9b8:	e002      	b.n	800d9c0 <icmp_input+0x1cc>
    goto lenerr;
 800d9ba:	bf00      	nop
 800d9bc:	e000      	b.n	800d9c0 <icmp_input+0x1cc>
        goto lenerr;
 800d9be:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7f9 f923 	bl	8006c0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d9c6:	e00a      	b.n	800d9de <icmp_input+0x1ea>
        goto icmperr;
 800d9c8:	bf00      	nop
 800d9ca:	e004      	b.n	800d9d6 <icmp_input+0x1e2>
        goto icmperr;
 800d9cc:	bf00      	nop
 800d9ce:	e002      	b.n	800d9d6 <icmp_input+0x1e2>
          goto icmperr;
 800d9d0:	bf00      	nop
 800d9d2:	e000      	b.n	800d9d6 <icmp_input+0x1e2>
          goto icmperr;
 800d9d4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7f9 f918 	bl	8006c0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d9dc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d9de:	3728      	adds	r7, #40	@ 0x28
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	20005234 	.word	0x20005234
 800d9e8:	20005248 	.word	0x20005248
 800d9ec:	080124a4 	.word	0x080124a4
 800d9f0:	080124dc 	.word	0x080124dc
 800d9f4:	08012514 	.word	0x08012514
 800d9f8:	0801253c 	.word	0x0801253c

0800d9fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800da08:	78fb      	ldrb	r3, [r7, #3]
 800da0a:	461a      	mov	r2, r3
 800da0c:	2103      	movs	r1, #3
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 f814 	bl	800da3c <icmp_send_response>
}
 800da14:	bf00      	nop
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800da28:	78fb      	ldrb	r3, [r7, #3]
 800da2a:	461a      	mov	r2, r3
 800da2c:	210b      	movs	r1, #11
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f804 	bl	800da3c <icmp_send_response>
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b08c      	sub	sp, #48	@ 0x30
 800da40:	af04      	add	r7, sp, #16
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	460b      	mov	r3, r1
 800da46:	70fb      	strb	r3, [r7, #3]
 800da48:	4613      	mov	r3, r2
 800da4a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800da4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800da50:	2124      	movs	r1, #36	@ 0x24
 800da52:	2022      	movs	r0, #34	@ 0x22
 800da54:	f7f8 fdf6 	bl	8006644 <pbuf_alloc>
 800da58:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d04c      	beq.n	800dafa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	895b      	ldrh	r3, [r3, #10]
 800da64:	2b23      	cmp	r3, #35	@ 0x23
 800da66:	d806      	bhi.n	800da76 <icmp_send_response+0x3a>
 800da68:	4b26      	ldr	r3, [pc, #152]	@ (800db04 <icmp_send_response+0xc8>)
 800da6a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800da6e:	4926      	ldr	r1, [pc, #152]	@ (800db08 <icmp_send_response+0xcc>)
 800da70:	4826      	ldr	r0, [pc, #152]	@ (800db0c <icmp_send_response+0xd0>)
 800da72:	f001 fb39 	bl	800f0e8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	78fa      	ldrb	r2, [r7, #3]
 800da86:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	78ba      	ldrb	r2, [r7, #2]
 800da8c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	2200      	movs	r2, #0
 800da92:	711a      	strb	r2, [r3, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2200      	movs	r2, #0
 800da9c:	719a      	strb	r2, [r3, #6]
 800da9e:	2200      	movs	r2, #0
 800daa0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	f103 0008 	add.w	r0, r3, #8
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	221c      	movs	r2, #28
 800dab0:	4619      	mov	r1, r3
 800dab2:	f001 fbf4 	bl	800f29e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dabc:	f107 030c 	add.w	r3, r7, #12
 800dac0:	4618      	mov	r0, r3
 800dac2:	f000 f825 	bl	800db10 <ip4_route>
 800dac6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d011      	beq.n	800daf2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2200      	movs	r2, #0
 800dad2:	709a      	strb	r2, [r3, #2]
 800dad4:	2200      	movs	r2, #0
 800dad6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dad8:	f107 020c 	add.w	r2, r7, #12
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	9302      	str	r3, [sp, #8]
 800dae0:	2301      	movs	r3, #1
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	2300      	movs	r3, #0
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	23ff      	movs	r3, #255	@ 0xff
 800daea:	2100      	movs	r1, #0
 800daec:	69f8      	ldr	r0, [r7, #28]
 800daee:	f000 f9cd 	bl	800de8c <ip4_output_if>
  }
  pbuf_free(q);
 800daf2:	69f8      	ldr	r0, [r7, #28]
 800daf4:	f7f9 f88a 	bl	8006c0c <pbuf_free>
 800daf8:	e000      	b.n	800dafc <icmp_send_response+0xc0>
    return;
 800dafa:	bf00      	nop
}
 800dafc:	3720      	adds	r7, #32
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	080124a4 	.word	0x080124a4
 800db08:	08012570 	.word	0x08012570
 800db0c:	08012514 	.word	0x08012514

0800db10 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800db10:	b480      	push	{r7}
 800db12:	b085      	sub	sp, #20
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800db18:	4b33      	ldr	r3, [pc, #204]	@ (800dbe8 <ip4_route+0xd8>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	60fb      	str	r3, [r7, #12]
 800db1e:	e036      	b.n	800db8e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db26:	f003 0301 	and.w	r3, r3, #1
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d02b      	beq.n	800db88 <ip4_route+0x78>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db36:	089b      	lsrs	r3, r3, #2
 800db38:	f003 0301 	and.w	r3, r3, #1
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d022      	beq.n	800db88 <ip4_route+0x78>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3304      	adds	r3, #4
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d01d      	beq.n	800db88 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	3304      	adds	r3, #4
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	405a      	eors	r2, r3
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	3308      	adds	r3, #8
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4013      	ands	r3, r2
 800db60:	2b00      	cmp	r3, #0
 800db62:	d101      	bne.n	800db68 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	e038      	b.n	800dbda <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800db6e:	f003 0302 	and.w	r3, r3, #2
 800db72:	2b00      	cmp	r3, #0
 800db74:	d108      	bne.n	800db88 <ip4_route+0x78>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	330c      	adds	r3, #12
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	429a      	cmp	r2, r3
 800db82:	d101      	bne.n	800db88 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	e028      	b.n	800dbda <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	60fb      	str	r3, [r7, #12]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d1c5      	bne.n	800db20 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800db94:	4b15      	ldr	r3, [pc, #84]	@ (800dbec <ip4_route+0xdc>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d01a      	beq.n	800dbd2 <ip4_route+0xc2>
 800db9c:	4b13      	ldr	r3, [pc, #76]	@ (800dbec <ip4_route+0xdc>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dba4:	f003 0301 	and.w	r3, r3, #1
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d012      	beq.n	800dbd2 <ip4_route+0xc2>
 800dbac:	4b0f      	ldr	r3, [pc, #60]	@ (800dbec <ip4_route+0xdc>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dbb4:	f003 0304 	and.w	r3, r3, #4
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00a      	beq.n	800dbd2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dbbc:	4b0b      	ldr	r3, [pc, #44]	@ (800dbec <ip4_route+0xdc>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	2b7f      	cmp	r3, #127	@ 0x7f
 800dbd0:	d101      	bne.n	800dbd6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	e001      	b.n	800dbda <ip4_route+0xca>
  }

  return netif_default;
 800dbd6:	4b05      	ldr	r3, [pc, #20]	@ (800dbec <ip4_route+0xdc>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	20008144 	.word	0x20008144
 800dbec:	20008148 	.word	0x20008148

0800dbf0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d016      	beq.n	800dc36 <ip4_input_accept+0x46>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d011      	beq.n	800dc36 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dc12:	4b0b      	ldr	r3, [pc, #44]	@ (800dc40 <ip4_input_accept+0x50>)
 800dc14:	695a      	ldr	r2, [r3, #20]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d008      	beq.n	800dc32 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dc20:	4b07      	ldr	r3, [pc, #28]	@ (800dc40 <ip4_input_accept+0x50>)
 800dc22:	695b      	ldr	r3, [r3, #20]
 800dc24:	6879      	ldr	r1, [r7, #4]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 fa08 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800dc2c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e000      	b.n	800dc38 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	20005234 	.word	0x20005234

0800dc44 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	091b      	lsrs	r3, r3, #4
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b04      	cmp	r3, #4
 800dc5e:	d004      	beq.n	800dc6a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f7f8 ffd3 	bl	8006c0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dc66:	2300      	movs	r3, #0
 800dc68:	e107      	b.n	800de7a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	f003 030f 	and.w	r3, r3, #15
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	885b      	ldrh	r3, [r3, #2]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7f7 fc89 	bl	8005598 <lwip_htons>
 800dc86:	4603      	mov	r3, r0
 800dc88:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	891b      	ldrh	r3, [r3, #8]
 800dc8e:	89ba      	ldrh	r2, [r7, #12]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d204      	bcs.n	800dc9e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dc94:	89bb      	ldrh	r3, [r7, #12]
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f7f8 fe31 	bl	8006900 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	895b      	ldrh	r3, [r3, #10]
 800dca2:	89fa      	ldrh	r2, [r7, #14]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d807      	bhi.n	800dcb8 <ip4_input+0x74>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	891b      	ldrh	r3, [r3, #8]
 800dcac:	89ba      	ldrh	r2, [r7, #12]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d802      	bhi.n	800dcb8 <ip4_input+0x74>
 800dcb2:	89fb      	ldrh	r3, [r7, #14]
 800dcb4:	2b13      	cmp	r3, #19
 800dcb6:	d804      	bhi.n	800dcc2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7f8 ffa7 	bl	8006c0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	e0db      	b.n	800de7a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	691b      	ldr	r3, [r3, #16]
 800dcc6:	4a6f      	ldr	r2, [pc, #444]	@ (800de84 <ip4_input+0x240>)
 800dcc8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	4a6d      	ldr	r2, [pc, #436]	@ (800de84 <ip4_input+0x240>)
 800dcd0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dcd2:	4b6c      	ldr	r3, [pc, #432]	@ (800de84 <ip4_input+0x240>)
 800dcd4:	695b      	ldr	r3, [r3, #20]
 800dcd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dcda:	2be0      	cmp	r3, #224	@ 0xe0
 800dcdc:	d112      	bne.n	800dd04 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dce4:	f003 0301 	and.w	r3, r3, #1
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d007      	beq.n	800dcfe <ip4_input+0xba>
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <ip4_input+0xba>
      netif = inp;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	613b      	str	r3, [r7, #16]
 800dcfc:	e02a      	b.n	800dd54 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	613b      	str	r3, [r7, #16]
 800dd02:	e027      	b.n	800dd54 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dd04:	6838      	ldr	r0, [r7, #0]
 800dd06:	f7ff ff73 	bl	800dbf0 <ip4_input_accept>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <ip4_input+0xd2>
      netif = inp;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	613b      	str	r3, [r7, #16]
 800dd14:	e01e      	b.n	800dd54 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800dd1a:	4b5a      	ldr	r3, [pc, #360]	@ (800de84 <ip4_input+0x240>)
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd22:	d017      	beq.n	800dd54 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800dd24:	4b58      	ldr	r3, [pc, #352]	@ (800de88 <ip4_input+0x244>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	613b      	str	r3, [r7, #16]
 800dd2a:	e00e      	b.n	800dd4a <ip4_input+0x106>
          if (netif == inp) {
 800dd2c:	693a      	ldr	r2, [r7, #16]
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d006      	beq.n	800dd42 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dd34:	6938      	ldr	r0, [r7, #16]
 800dd36:	f7ff ff5b 	bl	800dbf0 <ip4_input_accept>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d108      	bne.n	800dd52 <ip4_input+0x10e>
 800dd40:	e000      	b.n	800dd44 <ip4_input+0x100>
            continue;
 800dd42:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	613b      	str	r3, [r7, #16]
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1ed      	bne.n	800dd2c <ip4_input+0xe8>
 800dd50:	e000      	b.n	800dd54 <ip4_input+0x110>
            break;
 800dd52:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd54:	4b4b      	ldr	r3, [pc, #300]	@ (800de84 <ip4_input+0x240>)
 800dd56:	691b      	ldr	r3, [r3, #16]
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 f96e 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d105      	bne.n	800dd72 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dd66:	4b47      	ldr	r3, [pc, #284]	@ (800de84 <ip4_input+0x240>)
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd6e:	2be0      	cmp	r3, #224	@ 0xe0
 800dd70:	d104      	bne.n	800dd7c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7f8 ff4a 	bl	8006c0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e07e      	b.n	800de7a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d104      	bne.n	800dd8c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7f8 ff42 	bl	8006c0c <pbuf_free>
    return ERR_OK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	e076      	b.n	800de7a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	88db      	ldrh	r3, [r3, #6]
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	461a      	mov	r2, r3
 800dd94:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800dd98:	4013      	ands	r3, r2
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00b      	beq.n	800ddb6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 fc92 	bl	800e6c8 <ip4_reass>
 800dda4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <ip4_input+0x16c>
      return ERR_OK;
 800ddac:	2300      	movs	r3, #0
 800ddae:	e064      	b.n	800de7a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ddb6:	4a33      	ldr	r2, [pc, #204]	@ (800de84 <ip4_input+0x240>)
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ddbc:	4a31      	ldr	r2, [pc, #196]	@ (800de84 <ip4_input+0x240>)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ddc2:	4a30      	ldr	r2, [pc, #192]	@ (800de84 <ip4_input+0x240>)
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	f003 030f 	and.w	r3, r3, #15
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	4b2a      	ldr	r3, [pc, #168]	@ (800de84 <ip4_input+0x240>)
 800ddda:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dddc:	89fb      	ldrh	r3, [r7, #14]
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7f8 fe8d 	bl	8006b00 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	7a5b      	ldrb	r3, [r3, #9]
 800ddea:	2b11      	cmp	r3, #17
 800ddec:	d006      	beq.n	800ddfc <ip4_input+0x1b8>
 800ddee:	2b11      	cmp	r3, #17
 800ddf0:	dc13      	bgt.n	800de1a <ip4_input+0x1d6>
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d00c      	beq.n	800de10 <ip4_input+0x1cc>
 800ddf6:	2b06      	cmp	r3, #6
 800ddf8:	d005      	beq.n	800de06 <ip4_input+0x1c2>
 800ddfa:	e00e      	b.n	800de1a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7fe fc68 	bl	800c6d4 <udp_input>
        break;
 800de04:	e026      	b.n	800de54 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7fa fd29 	bl	8008860 <tcp_input>
        break;
 800de0e:	e021      	b.n	800de54 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7ff fcee 	bl	800d7f4 <icmp_input>
        break;
 800de18:	e01c      	b.n	800de54 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800de1a:	4b1a      	ldr	r3, [pc, #104]	@ (800de84 <ip4_input+0x240>)
 800de1c:	695b      	ldr	r3, [r3, #20]
 800de1e:	6939      	ldr	r1, [r7, #16]
 800de20:	4618      	mov	r0, r3
 800de22:	f000 f90b 	bl	800e03c <ip4_addr_isbroadcast_u32>
 800de26:	4603      	mov	r3, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d10f      	bne.n	800de4c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800de2c:	4b15      	ldr	r3, [pc, #84]	@ (800de84 <ip4_input+0x240>)
 800de2e:	695b      	ldr	r3, [r3, #20]
 800de30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800de34:	2be0      	cmp	r3, #224	@ 0xe0
 800de36:	d009      	beq.n	800de4c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800de38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de3c:	4619      	mov	r1, r3
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7f8 fed1 	bl	8006be6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800de44:	2102      	movs	r1, #2
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fdd8 	bl	800d9fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7f8 fedd 	bl	8006c0c <pbuf_free>
        break;
 800de52:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800de54:	4b0b      	ldr	r3, [pc, #44]	@ (800de84 <ip4_input+0x240>)
 800de56:	2200      	movs	r2, #0
 800de58:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800de5a:	4b0a      	ldr	r3, [pc, #40]	@ (800de84 <ip4_input+0x240>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800de60:	4b08      	ldr	r3, [pc, #32]	@ (800de84 <ip4_input+0x240>)
 800de62:	2200      	movs	r2, #0
 800de64:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800de66:	4b07      	ldr	r3, [pc, #28]	@ (800de84 <ip4_input+0x240>)
 800de68:	2200      	movs	r2, #0
 800de6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800de6c:	4b05      	ldr	r3, [pc, #20]	@ (800de84 <ip4_input+0x240>)
 800de6e:	2200      	movs	r2, #0
 800de70:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800de72:	4b04      	ldr	r3, [pc, #16]	@ (800de84 <ip4_input+0x240>)
 800de74:	2200      	movs	r2, #0
 800de76:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3718      	adds	r7, #24
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	20005234 	.word	0x20005234
 800de88:	20008144 	.word	0x20008144

0800de8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b08a      	sub	sp, #40	@ 0x28
 800de90:	af04      	add	r7, sp, #16
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
 800de98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d009      	beq.n	800deb8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d003      	beq.n	800deb2 <ip4_output_if+0x26>
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d102      	bne.n	800deb8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800deb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb4:	3304      	adds	r3, #4
 800deb6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800deb8:	78fa      	ldrb	r2, [r7, #3]
 800deba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800debc:	9302      	str	r3, [sp, #8]
 800debe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dec2:	9301      	str	r3, [sp, #4]
 800dec4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	4613      	mov	r3, r2
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	6979      	ldr	r1, [r7, #20]
 800ded0:	68f8      	ldr	r0, [r7, #12]
 800ded2:	f000 f805 	bl	800dee0 <ip4_output_if_src>
 800ded6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b088      	sub	sp, #32
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	7b9b      	ldrb	r3, [r3, #14]
 800def2:	2b01      	cmp	r3, #1
 800def4:	d006      	beq.n	800df04 <ip4_output_if_src+0x24>
 800def6:	4b4b      	ldr	r3, [pc, #300]	@ (800e024 <ip4_output_if_src+0x144>)
 800def8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800defc:	494a      	ldr	r1, [pc, #296]	@ (800e028 <ip4_output_if_src+0x148>)
 800defe:	484b      	ldr	r0, [pc, #300]	@ (800e02c <ip4_output_if_src+0x14c>)
 800df00:	f001 f8f2 	bl	800f0e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d060      	beq.n	800dfcc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800df0a:	2314      	movs	r3, #20
 800df0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800df0e:	2114      	movs	r1, #20
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f7f8 fde5 	bl	8006ae0 <pbuf_add_header>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d002      	beq.n	800df22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800df1c:	f06f 0301 	mvn.w	r3, #1
 800df20:	e07c      	b.n	800e01c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	895b      	ldrh	r3, [r3, #10]
 800df2c:	2b13      	cmp	r3, #19
 800df2e:	d806      	bhi.n	800df3e <ip4_output_if_src+0x5e>
 800df30:	4b3c      	ldr	r3, [pc, #240]	@ (800e024 <ip4_output_if_src+0x144>)
 800df32:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800df36:	493e      	ldr	r1, [pc, #248]	@ (800e030 <ip4_output_if_src+0x150>)
 800df38:	483c      	ldr	r0, [pc, #240]	@ (800e02c <ip4_output_if_src+0x14c>)
 800df3a:	f001 f8d5 	bl	800f0e8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	78fa      	ldrb	r2, [r7, #3]
 800df42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800df4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800df54:	8b7b      	ldrh	r3, [r7, #26]
 800df56:	089b      	lsrs	r3, r3, #2
 800df58:	b29b      	uxth	r3, r3
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df60:	b2da      	uxtb	r2, r3
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800df6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	891b      	ldrh	r3, [r3, #8]
 800df72:	4618      	mov	r0, r3
 800df74:	f7f7 fb10 	bl	8005598 <lwip_htons>
 800df78:	4603      	mov	r3, r0
 800df7a:	461a      	mov	r2, r3
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	2200      	movs	r2, #0
 800df84:	719a      	strb	r2, [r3, #6]
 800df86:	2200      	movs	r2, #0
 800df88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800df8a:	4b2a      	ldr	r3, [pc, #168]	@ (800e034 <ip4_output_if_src+0x154>)
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f7 fb02 	bl	8005598 <lwip_htons>
 800df94:	4603      	mov	r3, r0
 800df96:	461a      	mov	r2, r3
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800df9c:	4b25      	ldr	r3, [pc, #148]	@ (800e034 <ip4_output_if_src+0x154>)
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	4b23      	ldr	r3, [pc, #140]	@ (800e034 <ip4_output_if_src+0x154>)
 800dfa6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d104      	bne.n	800dfb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dfae:	4b22      	ldr	r3, [pc, #136]	@ (800e038 <ip4_output_if_src+0x158>)
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	60da      	str	r2, [r3, #12]
 800dfb6:	e003      	b.n	800dfc0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	729a      	strb	r2, [r3, #10]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	72da      	strb	r2, [r3, #11]
 800dfca:	e00f      	b.n	800dfec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	895b      	ldrh	r3, [r3, #10]
 800dfd0:	2b13      	cmp	r3, #19
 800dfd2:	d802      	bhi.n	800dfda <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dfd4:	f06f 0301 	mvn.w	r3, #1
 800dfd8:	e020      	b.n	800e01c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dfe6:	f107 0314 	add.w	r3, r7, #20
 800dfea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00c      	beq.n	800e00e <ip4_output_if_src+0x12e>
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	891a      	ldrh	r2, [r3, #8]
 800dff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dffa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d906      	bls.n	800e00e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f000 fd53 	bl	800eab0 <ip4_frag>
 800e00a:	4603      	mov	r3, r0
 800e00c:	e006      	b.n	800e01c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e010:	695b      	ldr	r3, [r3, #20]
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	68f9      	ldr	r1, [r7, #12]
 800e016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e018:	4798      	blx	r3
 800e01a:	4603      	mov	r3, r0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3720      	adds	r7, #32
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	0801259c 	.word	0x0801259c
 800e028:	080125d0 	.word	0x080125d0
 800e02c:	080125dc 	.word	0x080125dc
 800e030:	08012604 	.word	0x08012604
 800e034:	200082a2 	.word	0x200082a2
 800e038:	080129e4 	.word	0x080129e4

0800e03c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b085      	sub	sp, #20
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e050:	d002      	beq.n	800e058 <ip4_addr_isbroadcast_u32+0x1c>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d101      	bne.n	800e05c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e058:	2301      	movs	r3, #1
 800e05a:	e02a      	b.n	800e0b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e062:	f003 0302 	and.w	r3, r3, #2
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	e021      	b.n	800e0b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	3304      	adds	r3, #4
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	429a      	cmp	r2, r3
 800e078:	d101      	bne.n	800e07e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e07a:	2300      	movs	r3, #0
 800e07c:	e019      	b.n	800e0b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	3304      	adds	r3, #4
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	405a      	eors	r2, r3
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	3308      	adds	r3, #8
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4013      	ands	r3, r2
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10d      	bne.n	800e0b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	3308      	adds	r3, #8
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	43da      	mvns	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	3308      	adds	r3, #8
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d101      	bne.n	800e0b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	e000      	b.n	800e0b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e0b0:	2300      	movs	r3, #0
  }
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3714      	adds	r7, #20
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr
	...

0800e0c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e0ca:	4b12      	ldr	r3, [pc, #72]	@ (800e114 <ip_reass_tmr+0x54>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e0d0:	e018      	b.n	800e104 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	7fdb      	ldrb	r3, [r3, #31]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00b      	beq.n	800e0f2 <ip_reass_tmr+0x32>
      r->timer--;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	7fdb      	ldrb	r3, [r3, #31]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	e008      	b.n	800e104 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e0fc:	68b9      	ldr	r1, [r7, #8]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 f80a 	bl	800e118 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1e3      	bne.n	800e0d2 <ip_reass_tmr+0x12>
    }
  }
}
 800e10a:	bf00      	nop
 800e10c:	bf00      	nop
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	200082a4 	.word	0x200082a4

0800e118 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b088      	sub	sp, #32
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e122:	2300      	movs	r3, #0
 800e124:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d105      	bne.n	800e13a <ip_reass_free_complete_datagram+0x22>
 800e12e:	4b45      	ldr	r3, [pc, #276]	@ (800e244 <ip_reass_free_complete_datagram+0x12c>)
 800e130:	22ab      	movs	r2, #171	@ 0xab
 800e132:	4945      	ldr	r1, [pc, #276]	@ (800e248 <ip_reass_free_complete_datagram+0x130>)
 800e134:	4845      	ldr	r0, [pc, #276]	@ (800e24c <ip_reass_free_complete_datagram+0x134>)
 800e136:	f000 ffd7 	bl	800f0e8 <iprintf>
  if (prev != NULL) {
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00a      	beq.n	800e156 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	429a      	cmp	r2, r3
 800e148:	d005      	beq.n	800e156 <ip_reass_free_complete_datagram+0x3e>
 800e14a:	4b3e      	ldr	r3, [pc, #248]	@ (800e244 <ip_reass_free_complete_datagram+0x12c>)
 800e14c:	22ad      	movs	r2, #173	@ 0xad
 800e14e:	4940      	ldr	r1, [pc, #256]	@ (800e250 <ip_reass_free_complete_datagram+0x138>)
 800e150:	483e      	ldr	r0, [pc, #248]	@ (800e24c <ip_reass_free_complete_datagram+0x134>)
 800e152:	f000 ffc9 	bl	800f0e8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	889b      	ldrh	r3, [r3, #4]
 800e162:	b29b      	uxth	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d12a      	bne.n	800e1be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	6858      	ldr	r0, [r3, #4]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	3308      	adds	r3, #8
 800e17e:	2214      	movs	r2, #20
 800e180:	4619      	mov	r1, r3
 800e182:	f001 f88c 	bl	800f29e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e186:	2101      	movs	r1, #1
 800e188:	69b8      	ldr	r0, [r7, #24]
 800e18a:	f7ff fc47 	bl	800da1c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e18e:	69b8      	ldr	r0, [r7, #24]
 800e190:	f7f8 fdc4 	bl	8006d1c <pbuf_clen>
 800e194:	4603      	mov	r3, r0
 800e196:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e198:	8bfa      	ldrh	r2, [r7, #30]
 800e19a:	8a7b      	ldrh	r3, [r7, #18]
 800e19c:	4413      	add	r3, r2
 800e19e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1a2:	db05      	blt.n	800e1b0 <ip_reass_free_complete_datagram+0x98>
 800e1a4:	4b27      	ldr	r3, [pc, #156]	@ (800e244 <ip_reass_free_complete_datagram+0x12c>)
 800e1a6:	22bc      	movs	r2, #188	@ 0xbc
 800e1a8:	492a      	ldr	r1, [pc, #168]	@ (800e254 <ip_reass_free_complete_datagram+0x13c>)
 800e1aa:	4828      	ldr	r0, [pc, #160]	@ (800e24c <ip_reass_free_complete_datagram+0x134>)
 800e1ac:	f000 ff9c 	bl	800f0e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e1b0:	8bfa      	ldrh	r2, [r7, #30]
 800e1b2:	8a7b      	ldrh	r3, [r7, #18]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e1b8:	69b8      	ldr	r0, [r7, #24]
 800e1ba:	f7f8 fd27 	bl	8006c0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e1c4:	e01f      	b.n	800e206 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f7f8 fda0 	bl	8006d1c <pbuf_clen>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e1e0:	8bfa      	ldrh	r2, [r7, #30]
 800e1e2:	8a7b      	ldrh	r3, [r7, #18]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1ea:	db05      	blt.n	800e1f8 <ip_reass_free_complete_datagram+0xe0>
 800e1ec:	4b15      	ldr	r3, [pc, #84]	@ (800e244 <ip_reass_free_complete_datagram+0x12c>)
 800e1ee:	22cc      	movs	r2, #204	@ 0xcc
 800e1f0:	4918      	ldr	r1, [pc, #96]	@ (800e254 <ip_reass_free_complete_datagram+0x13c>)
 800e1f2:	4816      	ldr	r0, [pc, #88]	@ (800e24c <ip_reass_free_complete_datagram+0x134>)
 800e1f4:	f000 ff78 	bl	800f0e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e1f8:	8bfa      	ldrh	r2, [r7, #30]
 800e1fa:	8a7b      	ldrh	r3, [r7, #18]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f7f8 fd03 	bl	8006c0c <pbuf_free>
  while (p != NULL) {
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1dc      	bne.n	800e1c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f8c2 	bl	800e398 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e214:	4b10      	ldr	r3, [pc, #64]	@ (800e258 <ip_reass_free_complete_datagram+0x140>)
 800e216:	881b      	ldrh	r3, [r3, #0]
 800e218:	8bfa      	ldrh	r2, [r7, #30]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d905      	bls.n	800e22a <ip_reass_free_complete_datagram+0x112>
 800e21e:	4b09      	ldr	r3, [pc, #36]	@ (800e244 <ip_reass_free_complete_datagram+0x12c>)
 800e220:	22d2      	movs	r2, #210	@ 0xd2
 800e222:	490e      	ldr	r1, [pc, #56]	@ (800e25c <ip_reass_free_complete_datagram+0x144>)
 800e224:	4809      	ldr	r0, [pc, #36]	@ (800e24c <ip_reass_free_complete_datagram+0x134>)
 800e226:	f000 ff5f 	bl	800f0e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e22a:	4b0b      	ldr	r3, [pc, #44]	@ (800e258 <ip_reass_free_complete_datagram+0x140>)
 800e22c:	881a      	ldrh	r2, [r3, #0]
 800e22e:	8bfb      	ldrh	r3, [r7, #30]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	b29a      	uxth	r2, r3
 800e234:	4b08      	ldr	r3, [pc, #32]	@ (800e258 <ip_reass_free_complete_datagram+0x140>)
 800e236:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e238:	8bfb      	ldrh	r3, [r7, #30]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3720      	adds	r7, #32
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	08012634 	.word	0x08012634
 800e248:	08012670 	.word	0x08012670
 800e24c:	0801267c 	.word	0x0801267c
 800e250:	080126a4 	.word	0x080126a4
 800e254:	080126b8 	.word	0x080126b8
 800e258:	200082a8 	.word	0x200082a8
 800e25c:	080126d8 	.word	0x080126d8

0800e260 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b08a      	sub	sp, #40	@ 0x28
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e26a:	2300      	movs	r3, #0
 800e26c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e26e:	2300      	movs	r3, #0
 800e270:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e272:	2300      	movs	r3, #0
 800e274:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e276:	2300      	movs	r3, #0
 800e278:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e27a:	2300      	movs	r3, #0
 800e27c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e27e:	4b28      	ldr	r3, [pc, #160]	@ (800e320 <ip_reass_remove_oldest_datagram+0xc0>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e284:	e030      	b.n	800e2e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e288:	695a      	ldr	r2, [r3, #20]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d10c      	bne.n	800e2ac <ip_reass_remove_oldest_datagram+0x4c>
 800e292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e294:	699a      	ldr	r2, [r3, #24]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d106      	bne.n	800e2ac <ip_reass_remove_oldest_datagram+0x4c>
 800e29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a0:	899a      	ldrh	r2, [r3, #12]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	889b      	ldrh	r3, [r3, #4]
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d014      	beq.n	800e2d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d104      	bne.n	800e2c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	61bb      	str	r3, [r7, #24]
 800e2c0:	e009      	b.n	800e2d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c4:	7fda      	ldrb	r2, [r3, #31]
 800e2c6:	6a3b      	ldr	r3, [r7, #32]
 800e2c8:	7fdb      	ldrb	r3, [r3, #31]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d803      	bhi.n	800e2d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d001      	beq.n	800e2e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1cb      	bne.n	800e286 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e2ee:	6a3b      	ldr	r3, [r7, #32]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d008      	beq.n	800e306 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e2f4:	69b9      	ldr	r1, [r7, #24]
 800e2f6:	6a38      	ldr	r0, [r7, #32]
 800e2f8:	f7ff ff0e 	bl	800e118 <ip_reass_free_complete_datagram>
 800e2fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	4413      	add	r3, r2
 800e304:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e306:	697a      	ldr	r2, [r7, #20]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	da02      	bge.n	800e314 <ip_reass_remove_oldest_datagram+0xb4>
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	2b01      	cmp	r3, #1
 800e312:	dcac      	bgt.n	800e26e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e314:	697b      	ldr	r3, [r7, #20]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3728      	adds	r7, #40	@ 0x28
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	200082a4 	.word	0x200082a4

0800e324 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e32e:	2004      	movs	r0, #4
 800e330:	f7f7 fda6 	bl	8005e80 <memp_malloc>
 800e334:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d110      	bne.n	800e35e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff ff8e 	bl	800e260 <ip_reass_remove_oldest_datagram>
 800e344:	4602      	mov	r2, r0
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	4293      	cmp	r3, r2
 800e34a:	dc03      	bgt.n	800e354 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e34c:	2004      	movs	r0, #4
 800e34e:	f7f7 fd97 	bl	8005e80 <memp_malloc>
 800e352:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d101      	bne.n	800e35e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e35a:	2300      	movs	r3, #0
 800e35c:	e016      	b.n	800e38c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e35e:	2220      	movs	r2, #32
 800e360:	2100      	movs	r1, #0
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f000 ff25 	bl	800f1b2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	220f      	movs	r2, #15
 800e36c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e36e:	4b09      	ldr	r3, [pc, #36]	@ (800e394 <ip_reass_enqueue_new_datagram+0x70>)
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e376:	4a07      	ldr	r2, [pc, #28]	@ (800e394 <ip_reass_enqueue_new_datagram+0x70>)
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3308      	adds	r3, #8
 800e380:	2214      	movs	r2, #20
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	f000 ff8a 	bl	800f29e <memcpy>
  return ipr;
 800e38a:	68fb      	ldr	r3, [r7, #12]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	200082a4 	.word	0x200082a4

0800e398 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e3a2:	4b10      	ldr	r3, [pc, #64]	@ (800e3e4 <ip_reass_dequeue_datagram+0x4c>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d104      	bne.n	800e3b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a0c      	ldr	r2, [pc, #48]	@ (800e3e4 <ip_reass_dequeue_datagram+0x4c>)
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	e00d      	b.n	800e3d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d106      	bne.n	800e3ca <ip_reass_dequeue_datagram+0x32>
 800e3bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e3e8 <ip_reass_dequeue_datagram+0x50>)
 800e3be:	f240 1245 	movw	r2, #325	@ 0x145
 800e3c2:	490a      	ldr	r1, [pc, #40]	@ (800e3ec <ip_reass_dequeue_datagram+0x54>)
 800e3c4:	480a      	ldr	r0, [pc, #40]	@ (800e3f0 <ip_reass_dequeue_datagram+0x58>)
 800e3c6:	f000 fe8f 	bl	800f0e8 <iprintf>
    prev->next = ipr->next;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e3d2:	6879      	ldr	r1, [r7, #4]
 800e3d4:	2004      	movs	r0, #4
 800e3d6:	f7f7 fdc3 	bl	8005f60 <memp_free>
}
 800e3da:	bf00      	nop
 800e3dc:	3708      	adds	r7, #8
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	200082a4 	.word	0x200082a4
 800e3e8:	08012634 	.word	0x08012634
 800e3ec:	080126fc 	.word	0x080126fc
 800e3f0:	0801267c 	.word	0x0801267c

0800e3f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b08c      	sub	sp, #48	@ 0x30
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e400:	2300      	movs	r3, #0
 800e402:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e404:	2301      	movs	r3, #1
 800e406:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e40e:	69fb      	ldr	r3, [r7, #28]
 800e410:	885b      	ldrh	r3, [r3, #2]
 800e412:	b29b      	uxth	r3, r3
 800e414:	4618      	mov	r0, r3
 800e416:	f7f7 f8bf 	bl	8005598 <lwip_htons>
 800e41a:	4603      	mov	r3, r0
 800e41c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	f003 030f 	and.w	r3, r3, #15
 800e426:	b2db      	uxtb	r3, r3
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e42c:	7e7b      	ldrb	r3, [r7, #25]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	8b7a      	ldrh	r2, [r7, #26]
 800e432:	429a      	cmp	r2, r3
 800e434:	d202      	bcs.n	800e43c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e43a:	e135      	b.n	800e6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e43c:	7e7b      	ldrb	r3, [r7, #25]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	8b7a      	ldrh	r2, [r7, #26]
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	88db      	ldrh	r3, [r3, #6]
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f7 f8a3 	bl	8005598 <lwip_htons>
 800e452:	4603      	mov	r3, r0
 800e454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e458:	b29b      	uxth	r3, r3
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800e464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e466:	2200      	movs	r2, #0
 800e468:	701a      	strb	r2, [r3, #0]
 800e46a:	2200      	movs	r2, #0
 800e46c:	705a      	strb	r2, [r3, #1]
 800e46e:	2200      	movs	r2, #0
 800e470:	709a      	strb	r2, [r3, #2]
 800e472:	2200      	movs	r2, #0
 800e474:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e478:	8afa      	ldrh	r2, [r7, #22]
 800e47a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e47c:	8afa      	ldrh	r2, [r7, #22]
 800e47e:	8b7b      	ldrh	r3, [r7, #26]
 800e480:	4413      	add	r3, r2
 800e482:	b29a      	uxth	r2, r3
 800e484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e486:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48a:	88db      	ldrh	r3, [r3, #6]
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	8afa      	ldrh	r2, [r7, #22]
 800e490:	429a      	cmp	r2, r3
 800e492:	d902      	bls.n	800e49a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e498:	e106      	b.n	800e6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4a0:	e068      	b.n	800e574 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4aa:	889b      	ldrh	r3, [r3, #4]
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	889b      	ldrh	r3, [r3, #4]
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d235      	bcs.n	800e524 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d020      	beq.n	800e506 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c6:	889b      	ldrh	r3, [r3, #4]
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4cc:	88db      	ldrh	r3, [r3, #6]
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d307      	bcc.n	800e4e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d6:	88db      	ldrh	r3, [r3, #6]
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	889b      	ldrh	r3, [r3, #4]
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d902      	bls.n	800e4ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e4e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4e8:	e0de      	b.n	800e6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ec:	68ba      	ldr	r2, [r7, #8]
 800e4ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f2:	88db      	ldrh	r3, [r3, #6]
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f8:	889b      	ldrh	r3, [r3, #4]
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d03d      	beq.n	800e57c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e500:	2300      	movs	r3, #0
 800e502:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e504:	e03a      	b.n	800e57c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e508:	88db      	ldrh	r3, [r3, #6]
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	889b      	ldrh	r3, [r3, #4]
 800e510:	b29b      	uxth	r3, r3
 800e512:	429a      	cmp	r2, r3
 800e514:	d902      	bls.n	800e51c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e51a:	e0c5      	b.n	800e6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	68ba      	ldr	r2, [r7, #8]
 800e520:	605a      	str	r2, [r3, #4]
      break;
 800e522:	e02b      	b.n	800e57c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e526:	889b      	ldrh	r3, [r3, #4]
 800e528:	b29a      	uxth	r2, r3
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	889b      	ldrh	r3, [r3, #4]
 800e52e:	b29b      	uxth	r3, r3
 800e530:	429a      	cmp	r2, r3
 800e532:	d102      	bne.n	800e53a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e538:	e0b6      	b.n	800e6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53c:	889b      	ldrh	r3, [r3, #4]
 800e53e:	b29a      	uxth	r2, r3
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	88db      	ldrh	r3, [r3, #6]
 800e544:	b29b      	uxth	r3, r3
 800e546:	429a      	cmp	r2, r3
 800e548:	d202      	bcs.n	800e550 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e54a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e54e:	e0ab      	b.n	800e6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e552:	2b00      	cmp	r3, #0
 800e554:	d009      	beq.n	800e56a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e558:	88db      	ldrh	r3, [r3, #6]
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	889b      	ldrh	r3, [r3, #4]
 800e560:	b29b      	uxth	r3, r3
 800e562:	429a      	cmp	r2, r3
 800e564:	d001      	beq.n	800e56a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e566:	2300      	movs	r3, #0
 800e568:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800e574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e576:	2b00      	cmp	r3, #0
 800e578:	d193      	bne.n	800e4a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e57a:	e000      	b.n	800e57e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e57c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e580:	2b00      	cmp	r3, #0
 800e582:	d12d      	bne.n	800e5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e586:	2b00      	cmp	r3, #0
 800e588:	d01c      	beq.n	800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58c:	88db      	ldrh	r3, [r3, #6]
 800e58e:	b29a      	uxth	r2, r3
 800e590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e592:	889b      	ldrh	r3, [r3, #4]
 800e594:	b29b      	uxth	r3, r3
 800e596:	429a      	cmp	r2, r3
 800e598:	d906      	bls.n	800e5a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e59a:	4b45      	ldr	r3, [pc, #276]	@ (800e6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e59c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800e5a0:	4944      	ldr	r1, [pc, #272]	@ (800e6b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e5a2:	4845      	ldr	r0, [pc, #276]	@ (800e6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e5a4:	f000 fda0 	bl	800f0e8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5aa:	68ba      	ldr	r2, [r7, #8]
 800e5ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b0:	88db      	ldrh	r3, [r3, #6]
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b6:	889b      	ldrh	r3, [r3, #4]
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d010      	beq.n	800e5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	623b      	str	r3, [r7, #32]
 800e5c2:	e00d      	b.n	800e5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d006      	beq.n	800e5da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e5cc:	4b38      	ldr	r3, [pc, #224]	@ (800e6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e5ce:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800e5d2:	493a      	ldr	r1, [pc, #232]	@ (800e6bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e5d4:	4838      	ldr	r0, [pc, #224]	@ (800e6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e5d6:	f000 fd87 	bl	800f0e8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	68ba      	ldr	r2, [r7, #8]
 800e5de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d105      	bne.n	800e5f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	7f9b      	ldrb	r3, [r3, #30]
 800e5ea:	f003 0301 	and.w	r3, r3, #1
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d059      	beq.n	800e6a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e5f2:	6a3b      	ldr	r3, [r7, #32]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d04f      	beq.n	800e698 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d006      	beq.n	800e60e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	889b      	ldrh	r3, [r3, #4]
 800e608:	b29b      	uxth	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d002      	beq.n	800e614 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e60e:	2300      	movs	r3, #0
 800e610:	623b      	str	r3, [r7, #32]
 800e612:	e041      	b.n	800e698 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e616:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800e618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e61e:	e012      	b.n	800e646 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800e626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e628:	88db      	ldrh	r3, [r3, #6]
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62e:	889b      	ldrh	r3, [r3, #4]
 800e630:	b29b      	uxth	r3, r3
 800e632:	429a      	cmp	r2, r3
 800e634:	d002      	beq.n	800e63c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	623b      	str	r3, [r7, #32]
            break;
 800e63a:	e007      	b.n	800e64c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800e640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800e646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1e9      	bne.n	800e620 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d022      	beq.n	800e698 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d106      	bne.n	800e668 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e65a:	4b15      	ldr	r3, [pc, #84]	@ (800e6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e65c:	f240 12df 	movw	r2, #479	@ 0x1df
 800e660:	4917      	ldr	r1, [pc, #92]	@ (800e6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e662:	4815      	ldr	r0, [pc, #84]	@ (800e6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e664:	f000 fd40 	bl	800f0e8 <iprintf>
          LWIP_ASSERT("sanity check",
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e670:	429a      	cmp	r2, r3
 800e672:	d106      	bne.n	800e682 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e674:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e676:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e67a:	4911      	ldr	r1, [pc, #68]	@ (800e6c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e67c:	480e      	ldr	r0, [pc, #56]	@ (800e6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e67e:	f000 fd33 	bl	800f0e8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d006      	beq.n	800e698 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e68a:	4b09      	ldr	r3, [pc, #36]	@ (800e6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e68c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800e690:	490c      	ldr	r1, [pc, #48]	@ (800e6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e692:	4809      	ldr	r0, [pc, #36]	@ (800e6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e694:	f000 fd28 	bl	800f0e8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	bf14      	ite	ne
 800e69e:	2301      	movne	r3, #1
 800e6a0:	2300      	moveq	r3, #0
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	e000      	b.n	800e6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3730      	adds	r7, #48	@ 0x30
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	08012634 	.word	0x08012634
 800e6b4:	08012718 	.word	0x08012718
 800e6b8:	0801267c 	.word	0x0801267c
 800e6bc:	08012738 	.word	0x08012738
 800e6c0:	08012770 	.word	0x08012770
 800e6c4:	08012780 	.word	0x08012780

0800e6c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b08e      	sub	sp, #56	@ 0x38
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	f003 030f 	and.w	r3, r3, #15
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b14      	cmp	r3, #20
 800e6e6:	f040 8171 	bne.w	800e9cc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ec:	88db      	ldrh	r3, [r3, #6]
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7f6 ff51 	bl	8005598 <lwip_htons>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	00db      	lsls	r3, r3, #3
 800e700:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e704:	885b      	ldrh	r3, [r3, #2]
 800e706:	b29b      	uxth	r3, r3
 800e708:	4618      	mov	r0, r3
 800e70a:	f7f6 ff45 	bl	8005598 <lwip_htons>
 800e70e:	4603      	mov	r3, r0
 800e710:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	f003 030f 	and.w	r3, r3, #15
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800e722:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e726:	b29b      	uxth	r3, r3
 800e728:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e72a:	429a      	cmp	r2, r3
 800e72c:	f0c0 8150 	bcc.w	800e9d0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e730:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e734:	b29b      	uxth	r3, r3
 800e736:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7f8 faed 	bl	8006d1c <pbuf_clen>
 800e742:	4603      	mov	r3, r0
 800e744:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e746:	4b8c      	ldr	r3, [pc, #560]	@ (800e978 <ip4_reass+0x2b0>)
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	461a      	mov	r2, r3
 800e74c:	8c3b      	ldrh	r3, [r7, #32]
 800e74e:	4413      	add	r3, r2
 800e750:	2b0a      	cmp	r3, #10
 800e752:	dd10      	ble.n	800e776 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e754:	8c3b      	ldrh	r3, [r7, #32]
 800e756:	4619      	mov	r1, r3
 800e758:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e75a:	f7ff fd81 	bl	800e260 <ip_reass_remove_oldest_datagram>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	f000 8137 	beq.w	800e9d4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e766:	4b84      	ldr	r3, [pc, #528]	@ (800e978 <ip4_reass+0x2b0>)
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	461a      	mov	r2, r3
 800e76c:	8c3b      	ldrh	r3, [r7, #32]
 800e76e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e770:	2b0a      	cmp	r3, #10
 800e772:	f300 812f 	bgt.w	800e9d4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e776:	4b81      	ldr	r3, [pc, #516]	@ (800e97c <ip4_reass+0x2b4>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e77c:	e015      	b.n	800e7aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e780:	695a      	ldr	r2, [r3, #20]
 800e782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	429a      	cmp	r2, r3
 800e788:	d10c      	bne.n	800e7a4 <ip4_reass+0xdc>
 800e78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e78c:	699a      	ldr	r2, [r3, #24]
 800e78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	429a      	cmp	r2, r3
 800e794:	d106      	bne.n	800e7a4 <ip4_reass+0xdc>
 800e796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e798:	899a      	ldrh	r2, [r3, #12]
 800e79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e79c:	889b      	ldrh	r3, [r3, #4]
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d006      	beq.n	800e7b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1e6      	bne.n	800e77e <ip4_reass+0xb6>
 800e7b0:	e000      	b.n	800e7b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e7b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d109      	bne.n	800e7ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e7ba:	8c3b      	ldrh	r3, [r7, #32]
 800e7bc:	4619      	mov	r1, r3
 800e7be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e7c0:	f7ff fdb0 	bl	800e324 <ip_reass_enqueue_new_datagram>
 800e7c4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d11c      	bne.n	800e806 <ip4_reass+0x13e>
      goto nullreturn;
 800e7cc:	e105      	b.n	800e9da <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d0:	88db      	ldrh	r3, [r3, #6]
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7f6 fedf 	bl	8005598 <lwip_htons>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d110      	bne.n	800e806 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7e6:	89db      	ldrh	r3, [r3, #14]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7f6 fed5 	bl	8005598 <lwip_htons>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d006      	beq.n	800e806 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	2214      	movs	r2, #20
 800e7fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e800:	4618      	mov	r0, r3
 800e802:	f000 fd4c 	bl	800f29e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e808:	88db      	ldrh	r3, [r3, #6]
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	f003 0320 	and.w	r3, r3, #32
 800e810:	2b00      	cmp	r3, #0
 800e812:	bf0c      	ite	eq
 800e814:	2301      	moveq	r3, #1
 800e816:	2300      	movne	r3, #0
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d00e      	beq.n	800e840 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e822:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e826:	4413      	add	r3, r2
 800e828:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e82a:	8b7a      	ldrh	r2, [r7, #26]
 800e82c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e82e:	429a      	cmp	r2, r3
 800e830:	f0c0 80a0 	bcc.w	800e974 <ip4_reass+0x2ac>
 800e834:	8b7b      	ldrh	r3, [r7, #26]
 800e836:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800e83a:	4293      	cmp	r3, r2
 800e83c:	f200 809a 	bhi.w	800e974 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e840:	69fa      	ldr	r2, [r7, #28]
 800e842:	6879      	ldr	r1, [r7, #4]
 800e844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e846:	f7ff fdd5 	bl	800e3f4 <ip_reass_chain_frag_into_datagram_and_validate>
 800e84a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e852:	f000 809b 	beq.w	800e98c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e856:	4b48      	ldr	r3, [pc, #288]	@ (800e978 <ip4_reass+0x2b0>)
 800e858:	881a      	ldrh	r2, [r3, #0]
 800e85a:	8c3b      	ldrh	r3, [r7, #32]
 800e85c:	4413      	add	r3, r2
 800e85e:	b29a      	uxth	r2, r3
 800e860:	4b45      	ldr	r3, [pc, #276]	@ (800e978 <ip4_reass+0x2b0>)
 800e862:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00d      	beq.n	800e886 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e86a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e86c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e86e:	4413      	add	r3, r2
 800e870:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e874:	8a7a      	ldrh	r2, [r7, #18]
 800e876:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e87a:	7f9b      	ldrb	r3, [r3, #30]
 800e87c:	f043 0301 	orr.w	r3, r3, #1
 800e880:	b2da      	uxtb	r2, r3
 800e882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e884:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d171      	bne.n	800e970 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e88e:	8b9b      	ldrh	r3, [r3, #28]
 800e890:	3314      	adds	r3, #20
 800e892:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a8:	3308      	adds	r3, #8
 800e8aa:	2214      	movs	r2, #20
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8b0:	f000 fcf5 	bl	800f29e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e8b4:	8a3b      	ldrh	r3, [r7, #16]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7f6 fe6e 	bl	8005598 <lwip_htons>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	461a      	mov	r2, r3
 800e8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	719a      	strb	r2, [r3, #6]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	729a      	strb	r2, [r3, #10]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e8de:	e00d      	b.n	800e8fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e8e6:	2114      	movs	r1, #20
 800e8e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e8ea:	f7f8 f909 	bl	8006b00 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e8ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7f8 fa4d 	bl	8006d90 <pbuf_cat>
      r = iprh->next_pbuf;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800e8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1ee      	bne.n	800e8e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e902:	4b1e      	ldr	r3, [pc, #120]	@ (800e97c <ip4_reass+0x2b4>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e908:	429a      	cmp	r2, r3
 800e90a:	d102      	bne.n	800e912 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e90c:	2300      	movs	r3, #0
 800e90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e910:	e010      	b.n	800e934 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e912:	4b1a      	ldr	r3, [pc, #104]	@ (800e97c <ip4_reass+0x2b4>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e918:	e007      	b.n	800e92a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e920:	429a      	cmp	r2, r3
 800e922:	d006      	beq.n	800e932 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d1f4      	bne.n	800e91a <ip4_reass+0x252>
 800e930:	e000      	b.n	800e934 <ip4_reass+0x26c>
          break;
 800e932:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e934:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e936:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e938:	f7ff fd2e 	bl	800e398 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f7f8 f9ed 	bl	8006d1c <pbuf_clen>
 800e942:	4603      	mov	r3, r0
 800e944:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e946:	4b0c      	ldr	r3, [pc, #48]	@ (800e978 <ip4_reass+0x2b0>)
 800e948:	881b      	ldrh	r3, [r3, #0]
 800e94a:	8c3a      	ldrh	r2, [r7, #32]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d906      	bls.n	800e95e <ip4_reass+0x296>
 800e950:	4b0b      	ldr	r3, [pc, #44]	@ (800e980 <ip4_reass+0x2b8>)
 800e952:	f240 229b 	movw	r2, #667	@ 0x29b
 800e956:	490b      	ldr	r1, [pc, #44]	@ (800e984 <ip4_reass+0x2bc>)
 800e958:	480b      	ldr	r0, [pc, #44]	@ (800e988 <ip4_reass+0x2c0>)
 800e95a:	f000 fbc5 	bl	800f0e8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e95e:	4b06      	ldr	r3, [pc, #24]	@ (800e978 <ip4_reass+0x2b0>)
 800e960:	881a      	ldrh	r2, [r3, #0]
 800e962:	8c3b      	ldrh	r3, [r7, #32]
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	b29a      	uxth	r2, r3
 800e968:	4b03      	ldr	r3, [pc, #12]	@ (800e978 <ip4_reass+0x2b0>)
 800e96a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	e038      	b.n	800e9e2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e970:	2300      	movs	r3, #0
 800e972:	e036      	b.n	800e9e2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e974:	bf00      	nop
 800e976:	e00a      	b.n	800e98e <ip4_reass+0x2c6>
 800e978:	200082a8 	.word	0x200082a8
 800e97c:	200082a4 	.word	0x200082a4
 800e980:	08012634 	.word	0x08012634
 800e984:	080127a4 	.word	0x080127a4
 800e988:	0801267c 	.word	0x0801267c
    goto nullreturn_ipr;
 800e98c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e990:	2b00      	cmp	r3, #0
 800e992:	d106      	bne.n	800e9a2 <ip4_reass+0x2da>
 800e994:	4b15      	ldr	r3, [pc, #84]	@ (800e9ec <ip4_reass+0x324>)
 800e996:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800e99a:	4915      	ldr	r1, [pc, #84]	@ (800e9f0 <ip4_reass+0x328>)
 800e99c:	4815      	ldr	r0, [pc, #84]	@ (800e9f4 <ip4_reass+0x32c>)
 800e99e:	f000 fba3 	bl	800f0e8 <iprintf>
  if (ipr->p == NULL) {
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d116      	bne.n	800e9d8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e9aa:	4b13      	ldr	r3, [pc, #76]	@ (800e9f8 <ip4_reass+0x330>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d006      	beq.n	800e9c2 <ip4_reass+0x2fa>
 800e9b4:	4b0d      	ldr	r3, [pc, #52]	@ (800e9ec <ip4_reass+0x324>)
 800e9b6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e9ba:	4910      	ldr	r1, [pc, #64]	@ (800e9fc <ip4_reass+0x334>)
 800e9bc:	480d      	ldr	r0, [pc, #52]	@ (800e9f4 <ip4_reass+0x32c>)
 800e9be:	f000 fb93 	bl	800f0e8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9c6:	f7ff fce7 	bl	800e398 <ip_reass_dequeue_datagram>
 800e9ca:	e006      	b.n	800e9da <ip4_reass+0x312>
    goto nullreturn;
 800e9cc:	bf00      	nop
 800e9ce:	e004      	b.n	800e9da <ip4_reass+0x312>
    goto nullreturn;
 800e9d0:	bf00      	nop
 800e9d2:	e002      	b.n	800e9da <ip4_reass+0x312>
      goto nullreturn;
 800e9d4:	bf00      	nop
 800e9d6:	e000      	b.n	800e9da <ip4_reass+0x312>
  }

nullreturn:
 800e9d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7f8 f916 	bl	8006c0c <pbuf_free>
  return NULL;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3738      	adds	r7, #56	@ 0x38
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	08012634 	.word	0x08012634
 800e9f0:	080127c0 	.word	0x080127c0
 800e9f4:	0801267c 	.word	0x0801267c
 800e9f8:	200082a4 	.word	0x200082a4
 800e9fc:	080127cc 	.word	0x080127cc

0800ea00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ea04:	2005      	movs	r0, #5
 800ea06:	f7f7 fa3b 	bl	8005e80 <memp_malloc>
 800ea0a:	4603      	mov	r3, r0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d106      	bne.n	800ea2c <ip_frag_free_pbuf_custom_ref+0x1c>
 800ea1e:	4b07      	ldr	r3, [pc, #28]	@ (800ea3c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ea20:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800ea24:	4906      	ldr	r1, [pc, #24]	@ (800ea40 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ea26:	4807      	ldr	r0, [pc, #28]	@ (800ea44 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ea28:	f000 fb5e 	bl	800f0e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ea2c:	6879      	ldr	r1, [r7, #4]
 800ea2e:	2005      	movs	r0, #5
 800ea30:	f7f7 fa96 	bl	8005f60 <memp_free>
}
 800ea34:	bf00      	nop
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	08012634 	.word	0x08012634
 800ea40:	080127ec 	.word	0x080127ec
 800ea44:	0801267c 	.word	0x0801267c

0800ea48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d106      	bne.n	800ea68 <ipfrag_free_pbuf_custom+0x20>
 800ea5a:	4b11      	ldr	r3, [pc, #68]	@ (800eaa0 <ipfrag_free_pbuf_custom+0x58>)
 800ea5c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800ea60:	4910      	ldr	r1, [pc, #64]	@ (800eaa4 <ipfrag_free_pbuf_custom+0x5c>)
 800ea62:	4811      	ldr	r0, [pc, #68]	@ (800eaa8 <ipfrag_free_pbuf_custom+0x60>)
 800ea64:	f000 fb40 	bl	800f0e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d006      	beq.n	800ea7e <ipfrag_free_pbuf_custom+0x36>
 800ea70:	4b0b      	ldr	r3, [pc, #44]	@ (800eaa0 <ipfrag_free_pbuf_custom+0x58>)
 800ea72:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800ea76:	490d      	ldr	r1, [pc, #52]	@ (800eaac <ipfrag_free_pbuf_custom+0x64>)
 800ea78:	480b      	ldr	r0, [pc, #44]	@ (800eaa8 <ipfrag_free_pbuf_custom+0x60>)
 800ea7a:	f000 fb35 	bl	800f0e8 <iprintf>
  if (pcr->original != NULL) {
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d004      	beq.n	800ea90 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	695b      	ldr	r3, [r3, #20]
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7f8 f8be 	bl	8006c0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f7ff ffbd 	bl	800ea10 <ip_frag_free_pbuf_custom_ref>
}
 800ea96:	bf00      	nop
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	08012634 	.word	0x08012634
 800eaa4:	080127f8 	.word	0x080127f8
 800eaa8:	0801267c 	.word	0x0801267c
 800eaac:	08012804 	.word	0x08012804

0800eab0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b094      	sub	sp, #80	@ 0x50
 800eab4:	af02      	add	r7, sp, #8
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800eac6:	3b14      	subs	r3, #20
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	da00      	bge.n	800eace <ip4_frag+0x1e>
 800eacc:	3307      	adds	r3, #7
 800eace:	10db      	asrs	r3, r3, #3
 800ead0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ead2:	2314      	movs	r3, #20
 800ead4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800eadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eade:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800eae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	f003 030f 	and.w	r3, r3, #15
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	2b14      	cmp	r3, #20
 800eaf0:	d002      	beq.n	800eaf8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800eaf2:	f06f 0305 	mvn.w	r3, #5
 800eaf6:	e110      	b.n	800ed1a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	895b      	ldrh	r3, [r3, #10]
 800eafc:	2b13      	cmp	r3, #19
 800eafe:	d809      	bhi.n	800eb14 <ip4_frag+0x64>
 800eb00:	4b88      	ldr	r3, [pc, #544]	@ (800ed24 <ip4_frag+0x274>)
 800eb02:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800eb06:	4988      	ldr	r1, [pc, #544]	@ (800ed28 <ip4_frag+0x278>)
 800eb08:	4888      	ldr	r0, [pc, #544]	@ (800ed2c <ip4_frag+0x27c>)
 800eb0a:	f000 faed 	bl	800f0e8 <iprintf>
 800eb0e:	f06f 0305 	mvn.w	r3, #5
 800eb12:	e102      	b.n	800ed1a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800eb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb16:	88db      	ldrh	r3, [r3, #6]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7f6 fd3c 	bl	8005598 <lwip_htons>
 800eb20:	4603      	mov	r3, r0
 800eb22:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800eb24:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eb26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800eb2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eb30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb34:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	891b      	ldrh	r3, [r3, #8]
 800eb3a:	3b14      	subs	r3, #20
 800eb3c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800eb40:	e0e1      	b.n	800ed06 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800eb42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800eb44:	00db      	lsls	r3, r3, #3
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	bf28      	it	cs
 800eb50:	4613      	movcs	r3, r2
 800eb52:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800eb54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eb58:	2114      	movs	r1, #20
 800eb5a:	200e      	movs	r0, #14
 800eb5c:	f7f7 fd72 	bl	8006644 <pbuf_alloc>
 800eb60:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800eb62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f000 80d5 	beq.w	800ed14 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800eb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6c:	895b      	ldrh	r3, [r3, #10]
 800eb6e:	2b13      	cmp	r3, #19
 800eb70:	d806      	bhi.n	800eb80 <ip4_frag+0xd0>
 800eb72:	4b6c      	ldr	r3, [pc, #432]	@ (800ed24 <ip4_frag+0x274>)
 800eb74:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800eb78:	496d      	ldr	r1, [pc, #436]	@ (800ed30 <ip4_frag+0x280>)
 800eb7a:	486c      	ldr	r0, [pc, #432]	@ (800ed2c <ip4_frag+0x27c>)
 800eb7c:	f000 fab4 	bl	800f0e8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800eb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	2214      	movs	r2, #20
 800eb86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f000 fb88 	bl	800f29e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800eb94:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eb96:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800eb9a:	e064      	b.n	800ec66 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	895a      	ldrh	r2, [r3, #10]
 800eba0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800eba2:	1ad3      	subs	r3, r2, r3
 800eba4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	895b      	ldrh	r3, [r3, #10]
 800ebaa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d906      	bls.n	800ebbe <ip4_frag+0x10e>
 800ebb0:	4b5c      	ldr	r3, [pc, #368]	@ (800ed24 <ip4_frag+0x274>)
 800ebb2:	f240 322d 	movw	r2, #813	@ 0x32d
 800ebb6:	495f      	ldr	r1, [pc, #380]	@ (800ed34 <ip4_frag+0x284>)
 800ebb8:	485c      	ldr	r0, [pc, #368]	@ (800ed2c <ip4_frag+0x27c>)
 800ebba:	f000 fa95 	bl	800f0e8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ebbe:	8bfa      	ldrh	r2, [r7, #30]
 800ebc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	bf28      	it	cs
 800ebc8:	4613      	movcs	r3, r2
 800ebca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ebce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d105      	bne.n	800ebe2 <ip4_frag+0x132>
        poff = 0;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	60fb      	str	r3, [r7, #12]
        continue;
 800ebe0:	e041      	b.n	800ec66 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ebe2:	f7ff ff0d 	bl	800ea00 <ip_frag_alloc_pbuf_custom_ref>
 800ebe6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d103      	bne.n	800ebf6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ebee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebf0:	f7f8 f80c 	bl	8006c0c <pbuf_free>
        goto memerr;
 800ebf4:	e08f      	b.n	800ed16 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ebf6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ebfc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ebfe:	4413      	add	r3, r2
 800ec00:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800ec04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ec08:	9201      	str	r2, [sp, #4]
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2241      	movs	r2, #65	@ 0x41
 800ec10:	2000      	movs	r0, #0
 800ec12:	f7f7 fe41 	bl	8006898 <pbuf_alloced_custom>
 800ec16:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d106      	bne.n	800ec2c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ec1e:	69b8      	ldr	r0, [r7, #24]
 800ec20:	f7ff fef6 	bl	800ea10 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ec24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec26:	f7f7 fff1 	bl	8006c0c <pbuf_free>
        goto memerr;
 800ec2a:	e074      	b.n	800ed16 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f7f8 f88d 	bl	8006d4c <pbuf_ref>
      pcr->original = p;
 800ec32:	69bb      	ldr	r3, [r7, #24]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ec38:	69bb      	ldr	r3, [r7, #24]
 800ec3a:	4a3f      	ldr	r2, [pc, #252]	@ (800ed38 <ip4_frag+0x288>)
 800ec3c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ec3e:	6979      	ldr	r1, [r7, #20]
 800ec40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec42:	f7f8 f8a5 	bl	8006d90 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ec46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ec4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800ec54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d004      	beq.n	800ec66 <ip4_frag+0x1b6>
        poff = 0;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ec66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d196      	bne.n	800eb9c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ec6e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ec70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ec74:	4413      	add	r3, r2
 800ec76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ec7c:	f1a3 0213 	sub.w	r2, r3, #19
 800ec80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ec84:	429a      	cmp	r2, r3
 800ec86:	bfcc      	ite	gt
 800ec88:	2301      	movgt	r3, #1
 800ec8a:	2300      	movle	r3, #0
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ec90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ec94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec98:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800ec9a:	6a3b      	ldr	r3, [r7, #32]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d002      	beq.n	800eca6 <ip4_frag+0x1f6>
 800eca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d003      	beq.n	800ecae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800eca6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800eca8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ecac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ecae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f6 fc71 	bl	8005598 <lwip_htons>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	461a      	mov	r2, r3
 800ecba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ecbe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ecc0:	3314      	adds	r3, #20
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7f6 fc67 	bl	8005598 <lwip_htons>
 800ecca:	4603      	mov	r3, r0
 800eccc:	461a      	mov	r2, r3
 800ecce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	729a      	strb	r2, [r3, #10]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	695b      	ldr	r3, [r3, #20]
 800ece0:	687a      	ldr	r2, [r7, #4]
 800ece2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ece4:	68b8      	ldr	r0, [r7, #8]
 800ece6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ece8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecea:	f7f7 ff8f 	bl	8006c0c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ecee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ecf2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ecf4:	1ad3      	subs	r3, r2, r3
 800ecf6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800ecfa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ecfe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ed00:	4413      	add	r3, r2
 800ed02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800ed06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	f47f af19 	bne.w	800eb42 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	e002      	b.n	800ed1a <ip4_frag+0x26a>
      goto memerr;
 800ed14:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ed16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3748      	adds	r7, #72	@ 0x48
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	08012634 	.word	0x08012634
 800ed28:	08012810 	.word	0x08012810
 800ed2c:	0801267c 	.word	0x0801267c
 800ed30:	0801282c 	.word	0x0801282c
 800ed34:	0801284c 	.word	0x0801284c
 800ed38:	0800ea49 	.word	0x0800ea49

0800ed3c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ed46:	230e      	movs	r3, #14
 800ed48:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	895b      	ldrh	r3, [r3, #10]
 800ed4e:	2b0e      	cmp	r3, #14
 800ed50:	d96e      	bls.n	800ee30 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	7bdb      	ldrb	r3, [r3, #15]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed60:	3301      	adds	r3, #1
 800ed62:	b2da      	uxtb	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	7b1a      	ldrb	r2, [r3, #12]
 800ed72:	7b5b      	ldrb	r3, [r3, #13]
 800ed74:	021b      	lsls	r3, r3, #8
 800ed76:	4313      	orrs	r3, r2
 800ed78:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d023      	beq.n	800edce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d10f      	bne.n	800edae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	785b      	ldrb	r3, [r3, #1]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d11b      	bne.n	800edce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ed9a:	2b5e      	cmp	r3, #94	@ 0x5e
 800ed9c:	d117      	bne.n	800edce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	7b5b      	ldrb	r3, [r3, #13]
 800eda2:	f043 0310 	orr.w	r3, r3, #16
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	735a      	strb	r2, [r3, #13]
 800edac:	e00f      	b.n	800edce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	2206      	movs	r2, #6
 800edb2:	4928      	ldr	r1, [pc, #160]	@ (800ee54 <ethernet_input+0x118>)
 800edb4:	4618      	mov	r0, r3
 800edb6:	f000 f9ec 	bl	800f192 <memcmp>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d106      	bne.n	800edce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	7b5b      	ldrb	r3, [r3, #13]
 800edc4:	f043 0308 	orr.w	r3, r3, #8
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800edce:	89fb      	ldrh	r3, [r7, #14]
 800edd0:	2b08      	cmp	r3, #8
 800edd2:	d003      	beq.n	800eddc <ethernet_input+0xa0>
 800edd4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800edd8:	d014      	beq.n	800ee04 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800edda:	e032      	b.n	800ee42 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ede2:	f003 0308 	and.w	r3, r3, #8
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d024      	beq.n	800ee34 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800edea:	8afb      	ldrh	r3, [r7, #22]
 800edec:	4619      	mov	r1, r3
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7f7 fe86 	bl	8006b00 <pbuf_remove_header>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d11e      	bne.n	800ee38 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800edfa:	6839      	ldr	r1, [r7, #0]
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7fe ff21 	bl	800dc44 <ip4_input>
      break;
 800ee02:	e013      	b.n	800ee2c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee0a:	f003 0308 	and.w	r3, r3, #8
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d014      	beq.n	800ee3c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ee12:	8afb      	ldrh	r3, [r7, #22]
 800ee14:	4619      	mov	r1, r3
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7f7 fe72 	bl	8006b00 <pbuf_remove_header>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d10e      	bne.n	800ee40 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ee22:	6839      	ldr	r1, [r7, #0]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7fe f8c1 	bl	800cfac <etharp_input>
      break;
 800ee2a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e00c      	b.n	800ee4a <ethernet_input+0x10e>
    goto free_and_return;
 800ee30:	bf00      	nop
 800ee32:	e006      	b.n	800ee42 <ethernet_input+0x106>
        goto free_and_return;
 800ee34:	bf00      	nop
 800ee36:	e004      	b.n	800ee42 <ethernet_input+0x106>
        goto free_and_return;
 800ee38:	bf00      	nop
 800ee3a:	e002      	b.n	800ee42 <ethernet_input+0x106>
        goto free_and_return;
 800ee3c:	bf00      	nop
 800ee3e:	e000      	b.n	800ee42 <ethernet_input+0x106>
        goto free_and_return;
 800ee40:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f7f7 fee2 	bl	8006c0c <pbuf_free>
  return ERR_OK;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3718      	adds	r7, #24
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	080129e8 	.word	0x080129e8

0800ee58 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ee66:	8c3b      	ldrh	r3, [r7, #32]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7f6 fb95 	bl	8005598 <lwip_htons>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ee72:	210e      	movs	r1, #14
 800ee74:	68b8      	ldr	r0, [r7, #8]
 800ee76:	f7f7 fe33 	bl	8006ae0 <pbuf_add_header>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d125      	bne.n	800eecc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	8afa      	ldrh	r2, [r7, #22]
 800ee8a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	2206      	movs	r2, #6
 800ee90:	6839      	ldr	r1, [r7, #0]
 800ee92:	4618      	mov	r0, r3
 800ee94:	f000 fa03 	bl	800f29e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	3306      	adds	r3, #6
 800ee9c:	2206      	movs	r2, #6
 800ee9e:	6879      	ldr	r1, [r7, #4]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 f9fc 	bl	800f29e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800eeac:	2b06      	cmp	r3, #6
 800eeae:	d006      	beq.n	800eebe <ethernet_output+0x66>
 800eeb0:	4b0a      	ldr	r3, [pc, #40]	@ (800eedc <ethernet_output+0x84>)
 800eeb2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800eeb6:	490a      	ldr	r1, [pc, #40]	@ (800eee0 <ethernet_output+0x88>)
 800eeb8:	480a      	ldr	r0, [pc, #40]	@ (800eee4 <ethernet_output+0x8c>)
 800eeba:	f000 f915 	bl	800f0e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	699b      	ldr	r3, [r3, #24]
 800eec2:	68b9      	ldr	r1, [r7, #8]
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	4798      	blx	r3
 800eec8:	4603      	mov	r3, r0
 800eeca:	e002      	b.n	800eed2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800eecc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800eece:	f06f 0301 	mvn.w	r3, #1
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3718      	adds	r7, #24
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	0801285c 	.word	0x0801285c
 800eee0:	08012894 	.word	0x08012894
 800eee4:	080128c8 	.word	0x080128c8

0800eee8 <rand>:
 800eee8:	4b16      	ldr	r3, [pc, #88]	@ (800ef44 <rand+0x5c>)
 800eeea:	b510      	push	{r4, lr}
 800eeec:	681c      	ldr	r4, [r3, #0]
 800eeee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eef0:	b9b3      	cbnz	r3, 800ef20 <rand+0x38>
 800eef2:	2018      	movs	r0, #24
 800eef4:	f000 fa4a 	bl	800f38c <malloc>
 800eef8:	4602      	mov	r2, r0
 800eefa:	6320      	str	r0, [r4, #48]	@ 0x30
 800eefc:	b920      	cbnz	r0, 800ef08 <rand+0x20>
 800eefe:	4b12      	ldr	r3, [pc, #72]	@ (800ef48 <rand+0x60>)
 800ef00:	4812      	ldr	r0, [pc, #72]	@ (800ef4c <rand+0x64>)
 800ef02:	2152      	movs	r1, #82	@ 0x52
 800ef04:	f000 f9da 	bl	800f2bc <__assert_func>
 800ef08:	4911      	ldr	r1, [pc, #68]	@ (800ef50 <rand+0x68>)
 800ef0a:	4b12      	ldr	r3, [pc, #72]	@ (800ef54 <rand+0x6c>)
 800ef0c:	e9c0 1300 	strd	r1, r3, [r0]
 800ef10:	4b11      	ldr	r3, [pc, #68]	@ (800ef58 <rand+0x70>)
 800ef12:	6083      	str	r3, [r0, #8]
 800ef14:	230b      	movs	r3, #11
 800ef16:	8183      	strh	r3, [r0, #12]
 800ef18:	2100      	movs	r1, #0
 800ef1a:	2001      	movs	r0, #1
 800ef1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ef20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ef22:	480e      	ldr	r0, [pc, #56]	@ (800ef5c <rand+0x74>)
 800ef24:	690b      	ldr	r3, [r1, #16]
 800ef26:	694c      	ldr	r4, [r1, #20]
 800ef28:	4a0d      	ldr	r2, [pc, #52]	@ (800ef60 <rand+0x78>)
 800ef2a:	4358      	muls	r0, r3
 800ef2c:	fb02 0004 	mla	r0, r2, r4, r0
 800ef30:	fba3 3202 	umull	r3, r2, r3, r2
 800ef34:	3301      	adds	r3, #1
 800ef36:	eb40 0002 	adc.w	r0, r0, r2
 800ef3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ef3e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ef42:	bd10      	pop	{r4, pc}
 800ef44:	20000038 	.word	0x20000038
 800ef48:	080129f6 	.word	0x080129f6
 800ef4c:	08012a0d 	.word	0x08012a0d
 800ef50:	abcd330e 	.word	0xabcd330e
 800ef54:	e66d1234 	.word	0xe66d1234
 800ef58:	0005deec 	.word	0x0005deec
 800ef5c:	5851f42d 	.word	0x5851f42d
 800ef60:	4c957f2d 	.word	0x4c957f2d

0800ef64 <std>:
 800ef64:	2300      	movs	r3, #0
 800ef66:	b510      	push	{r4, lr}
 800ef68:	4604      	mov	r4, r0
 800ef6a:	e9c0 3300 	strd	r3, r3, [r0]
 800ef6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ef72:	6083      	str	r3, [r0, #8]
 800ef74:	8181      	strh	r1, [r0, #12]
 800ef76:	6643      	str	r3, [r0, #100]	@ 0x64
 800ef78:	81c2      	strh	r2, [r0, #14]
 800ef7a:	6183      	str	r3, [r0, #24]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	2208      	movs	r2, #8
 800ef80:	305c      	adds	r0, #92	@ 0x5c
 800ef82:	f000 f916 	bl	800f1b2 <memset>
 800ef86:	4b0d      	ldr	r3, [pc, #52]	@ (800efbc <std+0x58>)
 800ef88:	6263      	str	r3, [r4, #36]	@ 0x24
 800ef8a:	4b0d      	ldr	r3, [pc, #52]	@ (800efc0 <std+0x5c>)
 800ef8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ef8e:	4b0d      	ldr	r3, [pc, #52]	@ (800efc4 <std+0x60>)
 800ef90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ef92:	4b0d      	ldr	r3, [pc, #52]	@ (800efc8 <std+0x64>)
 800ef94:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef96:	4b0d      	ldr	r3, [pc, #52]	@ (800efcc <std+0x68>)
 800ef98:	6224      	str	r4, [r4, #32]
 800ef9a:	429c      	cmp	r4, r3
 800ef9c:	d006      	beq.n	800efac <std+0x48>
 800ef9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800efa2:	4294      	cmp	r4, r2
 800efa4:	d002      	beq.n	800efac <std+0x48>
 800efa6:	33d0      	adds	r3, #208	@ 0xd0
 800efa8:	429c      	cmp	r4, r3
 800efaa:	d105      	bne.n	800efb8 <std+0x54>
 800efac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800efb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb4:	f000 b970 	b.w	800f298 <__retarget_lock_init_recursive>
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	bf00      	nop
 800efbc:	0800f10d 	.word	0x0800f10d
 800efc0:	0800f12f 	.word	0x0800f12f
 800efc4:	0800f167 	.word	0x0800f167
 800efc8:	0800f18b 	.word	0x0800f18b
 800efcc:	200082ac 	.word	0x200082ac

0800efd0 <stdio_exit_handler>:
 800efd0:	4a02      	ldr	r2, [pc, #8]	@ (800efdc <stdio_exit_handler+0xc>)
 800efd2:	4903      	ldr	r1, [pc, #12]	@ (800efe0 <stdio_exit_handler+0x10>)
 800efd4:	4803      	ldr	r0, [pc, #12]	@ (800efe4 <stdio_exit_handler+0x14>)
 800efd6:	f000 b869 	b.w	800f0ac <_fwalk_sglue>
 800efda:	bf00      	nop
 800efdc:	2000002c 	.word	0x2000002c
 800efe0:	0800fb9d 	.word	0x0800fb9d
 800efe4:	2000003c 	.word	0x2000003c

0800efe8 <cleanup_stdio>:
 800efe8:	6841      	ldr	r1, [r0, #4]
 800efea:	4b0c      	ldr	r3, [pc, #48]	@ (800f01c <cleanup_stdio+0x34>)
 800efec:	4299      	cmp	r1, r3
 800efee:	b510      	push	{r4, lr}
 800eff0:	4604      	mov	r4, r0
 800eff2:	d001      	beq.n	800eff8 <cleanup_stdio+0x10>
 800eff4:	f000 fdd2 	bl	800fb9c <_fflush_r>
 800eff8:	68a1      	ldr	r1, [r4, #8]
 800effa:	4b09      	ldr	r3, [pc, #36]	@ (800f020 <cleanup_stdio+0x38>)
 800effc:	4299      	cmp	r1, r3
 800effe:	d002      	beq.n	800f006 <cleanup_stdio+0x1e>
 800f000:	4620      	mov	r0, r4
 800f002:	f000 fdcb 	bl	800fb9c <_fflush_r>
 800f006:	68e1      	ldr	r1, [r4, #12]
 800f008:	4b06      	ldr	r3, [pc, #24]	@ (800f024 <cleanup_stdio+0x3c>)
 800f00a:	4299      	cmp	r1, r3
 800f00c:	d004      	beq.n	800f018 <cleanup_stdio+0x30>
 800f00e:	4620      	mov	r0, r4
 800f010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f014:	f000 bdc2 	b.w	800fb9c <_fflush_r>
 800f018:	bd10      	pop	{r4, pc}
 800f01a:	bf00      	nop
 800f01c:	200082ac 	.word	0x200082ac
 800f020:	20008314 	.word	0x20008314
 800f024:	2000837c 	.word	0x2000837c

0800f028 <global_stdio_init.part.0>:
 800f028:	b510      	push	{r4, lr}
 800f02a:	4b0b      	ldr	r3, [pc, #44]	@ (800f058 <global_stdio_init.part.0+0x30>)
 800f02c:	4c0b      	ldr	r4, [pc, #44]	@ (800f05c <global_stdio_init.part.0+0x34>)
 800f02e:	4a0c      	ldr	r2, [pc, #48]	@ (800f060 <global_stdio_init.part.0+0x38>)
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	4620      	mov	r0, r4
 800f034:	2200      	movs	r2, #0
 800f036:	2104      	movs	r1, #4
 800f038:	f7ff ff94 	bl	800ef64 <std>
 800f03c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f040:	2201      	movs	r2, #1
 800f042:	2109      	movs	r1, #9
 800f044:	f7ff ff8e 	bl	800ef64 <std>
 800f048:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f04c:	2202      	movs	r2, #2
 800f04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f052:	2112      	movs	r1, #18
 800f054:	f7ff bf86 	b.w	800ef64 <std>
 800f058:	200083e4 	.word	0x200083e4
 800f05c:	200082ac 	.word	0x200082ac
 800f060:	0800efd1 	.word	0x0800efd1

0800f064 <__sfp_lock_acquire>:
 800f064:	4801      	ldr	r0, [pc, #4]	@ (800f06c <__sfp_lock_acquire+0x8>)
 800f066:	f000 b918 	b.w	800f29a <__retarget_lock_acquire_recursive>
 800f06a:	bf00      	nop
 800f06c:	200083ed 	.word	0x200083ed

0800f070 <__sfp_lock_release>:
 800f070:	4801      	ldr	r0, [pc, #4]	@ (800f078 <__sfp_lock_release+0x8>)
 800f072:	f000 b913 	b.w	800f29c <__retarget_lock_release_recursive>
 800f076:	bf00      	nop
 800f078:	200083ed 	.word	0x200083ed

0800f07c <__sinit>:
 800f07c:	b510      	push	{r4, lr}
 800f07e:	4604      	mov	r4, r0
 800f080:	f7ff fff0 	bl	800f064 <__sfp_lock_acquire>
 800f084:	6a23      	ldr	r3, [r4, #32]
 800f086:	b11b      	cbz	r3, 800f090 <__sinit+0x14>
 800f088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f08c:	f7ff bff0 	b.w	800f070 <__sfp_lock_release>
 800f090:	4b04      	ldr	r3, [pc, #16]	@ (800f0a4 <__sinit+0x28>)
 800f092:	6223      	str	r3, [r4, #32]
 800f094:	4b04      	ldr	r3, [pc, #16]	@ (800f0a8 <__sinit+0x2c>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d1f5      	bne.n	800f088 <__sinit+0xc>
 800f09c:	f7ff ffc4 	bl	800f028 <global_stdio_init.part.0>
 800f0a0:	e7f2      	b.n	800f088 <__sinit+0xc>
 800f0a2:	bf00      	nop
 800f0a4:	0800efe9 	.word	0x0800efe9
 800f0a8:	200083e4 	.word	0x200083e4

0800f0ac <_fwalk_sglue>:
 800f0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0b0:	4607      	mov	r7, r0
 800f0b2:	4688      	mov	r8, r1
 800f0b4:	4614      	mov	r4, r2
 800f0b6:	2600      	movs	r6, #0
 800f0b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f0bc:	f1b9 0901 	subs.w	r9, r9, #1
 800f0c0:	d505      	bpl.n	800f0ce <_fwalk_sglue+0x22>
 800f0c2:	6824      	ldr	r4, [r4, #0]
 800f0c4:	2c00      	cmp	r4, #0
 800f0c6:	d1f7      	bne.n	800f0b8 <_fwalk_sglue+0xc>
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ce:	89ab      	ldrh	r3, [r5, #12]
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d907      	bls.n	800f0e4 <_fwalk_sglue+0x38>
 800f0d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	d003      	beq.n	800f0e4 <_fwalk_sglue+0x38>
 800f0dc:	4629      	mov	r1, r5
 800f0de:	4638      	mov	r0, r7
 800f0e0:	47c0      	blx	r8
 800f0e2:	4306      	orrs	r6, r0
 800f0e4:	3568      	adds	r5, #104	@ 0x68
 800f0e6:	e7e9      	b.n	800f0bc <_fwalk_sglue+0x10>

0800f0e8 <iprintf>:
 800f0e8:	b40f      	push	{r0, r1, r2, r3}
 800f0ea:	b507      	push	{r0, r1, r2, lr}
 800f0ec:	4906      	ldr	r1, [pc, #24]	@ (800f108 <iprintf+0x20>)
 800f0ee:	ab04      	add	r3, sp, #16
 800f0f0:	6808      	ldr	r0, [r1, #0]
 800f0f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0f6:	6881      	ldr	r1, [r0, #8]
 800f0f8:	9301      	str	r3, [sp, #4]
 800f0fa:	f000 fa27 	bl	800f54c <_vfiprintf_r>
 800f0fe:	b003      	add	sp, #12
 800f100:	f85d eb04 	ldr.w	lr, [sp], #4
 800f104:	b004      	add	sp, #16
 800f106:	4770      	bx	lr
 800f108:	20000038 	.word	0x20000038

0800f10c <__sread>:
 800f10c:	b510      	push	{r4, lr}
 800f10e:	460c      	mov	r4, r1
 800f110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f114:	f000 f878 	bl	800f208 <_read_r>
 800f118:	2800      	cmp	r0, #0
 800f11a:	bfab      	itete	ge
 800f11c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f11e:	89a3      	ldrhlt	r3, [r4, #12]
 800f120:	181b      	addge	r3, r3, r0
 800f122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f126:	bfac      	ite	ge
 800f128:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f12a:	81a3      	strhlt	r3, [r4, #12]
 800f12c:	bd10      	pop	{r4, pc}

0800f12e <__swrite>:
 800f12e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f132:	461f      	mov	r7, r3
 800f134:	898b      	ldrh	r3, [r1, #12]
 800f136:	05db      	lsls	r3, r3, #23
 800f138:	4605      	mov	r5, r0
 800f13a:	460c      	mov	r4, r1
 800f13c:	4616      	mov	r6, r2
 800f13e:	d505      	bpl.n	800f14c <__swrite+0x1e>
 800f140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f144:	2302      	movs	r3, #2
 800f146:	2200      	movs	r2, #0
 800f148:	f000 f84c 	bl	800f1e4 <_lseek_r>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f156:	81a3      	strh	r3, [r4, #12]
 800f158:	4632      	mov	r2, r6
 800f15a:	463b      	mov	r3, r7
 800f15c:	4628      	mov	r0, r5
 800f15e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f162:	f000 b863 	b.w	800f22c <_write_r>

0800f166 <__sseek>:
 800f166:	b510      	push	{r4, lr}
 800f168:	460c      	mov	r4, r1
 800f16a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16e:	f000 f839 	bl	800f1e4 <_lseek_r>
 800f172:	1c43      	adds	r3, r0, #1
 800f174:	89a3      	ldrh	r3, [r4, #12]
 800f176:	bf15      	itete	ne
 800f178:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f17a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f17e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f182:	81a3      	strheq	r3, [r4, #12]
 800f184:	bf18      	it	ne
 800f186:	81a3      	strhne	r3, [r4, #12]
 800f188:	bd10      	pop	{r4, pc}

0800f18a <__sclose>:
 800f18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f18e:	f000 b819 	b.w	800f1c4 <_close_r>

0800f192 <memcmp>:
 800f192:	b510      	push	{r4, lr}
 800f194:	3901      	subs	r1, #1
 800f196:	4402      	add	r2, r0
 800f198:	4290      	cmp	r0, r2
 800f19a:	d101      	bne.n	800f1a0 <memcmp+0xe>
 800f19c:	2000      	movs	r0, #0
 800f19e:	e005      	b.n	800f1ac <memcmp+0x1a>
 800f1a0:	7803      	ldrb	r3, [r0, #0]
 800f1a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f1a6:	42a3      	cmp	r3, r4
 800f1a8:	d001      	beq.n	800f1ae <memcmp+0x1c>
 800f1aa:	1b18      	subs	r0, r3, r4
 800f1ac:	bd10      	pop	{r4, pc}
 800f1ae:	3001      	adds	r0, #1
 800f1b0:	e7f2      	b.n	800f198 <memcmp+0x6>

0800f1b2 <memset>:
 800f1b2:	4402      	add	r2, r0
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d100      	bne.n	800f1bc <memset+0xa>
 800f1ba:	4770      	bx	lr
 800f1bc:	f803 1b01 	strb.w	r1, [r3], #1
 800f1c0:	e7f9      	b.n	800f1b6 <memset+0x4>
	...

0800f1c4 <_close_r>:
 800f1c4:	b538      	push	{r3, r4, r5, lr}
 800f1c6:	4d06      	ldr	r5, [pc, #24]	@ (800f1e0 <_close_r+0x1c>)
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	4608      	mov	r0, r1
 800f1ce:	602b      	str	r3, [r5, #0]
 800f1d0:	f7f1 fd60 	bl	8000c94 <_close>
 800f1d4:	1c43      	adds	r3, r0, #1
 800f1d6:	d102      	bne.n	800f1de <_close_r+0x1a>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	b103      	cbz	r3, 800f1de <_close_r+0x1a>
 800f1dc:	6023      	str	r3, [r4, #0]
 800f1de:	bd38      	pop	{r3, r4, r5, pc}
 800f1e0:	200083e8 	.word	0x200083e8

0800f1e4 <_lseek_r>:
 800f1e4:	b538      	push	{r3, r4, r5, lr}
 800f1e6:	4d07      	ldr	r5, [pc, #28]	@ (800f204 <_lseek_r+0x20>)
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	4608      	mov	r0, r1
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	602a      	str	r2, [r5, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	f7f1 fd75 	bl	8000ce2 <_lseek>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d102      	bne.n	800f202 <_lseek_r+0x1e>
 800f1fc:	682b      	ldr	r3, [r5, #0]
 800f1fe:	b103      	cbz	r3, 800f202 <_lseek_r+0x1e>
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	200083e8 	.word	0x200083e8

0800f208 <_read_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	4d07      	ldr	r5, [pc, #28]	@ (800f228 <_read_r+0x20>)
 800f20c:	4604      	mov	r4, r0
 800f20e:	4608      	mov	r0, r1
 800f210:	4611      	mov	r1, r2
 800f212:	2200      	movs	r2, #0
 800f214:	602a      	str	r2, [r5, #0]
 800f216:	461a      	mov	r2, r3
 800f218:	f7f1 fd03 	bl	8000c22 <_read>
 800f21c:	1c43      	adds	r3, r0, #1
 800f21e:	d102      	bne.n	800f226 <_read_r+0x1e>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	b103      	cbz	r3, 800f226 <_read_r+0x1e>
 800f224:	6023      	str	r3, [r4, #0]
 800f226:	bd38      	pop	{r3, r4, r5, pc}
 800f228:	200083e8 	.word	0x200083e8

0800f22c <_write_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	4d07      	ldr	r5, [pc, #28]	@ (800f24c <_write_r+0x20>)
 800f230:	4604      	mov	r4, r0
 800f232:	4608      	mov	r0, r1
 800f234:	4611      	mov	r1, r2
 800f236:	2200      	movs	r2, #0
 800f238:	602a      	str	r2, [r5, #0]
 800f23a:	461a      	mov	r2, r3
 800f23c:	f7f1 fd0e 	bl	8000c5c <_write>
 800f240:	1c43      	adds	r3, r0, #1
 800f242:	d102      	bne.n	800f24a <_write_r+0x1e>
 800f244:	682b      	ldr	r3, [r5, #0]
 800f246:	b103      	cbz	r3, 800f24a <_write_r+0x1e>
 800f248:	6023      	str	r3, [r4, #0]
 800f24a:	bd38      	pop	{r3, r4, r5, pc}
 800f24c:	200083e8 	.word	0x200083e8

0800f250 <__libc_init_array>:
 800f250:	b570      	push	{r4, r5, r6, lr}
 800f252:	4d0d      	ldr	r5, [pc, #52]	@ (800f288 <__libc_init_array+0x38>)
 800f254:	4c0d      	ldr	r4, [pc, #52]	@ (800f28c <__libc_init_array+0x3c>)
 800f256:	1b64      	subs	r4, r4, r5
 800f258:	10a4      	asrs	r4, r4, #2
 800f25a:	2600      	movs	r6, #0
 800f25c:	42a6      	cmp	r6, r4
 800f25e:	d109      	bne.n	800f274 <__libc_init_array+0x24>
 800f260:	4d0b      	ldr	r5, [pc, #44]	@ (800f290 <__libc_init_array+0x40>)
 800f262:	4c0c      	ldr	r4, [pc, #48]	@ (800f294 <__libc_init_array+0x44>)
 800f264:	f000 fe48 	bl	800fef8 <_init>
 800f268:	1b64      	subs	r4, r4, r5
 800f26a:	10a4      	asrs	r4, r4, #2
 800f26c:	2600      	movs	r6, #0
 800f26e:	42a6      	cmp	r6, r4
 800f270:	d105      	bne.n	800f27e <__libc_init_array+0x2e>
 800f272:	bd70      	pop	{r4, r5, r6, pc}
 800f274:	f855 3b04 	ldr.w	r3, [r5], #4
 800f278:	4798      	blx	r3
 800f27a:	3601      	adds	r6, #1
 800f27c:	e7ee      	b.n	800f25c <__libc_init_array+0xc>
 800f27e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f282:	4798      	blx	r3
 800f284:	3601      	adds	r6, #1
 800f286:	e7f2      	b.n	800f26e <__libc_init_array+0x1e>
 800f288:	08012adc 	.word	0x08012adc
 800f28c:	08012adc 	.word	0x08012adc
 800f290:	08012adc 	.word	0x08012adc
 800f294:	08012ae0 	.word	0x08012ae0

0800f298 <__retarget_lock_init_recursive>:
 800f298:	4770      	bx	lr

0800f29a <__retarget_lock_acquire_recursive>:
 800f29a:	4770      	bx	lr

0800f29c <__retarget_lock_release_recursive>:
 800f29c:	4770      	bx	lr

0800f29e <memcpy>:
 800f29e:	440a      	add	r2, r1
 800f2a0:	4291      	cmp	r1, r2
 800f2a2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f2a6:	d100      	bne.n	800f2aa <memcpy+0xc>
 800f2a8:	4770      	bx	lr
 800f2aa:	b510      	push	{r4, lr}
 800f2ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2b4:	4291      	cmp	r1, r2
 800f2b6:	d1f9      	bne.n	800f2ac <memcpy+0xe>
 800f2b8:	bd10      	pop	{r4, pc}
	...

0800f2bc <__assert_func>:
 800f2bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2be:	4614      	mov	r4, r2
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4b09      	ldr	r3, [pc, #36]	@ (800f2e8 <__assert_func+0x2c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	68d8      	ldr	r0, [r3, #12]
 800f2ca:	b14c      	cbz	r4, 800f2e0 <__assert_func+0x24>
 800f2cc:	4b07      	ldr	r3, [pc, #28]	@ (800f2ec <__assert_func+0x30>)
 800f2ce:	9100      	str	r1, [sp, #0]
 800f2d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f2d4:	4906      	ldr	r1, [pc, #24]	@ (800f2f0 <__assert_func+0x34>)
 800f2d6:	462b      	mov	r3, r5
 800f2d8:	f000 fc88 	bl	800fbec <fiprintf>
 800f2dc:	f000 fd3c 	bl	800fd58 <abort>
 800f2e0:	4b04      	ldr	r3, [pc, #16]	@ (800f2f4 <__assert_func+0x38>)
 800f2e2:	461c      	mov	r4, r3
 800f2e4:	e7f3      	b.n	800f2ce <__assert_func+0x12>
 800f2e6:	bf00      	nop
 800f2e8:	20000038 	.word	0x20000038
 800f2ec:	08012a65 	.word	0x08012a65
 800f2f0:	08012a72 	.word	0x08012a72
 800f2f4:	08012aa0 	.word	0x08012aa0

0800f2f8 <_free_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	4605      	mov	r5, r0
 800f2fc:	2900      	cmp	r1, #0
 800f2fe:	d041      	beq.n	800f384 <_free_r+0x8c>
 800f300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f304:	1f0c      	subs	r4, r1, #4
 800f306:	2b00      	cmp	r3, #0
 800f308:	bfb8      	it	lt
 800f30a:	18e4      	addlt	r4, r4, r3
 800f30c:	f000 f8e8 	bl	800f4e0 <__malloc_lock>
 800f310:	4a1d      	ldr	r2, [pc, #116]	@ (800f388 <_free_r+0x90>)
 800f312:	6813      	ldr	r3, [r2, #0]
 800f314:	b933      	cbnz	r3, 800f324 <_free_r+0x2c>
 800f316:	6063      	str	r3, [r4, #4]
 800f318:	6014      	str	r4, [r2, #0]
 800f31a:	4628      	mov	r0, r5
 800f31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f320:	f000 b8e4 	b.w	800f4ec <__malloc_unlock>
 800f324:	42a3      	cmp	r3, r4
 800f326:	d908      	bls.n	800f33a <_free_r+0x42>
 800f328:	6820      	ldr	r0, [r4, #0]
 800f32a:	1821      	adds	r1, r4, r0
 800f32c:	428b      	cmp	r3, r1
 800f32e:	bf01      	itttt	eq
 800f330:	6819      	ldreq	r1, [r3, #0]
 800f332:	685b      	ldreq	r3, [r3, #4]
 800f334:	1809      	addeq	r1, r1, r0
 800f336:	6021      	streq	r1, [r4, #0]
 800f338:	e7ed      	b.n	800f316 <_free_r+0x1e>
 800f33a:	461a      	mov	r2, r3
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	b10b      	cbz	r3, 800f344 <_free_r+0x4c>
 800f340:	42a3      	cmp	r3, r4
 800f342:	d9fa      	bls.n	800f33a <_free_r+0x42>
 800f344:	6811      	ldr	r1, [r2, #0]
 800f346:	1850      	adds	r0, r2, r1
 800f348:	42a0      	cmp	r0, r4
 800f34a:	d10b      	bne.n	800f364 <_free_r+0x6c>
 800f34c:	6820      	ldr	r0, [r4, #0]
 800f34e:	4401      	add	r1, r0
 800f350:	1850      	adds	r0, r2, r1
 800f352:	4283      	cmp	r3, r0
 800f354:	6011      	str	r1, [r2, #0]
 800f356:	d1e0      	bne.n	800f31a <_free_r+0x22>
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	6053      	str	r3, [r2, #4]
 800f35e:	4408      	add	r0, r1
 800f360:	6010      	str	r0, [r2, #0]
 800f362:	e7da      	b.n	800f31a <_free_r+0x22>
 800f364:	d902      	bls.n	800f36c <_free_r+0x74>
 800f366:	230c      	movs	r3, #12
 800f368:	602b      	str	r3, [r5, #0]
 800f36a:	e7d6      	b.n	800f31a <_free_r+0x22>
 800f36c:	6820      	ldr	r0, [r4, #0]
 800f36e:	1821      	adds	r1, r4, r0
 800f370:	428b      	cmp	r3, r1
 800f372:	bf04      	itt	eq
 800f374:	6819      	ldreq	r1, [r3, #0]
 800f376:	685b      	ldreq	r3, [r3, #4]
 800f378:	6063      	str	r3, [r4, #4]
 800f37a:	bf04      	itt	eq
 800f37c:	1809      	addeq	r1, r1, r0
 800f37e:	6021      	streq	r1, [r4, #0]
 800f380:	6054      	str	r4, [r2, #4]
 800f382:	e7ca      	b.n	800f31a <_free_r+0x22>
 800f384:	bd38      	pop	{r3, r4, r5, pc}
 800f386:	bf00      	nop
 800f388:	200083f4 	.word	0x200083f4

0800f38c <malloc>:
 800f38c:	4b02      	ldr	r3, [pc, #8]	@ (800f398 <malloc+0xc>)
 800f38e:	4601      	mov	r1, r0
 800f390:	6818      	ldr	r0, [r3, #0]
 800f392:	f000 b825 	b.w	800f3e0 <_malloc_r>
 800f396:	bf00      	nop
 800f398:	20000038 	.word	0x20000038

0800f39c <sbrk_aligned>:
 800f39c:	b570      	push	{r4, r5, r6, lr}
 800f39e:	4e0f      	ldr	r6, [pc, #60]	@ (800f3dc <sbrk_aligned+0x40>)
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	6831      	ldr	r1, [r6, #0]
 800f3a4:	4605      	mov	r5, r0
 800f3a6:	b911      	cbnz	r1, 800f3ae <sbrk_aligned+0x12>
 800f3a8:	f000 fcc6 	bl	800fd38 <_sbrk_r>
 800f3ac:	6030      	str	r0, [r6, #0]
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f000 fcc1 	bl	800fd38 <_sbrk_r>
 800f3b6:	1c43      	adds	r3, r0, #1
 800f3b8:	d103      	bne.n	800f3c2 <sbrk_aligned+0x26>
 800f3ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f3be:	4620      	mov	r0, r4
 800f3c0:	bd70      	pop	{r4, r5, r6, pc}
 800f3c2:	1cc4      	adds	r4, r0, #3
 800f3c4:	f024 0403 	bic.w	r4, r4, #3
 800f3c8:	42a0      	cmp	r0, r4
 800f3ca:	d0f8      	beq.n	800f3be <sbrk_aligned+0x22>
 800f3cc:	1a21      	subs	r1, r4, r0
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f000 fcb2 	bl	800fd38 <_sbrk_r>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	d1f2      	bne.n	800f3be <sbrk_aligned+0x22>
 800f3d8:	e7ef      	b.n	800f3ba <sbrk_aligned+0x1e>
 800f3da:	bf00      	nop
 800f3dc:	200083f0 	.word	0x200083f0

0800f3e0 <_malloc_r>:
 800f3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e4:	1ccd      	adds	r5, r1, #3
 800f3e6:	f025 0503 	bic.w	r5, r5, #3
 800f3ea:	3508      	adds	r5, #8
 800f3ec:	2d0c      	cmp	r5, #12
 800f3ee:	bf38      	it	cc
 800f3f0:	250c      	movcc	r5, #12
 800f3f2:	2d00      	cmp	r5, #0
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	db01      	blt.n	800f3fc <_malloc_r+0x1c>
 800f3f8:	42a9      	cmp	r1, r5
 800f3fa:	d904      	bls.n	800f406 <_malloc_r+0x26>
 800f3fc:	230c      	movs	r3, #12
 800f3fe:	6033      	str	r3, [r6, #0]
 800f400:	2000      	movs	r0, #0
 800f402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4dc <_malloc_r+0xfc>
 800f40a:	f000 f869 	bl	800f4e0 <__malloc_lock>
 800f40e:	f8d8 3000 	ldr.w	r3, [r8]
 800f412:	461c      	mov	r4, r3
 800f414:	bb44      	cbnz	r4, 800f468 <_malloc_r+0x88>
 800f416:	4629      	mov	r1, r5
 800f418:	4630      	mov	r0, r6
 800f41a:	f7ff ffbf 	bl	800f39c <sbrk_aligned>
 800f41e:	1c43      	adds	r3, r0, #1
 800f420:	4604      	mov	r4, r0
 800f422:	d158      	bne.n	800f4d6 <_malloc_r+0xf6>
 800f424:	f8d8 4000 	ldr.w	r4, [r8]
 800f428:	4627      	mov	r7, r4
 800f42a:	2f00      	cmp	r7, #0
 800f42c:	d143      	bne.n	800f4b6 <_malloc_r+0xd6>
 800f42e:	2c00      	cmp	r4, #0
 800f430:	d04b      	beq.n	800f4ca <_malloc_r+0xea>
 800f432:	6823      	ldr	r3, [r4, #0]
 800f434:	4639      	mov	r1, r7
 800f436:	4630      	mov	r0, r6
 800f438:	eb04 0903 	add.w	r9, r4, r3
 800f43c:	f000 fc7c 	bl	800fd38 <_sbrk_r>
 800f440:	4581      	cmp	r9, r0
 800f442:	d142      	bne.n	800f4ca <_malloc_r+0xea>
 800f444:	6821      	ldr	r1, [r4, #0]
 800f446:	1a6d      	subs	r5, r5, r1
 800f448:	4629      	mov	r1, r5
 800f44a:	4630      	mov	r0, r6
 800f44c:	f7ff ffa6 	bl	800f39c <sbrk_aligned>
 800f450:	3001      	adds	r0, #1
 800f452:	d03a      	beq.n	800f4ca <_malloc_r+0xea>
 800f454:	6823      	ldr	r3, [r4, #0]
 800f456:	442b      	add	r3, r5
 800f458:	6023      	str	r3, [r4, #0]
 800f45a:	f8d8 3000 	ldr.w	r3, [r8]
 800f45e:	685a      	ldr	r2, [r3, #4]
 800f460:	bb62      	cbnz	r2, 800f4bc <_malloc_r+0xdc>
 800f462:	f8c8 7000 	str.w	r7, [r8]
 800f466:	e00f      	b.n	800f488 <_malloc_r+0xa8>
 800f468:	6822      	ldr	r2, [r4, #0]
 800f46a:	1b52      	subs	r2, r2, r5
 800f46c:	d420      	bmi.n	800f4b0 <_malloc_r+0xd0>
 800f46e:	2a0b      	cmp	r2, #11
 800f470:	d917      	bls.n	800f4a2 <_malloc_r+0xc2>
 800f472:	1961      	adds	r1, r4, r5
 800f474:	42a3      	cmp	r3, r4
 800f476:	6025      	str	r5, [r4, #0]
 800f478:	bf18      	it	ne
 800f47a:	6059      	strne	r1, [r3, #4]
 800f47c:	6863      	ldr	r3, [r4, #4]
 800f47e:	bf08      	it	eq
 800f480:	f8c8 1000 	streq.w	r1, [r8]
 800f484:	5162      	str	r2, [r4, r5]
 800f486:	604b      	str	r3, [r1, #4]
 800f488:	4630      	mov	r0, r6
 800f48a:	f000 f82f 	bl	800f4ec <__malloc_unlock>
 800f48e:	f104 000b 	add.w	r0, r4, #11
 800f492:	1d23      	adds	r3, r4, #4
 800f494:	f020 0007 	bic.w	r0, r0, #7
 800f498:	1ac2      	subs	r2, r0, r3
 800f49a:	bf1c      	itt	ne
 800f49c:	1a1b      	subne	r3, r3, r0
 800f49e:	50a3      	strne	r3, [r4, r2]
 800f4a0:	e7af      	b.n	800f402 <_malloc_r+0x22>
 800f4a2:	6862      	ldr	r2, [r4, #4]
 800f4a4:	42a3      	cmp	r3, r4
 800f4a6:	bf0c      	ite	eq
 800f4a8:	f8c8 2000 	streq.w	r2, [r8]
 800f4ac:	605a      	strne	r2, [r3, #4]
 800f4ae:	e7eb      	b.n	800f488 <_malloc_r+0xa8>
 800f4b0:	4623      	mov	r3, r4
 800f4b2:	6864      	ldr	r4, [r4, #4]
 800f4b4:	e7ae      	b.n	800f414 <_malloc_r+0x34>
 800f4b6:	463c      	mov	r4, r7
 800f4b8:	687f      	ldr	r7, [r7, #4]
 800f4ba:	e7b6      	b.n	800f42a <_malloc_r+0x4a>
 800f4bc:	461a      	mov	r2, r3
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	42a3      	cmp	r3, r4
 800f4c2:	d1fb      	bne.n	800f4bc <_malloc_r+0xdc>
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	6053      	str	r3, [r2, #4]
 800f4c8:	e7de      	b.n	800f488 <_malloc_r+0xa8>
 800f4ca:	230c      	movs	r3, #12
 800f4cc:	6033      	str	r3, [r6, #0]
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f000 f80c 	bl	800f4ec <__malloc_unlock>
 800f4d4:	e794      	b.n	800f400 <_malloc_r+0x20>
 800f4d6:	6005      	str	r5, [r0, #0]
 800f4d8:	e7d6      	b.n	800f488 <_malloc_r+0xa8>
 800f4da:	bf00      	nop
 800f4dc:	200083f4 	.word	0x200083f4

0800f4e0 <__malloc_lock>:
 800f4e0:	4801      	ldr	r0, [pc, #4]	@ (800f4e8 <__malloc_lock+0x8>)
 800f4e2:	f7ff beda 	b.w	800f29a <__retarget_lock_acquire_recursive>
 800f4e6:	bf00      	nop
 800f4e8:	200083ec 	.word	0x200083ec

0800f4ec <__malloc_unlock>:
 800f4ec:	4801      	ldr	r0, [pc, #4]	@ (800f4f4 <__malloc_unlock+0x8>)
 800f4ee:	f7ff bed5 	b.w	800f29c <__retarget_lock_release_recursive>
 800f4f2:	bf00      	nop
 800f4f4:	200083ec 	.word	0x200083ec

0800f4f8 <__sfputc_r>:
 800f4f8:	6893      	ldr	r3, [r2, #8]
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	b410      	push	{r4}
 800f500:	6093      	str	r3, [r2, #8]
 800f502:	da08      	bge.n	800f516 <__sfputc_r+0x1e>
 800f504:	6994      	ldr	r4, [r2, #24]
 800f506:	42a3      	cmp	r3, r4
 800f508:	db01      	blt.n	800f50e <__sfputc_r+0x16>
 800f50a:	290a      	cmp	r1, #10
 800f50c:	d103      	bne.n	800f516 <__sfputc_r+0x1e>
 800f50e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f512:	f000 bb7d 	b.w	800fc10 <__swbuf_r>
 800f516:	6813      	ldr	r3, [r2, #0]
 800f518:	1c58      	adds	r0, r3, #1
 800f51a:	6010      	str	r0, [r2, #0]
 800f51c:	7019      	strb	r1, [r3, #0]
 800f51e:	4608      	mov	r0, r1
 800f520:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <__sfputs_r>:
 800f526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f528:	4606      	mov	r6, r0
 800f52a:	460f      	mov	r7, r1
 800f52c:	4614      	mov	r4, r2
 800f52e:	18d5      	adds	r5, r2, r3
 800f530:	42ac      	cmp	r4, r5
 800f532:	d101      	bne.n	800f538 <__sfputs_r+0x12>
 800f534:	2000      	movs	r0, #0
 800f536:	e007      	b.n	800f548 <__sfputs_r+0x22>
 800f538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f53c:	463a      	mov	r2, r7
 800f53e:	4630      	mov	r0, r6
 800f540:	f7ff ffda 	bl	800f4f8 <__sfputc_r>
 800f544:	1c43      	adds	r3, r0, #1
 800f546:	d1f3      	bne.n	800f530 <__sfputs_r+0xa>
 800f548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f54c <_vfiprintf_r>:
 800f54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f550:	460d      	mov	r5, r1
 800f552:	b09d      	sub	sp, #116	@ 0x74
 800f554:	4614      	mov	r4, r2
 800f556:	4698      	mov	r8, r3
 800f558:	4606      	mov	r6, r0
 800f55a:	b118      	cbz	r0, 800f564 <_vfiprintf_r+0x18>
 800f55c:	6a03      	ldr	r3, [r0, #32]
 800f55e:	b90b      	cbnz	r3, 800f564 <_vfiprintf_r+0x18>
 800f560:	f7ff fd8c 	bl	800f07c <__sinit>
 800f564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f566:	07d9      	lsls	r1, r3, #31
 800f568:	d405      	bmi.n	800f576 <_vfiprintf_r+0x2a>
 800f56a:	89ab      	ldrh	r3, [r5, #12]
 800f56c:	059a      	lsls	r2, r3, #22
 800f56e:	d402      	bmi.n	800f576 <_vfiprintf_r+0x2a>
 800f570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f572:	f7ff fe92 	bl	800f29a <__retarget_lock_acquire_recursive>
 800f576:	89ab      	ldrh	r3, [r5, #12]
 800f578:	071b      	lsls	r3, r3, #28
 800f57a:	d501      	bpl.n	800f580 <_vfiprintf_r+0x34>
 800f57c:	692b      	ldr	r3, [r5, #16]
 800f57e:	b99b      	cbnz	r3, 800f5a8 <_vfiprintf_r+0x5c>
 800f580:	4629      	mov	r1, r5
 800f582:	4630      	mov	r0, r6
 800f584:	f000 fb82 	bl	800fc8c <__swsetup_r>
 800f588:	b170      	cbz	r0, 800f5a8 <_vfiprintf_r+0x5c>
 800f58a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f58c:	07dc      	lsls	r4, r3, #31
 800f58e:	d504      	bpl.n	800f59a <_vfiprintf_r+0x4e>
 800f590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f594:	b01d      	add	sp, #116	@ 0x74
 800f596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f59a:	89ab      	ldrh	r3, [r5, #12]
 800f59c:	0598      	lsls	r0, r3, #22
 800f59e:	d4f7      	bmi.n	800f590 <_vfiprintf_r+0x44>
 800f5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5a2:	f7ff fe7b 	bl	800f29c <__retarget_lock_release_recursive>
 800f5a6:	e7f3      	b.n	800f590 <_vfiprintf_r+0x44>
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5ac:	2320      	movs	r3, #32
 800f5ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5b6:	2330      	movs	r3, #48	@ 0x30
 800f5b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f768 <_vfiprintf_r+0x21c>
 800f5bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5c0:	f04f 0901 	mov.w	r9, #1
 800f5c4:	4623      	mov	r3, r4
 800f5c6:	469a      	mov	sl, r3
 800f5c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5cc:	b10a      	cbz	r2, 800f5d2 <_vfiprintf_r+0x86>
 800f5ce:	2a25      	cmp	r2, #37	@ 0x25
 800f5d0:	d1f9      	bne.n	800f5c6 <_vfiprintf_r+0x7a>
 800f5d2:	ebba 0b04 	subs.w	fp, sl, r4
 800f5d6:	d00b      	beq.n	800f5f0 <_vfiprintf_r+0xa4>
 800f5d8:	465b      	mov	r3, fp
 800f5da:	4622      	mov	r2, r4
 800f5dc:	4629      	mov	r1, r5
 800f5de:	4630      	mov	r0, r6
 800f5e0:	f7ff ffa1 	bl	800f526 <__sfputs_r>
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	f000 80a7 	beq.w	800f738 <_vfiprintf_r+0x1ec>
 800f5ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5ec:	445a      	add	r2, fp
 800f5ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	f000 809f 	beq.w	800f738 <_vfiprintf_r+0x1ec>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f604:	f10a 0a01 	add.w	sl, sl, #1
 800f608:	9304      	str	r3, [sp, #16]
 800f60a:	9307      	str	r3, [sp, #28]
 800f60c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f610:	931a      	str	r3, [sp, #104]	@ 0x68
 800f612:	4654      	mov	r4, sl
 800f614:	2205      	movs	r2, #5
 800f616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f61a:	4853      	ldr	r0, [pc, #332]	@ (800f768 <_vfiprintf_r+0x21c>)
 800f61c:	f7f0 fe10 	bl	8000240 <memchr>
 800f620:	9a04      	ldr	r2, [sp, #16]
 800f622:	b9d8      	cbnz	r0, 800f65c <_vfiprintf_r+0x110>
 800f624:	06d1      	lsls	r1, r2, #27
 800f626:	bf44      	itt	mi
 800f628:	2320      	movmi	r3, #32
 800f62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f62e:	0713      	lsls	r3, r2, #28
 800f630:	bf44      	itt	mi
 800f632:	232b      	movmi	r3, #43	@ 0x2b
 800f634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f638:	f89a 3000 	ldrb.w	r3, [sl]
 800f63c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f63e:	d015      	beq.n	800f66c <_vfiprintf_r+0x120>
 800f640:	9a07      	ldr	r2, [sp, #28]
 800f642:	4654      	mov	r4, sl
 800f644:	2000      	movs	r0, #0
 800f646:	f04f 0c0a 	mov.w	ip, #10
 800f64a:	4621      	mov	r1, r4
 800f64c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f650:	3b30      	subs	r3, #48	@ 0x30
 800f652:	2b09      	cmp	r3, #9
 800f654:	d94b      	bls.n	800f6ee <_vfiprintf_r+0x1a2>
 800f656:	b1b0      	cbz	r0, 800f686 <_vfiprintf_r+0x13a>
 800f658:	9207      	str	r2, [sp, #28]
 800f65a:	e014      	b.n	800f686 <_vfiprintf_r+0x13a>
 800f65c:	eba0 0308 	sub.w	r3, r0, r8
 800f660:	fa09 f303 	lsl.w	r3, r9, r3
 800f664:	4313      	orrs	r3, r2
 800f666:	9304      	str	r3, [sp, #16]
 800f668:	46a2      	mov	sl, r4
 800f66a:	e7d2      	b.n	800f612 <_vfiprintf_r+0xc6>
 800f66c:	9b03      	ldr	r3, [sp, #12]
 800f66e:	1d19      	adds	r1, r3, #4
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	9103      	str	r1, [sp, #12]
 800f674:	2b00      	cmp	r3, #0
 800f676:	bfbb      	ittet	lt
 800f678:	425b      	neglt	r3, r3
 800f67a:	f042 0202 	orrlt.w	r2, r2, #2
 800f67e:	9307      	strge	r3, [sp, #28]
 800f680:	9307      	strlt	r3, [sp, #28]
 800f682:	bfb8      	it	lt
 800f684:	9204      	strlt	r2, [sp, #16]
 800f686:	7823      	ldrb	r3, [r4, #0]
 800f688:	2b2e      	cmp	r3, #46	@ 0x2e
 800f68a:	d10a      	bne.n	800f6a2 <_vfiprintf_r+0x156>
 800f68c:	7863      	ldrb	r3, [r4, #1]
 800f68e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f690:	d132      	bne.n	800f6f8 <_vfiprintf_r+0x1ac>
 800f692:	9b03      	ldr	r3, [sp, #12]
 800f694:	1d1a      	adds	r2, r3, #4
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	9203      	str	r2, [sp, #12]
 800f69a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f69e:	3402      	adds	r4, #2
 800f6a0:	9305      	str	r3, [sp, #20]
 800f6a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f778 <_vfiprintf_r+0x22c>
 800f6a6:	7821      	ldrb	r1, [r4, #0]
 800f6a8:	2203      	movs	r2, #3
 800f6aa:	4650      	mov	r0, sl
 800f6ac:	f7f0 fdc8 	bl	8000240 <memchr>
 800f6b0:	b138      	cbz	r0, 800f6c2 <_vfiprintf_r+0x176>
 800f6b2:	9b04      	ldr	r3, [sp, #16]
 800f6b4:	eba0 000a 	sub.w	r0, r0, sl
 800f6b8:	2240      	movs	r2, #64	@ 0x40
 800f6ba:	4082      	lsls	r2, r0
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	3401      	adds	r4, #1
 800f6c0:	9304      	str	r3, [sp, #16]
 800f6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6c6:	4829      	ldr	r0, [pc, #164]	@ (800f76c <_vfiprintf_r+0x220>)
 800f6c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6cc:	2206      	movs	r2, #6
 800f6ce:	f7f0 fdb7 	bl	8000240 <memchr>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	d03f      	beq.n	800f756 <_vfiprintf_r+0x20a>
 800f6d6:	4b26      	ldr	r3, [pc, #152]	@ (800f770 <_vfiprintf_r+0x224>)
 800f6d8:	bb1b      	cbnz	r3, 800f722 <_vfiprintf_r+0x1d6>
 800f6da:	9b03      	ldr	r3, [sp, #12]
 800f6dc:	3307      	adds	r3, #7
 800f6de:	f023 0307 	bic.w	r3, r3, #7
 800f6e2:	3308      	adds	r3, #8
 800f6e4:	9303      	str	r3, [sp, #12]
 800f6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6e8:	443b      	add	r3, r7
 800f6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6ec:	e76a      	b.n	800f5c4 <_vfiprintf_r+0x78>
 800f6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6f2:	460c      	mov	r4, r1
 800f6f4:	2001      	movs	r0, #1
 800f6f6:	e7a8      	b.n	800f64a <_vfiprintf_r+0xfe>
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	3401      	adds	r4, #1
 800f6fc:	9305      	str	r3, [sp, #20]
 800f6fe:	4619      	mov	r1, r3
 800f700:	f04f 0c0a 	mov.w	ip, #10
 800f704:	4620      	mov	r0, r4
 800f706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f70a:	3a30      	subs	r2, #48	@ 0x30
 800f70c:	2a09      	cmp	r2, #9
 800f70e:	d903      	bls.n	800f718 <_vfiprintf_r+0x1cc>
 800f710:	2b00      	cmp	r3, #0
 800f712:	d0c6      	beq.n	800f6a2 <_vfiprintf_r+0x156>
 800f714:	9105      	str	r1, [sp, #20]
 800f716:	e7c4      	b.n	800f6a2 <_vfiprintf_r+0x156>
 800f718:	fb0c 2101 	mla	r1, ip, r1, r2
 800f71c:	4604      	mov	r4, r0
 800f71e:	2301      	movs	r3, #1
 800f720:	e7f0      	b.n	800f704 <_vfiprintf_r+0x1b8>
 800f722:	ab03      	add	r3, sp, #12
 800f724:	9300      	str	r3, [sp, #0]
 800f726:	462a      	mov	r2, r5
 800f728:	4b12      	ldr	r3, [pc, #72]	@ (800f774 <_vfiprintf_r+0x228>)
 800f72a:	a904      	add	r1, sp, #16
 800f72c:	4630      	mov	r0, r6
 800f72e:	f3af 8000 	nop.w
 800f732:	4607      	mov	r7, r0
 800f734:	1c78      	adds	r0, r7, #1
 800f736:	d1d6      	bne.n	800f6e6 <_vfiprintf_r+0x19a>
 800f738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f73a:	07d9      	lsls	r1, r3, #31
 800f73c:	d405      	bmi.n	800f74a <_vfiprintf_r+0x1fe>
 800f73e:	89ab      	ldrh	r3, [r5, #12]
 800f740:	059a      	lsls	r2, r3, #22
 800f742:	d402      	bmi.n	800f74a <_vfiprintf_r+0x1fe>
 800f744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f746:	f7ff fda9 	bl	800f29c <__retarget_lock_release_recursive>
 800f74a:	89ab      	ldrh	r3, [r5, #12]
 800f74c:	065b      	lsls	r3, r3, #25
 800f74e:	f53f af1f 	bmi.w	800f590 <_vfiprintf_r+0x44>
 800f752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f754:	e71e      	b.n	800f594 <_vfiprintf_r+0x48>
 800f756:	ab03      	add	r3, sp, #12
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	462a      	mov	r2, r5
 800f75c:	4b05      	ldr	r3, [pc, #20]	@ (800f774 <_vfiprintf_r+0x228>)
 800f75e:	a904      	add	r1, sp, #16
 800f760:	4630      	mov	r0, r6
 800f762:	f000 f879 	bl	800f858 <_printf_i>
 800f766:	e7e4      	b.n	800f732 <_vfiprintf_r+0x1e6>
 800f768:	08012aa1 	.word	0x08012aa1
 800f76c:	08012aab 	.word	0x08012aab
 800f770:	00000000 	.word	0x00000000
 800f774:	0800f527 	.word	0x0800f527
 800f778:	08012aa7 	.word	0x08012aa7

0800f77c <_printf_common>:
 800f77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f780:	4616      	mov	r6, r2
 800f782:	4698      	mov	r8, r3
 800f784:	688a      	ldr	r2, [r1, #8]
 800f786:	690b      	ldr	r3, [r1, #16]
 800f788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f78c:	4293      	cmp	r3, r2
 800f78e:	bfb8      	it	lt
 800f790:	4613      	movlt	r3, r2
 800f792:	6033      	str	r3, [r6, #0]
 800f794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f798:	4607      	mov	r7, r0
 800f79a:	460c      	mov	r4, r1
 800f79c:	b10a      	cbz	r2, 800f7a2 <_printf_common+0x26>
 800f79e:	3301      	adds	r3, #1
 800f7a0:	6033      	str	r3, [r6, #0]
 800f7a2:	6823      	ldr	r3, [r4, #0]
 800f7a4:	0699      	lsls	r1, r3, #26
 800f7a6:	bf42      	ittt	mi
 800f7a8:	6833      	ldrmi	r3, [r6, #0]
 800f7aa:	3302      	addmi	r3, #2
 800f7ac:	6033      	strmi	r3, [r6, #0]
 800f7ae:	6825      	ldr	r5, [r4, #0]
 800f7b0:	f015 0506 	ands.w	r5, r5, #6
 800f7b4:	d106      	bne.n	800f7c4 <_printf_common+0x48>
 800f7b6:	f104 0a19 	add.w	sl, r4, #25
 800f7ba:	68e3      	ldr	r3, [r4, #12]
 800f7bc:	6832      	ldr	r2, [r6, #0]
 800f7be:	1a9b      	subs	r3, r3, r2
 800f7c0:	42ab      	cmp	r3, r5
 800f7c2:	dc26      	bgt.n	800f812 <_printf_common+0x96>
 800f7c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f7c8:	6822      	ldr	r2, [r4, #0]
 800f7ca:	3b00      	subs	r3, #0
 800f7cc:	bf18      	it	ne
 800f7ce:	2301      	movne	r3, #1
 800f7d0:	0692      	lsls	r2, r2, #26
 800f7d2:	d42b      	bmi.n	800f82c <_printf_common+0xb0>
 800f7d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f7d8:	4641      	mov	r1, r8
 800f7da:	4638      	mov	r0, r7
 800f7dc:	47c8      	blx	r9
 800f7de:	3001      	adds	r0, #1
 800f7e0:	d01e      	beq.n	800f820 <_printf_common+0xa4>
 800f7e2:	6823      	ldr	r3, [r4, #0]
 800f7e4:	6922      	ldr	r2, [r4, #16]
 800f7e6:	f003 0306 	and.w	r3, r3, #6
 800f7ea:	2b04      	cmp	r3, #4
 800f7ec:	bf02      	ittt	eq
 800f7ee:	68e5      	ldreq	r5, [r4, #12]
 800f7f0:	6833      	ldreq	r3, [r6, #0]
 800f7f2:	1aed      	subeq	r5, r5, r3
 800f7f4:	68a3      	ldr	r3, [r4, #8]
 800f7f6:	bf0c      	ite	eq
 800f7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7fc:	2500      	movne	r5, #0
 800f7fe:	4293      	cmp	r3, r2
 800f800:	bfc4      	itt	gt
 800f802:	1a9b      	subgt	r3, r3, r2
 800f804:	18ed      	addgt	r5, r5, r3
 800f806:	2600      	movs	r6, #0
 800f808:	341a      	adds	r4, #26
 800f80a:	42b5      	cmp	r5, r6
 800f80c:	d11a      	bne.n	800f844 <_printf_common+0xc8>
 800f80e:	2000      	movs	r0, #0
 800f810:	e008      	b.n	800f824 <_printf_common+0xa8>
 800f812:	2301      	movs	r3, #1
 800f814:	4652      	mov	r2, sl
 800f816:	4641      	mov	r1, r8
 800f818:	4638      	mov	r0, r7
 800f81a:	47c8      	blx	r9
 800f81c:	3001      	adds	r0, #1
 800f81e:	d103      	bne.n	800f828 <_printf_common+0xac>
 800f820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f828:	3501      	adds	r5, #1
 800f82a:	e7c6      	b.n	800f7ba <_printf_common+0x3e>
 800f82c:	18e1      	adds	r1, r4, r3
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	2030      	movs	r0, #48	@ 0x30
 800f832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f836:	4422      	add	r2, r4
 800f838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f83c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f840:	3302      	adds	r3, #2
 800f842:	e7c7      	b.n	800f7d4 <_printf_common+0x58>
 800f844:	2301      	movs	r3, #1
 800f846:	4622      	mov	r2, r4
 800f848:	4641      	mov	r1, r8
 800f84a:	4638      	mov	r0, r7
 800f84c:	47c8      	blx	r9
 800f84e:	3001      	adds	r0, #1
 800f850:	d0e6      	beq.n	800f820 <_printf_common+0xa4>
 800f852:	3601      	adds	r6, #1
 800f854:	e7d9      	b.n	800f80a <_printf_common+0x8e>
	...

0800f858 <_printf_i>:
 800f858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f85c:	7e0f      	ldrb	r7, [r1, #24]
 800f85e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f860:	2f78      	cmp	r7, #120	@ 0x78
 800f862:	4691      	mov	r9, r2
 800f864:	4680      	mov	r8, r0
 800f866:	460c      	mov	r4, r1
 800f868:	469a      	mov	sl, r3
 800f86a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f86e:	d807      	bhi.n	800f880 <_printf_i+0x28>
 800f870:	2f62      	cmp	r7, #98	@ 0x62
 800f872:	d80a      	bhi.n	800f88a <_printf_i+0x32>
 800f874:	2f00      	cmp	r7, #0
 800f876:	f000 80d1 	beq.w	800fa1c <_printf_i+0x1c4>
 800f87a:	2f58      	cmp	r7, #88	@ 0x58
 800f87c:	f000 80b8 	beq.w	800f9f0 <_printf_i+0x198>
 800f880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f888:	e03a      	b.n	800f900 <_printf_i+0xa8>
 800f88a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f88e:	2b15      	cmp	r3, #21
 800f890:	d8f6      	bhi.n	800f880 <_printf_i+0x28>
 800f892:	a101      	add	r1, pc, #4	@ (adr r1, 800f898 <_printf_i+0x40>)
 800f894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f898:	0800f8f1 	.word	0x0800f8f1
 800f89c:	0800f905 	.word	0x0800f905
 800f8a0:	0800f881 	.word	0x0800f881
 800f8a4:	0800f881 	.word	0x0800f881
 800f8a8:	0800f881 	.word	0x0800f881
 800f8ac:	0800f881 	.word	0x0800f881
 800f8b0:	0800f905 	.word	0x0800f905
 800f8b4:	0800f881 	.word	0x0800f881
 800f8b8:	0800f881 	.word	0x0800f881
 800f8bc:	0800f881 	.word	0x0800f881
 800f8c0:	0800f881 	.word	0x0800f881
 800f8c4:	0800fa03 	.word	0x0800fa03
 800f8c8:	0800f92f 	.word	0x0800f92f
 800f8cc:	0800f9bd 	.word	0x0800f9bd
 800f8d0:	0800f881 	.word	0x0800f881
 800f8d4:	0800f881 	.word	0x0800f881
 800f8d8:	0800fa25 	.word	0x0800fa25
 800f8dc:	0800f881 	.word	0x0800f881
 800f8e0:	0800f92f 	.word	0x0800f92f
 800f8e4:	0800f881 	.word	0x0800f881
 800f8e8:	0800f881 	.word	0x0800f881
 800f8ec:	0800f9c5 	.word	0x0800f9c5
 800f8f0:	6833      	ldr	r3, [r6, #0]
 800f8f2:	1d1a      	adds	r2, r3, #4
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6032      	str	r2, [r6, #0]
 800f8f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f8fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f900:	2301      	movs	r3, #1
 800f902:	e09c      	b.n	800fa3e <_printf_i+0x1e6>
 800f904:	6833      	ldr	r3, [r6, #0]
 800f906:	6820      	ldr	r0, [r4, #0]
 800f908:	1d19      	adds	r1, r3, #4
 800f90a:	6031      	str	r1, [r6, #0]
 800f90c:	0606      	lsls	r6, r0, #24
 800f90e:	d501      	bpl.n	800f914 <_printf_i+0xbc>
 800f910:	681d      	ldr	r5, [r3, #0]
 800f912:	e003      	b.n	800f91c <_printf_i+0xc4>
 800f914:	0645      	lsls	r5, r0, #25
 800f916:	d5fb      	bpl.n	800f910 <_printf_i+0xb8>
 800f918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f91c:	2d00      	cmp	r5, #0
 800f91e:	da03      	bge.n	800f928 <_printf_i+0xd0>
 800f920:	232d      	movs	r3, #45	@ 0x2d
 800f922:	426d      	negs	r5, r5
 800f924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f928:	4858      	ldr	r0, [pc, #352]	@ (800fa8c <_printf_i+0x234>)
 800f92a:	230a      	movs	r3, #10
 800f92c:	e011      	b.n	800f952 <_printf_i+0xfa>
 800f92e:	6821      	ldr	r1, [r4, #0]
 800f930:	6833      	ldr	r3, [r6, #0]
 800f932:	0608      	lsls	r0, r1, #24
 800f934:	f853 5b04 	ldr.w	r5, [r3], #4
 800f938:	d402      	bmi.n	800f940 <_printf_i+0xe8>
 800f93a:	0649      	lsls	r1, r1, #25
 800f93c:	bf48      	it	mi
 800f93e:	b2ad      	uxthmi	r5, r5
 800f940:	2f6f      	cmp	r7, #111	@ 0x6f
 800f942:	4852      	ldr	r0, [pc, #328]	@ (800fa8c <_printf_i+0x234>)
 800f944:	6033      	str	r3, [r6, #0]
 800f946:	bf14      	ite	ne
 800f948:	230a      	movne	r3, #10
 800f94a:	2308      	moveq	r3, #8
 800f94c:	2100      	movs	r1, #0
 800f94e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f952:	6866      	ldr	r6, [r4, #4]
 800f954:	60a6      	str	r6, [r4, #8]
 800f956:	2e00      	cmp	r6, #0
 800f958:	db05      	blt.n	800f966 <_printf_i+0x10e>
 800f95a:	6821      	ldr	r1, [r4, #0]
 800f95c:	432e      	orrs	r6, r5
 800f95e:	f021 0104 	bic.w	r1, r1, #4
 800f962:	6021      	str	r1, [r4, #0]
 800f964:	d04b      	beq.n	800f9fe <_printf_i+0x1a6>
 800f966:	4616      	mov	r6, r2
 800f968:	fbb5 f1f3 	udiv	r1, r5, r3
 800f96c:	fb03 5711 	mls	r7, r3, r1, r5
 800f970:	5dc7      	ldrb	r7, [r0, r7]
 800f972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f976:	462f      	mov	r7, r5
 800f978:	42bb      	cmp	r3, r7
 800f97a:	460d      	mov	r5, r1
 800f97c:	d9f4      	bls.n	800f968 <_printf_i+0x110>
 800f97e:	2b08      	cmp	r3, #8
 800f980:	d10b      	bne.n	800f99a <_printf_i+0x142>
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	07df      	lsls	r7, r3, #31
 800f986:	d508      	bpl.n	800f99a <_printf_i+0x142>
 800f988:	6923      	ldr	r3, [r4, #16]
 800f98a:	6861      	ldr	r1, [r4, #4]
 800f98c:	4299      	cmp	r1, r3
 800f98e:	bfde      	ittt	le
 800f990:	2330      	movle	r3, #48	@ 0x30
 800f992:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f996:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f99a:	1b92      	subs	r2, r2, r6
 800f99c:	6122      	str	r2, [r4, #16]
 800f99e:	f8cd a000 	str.w	sl, [sp]
 800f9a2:	464b      	mov	r3, r9
 800f9a4:	aa03      	add	r2, sp, #12
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	f7ff fee7 	bl	800f77c <_printf_common>
 800f9ae:	3001      	adds	r0, #1
 800f9b0:	d14a      	bne.n	800fa48 <_printf_i+0x1f0>
 800f9b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9b6:	b004      	add	sp, #16
 800f9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9bc:	6823      	ldr	r3, [r4, #0]
 800f9be:	f043 0320 	orr.w	r3, r3, #32
 800f9c2:	6023      	str	r3, [r4, #0]
 800f9c4:	4832      	ldr	r0, [pc, #200]	@ (800fa90 <_printf_i+0x238>)
 800f9c6:	2778      	movs	r7, #120	@ 0x78
 800f9c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f9cc:	6823      	ldr	r3, [r4, #0]
 800f9ce:	6831      	ldr	r1, [r6, #0]
 800f9d0:	061f      	lsls	r7, r3, #24
 800f9d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800f9d6:	d402      	bmi.n	800f9de <_printf_i+0x186>
 800f9d8:	065f      	lsls	r7, r3, #25
 800f9da:	bf48      	it	mi
 800f9dc:	b2ad      	uxthmi	r5, r5
 800f9de:	6031      	str	r1, [r6, #0]
 800f9e0:	07d9      	lsls	r1, r3, #31
 800f9e2:	bf44      	itt	mi
 800f9e4:	f043 0320 	orrmi.w	r3, r3, #32
 800f9e8:	6023      	strmi	r3, [r4, #0]
 800f9ea:	b11d      	cbz	r5, 800f9f4 <_printf_i+0x19c>
 800f9ec:	2310      	movs	r3, #16
 800f9ee:	e7ad      	b.n	800f94c <_printf_i+0xf4>
 800f9f0:	4826      	ldr	r0, [pc, #152]	@ (800fa8c <_printf_i+0x234>)
 800f9f2:	e7e9      	b.n	800f9c8 <_printf_i+0x170>
 800f9f4:	6823      	ldr	r3, [r4, #0]
 800f9f6:	f023 0320 	bic.w	r3, r3, #32
 800f9fa:	6023      	str	r3, [r4, #0]
 800f9fc:	e7f6      	b.n	800f9ec <_printf_i+0x194>
 800f9fe:	4616      	mov	r6, r2
 800fa00:	e7bd      	b.n	800f97e <_printf_i+0x126>
 800fa02:	6833      	ldr	r3, [r6, #0]
 800fa04:	6825      	ldr	r5, [r4, #0]
 800fa06:	6961      	ldr	r1, [r4, #20]
 800fa08:	1d18      	adds	r0, r3, #4
 800fa0a:	6030      	str	r0, [r6, #0]
 800fa0c:	062e      	lsls	r6, r5, #24
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	d501      	bpl.n	800fa16 <_printf_i+0x1be>
 800fa12:	6019      	str	r1, [r3, #0]
 800fa14:	e002      	b.n	800fa1c <_printf_i+0x1c4>
 800fa16:	0668      	lsls	r0, r5, #25
 800fa18:	d5fb      	bpl.n	800fa12 <_printf_i+0x1ba>
 800fa1a:	8019      	strh	r1, [r3, #0]
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	6123      	str	r3, [r4, #16]
 800fa20:	4616      	mov	r6, r2
 800fa22:	e7bc      	b.n	800f99e <_printf_i+0x146>
 800fa24:	6833      	ldr	r3, [r6, #0]
 800fa26:	1d1a      	adds	r2, r3, #4
 800fa28:	6032      	str	r2, [r6, #0]
 800fa2a:	681e      	ldr	r6, [r3, #0]
 800fa2c:	6862      	ldr	r2, [r4, #4]
 800fa2e:	2100      	movs	r1, #0
 800fa30:	4630      	mov	r0, r6
 800fa32:	f7f0 fc05 	bl	8000240 <memchr>
 800fa36:	b108      	cbz	r0, 800fa3c <_printf_i+0x1e4>
 800fa38:	1b80      	subs	r0, r0, r6
 800fa3a:	6060      	str	r0, [r4, #4]
 800fa3c:	6863      	ldr	r3, [r4, #4]
 800fa3e:	6123      	str	r3, [r4, #16]
 800fa40:	2300      	movs	r3, #0
 800fa42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa46:	e7aa      	b.n	800f99e <_printf_i+0x146>
 800fa48:	6923      	ldr	r3, [r4, #16]
 800fa4a:	4632      	mov	r2, r6
 800fa4c:	4649      	mov	r1, r9
 800fa4e:	4640      	mov	r0, r8
 800fa50:	47d0      	blx	sl
 800fa52:	3001      	adds	r0, #1
 800fa54:	d0ad      	beq.n	800f9b2 <_printf_i+0x15a>
 800fa56:	6823      	ldr	r3, [r4, #0]
 800fa58:	079b      	lsls	r3, r3, #30
 800fa5a:	d413      	bmi.n	800fa84 <_printf_i+0x22c>
 800fa5c:	68e0      	ldr	r0, [r4, #12]
 800fa5e:	9b03      	ldr	r3, [sp, #12]
 800fa60:	4298      	cmp	r0, r3
 800fa62:	bfb8      	it	lt
 800fa64:	4618      	movlt	r0, r3
 800fa66:	e7a6      	b.n	800f9b6 <_printf_i+0x15e>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	4632      	mov	r2, r6
 800fa6c:	4649      	mov	r1, r9
 800fa6e:	4640      	mov	r0, r8
 800fa70:	47d0      	blx	sl
 800fa72:	3001      	adds	r0, #1
 800fa74:	d09d      	beq.n	800f9b2 <_printf_i+0x15a>
 800fa76:	3501      	adds	r5, #1
 800fa78:	68e3      	ldr	r3, [r4, #12]
 800fa7a:	9903      	ldr	r1, [sp, #12]
 800fa7c:	1a5b      	subs	r3, r3, r1
 800fa7e:	42ab      	cmp	r3, r5
 800fa80:	dcf2      	bgt.n	800fa68 <_printf_i+0x210>
 800fa82:	e7eb      	b.n	800fa5c <_printf_i+0x204>
 800fa84:	2500      	movs	r5, #0
 800fa86:	f104 0619 	add.w	r6, r4, #25
 800fa8a:	e7f5      	b.n	800fa78 <_printf_i+0x220>
 800fa8c:	08012ab2 	.word	0x08012ab2
 800fa90:	08012ac3 	.word	0x08012ac3

0800fa94 <__sflush_r>:
 800fa94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa9c:	0716      	lsls	r6, r2, #28
 800fa9e:	4605      	mov	r5, r0
 800faa0:	460c      	mov	r4, r1
 800faa2:	d454      	bmi.n	800fb4e <__sflush_r+0xba>
 800faa4:	684b      	ldr	r3, [r1, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	dc02      	bgt.n	800fab0 <__sflush_r+0x1c>
 800faaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800faac:	2b00      	cmp	r3, #0
 800faae:	dd48      	ble.n	800fb42 <__sflush_r+0xae>
 800fab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fab2:	2e00      	cmp	r6, #0
 800fab4:	d045      	beq.n	800fb42 <__sflush_r+0xae>
 800fab6:	2300      	movs	r3, #0
 800fab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fabc:	682f      	ldr	r7, [r5, #0]
 800fabe:	6a21      	ldr	r1, [r4, #32]
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	d030      	beq.n	800fb26 <__sflush_r+0x92>
 800fac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	0759      	lsls	r1, r3, #29
 800faca:	d505      	bpl.n	800fad8 <__sflush_r+0x44>
 800facc:	6863      	ldr	r3, [r4, #4]
 800face:	1ad2      	subs	r2, r2, r3
 800fad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fad2:	b10b      	cbz	r3, 800fad8 <__sflush_r+0x44>
 800fad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fad6:	1ad2      	subs	r2, r2, r3
 800fad8:	2300      	movs	r3, #0
 800fada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fadc:	6a21      	ldr	r1, [r4, #32]
 800fade:	4628      	mov	r0, r5
 800fae0:	47b0      	blx	r6
 800fae2:	1c43      	adds	r3, r0, #1
 800fae4:	89a3      	ldrh	r3, [r4, #12]
 800fae6:	d106      	bne.n	800faf6 <__sflush_r+0x62>
 800fae8:	6829      	ldr	r1, [r5, #0]
 800faea:	291d      	cmp	r1, #29
 800faec:	d82b      	bhi.n	800fb46 <__sflush_r+0xb2>
 800faee:	4a2a      	ldr	r2, [pc, #168]	@ (800fb98 <__sflush_r+0x104>)
 800faf0:	40ca      	lsrs	r2, r1
 800faf2:	07d6      	lsls	r6, r2, #31
 800faf4:	d527      	bpl.n	800fb46 <__sflush_r+0xb2>
 800faf6:	2200      	movs	r2, #0
 800faf8:	6062      	str	r2, [r4, #4]
 800fafa:	04d9      	lsls	r1, r3, #19
 800fafc:	6922      	ldr	r2, [r4, #16]
 800fafe:	6022      	str	r2, [r4, #0]
 800fb00:	d504      	bpl.n	800fb0c <__sflush_r+0x78>
 800fb02:	1c42      	adds	r2, r0, #1
 800fb04:	d101      	bne.n	800fb0a <__sflush_r+0x76>
 800fb06:	682b      	ldr	r3, [r5, #0]
 800fb08:	b903      	cbnz	r3, 800fb0c <__sflush_r+0x78>
 800fb0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb0e:	602f      	str	r7, [r5, #0]
 800fb10:	b1b9      	cbz	r1, 800fb42 <__sflush_r+0xae>
 800fb12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb16:	4299      	cmp	r1, r3
 800fb18:	d002      	beq.n	800fb20 <__sflush_r+0x8c>
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	f7ff fbec 	bl	800f2f8 <_free_r>
 800fb20:	2300      	movs	r3, #0
 800fb22:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb24:	e00d      	b.n	800fb42 <__sflush_r+0xae>
 800fb26:	2301      	movs	r3, #1
 800fb28:	4628      	mov	r0, r5
 800fb2a:	47b0      	blx	r6
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	1c50      	adds	r0, r2, #1
 800fb30:	d1c9      	bne.n	800fac6 <__sflush_r+0x32>
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d0c6      	beq.n	800fac6 <__sflush_r+0x32>
 800fb38:	2b1d      	cmp	r3, #29
 800fb3a:	d001      	beq.n	800fb40 <__sflush_r+0xac>
 800fb3c:	2b16      	cmp	r3, #22
 800fb3e:	d11e      	bne.n	800fb7e <__sflush_r+0xea>
 800fb40:	602f      	str	r7, [r5, #0]
 800fb42:	2000      	movs	r0, #0
 800fb44:	e022      	b.n	800fb8c <__sflush_r+0xf8>
 800fb46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb4a:	b21b      	sxth	r3, r3
 800fb4c:	e01b      	b.n	800fb86 <__sflush_r+0xf2>
 800fb4e:	690f      	ldr	r7, [r1, #16]
 800fb50:	2f00      	cmp	r7, #0
 800fb52:	d0f6      	beq.n	800fb42 <__sflush_r+0xae>
 800fb54:	0793      	lsls	r3, r2, #30
 800fb56:	680e      	ldr	r6, [r1, #0]
 800fb58:	bf08      	it	eq
 800fb5a:	694b      	ldreq	r3, [r1, #20]
 800fb5c:	600f      	str	r7, [r1, #0]
 800fb5e:	bf18      	it	ne
 800fb60:	2300      	movne	r3, #0
 800fb62:	eba6 0807 	sub.w	r8, r6, r7
 800fb66:	608b      	str	r3, [r1, #8]
 800fb68:	f1b8 0f00 	cmp.w	r8, #0
 800fb6c:	dde9      	ble.n	800fb42 <__sflush_r+0xae>
 800fb6e:	6a21      	ldr	r1, [r4, #32]
 800fb70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb72:	4643      	mov	r3, r8
 800fb74:	463a      	mov	r2, r7
 800fb76:	4628      	mov	r0, r5
 800fb78:	47b0      	blx	r6
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	dc08      	bgt.n	800fb90 <__sflush_r+0xfc>
 800fb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb86:	81a3      	strh	r3, [r4, #12]
 800fb88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb90:	4407      	add	r7, r0
 800fb92:	eba8 0800 	sub.w	r8, r8, r0
 800fb96:	e7e7      	b.n	800fb68 <__sflush_r+0xd4>
 800fb98:	20400001 	.word	0x20400001

0800fb9c <_fflush_r>:
 800fb9c:	b538      	push	{r3, r4, r5, lr}
 800fb9e:	690b      	ldr	r3, [r1, #16]
 800fba0:	4605      	mov	r5, r0
 800fba2:	460c      	mov	r4, r1
 800fba4:	b913      	cbnz	r3, 800fbac <_fflush_r+0x10>
 800fba6:	2500      	movs	r5, #0
 800fba8:	4628      	mov	r0, r5
 800fbaa:	bd38      	pop	{r3, r4, r5, pc}
 800fbac:	b118      	cbz	r0, 800fbb6 <_fflush_r+0x1a>
 800fbae:	6a03      	ldr	r3, [r0, #32]
 800fbb0:	b90b      	cbnz	r3, 800fbb6 <_fflush_r+0x1a>
 800fbb2:	f7ff fa63 	bl	800f07c <__sinit>
 800fbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0f3      	beq.n	800fba6 <_fflush_r+0xa>
 800fbbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbc0:	07d0      	lsls	r0, r2, #31
 800fbc2:	d404      	bmi.n	800fbce <_fflush_r+0x32>
 800fbc4:	0599      	lsls	r1, r3, #22
 800fbc6:	d402      	bmi.n	800fbce <_fflush_r+0x32>
 800fbc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbca:	f7ff fb66 	bl	800f29a <__retarget_lock_acquire_recursive>
 800fbce:	4628      	mov	r0, r5
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	f7ff ff5f 	bl	800fa94 <__sflush_r>
 800fbd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbd8:	07da      	lsls	r2, r3, #31
 800fbda:	4605      	mov	r5, r0
 800fbdc:	d4e4      	bmi.n	800fba8 <_fflush_r+0xc>
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	059b      	lsls	r3, r3, #22
 800fbe2:	d4e1      	bmi.n	800fba8 <_fflush_r+0xc>
 800fbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbe6:	f7ff fb59 	bl	800f29c <__retarget_lock_release_recursive>
 800fbea:	e7dd      	b.n	800fba8 <_fflush_r+0xc>

0800fbec <fiprintf>:
 800fbec:	b40e      	push	{r1, r2, r3}
 800fbee:	b503      	push	{r0, r1, lr}
 800fbf0:	4601      	mov	r1, r0
 800fbf2:	ab03      	add	r3, sp, #12
 800fbf4:	4805      	ldr	r0, [pc, #20]	@ (800fc0c <fiprintf+0x20>)
 800fbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbfa:	6800      	ldr	r0, [r0, #0]
 800fbfc:	9301      	str	r3, [sp, #4]
 800fbfe:	f7ff fca5 	bl	800f54c <_vfiprintf_r>
 800fc02:	b002      	add	sp, #8
 800fc04:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc08:	b003      	add	sp, #12
 800fc0a:	4770      	bx	lr
 800fc0c:	20000038 	.word	0x20000038

0800fc10 <__swbuf_r>:
 800fc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc12:	460e      	mov	r6, r1
 800fc14:	4614      	mov	r4, r2
 800fc16:	4605      	mov	r5, r0
 800fc18:	b118      	cbz	r0, 800fc22 <__swbuf_r+0x12>
 800fc1a:	6a03      	ldr	r3, [r0, #32]
 800fc1c:	b90b      	cbnz	r3, 800fc22 <__swbuf_r+0x12>
 800fc1e:	f7ff fa2d 	bl	800f07c <__sinit>
 800fc22:	69a3      	ldr	r3, [r4, #24]
 800fc24:	60a3      	str	r3, [r4, #8]
 800fc26:	89a3      	ldrh	r3, [r4, #12]
 800fc28:	071a      	lsls	r2, r3, #28
 800fc2a:	d501      	bpl.n	800fc30 <__swbuf_r+0x20>
 800fc2c:	6923      	ldr	r3, [r4, #16]
 800fc2e:	b943      	cbnz	r3, 800fc42 <__swbuf_r+0x32>
 800fc30:	4621      	mov	r1, r4
 800fc32:	4628      	mov	r0, r5
 800fc34:	f000 f82a 	bl	800fc8c <__swsetup_r>
 800fc38:	b118      	cbz	r0, 800fc42 <__swbuf_r+0x32>
 800fc3a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fc3e:	4638      	mov	r0, r7
 800fc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc42:	6823      	ldr	r3, [r4, #0]
 800fc44:	6922      	ldr	r2, [r4, #16]
 800fc46:	1a98      	subs	r0, r3, r2
 800fc48:	6963      	ldr	r3, [r4, #20]
 800fc4a:	b2f6      	uxtb	r6, r6
 800fc4c:	4283      	cmp	r3, r0
 800fc4e:	4637      	mov	r7, r6
 800fc50:	dc05      	bgt.n	800fc5e <__swbuf_r+0x4e>
 800fc52:	4621      	mov	r1, r4
 800fc54:	4628      	mov	r0, r5
 800fc56:	f7ff ffa1 	bl	800fb9c <_fflush_r>
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	d1ed      	bne.n	800fc3a <__swbuf_r+0x2a>
 800fc5e:	68a3      	ldr	r3, [r4, #8]
 800fc60:	3b01      	subs	r3, #1
 800fc62:	60a3      	str	r3, [r4, #8]
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	1c5a      	adds	r2, r3, #1
 800fc68:	6022      	str	r2, [r4, #0]
 800fc6a:	701e      	strb	r6, [r3, #0]
 800fc6c:	6962      	ldr	r2, [r4, #20]
 800fc6e:	1c43      	adds	r3, r0, #1
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d004      	beq.n	800fc7e <__swbuf_r+0x6e>
 800fc74:	89a3      	ldrh	r3, [r4, #12]
 800fc76:	07db      	lsls	r3, r3, #31
 800fc78:	d5e1      	bpl.n	800fc3e <__swbuf_r+0x2e>
 800fc7a:	2e0a      	cmp	r6, #10
 800fc7c:	d1df      	bne.n	800fc3e <__swbuf_r+0x2e>
 800fc7e:	4621      	mov	r1, r4
 800fc80:	4628      	mov	r0, r5
 800fc82:	f7ff ff8b 	bl	800fb9c <_fflush_r>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d0d9      	beq.n	800fc3e <__swbuf_r+0x2e>
 800fc8a:	e7d6      	b.n	800fc3a <__swbuf_r+0x2a>

0800fc8c <__swsetup_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	4b29      	ldr	r3, [pc, #164]	@ (800fd34 <__swsetup_r+0xa8>)
 800fc90:	4605      	mov	r5, r0
 800fc92:	6818      	ldr	r0, [r3, #0]
 800fc94:	460c      	mov	r4, r1
 800fc96:	b118      	cbz	r0, 800fca0 <__swsetup_r+0x14>
 800fc98:	6a03      	ldr	r3, [r0, #32]
 800fc9a:	b90b      	cbnz	r3, 800fca0 <__swsetup_r+0x14>
 800fc9c:	f7ff f9ee 	bl	800f07c <__sinit>
 800fca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fca4:	0719      	lsls	r1, r3, #28
 800fca6:	d422      	bmi.n	800fcee <__swsetup_r+0x62>
 800fca8:	06da      	lsls	r2, r3, #27
 800fcaa:	d407      	bmi.n	800fcbc <__swsetup_r+0x30>
 800fcac:	2209      	movs	r2, #9
 800fcae:	602a      	str	r2, [r5, #0]
 800fcb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcb4:	81a3      	strh	r3, [r4, #12]
 800fcb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fcba:	e033      	b.n	800fd24 <__swsetup_r+0x98>
 800fcbc:	0758      	lsls	r0, r3, #29
 800fcbe:	d512      	bpl.n	800fce6 <__swsetup_r+0x5a>
 800fcc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcc2:	b141      	cbz	r1, 800fcd6 <__swsetup_r+0x4a>
 800fcc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fcc8:	4299      	cmp	r1, r3
 800fcca:	d002      	beq.n	800fcd2 <__swsetup_r+0x46>
 800fccc:	4628      	mov	r0, r5
 800fcce:	f7ff fb13 	bl	800f2f8 <_free_r>
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcd6:	89a3      	ldrh	r3, [r4, #12]
 800fcd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fcdc:	81a3      	strh	r3, [r4, #12]
 800fcde:	2300      	movs	r3, #0
 800fce0:	6063      	str	r3, [r4, #4]
 800fce2:	6923      	ldr	r3, [r4, #16]
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	89a3      	ldrh	r3, [r4, #12]
 800fce8:	f043 0308 	orr.w	r3, r3, #8
 800fcec:	81a3      	strh	r3, [r4, #12]
 800fcee:	6923      	ldr	r3, [r4, #16]
 800fcf0:	b94b      	cbnz	r3, 800fd06 <__swsetup_r+0x7a>
 800fcf2:	89a3      	ldrh	r3, [r4, #12]
 800fcf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fcf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fcfc:	d003      	beq.n	800fd06 <__swsetup_r+0x7a>
 800fcfe:	4621      	mov	r1, r4
 800fd00:	4628      	mov	r0, r5
 800fd02:	f000 f856 	bl	800fdb2 <__smakebuf_r>
 800fd06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd0a:	f013 0201 	ands.w	r2, r3, #1
 800fd0e:	d00a      	beq.n	800fd26 <__swsetup_r+0x9a>
 800fd10:	2200      	movs	r2, #0
 800fd12:	60a2      	str	r2, [r4, #8]
 800fd14:	6962      	ldr	r2, [r4, #20]
 800fd16:	4252      	negs	r2, r2
 800fd18:	61a2      	str	r2, [r4, #24]
 800fd1a:	6922      	ldr	r2, [r4, #16]
 800fd1c:	b942      	cbnz	r2, 800fd30 <__swsetup_r+0xa4>
 800fd1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fd22:	d1c5      	bne.n	800fcb0 <__swsetup_r+0x24>
 800fd24:	bd38      	pop	{r3, r4, r5, pc}
 800fd26:	0799      	lsls	r1, r3, #30
 800fd28:	bf58      	it	pl
 800fd2a:	6962      	ldrpl	r2, [r4, #20]
 800fd2c:	60a2      	str	r2, [r4, #8]
 800fd2e:	e7f4      	b.n	800fd1a <__swsetup_r+0x8e>
 800fd30:	2000      	movs	r0, #0
 800fd32:	e7f7      	b.n	800fd24 <__swsetup_r+0x98>
 800fd34:	20000038 	.word	0x20000038

0800fd38 <_sbrk_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	4d06      	ldr	r5, [pc, #24]	@ (800fd54 <_sbrk_r+0x1c>)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4604      	mov	r4, r0
 800fd40:	4608      	mov	r0, r1
 800fd42:	602b      	str	r3, [r5, #0]
 800fd44:	f7f0 ffda 	bl	8000cfc <_sbrk>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	d102      	bne.n	800fd52 <_sbrk_r+0x1a>
 800fd4c:	682b      	ldr	r3, [r5, #0]
 800fd4e:	b103      	cbz	r3, 800fd52 <_sbrk_r+0x1a>
 800fd50:	6023      	str	r3, [r4, #0]
 800fd52:	bd38      	pop	{r3, r4, r5, pc}
 800fd54:	200083e8 	.word	0x200083e8

0800fd58 <abort>:
 800fd58:	b508      	push	{r3, lr}
 800fd5a:	2006      	movs	r0, #6
 800fd5c:	f000 f88e 	bl	800fe7c <raise>
 800fd60:	2001      	movs	r0, #1
 800fd62:	f7f0 ff53 	bl	8000c0c <_exit>

0800fd66 <__swhatbuf_r>:
 800fd66:	b570      	push	{r4, r5, r6, lr}
 800fd68:	460c      	mov	r4, r1
 800fd6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd6e:	2900      	cmp	r1, #0
 800fd70:	b096      	sub	sp, #88	@ 0x58
 800fd72:	4615      	mov	r5, r2
 800fd74:	461e      	mov	r6, r3
 800fd76:	da0d      	bge.n	800fd94 <__swhatbuf_r+0x2e>
 800fd78:	89a3      	ldrh	r3, [r4, #12]
 800fd7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd7e:	f04f 0100 	mov.w	r1, #0
 800fd82:	bf14      	ite	ne
 800fd84:	2340      	movne	r3, #64	@ 0x40
 800fd86:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	6031      	str	r1, [r6, #0]
 800fd8e:	602b      	str	r3, [r5, #0]
 800fd90:	b016      	add	sp, #88	@ 0x58
 800fd92:	bd70      	pop	{r4, r5, r6, pc}
 800fd94:	466a      	mov	r2, sp
 800fd96:	f000 f879 	bl	800fe8c <_fstat_r>
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	dbec      	blt.n	800fd78 <__swhatbuf_r+0x12>
 800fd9e:	9901      	ldr	r1, [sp, #4]
 800fda0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fda4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fda8:	4259      	negs	r1, r3
 800fdaa:	4159      	adcs	r1, r3
 800fdac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fdb0:	e7eb      	b.n	800fd8a <__swhatbuf_r+0x24>

0800fdb2 <__smakebuf_r>:
 800fdb2:	898b      	ldrh	r3, [r1, #12]
 800fdb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdb6:	079d      	lsls	r5, r3, #30
 800fdb8:	4606      	mov	r6, r0
 800fdba:	460c      	mov	r4, r1
 800fdbc:	d507      	bpl.n	800fdce <__smakebuf_r+0x1c>
 800fdbe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fdc2:	6023      	str	r3, [r4, #0]
 800fdc4:	6123      	str	r3, [r4, #16]
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	6163      	str	r3, [r4, #20]
 800fdca:	b003      	add	sp, #12
 800fdcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdce:	ab01      	add	r3, sp, #4
 800fdd0:	466a      	mov	r2, sp
 800fdd2:	f7ff ffc8 	bl	800fd66 <__swhatbuf_r>
 800fdd6:	9f00      	ldr	r7, [sp, #0]
 800fdd8:	4605      	mov	r5, r0
 800fdda:	4639      	mov	r1, r7
 800fddc:	4630      	mov	r0, r6
 800fdde:	f7ff faff 	bl	800f3e0 <_malloc_r>
 800fde2:	b948      	cbnz	r0, 800fdf8 <__smakebuf_r+0x46>
 800fde4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fde8:	059a      	lsls	r2, r3, #22
 800fdea:	d4ee      	bmi.n	800fdca <__smakebuf_r+0x18>
 800fdec:	f023 0303 	bic.w	r3, r3, #3
 800fdf0:	f043 0302 	orr.w	r3, r3, #2
 800fdf4:	81a3      	strh	r3, [r4, #12]
 800fdf6:	e7e2      	b.n	800fdbe <__smakebuf_r+0xc>
 800fdf8:	89a3      	ldrh	r3, [r4, #12]
 800fdfa:	6020      	str	r0, [r4, #0]
 800fdfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe00:	81a3      	strh	r3, [r4, #12]
 800fe02:	9b01      	ldr	r3, [sp, #4]
 800fe04:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fe08:	b15b      	cbz	r3, 800fe22 <__smakebuf_r+0x70>
 800fe0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f000 f84e 	bl	800feb0 <_isatty_r>
 800fe14:	b128      	cbz	r0, 800fe22 <__smakebuf_r+0x70>
 800fe16:	89a3      	ldrh	r3, [r4, #12]
 800fe18:	f023 0303 	bic.w	r3, r3, #3
 800fe1c:	f043 0301 	orr.w	r3, r3, #1
 800fe20:	81a3      	strh	r3, [r4, #12]
 800fe22:	89a3      	ldrh	r3, [r4, #12]
 800fe24:	431d      	orrs	r5, r3
 800fe26:	81a5      	strh	r5, [r4, #12]
 800fe28:	e7cf      	b.n	800fdca <__smakebuf_r+0x18>

0800fe2a <_raise_r>:
 800fe2a:	291f      	cmp	r1, #31
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	4605      	mov	r5, r0
 800fe30:	460c      	mov	r4, r1
 800fe32:	d904      	bls.n	800fe3e <_raise_r+0x14>
 800fe34:	2316      	movs	r3, #22
 800fe36:	6003      	str	r3, [r0, #0]
 800fe38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe3c:	bd38      	pop	{r3, r4, r5, pc}
 800fe3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe40:	b112      	cbz	r2, 800fe48 <_raise_r+0x1e>
 800fe42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe46:	b94b      	cbnz	r3, 800fe5c <_raise_r+0x32>
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f000 f853 	bl	800fef4 <_getpid_r>
 800fe4e:	4622      	mov	r2, r4
 800fe50:	4601      	mov	r1, r0
 800fe52:	4628      	mov	r0, r5
 800fe54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe58:	f000 b83a 	b.w	800fed0 <_kill_r>
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d00a      	beq.n	800fe76 <_raise_r+0x4c>
 800fe60:	1c59      	adds	r1, r3, #1
 800fe62:	d103      	bne.n	800fe6c <_raise_r+0x42>
 800fe64:	2316      	movs	r3, #22
 800fe66:	6003      	str	r3, [r0, #0]
 800fe68:	2001      	movs	r0, #1
 800fe6a:	e7e7      	b.n	800fe3c <_raise_r+0x12>
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe72:	4620      	mov	r0, r4
 800fe74:	4798      	blx	r3
 800fe76:	2000      	movs	r0, #0
 800fe78:	e7e0      	b.n	800fe3c <_raise_r+0x12>
	...

0800fe7c <raise>:
 800fe7c:	4b02      	ldr	r3, [pc, #8]	@ (800fe88 <raise+0xc>)
 800fe7e:	4601      	mov	r1, r0
 800fe80:	6818      	ldr	r0, [r3, #0]
 800fe82:	f7ff bfd2 	b.w	800fe2a <_raise_r>
 800fe86:	bf00      	nop
 800fe88:	20000038 	.word	0x20000038

0800fe8c <_fstat_r>:
 800fe8c:	b538      	push	{r3, r4, r5, lr}
 800fe8e:	4d07      	ldr	r5, [pc, #28]	@ (800feac <_fstat_r+0x20>)
 800fe90:	2300      	movs	r3, #0
 800fe92:	4604      	mov	r4, r0
 800fe94:	4608      	mov	r0, r1
 800fe96:	4611      	mov	r1, r2
 800fe98:	602b      	str	r3, [r5, #0]
 800fe9a:	f7f0 ff07 	bl	8000cac <_fstat>
 800fe9e:	1c43      	adds	r3, r0, #1
 800fea0:	d102      	bne.n	800fea8 <_fstat_r+0x1c>
 800fea2:	682b      	ldr	r3, [r5, #0]
 800fea4:	b103      	cbz	r3, 800fea8 <_fstat_r+0x1c>
 800fea6:	6023      	str	r3, [r4, #0]
 800fea8:	bd38      	pop	{r3, r4, r5, pc}
 800feaa:	bf00      	nop
 800feac:	200083e8 	.word	0x200083e8

0800feb0 <_isatty_r>:
 800feb0:	b538      	push	{r3, r4, r5, lr}
 800feb2:	4d06      	ldr	r5, [pc, #24]	@ (800fecc <_isatty_r+0x1c>)
 800feb4:	2300      	movs	r3, #0
 800feb6:	4604      	mov	r4, r0
 800feb8:	4608      	mov	r0, r1
 800feba:	602b      	str	r3, [r5, #0]
 800febc:	f7f0 ff06 	bl	8000ccc <_isatty>
 800fec0:	1c43      	adds	r3, r0, #1
 800fec2:	d102      	bne.n	800feca <_isatty_r+0x1a>
 800fec4:	682b      	ldr	r3, [r5, #0]
 800fec6:	b103      	cbz	r3, 800feca <_isatty_r+0x1a>
 800fec8:	6023      	str	r3, [r4, #0]
 800feca:	bd38      	pop	{r3, r4, r5, pc}
 800fecc:	200083e8 	.word	0x200083e8

0800fed0 <_kill_r>:
 800fed0:	b538      	push	{r3, r4, r5, lr}
 800fed2:	4d07      	ldr	r5, [pc, #28]	@ (800fef0 <_kill_r+0x20>)
 800fed4:	2300      	movs	r3, #0
 800fed6:	4604      	mov	r4, r0
 800fed8:	4608      	mov	r0, r1
 800feda:	4611      	mov	r1, r2
 800fedc:	602b      	str	r3, [r5, #0]
 800fede:	f7f0 fe83 	bl	8000be8 <_kill>
 800fee2:	1c43      	adds	r3, r0, #1
 800fee4:	d102      	bne.n	800feec <_kill_r+0x1c>
 800fee6:	682b      	ldr	r3, [r5, #0]
 800fee8:	b103      	cbz	r3, 800feec <_kill_r+0x1c>
 800feea:	6023      	str	r3, [r4, #0]
 800feec:	bd38      	pop	{r3, r4, r5, pc}
 800feee:	bf00      	nop
 800fef0:	200083e8 	.word	0x200083e8

0800fef4 <_getpid_r>:
 800fef4:	f7f0 be6f 	b.w	8000bd6 <_getpid>

0800fef8 <_init>:
 800fef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fefa:	bf00      	nop
 800fefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fefe:	bc08      	pop	{r3}
 800ff00:	469e      	mov	lr, r3
 800ff02:	4770      	bx	lr

0800ff04 <_fini>:
 800ff04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff06:	bf00      	nop
 800ff08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff0a:	bc08      	pop	{r3}
 800ff0c:	469e      	mov	lr, r3
 800ff0e:	4770      	bx	lr
