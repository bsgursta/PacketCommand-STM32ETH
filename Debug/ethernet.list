
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008564  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008764  08008764  00009764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087c4  080087c4  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080087c4  080087c4  000097c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087cc  080087cc  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087cc  080087cc  000097cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087d0  080087d0  000097d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080087d4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000591c  20000060  08008834  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000597c  08008834  0000a97c  2**0
                  ALLOC
 11 .lwip_sec     00000140  2007c000  2007c000  0000b000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a2ab  00000000  00000000  0000a08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dd4  00000000  00000000  00034339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec0  00000000  00000000  00039110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017ec  00000000  00000000  0003afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bab6  00000000  00000000  0003c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002350d  00000000  00000000  00068272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118342  00000000  00000000  0008b77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a3ac1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000860c  00000000  00000000  001a3b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001ac110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800874c 	.word	0x0800874c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800874c 	.word	0x0800874c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <AppMain>:
#include "app_main.h"
#include "main.h"
#include "lcd.h"

void AppMain(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

	//test LCD
	lcd_4SPI_init();
 8000570:	f000 f8f0 	bl	8000754 <lcd_4SPI_init>
	setPageaddressing();
 8000574:	f000 f85e 	bl	8000634 <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 f871 	bl	8000660 <lcd_setpage_address>
	lcd_setcolumn_address(0);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 f888 	bl	8000694 <lcd_setcolumn_address>

	while(1){

		onLCD();
 8000584:	f000 f82a 	bl	80005dc <onLCD>
		fillLCD();
 8000588:	f000 f934 	bl	80007f4 <fillLCD>
		clearLCD();
 800058c:	f000 f8fa 	bl	8000784 <clearLCD>
		offLCD();
 8000590:	f000 f83a 	bl	8000608 <offLCD>
		onLCD();
 8000594:	bf00      	nop
 8000596:	e7f5      	b.n	8000584 <AppMain+0x18>

08000598 <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	@ 0x40
 80005a6:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <lcd_transfer+0x3c>)
 80005a8:	f001 fe94 	bl	80022d4 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80005ac:	1df9      	adds	r1, r7, #7
 80005ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b2:	2201      	movs	r2, #1
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <lcd_transfer+0x40>)
 80005b6:	f003 fa44 	bl	8003a42 <HAL_SPI_Transmit>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	2140      	movs	r1, #64	@ 0x40
 80005c2:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <lcd_transfer+0x3c>)
 80005c4:	f001 fe86 	bl	80022d4 <HAL_GPIO_WritePin>

	return HAL_OK;
 80005c8:	2300      	movs	r3, #0

}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40020c00 	.word	0x40020c00
 80005d8:	20000174 	.word	0x20000174

080005dc <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 80005e2:	23af      	movs	r3, #175	@ 0xaf
 80005e4:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <onLCD+0x28>)
 80005ec:	f001 fe72 	bl	80022d4 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffd0 	bl	8000598 <lcd_transfer>
 80005f8:	4603      	mov	r3, r0

}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020c00 	.word	0x40020c00

08000608 <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 800060e:	23ae      	movs	r3, #174	@ 0xae
 8000610:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <offLCD+0x28>)
 8000618:	f001 fe5c 	bl	80022d4 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffba 	bl	8000598 <lcd_transfer>
 8000624:	4603      	mov	r3, r0
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020c00 	.word	0x40020c00

08000634 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 800063a:	2320      	movs	r3, #32
 800063c:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	4806      	ldr	r0, [pc, #24]	@ (800065c <setPageaddressing+0x28>)
 8000644:	f001 fe46 	bl	80022d4 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffa4 	bl	8000598 <lcd_transfer>
 8000650:	4603      	mov	r3, r0
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020c00 	.word	0x40020c00

08000660 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000672:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	4805      	ldr	r0, [pc, #20]	@ (8000690 <lcd_setpage_address+0x30>)
 800067a:	f001 fe2b 	bl	80022d4 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff89 	bl	8000598 <lcd_transfer>
 8000686:	4603      	mov	r3, r0
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020c00 	.word	0x40020c00

08000694 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b7f      	cmp	r3, #127	@ 0x7f
 80006a0:	dc02      	bgt.n	80006a8 <lcd_setcolumn_address+0x14>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da01      	bge.n	80006ac <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e030      	b.n	800070e <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 80006b0:	2310      	movs	r3, #16
 80006b2:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 80006b4:	2300      	movs	r3, #0
 80006b6:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	091b      	lsrs	r3, r3, #4
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	b25a      	sxtb	r2, r3
 80006c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 80006ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	b25a      	sxtb	r2, r3
 80006d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006d8:	4313      	orrs	r3, r2
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <lcd_setcolumn_address+0x84>)
 80006e4:	f001 fdf6 	bl	80022d4 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff54 	bl	8000598 <lcd_transfer>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e009      	b.n	800070e <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 80006fa:	7b7b      	ldrb	r3, [r7, #13]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff4b 	bl	8000598 <lcd_transfer>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	e000      	b.n	800070e <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020c00 	.word	0x40020c00

0800071c <lcd_writeRAM>:

HAL_StatusTypeDef lcd_writeRAM(uint8_t data){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	//pull A0 high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	2180      	movs	r1, #128	@ 0x80
 800072a:	4809      	ldr	r0, [pc, #36]	@ (8000750 <lcd_writeRAM+0x34>)
 800072c:	f001 fdd2 	bl	80022d4 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef status = lcd_transfer(data);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff30 	bl	8000598 <lcd_transfer>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	4803      	ldr	r0, [pc, #12]	@ (8000750 <lcd_writeRAM+0x34>)
 8000742:	f001 fdc7 	bl	80022d4 <HAL_GPIO_WritePin>

	return status;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020c00 	.word	0x40020c00

08000754 <lcd_4SPI_init>:

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2140      	movs	r1, #64	@ 0x40
 800075c:	4807      	ldr	r0, [pc, #28]	@ (800077c <lcd_4SPI_init+0x28>)
 800075e:	f001 fdb9 	bl	80022d4 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2101      	movs	r1, #1
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <lcd_4SPI_init+0x2c>)
 8000768:	f001 fdb4 	bl	80022d4 <HAL_GPIO_WritePin>

	//dummy transmission for SPI
	onLCD();
 800076c:	f7ff ff36 	bl	80005dc <onLCD>
	offLCD();
 8000770:	f7ff ff4a 	bl	8000608 <offLCD>

	return HAL_OK;
 8000774:	2300      	movs	r3, #0

}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40020c00 	.word	0x40020c00
 8000780:	40020800 	.word	0x40020800

08000784 <clearLCD>:

//set the entirety of the screen to 0, wiping the screen.
HAL_StatusTypeDef  clearLCD(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0

	int errors = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]

	for(int a = 0; a < 16; a++){
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	e022      	b.n	80007da <clearLCD+0x56>
		lcd_setpage_address(a);
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f7ff ff63 	bl	8000660 <lcd_setpage_address>
		lcd_setcolumn_address(0);
 800079a:	2000      	movs	r0, #0
 800079c:	f7ff ff7a 	bl	8000694 <lcd_setcolumn_address>

		for(int i = 0; i < 128; i++){
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	e013      	b.n	80007ce <clearLCD+0x4a>
			//starting point for my LCD
			if(i == 32){
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b20      	cmp	r3, #32
 80007aa:	d100      	bne.n	80007ae <clearLCD+0x2a>
				__NOP();
 80007ac:	bf00      	nop
			}

			//ending point of my LCD
			if(i == 97){
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b61      	cmp	r3, #97	@ 0x61
 80007b2:	d100      	bne.n	80007b6 <clearLCD+0x32>
				__NOP();
 80007b4:	bf00      	nop
			}

			if(lcd_writeRAM(0x00) != HAL_OK){
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ffb0 	bl	800071c <lcd_writeRAM>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <clearLCD+0x44>
				errors +=1;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 128; i++){
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80007d2:	dde8      	ble.n	80007a6 <clearLCD+0x22>
	for(int a = 0; a < 16; a++){
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	ddd9      	ble.n	8000794 <clearLCD+0x10>
			}
			//HAL_Delay(10);
		}
	}

	if(errors == 0){
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d101      	bne.n	80007ea <clearLCD+0x66>
		return HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e000      	b.n	80007ec <clearLCD+0x68>
	}
	else{
		return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
	}
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <fillLCD>:

//fill the LCD with 1 bits, making it turn off. Include delay for visual assistance
HAL_StatusTypeDef  fillLCD(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0

	int errors = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

	for(int a = 0; a < 16; a++){
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	e01a      	b.n	800083a <fillLCD+0x46>
		lcd_setpage_address(a);
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f7ff ff2b 	bl	8000660 <lcd_setpage_address>
		lcd_setcolumn_address(0);
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff ff42 	bl	8000694 <lcd_setcolumn_address>

		for(int i = 0; i < 128; i++){
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	e00b      	b.n	800082e <fillLCD+0x3a>
			if(lcd_writeRAM(0xFF) != HAL_OK){
 8000816:	20ff      	movs	r0, #255	@ 0xff
 8000818:	f7ff ff80 	bl	800071c <lcd_writeRAM>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <fillLCD+0x34>
				errors +=1;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	3301      	adds	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 128; i++){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b7f      	cmp	r3, #127	@ 0x7f
 8000832:	ddf0      	ble.n	8000816 <fillLCD+0x22>
	for(int a = 0; a < 16; a++){
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	3301      	adds	r3, #1
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	dde1      	ble.n	8000804 <fillLCD+0x10>
			}
			//HAL_Delay(5);
		}
	}

	if(errors == 0){
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d101      	bne.n	800084a <fillLCD+0x56>
		return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <fillLCD+0x58>
	}
	else{
		return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
	}
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000858:	f000 fa6e 	bl	8000d38 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fdc0 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f822 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f000 f996 	bl	8000b94 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000868:	f000 f936 	bl	8000ad8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800086c:	f000 f964 	bl	8000b38 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000870:	f000 f8f4 	bl	8000a5c <MX_SPI2_Init>
  MX_ETH_Init();
 8000874:	f000 f88a 	bl	800098c <MX_ETH_Init>
  MX_RNG_Init();
 8000878:	f000 f8d6 	bl	8000a28 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800087c:	f004 ff58 	bl	8005730 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000880:	4a06      	ldr	r2, [pc, #24]	@ (800089c <main+0x48>)
 8000882:	2100      	movs	r1, #0
 8000884:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <main+0x4c>)
 8000886:	f004 ffbd 	bl	8005804 <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <main+0x50>)
 800088e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000890:	f004 ff82 	bl	8005798 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 8000894:	f7ff fe6a 	bl	800056c <AppMain>
 8000898:	e7fc      	b.n	8000894 <main+0x40>
 800089a:	bf00      	nop
 800089c:	08008788 	.word	0x08008788
 80008a0:	08000d29 	.word	0x08000d29
 80008a4:	20000740 	.word	0x20000740

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	@ 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2234      	movs	r2, #52	@ 0x34
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f007 fe58 	bl	800856c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008cc:	f001 fe56 	bl	800257c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000984 <SystemClock_Config+0xdc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000984 <SystemClock_Config+0xdc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
 80008dc:	4b29      	ldr	r3, [pc, #164]	@ (8000984 <SystemClock_Config+0xdc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e8:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <SystemClock_Config+0xe0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f0:	4a25      	ldr	r2, [pc, #148]	@ (8000988 <SystemClock_Config+0xe0>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <SystemClock_Config+0xe0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000908:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800090c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000916:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800091c:	2360      	movs	r3, #96	@ 0x60
 800091e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000928:	2302      	movs	r3, #2
 800092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fe83 	bl	800263c <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800093c:	f000 fa3c 	bl	8000db8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000940:	f001 fe2c 	bl	800259c <HAL_PWREx_EnableOverDrive>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800094a:	f000 fa35 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000964:	f107 0308 	add.w	r3, r7, #8
 8000968:	2103      	movs	r1, #3
 800096a:	4618      	mov	r0, r3
 800096c:	f002 f914 	bl	8002b98 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000976:	f000 fa1f 	bl	8000db8 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	@ 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_ETH_Init+0x84>)
 8000992:	4a20      	ldr	r2, [pc, #128]	@ (8000a14 <MX_ETH_Init+0x88>)
 8000994:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <MX_ETH_Init+0x8c>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800099c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a18 <MX_ETH_Init+0x8c>)
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_ETH_Init+0x8c>)
 80009a4:	22e1      	movs	r2, #225	@ 0xe1
 80009a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a18 <MX_ETH_Init+0x8c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_ETH_Init+0x8c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009b4:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <MX_ETH_Init+0x8c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_ETH_Init+0x84>)
 80009bc:	4a16      	ldr	r2, [pc, #88]	@ (8000a18 <MX_ETH_Init+0x8c>)
 80009be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_ETH_Init+0x84>)
 80009c2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80009c6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_ETH_Init+0x84>)
 80009ca:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <MX_ETH_Init+0x90>)
 80009cc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_ETH_Init+0x84>)
 80009d0:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <MX_ETH_Init+0x94>)
 80009d2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_ETH_Init+0x84>)
 80009d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80009da:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_ETH_Init+0x84>)
 80009de:	f000 feb9 	bl	8001754 <HAL_ETH_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009e8:	f000 f9e6 	bl	8000db8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ec:	2238      	movs	r2, #56	@ 0x38
 80009ee:	2100      	movs	r1, #0
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <MX_ETH_Init+0x98>)
 80009f2:	f007 fdbb 	bl	800856c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_ETH_Init+0x98>)
 80009f8:	2221      	movs	r2, #33	@ 0x21
 80009fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_ETH_Init+0x98>)
 80009fe:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a02:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <MX_ETH_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000b4 	.word	0x200000b4
 8000a14:	40028000 	.word	0x40028000
 8000a18:	20000744 	.word	0x20000744
 8000a1c:	2007c0a0 	.word	0x2007c0a0
 8000a20:	2007c000 	.word	0x2007c000
 8000a24:	2000007c 	.word	0x2000007c

08000a28 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
static void MX_RNG_Init(void)
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	607b      	str	r3, [r7, #4]
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <MX_RNG_Init+0x2c>)
 8000a36:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <MX_RNG_Init+0x30>)
 8000a38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <MX_RNG_Init+0x2c>)
 8000a3c:	f002 ff2c 	bl	8003898 <HAL_RNG_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_RNG_Init+0x22>
  {
    Error_Handler();
 8000a46:	f000 f9b7 	bl	8000db8 <Error_Handler>
      else
          return pdFALSE;
  }
  /* USER CODE END RNG_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000164 	.word	0x20000164
 8000a58:	50060800 	.word	0x50060800

08000a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad4 <MX_SPI2_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a76:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a7a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a7e:	2202      	movs	r2, #2
 8000a80:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a8e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a92:	2238      	movs	r2, #56	@ 0x38
 8000a94:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000aaa:	2207      	movs	r2, #7
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_SPI2_Init+0x74>)
 8000abc:	f002 ff16 	bl	80038ec <HAL_SPI_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 f977 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000174 	.word	0x20000174
 8000ad4:	40003800 	.word	0x40003800

08000ad8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000ade:	4a15      	ldr	r2, [pc, #84]	@ (8000b34 <MX_USART3_UART_Init+0x5c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_USART3_UART_Init+0x58>)
 8000b1c:	f003 fd5e 	bl	80045dc <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b26:	f000 f947 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200001d8 	.word	0x200001d8
 8000b34:	40004800 	.word	0x40004800

08000b38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	2206      	movs	r2, #6
 8000b48:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b68:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b7c:	f001 fbc3 	bl	8002306 <HAL_PCD_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b86:	f000 f917 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000260 	.word	0x20000260

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	@ 0x30
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b5a      	ldr	r3, [pc, #360]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a59      	ldr	r2, [pc, #356]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b57      	ldr	r3, [pc, #348]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	4b54      	ldr	r3, [pc, #336]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a53      	ldr	r2, [pc, #332]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b51      	ldr	r3, [pc, #324]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b4e      	ldr	r3, [pc, #312]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a4d      	ldr	r2, [pc, #308]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b48      	ldr	r3, [pc, #288]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a47      	ldr	r2, [pc, #284]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b45      	ldr	r3, [pc, #276]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b42      	ldr	r3, [pc, #264]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a41      	ldr	r2, [pc, #260]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b3c      	ldr	r3, [pc, #240]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a3b      	ldr	r2, [pc, #236]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b39      	ldr	r3, [pc, #228]	@ (8000d14 <MX_GPIO_Init+0x180>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4836      	ldr	r0, [pc, #216]	@ (8000d18 <MX_GPIO_Init+0x184>)
 8000c40:	f001 fb48 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000c4a:	4834      	ldr	r0, [pc, #208]	@ (8000d1c <MX_GPIO_Init+0x188>)
 8000c4c:	f001 fb42 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2140      	movs	r1, #64	@ 0x40
 8000c54:	4832      	ldr	r0, [pc, #200]	@ (8000d20 <MX_GPIO_Init+0x18c>)
 8000c56:	f001 fb3d 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	21c0      	movs	r1, #192	@ 0xc0
 8000c5e:	4831      	ldr	r0, [pc, #196]	@ (8000d24 <MX_GPIO_Init+0x190>)
 8000c60:	f001 fb38 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4827      	ldr	r0, [pc, #156]	@ (8000d18 <MX_GPIO_Init+0x184>)
 8000c7c:	f001 f97e 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4820      	ldr	r0, [pc, #128]	@ (8000d18 <MX_GPIO_Init+0x184>)
 8000c98:	f001 f970 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c9c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4819      	ldr	r0, [pc, #100]	@ (8000d1c <MX_GPIO_Init+0x188>)
 8000cb6:	f001 f961 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4813      	ldr	r0, [pc, #76]	@ (8000d20 <MX_GPIO_Init+0x18c>)
 8000cd2:	f001 f953 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cd6:	2380      	movs	r3, #128	@ 0x80
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_GPIO_Init+0x18c>)
 8000cea:	f001 f947 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cee:	23c0      	movs	r3, #192	@ 0xc0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <MX_GPIO_Init+0x190>)
 8000d06:	f001 f939 	bl	8001f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	@ 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40021800 	.word	0x40021800
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f004 fe0d 	bl	8005950 <osDelay>
 8000d36:	e7fb      	b.n	8000d30 <StartDefaultTask+0x8>

08000d38 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d4a:	f000 fc8b 	bl	8001664 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MPU_Config+0x58>)
 8000d58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000d5a:	230d      	movs	r3, #13
 8000d5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d66:	2303      	movs	r3, #3
 8000d68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fca9 	bl	80016d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8000d82:	2006      	movs	r0, #6
 8000d84:	f000 fc86 	bl	8001694 <HAL_MPU_Enable>

}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2007c000 	.word	0x2007c000

08000d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000da6:	f000 fb37 	bl	8001418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40001000 	.word	0x40001000

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	4a10      	ldr	r2, [pc, #64]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	f06f 0001 	mvn.w	r0, #1
 8000e02:	f000 fc05 	bl	8001610 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	@ 0x38
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a4e      	ldr	r2, [pc, #312]	@ (8000f6c <HAL_ETH_MspInit+0x158>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	f040 8096 	bne.w	8000f64 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e38:	4b4d      	ldr	r3, [pc, #308]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e44:	4b4a      	ldr	r3, [pc, #296]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e4c:	623b      	str	r3, [r7, #32]
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	4b47      	ldr	r3, [pc, #284]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e54:	4a46      	ldr	r2, [pc, #280]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5c:	4b44      	ldr	r3, [pc, #272]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	4b41      	ldr	r3, [pc, #260]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6c:	4a40      	ldr	r2, [pc, #256]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e74:	4b3e      	ldr	r3, [pc, #248]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e80:	4b3b      	ldr	r3, [pc, #236]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	4a3a      	ldr	r2, [pc, #232]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8c:	4b38      	ldr	r3, [pc, #224]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b35      	ldr	r3, [pc, #212]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9c:	4a34      	ldr	r2, [pc, #208]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	4a28      	ldr	r2, [pc, #160]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <HAL_ETH_MspInit+0x15c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ee0:	233a      	movs	r3, #58	@ 0x3a
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef0:	230b      	movs	r3, #11
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481e      	ldr	r0, [pc, #120]	@ (8000f74 <HAL_ETH_MspInit+0x160>)
 8000efc:	f001 f83e 	bl	8001f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 8000f00:	238e      	movs	r3, #142	@ 0x8e
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f10:	230b      	movs	r3, #11
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4817      	ldr	r0, [pc, #92]	@ (8000f78 <HAL_ETH_MspInit+0x164>)
 8000f1c:	f001 f82e 	bl	8001f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8000f20:	f242 0301 	movw	r3, #8193	@ 0x2001
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f32:	230b      	movs	r3, #11
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480f      	ldr	r0, [pc, #60]	@ (8000f7c <HAL_ETH_MspInit+0x168>)
 8000f3e:	f001 f81d 	bl	8001f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f42:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f54:	230b      	movs	r3, #11
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <HAL_ETH_MspInit+0x16c>)
 8000f60:	f001 f80c 	bl	8001f7c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f64:	bf00      	nop
 8000f66:	3738      	adds	r7, #56	@ 0x38
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40028000 	.word	0x40028000
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40021800 	.word	0x40021800

08000f84 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0a8      	sub	sp, #160	@ 0xa0
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2290      	movs	r2, #144	@ 0x90
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f007 fae9 	bl	800856c <memset>
  if(hrng->Instance==RNG)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_RNG_MspInit+0x60>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d11b      	bne.n	8000fdc <HAL_RNG_MspInit+0x58>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fa4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000fa8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f847 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000fc0:	f7ff fefa 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_RNG_MspInit+0x64>)
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fc8:	4a07      	ldr	r2, [pc, #28]	@ (8000fe8 <HAL_RNG_MspInit+0x64>)
 8000fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fce:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fd0:	4b05      	ldr	r3, [pc, #20]	@ (8000fe8 <HAL_RNG_MspInit+0x64>)
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000fdc:	bf00      	nop
 8000fde:	37a0      	adds	r7, #160	@ 0xa0
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	50060800 	.word	0x50060800
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <HAL_SPI_MspInit+0x7c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d128      	bne.n	8001060 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800100e:	4b17      	ldr	r3, [pc, #92]	@ (800106c <HAL_SPI_MspInit+0x80>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <HAL_SPI_MspInit+0x80>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001018:	6413      	str	r3, [r2, #64]	@ 0x40
 800101a:	4b14      	ldr	r3, [pc, #80]	@ (800106c <HAL_SPI_MspInit+0x80>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b11      	ldr	r3, [pc, #68]	@ (800106c <HAL_SPI_MspInit+0x80>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a10      	ldr	r2, [pc, #64]	@ (800106c <HAL_SPI_MspInit+0x80>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_SPI_MspInit+0x80>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800103e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001050:	2305      	movs	r3, #5
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <HAL_SPI_MspInit+0x84>)
 800105c:	f000 ff8e 	bl	8001f7c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	@ 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40003800 	.word	0x40003800
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400

08001074 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0ae      	sub	sp, #184	@ 0xb8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2290      	movs	r2, #144	@ 0x90
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f007 fa69 	bl	800856c <memset>
  if(huart->Instance==USART3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a22      	ldr	r2, [pc, #136]	@ (8001128 <HAL_UART_MspInit+0xb4>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d13c      	bne.n	800111e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 ffc8 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff fe7b 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c2:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	4a19      	ldr	r2, [pc, #100]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a13      	ldr	r2, [pc, #76]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800110c:	2307      	movs	r3, #7
 800110e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001112:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <HAL_UART_MspInit+0xbc>)
 800111a:	f000 ff2f 	bl	8001f7c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800111e:	bf00      	nop
 8001120:	37b8      	adds	r7, #184	@ 0xb8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40004800 	.word	0x40004800
 800112c:	40023800 	.word	0x40023800
 8001130:	40020c00 	.word	0x40020c00

08001134 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0ae      	sub	sp, #184	@ 0xb8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2290      	movs	r2, #144	@ 0x90
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f007 fa09 	bl	800856c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001162:	d159      	bne.n	8001218 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001164:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001168:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800116a:	2300      	movs	r3, #0
 800116c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4618      	mov	r0, r3
 8001176:	f001 ff67 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001180:	f7ff fe1a 	bl	8000db8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	4a25      	ldr	r2, [pc, #148]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001190:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800119c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011b6:	230a      	movs	r3, #10
 80011b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	@ (8001224 <HAL_PCD_MspInit+0xf0>)
 80011c4:	f000 feda 	bl	8001f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4810      	ldr	r0, [pc, #64]	@ (8001224 <HAL_PCD_MspInit+0xf0>)
 80011e4:	f000 feca 	bl	8001f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 80011ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 80011ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 80011f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 8001206:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120a:	6453      	str	r3, [r2, #68]	@ 0x44
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <HAL_PCD_MspInit+0xec>)
 800120e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001218:	bf00      	nop
 800121a:	37b8      	adds	r7, #184	@ 0xb8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	@ 0x38
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001238:	4b33      	ldr	r3, [pc, #204]	@ (8001308 <HAL_InitTick+0xe0>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <HAL_InitTick+0xe0>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6413      	str	r3, [r2, #64]	@ 0x40
 8001244:	4b30      	ldr	r3, [pc, #192]	@ (8001308 <HAL_InitTick+0xe0>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001250:	f107 0210 	add.w	r2, r7, #16
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f001 fec2 	bl	8002fe4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001266:	2b00      	cmp	r3, #0
 8001268:	d103      	bne.n	8001272 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800126a:	f001 fe93 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 800126e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001270:	e004      	b.n	800127c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001272:	f001 fe8f 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8001276:	4603      	mov	r3, r0
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800127c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800127e:	4a23      	ldr	r2, [pc, #140]	@ (800130c <HAL_InitTick+0xe4>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9b      	lsrs	r3, r3, #18
 8001286:	3b01      	subs	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <HAL_InitTick+0xe8>)
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_InitTick+0xec>)
 800128e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <HAL_InitTick+0xe8>)
 8001292:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001296:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001298:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <HAL_InitTick+0xe8>)
 800129a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800129c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <HAL_InitTick+0xe8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_InitTick+0xe8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_InitTick+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012b0:	4817      	ldr	r0, [pc, #92]	@ (8001310 <HAL_InitTick+0xe8>)
 80012b2:	f002 fec5 	bl	8004040 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d11b      	bne.n	80012fc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012c4:	4812      	ldr	r0, [pc, #72]	@ (8001310 <HAL_InitTick+0xe8>)
 80012c6:	f002 ff1d 	bl	8004104 <HAL_TIM_Base_Start_IT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d111      	bne.n	80012fc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012d8:	2036      	movs	r0, #54	@ 0x36
 80012da:	f000 f9b5 	bl	8001648 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d808      	bhi.n	80012f6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2036      	movs	r0, #54	@ 0x36
 80012ea:	f000 f991 	bl	8001610 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <HAL_InitTick+0xf0>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e002      	b.n	80012fc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001300:	4618      	mov	r0, r3
 8001302:	3738      	adds	r7, #56	@ 0x38
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	431bde83 	.word	0x431bde83
 8001310:	2000074c 	.word	0x2000074c
 8001314:	40001000 	.word	0x40001000
 8001318:	20000004 	.word	0x20000004

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM6_DAC_IRQHandler+0x10>)
 800135a:	f002 ff4b 	bl	80041f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000074c 	.word	0x2000074c

08001368 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <SystemInit+0x20>)
 800136e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <SystemInit+0x20>)
 8001374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800138c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001390:	f7ff ffea 	bl	8001368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001396:	490d      	ldr	r1, [pc, #52]	@ (80013cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001398:	4a0d      	ldr	r2, [pc, #52]	@ (80013d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ac:	4c0a      	ldr	r4, [pc, #40]	@ (80013d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013ba:	f007 f93d 	bl	8008638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013be:	f7ff fa49 	bl	8000854 <main>
  bx  lr    
 80013c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c4:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013d0:	080087d4 	.word	0x080087d4
  ldr r2, =_sbss
 80013d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013d8:	2000597c 	.word	0x2000597c

080013dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC_IRQHandler>
	...

080013e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <HAL_Init+0x34>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <HAL_Init+0x34>)
 80013ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <HAL_Init+0x34>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <HAL_Init+0x34>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f8fc 	bl	80015fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f7ff ff10 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fcdc 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	@ (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000008 	.word	0x20000008
 800143c:	20000798 	.word	0x20000798

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	@ (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000798 	.word	0x20000798

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x40>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <__NVIC_SetPriorityGrouping+0x40>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	05fa0000 	.word	0x05fa0000

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4907      	ldr	r1, [pc, #28]	@ (800153c <__NVIC_EnableIRQ+0x38>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	@ (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	@ (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	@ 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff4c 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001622:	f7ff ff61 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001626:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	6978      	ldr	r0, [r7, #20]
 800162e:	f7ff ffb1 	bl	8001594 <NVIC_EncodePriority>
 8001632:	4602      	mov	r2, r0
 8001634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff80 	bl	8001540 <__NVIC_SetPriority>
}
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff54 	bl	8001504 <__NVIC_EnableIRQ>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001668:	f3bf 8f5f 	dmb	sy
}
 800166c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <HAL_MPU_Disable+0x28>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	4a06      	ldr	r2, [pc, #24]	@ (800168c <HAL_MPU_Disable+0x28>)
 8001674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001678:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800167a:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_MPU_Disable+0x2c>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	e000ed90 	.word	0xe000ed90

08001694 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800169c:	4a0b      	ldr	r2, [pc, #44]	@ (80016cc <HAL_MPU_Enable+0x38>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_MPU_Enable+0x3c>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <HAL_MPU_Enable+0x3c>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016b2:	f3bf 8f4f 	dsb	sy
}
 80016b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b8:	f3bf 8f6f 	isb	sy
}
 80016bc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed90 	.word	0xe000ed90
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	785a      	ldrb	r2, [r3, #1]
 80016e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
 80016e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4a19      	ldr	r2, [pc, #100]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80016f0:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7b1b      	ldrb	r3, [r3, #12]
 80016fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7adb      	ldrb	r3, [r3, #11]
 8001702:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001704:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7a9b      	ldrb	r3, [r3, #10]
 800170a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800170c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7b5b      	ldrb	r3, [r3, #13]
 8001712:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001714:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7b9b      	ldrb	r3, [r3, #14]
 800171a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800171c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7bdb      	ldrb	r3, [r3, #15]
 8001722:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001724:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7a5b      	ldrb	r3, [r3, #9]
 800172a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800172c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001734:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800173e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001740:	6113      	str	r3, [r2, #16]
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed90 	.word	0xe000ed90

08001754 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e086      	b.n	8001874 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800176c:	2b00      	cmp	r3, #0
 800176e:	d106      	bne.n	800177e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2220      	movs	r2, #32
 8001774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fb4b 	bl	8000e14 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <HAL_ETH_Init+0x128>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a3e      	ldr	r2, [pc, #248]	@ (800187c <HAL_ETH_Init+0x128>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b3c      	ldr	r3, [pc, #240]	@ (800187c <HAL_ETH_Init+0x128>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001796:	4b3a      	ldr	r3, [pc, #232]	@ (8001880 <HAL_ETH_Init+0x12c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a39      	ldr	r2, [pc, #228]	@ (8001880 <HAL_ETH_Init+0x12c>)
 800179c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80017a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017a2:	4b37      	ldr	r3, [pc, #220]	@ (8001880 <HAL_ETH_Init+0x12c>)
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	4935      	ldr	r1, [pc, #212]	@ (8001880 <HAL_ETH_Init+0x12c>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017b0:	4b33      	ldr	r3, [pc, #204]	@ (8001880 <HAL_ETH_Init+0x12c>)
 80017b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017cc:	f7ff fe38 	bl	8001440 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017d2:	e011      	b.n	80017f8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017d4:	f7ff fe34 	bl	8001440 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017e2:	d909      	bls.n	80017f8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	22e0      	movs	r2, #224	@ 0xe0
 80017f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e03d      	b.n	8001874 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1e4      	bne.n	80017d4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 fa40 	bl	8001c90 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 faeb 	bl	8001dec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fb41 	bl	8001e9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	461a      	mov	r2, r3
 8001822:	2100      	movs	r1, #0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 faa9 	bl	8001d7c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_ETH_Init+0x130>)
 8001848:	430b      	orrs	r3, r1
 800184a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800185e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2210      	movs	r2, #16
 800186e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40013800 	.word	0x40013800
 8001884:	00020060 	.word	0x00020060

08001888 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001896:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80018b0:	4b4b      	ldr	r3, [pc, #300]	@ (80019e0 <HAL_ETH_IRQHandler+0x158>)
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00e      	beq.n	80018de <HAL_ETH_IRQHandler+0x56>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b43      	ldr	r3, [pc, #268]	@ (80019e4 <HAL_ETH_IRQHandler+0x15c>)
 80018d6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f003 fec1 	bl	8005660 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00f      	beq.n	8001908 <HAL_ETH_IRQHandler+0x80>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fa:	461a      	mov	r2, r3
 80018fc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001900:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f003 fedc 	bl	80056c0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d042      	beq.n	8001998 <HAL_ETH_IRQHandler+0x110>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03d      	beq.n	8001998 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001922:	f043 0208 	orr.w	r2, r3, #8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d01a      	beq.n	800196c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <HAL_ETH_IRQHandler+0x160>)
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800195c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001960:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	22e0      	movs	r2, #224	@ 0xe0
 8001966:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800196a:	e012      	b.n	8001992 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	f248 6380 	movw	r3, #34432	@ 0x8680
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800198a:	461a      	mov	r2, r3
 800198c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001990:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f003 fe08 	bl	80055a8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00e      	beq.n	80019c0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f81a 	bl	80019ec <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_ETH_IRQHandler+0x158>)
 80019cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019d0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f814 	bl	8001a00 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40013c00 	.word	0x40013c00
 80019e4:	00010040 	.word	0x00010040
 80019e8:	007e2000 	.word	0x007e2000

080019ec <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <ETH_SetMACConfig+0x164>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	7b9b      	ldrb	r3, [r3, #14]
 8001a32:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	7c12      	ldrb	r2, [r2, #16]
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	d102      	bne.n	8001a42 <ETH_SetMACConfig+0x2e>
 8001a3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a40:	e000      	b.n	8001a44 <ETH_SetMACConfig+0x30>
 8001a42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	7c52      	ldrb	r2, [r2, #17]
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d102      	bne.n	8001a54 <ETH_SetMACConfig+0x40>
 8001a4e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001a52:	e000      	b.n	8001a56 <ETH_SetMACConfig+0x42>
 8001a54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a56:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	7fdb      	ldrb	r3, [r3, #31]
 8001a62:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001a64:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	7f92      	ldrb	r2, [r2, #30]
 8001a70:	2a00      	cmp	r2, #0
 8001a72:	d102      	bne.n	8001a7a <ETH_SetMACConfig+0x66>
 8001a74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a78:	e000      	b.n	8001a7c <ETH_SetMACConfig+0x68>
 8001a7a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001a7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	7f1b      	ldrb	r3, [r3, #28]
 8001a82:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a84:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001a92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d102      	bne.n	8001aa4 <ETH_SetMACConfig+0x90>
 8001a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa2:	e000      	b.n	8001aa6 <ETH_SetMACConfig+0x92>
 8001aa4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001aa6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	7bdb      	ldrb	r3, [r3, #15]
 8001aac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001aae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ab4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001abc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fcbe 	bl	8001458 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001af2:	4013      	ands	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001afa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d101      	bne.n	8001b0a <ETH_SetMACConfig+0xf6>
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	e000      	b.n	8001b0c <ETH_SetMACConfig+0xf8>
 8001b0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b0c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001b1a:	2a01      	cmp	r2, #1
 8001b1c:	d101      	bne.n	8001b22 <ETH_SetMACConfig+0x10e>
 8001b1e:	2208      	movs	r2, #8
 8001b20:	e000      	b.n	8001b24 <ETH_SetMACConfig+0x110>
 8001b22:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b24:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001b2c:	2a01      	cmp	r2, #1
 8001b2e:	d101      	bne.n	8001b34 <ETH_SetMACConfig+0x120>
 8001b30:	2204      	movs	r2, #4
 8001b32:	e000      	b.n	8001b36 <ETH_SetMACConfig+0x122>
 8001b34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001b3e:	2a01      	cmp	r2, #1
 8001b40:	d101      	bne.n	8001b46 <ETH_SetMACConfig+0x132>
 8001b42:	2202      	movs	r2, #2
 8001b44:	e000      	b.n	8001b48 <ETH_SetMACConfig+0x134>
 8001b46:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f7ff fc79 	bl	8001458 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	619a      	str	r2, [r3, #24]
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	fd20810f 	.word	0xfd20810f

08001b7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <ETH_SetDMAConfig+0x110>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	7b1b      	ldrb	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <ETH_SetDMAConfig+0x2c>
 8001ba2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ba6:	e000      	b.n	8001baa <ETH_SetDMAConfig+0x2e>
 8001ba8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	7b5b      	ldrb	r3, [r3, #13]
 8001bae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bb0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	7f52      	ldrb	r2, [r2, #29]
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	d102      	bne.n	8001bc0 <ETH_SetDMAConfig+0x44>
 8001bba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bbe:	e000      	b.n	8001bc2 <ETH_SetDMAConfig+0x46>
 8001bc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bc2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	7b9b      	ldrb	r3, [r3, #14]
 8001bc8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	7f1b      	ldrb	r3, [r3, #28]
 8001bd6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001bd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	7f9b      	ldrb	r3, [r3, #30]
 8001bde:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001be0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001be6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c00:	461a      	mov	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff fc20 	bl	8001458 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c20:	461a      	mov	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	791b      	ldrb	r3, [r3, #4]
 8001c2a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c30:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c36:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c3c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c44:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c46:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c4e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c54:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c62:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff fbf1 	bl	8001458 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	f8de3f23 	.word	0xf8de3f23

08001c90 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0a6      	sub	sp, #152	@ 0x98
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001cf8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d0a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe7f 	bl	8001a14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d4a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d50:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d56:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff05 	bl	8001b7c <ETH_SetDMAConfig>
}
 8001d72:	bf00      	nop
 8001d74:	3798      	adds	r7, #152	@ 0x98
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3305      	adds	r3, #5
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	3204      	adds	r2, #4
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <ETH_MACAddressConfig+0x68>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	461a      	mov	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3303      	adds	r3, #3
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	061a      	lsls	r2, r3, #24
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3302      	adds	r3, #2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <ETH_MACAddressConfig+0x6c>)
 8001dce:	4413      	add	r3, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	6013      	str	r3, [r2, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40028040 	.word	0x40028040
 8001de8:	40028044 	.word	0x40028044

08001dec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e03e      	b.n	8001e78 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68d9      	ldr	r1, [r3, #12]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	3206      	adds	r2, #6
 8001e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d80c      	bhi.n	8001e5c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	461a      	mov	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	e004      	b.n	8001e66 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	461a      	mov	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3301      	adds	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d9bd      	bls.n	8001dfa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e90:	611a      	str	r2, [r3, #16]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e048      	b.n	8001f3e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6919      	ldr	r1, [r3, #16]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	3212      	adds	r2, #18
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d80c      	bhi.n	8001f2e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6919      	ldr	r1, [r3, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	461a      	mov	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	e004      	b.n	8001f38 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	461a      	mov	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d9b3      	bls.n	8001eac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f6e:	60da      	str	r2, [r3, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e175      	b.n	8002288 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	f040 8164 	bne.w	8002282 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d005      	beq.n	8001fd2 <HAL_GPIO_Init+0x56>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d130      	bne.n	8002034 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b03      	cmp	r3, #3
 800203e:	d017      	beq.n	8002070 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d123      	bne.n	80020c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	08da      	lsrs	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	69b9      	ldr	r1, [r7, #24]
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80be 	beq.w	8002282 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	4b66      	ldr	r3, [pc, #408]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	4a65      	ldr	r2, [pc, #404]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002110:	6453      	str	r3, [r2, #68]	@ 0x44
 8002112:	4b63      	ldr	r3, [pc, #396]	@ (80022a0 <HAL_GPIO_Init+0x324>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800211e:	4a61      	ldr	r2, [pc, #388]	@ (80022a4 <HAL_GPIO_Init+0x328>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a58      	ldr	r2, [pc, #352]	@ (80022a8 <HAL_GPIO_Init+0x32c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d037      	beq.n	80021ba <HAL_GPIO_Init+0x23e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a57      	ldr	r2, [pc, #348]	@ (80022ac <HAL_GPIO_Init+0x330>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d031      	beq.n	80021b6 <HAL_GPIO_Init+0x23a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a56      	ldr	r2, [pc, #344]	@ (80022b0 <HAL_GPIO_Init+0x334>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <HAL_GPIO_Init+0x236>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a55      	ldr	r2, [pc, #340]	@ (80022b4 <HAL_GPIO_Init+0x338>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d025      	beq.n	80021ae <HAL_GPIO_Init+0x232>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a54      	ldr	r2, [pc, #336]	@ (80022b8 <HAL_GPIO_Init+0x33c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01f      	beq.n	80021aa <HAL_GPIO_Init+0x22e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a53      	ldr	r2, [pc, #332]	@ (80022bc <HAL_GPIO_Init+0x340>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_GPIO_Init+0x22a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a52      	ldr	r2, [pc, #328]	@ (80022c0 <HAL_GPIO_Init+0x344>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x226>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a51      	ldr	r2, [pc, #324]	@ (80022c4 <HAL_GPIO_Init+0x348>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x222>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a50      	ldr	r2, [pc, #320]	@ (80022c8 <HAL_GPIO_Init+0x34c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x21e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4f      	ldr	r2, [pc, #316]	@ (80022cc <HAL_GPIO_Init+0x350>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x21a>
 8002192:	2309      	movs	r3, #9
 8002194:	e012      	b.n	80021bc <HAL_GPIO_Init+0x240>
 8002196:	230a      	movs	r3, #10
 8002198:	e010      	b.n	80021bc <HAL_GPIO_Init+0x240>
 800219a:	2308      	movs	r3, #8
 800219c:	e00e      	b.n	80021bc <HAL_GPIO_Init+0x240>
 800219e:	2307      	movs	r3, #7
 80021a0:	e00c      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021a2:	2306      	movs	r3, #6
 80021a4:	e00a      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021a6:	2305      	movs	r3, #5
 80021a8:	e008      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021ba:	2300      	movs	r3, #0
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021cc:	4935      	ldr	r1, [pc, #212]	@ (80022a4 <HAL_GPIO_Init+0x328>)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_GPIO_Init+0x354>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fe:	4a34      	ldr	r2, [pc, #208]	@ (80022d0 <HAL_GPIO_Init+0x354>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002204:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <HAL_GPIO_Init+0x354>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002228:	4a29      	ldr	r2, [pc, #164]	@ (80022d0 <HAL_GPIO_Init+0x354>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222e:	4b28      	ldr	r3, [pc, #160]	@ (80022d0 <HAL_GPIO_Init+0x354>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002252:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <HAL_GPIO_Init+0x354>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002258:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <HAL_GPIO_Init+0x354>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800227c:	4a14      	ldr	r2, [pc, #80]	@ (80022d0 <HAL_GPIO_Init+0x354>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	f67f ae86 	bls.w	8001f9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3724      	adds	r7, #36	@ 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40013800 	.word	0x40013800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40021400 	.word	0x40021400
 80022c0:	40021800 	.word	0x40021800
 80022c4:	40021c00 	.word	0x40021c00
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40022400 	.word	0x40022400
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af02      	add	r7, sp, #8
 800230c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e108      	b.n	800252a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fefe 	bl	8001134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2203      	movs	r2, #3
 800233c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002346:	d102      	bne.n	800234e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f002 fe6a 	bl	800502c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7c1a      	ldrb	r2, [r3, #16]
 8002360:	f88d 2000 	strb.w	r2, [sp]
 8002364:	3304      	adds	r3, #4
 8002366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002368:	f002 fe06 	bl	8004f78 <USB_CoreInit>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0d5      	b.n	800252a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f002 fe62 	bl	800504e <USB_SetCurrentMode>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0c6      	b.n	800252a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e04a      	b.n	8002438 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3315      	adds	r3, #21
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3314      	adds	r3, #20
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	b298      	uxth	r0, r3
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	332e      	adds	r3, #46	@ 0x2e
 80023de:	4602      	mov	r2, r0
 80023e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3318      	adds	r3, #24
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	331c      	adds	r3, #28
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3320      	adds	r3, #32
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3324      	adds	r3, #36	@ 0x24
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3301      	adds	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3af      	bcc.n	80023a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e044      	b.n	80024d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3b5      	bcc.n	8002448 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7c1a      	ldrb	r2, [r3, #16]
 80024e4:	f88d 2000 	strb.w	r2, [sp]
 80024e8:	3304      	adds	r3, #4
 80024ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ec:	f002 fdfc 	bl	80050e8 <USB_DevInit>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e013      	b.n	800252a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7b1b      	ldrb	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d102      	bne.n	800251e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f80b 	bl	8002534 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f002 ffb7 	bl	8005496 <USB_DevDisconnect>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002562:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_PCDEx_ActivateLPM+0x44>)
 8002564:	4313      	orrs	r3, r2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	10000003 	.word	0x10000003

0800257c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40007000 	.word	0x40007000

0800259c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b23      	ldr	r3, [pc, #140]	@ (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a22      	ldr	r2, [pc, #136]	@ (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <HAL_PWREx_EnableOverDrive+0x98>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025be:	4b1e      	ldr	r3, [pc, #120]	@ (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ca:	f7fe ff39 	bl	8001440 <HAL_GetTick>
 80025ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025d0:	e009      	b.n	80025e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025d2:	f7fe ff35 	bl	8001440 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025e0:	d901      	bls.n	80025e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e022      	b.n	800262c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025e6:	4b14      	ldr	r3, [pc, #80]	@ (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f2:	d1ee      	bne.n	80025d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 80025fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002600:	f7fe ff1e 	bl	8001440 <HAL_GetTick>
 8002604:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002606:	e009      	b.n	800261c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002608:	f7fe ff1a 	bl	8001440 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002616:	d901      	bls.n	800261c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e007      	b.n	800262c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_PWREx_EnableOverDrive+0x9c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002628:	d1ee      	bne.n	8002608 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000

0800263c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e29b      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8087 	beq.w	800276e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002660:	4b96      	ldr	r3, [pc, #600]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b04      	cmp	r3, #4
 800266a:	d00c      	beq.n	8002686 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266c:	4b93      	ldr	r3, [pc, #588]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
 8002674:	2b08      	cmp	r3, #8
 8002676:	d112      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
 8002678:	4b90      	ldr	r3, [pc, #576]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002684:	d10b      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002686:	4b8d      	ldr	r3, [pc, #564]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d06c      	beq.n	800276c <HAL_RCC_OscConfig+0x130>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d168      	bne.n	800276c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e275      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x7a>
 80026a8:	4b84      	ldr	r3, [pc, #528]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a83      	ldr	r2, [pc, #524]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e02e      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x9c>
 80026be:	4b7f      	ldr	r3, [pc, #508]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a7e      	ldr	r2, [pc, #504]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b7c      	ldr	r3, [pc, #496]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a7b      	ldr	r2, [pc, #492]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0xc0>
 80026e2:	4b76      	ldr	r3, [pc, #472]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a75      	ldr	r2, [pc, #468]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b73      	ldr	r3, [pc, #460]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a72      	ldr	r2, [pc, #456]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0xd8>
 80026fc:	4b6f      	ldr	r3, [pc, #444]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6e      	ldr	r2, [pc, #440]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b6c      	ldr	r3, [pc, #432]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a6b      	ldr	r2, [pc, #428]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fe90 	bl	8001440 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fe8c 	bl	8001440 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e229      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b61      	ldr	r3, [pc, #388]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fe7c 	bl	8001440 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fe78 	bl	8001440 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e215      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	4b57      	ldr	r3, [pc, #348]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x110>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d069      	beq.n	800284e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277a:	4b50      	ldr	r3, [pc, #320]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b4d      	ldr	r3, [pc, #308]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b08      	cmp	r3, #8
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x190>
 8002792:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	4b47      	ldr	r3, [pc, #284]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x17a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1e9      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	493d      	ldr	r1, [pc, #244]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	e040      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d023      	beq.n	800281c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a38      	ldr	r2, [pc, #224]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e0:	f7fe fe2e 	bl	8001440 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7fe fe2a 	bl	8001440 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1c7      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b30      	ldr	r3, [pc, #192]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4929      	ldr	r1, [pc, #164]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
 800281a:	e018      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281c:	4b27      	ldr	r3, [pc, #156]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a26      	ldr	r2, [pc, #152]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fe0a 	bl	8001440 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fe06 	bl	8001440 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e1a3      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1e      	ldr	r3, [pc, #120]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d038      	beq.n	80028cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d019      	beq.n	8002896 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b16      	ldr	r3, [pc, #88]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	4a15      	ldr	r2, [pc, #84]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7fe fde7 	bl	8001440 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7fe fde3 	bl	8001440 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e180      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x23a>
 8002894:	e01a      	b.n	80028cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289a:	4a08      	ldr	r2, [pc, #32]	@ (80028bc <HAL_RCC_OscConfig+0x280>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe fdcd 	bl	8001440 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028aa:	f7fe fdc9 	bl	8001440 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d903      	bls.n	80028c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e166      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
 80028bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b92      	ldr	r3, [pc, #584]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a4 	beq.w	8002a22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b8c      	ldr	r3, [pc, #560]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b89      	ldr	r3, [pc, #548]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	4a88      	ldr	r2, [pc, #544]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f2:	4b86      	ldr	r3, [pc, #536]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	4b83      	ldr	r3, [pc, #524]	@ (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800290e:	4b80      	ldr	r3, [pc, #512]	@ (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7f      	ldr	r2, [pc, #508]	@ (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe fd91 	bl	8001440 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe fd8d 	bl	8001440 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	@ 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e12a      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002934:	4b76      	ldr	r3, [pc, #472]	@ (8002b10 <HAL_RCC_OscConfig+0x4d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x31a>
 8002948:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a6f      	ldr	r2, [pc, #444]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	e02d      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x33c>
 800295e:	4b6b      	ldr	r3, [pc, #428]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	4a6a      	ldr	r2, [pc, #424]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	@ 0x70
 800296a:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	4a67      	ldr	r2, [pc, #412]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	@ 0x70
 8002976:	e01c      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x35e>
 8002980:	4b62      	ldr	r3, [pc, #392]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	4a61      	ldr	r2, [pc, #388]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	@ 0x70
 800298c:	4b5f      	ldr	r3, [pc, #380]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002990:	4a5e      	ldr	r2, [pc, #376]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	@ 0x70
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
 800299a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	4a5b      	ldr	r2, [pc, #364]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a6:	4b59      	ldr	r3, [pc, #356]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029aa:	4a58      	ldr	r2, [pc, #352]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d015      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe fd41 	bl	8001440 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe fd3d 	bl	8001440 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0d8      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ee      	beq.n	80029c2 <HAL_RCC_OscConfig+0x386>
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7fe fd2b 	bl	8001440 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fd27 	bl	8001440 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0c2      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	4b41      	ldr	r3, [pc, #260]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b3d      	ldr	r3, [pc, #244]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a3c      	ldr	r2, [pc, #240]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80ae 	beq.w	8002b88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	4b37      	ldr	r3, [pc, #220]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d06d      	beq.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d14b      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a31      	ldr	r2, [pc, #196]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fcf8 	bl	8001440 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe fcf4 	bl	8001440 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e091      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	491b      	ldr	r1, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a18      	ldr	r2, [pc, #96]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fcc6 	bl	8001440 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fe fcc2 	bl	8001440 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e05f      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
 8002ad6:	e057      	b.n	8002b88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0b      	ldr	r2, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fcac 	bl	8001440 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fca8 	bl	8001440 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e045      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b03      	ldr	r3, [pc, #12]	@ (8002b0c <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x4b0>
 8002b0a:	e03d      	b.n	8002b88 <HAL_RCC_OscConfig+0x54c>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b14:	4b1f      	ldr	r3, [pc, #124]	@ (8002b94 <HAL_RCC_OscConfig+0x558>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d030      	beq.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d129      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d122      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d119      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10f      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d0      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d910      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bbe:	4b67      	ldr	r3, [pc, #412]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 020f 	bic.w	r2, r3, #15
 8002bc6:	4965      	ldr	r1, [pc, #404]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d040      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d115      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5a:	4b41      	ldr	r3, [pc, #260]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e073      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06b      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4936      	ldr	r1, [pc, #216]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fbd8 	bl	8001440 <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fe fbd4 	bl	8001440 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e053      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b27      	ldr	r3, [pc, #156]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d210      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 020f 	bic.w	r2, r3, #15
 8002cd2:	4922      	ldr	r1, [pc, #136]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490a      	ldr	r1, [pc, #40]	@ (8002d64 <HAL_RCC_ClockConfig+0x1cc>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	@ (8002d68 <HAL_RCC_ClockConfig+0x1d0>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1d4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fa6c 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	080087ac 	.word	0x080087ac
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	20000004 	.word	0x20000004

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b094      	sub	sp, #80	@ 0x50
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d80:	2300      	movs	r3, #0
 8002d82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4b79      	ldr	r3, [pc, #484]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f200 80e1 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3a>
 8002da2:	e0db      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b73      	ldr	r3, [pc, #460]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002da6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002da8:	e0db      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b73      	ldr	r3, [pc, #460]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dae:	e0d8      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dba:	4b6d      	ldr	r3, [pc, #436]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	2200      	movs	r2, #0
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002de2:	4622      	mov	r2, r4
 8002de4:	462b      	mov	r3, r5
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	6139      	str	r1, [r7, #16]
 8002e00:	4629      	mov	r1, r5
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e14:	4659      	mov	r1, fp
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1e:	4651      	mov	r1, sl
 8002e20:	018a      	lsls	r2, r1, #6
 8002e22:	4651      	mov	r1, sl
 8002e24:	ebb2 0801 	subs.w	r8, r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e42:	4690      	mov	r8, r2
 8002e44:	4699      	mov	r9, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb18 0303 	adds.w	r3, r8, r3
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	eb49 0303 	adc.w	r3, r9, r3
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e62:	4629      	mov	r1, r5
 8002e64:	024b      	lsls	r3, r1, #9
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	024a      	lsls	r2, r1, #9
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e80:	f7fd f9de 	bl	8000240 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e8c:	e058      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b38      	ldr	r3, [pc, #224]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	4611      	mov	r1, r2
 8002e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0159      	lsls	r1, r3, #5
 8002eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eba:	0150      	lsls	r0, r2, #5
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	00eb      	lsls	r3, r5, #3
 8002ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef6:	00e2      	lsls	r2, r4, #3
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	464b      	mov	r3, r9
 8002f04:	eb45 0303 	adc.w	r3, r5, r3
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	61fa      	str	r2, [r7, #28]
 8002f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f34:	f7fd f984 	bl	8000240 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3750      	adds	r7, #80	@ 0x50
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	@ (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	080087bc 	.word	0x080087bc

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	@ (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	080087bc 	.word	0x080087bc

08002fe4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ff4:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0203 	and.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003000:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003026:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <HAL_RCC_GetClockConfig+0x60>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40023c00 	.word	0x40023c00

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003070:	4b69      	ldr	r3, [pc, #420]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a68      	ldr	r2, [pc, #416]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003076:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	4b66      	ldr	r3, [pc, #408]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003084:	4964      	ldr	r1, [pc, #400]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003092:	2301      	movs	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d017      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b0:	4959      	ldr	r1, [pc, #356]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030c0:	d101      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030de:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	494a      	ldr	r1, [pc, #296]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fc:	d101      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800310a:	2301      	movs	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 808b 	beq.w	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b3a      	ldr	r3, [pc, #232]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	4a39      	ldr	r2, [pc, #228]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6413      	str	r3, [r2, #64]	@ 0x40
 8003138:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003144:	4b35      	ldr	r3, [pc, #212]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a34      	ldr	r2, [pc, #208]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800314a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fe f976 	bl	8001440 <HAL_GetTick>
 8003154:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003158:	f7fe f972 	bl	8001440 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e38f      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800316a:	4b2c      	ldr	r3, [pc, #176]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003176:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d035      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	429a      	cmp	r2, r3
 8003192:	d02e      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003194:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800319c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800319e:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80031b6:	4a18      	ldr	r2, [pc, #96]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031bc:	4b16      	ldr	r3, [pc, #88]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d114      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe f93a 	bl	8001440 <HAL_GetTick>
 80031cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fe f936 	bl	8001440 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e351      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ee      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031fe:	d111      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800320c:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800320e:	400b      	ands	r3, r1
 8003210:	4901      	ldr	r1, [pc, #4]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
 8003216:	e00b      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003218:	40023800 	.word	0x40023800
 800321c:	40007000 	.word	0x40007000
 8003220:	0ffffcff 	.word	0x0ffffcff
 8003224:	4bac      	ldr	r3, [pc, #688]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4aab      	ldr	r2, [pc, #684]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	4ba9      	ldr	r3, [pc, #676]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003232:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	49a6      	ldr	r1, [pc, #664]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323e:	4313      	orrs	r3, r2
 8003240:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800324e:	4ba2      	ldr	r3, [pc, #648]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003254:	4aa0      	ldr	r2, [pc, #640]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800325a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800325e:	4b9e      	ldr	r3, [pc, #632]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003260:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	499b      	ldr	r1, [pc, #620]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327c:	4b96      	ldr	r3, [pc, #600]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003282:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800328a:	4993      	ldr	r1, [pc, #588]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800329e:	4b8e      	ldr	r3, [pc, #568]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ac:	498a      	ldr	r1, [pc, #552]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032c0:	4b85      	ldr	r3, [pc, #532]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ce:	4982      	ldr	r1, [pc, #520]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032e2:	4b7d      	ldr	r3, [pc, #500]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4979      	ldr	r1, [pc, #484]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003304:	4b74      	ldr	r3, [pc, #464]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330a:	f023 0203 	bic.w	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	4971      	ldr	r1, [pc, #452]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003326:	4b6c      	ldr	r3, [pc, #432]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f023 020c 	bic.w	r2, r3, #12
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003334:	4968      	ldr	r1, [pc, #416]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003348:	4b63      	ldr	r3, [pc, #396]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003356:	4960      	ldr	r1, [pc, #384]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800336a:	4b5b      	ldr	r3, [pc, #364]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003370:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003378:	4957      	ldr	r1, [pc, #348]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800338c:	4b52      	ldr	r3, [pc, #328]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	494f      	ldr	r1, [pc, #316]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80033ae:	4b4a      	ldr	r3, [pc, #296]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	4946      	ldr	r1, [pc, #280]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033d0:	4b41      	ldr	r3, [pc, #260]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	493e      	ldr	r1, [pc, #248]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033f2:	4b39      	ldr	r3, [pc, #228]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003400:	4935      	ldr	r1, [pc, #212]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003414:	4b30      	ldr	r3, [pc, #192]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003422:	492d      	ldr	r1, [pc, #180]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d011      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003436:	4b28      	ldr	r3, [pc, #160]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003444:	4924      	ldr	r1, [pc, #144]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003454:	d101      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003456:	2301      	movs	r3, #1
 8003458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003466:	2301      	movs	r3, #1
 8003468:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003476:	4b18      	ldr	r3, [pc, #96]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003484:	4914      	ldr	r1, [pc, #80]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003498:	4b0f      	ldr	r3, [pc, #60]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034a8:	490b      	ldr	r1, [pc, #44]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00f      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034cc:	4902      	ldr	r1, [pc, #8]	@ (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034d4:	e002      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034e8:	4b8a      	ldr	r3, [pc, #552]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f8:	4986      	ldr	r1, [pc, #536]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800350c:	4b81      	ldr	r3, [pc, #516]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003512:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800351c:	497d      	ldr	r1, [pc, #500]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d006      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80d6 	beq.w	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003538:	4b76      	ldr	r3, [pc, #472]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a75      	ldr	r2, [pc, #468]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800353e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fd ff7c 	bl	8001440 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800354c:	f7fd ff78 	bl	8001440 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	@ 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e195      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800355e:	4b6d      	ldr	r3, [pc, #436]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d021      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11d      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800357e:	4b65      	ldr	r3, [pc, #404]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003584:	0c1b      	lsrs	r3, r3, #16
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800358c:	4b61      	ldr	r3, [pc, #388]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003592:	0e1b      	lsrs	r3, r3, #24
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	019a      	lsls	r2, r3, #6
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	071b      	lsls	r3, r3, #28
 80035b2:	4958      	ldr	r1, [pc, #352]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02e      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e4:	d129      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035f4:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035fa:	0f1b      	lsrs	r3, r3, #28
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	019a      	lsls	r2, r3, #6
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	071b      	lsls	r3, r3, #28
 800361a:	493e      	ldr	r1, [pc, #248]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003622:	4b3c      	ldr	r3, [pc, #240]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003628:	f023 021f 	bic.w	r2, r3, #31
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	3b01      	subs	r3, #1
 8003632:	4938      	ldr	r1, [pc, #224]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01d      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003646:	4b33      	ldr	r3, [pc, #204]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800364c:	0e1b      	lsrs	r3, r3, #24
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003654:	4b2f      	ldr	r3, [pc, #188]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365a:	0f1b      	lsrs	r3, r3, #28
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	019a      	lsls	r2, r3, #6
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	431a      	orrs	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	061b      	lsls	r3, r3, #24
 8003674:	431a      	orrs	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	071b      	lsls	r3, r3, #28
 800367a:	4926      	ldr	r1, [pc, #152]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d011      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	019a      	lsls	r2, r3, #6
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	071b      	lsls	r3, r3, #28
 80036aa:	491a      	ldr	r1, [pc, #104]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036b2:	4b18      	ldr	r3, [pc, #96]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a17      	ldr	r2, [pc, #92]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036be:	f7fd febf 	bl	8001440 <HAL_GetTick>
 80036c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036c6:	f7fd febb 	bl	8001440 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b64      	cmp	r3, #100	@ 0x64
 80036d2:	d901      	bls.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0d8      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	f040 80ce 	bne.w	8003888 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a08      	ldr	r2, [pc, #32]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f8:	f7fd fea2 	bl	8001440 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036fe:	e00b      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003700:	f7fd fe9e 	bl	8001440 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	@ 0x64
 800370c:	d904      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e0bb      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003718:	4b5e      	ldr	r3, [pc, #376]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003724:	d0ec      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02e      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d12a      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800374e:	4b51      	ldr	r3, [pc, #324]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800375c:	4b4d      	ldr	r3, [pc, #308]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003762:	0f1b      	lsrs	r3, r3, #28
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	019a      	lsls	r2, r3, #6
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	431a      	orrs	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	4944      	ldr	r1, [pc, #272]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800378a:	4b42      	ldr	r3, [pc, #264]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800378c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003790:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	493d      	ldr	r1, [pc, #244]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d022      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037b8:	d11d      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037ba:	4b36      	ldr	r3, [pc, #216]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	0e1b      	lsrs	r3, r3, #24
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037c8:	4b32      	ldr	r3, [pc, #200]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	0f1b      	lsrs	r3, r3, #28
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	019a      	lsls	r2, r3, #6
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	071b      	lsls	r3, r3, #28
 80037ee:	4929      	ldr	r1, [pc, #164]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d028      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	0e1b      	lsrs	r3, r3, #24
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003810:	4b20      	ldr	r3, [pc, #128]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	019a      	lsls	r2, r3, #6
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	071b      	lsls	r3, r3, #28
 8003836:	4917      	ldr	r1, [pc, #92]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800383e:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003844:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	4911      	ldr	r1, [pc, #68]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003854:	4b0f      	ldr	r3, [pc, #60]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0e      	ldr	r2, [pc, #56]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fd fdee 	bl	8001440 <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003868:	f7fd fdea 	bl	8001440 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	@ 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e007      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003886:	d1ef      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e01c      	b.n	80038e4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	795b      	ldrb	r3, [r3, #5]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fb62 	bl	8000f84 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0204 	orr.w	r2, r2, #4
 80038d4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e09d      	b.n	8003a3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	2b00      	cmp	r3, #0
 8003904:	d108      	bne.n	8003918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800390e:	d009      	beq.n	8003924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]
 8003916:	e005      	b.n	8003924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fb54 	bl	8000fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800395a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003964:	d902      	bls.n	800396c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e002      	b.n	8003972 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800396c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003970:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800397a:	d007      	beq.n	800398c <HAL_SPI_Init+0xa0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003984:	d002      	beq.n	800398c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ce:	ea42 0103 	orr.w	r1, r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	f003 0204 	and.w	r2, r3, #4
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a08:	ea42 0103 	orr.w	r1, r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b088      	sub	sp, #32
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a52:	f7fd fcf5 	bl	8001440 <HAL_GetTick>
 8003a56:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d001      	beq.n	8003a6c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e15c      	b.n	8003d26 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_SPI_Transmit+0x36>
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e154      	b.n	8003d26 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_SPI_Transmit+0x48>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e14d      	b.n	8003d26 <HAL_SPI_Transmit+0x2e4>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2203      	movs	r2, #3
 8003a96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	88fa      	ldrh	r2, [r7, #6]
 8003aaa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003adc:	d10f      	bne.n	8003afe <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003afc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d007      	beq.n	8003b1c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b24:	d952      	bls.n	8003bcc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_SPI_Transmit+0xf2>
 8003b2e:	8b7b      	ldrh	r3, [r7, #26]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d145      	bne.n	8003bc0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b58:	e032      	b.n	8003bc0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d112      	bne.n	8003b8e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b8c:	e018      	b.n	8003bc0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b8e:	f7fd fc57 	bl	8001440 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d803      	bhi.n	8003ba6 <HAL_SPI_Transmit+0x164>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ba4:	d102      	bne.n	8003bac <HAL_SPI_Transmit+0x16a>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0b2      	b.n	8003d26 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1c7      	bne.n	8003b5a <HAL_SPI_Transmit+0x118>
 8003bca:	e083      	b.n	8003cd4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_SPI_Transmit+0x198>
 8003bd4:	8b7b      	ldrh	r3, [r7, #26]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d177      	bne.n	8003cca <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d912      	bls.n	8003c0a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b02      	subs	r3, #2
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c08:	e05f      	b.n	8003cca <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c30:	e04b      	b.n	8003cca <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d12b      	bne.n	8003c98 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d912      	bls.n	8003c70 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	881a      	ldrh	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5a:	1c9a      	adds	r2, r3, #2
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b02      	subs	r3, #2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c6e:	e02c      	b.n	8003cca <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	7812      	ldrb	r2, [r2, #0]
 8003c7c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c96:	e018      	b.n	8003cca <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c98:	f7fd fbd2 	bl	8001440 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d803      	bhi.n	8003cb0 <HAL_SPI_Transmit+0x26e>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_Transmit+0x274>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e02d      	b.n	8003d26 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ae      	bne.n	8003c32 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	6839      	ldr	r1, [r7, #0]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f947 	bl	8003f6c <SPI_EndRxTxTransaction>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d40:	f7fd fb7e 	bl	8001440 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d50:	f7fd fb76 	bl	8001440 <HAL_GetTick>
 8003d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d56:	4b39      	ldr	r3, [pc, #228]	@ (8003e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	015b      	lsls	r3, r3, #5
 8003d5c:	0d1b      	lsrs	r3, r3, #20
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	fb02 f303 	mul.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d66:	e055      	b.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d6e:	d051      	beq.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d70:	f7fd fb66 	bl	8001440 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d902      	bls.n	8003d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d13d      	bne.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d9e:	d111      	bne.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da8:	d004      	beq.n	8003db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db2:	d107      	bne.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dcc:	d10f      	bne.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e018      	b.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e002      	b.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d19a      	bne.n	8003d68 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000000 	.word	0x20000000

08003e40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	@ 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e52:	f7fd faf5 	bl	8001440 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	4413      	add	r3, r2
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e62:	f7fd faed 	bl	8001440 <HAL_GetTick>
 8003e66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e70:	4b3d      	ldr	r3, [pc, #244]	@ (8003f68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	00da      	lsls	r2, r3, #3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	0d1b      	lsrs	r3, r3, #20
 8003e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e88:	e061      	b.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e90:	d107      	bne.n	8003ea2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ea8:	d051      	beq.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eaa:	f7fd fac9 	bl	8001440 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d902      	bls.n	8003ec0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d13d      	bne.n	8003f3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ece:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ed8:	d111      	bne.n	8003efe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee2:	d004      	beq.n	8003eee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eec:	d107      	bne.n	8003efe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003efc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f06:	d10f      	bne.n	8003f28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e011      	b.n	8003f60 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f46:	e002      	b.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d195      	bne.n	8003e8a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3728      	adds	r7, #40	@ 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000000 	.word	0x20000000

08003f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff ff5b 	bl	8003e40 <SPI_WaitFifoStateUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e046      	b.n	800402e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fa0:	4b25      	ldr	r3, [pc, #148]	@ (8004038 <SPI_EndRxTxTransaction+0xcc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a25      	ldr	r2, [pc, #148]	@ (800403c <SPI_EndRxTxTransaction+0xd0>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0d5b      	lsrs	r3, r3, #21
 8003fac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fbe:	d112      	bne.n	8003fe6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2180      	movs	r1, #128	@ 0x80
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff feb0 	bl	8003d30 <SPI_WaitFlagStateUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e023      	b.n	800402e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffc:	2b80      	cmp	r3, #128	@ 0x80
 8003ffe:	d0f2      	beq.n	8003fe6 <SPI_EndRxTxTransaction+0x7a>
 8004000:	e000      	b.n	8004004 <SPI_EndRxTxTransaction+0x98>
        break;
 8004002:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff ff15 	bl	8003e40 <SPI_WaitFifoStateUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e000      	b.n	800402e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000000 	.word	0x20000000
 800403c:	165e9f81 	.word	0x165e9f81

08004040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e049      	b.n	80040e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f841 	bl	80040ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f000 f9e8 	bl	8004454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d001      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e054      	b.n	80041c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a26      	ldr	r2, [pc, #152]	@ (80041d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d022      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004146:	d01d      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a22      	ldr	r2, [pc, #136]	@ (80041d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d018      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a21      	ldr	r2, [pc, #132]	@ (80041dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1f      	ldr	r2, [pc, #124]	@ (80041e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00e      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1e      	ldr	r2, [pc, #120]	@ (80041e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1c      	ldr	r2, [pc, #112]	@ (80041e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d115      	bne.n	80041b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <HAL_TIM_Base_Start_IT+0xec>)
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b06      	cmp	r3, #6
 8004194:	d015      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419c:	d011      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	e008      	b.n	80041c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e000      	b.n	80041c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40010400 	.word	0x40010400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40001800 	.word	0x40001800
 80041f0:	00010007 	.word	0x00010007

080041f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d020      	beq.n	8004258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0202 	mvn.w	r2, #2
 8004228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8e9 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8004244:	e005      	b.n	8004252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8db 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8ec 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01b      	beq.n	80042a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0204 	mvn.w	r2, #4
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f8c3 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8b5 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8c6 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0208 	mvn.w	r2, #8
 80042c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2204      	movs	r2, #4
 80042c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f89d 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f88f 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f8a0 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0210 	mvn.w	r2, #16
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2208      	movs	r2, #8
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f877 	bl	8004416 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f869 	bl	8004402 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f87a 	bl	800442a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0201 	mvn.w	r2, #1
 8004358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc fd1a 	bl	8000d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00c      	beq.n	800438e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f913 	bl	80045b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f90b 	bl	80045c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f834 	bl	800443e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00c      	beq.n	80043fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0220 	mvn.w	r2, #32
 80043f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8d3 	bl	80045a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a43      	ldr	r2, [pc, #268]	@ (8004574 <TIM_Base_SetConfig+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004472:	d00f      	beq.n	8004494 <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a40      	ldr	r2, [pc, #256]	@ (8004578 <TIM_Base_SetConfig+0x124>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00b      	beq.n	8004494 <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3f      	ldr	r2, [pc, #252]	@ (800457c <TIM_Base_SetConfig+0x128>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <TIM_Base_SetConfig+0x40>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a3e      	ldr	r2, [pc, #248]	@ (8004580 <TIM_Base_SetConfig+0x12c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_Base_SetConfig+0x40>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a3d      	ldr	r2, [pc, #244]	@ (8004584 <TIM_Base_SetConfig+0x130>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d108      	bne.n	80044a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a32      	ldr	r2, [pc, #200]	@ (8004574 <TIM_Base_SetConfig+0x120>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d02b      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b4:	d027      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004578 <TIM_Base_SetConfig+0x124>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d023      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <TIM_Base_SetConfig+0x128>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01f      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <TIM_Base_SetConfig+0x12c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d01b      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004584 <TIM_Base_SetConfig+0x130>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d017      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004588 <TIM_Base_SetConfig+0x134>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	@ (800458c <TIM_Base_SetConfig+0x138>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00f      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a29      	ldr	r2, [pc, #164]	@ (8004590 <TIM_Base_SetConfig+0x13c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00b      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a28      	ldr	r2, [pc, #160]	@ (8004594 <TIM_Base_SetConfig+0x140>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d007      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a27      	ldr	r2, [pc, #156]	@ (8004598 <TIM_Base_SetConfig+0x144>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a26      	ldr	r2, [pc, #152]	@ (800459c <TIM_Base_SetConfig+0x148>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d108      	bne.n	8004518 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a0e      	ldr	r2, [pc, #56]	@ (8004574 <TIM_Base_SetConfig+0x120>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0xf2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a10      	ldr	r2, [pc, #64]	@ (8004584 <TIM_Base_SetConfig+0x130>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d103      	bne.n	800454e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010000 	.word	0x40010000
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40010400 	.word	0x40010400
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800
 8004594:	40001800 	.word	0x40001800
 8004598:	40001c00 	.word	0x40001c00
 800459c:	40002000 	.word	0x40002000

080045a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e040      	b.n	8004670 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc fd38 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	@ 0x24
 8004608:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa8c 	bl	8004b40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f825 	bl	8004678 <UART_SetConfig>
 800462e:	4603      	mov	r3, r0
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e01b      	b.n	8004670 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fb0b 	bl	8004c84 <UART_CheckIdleState>
 800466e:	4603      	mov	r3, r0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4ba6      	ldr	r3, [pc, #664]	@ (800493c <UART_SetConfig+0x2c4>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	430b      	orrs	r3, r1
 80046ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a94      	ldr	r2, [pc, #592]	@ (8004940 <UART_SetConfig+0x2c8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d120      	bne.n	8004736 <UART_SetConfig+0xbe>
 80046f4:	4b93      	ldr	r3, [pc, #588]	@ (8004944 <UART_SetConfig+0x2cc>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d816      	bhi.n	8004730 <UART_SetConfig+0xb8>
 8004702:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <UART_SetConfig+0x90>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004719 	.word	0x08004719
 800470c:	08004725 	.word	0x08004725
 8004710:	0800471f 	.word	0x0800471f
 8004714:	0800472b 	.word	0x0800472b
 8004718:	2301      	movs	r3, #1
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e150      	b.n	80049c0 <UART_SetConfig+0x348>
 800471e:	2302      	movs	r3, #2
 8004720:	77fb      	strb	r3, [r7, #31]
 8004722:	e14d      	b.n	80049c0 <UART_SetConfig+0x348>
 8004724:	2304      	movs	r3, #4
 8004726:	77fb      	strb	r3, [r7, #31]
 8004728:	e14a      	b.n	80049c0 <UART_SetConfig+0x348>
 800472a:	2308      	movs	r3, #8
 800472c:	77fb      	strb	r3, [r7, #31]
 800472e:	e147      	b.n	80049c0 <UART_SetConfig+0x348>
 8004730:	2310      	movs	r3, #16
 8004732:	77fb      	strb	r3, [r7, #31]
 8004734:	e144      	b.n	80049c0 <UART_SetConfig+0x348>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a83      	ldr	r2, [pc, #524]	@ (8004948 <UART_SetConfig+0x2d0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d132      	bne.n	80047a6 <UART_SetConfig+0x12e>
 8004740:	4b80      	ldr	r3, [pc, #512]	@ (8004944 <UART_SetConfig+0x2cc>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d828      	bhi.n	80047a0 <UART_SetConfig+0x128>
 800474e:	a201      	add	r2, pc, #4	@ (adr r2, 8004754 <UART_SetConfig+0xdc>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004789 	.word	0x08004789
 8004758:	080047a1 	.word	0x080047a1
 800475c:	080047a1 	.word	0x080047a1
 8004760:	080047a1 	.word	0x080047a1
 8004764:	08004795 	.word	0x08004795
 8004768:	080047a1 	.word	0x080047a1
 800476c:	080047a1 	.word	0x080047a1
 8004770:	080047a1 	.word	0x080047a1
 8004774:	0800478f 	.word	0x0800478f
 8004778:	080047a1 	.word	0x080047a1
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a1 	.word	0x080047a1
 8004784:	0800479b 	.word	0x0800479b
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e118      	b.n	80049c0 <UART_SetConfig+0x348>
 800478e:	2302      	movs	r3, #2
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e115      	b.n	80049c0 <UART_SetConfig+0x348>
 8004794:	2304      	movs	r3, #4
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e112      	b.n	80049c0 <UART_SetConfig+0x348>
 800479a:	2308      	movs	r3, #8
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e10f      	b.n	80049c0 <UART_SetConfig+0x348>
 80047a0:	2310      	movs	r3, #16
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e10c      	b.n	80049c0 <UART_SetConfig+0x348>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a68      	ldr	r2, [pc, #416]	@ (800494c <UART_SetConfig+0x2d4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d120      	bne.n	80047f2 <UART_SetConfig+0x17a>
 80047b0:	4b64      	ldr	r3, [pc, #400]	@ (8004944 <UART_SetConfig+0x2cc>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047ba:	2b30      	cmp	r3, #48	@ 0x30
 80047bc:	d013      	beq.n	80047e6 <UART_SetConfig+0x16e>
 80047be:	2b30      	cmp	r3, #48	@ 0x30
 80047c0:	d814      	bhi.n	80047ec <UART_SetConfig+0x174>
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d009      	beq.n	80047da <UART_SetConfig+0x162>
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d810      	bhi.n	80047ec <UART_SetConfig+0x174>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <UART_SetConfig+0x15c>
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d006      	beq.n	80047e0 <UART_SetConfig+0x168>
 80047d2:	e00b      	b.n	80047ec <UART_SetConfig+0x174>
 80047d4:	2300      	movs	r3, #0
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e0f2      	b.n	80049c0 <UART_SetConfig+0x348>
 80047da:	2302      	movs	r3, #2
 80047dc:	77fb      	strb	r3, [r7, #31]
 80047de:	e0ef      	b.n	80049c0 <UART_SetConfig+0x348>
 80047e0:	2304      	movs	r3, #4
 80047e2:	77fb      	strb	r3, [r7, #31]
 80047e4:	e0ec      	b.n	80049c0 <UART_SetConfig+0x348>
 80047e6:	2308      	movs	r3, #8
 80047e8:	77fb      	strb	r3, [r7, #31]
 80047ea:	e0e9      	b.n	80049c0 <UART_SetConfig+0x348>
 80047ec:	2310      	movs	r3, #16
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e0e6      	b.n	80049c0 <UART_SetConfig+0x348>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a56      	ldr	r2, [pc, #344]	@ (8004950 <UART_SetConfig+0x2d8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d120      	bne.n	800483e <UART_SetConfig+0x1c6>
 80047fc:	4b51      	ldr	r3, [pc, #324]	@ (8004944 <UART_SetConfig+0x2cc>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004806:	2bc0      	cmp	r3, #192	@ 0xc0
 8004808:	d013      	beq.n	8004832 <UART_SetConfig+0x1ba>
 800480a:	2bc0      	cmp	r3, #192	@ 0xc0
 800480c:	d814      	bhi.n	8004838 <UART_SetConfig+0x1c0>
 800480e:	2b80      	cmp	r3, #128	@ 0x80
 8004810:	d009      	beq.n	8004826 <UART_SetConfig+0x1ae>
 8004812:	2b80      	cmp	r3, #128	@ 0x80
 8004814:	d810      	bhi.n	8004838 <UART_SetConfig+0x1c0>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <UART_SetConfig+0x1a8>
 800481a:	2b40      	cmp	r3, #64	@ 0x40
 800481c:	d006      	beq.n	800482c <UART_SetConfig+0x1b4>
 800481e:	e00b      	b.n	8004838 <UART_SetConfig+0x1c0>
 8004820:	2300      	movs	r3, #0
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e0cc      	b.n	80049c0 <UART_SetConfig+0x348>
 8004826:	2302      	movs	r3, #2
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e0c9      	b.n	80049c0 <UART_SetConfig+0x348>
 800482c:	2304      	movs	r3, #4
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e0c6      	b.n	80049c0 <UART_SetConfig+0x348>
 8004832:	2308      	movs	r3, #8
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e0c3      	b.n	80049c0 <UART_SetConfig+0x348>
 8004838:	2310      	movs	r3, #16
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e0c0      	b.n	80049c0 <UART_SetConfig+0x348>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a44      	ldr	r2, [pc, #272]	@ (8004954 <UART_SetConfig+0x2dc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d125      	bne.n	8004894 <UART_SetConfig+0x21c>
 8004848:	4b3e      	ldr	r3, [pc, #248]	@ (8004944 <UART_SetConfig+0x2cc>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004856:	d017      	beq.n	8004888 <UART_SetConfig+0x210>
 8004858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800485c:	d817      	bhi.n	800488e <UART_SetConfig+0x216>
 800485e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004862:	d00b      	beq.n	800487c <UART_SetConfig+0x204>
 8004864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004868:	d811      	bhi.n	800488e <UART_SetConfig+0x216>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <UART_SetConfig+0x1fe>
 800486e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004872:	d006      	beq.n	8004882 <UART_SetConfig+0x20a>
 8004874:	e00b      	b.n	800488e <UART_SetConfig+0x216>
 8004876:	2300      	movs	r3, #0
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e0a1      	b.n	80049c0 <UART_SetConfig+0x348>
 800487c:	2302      	movs	r3, #2
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e09e      	b.n	80049c0 <UART_SetConfig+0x348>
 8004882:	2304      	movs	r3, #4
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e09b      	b.n	80049c0 <UART_SetConfig+0x348>
 8004888:	2308      	movs	r3, #8
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e098      	b.n	80049c0 <UART_SetConfig+0x348>
 800488e:	2310      	movs	r3, #16
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e095      	b.n	80049c0 <UART_SetConfig+0x348>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2f      	ldr	r2, [pc, #188]	@ (8004958 <UART_SetConfig+0x2e0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d125      	bne.n	80048ea <UART_SetConfig+0x272>
 800489e:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <UART_SetConfig+0x2cc>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048ac:	d017      	beq.n	80048de <UART_SetConfig+0x266>
 80048ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048b2:	d817      	bhi.n	80048e4 <UART_SetConfig+0x26c>
 80048b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048b8:	d00b      	beq.n	80048d2 <UART_SetConfig+0x25a>
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048be:	d811      	bhi.n	80048e4 <UART_SetConfig+0x26c>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <UART_SetConfig+0x254>
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c8:	d006      	beq.n	80048d8 <UART_SetConfig+0x260>
 80048ca:	e00b      	b.n	80048e4 <UART_SetConfig+0x26c>
 80048cc:	2301      	movs	r3, #1
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e076      	b.n	80049c0 <UART_SetConfig+0x348>
 80048d2:	2302      	movs	r3, #2
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e073      	b.n	80049c0 <UART_SetConfig+0x348>
 80048d8:	2304      	movs	r3, #4
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e070      	b.n	80049c0 <UART_SetConfig+0x348>
 80048de:	2308      	movs	r3, #8
 80048e0:	77fb      	strb	r3, [r7, #31]
 80048e2:	e06d      	b.n	80049c0 <UART_SetConfig+0x348>
 80048e4:	2310      	movs	r3, #16
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e06a      	b.n	80049c0 <UART_SetConfig+0x348>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1b      	ldr	r2, [pc, #108]	@ (800495c <UART_SetConfig+0x2e4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d138      	bne.n	8004966 <UART_SetConfig+0x2ee>
 80048f4:	4b13      	ldr	r3, [pc, #76]	@ (8004944 <UART_SetConfig+0x2cc>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004902:	d017      	beq.n	8004934 <UART_SetConfig+0x2bc>
 8004904:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004908:	d82a      	bhi.n	8004960 <UART_SetConfig+0x2e8>
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490e:	d00b      	beq.n	8004928 <UART_SetConfig+0x2b0>
 8004910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004914:	d824      	bhi.n	8004960 <UART_SetConfig+0x2e8>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <UART_SetConfig+0x2aa>
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800491e:	d006      	beq.n	800492e <UART_SetConfig+0x2b6>
 8004920:	e01e      	b.n	8004960 <UART_SetConfig+0x2e8>
 8004922:	2300      	movs	r3, #0
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e04b      	b.n	80049c0 <UART_SetConfig+0x348>
 8004928:	2302      	movs	r3, #2
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e048      	b.n	80049c0 <UART_SetConfig+0x348>
 800492e:	2304      	movs	r3, #4
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e045      	b.n	80049c0 <UART_SetConfig+0x348>
 8004934:	2308      	movs	r3, #8
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e042      	b.n	80049c0 <UART_SetConfig+0x348>
 800493a:	bf00      	nop
 800493c:	efff69f3 	.word	0xefff69f3
 8004940:	40011000 	.word	0x40011000
 8004944:	40023800 	.word	0x40023800
 8004948:	40004400 	.word	0x40004400
 800494c:	40004800 	.word	0x40004800
 8004950:	40004c00 	.word	0x40004c00
 8004954:	40005000 	.word	0x40005000
 8004958:	40011400 	.word	0x40011400
 800495c:	40007800 	.word	0x40007800
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e02c      	b.n	80049c0 <UART_SetConfig+0x348>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a72      	ldr	r2, [pc, #456]	@ (8004b34 <UART_SetConfig+0x4bc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d125      	bne.n	80049bc <UART_SetConfig+0x344>
 8004970:	4b71      	ldr	r3, [pc, #452]	@ (8004b38 <UART_SetConfig+0x4c0>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004976:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800497a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800497e:	d017      	beq.n	80049b0 <UART_SetConfig+0x338>
 8004980:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004984:	d817      	bhi.n	80049b6 <UART_SetConfig+0x33e>
 8004986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800498a:	d00b      	beq.n	80049a4 <UART_SetConfig+0x32c>
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004990:	d811      	bhi.n	80049b6 <UART_SetConfig+0x33e>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <UART_SetConfig+0x326>
 8004996:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800499a:	d006      	beq.n	80049aa <UART_SetConfig+0x332>
 800499c:	e00b      	b.n	80049b6 <UART_SetConfig+0x33e>
 800499e:	2300      	movs	r3, #0
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e00d      	b.n	80049c0 <UART_SetConfig+0x348>
 80049a4:	2302      	movs	r3, #2
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e00a      	b.n	80049c0 <UART_SetConfig+0x348>
 80049aa:	2304      	movs	r3, #4
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e007      	b.n	80049c0 <UART_SetConfig+0x348>
 80049b0:	2308      	movs	r3, #8
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e004      	b.n	80049c0 <UART_SetConfig+0x348>
 80049b6:	2310      	movs	r3, #16
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e001      	b.n	80049c0 <UART_SetConfig+0x348>
 80049bc:	2310      	movs	r3, #16
 80049be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c8:	d15b      	bne.n	8004a82 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049ca:	7ffb      	ldrb	r3, [r7, #31]
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d828      	bhi.n	8004a22 <UART_SetConfig+0x3aa>
 80049d0:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <UART_SetConfig+0x360>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	08004a23 	.word	0x08004a23
 80049e8:	08004a13 	.word	0x08004a13
 80049ec:	08004a23 	.word	0x08004a23
 80049f0:	08004a23 	.word	0x08004a23
 80049f4:	08004a23 	.word	0x08004a23
 80049f8:	08004a1b 	.word	0x08004a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049fc:	f7fe faca 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004a00:	61b8      	str	r0, [r7, #24]
        break;
 8004a02:	e013      	b.n	8004a2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a04:	f7fe fada 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8004a08:	61b8      	str	r0, [r7, #24]
        break;
 8004a0a:	e00f      	b.n	8004a2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004b3c <UART_SetConfig+0x4c4>)
 8004a0e:	61bb      	str	r3, [r7, #24]
        break;
 8004a10:	e00c      	b.n	8004a2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a12:	f7fe f9ad 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8004a16:	61b8      	str	r0, [r7, #24]
        break;
 8004a18:	e008      	b.n	8004a2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a1e:	61bb      	str	r3, [r7, #24]
        break;
 8004a20:	e004      	b.n	8004a2c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	77bb      	strb	r3, [r7, #30]
        break;
 8004a2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d074      	beq.n	8004b1c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	005a      	lsls	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	441a      	add	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b0f      	cmp	r3, #15
 8004a4c:	d916      	bls.n	8004a7c <UART_SetConfig+0x404>
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a54:	d212      	bcs.n	8004a7c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f023 030f 	bic.w	r3, r3, #15
 8004a5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	89fb      	ldrh	r3, [r7, #14]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	89fa      	ldrh	r2, [r7, #14]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e04f      	b.n	8004b1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	77bb      	strb	r3, [r7, #30]
 8004a80:	e04c      	b.n	8004b1c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a82:	7ffb      	ldrb	r3, [r7, #31]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d828      	bhi.n	8004ada <UART_SetConfig+0x462>
 8004a88:	a201      	add	r2, pc, #4	@ (adr r2, 8004a90 <UART_SetConfig+0x418>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004abd 	.word	0x08004abd
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004adb 	.word	0x08004adb
 8004aa0:	08004acb 	.word	0x08004acb
 8004aa4:	08004adb 	.word	0x08004adb
 8004aa8:	08004adb 	.word	0x08004adb
 8004aac:	08004adb 	.word	0x08004adb
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7fe fa6e 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	61b8      	str	r0, [r7, #24]
        break;
 8004aba:	e013      	b.n	8004ae4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7fe fa7e 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8004ac0:	61b8      	str	r0, [r7, #24]
        break;
 8004ac2:	e00f      	b.n	8004ae4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b3c <UART_SetConfig+0x4c4>)
 8004ac6:	61bb      	str	r3, [r7, #24]
        break;
 8004ac8:	e00c      	b.n	8004ae4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aca:	f7fe f951 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8004ace:	61b8      	str	r0, [r7, #24]
        break;
 8004ad0:	e008      	b.n	8004ae4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ad6:	61bb      	str	r3, [r7, #24]
        break;
 8004ad8:	e004      	b.n	8004ae4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ae2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	085a      	lsrs	r2, r3, #1
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	441a      	add	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b0f      	cmp	r3, #15
 8004b02:	d909      	bls.n	8004b18 <UART_SetConfig+0x4a0>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b0a:	d205      	bcs.n	8004b18 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	e001      	b.n	8004b1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b28:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40007c00 	.word	0x40007c00
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	00f42400 	.word	0x00f42400

08004b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c3e:	d10a      	bne.n	8004c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b098      	sub	sp, #96	@ 0x60
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c94:	f7fc fbd4 	bl	8001440 <HAL_GetTick>
 8004c98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0308 	and.w	r3, r3, #8
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d12e      	bne.n	8004d06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f88c 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d021      	beq.n	8004d06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e6      	bne.n	8004cc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e062      	b.n	8004dcc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d149      	bne.n	8004da8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f856 	bl	8004dd4 <UART_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d03c      	beq.n	8004da8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e6      	bne.n	8004d2e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d80:	61fa      	str	r2, [r7, #28]
 8004d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e5      	bne.n	8004d60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e011      	b.n	8004dcc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3758      	adds	r7, #88	@ 0x58
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de4:	e04f      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dec:	d04b      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fc fb27 	bl	8001440 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e04e      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d037      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2b80      	cmp	r3, #128	@ 0x80
 8004e1a:	d034      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b40      	cmp	r3, #64	@ 0x40
 8004e20:	d031      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d110      	bne.n	8004e52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2208      	movs	r2, #8
 8004e36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f838 	bl	8004eae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2208      	movs	r2, #8
 8004e42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e029      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e60:	d111      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f81e 	bl	8004eae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e00f      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	bf0c      	ite	eq
 8004e96:	2301      	moveq	r3, #1
 8004e98:	2300      	movne	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d0a0      	beq.n	8004de6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b095      	sub	sp, #84	@ 0x54
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ed6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3308      	adds	r3, #8
 8004eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3308      	adds	r3, #8
 8004f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d118      	bne.n	8004f56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f023 0310 	bic.w	r3, r3, #16
 8004f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6979      	ldr	r1, [r7, #20]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e6      	bne.n	8004f24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f6a:	bf00      	nop
 8004f6c:	3754      	adds	r7, #84	@ 0x54
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	f107 001c 	add.w	r0, r7, #28
 8004f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d121      	bne.n	8004fd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	4b21      	ldr	r3, [pc, #132]	@ (8005028 <USB_CoreInit+0xb0>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d105      	bne.n	8004fca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa92 	bl	80054f4 <USB_CoreReset>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	e010      	b.n	8004ff8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fa86 	bl	80054f4 <USB_CoreReset>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004ff8:	7fbb      	ldrb	r3, [r7, #30]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d10b      	bne.n	8005016 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f043 0206 	orr.w	r2, r3, #6
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005022:	b004      	add	sp, #16
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	ffbdffbf 	.word	0xffbdffbf

0800502c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 0201 	bic.w	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	460b      	mov	r3, r1
 8005058:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d115      	bne.n	800509c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800507c:	200a      	movs	r0, #10
 800507e:	f7fc f9eb 	bl	8001458 <HAL_Delay>
      ms += 10U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	330a      	adds	r3, #10
 8005086:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fa25 	bl	80054d8 <USB_GetMode>
 800508e:	4603      	mov	r3, r0
 8005090:	2b01      	cmp	r3, #1
 8005092:	d01e      	beq.n	80050d2 <USB_SetCurrentMode+0x84>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2bc7      	cmp	r3, #199	@ 0xc7
 8005098:	d9f0      	bls.n	800507c <USB_SetCurrentMode+0x2e>
 800509a:	e01a      	b.n	80050d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d115      	bne.n	80050ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050ae:	200a      	movs	r0, #10
 80050b0:	f7fc f9d2 	bl	8001458 <HAL_Delay>
      ms += 10U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	330a      	adds	r3, #10
 80050b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fa0c 	bl	80054d8 <USB_GetMode>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <USB_SetCurrentMode+0x84>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80050ca:	d9f0      	bls.n	80050ae <USB_SetCurrentMode+0x60>
 80050cc:	e001      	b.n	80050d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e005      	b.n	80050de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80050d6:	d101      	bne.n	80050dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050e8:	b084      	sub	sp, #16
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e009      	b.n	800511c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3340      	adds	r3, #64	@ 0x40
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	2200      	movs	r2, #0
 8005114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	3301      	adds	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b0e      	cmp	r3, #14
 8005120:	d9f2      	bls.n	8005108 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005122:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11c      	bne.n	8005164 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005138:	f043 0302 	orr.w	r3, r3, #2
 800513c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e005      	b.n	8005170 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005176:	461a      	mov	r2, r3
 8005178:	2300      	movs	r3, #0
 800517a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800517c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10d      	bne.n	80051a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800518c:	2100      	movs	r1, #0
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f968 	bl	8005464 <USB_SetDevSpeed>
 8005194:	e008      	b.n	80051a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005196:	2101      	movs	r1, #1
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f963 	bl	8005464 <USB_SetDevSpeed>
 800519e:	e003      	b.n	80051a8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051a0:	2103      	movs	r1, #3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f95e 	bl	8005464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051a8:	2110      	movs	r1, #16
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8fa 	bl	80053a4 <USB_FlushTxFifo>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f924 	bl	8005408 <USB_FlushRxFifo>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051dc:	461a      	mov	r2, r3
 80051de:	2300      	movs	r3, #0
 80051e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e8:	461a      	mov	r2, r3
 80051ea:	2300      	movs	r3, #0
 80051ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e043      	b.n	800527c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005206:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800520a:	d118      	bne.n	800523e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800521e:	461a      	mov	r2, r3
 8005220:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e013      	b.n	8005250 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005234:	461a      	mov	r2, r3
 8005236:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	e008      	b.n	8005250 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524a:	461a      	mov	r2, r3
 800524c:	2300      	movs	r3, #0
 800524e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525c:	461a      	mov	r2, r3
 800525e:	2300      	movs	r3, #0
 8005260:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526e:	461a      	mov	r2, r3
 8005270:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005274:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3301      	adds	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005280:	461a      	mov	r2, r3
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4293      	cmp	r3, r2
 8005286:	d3b5      	bcc.n	80051f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005288:	2300      	movs	r3, #0
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	e043      	b.n	8005316 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052a4:	d118      	bne.n	80052d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b8:	461a      	mov	r2, r3
 80052ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e013      	b.n	80052ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ce:	461a      	mov	r2, r3
 80052d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e008      	b.n	80052ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e4:	461a      	mov	r2, r3
 80052e6:	2300      	movs	r3, #0
 80052e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f6:	461a      	mov	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005308:	461a      	mov	r2, r3
 800530a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800530e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	3301      	adds	r3, #1
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800531a:	461a      	mov	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4293      	cmp	r3, r2
 8005320:	d3b5      	bcc.n	800528e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005334:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005342:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005344:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f043 0210 	orr.w	r2, r3, #16
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	4b0f      	ldr	r3, [pc, #60]	@ (800539c <USB_DevInit+0x2b4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005364:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f043 0208 	orr.w	r2, r3, #8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005378:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800537c:	2b01      	cmp	r3, #1
 800537e:	d105      	bne.n	800538c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <USB_DevInit+0x2b8>)
 8005386:	4313      	orrs	r3, r2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005398:	b004      	add	sp, #16
 800539a:	4770      	bx	lr
 800539c:	803c3800 	.word	0x803c3800
 80053a0:	40000004 	.word	0x40000004

080053a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053be:	d901      	bls.n	80053c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e01b      	b.n	80053fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	daf2      	bge.n	80053b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	019b      	lsls	r3, r3, #6
 80053d4:	f043 0220 	orr.w	r2, r3, #32
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053e8:	d901      	bls.n	80053ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e006      	b.n	80053fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d0f0      	beq.n	80053dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005420:	d901      	bls.n	8005426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e018      	b.n	8005458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	daf2      	bge.n	8005414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2210      	movs	r2, #16
 8005436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005444:	d901      	bls.n	800544a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e006      	b.n	8005458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b10      	cmp	r3, #16
 8005454:	d0f0      	beq.n	8005438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	68f9      	ldr	r1, [r7, #12]
 8005480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005484:	4313      	orrs	r3, r2
 8005486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80054b0:	f023 0303 	bic.w	r3, r3, #3
 80054b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054c4:	f043 0302 	orr.w	r3, r3, #2
 80054c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f003 0301 	and.w	r3, r3, #1
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800550c:	d901      	bls.n	8005512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e022      	b.n	8005558 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	daf2      	bge.n	8005500 <USB_CoreReset+0xc>

  count = 10U;
 800551a:	230a      	movs	r3, #10
 800551c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800551e:	e002      	b.n	8005526 <USB_CoreReset+0x32>
  {
    count--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3b01      	subs	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f9      	bne.n	8005520 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f043 0201 	orr.w	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3301      	adds	r3, #1
 800553c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005544:	d901      	bls.n	800554a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e006      	b.n	8005558 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d0f0      	beq.n	8005538 <USB_CoreReset+0x44>

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 800556a:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <ETH_IRQHandler+0x38>)
 800556c:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 800556e:	4b0c      	ldr	r3, [pc, #48]	@ (80055a0 <ETH_IRQHandler+0x3c>)
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7fc f987 	bl	8001888 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 800557a:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <ETH_IRQHandler+0x3c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <ETH_IRQHandler+0x2e>
 8005582:	4b08      	ldr	r3, [pc, #32]	@ (80055a4 <ETH_IRQHandler+0x40>)
 8005584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	f3bf 8f6f 	isb	sy
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	2000079c 	.word	0x2000079c
 80055a0:	20000850 	.word	0x20000850
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 80055b0:	2300      	movs	r3, #0
 80055b2:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ba:	2be0      	cmp	r3, #224	@ 0xe0
 80055bc:	d103      	bne.n	80055c6 <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	f043 0320 	orr.w	r3, r3, #32
 80055c4:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d019      	beq.n	8005608 <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
 80055d6:	f043 0310 	orr.w	r3, r3, #16
 80055da:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055e2:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
 80055f0:	f043 0308 	orr.w	r3, r3, #8
 80055f4:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	f043 0304 	orr.w	r3, r3, #4
 8005606:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 8005616:	7dfb      	ldrb	r3, [r7, #23]
 8005618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800561c:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 800561e:	4b0e      	ldr	r3, [pc, #56]	@ (8005658 <HAL_ETH_ErrorCallback+0xb0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d014      	beq.n	8005650 <HAL_ETH_ErrorCallback+0xa8>
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d011      	beq.n	8005650 <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 8005630:	4b09      	ldr	r3, [pc, #36]	@ (8005658 <HAL_ETH_ErrorCallback+0xb0>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	7df9      	ldrb	r1, [r7, #23]
 8005636:	f107 030c 	add.w	r3, r7, #12
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	2300      	movs	r3, #0
 800563e:	2201      	movs	r2, #1
 8005640:	f001 fec0 	bl	80073c4 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8005644:	4b05      	ldr	r3, [pc, #20]	@ (800565c <HAL_ETH_ErrorCallback+0xb4>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	4a03      	ldr	r2, [pc, #12]	@ (800565c <HAL_ETH_ErrorCallback+0xb4>)
 800564e:	6013      	str	r3, [r2, #0]
    }
}
 8005650:	bf00      	nop
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	2000084c 	.word	0x2000084c
 800565c:	20000850 	.word	0x20000850

08005660 <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af02      	add	r7, sp, #8
 8005666:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566c:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 800566e:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_ETH_RxCpltCallback+0x54>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	429a      	cmp	r2, r3
 8005676:	d902      	bls.n	800567e <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 8005678:	4a0e      	ldr	r2, [pc, #56]	@ (80056b4 <HAL_ETH_RxCpltCallback+0x54>)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 800567e:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <HAL_ETH_RxCpltCallback+0x58>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d011      	beq.n	80056aa <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 800568a:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <HAL_ETH_RxCpltCallback+0x58>)
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	f107 0308 	add.w	r3, r7, #8
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	2300      	movs	r3, #0
 8005696:	2201      	movs	r2, #1
 8005698:	2101      	movs	r1, #1
 800569a:	f001 fe93 	bl	80073c4 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 800569e:	4b07      	ldr	r3, [pc, #28]	@ (80056bc <HAL_ETH_RxCpltCallback+0x5c>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	4a05      	ldr	r2, [pc, #20]	@ (80056bc <HAL_ETH_RxCpltCallback+0x5c>)
 80056a8:	6013      	str	r3, [r2, #0]
    }
}
 80056aa:	bf00      	nop
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000854 	.word	0x20000854
 80056b8:	2000084c 	.word	0x2000084c
 80056bc:	20000850 	.word	0x20000850

080056c0 <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056cc:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 80056ce:	4b11      	ldr	r3, [pc, #68]	@ (8005714 <HAL_ETH_TxCpltCallback+0x54>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d902      	bls.n	80056de <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 80056d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005714 <HAL_ETH_TxCpltCallback+0x54>)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 80056de:	4b0e      	ldr	r3, [pc, #56]	@ (8005718 <HAL_ETH_TxCpltCallback+0x58>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d011      	beq.n	800570a <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <HAL_ETH_TxCpltCallback+0x58>)
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	f107 0308 	add.w	r3, r7, #8
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	2300      	movs	r3, #0
 80056f6:	2201      	movs	r2, #1
 80056f8:	2102      	movs	r1, #2
 80056fa:	f001 fe63 	bl	80073c4 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80056fe:	4b07      	ldr	r3, [pc, #28]	@ (800571c <HAL_ETH_TxCpltCallback+0x5c>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	4a05      	ldr	r2, [pc, #20]	@ (800571c <HAL_ETH_TxCpltCallback+0x5c>)
 8005708:	6013      	str	r3, [r2, #0]
    }
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000858 	.word	0x20000858
 8005718:	2000084c 	.word	0x2000084c
 800571c:	20000850 	.word	0x20000850

08005720 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005736:	f3ef 8305 	mrs	r3, IPSR
 800573a:	60bb      	str	r3, [r7, #8]
  return(result);
 800573c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005742:	f3ef 8310 	mrs	r3, PRIMASK
 8005746:	607b      	str	r3, [r7, #4]
  return(result);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d105      	bne.n	800575a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800574e:	f3ef 8311 	mrs	r3, BASEPRI
 8005752:	603b      	str	r3, [r7, #0]
  return(result);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <osKernelInitialize+0x3a>
 800575a:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <osKernelInitialize+0x64>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d103      	bne.n	800576a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005762:	f06f 0305 	mvn.w	r3, #5
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e00c      	b.n	8005784 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800576a:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <osKernelInitialize+0x64>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005772:	4b08      	ldr	r3, [pc, #32]	@ (8005794 <osKernelInitialize+0x64>)
 8005774:	2201      	movs	r2, #1
 8005776:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e002      	b.n	8005784 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005782:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005784:	68fb      	ldr	r3, [r7, #12]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000085c 	.word	0x2000085c

08005798 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800579e:	f3ef 8305 	mrs	r3, IPSR
 80057a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80057a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10f      	bne.n	80057ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057aa:	f3ef 8310 	mrs	r3, PRIMASK
 80057ae:	607b      	str	r3, [r7, #4]
  return(result);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d105      	bne.n	80057c2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057b6:	f3ef 8311 	mrs	r3, BASEPRI
 80057ba:	603b      	str	r3, [r7, #0]
  return(result);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d007      	beq.n	80057d2 <osKernelStart+0x3a>
 80057c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005800 <osKernelStart+0x68>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d103      	bne.n	80057d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80057ca:	f06f 0305 	mvn.w	r3, #5
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e010      	b.n	80057f4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <osKernelStart+0x68>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d109      	bne.n	80057ee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057da:	f7ff ffa1 	bl	8005720 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057de:	4b08      	ldr	r3, [pc, #32]	@ (8005800 <osKernelStart+0x68>)
 80057e0:	2202      	movs	r2, #2
 80057e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80057e4:	f001 f8e2 	bl	80069ac <vTaskStartScheduler>
      stat = osOK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e002      	b.n	80057f4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80057ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80057f4:	68fb      	ldr	r3, [r7, #12]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	2000085c 	.word	0x2000085c

08005804 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b090      	sub	sp, #64	@ 0x40
 8005808:	af04      	add	r7, sp, #16
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005814:	f3ef 8305 	mrs	r3, IPSR
 8005818:	61fb      	str	r3, [r7, #28]
  return(result);
 800581a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800581c:	2b00      	cmp	r3, #0
 800581e:	f040 8090 	bne.w	8005942 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005822:	f3ef 8310 	mrs	r3, PRIMASK
 8005826:	61bb      	str	r3, [r7, #24]
  return(result);
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800582e:	f3ef 8311 	mrs	r3, BASEPRI
 8005832:	617b      	str	r3, [r7, #20]
  return(result);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <osThreadNew+0x3e>
 800583a:	4b44      	ldr	r3, [pc, #272]	@ (800594c <osThreadNew+0x148>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d07f      	beq.n	8005942 <osThreadNew+0x13e>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d07c      	beq.n	8005942 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8005848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800584c:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800584e:	2318      	movs	r3, #24
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800585a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d045      	beq.n	80058ee <osThreadNew+0xea>
      if (attr->name != NULL) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <osThreadNew+0x6c>
        name = attr->name;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <osThreadNew+0x92>
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	2b38      	cmp	r3, #56	@ 0x38
 8005888:	d805      	bhi.n	8005896 <osThreadNew+0x92>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <osThreadNew+0x96>
        return (NULL);
 8005896:	2300      	movs	r3, #0
 8005898:	e054      	b.n	8005944 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00e      	beq.n	80058d0 <osThreadNew+0xcc>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2ba7      	cmp	r3, #167	@ 0xa7
 80058b8:	d90a      	bls.n	80058d0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d006      	beq.n	80058d0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <osThreadNew+0xcc>
        mem = 1;
 80058ca:	2301      	movs	r3, #1
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	e010      	b.n	80058f2 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10c      	bne.n	80058f2 <osThreadNew+0xee>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d108      	bne.n	80058f2 <osThreadNew+0xee>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <osThreadNew+0xee>
          mem = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	623b      	str	r3, [r7, #32]
 80058ec:	e001      	b.n	80058f2 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d110      	bne.n	800591a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005900:	9202      	str	r2, [sp, #8]
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800590c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fe4e 	bl	80065b0 <xTaskCreateStatic>
 8005914:	4603      	mov	r3, r0
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	e013      	b.n	8005942 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d110      	bne.n	8005942 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	b29a      	uxth	r2, r3
 8005924:	f107 0310 	add.w	r3, r7, #16
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fea2 	bl	800667c <xTaskCreate>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d001      	beq.n	8005942 <osThreadNew+0x13e>
          hTask = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005942:	693b      	ldr	r3, [r7, #16]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3730      	adds	r7, #48	@ 0x30
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	2000085c 	.word	0x2000085c

08005950 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005958:	f3ef 8305 	mrs	r3, IPSR
 800595c:	613b      	str	r3, [r7, #16]
  return(result);
 800595e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10f      	bne.n	8005984 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005964:	f3ef 8310 	mrs	r3, PRIMASK
 8005968:	60fb      	str	r3, [r7, #12]
  return(result);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005970:	f3ef 8311 	mrs	r3, BASEPRI
 8005974:	60bb      	str	r3, [r7, #8]
  return(result);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <osDelay+0x3c>
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <osDelay+0x58>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d103      	bne.n	800598c <osDelay+0x3c>
    stat = osErrorISR;
 8005984:	f06f 0305 	mvn.w	r3, #5
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e007      	b.n	800599c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 ffd0 	bl	800693c <vTaskDelay>
    }
  }

  return (stat);
 800599c:	697b      	ldr	r3, [r7, #20]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	2000085c 	.word	0x2000085c

080059ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a07      	ldr	r2, [pc, #28]	@ (80059d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80059bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4a06      	ldr	r2, [pc, #24]	@ (80059dc <vApplicationGetIdleTaskMemory+0x30>)
 80059c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059ca:	601a      	str	r2, [r3, #0]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20000860 	.word	0x20000860
 80059dc:	20000908 	.word	0x20000908

080059e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4a07      	ldr	r2, [pc, #28]	@ (8005a0c <vApplicationGetTimerTaskMemory+0x2c>)
 80059f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4a06      	ldr	r2, [pc, #24]	@ (8005a10 <vApplicationGetTimerTaskMemory+0x30>)
 80059f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059fe:	601a      	str	r2, [r3, #0]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	20000d08 	.word	0x20000d08
 8005a10:	20000db0 	.word	0x20000db0

08005a14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f103 0208 	add.w	r2, r3, #8
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f103 0208 	add.w	r2, r3, #8
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f103 0208 	add.w	r2, r3, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	601a      	str	r2, [r3, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005acc:	d103      	bne.n	8005ad6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e00c      	b.n	8005af0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	e002      	b.n	8005ae4 <vListInsert+0x2e>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d2f6      	bcs.n	8005ade <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6892      	ldr	r2, [r2, #8]
 8005b3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6852      	ldr	r2, [r2, #4]
 8005b48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d103      	bne.n	8005b5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	1e5a      	subs	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10d      	bne.n	8005bac <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b94:	b672      	cpsid	i
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	b662      	cpsie	i
 8005ba4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ba6:	bf00      	nop
 8005ba8:	bf00      	nop
 8005baa:	e7fd      	b.n	8005ba8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005bac:	f002 f9c6 	bl	8007f3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb8:	68f9      	ldr	r1, [r7, #12]
 8005bba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	441a      	add	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	68f9      	ldr	r1, [r7, #12]
 8005be0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	441a      	add	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	22ff      	movs	r2, #255	@ 0xff
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	22ff      	movs	r2, #255	@ 0xff
 8005bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d114      	bne.n	8005c2c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01a      	beq.n	8005c40 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 f978 	bl	8006f04 <xTaskRemoveFromEventList>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d012      	beq.n	8005c40 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c50 <xQueueGenericReset+0xd4>)
 8005c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	e009      	b.n	8005c40 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3310      	adds	r3, #16
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff feef 	bl	8005a14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3324      	adds	r3, #36	@ 0x24
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff feea 	bl	8005a14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c40:	f002 f9b2 	bl	8007fa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c44:	2301      	movs	r3, #1
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08e      	sub	sp, #56	@ 0x38
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	b672      	cpsid	i
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	b662      	cpsie	i
 8005c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	b672      	cpsid	i
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	b662      	cpsie	i
 8005c9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <xQueueGenericCreateStatic+0x5e>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <xQueueGenericCreateStatic+0x62>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueGenericCreateStatic+0x64>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10d      	bne.n	8005cd8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	b672      	cpsid	i
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	b662      	cpsie	i
 8005cd0:	623b      	str	r3, [r7, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d102      	bne.n	8005ce4 <xQueueGenericCreateStatic+0x90>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <xQueueGenericCreateStatic+0x94>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <xQueueGenericCreateStatic+0x96>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	b672      	cpsid	i
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	b662      	cpsie	i
 8005d02:	61fb      	str	r3, [r7, #28]
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d0a:	2350      	movs	r3, #80	@ 0x50
 8005d0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b50      	cmp	r3, #80	@ 0x50
 8005d12:	d00d      	beq.n	8005d30 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d18:	b672      	cpsid	i
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	b662      	cpsie	i
 8005d28:	61bb      	str	r3, [r7, #24]
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	e7fd      	b.n	8005d2c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00d      	beq.n	8005d58 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f805 	bl	8005d62 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3730      	adds	r7, #48	@ 0x30
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d103      	bne.n	8005d7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e002      	b.n	8005d84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d90:	2101      	movs	r1, #1
 8005d92:	69b8      	ldr	r0, [r7, #24]
 8005d94:	f7ff fef2 	bl	8005b7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08e      	sub	sp, #56	@ 0x38
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005db6:	2300      	movs	r3, #0
 8005db8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10d      	bne.n	8005de0 <xQueueGenericSend+0x38>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	b672      	cpsid	i
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	b662      	cpsie	i
 8005dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	e7fd      	b.n	8005ddc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d103      	bne.n	8005dee <xQueueGenericSend+0x46>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <xQueueGenericSend+0x4a>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <xQueueGenericSend+0x4c>
 8005df2:	2300      	movs	r3, #0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10d      	bne.n	8005e14 <xQueueGenericSend+0x6c>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfc:	b672      	cpsid	i
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	b662      	cpsie	i
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e0e:	bf00      	nop
 8005e10:	bf00      	nop
 8005e12:	e7fd      	b.n	8005e10 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d103      	bne.n	8005e22 <xQueueGenericSend+0x7a>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <xQueueGenericSend+0x7e>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <xQueueGenericSend+0x80>
 8005e26:	2300      	movs	r3, #0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10d      	bne.n	8005e48 <xQueueGenericSend+0xa0>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e30:	b672      	cpsid	i
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	b662      	cpsie	i
 8005e40:	623b      	str	r3, [r7, #32]
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e48:	f001 fa2a 	bl	80072a0 <xTaskGetSchedulerState>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <xQueueGenericSend+0xb0>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <xQueueGenericSend+0xb4>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <xQueueGenericSend+0xb6>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <xQueueGenericSend+0xd6>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	b672      	cpsid	i
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	b662      	cpsie	i
 8005e76:	61fb      	str	r3, [r7, #28]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e7e:	f002 f85d 	bl	8007f3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d302      	bcc.n	8005e94 <xQueueGenericSend+0xec>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d129      	bne.n	8005ee8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e9a:	f000 fa1b 	bl	80062d4 <prvCopyDataToQueue>
 8005e9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d010      	beq.n	8005eca <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eaa:	3324      	adds	r3, #36	@ 0x24
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 f829 	bl	8006f04 <xTaskRemoveFromEventList>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d013      	beq.n	8005ee0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb8 <xQueueGenericSend+0x210>)
 8005eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	e00a      	b.n	8005ee0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ed0:	4b39      	ldr	r3, [pc, #228]	@ (8005fb8 <xQueueGenericSend+0x210>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ee0:	f002 f862 	bl	8007fa8 <vPortExitCritical>
				return pdPASS;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e063      	b.n	8005fb0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eee:	f002 f85b 	bl	8007fa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e05c      	b.n	8005fb0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d106      	bne.n	8005f0a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005efc:	f107 0314 	add.w	r3, r7, #20
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 f865 	bl	8006fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f0a:	f002 f84d 	bl	8007fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f0e:	f000 fdc1 	bl	8006a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f12:	f002 f813 	bl	8007f3c <vPortEnterCritical>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1c:	b25b      	sxtb	r3, r3
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f22:	d103      	bne.n	8005f2c <xQueueGenericSend+0x184>
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f32:	b25b      	sxtb	r3, r3
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f38:	d103      	bne.n	8005f42 <xQueueGenericSend+0x19a>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f42:	f002 f831 	bl	8007fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f46:	1d3a      	adds	r2, r7, #4
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 f854 	bl	8006ffc <xTaskCheckForTimeOut>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d124      	bne.n	8005fa4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f5c:	f000 fab2 	bl	80064c4 <prvIsQueueFull>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d018      	beq.n	8005f98 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	3310      	adds	r3, #16
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 ff72 	bl	8006e58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f76:	f000 fa3d 	bl	80063f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f7a:	f000 fd99 	bl	8006ab0 <xTaskResumeAll>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f47f af7c 	bne.w	8005e7e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005f86:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb8 <xQueueGenericSend+0x210>)
 8005f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	e772      	b.n	8005e7e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f9a:	f000 fa2b 	bl	80063f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f9e:	f000 fd87 	bl	8006ab0 <xTaskResumeAll>
 8005fa2:	e76c      	b.n	8005e7e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fa6:	f000 fa25 	bl	80063f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005faa:	f000 fd81 	bl	8006ab0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3738      	adds	r7, #56	@ 0x38
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08e      	sub	sp, #56	@ 0x38
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	b672      	cpsid	i
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	b662      	cpsie	i
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	e7fd      	b.n	8005fec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d103      	bne.n	8005ffe <xQueueGenericSendFromISR+0x42>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <xQueueGenericSendFromISR+0x46>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <xQueueGenericSendFromISR+0x48>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10d      	bne.n	8006024 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600c:	b672      	cpsid	i
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	b662      	cpsie	i
 800601c:	623b      	str	r3, [r7, #32]
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	e7fd      	b.n	8006020 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d103      	bne.n	8006032 <xQueueGenericSendFromISR+0x76>
 800602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <xQueueGenericSendFromISR+0x7a>
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <xQueueGenericSendFromISR+0x7c>
 8006036:	2300      	movs	r3, #0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10d      	bne.n	8006058 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	b672      	cpsid	i
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	b662      	cpsie	i
 8006050:	61fb      	str	r3, [r7, #28]
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006058:	f002 f858 	bl	800810c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800605c:	f3ef 8211 	mrs	r2, BASEPRI
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	b672      	cpsid	i
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	b662      	cpsie	i
 8006074:	61ba      	str	r2, [r7, #24]
 8006076:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006078:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800607a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800607c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006084:	429a      	cmp	r2, r3
 8006086:	d302      	bcc.n	800608e <xQueueGenericSendFromISR+0xd2>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b02      	cmp	r3, #2
 800608c:	d12c      	bne.n	80060e8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800609e:	f000 f919 	bl	80062d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060aa:	d112      	bne.n	80060d2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d016      	beq.n	80060e2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	3324      	adds	r3, #36	@ 0x24
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 ff23 	bl	8006f04 <xTaskRemoveFromEventList>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00e      	beq.n	80060e2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e007      	b.n	80060e2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060d6:	3301      	adds	r3, #1
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	b25a      	sxtb	r2, r3
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80060e2:	2301      	movs	r3, #1
 80060e4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80060e6:	e001      	b.n	80060ec <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3738      	adds	r7, #56	@ 0x38
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006110:	2300      	movs	r3, #0
 8006112:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10d      	bne.n	800613a <xQueueReceive+0x36>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	b672      	cpsid	i
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	b662      	cpsie	i
 8006132:	623b      	str	r3, [r7, #32]
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	e7fd      	b.n	8006136 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <xQueueReceive+0x44>
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <xQueueReceive+0x48>
 8006148:	2301      	movs	r3, #1
 800614a:	e000      	b.n	800614e <xQueueReceive+0x4a>
 800614c:	2300      	movs	r3, #0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10d      	bne.n	800616e <xQueueReceive+0x6a>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006156:	b672      	cpsid	i
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	b662      	cpsie	i
 8006166:	61fb      	str	r3, [r7, #28]
}
 8006168:	bf00      	nop
 800616a:	bf00      	nop
 800616c:	e7fd      	b.n	800616a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800616e:	f001 f897 	bl	80072a0 <xTaskGetSchedulerState>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d102      	bne.n	800617e <xQueueReceive+0x7a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <xQueueReceive+0x7e>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <xQueueReceive+0x80>
 8006182:	2300      	movs	r3, #0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10d      	bne.n	80061a4 <xQueueReceive+0xa0>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618c:	b672      	cpsid	i
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	b662      	cpsie	i
 800619c:	61bb      	str	r3, [r7, #24]
}
 800619e:	bf00      	nop
 80061a0:	bf00      	nop
 80061a2:	e7fd      	b.n	80061a0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061a4:	f001 feca 	bl	8007f3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d01f      	beq.n	80061f4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061b8:	f000 f8f6 	bl	80063a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00f      	beq.n	80061ec <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	3310      	adds	r3, #16
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fe97 	bl	8006f04 <xTaskRemoveFromEventList>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061dc:	4b3c      	ldr	r3, [pc, #240]	@ (80062d0 <xQueueReceive+0x1cc>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061ec:	f001 fedc 	bl	8007fa8 <vPortExitCritical>
				return pdPASS;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e069      	b.n	80062c8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061fa:	f001 fed5 	bl	8007fa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061fe:	2300      	movs	r3, #0
 8006200:	e062      	b.n	80062c8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006208:	f107 0310 	add.w	r3, r7, #16
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fedf 	bl	8006fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006212:	2301      	movs	r3, #1
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006216:	f001 fec7 	bl	8007fa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621a:	f000 fc3b 	bl	8006a94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800621e:	f001 fe8d 	bl	8007f3c <vPortEnterCritical>
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006228:	b25b      	sxtb	r3, r3
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800622e:	d103      	bne.n	8006238 <xQueueReceive+0x134>
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006244:	d103      	bne.n	800624e <xQueueReceive+0x14a>
 8006246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800624e:	f001 feab 	bl	8007fa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006252:	1d3a      	adds	r2, r7, #4
 8006254:	f107 0310 	add.w	r3, r7, #16
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fece 	bl	8006ffc <xTaskCheckForTimeOut>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d123      	bne.n	80062ae <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006268:	f000 f916 	bl	8006498 <prvIsQueueEmpty>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d017      	beq.n	80062a2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	3324      	adds	r3, #36	@ 0x24
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fdec 	bl	8006e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006282:	f000 f8b7 	bl	80063f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006286:	f000 fc13 	bl	8006ab0 <xTaskResumeAll>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d189      	bne.n	80061a4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006290:	4b0f      	ldr	r3, [pc, #60]	@ (80062d0 <xQueueReceive+0x1cc>)
 8006292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	e780      	b.n	80061a4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062a4:	f000 f8a6 	bl	80063f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062a8:	f000 fc02 	bl	8006ab0 <xTaskResumeAll>
 80062ac:	e77a      	b.n	80061a4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062b0:	f000 f8a0 	bl	80063f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062b4:	f000 fbfc 	bl	8006ab0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ba:	f000 f8ed 	bl	8006498 <prvIsQueueEmpty>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f43f af6f 	beq.w	80061a4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3730      	adds	r7, #48	@ 0x30
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10d      	bne.n	800630e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d14d      	bne.n	8006396 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 ffec 	bl	80072dc <xTaskPriorityDisinherit>
 8006304:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	e043      	b.n	8006396 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d119      	bne.n	8006348 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6858      	ldr	r0, [r3, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631c:	461a      	mov	r2, r3
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	f002 f9b0 	bl	8008684 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d32b      	bcc.n	8006396 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	e026      	b.n	8006396 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68d8      	ldr	r0, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	461a      	mov	r2, r3
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	f002 f996 	bl	8008684 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	425b      	negs	r3, r3
 8006362:	441a      	add	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d207      	bcs.n	8006384 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637c:	425b      	negs	r3, r3
 800637e:	441a      	add	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d105      	bne.n	8006396 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	3b01      	subs	r3, #1
 8006394:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800639e:	697b      	ldr	r3, [r7, #20]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	441a      	add	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d303      	bcc.n	80063dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68d9      	ldr	r1, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e4:	461a      	mov	r2, r3
 80063e6:	6838      	ldr	r0, [r7, #0]
 80063e8:	f002 f94c 	bl	8008684 <memcpy>
	}
}
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063fc:	f001 fd9e 	bl	8007f3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006408:	e011      	b.n	800642e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d012      	beq.n	8006438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3324      	adds	r3, #36	@ 0x24
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fd74 	bl	8006f04 <xTaskRemoveFromEventList>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006422:	f000 fe53 	bl	80070cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	3b01      	subs	r3, #1
 800642a:	b2db      	uxtb	r3, r3
 800642c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800642e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	dce9      	bgt.n	800640a <prvUnlockQueue+0x16>
 8006436:	e000      	b.n	800643a <prvUnlockQueue+0x46>
					break;
 8006438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	22ff      	movs	r2, #255	@ 0xff
 800643e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006442:	f001 fdb1 	bl	8007fa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006446:	f001 fd79 	bl	8007f3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006452:	e011      	b.n	8006478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d012      	beq.n	8006482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3310      	adds	r3, #16
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fd4f 	bl	8006f04 <xTaskRemoveFromEventList>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800646c:	f000 fe2e 	bl	80070cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	3b01      	subs	r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dce9      	bgt.n	8006454 <prvUnlockQueue+0x60>
 8006480:	e000      	b.n	8006484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	22ff      	movs	r2, #255	@ 0xff
 8006488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800648c:	f001 fd8c 	bl	8007fa8 <vPortExitCritical>
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064a0:	f001 fd4c 	bl	8007f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e001      	b.n	80064b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064b6:	f001 fd77 	bl	8007fa8 <vPortExitCritical>

	return xReturn;
 80064ba:	68fb      	ldr	r3, [r7, #12]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064cc:	f001 fd36 	bl	8007f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d8:	429a      	cmp	r2, r3
 80064da:	d102      	bne.n	80064e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064dc:	2301      	movs	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e001      	b.n	80064e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064e6:	f001 fd5f 	bl	8007fa8 <vPortExitCritical>

	return xReturn;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e014      	b.n	800652e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006504:	4a0f      	ldr	r2, [pc, #60]	@ (8006544 <vQueueAddToRegistry+0x50>)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006510:	490c      	ldr	r1, [pc, #48]	@ (8006544 <vQueueAddToRegistry+0x50>)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800651a:	4a0a      	ldr	r2, [pc, #40]	@ (8006544 <vQueueAddToRegistry+0x50>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	4413      	add	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006526:	e006      	b.n	8006536 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b07      	cmp	r3, #7
 8006532:	d9e7      	bls.n	8006504 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	200015b0 	.word	0x200015b0

08006548 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006558:	f001 fcf0 	bl	8007f3c <vPortEnterCritical>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006562:	b25b      	sxtb	r3, r3
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006568:	d103      	bne.n	8006572 <vQueueWaitForMessageRestricted+0x2a>
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006578:	b25b      	sxtb	r3, r3
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800657e:	d103      	bne.n	8006588 <vQueueWaitForMessageRestricted+0x40>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006588:	f001 fd0e 	bl	8007fa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3324      	adds	r3, #36	@ 0x24
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fc83 	bl	8006ea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065a2:	6978      	ldr	r0, [r7, #20]
 80065a4:	f7ff ff26 	bl	80063f4 <prvUnlockQueue>
	}
 80065a8:	bf00      	nop
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08e      	sub	sp, #56	@ 0x38
 80065b4:	af04      	add	r7, sp, #16
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10d      	bne.n	80065e0 <xTaskCreateStatic+0x30>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	b672      	cpsid	i
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	b662      	cpsie	i
 80065d8:	623b      	str	r3, [r7, #32]
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80065e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <xTaskCreateStatic+0x52>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	b672      	cpsid	i
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	b662      	cpsie	i
 80065fa:	61fb      	str	r3, [r7, #28]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006602:	23a8      	movs	r3, #168	@ 0xa8
 8006604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2ba8      	cmp	r3, #168	@ 0xa8
 800660a:	d00d      	beq.n	8006628 <xTaskCreateStatic+0x78>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006610:	b672      	cpsid	i
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	b662      	cpsie	i
 8006620:	61bb      	str	r3, [r7, #24]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01e      	beq.n	800666e <xTaskCreateStatic+0xbe>
 8006630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01b      	beq.n	800666e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	2202      	movs	r2, #2
 8006644:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006648:	2300      	movs	r3, #0
 800664a:	9303      	str	r3, [sp, #12]
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	9302      	str	r3, [sp, #8]
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f851 	bl	8006708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006668:	f000 f8f8 	bl	800685c <prvAddNewTaskToReadyList>
 800666c:	e001      	b.n	8006672 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006672:	697b      	ldr	r3, [r7, #20]
	}
 8006674:	4618      	mov	r0, r3
 8006676:	3728      	adds	r7, #40	@ 0x28
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08c      	sub	sp, #48	@ 0x30
 8006680:	af04      	add	r7, sp, #16
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4618      	mov	r0, r3
 8006692:	f001 fd81 	bl	8008198 <pvPortMalloc>
 8006696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800669e:	20a8      	movs	r0, #168	@ 0xa8
 80066a0:	f001 fd7a 	bl	8008198 <pvPortMalloc>
 80066a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80066b2:	e005      	b.n	80066c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066b4:	6978      	ldr	r0, [r7, #20]
 80066b6:	f001 fe3d 	bl	8008334 <vPortFree>
 80066ba:	e001      	b.n	80066c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	2300      	movs	r3, #0
 80066d2:	9303      	str	r3, [sp, #12]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	9302      	str	r3, [sp, #8]
 80066d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f80f 	bl	8006708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ea:	69f8      	ldr	r0, [r7, #28]
 80066ec:	f000 f8b6 	bl	800685c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066f0:	2301      	movs	r3, #1
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e002      	b.n	80066fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066fc:	69bb      	ldr	r3, [r7, #24]
	}
 80066fe:	4618      	mov	r0, r3
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	461a      	mov	r2, r3
 8006720:	21a5      	movs	r1, #165	@ 0xa5
 8006722:	f001 ff23 	bl	800856c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006730:	440b      	add	r3, r1
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00d      	beq.n	8006766 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	b672      	cpsid	i
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	b662      	cpsie	i
 800675e:	617b      	str	r3, [r7, #20]
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	e7fd      	b.n	8006762 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01f      	beq.n	80067ac <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800676c:	2300      	movs	r3, #0
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	e012      	b.n	8006798 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	7819      	ldrb	r1, [r3, #0]
 800677a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	3334      	adds	r3, #52	@ 0x34
 8006782:	460a      	mov	r2, r1
 8006784:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d006      	beq.n	80067a0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3301      	adds	r3, #1
 8006796:	61fb      	str	r3, [r7, #28]
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	2b0f      	cmp	r3, #15
 800679c:	d9e9      	bls.n	8006772 <prvInitialiseNewTask+0x6a>
 800679e:	e000      	b.n	80067a2 <prvInitialiseNewTask+0x9a>
			{
				break;
 80067a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067aa:	e003      	b.n	80067b4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	2b37      	cmp	r3, #55	@ 0x37
 80067b8:	d901      	bls.n	80067be <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067ba:	2337      	movs	r3, #55	@ 0x37
 80067bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	2200      	movs	r2, #0
 80067ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	3304      	adds	r3, #4
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff f93d 	bl	8005a54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	3318      	adds	r3, #24
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff f938 	bl	8005a54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	2200      	movs	r2, #0
 8006806:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	3354      	adds	r3, #84	@ 0x54
 800680e:	224c      	movs	r2, #76	@ 0x4c
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f001 feaa 	bl	800856c <memset>
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	4a0d      	ldr	r2, [pc, #52]	@ (8006850 <prvInitialiseNewTask+0x148>)
 800681c:	659a      	str	r2, [r3, #88]	@ 0x58
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	4a0c      	ldr	r2, [pc, #48]	@ (8006854 <prvInitialiseNewTask+0x14c>)
 8006822:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	4a0c      	ldr	r2, [pc, #48]	@ (8006858 <prvInitialiseNewTask+0x150>)
 8006828:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	68f9      	ldr	r1, [r7, #12]
 800682e:	69b8      	ldr	r0, [r7, #24]
 8006830:	f001 fa72 	bl	8007d18 <pxPortInitialiseStack>
 8006834:	4602      	mov	r2, r0
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800683a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006846:	bf00      	nop
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	2000583c 	.word	0x2000583c
 8006854:	200058a4 	.word	0x200058a4
 8006858:	2000590c 	.word	0x2000590c

0800685c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006864:	f001 fb6a 	bl	8007f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006868:	4b2d      	ldr	r3, [pc, #180]	@ (8006920 <prvAddNewTaskToReadyList+0xc4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3301      	adds	r3, #1
 800686e:	4a2c      	ldr	r2, [pc, #176]	@ (8006920 <prvAddNewTaskToReadyList+0xc4>)
 8006870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006872:	4b2c      	ldr	r3, [pc, #176]	@ (8006924 <prvAddNewTaskToReadyList+0xc8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800687a:	4a2a      	ldr	r2, [pc, #168]	@ (8006924 <prvAddNewTaskToReadyList+0xc8>)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <prvAddNewTaskToReadyList+0xc4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d110      	bne.n	80068aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006888:	f000 fc44 	bl	8007114 <prvInitialiseTaskLists>
 800688c:	e00d      	b.n	80068aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800688e:	4b26      	ldr	r3, [pc, #152]	@ (8006928 <prvAddNewTaskToReadyList+0xcc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006896:	4b23      	ldr	r3, [pc, #140]	@ (8006924 <prvAddNewTaskToReadyList+0xc8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d802      	bhi.n	80068aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006924 <prvAddNewTaskToReadyList+0xc8>)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068aa:	4b20      	ldr	r3, [pc, #128]	@ (800692c <prvAddNewTaskToReadyList+0xd0>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	4a1e      	ldr	r2, [pc, #120]	@ (800692c <prvAddNewTaskToReadyList+0xd0>)
 80068b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068b4:	4b1d      	ldr	r3, [pc, #116]	@ (800692c <prvAddNewTaskToReadyList+0xd0>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006930 <prvAddNewTaskToReadyList+0xd4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d903      	bls.n	80068d0 <prvAddNewTaskToReadyList+0x74>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	4a18      	ldr	r2, [pc, #96]	@ (8006930 <prvAddNewTaskToReadyList+0xd4>)
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4a15      	ldr	r2, [pc, #84]	@ (8006934 <prvAddNewTaskToReadyList+0xd8>)
 80068de:	441a      	add	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4619      	mov	r1, r3
 80068e6:	4610      	mov	r0, r2
 80068e8:	f7ff f8c1 	bl	8005a6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068ec:	f001 fb5c 	bl	8007fa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <prvAddNewTaskToReadyList+0xcc>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00e      	beq.n	8006916 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006924 <prvAddNewTaskToReadyList+0xc8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006902:	429a      	cmp	r2, r3
 8006904:	d207      	bcs.n	8006916 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006906:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <prvAddNewTaskToReadyList+0xdc>)
 8006908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20001ac4 	.word	0x20001ac4
 8006924:	200015f0 	.word	0x200015f0
 8006928:	20001ad0 	.word	0x20001ad0
 800692c:	20001ae0 	.word	0x20001ae0
 8006930:	20001acc 	.word	0x20001acc
 8006934:	200015f4 	.word	0x200015f4
 8006938:	e000ed04 	.word	0xe000ed04

0800693c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01a      	beq.n	8006984 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800694e:	4b15      	ldr	r3, [pc, #84]	@ (80069a4 <vTaskDelay+0x68>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00d      	beq.n	8006972 <vTaskDelay+0x36>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695a:	b672      	cpsid	i
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	b662      	cpsie	i
 800696a:	60bb      	str	r3, [r7, #8]
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	e7fd      	b.n	800696e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006972:	f000 f88f 	bl	8006a94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006976:	2100      	movs	r1, #0
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fe11 	bl	80075a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800697e:	f000 f897 	bl	8006ab0 <xTaskResumeAll>
 8006982:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d107      	bne.n	800699a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800698a:	4b07      	ldr	r3, [pc, #28]	@ (80069a8 <vTaskDelay+0x6c>)
 800698c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20001aec 	.word	0x20001aec
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	@ 0x28
 80069b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069ba:	463a      	mov	r2, r7
 80069bc:	1d39      	adds	r1, r7, #4
 80069be:	f107 0308 	add.w	r3, r7, #8
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe fff2 	bl	80059ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	9202      	str	r2, [sp, #8]
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	2300      	movs	r3, #0
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	2300      	movs	r3, #0
 80069d8:	460a      	mov	r2, r1
 80069da:	4926      	ldr	r1, [pc, #152]	@ (8006a74 <vTaskStartScheduler+0xc8>)
 80069dc:	4826      	ldr	r0, [pc, #152]	@ (8006a78 <vTaskStartScheduler+0xcc>)
 80069de:	f7ff fde7 	bl	80065b0 <xTaskCreateStatic>
 80069e2:	4603      	mov	r3, r0
 80069e4:	4a25      	ldr	r2, [pc, #148]	@ (8006a7c <vTaskStartScheduler+0xd0>)
 80069e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069e8:	4b24      	ldr	r3, [pc, #144]	@ (8006a7c <vTaskStartScheduler+0xd0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069f0:	2301      	movs	r3, #1
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e001      	b.n	80069fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d102      	bne.n	8006a06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a00:	f000 fe22 	bl	8007648 <xTimerCreateTimerTask>
 8006a04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d11d      	bne.n	8006a48 <vTaskStartScheduler+0x9c>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	b672      	cpsid	i
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	b662      	cpsie	i
 8006a20:	613b      	str	r3, [r7, #16]
}
 8006a22:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a24:	4b16      	ldr	r3, [pc, #88]	@ (8006a80 <vTaskStartScheduler+0xd4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3354      	adds	r3, #84	@ 0x54
 8006a2a:	4a16      	ldr	r2, [pc, #88]	@ (8006a84 <vTaskStartScheduler+0xd8>)
 8006a2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a2e:	4b16      	ldr	r3, [pc, #88]	@ (8006a88 <vTaskStartScheduler+0xdc>)
 8006a30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a36:	4b15      	ldr	r3, [pc, #84]	@ (8006a8c <vTaskStartScheduler+0xe0>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a3c:	4b14      	ldr	r3, [pc, #80]	@ (8006a90 <vTaskStartScheduler+0xe4>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a42:	f001 f9fd 	bl	8007e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a46:	e011      	b.n	8006a6c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a4e:	d10d      	bne.n	8006a6c <vTaskStartScheduler+0xc0>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	b672      	cpsid	i
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	b662      	cpsie	i
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <vTaskStartScheduler+0xbc>
}
 8006a6c:	bf00      	nop
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	08008770 	.word	0x08008770
 8006a78:	080070e5 	.word	0x080070e5
 8006a7c:	20001ae8 	.word	0x20001ae8
 8006a80:	200015f0 	.word	0x200015f0
 8006a84:	20000010 	.word	0x20000010
 8006a88:	20001ae4 	.word	0x20001ae4
 8006a8c:	20001ad0 	.word	0x20001ad0
 8006a90:	20001ac8 	.word	0x20001ac8

08006a94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a98:	4b04      	ldr	r3, [pc, #16]	@ (8006aac <vTaskSuspendAll+0x18>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	4a03      	ldr	r2, [pc, #12]	@ (8006aac <vTaskSuspendAll+0x18>)
 8006aa0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006aa2:	bf00      	nop
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20001aec 	.word	0x20001aec

08006ab0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006abe:	4b43      	ldr	r3, [pc, #268]	@ (8006bcc <xTaskResumeAll+0x11c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10d      	bne.n	8006ae2 <xTaskResumeAll+0x32>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aca:	b672      	cpsid	i
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	b662      	cpsie	i
 8006ada:	603b      	str	r3, [r7, #0]
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	e7fd      	b.n	8006ade <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ae2:	f001 fa2b 	bl	8007f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ae6:	4b39      	ldr	r3, [pc, #228]	@ (8006bcc <xTaskResumeAll+0x11c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	4a37      	ldr	r2, [pc, #220]	@ (8006bcc <xTaskResumeAll+0x11c>)
 8006aee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006af0:	4b36      	ldr	r3, [pc, #216]	@ (8006bcc <xTaskResumeAll+0x11c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d162      	bne.n	8006bbe <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006af8:	4b35      	ldr	r3, [pc, #212]	@ (8006bd0 <xTaskResumeAll+0x120>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d05e      	beq.n	8006bbe <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b00:	e02f      	b.n	8006b62 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b02:	4b34      	ldr	r3, [pc, #208]	@ (8006bd4 <xTaskResumeAll+0x124>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3318      	adds	r3, #24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff f80a 	bl	8005b28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff f805 	bl	8005b28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b22:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd8 <xTaskResumeAll+0x128>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d903      	bls.n	8006b32 <xTaskResumeAll+0x82>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006bd8 <xTaskResumeAll+0x128>)
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4a27      	ldr	r2, [pc, #156]	@ (8006bdc <xTaskResumeAll+0x12c>)
 8006b40:	441a      	add	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3304      	adds	r3, #4
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f7fe ff90 	bl	8005a6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b52:	4b23      	ldr	r3, [pc, #140]	@ (8006be0 <xTaskResumeAll+0x130>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d302      	bcc.n	8006b62 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006b5c:	4b21      	ldr	r3, [pc, #132]	@ (8006be4 <xTaskResumeAll+0x134>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b62:	4b1c      	ldr	r3, [pc, #112]	@ (8006bd4 <xTaskResumeAll+0x124>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1cb      	bne.n	8006b02 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b70:	f000 fb76 	bl	8007260 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b74:	4b1c      	ldr	r3, [pc, #112]	@ (8006be8 <xTaskResumeAll+0x138>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d010      	beq.n	8006ba2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b80:	f000 f846 	bl	8006c10 <xTaskIncrementTick>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006b8a:	4b16      	ldr	r3, [pc, #88]	@ (8006be4 <xTaskResumeAll+0x134>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006b9c:	4b12      	ldr	r3, [pc, #72]	@ (8006be8 <xTaskResumeAll+0x138>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ba2:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <xTaskResumeAll+0x134>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006baa:	2301      	movs	r3, #1
 8006bac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bae:	4b0f      	ldr	r3, [pc, #60]	@ (8006bec <xTaskResumeAll+0x13c>)
 8006bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bbe:	f001 f9f3 	bl	8007fa8 <vPortExitCritical>

	return xAlreadyYielded;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20001aec 	.word	0x20001aec
 8006bd0:	20001ac4 	.word	0x20001ac4
 8006bd4:	20001a84 	.word	0x20001a84
 8006bd8:	20001acc 	.word	0x20001acc
 8006bdc:	200015f4 	.word	0x200015f4
 8006be0:	200015f0 	.word	0x200015f0
 8006be4:	20001ad8 	.word	0x20001ad8
 8006be8:	20001ad4 	.word	0x20001ad4
 8006bec:	e000ed04 	.word	0xe000ed04

08006bf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bf6:	4b05      	ldr	r3, [pc, #20]	@ (8006c0c <xTaskGetTickCount+0x1c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bfc:	687b      	ldr	r3, [r7, #4]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20001ac8 	.word	0x20001ac8

08006c10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c1a:	4b50      	ldr	r3, [pc, #320]	@ (8006d5c <xTaskIncrementTick+0x14c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 808c 	bne.w	8006d3c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c24:	4b4e      	ldr	r3, [pc, #312]	@ (8006d60 <xTaskIncrementTick+0x150>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8006d60 <xTaskIncrementTick+0x150>)
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d123      	bne.n	8006c80 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c38:	4b4a      	ldr	r3, [pc, #296]	@ (8006d64 <xTaskIncrementTick+0x154>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00d      	beq.n	8006c5e <xTaskIncrementTick+0x4e>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c46:	b672      	cpsid	i
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	b662      	cpsie	i
 8006c56:	603b      	str	r3, [r7, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	e7fd      	b.n	8006c5a <xTaskIncrementTick+0x4a>
 8006c5e:	4b41      	ldr	r3, [pc, #260]	@ (8006d64 <xTaskIncrementTick+0x154>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	4b40      	ldr	r3, [pc, #256]	@ (8006d68 <xTaskIncrementTick+0x158>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a3e      	ldr	r2, [pc, #248]	@ (8006d64 <xTaskIncrementTick+0x154>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d68 <xTaskIncrementTick+0x158>)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	4b3e      	ldr	r3, [pc, #248]	@ (8006d6c <xTaskIncrementTick+0x15c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3301      	adds	r3, #1
 8006c78:	4a3c      	ldr	r2, [pc, #240]	@ (8006d6c <xTaskIncrementTick+0x15c>)
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	f000 faf0 	bl	8007260 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c80:	4b3b      	ldr	r3, [pc, #236]	@ (8006d70 <xTaskIncrementTick+0x160>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d349      	bcc.n	8006d1e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c8a:	4b36      	ldr	r3, [pc, #216]	@ (8006d64 <xTaskIncrementTick+0x154>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c94:	4b36      	ldr	r3, [pc, #216]	@ (8006d70 <xTaskIncrementTick+0x160>)
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c9a:	601a      	str	r2, [r3, #0]
					break;
 8006c9c:	e03f      	b.n	8006d1e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c9e:	4b31      	ldr	r3, [pc, #196]	@ (8006d64 <xTaskIncrementTick+0x154>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d203      	bcs.n	8006cbe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8006d70 <xTaskIncrementTick+0x160>)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cbc:	e02f      	b.n	8006d1e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe ff30 	bl	8005b28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	3318      	adds	r3, #24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7fe ff27 	bl	8005b28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	4b25      	ldr	r3, [pc, #148]	@ (8006d74 <xTaskIncrementTick+0x164>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d903      	bls.n	8006cee <xTaskIncrementTick+0xde>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cea:	4a22      	ldr	r2, [pc, #136]	@ (8006d74 <xTaskIncrementTick+0x164>)
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8006d78 <xTaskIncrementTick+0x168>)
 8006cfc:	441a      	add	r2, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	3304      	adds	r3, #4
 8006d02:	4619      	mov	r1, r3
 8006d04:	4610      	mov	r0, r2
 8006d06:	f7fe feb2 	bl	8005a6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8006d7c <xTaskIncrementTick+0x16c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d3b8      	bcc.n	8006c8a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d1c:	e7b5      	b.n	8006c8a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d1e:	4b17      	ldr	r3, [pc, #92]	@ (8006d7c <xTaskIncrementTick+0x16c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d24:	4914      	ldr	r1, [pc, #80]	@ (8006d78 <xTaskIncrementTick+0x168>)
 8006d26:	4613      	mov	r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	440b      	add	r3, r1
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d907      	bls.n	8006d46 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e004      	b.n	8006d46 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d3c:	4b10      	ldr	r3, [pc, #64]	@ (8006d80 <xTaskIncrementTick+0x170>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3301      	adds	r3, #1
 8006d42:	4a0f      	ldr	r2, [pc, #60]	@ (8006d80 <xTaskIncrementTick+0x170>)
 8006d44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d46:	4b0f      	ldr	r3, [pc, #60]	@ (8006d84 <xTaskIncrementTick+0x174>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d52:	697b      	ldr	r3, [r7, #20]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20001aec 	.word	0x20001aec
 8006d60:	20001ac8 	.word	0x20001ac8
 8006d64:	20001a7c 	.word	0x20001a7c
 8006d68:	20001a80 	.word	0x20001a80
 8006d6c:	20001adc 	.word	0x20001adc
 8006d70:	20001ae4 	.word	0x20001ae4
 8006d74:	20001acc 	.word	0x20001acc
 8006d78:	200015f4 	.word	0x200015f4
 8006d7c:	200015f0 	.word	0x200015f0
 8006d80:	20001ad4 	.word	0x20001ad4
 8006d84:	20001ad8 	.word	0x20001ad8

08006d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e40 <vTaskSwitchContext+0xb8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d96:	4b2b      	ldr	r3, [pc, #172]	@ (8006e44 <vTaskSwitchContext+0xbc>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d9c:	e049      	b.n	8006e32 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8006d9e:	4b29      	ldr	r3, [pc, #164]	@ (8006e44 <vTaskSwitchContext+0xbc>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006da4:	4b28      	ldr	r3, [pc, #160]	@ (8006e48 <vTaskSwitchContext+0xc0>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	e013      	b.n	8006dd4 <vTaskSwitchContext+0x4c>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10d      	bne.n	8006dce <vTaskSwitchContext+0x46>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db6:	b672      	cpsid	i
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	b662      	cpsie	i
 8006dc6:	607b      	str	r3, [r7, #4]
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	e7fd      	b.n	8006dca <vTaskSwitchContext+0x42>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	491d      	ldr	r1, [pc, #116]	@ (8006e4c <vTaskSwitchContext+0xc4>)
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0e1      	beq.n	8006dac <vTaskSwitchContext+0x24>
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4a16      	ldr	r2, [pc, #88]	@ (8006e4c <vTaskSwitchContext+0xc4>)
 8006df4:	4413      	add	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	605a      	str	r2, [r3, #4]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d104      	bne.n	8006e18 <vTaskSwitchContext+0x90>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	605a      	str	r2, [r3, #4]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e50 <vTaskSwitchContext+0xc8>)
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	4a09      	ldr	r2, [pc, #36]	@ (8006e48 <vTaskSwitchContext+0xc0>)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e28:	4b09      	ldr	r3, [pc, #36]	@ (8006e50 <vTaskSwitchContext+0xc8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3354      	adds	r3, #84	@ 0x54
 8006e2e:	4a09      	ldr	r2, [pc, #36]	@ (8006e54 <vTaskSwitchContext+0xcc>)
 8006e30:	6013      	str	r3, [r2, #0]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20001aec 	.word	0x20001aec
 8006e44:	20001ad8 	.word	0x20001ad8
 8006e48:	20001acc 	.word	0x20001acc
 8006e4c:	200015f4 	.word	0x200015f4
 8006e50:	200015f0 	.word	0x200015f0
 8006e54:	20000010 	.word	0x20000010

08006e58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10d      	bne.n	8006e84 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	b672      	cpsid	i
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	b662      	cpsie	i
 8006e7c:	60fb      	str	r3, [r7, #12]
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	e7fd      	b.n	8006e80 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e84:	4b07      	ldr	r3, [pc, #28]	@ (8006ea4 <vTaskPlaceOnEventList+0x4c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3318      	adds	r3, #24
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fe fe12 	bl	8005ab6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e92:	2101      	movs	r1, #1
 8006e94:	6838      	ldr	r0, [r7, #0]
 8006e96:	f000 fb83 	bl	80075a0 <prvAddCurrentTaskToDelayedList>
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200015f0 	.word	0x200015f0

08006ea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10d      	bne.n	8006ed6 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	b672      	cpsid	i
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	b662      	cpsie	i
 8006ece:	617b      	str	r3, [r7, #20]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f00 <vTaskPlaceOnEventListRestricted+0x58>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3318      	adds	r3, #24
 8006edc:	4619      	mov	r1, r3
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7fe fdc5 	bl	8005a6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006eea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	68b8      	ldr	r0, [r7, #8]
 8006ef4:	f000 fb54 	bl	80075a0 <prvAddCurrentTaskToDelayedList>
	}
 8006ef8:	bf00      	nop
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	200015f0 	.word	0x200015f0

08006f04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10d      	bne.n	8006f36 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1e:	b672      	cpsid	i
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	b662      	cpsie	i
 8006f2e:	60fb      	str	r3, [r7, #12]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3318      	adds	r3, #24
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fdf4 	bl	8005b28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f40:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb8 <xTaskRemoveFromEventList+0xb4>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d11d      	bne.n	8006f84 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fe fdeb 	bl	8005b28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f56:	4b19      	ldr	r3, [pc, #100]	@ (8006fbc <xTaskRemoveFromEventList+0xb8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d903      	bls.n	8006f66 <xTaskRemoveFromEventList+0x62>
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	4a16      	ldr	r2, [pc, #88]	@ (8006fbc <xTaskRemoveFromEventList+0xb8>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4a13      	ldr	r2, [pc, #76]	@ (8006fc0 <xTaskRemoveFromEventList+0xbc>)
 8006f74:	441a      	add	r2, r3
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f7fe fd76 	bl	8005a6e <vListInsertEnd>
 8006f82:	e005      	b.n	8006f90 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	3318      	adds	r3, #24
 8006f88:	4619      	mov	r1, r3
 8006f8a:	480e      	ldr	r0, [pc, #56]	@ (8006fc4 <xTaskRemoveFromEventList+0xc0>)
 8006f8c:	f7fe fd6f 	bl	8005a6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f94:	4b0c      	ldr	r3, [pc, #48]	@ (8006fc8 <xTaskRemoveFromEventList+0xc4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d905      	bls.n	8006faa <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fcc <xTaskRemoveFromEventList+0xc8>)
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e001      	b.n	8006fae <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fae:	697b      	ldr	r3, [r7, #20]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20001aec 	.word	0x20001aec
 8006fbc:	20001acc 	.word	0x20001acc
 8006fc0:	200015f4 	.word	0x200015f4
 8006fc4:	20001a84 	.word	0x20001a84
 8006fc8:	200015f0 	.word	0x200015f0
 8006fcc:	20001ad8 	.word	0x20001ad8

08006fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fd8:	4b06      	ldr	r3, [pc, #24]	@ (8006ff4 <vTaskInternalSetTimeOutState+0x24>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fe0:	4b05      	ldr	r3, [pc, #20]	@ (8006ff8 <vTaskInternalSetTimeOutState+0x28>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	605a      	str	r2, [r3, #4]
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	20001adc 	.word	0x20001adc
 8006ff8:	20001ac8 	.word	0x20001ac8

08006ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10d      	bne.n	8007028 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	b672      	cpsid	i
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	b662      	cpsie	i
 8007020:	613b      	str	r3, [r7, #16]
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	e7fd      	b.n	8007024 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10d      	bne.n	800704a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	b672      	cpsid	i
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	b662      	cpsie	i
 8007042:	60fb      	str	r3, [r7, #12]
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800704a:	f000 ff77 	bl	8007f3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800704e:	4b1d      	ldr	r3, [pc, #116]	@ (80070c4 <xTaskCheckForTimeOut+0xc8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007066:	d102      	bne.n	800706e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	e023      	b.n	80070b6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	4b15      	ldr	r3, [pc, #84]	@ (80070c8 <xTaskCheckForTimeOut+0xcc>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d007      	beq.n	800708a <xTaskCheckForTimeOut+0x8e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	d302      	bcc.n	800708a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	e015      	b.n	80070b6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	429a      	cmp	r2, r3
 8007092:	d20b      	bcs.n	80070ac <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	1ad2      	subs	r2, r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff ff95 	bl	8006fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	61fb      	str	r3, [r7, #28]
 80070aa:	e004      	b.n	80070b6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070b2:	2301      	movs	r3, #1
 80070b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070b6:	f000 ff77 	bl	8007fa8 <vPortExitCritical>

	return xReturn;
 80070ba:	69fb      	ldr	r3, [r7, #28]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3720      	adds	r7, #32
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20001ac8 	.word	0x20001ac8
 80070c8:	20001adc 	.word	0x20001adc

080070cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070d0:	4b03      	ldr	r3, [pc, #12]	@ (80070e0 <vTaskMissedYield+0x14>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
}
 80070d6:	bf00      	nop
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	20001ad8 	.word	0x20001ad8

080070e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070ec:	f000 f852 	bl	8007194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <prvIdleTask+0x28>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d9f9      	bls.n	80070ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <prvIdleTask+0x2c>)
 80070fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007108:	e7f0      	b.n	80070ec <prvIdleTask+0x8>
 800710a:	bf00      	nop
 800710c:	200015f4 	.word	0x200015f4
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800711a:	2300      	movs	r3, #0
 800711c:	607b      	str	r3, [r7, #4]
 800711e:	e00c      	b.n	800713a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4a12      	ldr	r2, [pc, #72]	@ (8007174 <prvInitialiseTaskLists+0x60>)
 800712c:	4413      	add	r3, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fc70 	bl	8005a14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3301      	adds	r3, #1
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b37      	cmp	r3, #55	@ 0x37
 800713e:	d9ef      	bls.n	8007120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007140:	480d      	ldr	r0, [pc, #52]	@ (8007178 <prvInitialiseTaskLists+0x64>)
 8007142:	f7fe fc67 	bl	8005a14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007146:	480d      	ldr	r0, [pc, #52]	@ (800717c <prvInitialiseTaskLists+0x68>)
 8007148:	f7fe fc64 	bl	8005a14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800714c:	480c      	ldr	r0, [pc, #48]	@ (8007180 <prvInitialiseTaskLists+0x6c>)
 800714e:	f7fe fc61 	bl	8005a14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007152:	480c      	ldr	r0, [pc, #48]	@ (8007184 <prvInitialiseTaskLists+0x70>)
 8007154:	f7fe fc5e 	bl	8005a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007158:	480b      	ldr	r0, [pc, #44]	@ (8007188 <prvInitialiseTaskLists+0x74>)
 800715a:	f7fe fc5b 	bl	8005a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800715e:	4b0b      	ldr	r3, [pc, #44]	@ (800718c <prvInitialiseTaskLists+0x78>)
 8007160:	4a05      	ldr	r2, [pc, #20]	@ (8007178 <prvInitialiseTaskLists+0x64>)
 8007162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007164:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <prvInitialiseTaskLists+0x7c>)
 8007166:	4a05      	ldr	r2, [pc, #20]	@ (800717c <prvInitialiseTaskLists+0x68>)
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	200015f4 	.word	0x200015f4
 8007178:	20001a54 	.word	0x20001a54
 800717c:	20001a68 	.word	0x20001a68
 8007180:	20001a84 	.word	0x20001a84
 8007184:	20001a98 	.word	0x20001a98
 8007188:	20001ab0 	.word	0x20001ab0
 800718c:	20001a7c 	.word	0x20001a7c
 8007190:	20001a80 	.word	0x20001a80

08007194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800719a:	e019      	b.n	80071d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800719c:	f000 fece 	bl	8007f3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a0:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <prvCheckTasksWaitingTermination+0x50>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe fcbb 	bl	8005b28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071b2:	4b0d      	ldr	r3, [pc, #52]	@ (80071e8 <prvCheckTasksWaitingTermination+0x54>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	4a0b      	ldr	r2, [pc, #44]	@ (80071e8 <prvCheckTasksWaitingTermination+0x54>)
 80071ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071bc:	4b0b      	ldr	r3, [pc, #44]	@ (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	4a0a      	ldr	r2, [pc, #40]	@ (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071c6:	f000 feef 	bl	8007fa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f810 	bl	80071f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071d0:	4b06      	ldr	r3, [pc, #24]	@ (80071ec <prvCheckTasksWaitingTermination+0x58>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e1      	bne.n	800719c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20001a98 	.word	0x20001a98
 80071e8:	20001ac4 	.word	0x20001ac4
 80071ec:	20001aac 	.word	0x20001aac

080071f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3354      	adds	r3, #84	@ 0x54
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 f9bd 	bl	800857c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007208:	2b00      	cmp	r3, #0
 800720a:	d108      	bne.n	800721e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007210:	4618      	mov	r0, r3
 8007212:	f001 f88f 	bl	8008334 <vPortFree>
				vPortFree( pxTCB );
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 f88c 	bl	8008334 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800721c:	e01b      	b.n	8007256 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007224:	2b01      	cmp	r3, #1
 8007226:	d103      	bne.n	8007230 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f883 	bl	8008334 <vPortFree>
	}
 800722e:	e012      	b.n	8007256 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007236:	2b02      	cmp	r3, #2
 8007238:	d00d      	beq.n	8007256 <prvDeleteTCB+0x66>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723e:	b672      	cpsid	i
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	b662      	cpsie	i
 800724e:	60fb      	str	r3, [r7, #12]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <prvDeleteTCB+0x62>
	}
 8007256:	bf00      	nop
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007266:	4b0c      	ldr	r3, [pc, #48]	@ (8007298 <prvResetNextTaskUnblockTime+0x38>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007270:	4b0a      	ldr	r3, [pc, #40]	@ (800729c <prvResetNextTaskUnblockTime+0x3c>)
 8007272:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007276:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007278:	e008      	b.n	800728c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727a:	4b07      	ldr	r3, [pc, #28]	@ (8007298 <prvResetNextTaskUnblockTime+0x38>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	4a04      	ldr	r2, [pc, #16]	@ (800729c <prvResetNextTaskUnblockTime+0x3c>)
 800728a:	6013      	str	r3, [r2, #0]
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	20001a7c 	.word	0x20001a7c
 800729c:	20001ae4 	.word	0x20001ae4

080072a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072a6:	4b0b      	ldr	r3, [pc, #44]	@ (80072d4 <xTaskGetSchedulerState+0x34>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072ae:	2301      	movs	r3, #1
 80072b0:	607b      	str	r3, [r7, #4]
 80072b2:	e008      	b.n	80072c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072b4:	4b08      	ldr	r3, [pc, #32]	@ (80072d8 <xTaskGetSchedulerState+0x38>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d102      	bne.n	80072c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072bc:	2302      	movs	r3, #2
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	e001      	b.n	80072c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072c2:	2300      	movs	r3, #0
 80072c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072c6:	687b      	ldr	r3, [r7, #4]
	}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	20001ad0 	.word	0x20001ad0
 80072d8:	20001aec 	.word	0x20001aec

080072dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d05c      	beq.n	80073ac <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072f2:	4b31      	ldr	r3, [pc, #196]	@ (80073b8 <xTaskPriorityDisinherit+0xdc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d00d      	beq.n	8007318 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007300:	b672      	cpsid	i
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	b662      	cpsie	i
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10d      	bne.n	800733c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	b672      	cpsid	i
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	b662      	cpsie	i
 8007334:	60bb      	str	r3, [r7, #8]
}
 8007336:	bf00      	nop
 8007338:	bf00      	nop
 800733a:	e7fd      	b.n	8007338 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007340:	1e5a      	subs	r2, r3, #1
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800734e:	429a      	cmp	r2, r3
 8007350:	d02c      	beq.n	80073ac <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007356:	2b00      	cmp	r3, #0
 8007358:	d128      	bne.n	80073ac <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	3304      	adds	r3, #4
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fbe2 	bl	8005b28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007370:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737c:	4b0f      	ldr	r3, [pc, #60]	@ (80073bc <xTaskPriorityDisinherit+0xe0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d903      	bls.n	800738c <xTaskPriorityDisinherit+0xb0>
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	4a0c      	ldr	r2, [pc, #48]	@ (80073bc <xTaskPriorityDisinherit+0xe0>)
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4a09      	ldr	r2, [pc, #36]	@ (80073c0 <xTaskPriorityDisinherit+0xe4>)
 800739a:	441a      	add	r2, r3
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	3304      	adds	r3, #4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7fe fb63 	bl	8005a6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073ac:	697b      	ldr	r3, [r7, #20]
	}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	200015f0 	.word	0x200015f0
 80073bc:	20001acc 	.word	0x20001acc
 80073c0:	200015f4 	.word	0x200015f4

080073c4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08e      	sub	sp, #56	@ 0x38
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80073d4:	2301      	movs	r3, #1
 80073d6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10d      	bne.n	80073fa <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e2:	b672      	cpsid	i
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	b662      	cpsie	i
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073fa:	f000 fe87 	bl	800810c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007402:	f3ef 8211 	mrs	r2, BASEPRI
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	b672      	cpsid	i
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	b662      	cpsie	i
 800741a:	623a      	str	r2, [r7, #32]
 800741c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800741e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007420:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	2202      	movs	r2, #2
 8007440:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	2b04      	cmp	r3, #4
 8007448:	d82e      	bhi.n	80074a8 <xTaskGenericNotifyFromISR+0xe4>
 800744a:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <xTaskGenericNotifyFromISR+0x8c>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	080074d1 	.word	0x080074d1
 8007454:	08007465 	.word	0x08007465
 8007458:	08007477 	.word	0x08007477
 800745c:	08007487 	.word	0x08007487
 8007460:	08007491 	.word	0x08007491
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	431a      	orrs	r2, r3
 800746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007470:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007474:	e02f      	b.n	80074d6 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007480:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007484:	e027      	b.n	80074d6 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800748e:	e022      	b.n	80074d6 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007490:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007494:	2b02      	cmp	r3, #2
 8007496:	d004      	beq.n	80074a2 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80074a0:	e019      	b.n	80074d6 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80074a6:	e016      	b.n	80074d6 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80074a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074b2:	d00f      	beq.n	80074d4 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b8:	b672      	cpsid	i
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	b662      	cpsie	i
 80074c8:	61bb      	str	r3, [r7, #24]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <xTaskGenericNotifyFromISR+0x108>
					break;
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <xTaskGenericNotifyFromISR+0x112>
					break;
 80074d4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80074d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d149      	bne.n	8007572 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00d      	beq.n	8007502 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ea:	b672      	cpsid	i
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	b662      	cpsie	i
 80074fa:	617b      	str	r3, [r7, #20]
}
 80074fc:	bf00      	nop
 80074fe:	bf00      	nop
 8007500:	e7fd      	b.n	80074fe <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007502:	4b21      	ldr	r3, [pc, #132]	@ (8007588 <xTaskGenericNotifyFromISR+0x1c4>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d11d      	bne.n	8007546 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	3304      	adds	r3, #4
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fb0a 	bl	8005b28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007518:	4b1c      	ldr	r3, [pc, #112]	@ (800758c <xTaskGenericNotifyFromISR+0x1c8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d903      	bls.n	8007528 <xTaskGenericNotifyFromISR+0x164>
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	4a19      	ldr	r2, [pc, #100]	@ (800758c <xTaskGenericNotifyFromISR+0x1c8>)
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4a16      	ldr	r2, [pc, #88]	@ (8007590 <xTaskGenericNotifyFromISR+0x1cc>)
 8007536:	441a      	add	r2, r3
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	3304      	adds	r3, #4
 800753c:	4619      	mov	r1, r3
 800753e:	4610      	mov	r0, r2
 8007540:	f7fe fa95 	bl	8005a6e <vListInsertEnd>
 8007544:	e005      	b.n	8007552 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	3318      	adds	r3, #24
 800754a:	4619      	mov	r1, r3
 800754c:	4811      	ldr	r0, [pc, #68]	@ (8007594 <xTaskGenericNotifyFromISR+0x1d0>)
 800754e:	f7fe fa8e 	bl	8005a6e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007556:	4b10      	ldr	r3, [pc, #64]	@ (8007598 <xTaskGenericNotifyFromISR+0x1d4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755c:	429a      	cmp	r2, r3
 800755e:	d908      	bls.n	8007572 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007568:	2201      	movs	r2, #1
 800756a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800756c:	4b0b      	ldr	r3, [pc, #44]	@ (800759c <xTaskGenericNotifyFromISR+0x1d8>)
 800756e:	2201      	movs	r2, #1
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007574:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f383 8811 	msr	BASEPRI, r3
}
 800757c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800757e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007580:	4618      	mov	r0, r3
 8007582:	3738      	adds	r7, #56	@ 0x38
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20001aec 	.word	0x20001aec
 800758c:	20001acc 	.word	0x20001acc
 8007590:	200015f4 	.word	0x200015f4
 8007594:	20001a84 	.word	0x20001a84
 8007598:	200015f0 	.word	0x200015f0
 800759c:	20001ad8 	.word	0x20001ad8

080075a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075aa:	4b21      	ldr	r3, [pc, #132]	@ (8007630 <prvAddCurrentTaskToDelayedList+0x90>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b0:	4b20      	ldr	r3, [pc, #128]	@ (8007634 <prvAddCurrentTaskToDelayedList+0x94>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fab6 	bl	8005b28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075c2:	d10a      	bne.n	80075da <prvAddCurrentTaskToDelayedList+0x3a>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007634 <prvAddCurrentTaskToDelayedList+0x94>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	4819      	ldr	r0, [pc, #100]	@ (8007638 <prvAddCurrentTaskToDelayedList+0x98>)
 80075d4:	f7fe fa4b 	bl	8005a6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075d8:	e026      	b.n	8007628 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4413      	add	r3, r2
 80075e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075e2:	4b14      	ldr	r3, [pc, #80]	@ (8007634 <prvAddCurrentTaskToDelayedList+0x94>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d209      	bcs.n	8007606 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f2:	4b12      	ldr	r3, [pc, #72]	@ (800763c <prvAddCurrentTaskToDelayedList+0x9c>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007634 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe fa59 	bl	8005ab6 <vListInsert>
}
 8007604:	e010      	b.n	8007628 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007606:	4b0e      	ldr	r3, [pc, #56]	@ (8007640 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4b0a      	ldr	r3, [pc, #40]	@ (8007634 <prvAddCurrentTaskToDelayedList+0x94>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3304      	adds	r3, #4
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f7fe fa4f 	bl	8005ab6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007618:	4b0a      	ldr	r3, [pc, #40]	@ (8007644 <prvAddCurrentTaskToDelayedList+0xa4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	429a      	cmp	r2, r3
 8007620:	d202      	bcs.n	8007628 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007622:	4a08      	ldr	r2, [pc, #32]	@ (8007644 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	6013      	str	r3, [r2, #0]
}
 8007628:	bf00      	nop
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20001ac8 	.word	0x20001ac8
 8007634:	200015f0 	.word	0x200015f0
 8007638:	20001ab0 	.word	0x20001ab0
 800763c:	20001a80 	.word	0x20001a80
 8007640:	20001a7c 	.word	0x20001a7c
 8007644:	20001ae4 	.word	0x20001ae4

08007648 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08a      	sub	sp, #40	@ 0x28
 800764c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007652:	f000 fb21 	bl	8007c98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007656:	4b1e      	ldr	r3, [pc, #120]	@ (80076d0 <xTimerCreateTimerTask+0x88>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d021      	beq.n	80076a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007666:	1d3a      	adds	r2, r7, #4
 8007668:	f107 0108 	add.w	r1, r7, #8
 800766c:	f107 030c 	add.w	r3, r7, #12
 8007670:	4618      	mov	r0, r3
 8007672:	f7fe f9b5 	bl	80059e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	9202      	str	r2, [sp, #8]
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	2302      	movs	r3, #2
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	2300      	movs	r3, #0
 8007686:	460a      	mov	r2, r1
 8007688:	4912      	ldr	r1, [pc, #72]	@ (80076d4 <xTimerCreateTimerTask+0x8c>)
 800768a:	4813      	ldr	r0, [pc, #76]	@ (80076d8 <xTimerCreateTimerTask+0x90>)
 800768c:	f7fe ff90 	bl	80065b0 <xTaskCreateStatic>
 8007690:	4603      	mov	r3, r0
 8007692:	4a12      	ldr	r2, [pc, #72]	@ (80076dc <xTimerCreateTimerTask+0x94>)
 8007694:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007696:	4b11      	ldr	r3, [pc, #68]	@ (80076dc <xTimerCreateTimerTask+0x94>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800769e:	2301      	movs	r3, #1
 80076a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10d      	bne.n	80076c4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	b672      	cpsid	i
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	b662      	cpsie	i
 80076bc:	613b      	str	r3, [r7, #16]
}
 80076be:	bf00      	nop
 80076c0:	bf00      	nop
 80076c2:	e7fd      	b.n	80076c0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80076c4:	697b      	ldr	r3, [r7, #20]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3718      	adds	r7, #24
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20001b20 	.word	0x20001b20
 80076d4:	08008778 	.word	0x08008778
 80076d8:	08007821 	.word	0x08007821
 80076dc:	20001b24 	.word	0x20001b24

080076e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	@ 0x28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10d      	bne.n	8007714 <xTimerGenericCommand+0x34>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	b672      	cpsid	i
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	b662      	cpsie	i
 800770c:	623b      	str	r3, [r7, #32]
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	e7fd      	b.n	8007710 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007714:	4b19      	ldr	r3, [pc, #100]	@ (800777c <xTimerGenericCommand+0x9c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d02a      	beq.n	8007772 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b05      	cmp	r3, #5
 800772c:	dc18      	bgt.n	8007760 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800772e:	f7ff fdb7 	bl	80072a0 <xTaskGetSchedulerState>
 8007732:	4603      	mov	r3, r0
 8007734:	2b02      	cmp	r3, #2
 8007736:	d109      	bne.n	800774c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007738:	4b10      	ldr	r3, [pc, #64]	@ (800777c <xTimerGenericCommand+0x9c>)
 800773a:	6818      	ldr	r0, [r3, #0]
 800773c:	f107 0110 	add.w	r1, r7, #16
 8007740:	2300      	movs	r3, #0
 8007742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007744:	f7fe fb30 	bl	8005da8 <xQueueGenericSend>
 8007748:	6278      	str	r0, [r7, #36]	@ 0x24
 800774a:	e012      	b.n	8007772 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800774c:	4b0b      	ldr	r3, [pc, #44]	@ (800777c <xTimerGenericCommand+0x9c>)
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	f107 0110 	add.w	r1, r7, #16
 8007754:	2300      	movs	r3, #0
 8007756:	2200      	movs	r2, #0
 8007758:	f7fe fb26 	bl	8005da8 <xQueueGenericSend>
 800775c:	6278      	str	r0, [r7, #36]	@ 0x24
 800775e:	e008      	b.n	8007772 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007760:	4b06      	ldr	r3, [pc, #24]	@ (800777c <xTimerGenericCommand+0x9c>)
 8007762:	6818      	ldr	r0, [r3, #0]
 8007764:	f107 0110 	add.w	r1, r7, #16
 8007768:	2300      	movs	r3, #0
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	f7fe fc26 	bl	8005fbc <xQueueGenericSendFromISR>
 8007770:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007774:	4618      	mov	r0, r3
 8007776:	3728      	adds	r7, #40	@ 0x28
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20001b20 	.word	0x20001b20

08007780 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af02      	add	r7, sp, #8
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778a:	4b24      	ldr	r3, [pc, #144]	@ (800781c <prvProcessExpiredTimer+0x9c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	3304      	adds	r3, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe f9c5 	bl	8005b28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d025      	beq.n	80077f8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	699a      	ldr	r2, [r3, #24]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	18d1      	adds	r1, r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	6978      	ldr	r0, [r7, #20]
 80077ba:	f000 f8d7 	bl	800796c <prvInsertTimerInActiveList>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d022      	beq.n	800780a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077c4:	2300      	movs	r3, #0
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	2300      	movs	r3, #0
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	2100      	movs	r1, #0
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f7ff ff86 	bl	80076e0 <xTimerGenericCommand>
 80077d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d116      	bne.n	800780a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e0:	b672      	cpsid	i
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	b662      	cpsie	i
 80077f0:	60fb      	str	r3, [r7, #12]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077fe:	f023 0301 	bic.w	r3, r3, #1
 8007802:	b2da      	uxtb	r2, r3
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	6978      	ldr	r0, [r7, #20]
 8007810:	4798      	blx	r3
}
 8007812:	bf00      	nop
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20001b18 	.word	0x20001b18

08007820 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007828:	f107 0308 	add.w	r3, r7, #8
 800782c:	4618      	mov	r0, r3
 800782e:	f000 f859 	bl	80078e4 <prvGetNextExpireTime>
 8007832:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4619      	mov	r1, r3
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 f805 	bl	8007848 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800783e:	f000 f8d7 	bl	80079f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007842:	bf00      	nop
 8007844:	e7f0      	b.n	8007828 <prvTimerTask+0x8>
	...

08007848 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007852:	f7ff f91f 	bl	8006a94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007856:	f107 0308 	add.w	r3, r7, #8
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f866 	bl	800792c <prvSampleTimeNow>
 8007860:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d130      	bne.n	80078ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <prvProcessTimerOrBlockTask+0x3c>
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	429a      	cmp	r2, r3
 8007874:	d806      	bhi.n	8007884 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007876:	f7ff f91b 	bl	8006ab0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800787a:	68f9      	ldr	r1, [r7, #12]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff ff7f 	bl	8007780 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007882:	e024      	b.n	80078ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d008      	beq.n	800789c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800788a:	4b13      	ldr	r3, [pc, #76]	@ (80078d8 <prvProcessTimerOrBlockTask+0x90>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <prvProcessTimerOrBlockTask+0x50>
 8007894:	2301      	movs	r3, #1
 8007896:	e000      	b.n	800789a <prvProcessTimerOrBlockTask+0x52>
 8007898:	2300      	movs	r3, #0
 800789a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800789c:	4b0f      	ldr	r3, [pc, #60]	@ (80078dc <prvProcessTimerOrBlockTask+0x94>)
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	f7fe fe4d 	bl	8006548 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078ae:	f7ff f8ff 	bl	8006ab0 <xTaskResumeAll>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10a      	bne.n	80078ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078b8:	4b09      	ldr	r3, [pc, #36]	@ (80078e0 <prvProcessTimerOrBlockTask+0x98>)
 80078ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	f3bf 8f6f 	isb	sy
}
 80078c8:	e001      	b.n	80078ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078ca:	f7ff f8f1 	bl	8006ab0 <xTaskResumeAll>
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20001b1c 	.word	0x20001b1c
 80078dc:	20001b20 	.word	0x20001b20
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007928 <prvGetNextExpireTime+0x44>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <prvGetNextExpireTime+0x16>
 80078f6:	2201      	movs	r2, #1
 80078f8:	e000      	b.n	80078fc <prvGetNextExpireTime+0x18>
 80078fa:	2200      	movs	r2, #0
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d105      	bne.n	8007914 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007908:	4b07      	ldr	r3, [pc, #28]	@ (8007928 <prvGetNextExpireTime+0x44>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	e001      	b.n	8007918 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007918:	68fb      	ldr	r3, [r7, #12]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20001b18 	.word	0x20001b18

0800792c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007934:	f7ff f95c 	bl	8006bf0 <xTaskGetTickCount>
 8007938:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800793a:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <prvSampleTimeNow+0x3c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	429a      	cmp	r2, r3
 8007942:	d205      	bcs.n	8007950 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007944:	f000 f940 	bl	8007bc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	e002      	b.n	8007956 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007956:	4a04      	ldr	r2, [pc, #16]	@ (8007968 <prvSampleTimeNow+0x3c>)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800795c:	68fb      	ldr	r3, [r7, #12]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20001b28 	.word	0x20001b28

0800796c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	429a      	cmp	r2, r3
 8007990:	d812      	bhi.n	80079b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	429a      	cmp	r2, r3
 800799e:	d302      	bcc.n	80079a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079a0:	2301      	movs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e01b      	b.n	80079de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079a6:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <prvInsertTimerInActiveList+0x7c>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fe f880 	bl	8005ab6 <vListInsert>
 80079b6:	e012      	b.n	80079de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d206      	bcs.n	80079ce <prvInsertTimerInActiveList+0x62>
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d302      	bcc.n	80079ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	617b      	str	r3, [r7, #20]
 80079cc:	e007      	b.n	80079de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ce:	4b07      	ldr	r3, [pc, #28]	@ (80079ec <prvInsertTimerInActiveList+0x80>)
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4619      	mov	r1, r3
 80079d8:	4610      	mov	r0, r2
 80079da:	f7fe f86c 	bl	8005ab6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079de:	697b      	ldr	r3, [r7, #20]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20001b1c 	.word	0x20001b1c
 80079ec:	20001b18 	.word	0x20001b18

080079f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08e      	sub	sp, #56	@ 0x38
 80079f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079f6:	e0d4      	b.n	8007ba2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	da1b      	bge.n	8007a36 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079fe:	1d3b      	adds	r3, r7, #4
 8007a00:	3304      	adds	r3, #4
 8007a02:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10d      	bne.n	8007a26 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0e:	b672      	cpsid	i
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	b662      	cpsie	i
 8007a1e:	61fb      	str	r3, [r7, #28]
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a2c:	6850      	ldr	r0, [r2, #4]
 8007a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a30:	6892      	ldr	r2, [r2, #8]
 8007a32:	4611      	mov	r1, r2
 8007a34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f2c0 80b2 	blt.w	8007ba2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d004      	beq.n	8007a54 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe f86a 	bl	8005b28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a54:	463b      	mov	r3, r7
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff ff68 	bl	800792c <prvSampleTimeNow>
 8007a5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b09      	cmp	r3, #9
 8007a62:	f200 809b 	bhi.w	8007b9c <prvProcessReceivedCommands+0x1ac>
 8007a66:	a201      	add	r2, pc, #4	@ (adr r2, 8007a6c <prvProcessReceivedCommands+0x7c>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a95 	.word	0x08007a95
 8007a70:	08007a95 	.word	0x08007a95
 8007a74:	08007a95 	.word	0x08007a95
 8007a78:	08007b0f 	.word	0x08007b0f
 8007a7c:	08007b23 	.word	0x08007b23
 8007a80:	08007b73 	.word	0x08007b73
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007a95 	.word	0x08007a95
 8007a8c:	08007b0f 	.word	0x08007b0f
 8007a90:	08007b23 	.word	0x08007b23
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	18d1      	adds	r1, r2, r3
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ab4:	f7ff ff5a 	bl	800796c <prvInsertTimerInActiveList>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d070      	beq.n	8007ba0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ac4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d065      	beq.n	8007ba0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	441a      	add	r2, r3
 8007adc:	2300      	movs	r3, #0
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae6:	f7ff fdfb 	bl	80076e0 <xTimerGenericCommand>
 8007aea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d156      	bne.n	8007ba0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af6:	b672      	cpsid	i
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	b662      	cpsie	i
 8007b06:	61bb      	str	r3, [r7, #24]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b14:	f023 0301 	bic.w	r3, r3, #1
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b20:	e03f      	b.n	8007ba2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	b2da      	uxtb	r2, r3
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10d      	bne.n	8007b5e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b46:	b672      	cpsid	i
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	b662      	cpsie	i
 8007b56:	617b      	str	r3, [r7, #20]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	18d1      	adds	r1, r2, r3
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b6c:	f7ff fefe 	bl	800796c <prvInsertTimerInActiveList>
					break;
 8007b70:	e017      	b.n	8007ba2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d103      	bne.n	8007b88 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007b80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b82:	f000 fbd7 	bl	8008334 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b86:	e00c      	b.n	8007ba2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b9a:	e002      	b.n	8007ba2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007b9c:	bf00      	nop
 8007b9e:	e000      	b.n	8007ba2 <prvProcessReceivedCommands+0x1b2>
					break;
 8007ba0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ba2:	4b08      	ldr	r3, [pc, #32]	@ (8007bc4 <prvProcessReceivedCommands+0x1d4>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	1d39      	adds	r1, r7, #4
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe faaa 	bl	8006104 <xQueueReceive>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f47f af20 	bne.w	80079f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	3730      	adds	r7, #48	@ 0x30
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20001b20 	.word	0x20001b20

08007bc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bce:	e04b      	b.n	8007c68 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8007c90 <prvSwitchTimerLists+0xc8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bda:	4b2d      	ldr	r3, [pc, #180]	@ (8007c90 <prvSwitchTimerLists+0xc8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fd ff9d 	bl	8005b28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d031      	beq.n	8007c68 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d90e      	bls.n	8007c34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c22:	4b1b      	ldr	r3, [pc, #108]	@ (8007c90 <prvSwitchTimerLists+0xc8>)
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7fd ff42 	bl	8005ab6 <vListInsert>
 8007c32:	e019      	b.n	8007c68 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c34:	2300      	movs	r3, #0
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff fd4e 	bl	80076e0 <xTimerGenericCommand>
 8007c44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10d      	bne.n	8007c68 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	b672      	cpsid	i
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	b662      	cpsie	i
 8007c60:	603b      	str	r3, [r7, #0]
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c68:	4b09      	ldr	r3, [pc, #36]	@ (8007c90 <prvSwitchTimerLists+0xc8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1ae      	bne.n	8007bd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c72:	4b07      	ldr	r3, [pc, #28]	@ (8007c90 <prvSwitchTimerLists+0xc8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c78:	4b06      	ldr	r3, [pc, #24]	@ (8007c94 <prvSwitchTimerLists+0xcc>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a04      	ldr	r2, [pc, #16]	@ (8007c90 <prvSwitchTimerLists+0xc8>)
 8007c7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c80:	4a04      	ldr	r2, [pc, #16]	@ (8007c94 <prvSwitchTimerLists+0xcc>)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	bf00      	nop
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20001b18 	.word	0x20001b18
 8007c94:	20001b1c 	.word	0x20001b1c

08007c98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c9e:	f000 f94d 	bl	8007f3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ca2:	4b15      	ldr	r3, [pc, #84]	@ (8007cf8 <prvCheckForValidListAndQueue+0x60>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d120      	bne.n	8007cec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007caa:	4814      	ldr	r0, [pc, #80]	@ (8007cfc <prvCheckForValidListAndQueue+0x64>)
 8007cac:	f7fd feb2 	bl	8005a14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cb0:	4813      	ldr	r0, [pc, #76]	@ (8007d00 <prvCheckForValidListAndQueue+0x68>)
 8007cb2:	f7fd feaf 	bl	8005a14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cb6:	4b13      	ldr	r3, [pc, #76]	@ (8007d04 <prvCheckForValidListAndQueue+0x6c>)
 8007cb8:	4a10      	ldr	r2, [pc, #64]	@ (8007cfc <prvCheckForValidListAndQueue+0x64>)
 8007cba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cbc:	4b12      	ldr	r3, [pc, #72]	@ (8007d08 <prvCheckForValidListAndQueue+0x70>)
 8007cbe:	4a10      	ldr	r2, [pc, #64]	@ (8007d00 <prvCheckForValidListAndQueue+0x68>)
 8007cc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	4b11      	ldr	r3, [pc, #68]	@ (8007d0c <prvCheckForValidListAndQueue+0x74>)
 8007cc8:	4a11      	ldr	r2, [pc, #68]	@ (8007d10 <prvCheckForValidListAndQueue+0x78>)
 8007cca:	2110      	movs	r1, #16
 8007ccc:	200a      	movs	r0, #10
 8007cce:	f7fd ffc1 	bl	8005c54 <xQueueGenericCreateStatic>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	4a08      	ldr	r2, [pc, #32]	@ (8007cf8 <prvCheckForValidListAndQueue+0x60>)
 8007cd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cd8:	4b07      	ldr	r3, [pc, #28]	@ (8007cf8 <prvCheckForValidListAndQueue+0x60>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ce0:	4b05      	ldr	r3, [pc, #20]	@ (8007cf8 <prvCheckForValidListAndQueue+0x60>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	490b      	ldr	r1, [pc, #44]	@ (8007d14 <prvCheckForValidListAndQueue+0x7c>)
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fc04 	bl	80064f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cec:	f000 f95c 	bl	8007fa8 <vPortExitCritical>
}
 8007cf0:	bf00      	nop
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20001b20 	.word	0x20001b20
 8007cfc:	20001af0 	.word	0x20001af0
 8007d00:	20001b04 	.word	0x20001b04
 8007d04:	20001b18 	.word	0x20001b18
 8007d08:	20001b1c 	.word	0x20001b1c
 8007d0c:	20001bcc 	.word	0x20001bcc
 8007d10:	20001b2c 	.word	0x20001b2c
 8007d14:	08008780 	.word	0x08008780

08007d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3b04      	subs	r3, #4
 8007d28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3b04      	subs	r3, #4
 8007d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f023 0201 	bic.w	r2, r3, #1
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3b04      	subs	r3, #4
 8007d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d48:	4a0c      	ldr	r2, [pc, #48]	@ (8007d7c <pxPortInitialiseStack+0x64>)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3b14      	subs	r3, #20
 8007d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3b04      	subs	r3, #4
 8007d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f06f 0202 	mvn.w	r2, #2
 8007d66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3b20      	subs	r3, #32
 8007d6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	08007d81 	.word	0x08007d81

08007d80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d8a:	4b15      	ldr	r3, [pc, #84]	@ (8007de0 <prvTaskExitError+0x60>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d92:	d00d      	beq.n	8007db0 <prvTaskExitError+0x30>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d98:	b672      	cpsid	i
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	b662      	cpsie	i
 8007da8:	60fb      	str	r3, [r7, #12]
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <prvTaskExitError+0x2c>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	b672      	cpsid	i
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	b662      	cpsie	i
 8007dc4:	60bb      	str	r3, [r7, #8]
}
 8007dc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007dc8:	bf00      	nop
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0fc      	beq.n	8007dca <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dd0:	bf00      	nop
 8007dd2:	bf00      	nop
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	2000000c 	.word	0x2000000c
	...

08007df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007df0:	4b07      	ldr	r3, [pc, #28]	@ (8007e10 <pxCurrentTCBConst2>)
 8007df2:	6819      	ldr	r1, [r3, #0]
 8007df4:	6808      	ldr	r0, [r1, #0]
 8007df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	f380 8809 	msr	PSP, r0
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f04f 0000 	mov.w	r0, #0
 8007e06:	f380 8811 	msr	BASEPRI, r0
 8007e0a:	4770      	bx	lr
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst2>:
 8007e10:	200015f0 	.word	0x200015f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop

08007e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e18:	4808      	ldr	r0, [pc, #32]	@ (8007e3c <prvPortStartFirstTask+0x24>)
 8007e1a:	6800      	ldr	r0, [r0, #0]
 8007e1c:	6800      	ldr	r0, [r0, #0]
 8007e1e:	f380 8808 	msr	MSP, r0
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8814 	msr	CONTROL, r0
 8007e2a:	b662      	cpsie	i
 8007e2c:	b661      	cpsie	f
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	df00      	svc	0
 8007e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e3a:	bf00      	nop
 8007e3c:	e000ed08 	.word	0xe000ed08

08007e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e46:	4b37      	ldr	r3, [pc, #220]	@ (8007f24 <xPortStartScheduler+0xe4>)
 8007e48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	22ff      	movs	r2, #255	@ 0xff
 8007e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f28 <xPortStartScheduler+0xe8>)
 8007e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f2c <xPortStartScheduler+0xec>)
 8007e70:	2207      	movs	r2, #7
 8007e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e74:	e009      	b.n	8007e8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e76:	4b2d      	ldr	r3, [pc, #180]	@ (8007f2c <xPortStartScheduler+0xec>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8007f2c <xPortStartScheduler+0xec>)
 8007e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e92:	2b80      	cmp	r3, #128	@ 0x80
 8007e94:	d0ef      	beq.n	8007e76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e96:	4b25      	ldr	r3, [pc, #148]	@ (8007f2c <xPortStartScheduler+0xec>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f1c3 0307 	rsb	r3, r3, #7
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d00d      	beq.n	8007ebe <xPortStartScheduler+0x7e>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	b672      	cpsid	i
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	b662      	cpsie	i
 8007eb6:	60bb      	str	r3, [r7, #8]
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	e7fd      	b.n	8007eba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8007f2c <xPortStartScheduler+0xec>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	4a19      	ldr	r2, [pc, #100]	@ (8007f2c <xPortStartScheduler+0xec>)
 8007ec6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ec8:	4b18      	ldr	r3, [pc, #96]	@ (8007f2c <xPortStartScheduler+0xec>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ed0:	4a16      	ldr	r2, [pc, #88]	@ (8007f2c <xPortStartScheduler+0xec>)
 8007ed2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007edc:	4b14      	ldr	r3, [pc, #80]	@ (8007f30 <xPortStartScheduler+0xf0>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a13      	ldr	r2, [pc, #76]	@ (8007f30 <xPortStartScheduler+0xf0>)
 8007ee2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ee6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ee8:	4b11      	ldr	r3, [pc, #68]	@ (8007f30 <xPortStartScheduler+0xf0>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a10      	ldr	r2, [pc, #64]	@ (8007f30 <xPortStartScheduler+0xf0>)
 8007eee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ef2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ef4:	f000 f8dc 	bl	80080b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f34 <xPortStartScheduler+0xf4>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007efe:	f000 f8fb 	bl	80080f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f02:	4b0d      	ldr	r3, [pc, #52]	@ (8007f38 <xPortStartScheduler+0xf8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a0c      	ldr	r2, [pc, #48]	@ (8007f38 <xPortStartScheduler+0xf8>)
 8007f08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007f0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f0e:	f7ff ff83 	bl	8007e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f12:	f7fe ff39 	bl	8006d88 <vTaskSwitchContext>
	prvTaskExitError();
 8007f16:	f7ff ff33 	bl	8007d80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	e000e400 	.word	0xe000e400
 8007f28:	20001c1c 	.word	0x20001c1c
 8007f2c:	20001c20 	.word	0x20001c20
 8007f30:	e000ed20 	.word	0xe000ed20
 8007f34:	2000000c 	.word	0x2000000c
 8007f38:	e000ef34 	.word	0xe000ef34

08007f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f46:	b672      	cpsid	i
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	b662      	cpsie	i
 8007f56:	607b      	str	r3, [r7, #4]
}
 8007f58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f5a:	4b11      	ldr	r3, [pc, #68]	@ (8007fa0 <vPortEnterCritical+0x64>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	4a0f      	ldr	r2, [pc, #60]	@ (8007fa0 <vPortEnterCritical+0x64>)
 8007f62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f64:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa0 <vPortEnterCritical+0x64>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d112      	bne.n	8007f92 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa4 <vPortEnterCritical+0x68>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00d      	beq.n	8007f92 <vPortEnterCritical+0x56>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	b672      	cpsid	i
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	b662      	cpsie	i
 8007f8a:	603b      	str	r3, [r7, #0]
}
 8007f8c:	bf00      	nop
 8007f8e:	bf00      	nop
 8007f90:	e7fd      	b.n	8007f8e <vPortEnterCritical+0x52>
	}
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	2000000c 	.word	0x2000000c
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fae:	4b13      	ldr	r3, [pc, #76]	@ (8007ffc <vPortExitCritical+0x54>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10d      	bne.n	8007fd2 <vPortExitCritical+0x2a>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	b672      	cpsid	i
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	b662      	cpsie	i
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
 8007fce:	bf00      	nop
 8007fd0:	e7fd      	b.n	8007fce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ffc <vPortExitCritical+0x54>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	4a08      	ldr	r2, [pc, #32]	@ (8007ffc <vPortExitCritical+0x54>)
 8007fda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fdc:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <vPortExitCritical+0x54>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d105      	bne.n	8007ff0 <vPortExitCritical+0x48>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f383 8811 	msr	BASEPRI, r3
}
 8007fee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	2000000c 	.word	0x2000000c

08008000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008000:	f3ef 8009 	mrs	r0, PSP
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	4b15      	ldr	r3, [pc, #84]	@ (8008060 <pxCurrentTCBConst>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	f01e 0f10 	tst.w	lr, #16
 8008010:	bf08      	it	eq
 8008012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	6010      	str	r0, [r2, #0]
 800801c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008024:	b672      	cpsid	i
 8008026:	f380 8811 	msr	BASEPRI, r0
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	b662      	cpsie	i
 8008034:	f7fe fea8 	bl	8006d88 <vTaskSwitchContext>
 8008038:	f04f 0000 	mov.w	r0, #0
 800803c:	f380 8811 	msr	BASEPRI, r0
 8008040:	bc09      	pop	{r0, r3}
 8008042:	6819      	ldr	r1, [r3, #0]
 8008044:	6808      	ldr	r0, [r1, #0]
 8008046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804a:	f01e 0f10 	tst.w	lr, #16
 800804e:	bf08      	it	eq
 8008050:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008054:	f380 8809 	msr	PSP, r0
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop

08008060 <pxCurrentTCBConst>:
 8008060:	200015f0 	.word	0x200015f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop

08008068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	b672      	cpsid	i
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	b662      	cpsie	i
 8008082:	607b      	str	r3, [r7, #4]
}
 8008084:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008086:	f7fe fdc3 	bl	8006c10 <xTaskIncrementTick>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008090:	4b06      	ldr	r3, [pc, #24]	@ (80080ac <SysTick_Handler+0x44>)
 8008092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	2300      	movs	r3, #0
 800809a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f383 8811 	msr	BASEPRI, r3
}
 80080a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80080a4:	bf00      	nop
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80080b4:	4b0b      	ldr	r3, [pc, #44]	@ (80080e4 <vPortSetupTimerInterrupt+0x34>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80080ba:	4b0b      	ldr	r3, [pc, #44]	@ (80080e8 <vPortSetupTimerInterrupt+0x38>)
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80080c0:	4b0a      	ldr	r3, [pc, #40]	@ (80080ec <vPortSetupTimerInterrupt+0x3c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a0a      	ldr	r2, [pc, #40]	@ (80080f0 <vPortSetupTimerInterrupt+0x40>)
 80080c6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ca:	099b      	lsrs	r3, r3, #6
 80080cc:	4a09      	ldr	r2, [pc, #36]	@ (80080f4 <vPortSetupTimerInterrupt+0x44>)
 80080ce:	3b01      	subs	r3, #1
 80080d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080d2:	4b04      	ldr	r3, [pc, #16]	@ (80080e4 <vPortSetupTimerInterrupt+0x34>)
 80080d4:	2207      	movs	r2, #7
 80080d6:	601a      	str	r2, [r3, #0]
}
 80080d8:	bf00      	nop
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	e000e010 	.word	0xe000e010
 80080e8:	e000e018 	.word	0xe000e018
 80080ec:	20000000 	.word	0x20000000
 80080f0:	10624dd3 	.word	0x10624dd3
 80080f4:	e000e014 	.word	0xe000e014

080080f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008108 <vPortEnableVFP+0x10>
 80080fc:	6801      	ldr	r1, [r0, #0]
 80080fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008102:	6001      	str	r1, [r0, #0]
 8008104:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008106:	bf00      	nop
 8008108:	e000ed88 	.word	0xe000ed88

0800810c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008112:	f3ef 8305 	mrs	r3, IPSR
 8008116:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b0f      	cmp	r3, #15
 800811c:	d917      	bls.n	800814e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800811e:	4a1a      	ldr	r2, [pc, #104]	@ (8008188 <vPortValidateInterruptPriority+0x7c>)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4413      	add	r3, r2
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008128:	4b18      	ldr	r3, [pc, #96]	@ (800818c <vPortValidateInterruptPriority+0x80>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	7afa      	ldrb	r2, [r7, #11]
 800812e:	429a      	cmp	r2, r3
 8008130:	d20d      	bcs.n	800814e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	b672      	cpsid	i
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	b662      	cpsie	i
 8008146:	607b      	str	r3, [r7, #4]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800814e:	4b10      	ldr	r3, [pc, #64]	@ (8008190 <vPortValidateInterruptPriority+0x84>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008156:	4b0f      	ldr	r3, [pc, #60]	@ (8008194 <vPortValidateInterruptPriority+0x88>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d90d      	bls.n	800817a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008162:	b672      	cpsid	i
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	b662      	cpsie	i
 8008172:	603b      	str	r3, [r7, #0]
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	e7fd      	b.n	8008176 <vPortValidateInterruptPriority+0x6a>
	}
 800817a:	bf00      	nop
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	e000e3f0 	.word	0xe000e3f0
 800818c:	20001c1c 	.word	0x20001c1c
 8008190:	e000ed0c 	.word	0xe000ed0c
 8008194:	20001c20 	.word	0x20001c20

08008198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	@ 0x28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80081a4:	f7fe fc76 	bl	8006a94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80081a8:	4b5d      	ldr	r3, [pc, #372]	@ (8008320 <pvPortMalloc+0x188>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80081b0:	f000 f920 	bl	80083f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008324 <pvPortMalloc+0x18c>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f040 8094 	bne.w	80082ea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d020      	beq.n	800820a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80081c8:	2208      	movs	r2, #8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d017      	beq.n	800820a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f023 0307 	bic.w	r3, r3, #7
 80081e0:	3308      	adds	r3, #8
 80081e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00d      	beq.n	800820a <pvPortMalloc+0x72>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f2:	b672      	cpsid	i
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	b662      	cpsie	i
 8008202:	617b      	str	r3, [r7, #20]
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	e7fd      	b.n	8008206 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d06c      	beq.n	80082ea <pvPortMalloc+0x152>
 8008210:	4b45      	ldr	r3, [pc, #276]	@ (8008328 <pvPortMalloc+0x190>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d867      	bhi.n	80082ea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800821a:	4b44      	ldr	r3, [pc, #272]	@ (800832c <pvPortMalloc+0x194>)
 800821c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800821e:	4b43      	ldr	r3, [pc, #268]	@ (800832c <pvPortMalloc+0x194>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008224:	e004      	b.n	8008230 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	429a      	cmp	r2, r3
 8008238:	d903      	bls.n	8008242 <pvPortMalloc+0xaa>
 800823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1f1      	bne.n	8008226 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008242:	4b37      	ldr	r3, [pc, #220]	@ (8008320 <pvPortMalloc+0x188>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008248:	429a      	cmp	r2, r3
 800824a:	d04e      	beq.n	80082ea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2208      	movs	r2, #8
 8008252:	4413      	add	r3, r2
 8008254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	1ad2      	subs	r2, r2, r3
 8008266:	2308      	movs	r3, #8
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	429a      	cmp	r2, r3
 800826c:	d922      	bls.n	80082b4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800826e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4413      	add	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00d      	beq.n	800829c <pvPortMalloc+0x104>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	b672      	cpsid	i
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	b662      	cpsie	i
 8008294:	613b      	str	r3, [r7, #16]
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	e7fd      	b.n	8008298 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80082ae:	69b8      	ldr	r0, [r7, #24]
 80082b0:	f000 f902 	bl	80084b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80082b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008328 <pvPortMalloc+0x190>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	4a1a      	ldr	r2, [pc, #104]	@ (8008328 <pvPortMalloc+0x190>)
 80082c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80082c2:	4b19      	ldr	r3, [pc, #100]	@ (8008328 <pvPortMalloc+0x190>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008330 <pvPortMalloc+0x198>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d203      	bcs.n	80082d6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082ce:	4b16      	ldr	r3, [pc, #88]	@ (8008328 <pvPortMalloc+0x190>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a17      	ldr	r2, [pc, #92]	@ (8008330 <pvPortMalloc+0x198>)
 80082d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	4b12      	ldr	r3, [pc, #72]	@ (8008324 <pvPortMalloc+0x18c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	431a      	orrs	r2, r3
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082ea:	f7fe fbe1 	bl	8006ab0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f003 0307 	and.w	r3, r3, #7
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00d      	beq.n	8008314 <pvPortMalloc+0x17c>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fc:	b672      	cpsid	i
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	b662      	cpsie	i
 800830c:	60fb      	str	r3, [r7, #12]
}
 800830e:	bf00      	nop
 8008310:	bf00      	nop
 8008312:	e7fd      	b.n	8008310 <pvPortMalloc+0x178>
	return pvReturn;
 8008314:	69fb      	ldr	r3, [r7, #28]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3728      	adds	r7, #40	@ 0x28
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	2000582c 	.word	0x2000582c
 8008324:	20005838 	.word	0x20005838
 8008328:	20005830 	.word	0x20005830
 800832c:	20005824 	.word	0x20005824
 8008330:	20005834 	.word	0x20005834

08008334 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d04e      	beq.n	80083e4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008346:	2308      	movs	r3, #8
 8008348:	425b      	negs	r3, r3
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4413      	add	r3, r2
 800834e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	4b24      	ldr	r3, [pc, #144]	@ (80083ec <vPortFree+0xb8>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4013      	ands	r3, r2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10d      	bne.n	800837e <vPortFree+0x4a>
	__asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008366:	b672      	cpsid	i
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	b662      	cpsie	i
 8008376:	60fb      	str	r3, [r7, #12]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <vPortFree+0x6e>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	b672      	cpsid	i
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	b662      	cpsie	i
 800839a:	60bb      	str	r3, [r7, #8]
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	4b11      	ldr	r3, [pc, #68]	@ (80083ec <vPortFree+0xb8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d019      	beq.n	80083e4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d115      	bne.n	80083e4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	4b0b      	ldr	r3, [pc, #44]	@ (80083ec <vPortFree+0xb8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	401a      	ands	r2, r3
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80083c8:	f7fe fb64 	bl	8006a94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <vPortFree+0xbc>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4413      	add	r3, r2
 80083d6:	4a06      	ldr	r2, [pc, #24]	@ (80083f0 <vPortFree+0xbc>)
 80083d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083da:	6938      	ldr	r0, [r7, #16]
 80083dc:	f000 f86c 	bl	80084b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80083e0:	f7fe fb66 	bl	8006ab0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083e4:	bf00      	nop
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20005838 	.word	0x20005838
 80083f0:	20005830 	.word	0x20005830

080083f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083fa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80083fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008400:	4b27      	ldr	r3, [pc, #156]	@ (80084a0 <prvHeapInit+0xac>)
 8008402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00c      	beq.n	8008428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3307      	adds	r3, #7
 8008412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0307 	bic.w	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	4a1f      	ldr	r2, [pc, #124]	@ (80084a0 <prvHeapInit+0xac>)
 8008424:	4413      	add	r3, r2
 8008426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800842c:	4a1d      	ldr	r2, [pc, #116]	@ (80084a4 <prvHeapInit+0xb0>)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008432:	4b1c      	ldr	r3, [pc, #112]	@ (80084a4 <prvHeapInit+0xb0>)
 8008434:	2200      	movs	r2, #0
 8008436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4413      	add	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008440:	2208      	movs	r2, #8
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	1a9b      	subs	r3, r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0307 	bic.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4a15      	ldr	r2, [pc, #84]	@ (80084a8 <prvHeapInit+0xb4>)
 8008454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008456:	4b14      	ldr	r3, [pc, #80]	@ (80084a8 <prvHeapInit+0xb4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2200      	movs	r2, #0
 800845c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800845e:	4b12      	ldr	r3, [pc, #72]	@ (80084a8 <prvHeapInit+0xb4>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008474:	4b0c      	ldr	r3, [pc, #48]	@ (80084a8 <prvHeapInit+0xb4>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4a0a      	ldr	r2, [pc, #40]	@ (80084ac <prvHeapInit+0xb8>)
 8008482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	4a09      	ldr	r2, [pc, #36]	@ (80084b0 <prvHeapInit+0xbc>)
 800848a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800848c:	4b09      	ldr	r3, [pc, #36]	@ (80084b4 <prvHeapInit+0xc0>)
 800848e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008492:	601a      	str	r2, [r3, #0]
}
 8008494:	bf00      	nop
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20001c24 	.word	0x20001c24
 80084a4:	20005824 	.word	0x20005824
 80084a8:	2000582c 	.word	0x2000582c
 80084ac:	20005834 	.word	0x20005834
 80084b0:	20005830 	.word	0x20005830
 80084b4:	20005838 	.word	0x20005838

080084b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084c0:	4b28      	ldr	r3, [pc, #160]	@ (8008564 <prvInsertBlockIntoFreeList+0xac>)
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e002      	b.n	80084cc <prvInsertBlockIntoFreeList+0x14>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d8f7      	bhi.n	80084c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d108      	bne.n	80084fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	441a      	add	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	441a      	add	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d118      	bne.n	8008540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b15      	ldr	r3, [pc, #84]	@ (8008568 <prvInsertBlockIntoFreeList+0xb0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d00d      	beq.n	8008536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	441a      	add	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e008      	b.n	8008548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008536:	4b0c      	ldr	r3, [pc, #48]	@ (8008568 <prvInsertBlockIntoFreeList+0xb0>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e003      	b.n	8008548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	429a      	cmp	r2, r3
 800854e:	d002      	beq.n	8008556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008556:	bf00      	nop
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20005824 	.word	0x20005824
 8008568:	2000582c 	.word	0x2000582c

0800856c <memset>:
 800856c:	4402      	add	r2, r0
 800856e:	4603      	mov	r3, r0
 8008570:	4293      	cmp	r3, r2
 8008572:	d100      	bne.n	8008576 <memset+0xa>
 8008574:	4770      	bx	lr
 8008576:	f803 1b01 	strb.w	r1, [r3], #1
 800857a:	e7f9      	b.n	8008570 <memset+0x4>

0800857c <_reclaim_reent>:
 800857c:	4b2d      	ldr	r3, [pc, #180]	@ (8008634 <_reclaim_reent+0xb8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4283      	cmp	r3, r0
 8008582:	b570      	push	{r4, r5, r6, lr}
 8008584:	4604      	mov	r4, r0
 8008586:	d053      	beq.n	8008630 <_reclaim_reent+0xb4>
 8008588:	69c3      	ldr	r3, [r0, #28]
 800858a:	b31b      	cbz	r3, 80085d4 <_reclaim_reent+0x58>
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	b163      	cbz	r3, 80085aa <_reclaim_reent+0x2e>
 8008590:	2500      	movs	r5, #0
 8008592:	69e3      	ldr	r3, [r4, #28]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	5959      	ldr	r1, [r3, r5]
 8008598:	b9b1      	cbnz	r1, 80085c8 <_reclaim_reent+0x4c>
 800859a:	3504      	adds	r5, #4
 800859c:	2d80      	cmp	r5, #128	@ 0x80
 800859e:	d1f8      	bne.n	8008592 <_reclaim_reent+0x16>
 80085a0:	69e3      	ldr	r3, [r4, #28]
 80085a2:	4620      	mov	r0, r4
 80085a4:	68d9      	ldr	r1, [r3, #12]
 80085a6:	f000 f87b 	bl	80086a0 <_free_r>
 80085aa:	69e3      	ldr	r3, [r4, #28]
 80085ac:	6819      	ldr	r1, [r3, #0]
 80085ae:	b111      	cbz	r1, 80085b6 <_reclaim_reent+0x3a>
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 f875 	bl	80086a0 <_free_r>
 80085b6:	69e3      	ldr	r3, [r4, #28]
 80085b8:	689d      	ldr	r5, [r3, #8]
 80085ba:	b15d      	cbz	r5, 80085d4 <_reclaim_reent+0x58>
 80085bc:	4629      	mov	r1, r5
 80085be:	4620      	mov	r0, r4
 80085c0:	682d      	ldr	r5, [r5, #0]
 80085c2:	f000 f86d 	bl	80086a0 <_free_r>
 80085c6:	e7f8      	b.n	80085ba <_reclaim_reent+0x3e>
 80085c8:	680e      	ldr	r6, [r1, #0]
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f868 	bl	80086a0 <_free_r>
 80085d0:	4631      	mov	r1, r6
 80085d2:	e7e1      	b.n	8008598 <_reclaim_reent+0x1c>
 80085d4:	6961      	ldr	r1, [r4, #20]
 80085d6:	b111      	cbz	r1, 80085de <_reclaim_reent+0x62>
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 f861 	bl	80086a0 <_free_r>
 80085de:	69e1      	ldr	r1, [r4, #28]
 80085e0:	b111      	cbz	r1, 80085e8 <_reclaim_reent+0x6c>
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 f85c 	bl	80086a0 <_free_r>
 80085e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80085ea:	b111      	cbz	r1, 80085f2 <_reclaim_reent+0x76>
 80085ec:	4620      	mov	r0, r4
 80085ee:	f000 f857 	bl	80086a0 <_free_r>
 80085f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085f4:	b111      	cbz	r1, 80085fc <_reclaim_reent+0x80>
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 f852 	bl	80086a0 <_free_r>
 80085fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80085fe:	b111      	cbz	r1, 8008606 <_reclaim_reent+0x8a>
 8008600:	4620      	mov	r0, r4
 8008602:	f000 f84d 	bl	80086a0 <_free_r>
 8008606:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008608:	b111      	cbz	r1, 8008610 <_reclaim_reent+0x94>
 800860a:	4620      	mov	r0, r4
 800860c:	f000 f848 	bl	80086a0 <_free_r>
 8008610:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008612:	b111      	cbz	r1, 800861a <_reclaim_reent+0x9e>
 8008614:	4620      	mov	r0, r4
 8008616:	f000 f843 	bl	80086a0 <_free_r>
 800861a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800861c:	b111      	cbz	r1, 8008624 <_reclaim_reent+0xa8>
 800861e:	4620      	mov	r0, r4
 8008620:	f000 f83e 	bl	80086a0 <_free_r>
 8008624:	6a23      	ldr	r3, [r4, #32]
 8008626:	b11b      	cbz	r3, 8008630 <_reclaim_reent+0xb4>
 8008628:	4620      	mov	r0, r4
 800862a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800862e:	4718      	bx	r3
 8008630:	bd70      	pop	{r4, r5, r6, pc}
 8008632:	bf00      	nop
 8008634:	20000010 	.word	0x20000010

08008638 <__libc_init_array>:
 8008638:	b570      	push	{r4, r5, r6, lr}
 800863a:	4d0d      	ldr	r5, [pc, #52]	@ (8008670 <__libc_init_array+0x38>)
 800863c:	4c0d      	ldr	r4, [pc, #52]	@ (8008674 <__libc_init_array+0x3c>)
 800863e:	1b64      	subs	r4, r4, r5
 8008640:	10a4      	asrs	r4, r4, #2
 8008642:	2600      	movs	r6, #0
 8008644:	42a6      	cmp	r6, r4
 8008646:	d109      	bne.n	800865c <__libc_init_array+0x24>
 8008648:	4d0b      	ldr	r5, [pc, #44]	@ (8008678 <__libc_init_array+0x40>)
 800864a:	4c0c      	ldr	r4, [pc, #48]	@ (800867c <__libc_init_array+0x44>)
 800864c:	f000 f87e 	bl	800874c <_init>
 8008650:	1b64      	subs	r4, r4, r5
 8008652:	10a4      	asrs	r4, r4, #2
 8008654:	2600      	movs	r6, #0
 8008656:	42a6      	cmp	r6, r4
 8008658:	d105      	bne.n	8008666 <__libc_init_array+0x2e>
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008660:	4798      	blx	r3
 8008662:	3601      	adds	r6, #1
 8008664:	e7ee      	b.n	8008644 <__libc_init_array+0xc>
 8008666:	f855 3b04 	ldr.w	r3, [r5], #4
 800866a:	4798      	blx	r3
 800866c:	3601      	adds	r6, #1
 800866e:	e7f2      	b.n	8008656 <__libc_init_array+0x1e>
 8008670:	080087cc 	.word	0x080087cc
 8008674:	080087cc 	.word	0x080087cc
 8008678:	080087cc 	.word	0x080087cc
 800867c:	080087d0 	.word	0x080087d0

08008680 <__retarget_lock_acquire_recursive>:
 8008680:	4770      	bx	lr

08008682 <__retarget_lock_release_recursive>:
 8008682:	4770      	bx	lr

08008684 <memcpy>:
 8008684:	440a      	add	r2, r1
 8008686:	4291      	cmp	r1, r2
 8008688:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800868c:	d100      	bne.n	8008690 <memcpy+0xc>
 800868e:	4770      	bx	lr
 8008690:	b510      	push	{r4, lr}
 8008692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800869a:	4291      	cmp	r1, r2
 800869c:	d1f9      	bne.n	8008692 <memcpy+0xe>
 800869e:	bd10      	pop	{r4, pc}

080086a0 <_free_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4605      	mov	r5, r0
 80086a4:	2900      	cmp	r1, #0
 80086a6:	d041      	beq.n	800872c <_free_r+0x8c>
 80086a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ac:	1f0c      	subs	r4, r1, #4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	bfb8      	it	lt
 80086b2:	18e4      	addlt	r4, r4, r3
 80086b4:	f000 f83e 	bl	8008734 <__malloc_lock>
 80086b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008730 <_free_r+0x90>)
 80086ba:	6813      	ldr	r3, [r2, #0]
 80086bc:	b933      	cbnz	r3, 80086cc <_free_r+0x2c>
 80086be:	6063      	str	r3, [r4, #4]
 80086c0:	6014      	str	r4, [r2, #0]
 80086c2:	4628      	mov	r0, r5
 80086c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086c8:	f000 b83a 	b.w	8008740 <__malloc_unlock>
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	d908      	bls.n	80086e2 <_free_r+0x42>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	1821      	adds	r1, r4, r0
 80086d4:	428b      	cmp	r3, r1
 80086d6:	bf01      	itttt	eq
 80086d8:	6819      	ldreq	r1, [r3, #0]
 80086da:	685b      	ldreq	r3, [r3, #4]
 80086dc:	1809      	addeq	r1, r1, r0
 80086de:	6021      	streq	r1, [r4, #0]
 80086e0:	e7ed      	b.n	80086be <_free_r+0x1e>
 80086e2:	461a      	mov	r2, r3
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	b10b      	cbz	r3, 80086ec <_free_r+0x4c>
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	d9fa      	bls.n	80086e2 <_free_r+0x42>
 80086ec:	6811      	ldr	r1, [r2, #0]
 80086ee:	1850      	adds	r0, r2, r1
 80086f0:	42a0      	cmp	r0, r4
 80086f2:	d10b      	bne.n	800870c <_free_r+0x6c>
 80086f4:	6820      	ldr	r0, [r4, #0]
 80086f6:	4401      	add	r1, r0
 80086f8:	1850      	adds	r0, r2, r1
 80086fa:	4283      	cmp	r3, r0
 80086fc:	6011      	str	r1, [r2, #0]
 80086fe:	d1e0      	bne.n	80086c2 <_free_r+0x22>
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	6053      	str	r3, [r2, #4]
 8008706:	4408      	add	r0, r1
 8008708:	6010      	str	r0, [r2, #0]
 800870a:	e7da      	b.n	80086c2 <_free_r+0x22>
 800870c:	d902      	bls.n	8008714 <_free_r+0x74>
 800870e:	230c      	movs	r3, #12
 8008710:	602b      	str	r3, [r5, #0]
 8008712:	e7d6      	b.n	80086c2 <_free_r+0x22>
 8008714:	6820      	ldr	r0, [r4, #0]
 8008716:	1821      	adds	r1, r4, r0
 8008718:	428b      	cmp	r3, r1
 800871a:	bf04      	itt	eq
 800871c:	6819      	ldreq	r1, [r3, #0]
 800871e:	685b      	ldreq	r3, [r3, #4]
 8008720:	6063      	str	r3, [r4, #4]
 8008722:	bf04      	itt	eq
 8008724:	1809      	addeq	r1, r1, r0
 8008726:	6021      	streq	r1, [r4, #0]
 8008728:	6054      	str	r4, [r2, #4]
 800872a:	e7ca      	b.n	80086c2 <_free_r+0x22>
 800872c:	bd38      	pop	{r3, r4, r5, pc}
 800872e:	bf00      	nop
 8008730:	20005978 	.word	0x20005978

08008734 <__malloc_lock>:
 8008734:	4801      	ldr	r0, [pc, #4]	@ (800873c <__malloc_lock+0x8>)
 8008736:	f7ff bfa3 	b.w	8008680 <__retarget_lock_acquire_recursive>
 800873a:	bf00      	nop
 800873c:	20005974 	.word	0x20005974

08008740 <__malloc_unlock>:
 8008740:	4801      	ldr	r0, [pc, #4]	@ (8008748 <__malloc_unlock+0x8>)
 8008742:	f7ff bf9e 	b.w	8008682 <__retarget_lock_release_recursive>
 8008746:	bf00      	nop
 8008748:	20005974 	.word	0x20005974

0800874c <_init>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	bf00      	nop
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr

08008758 <_fini>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	bf00      	nop
 800875c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875e:	bc08      	pop	{r3}
 8008760:	469e      	mov	lr, r3
 8008762:	4770      	bx	lr
