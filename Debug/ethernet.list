
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f04  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009104  08009104  0000a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ac  080091ac  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080091ac  080091ac  0000a1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091b4  080091b4  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091b4  080091b4  0000a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091b8  080091b8  0000a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080091bc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005dd4  20000060  0800921c  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e34  0800921c  0000be34  2**0
                  ALLOC
 11 .lwip_sec     00000140  2007c000  2007c000  0000c000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c312  00000000  00000000  0000b08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005bec  00000000  00000000  000373a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f0  00000000  00000000  0003cf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001983  00000000  00000000  0003f080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fb7d  00000000  00000000  00040a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a88f  00000000  00000000  00070580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119999  00000000  00000000  0009ae0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b47a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008cc0  00000000  00000000  001b47ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001bd4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080090ec 	.word	0x080090ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080090ec 	.word	0x080090ec

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000572:	4b26      	ldr	r3, [pc, #152]	@ (800060c <_DoInit+0xa0>)
 8000574:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000576:	22a8      	movs	r2, #168	@ 0xa8
 8000578:	2100      	movs	r1, #0
 800057a:	6838      	ldr	r0, [r7, #0]
 800057c:	f008 fcc6 	bl	8008f0c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2203      	movs	r2, #3
 8000584:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2203      	movs	r2, #3
 800058a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4a20      	ldr	r2, [pc, #128]	@ (8000610 <_DoInit+0xa4>)
 8000590:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <_DoInit+0xa8>)
 8000596:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800059e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	2200      	movs	r2, #0
 80005a4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	2200      	movs	r2, #0
 80005b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <_DoInit+0xa4>)
 80005b6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <_DoInit+0xac>)
 80005bc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2210      	movs	r2, #16
 80005c2:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	2200      	movs	r2, #0
 80005d4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80005d6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e00c      	b.n	80005fa <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f1c3 030f 	rsb	r3, r3, #15
 80005e6:	4a0d      	ldr	r2, [pc, #52]	@ (800061c <_DoInit+0xb0>)
 80005e8:	5cd1      	ldrb	r1, [r2, r3]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4413      	add	r3, r2
 80005f0:	460a      	mov	r2, r1
 80005f2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d9ef      	bls.n	80005e0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000600:	f3bf 8f5f 	dmb	sy
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000007c 	.word	0x2000007c
 8000610:	08009104 	.word	0x08009104
 8000614:	20000124 	.word	0x20000124
 8000618:	20000524 	.word	0x20000524
 800061c:	0800914c 	.word	0x0800914c

08000620 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	429a      	cmp	r2, r3
 8000642:	d905      	bls.n	8000650 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	3b01      	subs	r3, #1
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
 800064e:	e007      	b.n	8000660 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	69b9      	ldr	r1, [r7, #24]
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	1acb      	subs	r3, r1, r3
 800065a:	4413      	add	r3, r2
 800065c:	3b01      	subs	r3, #1
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800066a:	4293      	cmp	r3, r2
 800066c:	bf28      	it	cs
 800066e:	4613      	movcs	r3, r2
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4293      	cmp	r3, r2
 8000678:	bf28      	it	cs
 800067a:	4613      	movcs	r3, r2
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	4413      	add	r3, r2
 8000686:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800068a:	68b9      	ldr	r1, [r7, #8]
 800068c:	6978      	ldr	r0, [r7, #20]
 800068e:	f008 fcc9 	bl	8009024 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000692:	6a3a      	ldr	r2, [r7, #32]
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	4413      	add	r3, r2
 8000698:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069e:	4413      	add	r3, r2
 80006a0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80006aa:	69fa      	ldr	r2, [r7, #28]
 80006ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ae:	4413      	add	r3, r2
 80006b0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	69fa      	ldr	r2, [r7, #28]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d101      	bne.n	80006c0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80006c0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	69fa      	ldr	r2, [r7, #28]
 80006c8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1b2      	bne.n	8000636 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80006d0:	6a3b      	ldr	r3, [r7, #32]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3728      	adds	r7, #40	@ 0x28
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b088      	sub	sp, #32
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80006f6:	69ba      	ldr	r2, [r7, #24]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d911      	bls.n	8000722 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	4413      	add	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	6938      	ldr	r0, [r7, #16]
 800070e:	f008 fc89 	bl	8009024 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000712:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	441a      	add	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000720:	e01f      	b.n	8000762 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	4413      	add	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	6938      	ldr	r0, [r7, #16]
 8000736:	f008 fc75 	bl	8009024 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	4413      	add	r3, r2
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	4619      	mov	r1, r3
 8000752:	6938      	ldr	r0, [r7, #16]
 8000754:	f008 fc66 	bl	8009024 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000758:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	60da      	str	r2, [r3, #12]
}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800076a:	b480      	push	{r7}
 800076c:	b087      	sub	sp, #28
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	691b      	ldr	r3, [r3, #16]
 8000776:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	429a      	cmp	r2, r3
 8000784:	d808      	bhi.n	8000798 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	1ad2      	subs	r2, r2, r3
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	4413      	add	r3, r2
 8000792:	3b01      	subs	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e004      	b.n	80007a2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	3b01      	subs	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80007a2:	697b      	ldr	r3, [r7, #20]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	371c      	adds	r7, #28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	4a1f      	ldr	r2, [pc, #124]	@ (800084c <SEGGER_RTT_WriteNoLock+0x9c>)
 80007ce:	4413      	add	r3, r2
 80007d0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d029      	beq.n	800082e <SEGGER_RTT_WriteNoLock+0x7e>
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d82e      	bhi.n	800083c <SEGGER_RTT_WriteNoLock+0x8c>
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <SEGGER_RTT_WriteNoLock+0x38>
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d013      	beq.n	800080e <SEGGER_RTT_WriteNoLock+0x5e>
 80007e6:	e029      	b.n	800083c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80007e8:	6978      	ldr	r0, [r7, #20]
 80007ea:	f7ff ffbe 	bl	800076a <_GetAvailWriteSpace>
 80007ee:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d202      	bcs.n	80007fe <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80007fc:	e021      	b.n	8000842 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	69b9      	ldr	r1, [r7, #24]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ff67 	bl	80006da <_WriteNoCheck>
    break;
 800080c:	e019      	b.n	8000842 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ffab 	bl	800076a <_GetAvailWriteSpace>
 8000814:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	4293      	cmp	r3, r2
 800081c:	bf28      	it	cs
 800081e:	4613      	movcs	r3, r2
 8000820:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	69b9      	ldr	r1, [r7, #24]
 8000826:	6978      	ldr	r0, [r7, #20]
 8000828:	f7ff ff57 	bl	80006da <_WriteNoCheck>
    break;
 800082c:	e009      	b.n	8000842 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	69b9      	ldr	r1, [r7, #24]
 8000832:	6978      	ldr	r0, [r7, #20]
 8000834:	f7ff fef4 	bl	8000620 <_WriteBlocking>
 8000838:	61f8      	str	r0, [r7, #28]
    break;
 800083a:	e002      	b.n	8000842 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    break;
 8000840:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000842:	69fb      	ldr	r3, [r7, #28]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2000007c 	.word	0x2000007c

08000850 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <SEGGER_RTT_Write+0x48>)
 800085e:	61fb      	str	r3, [r7, #28]
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b53      	cmp	r3, #83	@ 0x53
 8000868:	d001      	beq.n	800086e <SEGGER_RTT_Write+0x1e>
 800086a:	f7ff fe7f 	bl	800056c <_DoInit>
  SEGGER_RTT_LOCK();
 800086e:	f3ef 8311 	mrs	r3, BASEPRI
 8000872:	f04f 0120 	mov.w	r1, #32
 8000876:	f381 8811 	msr	BASEPRI, r1
 800087a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	68b9      	ldr	r1, [r7, #8]
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff ff95 	bl	80007b0 <SEGGER_RTT_WriteNoLock>
 8000886:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800088e:	697b      	ldr	r3, [r7, #20]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000007c 	.word	0x2000007c

0800089c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d80e      	bhi.n	80008d8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4413      	add	r3, r2
 80008c2:	78fa      	ldrb	r2, [r7, #3]
 80008c4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d115      	bne.n	8000910 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6918      	ldr	r0, [r3, #16]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6819      	ldr	r1, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	461a      	mov	r2, r3
 80008f2:	f7ff ffad 	bl	8000850 <SEGGER_RTT_Write>
 80008f6:	4602      	mov	r2, r0
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d004      	beq.n	800090a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f04f 32ff 	mov.w	r2, #4294967295
 8000906:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8000908:	e002      	b.n	8000910 <_StoreChar+0x74>
      p->Cnt = 0u;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800092a:	2301      	movs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000932:	e007      	b.n	8000944 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000934:	6a3a      	ldr	r2, [r7, #32]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	fbb2 f3f3 	udiv	r3, r2, r3
 800093c:	623b      	str	r3, [r7, #32]
    Width++;
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3301      	adds	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000944:	6a3a      	ldr	r2, [r7, #32]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d2f3      	bcs.n	8000934 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800094c:	683a      	ldr	r2, [r7, #0]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	429a      	cmp	r2, r3
 8000952:	d901      	bls.n	8000958 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	2b00      	cmp	r3, #0
 8000960:	d125      	bne.n	80009ae <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000964:	2b00      	cmp	r3, #0
 8000966:	d022      	beq.n	80009ae <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d005      	beq.n	800097e <_PrintUnsigned+0x66>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d102      	bne.n	800097e <_PrintUnsigned+0x66>
        c = '0';
 8000978:	2330      	movs	r3, #48	@ 0x30
 800097a:	76fb      	strb	r3, [r7, #27]
 800097c:	e001      	b.n	8000982 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800097e:	2320      	movs	r3, #32
 8000980:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000982:	e00b      	b.n	800099c <_PrintUnsigned+0x84>
        FieldWidth--;
 8000984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000986:	3b01      	subs	r3, #1
 8000988:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 800098a:	7efb      	ldrb	r3, [r7, #27]
 800098c:	4619      	mov	r1, r3
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff ff84 	bl	800089c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db07      	blt.n	80009ac <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <_PrintUnsigned+0x96>
 80009a2:	69fa      	ldr	r2, [r7, #28]
 80009a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3ec      	bcc.n	8000984 <_PrintUnsigned+0x6c>
 80009aa:	e000      	b.n	80009ae <_PrintUnsigned+0x96>
          break;
 80009ac:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	db55      	blt.n	8000a62 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d903      	bls.n	80009c4 <_PrintUnsigned+0xac>
        NumDigits--;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	3b01      	subs	r3, #1
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	e009      	b.n	80009d8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009cc:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d200      	bcs.n	80009d8 <_PrintUnsigned+0xc0>
          break;
 80009d6:	e005      	b.n	80009e4 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 80009d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	fb02 f303 	mul.w	r3, r2, r3
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80009e2:	e7e8      	b.n	80009b6 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ec:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009f2:	fb02 f303 	mul.w	r3, r2, r3
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <_PrintUnsigned+0x154>)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f7ff ff48 	bl	800089c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db08      	blt.n	8000a26 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1df      	bne.n	80009e4 <_PrintUnsigned+0xcc>
 8000a24:	e000      	b.n	8000a28 <_PrintUnsigned+0x110>
        break;
 8000a26:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d017      	beq.n	8000a62 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d014      	beq.n	8000a62 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a38:	e00a      	b.n	8000a50 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000a40:	2120      	movs	r1, #32
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff ff2a 	bl	800089c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db07      	blt.n	8000a60 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d005      	beq.n	8000a62 <_PrintUnsigned+0x14a>
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d3ed      	bcc.n	8000a3a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000a5e:	e000      	b.n	8000a62 <_PrintUnsigned+0x14a>
            break;
 8000a60:	bf00      	nop
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08009160 	.word	0x08009160

08000a70 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bfb8      	it	lt
 8000a84:	425b      	neglt	r3, r3
 8000a86:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000a8c:	e007      	b.n	8000a9e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a96:	613b      	str	r3, [r7, #16]
    Width++;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	daf3      	bge.n	8000a8e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d901      	bls.n	8000ab2 <_PrintInt+0x42>
    Width = NumDigits;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00a      	beq.n	8000ace <_PrintInt+0x5e>
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db04      	blt.n	8000ac8 <_PrintInt+0x58>
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <_PrintInt+0x5e>
    FieldWidth--;
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <_PrintInt+0x6e>
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d01c      	beq.n	8000b18 <_PrintInt+0xa8>
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d117      	bne.n	8000b18 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d014      	beq.n	8000b18 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000aee:	e00a      	b.n	8000b06 <_PrintInt+0x96>
        FieldWidth--;
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000af6:	2120      	movs	r1, #32
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff fecf 	bl	800089c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db07      	blt.n	8000b16 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <_PrintInt+0xa8>
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d3ed      	bcc.n	8000af0 <_PrintInt+0x80>
 8000b14:	e000      	b.n	8000b18 <_PrintInt+0xa8>
          break;
 8000b16:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db4a      	blt.n	8000bb6 <_PrintInt+0x146>
    if (v < 0) {
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da07      	bge.n	8000b36 <_PrintInt+0xc6>
      v = -v;
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	425b      	negs	r3, r3
 8000b2a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000b2c:	212d      	movs	r1, #45	@ 0x2d
 8000b2e:	68f8      	ldr	r0, [r7, #12]
 8000b30:	f7ff feb4 	bl	800089c <_StoreChar>
 8000b34:	e008      	b.n	8000b48 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000b40:	212b      	movs	r1, #43	@ 0x2b
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f7ff feaa 	bl	800089c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db32      	blt.n	8000bb6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d01f      	beq.n	8000b9a <_PrintInt+0x12a>
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d11a      	bne.n	8000b9a <_PrintInt+0x12a>
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d117      	bne.n	8000b9a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000b6a:	6a3b      	ldr	r3, [r7, #32]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d014      	beq.n	8000b9a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b70:	e00a      	b.n	8000b88 <_PrintInt+0x118>
            FieldWidth--;
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000b78:	2130      	movs	r1, #48	@ 0x30
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff fe8e 	bl	800089c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db07      	blt.n	8000b98 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <_PrintInt+0x12a>
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d3ed      	bcc.n	8000b72 <_PrintInt+0x102>
 8000b96:	e000      	b.n	8000b9a <_PrintInt+0x12a>
              break;
 8000b98:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db09      	blt.n	8000bb6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000ba2:	68b9      	ldr	r1, [r7, #8]
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff feb1 	bl	8000918 <_PrintUnsigned>
      }
    }
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b0a4      	sub	sp, #144	@ 0x90
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000bd2:	2340      	movs	r3, #64	@ 0x40
 8000bd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000bf0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 81d9 	beq.w	8000fac <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 8000bfa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000bfe:	2b25      	cmp	r3, #37	@ 0x25
 8000c00:	f040 81c7 	bne.w	8000f92 <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000c04:	2300      	movs	r3, #0
 8000c06:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 8000c16:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000c1a:	3b23      	subs	r3, #35	@ 0x23
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d83f      	bhi.n	8000ca0 <SEGGER_RTT_vprintf+0xe0>
 8000c20:	a201      	add	r2, pc, #4	@ (adr r2, 8000c28 <SEGGER_RTT_vprintf+0x68>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c91 	.word	0x08000c91
 8000c2c:	08000ca1 	.word	0x08000ca1
 8000c30:	08000ca1 	.word	0x08000ca1
 8000c34:	08000ca1 	.word	0x08000ca1
 8000c38:	08000ca1 	.word	0x08000ca1
 8000c3c:	08000ca1 	.word	0x08000ca1
 8000c40:	08000ca1 	.word	0x08000ca1
 8000c44:	08000ca1 	.word	0x08000ca1
 8000c48:	08000c81 	.word	0x08000c81
 8000c4c:	08000ca1 	.word	0x08000ca1
 8000c50:	08000c61 	.word	0x08000c61
 8000c54:	08000ca1 	.word	0x08000ca1
 8000c58:	08000ca1 	.word	0x08000ca1
 8000c5c:	08000c71 	.word	0x08000c71
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	e01b      	b.n	8000ca8 <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	e013      	b.n	8000ca8 <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	e00b      	b.n	8000ca8 <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	677b      	str	r3, [r7, #116]	@ 0x74
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	e003      	b.n	8000ca8 <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000ca6:	bf00      	nop
        }
      } while (v);
 8000ca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1ae      	bne.n	8000c0e <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 8000cbc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000cc2:	d912      	bls.n	8000cea <SEGGER_RTT_vprintf+0x12a>
 8000cc4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cc8:	2b39      	cmp	r3, #57	@ 0x39
 8000cca:	d80e      	bhi.n	8000cea <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000cd2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3b30      	subs	r3, #48	@ 0x30
 8000ce6:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8000ce8:	e7e4      	b.n	8000cb4 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 8000cfc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d00:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d02:	d132      	bne.n	8000d6a <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	3301      	adds	r3, #1
 8000d08:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d10:	d10d      	bne.n	8000d2e <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3301      	adds	r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1d19      	adds	r1, r3, #4
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6011      	str	r1, [r2, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000d2c:	e01d      	b.n	8000d6a <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 8000d36:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d3c:	d915      	bls.n	8000d6a <SEGGER_RTT_vprintf+0x1aa>
 8000d3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d42:	2b39      	cmp	r3, #57	@ 0x39
 8000d44:	d811      	bhi.n	8000d6a <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 8000d52:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d54:	4613      	mov	r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d62:	4413      	add	r3, r2
 8000d64:	3b30      	subs	r3, #48	@ 0x30
 8000d66:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8000d68:	e7e1      	b.n	8000d2e <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 8000d72:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d76:	2b6c      	cmp	r3, #108	@ 0x6c
 8000d78:	d003      	beq.n	8000d82 <SEGGER_RTT_vprintf+0x1c2>
 8000d7a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d7e:	2b68      	cmp	r3, #104	@ 0x68
 8000d80:	d107      	bne.n	8000d92 <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 8000d90:	e7ef      	b.n	8000d72 <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000d92:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d96:	2b25      	cmp	r3, #37	@ 0x25
 8000d98:	f000 80ef 	beq.w	8000f7a <SEGGER_RTT_vprintf+0x3ba>
 8000d9c:	2b25      	cmp	r3, #37	@ 0x25
 8000d9e:	f2c0 80f3 	blt.w	8000f88 <SEGGER_RTT_vprintf+0x3c8>
 8000da2:	2b78      	cmp	r3, #120	@ 0x78
 8000da4:	f300 80f0 	bgt.w	8000f88 <SEGGER_RTT_vprintf+0x3c8>
 8000da8:	2b58      	cmp	r3, #88	@ 0x58
 8000daa:	f2c0 80ed 	blt.w	8000f88 <SEGGER_RTT_vprintf+0x3c8>
 8000dae:	3b58      	subs	r3, #88	@ 0x58
 8000db0:	2b20      	cmp	r3, #32
 8000db2:	f200 80e9 	bhi.w	8000f88 <SEGGER_RTT_vprintf+0x3c8>
 8000db6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dbc <SEGGER_RTT_vprintf+0x1fc>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000ebf 	.word	0x08000ebf
 8000dc0:	08000f89 	.word	0x08000f89
 8000dc4:	08000f89 	.word	0x08000f89
 8000dc8:	08000f89 	.word	0x08000f89
 8000dcc:	08000f89 	.word	0x08000f89
 8000dd0:	08000f89 	.word	0x08000f89
 8000dd4:	08000f89 	.word	0x08000f89
 8000dd8:	08000f89 	.word	0x08000f89
 8000ddc:	08000f89 	.word	0x08000f89
 8000de0:	08000f89 	.word	0x08000f89
 8000de4:	08000f89 	.word	0x08000f89
 8000de8:	08000e41 	.word	0x08000e41
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000f89 	.word	0x08000f89
 8000df4:	08000f89 	.word	0x08000f89
 8000df8:	08000f89 	.word	0x08000f89
 8000dfc:	08000f89 	.word	0x08000f89
 8000e00:	08000f89 	.word	0x08000f89
 8000e04:	08000f89 	.word	0x08000f89
 8000e08:	08000f89 	.word	0x08000f89
 8000e0c:	08000f89 	.word	0x08000f89
 8000e10:	08000f89 	.word	0x08000f89
 8000e14:	08000f89 	.word	0x08000f89
 8000e18:	08000f89 	.word	0x08000f89
 8000e1c:	08000f51 	.word	0x08000f51
 8000e20:	08000f89 	.word	0x08000f89
 8000e24:	08000f89 	.word	0x08000f89
 8000e28:	08000ee9 	.word	0x08000ee9
 8000e2c:	08000f89 	.word	0x08000f89
 8000e30:	08000e95 	.word	0x08000e95
 8000e34:	08000f89 	.word	0x08000f89
 8000e38:	08000f89 	.word	0x08000f89
 8000e3c:	08000ebf 	.word	0x08000ebf
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1d19      	adds	r1, r3, #4
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6011      	str	r1, [r2, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 8000e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000e54:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 8000e58:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fd1a 	bl	800089c <_StoreChar>
        break;
 8000e68:	e08f      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	1d19      	adds	r1, r3, #4
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6011      	str	r1, [r2, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 8000e7a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000e7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e88:	220a      	movs	r2, #10
 8000e8a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000e8e:	f7ff fdef 	bl	8000a70 <_PrintInt>
        break;
 8000e92:	e07a      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1d19      	adds	r1, r3, #4
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6011      	str	r1, [r2, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8000ea4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000ea8:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000eb6:	220a      	movs	r2, #10
 8000eb8:	f7ff fd2e 	bl	8000918 <_PrintUnsigned>
        break;
 8000ebc:	e065      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1d19      	adds	r1, r3, #4
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6011      	str	r1, [r2, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 8000ece:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000ed2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	f7ff fd19 	bl	8000918 <_PrintUnsigned>
        break;
 8000ee6:	e050      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	1d19      	adds	r1, r3, #4
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	6011      	str	r1, [r2, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8000ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d104      	bne.n	8000f06 <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8000efc:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <SEGGER_RTT_vprintf+0x41c>)
 8000efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 8000f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 8000f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f10:	3301      	adds	r3, #1
 8000f12:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8000f14:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d015      	beq.n	8000f48 <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8000f1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <SEGGER_RTT_vprintf+0x36a>
 8000f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d010      	beq.n	8000f4c <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8000f2a:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000f2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fcb1 	bl	800089c <_StoreChar>
            Precision--;
 8000f3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 8000f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	dadf      	bge.n	8000f06 <SEGGER_RTT_vprintf+0x346>
        }
        break;
 8000f46:	e020      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
              break;
 8000f48:	bf00      	nop
 8000f4a:	e01e      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
              break;
 8000f4c:	bf00      	nop
        break;
 8000f4e:	e01c      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1d19      	adds	r1, r3, #4
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6011      	str	r1, [r2, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000f60:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f64:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2308      	movs	r3, #8
 8000f72:	2210      	movs	r2, #16
 8000f74:	f7ff fcd0 	bl	8000918 <_PrintUnsigned>
        break;
 8000f78:	e007      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8000f7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f7e:	2125      	movs	r1, #37	@ 0x25
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fc8b 	bl	800089c <_StoreChar>
        break;
 8000f86:	e000      	b.n	8000f8a <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 8000f88:	bf00      	nop
      }
      sFormat++;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	e007      	b.n	8000fa2 <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 8000f92:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000f96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fc7d 	bl	800089c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000fa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f6bf ae1c 	bge.w	8000be2 <SEGGER_RTT_vprintf+0x22>
 8000faa:	e000      	b.n	8000fae <SEGGER_RTT_vprintf+0x3ee>
      break;
 8000fac:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000fae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd0d      	ble.n	8000fd0 <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000fb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000fba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fc44 	bl	8000850 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000fcc:	4413      	add	r3, r2
 8000fce:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 8000fd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3788      	adds	r7, #136	@ 0x88
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	08009110 	.word	0x08009110

08000fe0 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000fe0:	b40e      	push	{r1, r2, r3}
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	69f9      	ldr	r1, [r7, #28]
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff fde1 	bl	8000bc0 <SEGGER_RTT_vprintf>
 8000ffe:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8001000:	68fb      	ldr	r3, [r7, #12]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100c:	b003      	add	sp, #12
 800100e:	4770      	bx	lr

08001010 <AppMain>:
#include "lcd.h"
#include "FreeRTOS_IP.h"
#include "SEGGER_RTT.h"


void AppMain(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

	//FreeRTOS_IPInit_Multi();

	//test LCD
	lcd_4SPI_init();
 8001014:	f000 fac4 	bl	80015a0 <lcd_4SPI_init>
	setPageaddressing();
 8001018:	f000 fa4e 	bl	80014b8 <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 fa61 	bl	80014e4 <lcd_setpage_address>
	lcd_setcolumn_address(32);
 8001022:	2020      	movs	r0, #32
 8001024:	f000 fa78 	bl	8001518 <lcd_setcolumn_address>

	while(1){
		SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
 8001028:	4904      	ldr	r1, [pc, #16]	@ (800103c <AppMain+0x2c>)
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff ffd8 	bl	8000fe0 <SEGGER_RTT_printf>
		HAL_Delay(1000);
 8001030:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001034:	f000 fee6 	bl	8001e04 <HAL_Delay>
		SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
 8001038:	bf00      	nop
 800103a:	e7f5      	b.n	8001028 <AppMain+0x18>
 800103c:	08009118 	.word	0x08009118

08001040 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <MX_ETH_Init+0x84>)
 8001046:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <MX_ETH_Init+0x88>)
 8001048:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800104a:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <MX_ETH_Init+0x8c>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001050:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <MX_ETH_Init+0x8c>)
 8001052:	2280      	movs	r2, #128	@ 0x80
 8001054:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <MX_ETH_Init+0x8c>)
 8001058:	22e1      	movs	r2, #225	@ 0xe1
 800105a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <MX_ETH_Init+0x8c>)
 800105e:	2200      	movs	r2, #0
 8001060:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_ETH_Init+0x8c>)
 8001064:	2200      	movs	r2, #0
 8001066:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <MX_ETH_Init+0x8c>)
 800106a:	2200      	movs	r2, #0
 800106c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_ETH_Init+0x84>)
 8001070:	4a16      	ldr	r2, [pc, #88]	@ (80010cc <MX_ETH_Init+0x8c>)
 8001072:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_ETH_Init+0x84>)
 8001076:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800107a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_ETH_Init+0x84>)
 800107e:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <MX_ETH_Init+0x90>)
 8001080:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <MX_ETH_Init+0x84>)
 8001084:	4a13      	ldr	r2, [pc, #76]	@ (80010d4 <MX_ETH_Init+0x94>)
 8001086:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_ETH_Init+0x84>)
 800108a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800108e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <MX_ETH_Init+0x84>)
 8001092:	f001 f835 	bl	8002100 <HAL_ETH_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800109c:	f000 fb6a 	bl	8001774 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010a0:	2238      	movs	r2, #56	@ 0x38
 80010a2:	2100      	movs	r1, #0
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <MX_ETH_Init+0x98>)
 80010a6:	f007 ff31 	bl	8008f0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <MX_ETH_Init+0x98>)
 80010ac:	2221      	movs	r2, #33	@ 0x21
 80010ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_ETH_Init+0x98>)
 80010b2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80010b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <MX_ETH_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000056c 	.word	0x2000056c
 80010c8:	40028000 	.word	0x40028000
 80010cc:	2000061c 	.word	0x2000061c
 80010d0:	2007c0a0 	.word	0x2007c0a0
 80010d4:	2007c000 	.word	0x2007c000
 80010d8:	20000534 	.word	0x20000534

080010dc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08e      	sub	sp, #56	@ 0x38
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001234 <HAL_ETH_MspInit+0x158>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f040 8096 	bne.w	800122c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001100:	4b4d      	ldr	r3, [pc, #308]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001104:	4a4c      	ldr	r2, [pc, #304]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001106:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800110a:	6313      	str	r3, [r2, #48]	@ 0x30
 800110c:	4b4a      	ldr	r3, [pc, #296]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001114:	623b      	str	r3, [r7, #32]
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	4b47      	ldr	r3, [pc, #284]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111c:	4a46      	ldr	r2, [pc, #280]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800111e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001122:	6313      	str	r3, [r2, #48]	@ 0x30
 8001124:	4b44      	ldr	r3, [pc, #272]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4a40      	ldr	r2, [pc, #256]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001136:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800113a:	6313      	str	r3, [r2, #48]	@ 0x30
 800113c:	4b3e      	ldr	r3, [pc, #248]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a3a      	ldr	r2, [pc, #232]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
 8001154:	4b38      	ldr	r3, [pc, #224]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b35      	ldr	r3, [pc, #212]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001164:	4a34      	ldr	r2, [pc, #208]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	6313      	str	r3, [r2, #48]	@ 0x30
 800116c:	4b32      	ldr	r3, [pc, #200]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117c:	4a2e      	ldr	r2, [pc, #184]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	6313      	str	r3, [r2, #48]	@ 0x30
 8001184:	4b2c      	ldr	r3, [pc, #176]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001190:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001194:	4a28      	ldr	r2, [pc, #160]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 8001196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119a:	6313      	str	r3, [r2, #48]	@ 0x30
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <HAL_ETH_MspInit+0x15c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80011a8:	233a      	movs	r3, #58	@ 0x3a
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011b8:	230b      	movs	r3, #11
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	481e      	ldr	r0, [pc, #120]	@ (800123c <HAL_ETH_MspInit+0x160>)
 80011c4:	f001 fbb0 	bl	8002928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 80011c8:	238e      	movs	r3, #142	@ 0x8e
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d8:	230b      	movs	r3, #11
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4817      	ldr	r0, [pc, #92]	@ (8001240 <HAL_ETH_MspInit+0x164>)
 80011e4:	f001 fba0 	bl	8002928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80011e8:	f242 0301 	movw	r3, #8193	@ 0x2001
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fa:	230b      	movs	r3, #11
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	480f      	ldr	r0, [pc, #60]	@ (8001244 <HAL_ETH_MspInit+0x168>)
 8001206:	f001 fb8f 	bl	8002928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800120a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800121c:	230b      	movs	r3, #11
 800121e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	4808      	ldr	r0, [pc, #32]	@ (8001248 <HAL_ETH_MspInit+0x16c>)
 8001228:	f001 fb7e 	bl	8002928 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800122c:	bf00      	nop
 800122e:	3738      	adds	r7, #56	@ 0x38
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40028000 	.word	0x40028000
 8001238:	40023800 	.word	0x40023800
 800123c:	40020800 	.word	0x40020800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40021800 	.word	0x40021800

0800124c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <MX_FREERTOS_Init+0x18>)
 8001252:	2100      	movs	r1, #0
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_FREERTOS_Init+0x1c>)
 8001256:	f004 ffab 	bl	80061b0 <osThreadNew>
 800125a:	4603      	mov	r3, r0
 800125c:	4a03      	ldr	r2, [pc, #12]	@ (800126c <MX_FREERTOS_Init+0x20>)
 800125e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	08009170 	.word	0x08009170
 8001268:	08001271 	.word	0x08001271
 800126c:	20000624 	.word	0x20000624

08001270 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 AppMain();
 8001278:	f7ff feca 	bl	8001010 <AppMain>
    osDelay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f005 f83d 	bl	80062fc <osDelay>
	 AppMain();
 8001282:	bf00      	nop
 8001284:	e7f8      	b.n	8001278 <StartDefaultTask+0x8>
	...

08001288 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	@ 0x30
 800128c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b5a      	ldr	r3, [pc, #360]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a59      	ldr	r2, [pc, #356]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b57      	ldr	r3, [pc, #348]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	4b54      	ldr	r3, [pc, #336]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a53      	ldr	r2, [pc, #332]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b4b      	ldr	r3, [pc, #300]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a47      	ldr	r2, [pc, #284]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b45      	ldr	r3, [pc, #276]	@ (8001408 <MX_GPIO_Init+0x180>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fe:	4b42      	ldr	r3, [pc, #264]	@ (8001408 <MX_GPIO_Init+0x180>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a41      	ldr	r2, [pc, #260]	@ (8001408 <MX_GPIO_Init+0x180>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b3f      	ldr	r3, [pc, #252]	@ (8001408 <MX_GPIO_Init+0x180>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001316:	4b3c      	ldr	r3, [pc, #240]	@ (8001408 <MX_GPIO_Init+0x180>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a3b      	ldr	r2, [pc, #236]	@ (8001408 <MX_GPIO_Init+0x180>)
 800131c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b39      	ldr	r3, [pc, #228]	@ (8001408 <MX_GPIO_Init+0x180>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2101      	movs	r1, #1
 8001332:	4836      	ldr	r0, [pc, #216]	@ (800140c <MX_GPIO_Init+0x184>)
 8001334:	f001 fca4 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800133e:	4834      	ldr	r0, [pc, #208]	@ (8001410 <MX_GPIO_Init+0x188>)
 8001340:	f001 fc9e 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2140      	movs	r1, #64	@ 0x40
 8001348:	4832      	ldr	r0, [pc, #200]	@ (8001414 <MX_GPIO_Init+0x18c>)
 800134a:	f001 fc99 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	21c0      	movs	r1, #192	@ 0xc0
 8001352:	4831      	ldr	r0, [pc, #196]	@ (8001418 <MX_GPIO_Init+0x190>)
 8001354:	f001 fc94 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001358:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4827      	ldr	r0, [pc, #156]	@ (800140c <MX_GPIO_Init+0x184>)
 8001370:	f001 fada 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001374:	2301      	movs	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4820      	ldr	r0, [pc, #128]	@ (800140c <MX_GPIO_Init+0x184>)
 800138c:	f001 facc 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001390:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4819      	ldr	r0, [pc, #100]	@ (8001410 <MX_GPIO_Init+0x188>)
 80013aa:	f001 fabd 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ae:	2340      	movs	r3, #64	@ 0x40
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4813      	ldr	r0, [pc, #76]	@ (8001414 <MX_GPIO_Init+0x18c>)
 80013c6:	f001 faaf 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013ca:	2380      	movs	r3, #128	@ 0x80
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	480d      	ldr	r0, [pc, #52]	@ (8001414 <MX_GPIO_Init+0x18c>)
 80013de:	f001 faa3 	bl	8002928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e2:	23c0      	movs	r3, #192	@ 0xc0
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	@ (8001418 <MX_GPIO_Init+0x190>)
 80013fa:	f001 fa95 	bl	8002928 <HAL_GPIO_Init>

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	@ 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40020800 	.word	0x40020800
 8001410:	40020400 	.word	0x40020400
 8001414:	40021800 	.word	0x40021800
 8001418:	40020c00 	.word	0x40020c00

0800141c <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2140      	movs	r1, #64	@ 0x40
 800142a:	480b      	ldr	r0, [pc, #44]	@ (8001458 <lcd_transfer+0x3c>)
 800142c:	f001 fc28 	bl	8002c80 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 8001430:	1df9      	adds	r1, r7, #7
 8001432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001436:	2201      	movs	r2, #1
 8001438:	4808      	ldr	r0, [pc, #32]	@ (800145c <lcd_transfer+0x40>)
 800143a:	f002 ffd8 	bl	80043ee <HAL_SPI_Transmit>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2140      	movs	r1, #64	@ 0x40
 8001446:	4804      	ldr	r0, [pc, #16]	@ (8001458 <lcd_transfer+0x3c>)
 8001448:	f001 fc1a 	bl	8002c80 <HAL_GPIO_WritePin>

	return HAL_OK;
 800144c:	2300      	movs	r3, #0

}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40020c00 	.word	0x40020c00
 800145c:	20000638 	.word	0x20000638

08001460 <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 8001466:	23af      	movs	r3, #175	@ 0xaf
 8001468:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2180      	movs	r1, #128	@ 0x80
 800146e:	4806      	ldr	r0, [pc, #24]	@ (8001488 <onLCD+0x28>)
 8001470:	f001 fc06 	bl	8002c80 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ffd0 	bl	800141c <lcd_transfer>
 800147c:	4603      	mov	r3, r0

}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40020c00 	.word	0x40020c00

0800148c <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 8001492:	23ae      	movs	r3, #174	@ 0xae
 8001494:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2180      	movs	r1, #128	@ 0x80
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <offLCD+0x28>)
 800149c:	f001 fbf0 	bl	8002c80 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffba 	bl	800141c <lcd_transfer>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020c00 	.word	0x40020c00

080014b8 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 80014be:	2320      	movs	r3, #32
 80014c0:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2180      	movs	r1, #128	@ 0x80
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <setPageaddressing+0x28>)
 80014c8:	f001 fbda 	bl	8002c80 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffa4 	bl	800141c <lcd_transfer>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40020c00 	.word	0x40020c00

080014e4 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80014f6:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <lcd_setpage_address+0x30>)
 80014fe:	f001 fbbf 	bl	8002c80 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff89 	bl	800141c <lcd_transfer>
 800150a:	4603      	mov	r3, r0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40020c00 	.word	0x40020c00

08001518 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b7f      	cmp	r3, #127	@ 0x7f
 8001524:	dc02      	bgt.n	800152c <lcd_setcolumn_address+0x14>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	da01      	bge.n	8001530 <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e030      	b.n	8001592 <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 8001534:	2310      	movs	r3, #16
 8001536:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 8001538:	2300      	movs	r3, #0
 800153a:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	091b      	lsrs	r3, r3, #4
 8001540:	b2db      	uxtb	r3, r3
 8001542:	b25a      	sxtb	r2, r3
 8001544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001548:	4313      	orrs	r3, r2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 800154e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	b25a      	sxtb	r2, r3
 8001558:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800155c:	4313      	orrs	r3, r2
 800155e:	b25b      	sxtb	r3, r3
 8001560:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2180      	movs	r1, #128	@ 0x80
 8001566:	480d      	ldr	r0, [pc, #52]	@ (800159c <lcd_setcolumn_address+0x84>)
 8001568:	f001 fb8a 	bl	8002c80 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 800156c:	7bbb      	ldrb	r3, [r7, #14]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff54 	bl	800141c <lcd_transfer>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e009      	b.n	8001592 <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff4b 	bl	800141c <lcd_transfer>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40020c00 	.word	0x40020c00

080015a0 <lcd_4SPI_init>:
}

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2140      	movs	r1, #64	@ 0x40
 80015a8:	4808      	ldr	r0, [pc, #32]	@ (80015cc <lcd_4SPI_init+0x2c>)
 80015aa:	f001 fb69 	bl	8002c80 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2101      	movs	r1, #1
 80015b2:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <lcd_4SPI_init+0x30>)
 80015b4:	f001 fb64 	bl	8002c80 <HAL_GPIO_WritePin>

	//dummy transmission for SPI

	onLCD();
 80015b8:	f7ff ff52 	bl	8001460 <onLCD>
	offLCD();
 80015bc:	f7ff ff66 	bl	800148c <offLCD>

	//this is the column where the lcd starts
	lcd_setcolumn_address(32);
 80015c0:	2020      	movs	r0, #32
 80015c2:	f7ff ffa9 	bl	8001518 <lcd_setcolumn_address>

	return HAL_OK;
 80015c6:	2300      	movs	r3, #0

}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40020800 	.word	0x40020800

080015d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80015d8:	f000 f88c 	bl	80016f4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015dc:	f000 fbd6 	bl	8001d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e0:	f000 f816 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e4:	f7ff fe50 	bl	8001288 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80015e8:	f000 fa6e 	bl	8001ac8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80015ec:	f000 fafc 	bl	8001be8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 80015f0:	f000 f90e 	bl	8001810 <MX_SPI2_Init>
  MX_ETH_Init();
 80015f4:	f7ff fd24 	bl	8001040 <MX_ETH_Init>
  MX_RNG_Init();
 80015f8:	f000 f8c2 	bl	8001780 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80015fc:	f004 fd6e 	bl	80060dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8001600:	f7ff fe24 	bl	800124c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001604:	f004 fd9e 	bl	8006144 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 8001608:	f7ff fd02 	bl	8001010 <AppMain>
 800160c:	e7fc      	b.n	8001608 <main+0x34>
	...

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b094      	sub	sp, #80	@ 0x50
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	2234      	movs	r2, #52	@ 0x34
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f007 fc74 	bl	8008f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001634:	f001 fc78 	bl	8002f28 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4b2c      	ldr	r3, [pc, #176]	@ (80016ec <SystemClock_Config+0xdc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a2b      	ldr	r2, [pc, #172]	@ (80016ec <SystemClock_Config+0xdc>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <SystemClock_Config+0xdc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <SystemClock_Config+0xe0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001658:	4a25      	ldr	r2, [pc, #148]	@ (80016f0 <SystemClock_Config+0xe0>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <SystemClock_Config+0xe0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166c:	2301      	movs	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001670:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001674:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001676:	2302      	movs	r3, #2
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001680:	2304      	movs	r3, #4
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001684:	2360      	movs	r3, #96	@ 0x60
 8001686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001688:	2302      	movs	r3, #2
 800168a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800168c:	2304      	movs	r3, #4
 800168e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001690:	2302      	movs	r3, #2
 8001692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fca5 	bl	8002fe8 <HAL_RCC_OscConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016a4:	f000 f866 	bl	8001774 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016a8:	f001 fc4e 	bl	8002f48 <HAL_PWREx_EnableOverDrive>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016b2:	f000 f85f 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b6:	230f      	movs	r3, #15
 80016b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ba:	2302      	movs	r3, #2
 80016bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	2103      	movs	r1, #3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 ff36 	bl	8003544 <HAL_RCC_ClockConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80016de:	f000 f849 	bl	8001774 <Error_Handler>
  }
}
 80016e2:	bf00      	nop
 80016e4:	3750      	adds	r7, #80	@ 0x50
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000

080016f4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80016fa:	463b      	mov	r3, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001706:	f000 fc83 	bl	8002010 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800170e:	2300      	movs	r3, #0
 8001710:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MPU_Config+0x58>)
 8001714:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001716:	230d      	movs	r3, #13
 8001718:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800171a:	2300      	movs	r3, #0
 800171c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800171e:	2301      	movs	r3, #1
 8001720:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001722:	2303      	movs	r3, #3
 8001724:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001726:	2301      	movs	r3, #1
 8001728:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001736:	463b      	mov	r3, r7
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fca1 	bl	8002080 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 800173e:	2006      	movs	r0, #6
 8001740:	f000 fc7e 	bl	8002040 <HAL_MPU_Enable>

}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2007c000 	.word	0x2007c000

08001750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001762:	f000 fb2f 	bl	8001dc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40001000 	.word	0x40001000

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <MX_RNG_Init+0x20>)
 8001786:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <MX_RNG_Init+0x24>)
 8001788:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <MX_RNG_Init+0x20>)
 800178c:	f002 fd5a 	bl	8004244 <HAL_RNG_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001796:	f7ff ffed 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000628 	.word	0x20000628
 80017a4:	50060800 	.word	0x50060800

080017a8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b0a8      	sub	sp, #160	@ 0xa0
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2290      	movs	r2, #144	@ 0x90
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f007 fba7 	bl	8008f0c <memset>
  if(rngHandle->Instance==RNG)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a11      	ldr	r2, [pc, #68]	@ (8001808 <HAL_RNG_MspInit+0x60>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d11b      	bne.n	8001800 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80017cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 f90b 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80017e4:	f7ff ffc6 	bl	8001774 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_RNG_MspInit+0x64>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ec:	4a07      	ldr	r2, [pc, #28]	@ (800180c <HAL_RNG_MspInit+0x64>)
 80017ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_RNG_MspInit+0x64>)
 80017f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001800:	bf00      	nop
 8001802:	37a0      	adds	r7, #160	@ 0xa0
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	50060800 	.word	0x50060800
 800180c:	40023800 	.word	0x40023800

08001810 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001814:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001816:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <MX_SPI2_Init+0x78>)
 8001818:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <MX_SPI2_Init+0x74>)
 800181c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001820:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <MX_SPI2_Init+0x74>)
 800182a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800182e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001830:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001832:	2202      	movs	r2, #2
 8001834:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001836:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_SPI2_Init+0x74>)
 800183e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001842:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001846:	2238      	movs	r2, #56	@ 0x38
 8001848:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <MX_SPI2_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <MX_SPI2_Init+0x74>)
 800185e:	2207      	movs	r2, #7
 8001860:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <MX_SPI2_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_SPI2_Init+0x74>)
 8001870:	f002 fd12 	bl	8004298 <HAL_SPI_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800187a:	f7ff ff7b 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000638 	.word	0x20000638
 8001888:	40003800 	.word	0x40003800

0800188c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <HAL_SPI_MspInit+0x7c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d128      	bne.n	8001900 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_SPI_MspInit+0x80>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80018de:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f0:	2305      	movs	r3, #5
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <HAL_SPI_MspInit+0x84>)
 80018fc:	f001 f814 	bl	8002928 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	@ 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40003800 	.word	0x40003800
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_MspInit+0x4c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a10      	ldr	r2, [pc, #64]	@ (8001960 <HAL_MspInit+0x4c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_MspInit+0x4c>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193c:	6453      	str	r3, [r2, #68]	@ 0x44
 800193e:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	210f      	movs	r1, #15
 800194e:	f06f 0001 	mvn.w	r0, #1
 8001952:	f000 fb33 	bl	8001fbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	@ 0x38
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001974:	4b33      	ldr	r3, [pc, #204]	@ (8001a44 <HAL_InitTick+0xe0>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	4a32      	ldr	r2, [pc, #200]	@ (8001a44 <HAL_InitTick+0xe0>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001980:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <HAL_InitTick+0xe0>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800198c:	f107 0210 	add.w	r2, r7, #16
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f001 fffa 	bl	8003990 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019a6:	f001 ffcb 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80019aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80019ac:	e004      	b.n	80019b8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019ae:	f001 ffc7 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80019b2:	4603      	mov	r3, r0
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ba:	4a23      	ldr	r2, [pc, #140]	@ (8001a48 <HAL_InitTick+0xe4>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9b      	lsrs	r3, r3, #18
 80019c2:	3b01      	subs	r3, #1
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <HAL_InitTick+0xe8>)
 80019c8:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <HAL_InitTick+0xec>)
 80019ca:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <HAL_InitTick+0xe8>)
 80019ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019d4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a4c <HAL_InitTick+0xe8>)
 80019d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <HAL_InitTick+0xe8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <HAL_InitTick+0xe8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_InitTick+0xe8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80019ec:	4817      	ldr	r0, [pc, #92]	@ (8001a4c <HAL_InitTick+0xe8>)
 80019ee:	f002 fffd 	bl	80049ec <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d11b      	bne.n	8001a38 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a00:	4812      	ldr	r0, [pc, #72]	@ (8001a4c <HAL_InitTick+0xe8>)
 8001a02:	f003 f855 	bl	8004ab0 <HAL_TIM_Base_Start_IT>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d111      	bne.n	8001a38 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a14:	2036      	movs	r0, #54	@ 0x36
 8001a16:	f000 faed 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d808      	bhi.n	8001a32 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	2036      	movs	r0, #54	@ 0x36
 8001a26:	f000 fac9 	bl	8001fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <HAL_InitTick+0xf0>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e002      	b.n	8001a38 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3738      	adds	r7, #56	@ 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	2000069c 	.word	0x2000069c
 8001a50:	40001000 	.word	0x40001000
 8001a54:	20000004 	.word	0x20000004

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <NMI_Handler+0x4>

08001a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <MemManage_Handler+0x4>

08001a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <TIM6_DAC_IRQHandler+0x10>)
 8001a96:	f003 f883 	bl	8004ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000069c 	.word	0x2000069c

08001aa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001ace:	4a15      	ldr	r2, [pc, #84]	@ (8001b24 <MX_USART3_UART_Init+0x5c>)
 8001ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <MX_USART3_UART_Init+0x58>)
 8001b0c:	f003 fa3c 	bl	8004f88 <HAL_UART_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b16:	f7ff fe2d 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200006e8 	.word	0x200006e8
 8001b24:	40004800 	.word	0x40004800

08001b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0ae      	sub	sp, #184	@ 0xb8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2290      	movs	r2, #144	@ 0x90
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f007 f9df 	bl	8008f0c <memset>
  if(uartHandle->Instance==USART3)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a22      	ldr	r2, [pc, #136]	@ (8001bdc <HAL_UART_MspInit+0xb4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d13c      	bne.n	8001bd2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 ff44 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b72:	f7ff fdff 	bl	8001774 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_UART_MspInit+0xb8>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_UART_MspInit+0xb8>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <HAL_UART_MspInit+0xb8>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8e:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_UART_MspInit+0xb8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a13      	ldr	r2, [pc, #76]	@ (8001be0 <HAL_UART_MspInit+0xb8>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <HAL_UART_MspInit+0xb8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ba6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001baa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <HAL_UART_MspInit+0xbc>)
 8001bce:	f000 feab 	bl	8002928 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	37b8      	adds	r7, #184	@ 0xb8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40004800 	.word	0x40004800
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020c00 	.word	0x40020c00

08001be8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001bf2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bf6:	2206      	movs	r2, #6
 8001bf8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	@ (8001c40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c2c:	f001 f841 	bl	8002cb2 <HAL_PCD_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001c36:	f7ff fd9d 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000770 	.word	0x20000770

08001c44 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ae      	sub	sp, #184	@ 0xb8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2290      	movs	r2, #144	@ 0x90
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f007 f951 	bl	8008f0c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c72:	d159      	bne.n	8001d28 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 feb5 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c90:	f7ff fd70 	bl	8001774 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b26      	ldr	r3, [pc, #152]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	4a25      	ldr	r2, [pc, #148]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca0:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cac:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4818      	ldr	r0, [pc, #96]	@ (8001d34 <HAL_PCD_MspInit+0xf0>)
 8001cd4:	f000 fe28 	bl	8002928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4810      	ldr	r0, [pc, #64]	@ (8001d34 <HAL_PCD_MspInit+0xf0>)
 8001cf4:	f000 fe18 	bl	8002928 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d02:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d04:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	4a06      	ldr	r2, [pc, #24]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <HAL_PCD_MspInit+0xec>)
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001d28:	bf00      	nop
 8001d2a:	37b8      	adds	r7, #184	@ 0xb8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000

08001d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d3c:	f7ff feb2 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d40:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d42:	490d      	ldr	r1, [pc, #52]	@ (8001d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d44:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d58:	4c0a      	ldr	r4, [pc, #40]	@ (8001d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d66:	f007 f937 	bl	8008fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6a:	f7ff fc33 	bl	80015d4 <main>
  bx  lr    
 8001d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d70:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d7c:	080091bc 	.word	0x080091bc
  ldr r2, =_sbss
 8001d80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d84:	20005e34 	.word	0x20005e34

08001d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC_IRQHandler>
	...

08001d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <HAL_Init+0x34>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_Init+0x34>)
 8001d96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <HAL_Init+0x34>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	@ (8001dc0 <HAL_Init+0x34>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f8fc 	bl	8001fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	200f      	movs	r0, #15
 8001db0:	f7ff fdd8 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fdae 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_IncTick+0x20>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_IncTick+0x24>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a04      	ldr	r2, [pc, #16]	@ (8001de8 <HAL_IncTick+0x24>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008
 8001de8:	20000c50 	.word	0x20000c50

08001dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return uwTick;
 8001df0:	4b03      	ldr	r3, [pc, #12]	@ (8001e00 <HAL_GetTick+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000c50 	.word	0x20000c50

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff ffee 	bl	8001dec <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d005      	beq.n	8001e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_Delay+0x44>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2a:	bf00      	nop
 8001e2c:	f7ff ffde 	bl	8001dec <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8f7      	bhi.n	8001e2c <HAL_Delay+0x28>
  {
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x40>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x40>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00
 8001e90:	05fa0000 	.word	0x05fa0000

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff4c 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fce:	f7ff ff61 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8001fd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7ff ffb1 	bl	8001f40 <NVIC_EncodePriority>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff80 	bl	8001eec <__NVIC_SetPriority>
}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff54 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002014:	f3bf 8f5f 	dmb	sy
}
 8002018:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800201a:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_MPU_Disable+0x28>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	4a06      	ldr	r2, [pc, #24]	@ (8002038 <HAL_MPU_Disable+0x28>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002024:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002026:	4b05      	ldr	r3, [pc, #20]	@ (800203c <HAL_MPU_Disable+0x2c>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00
 800203c:	e000ed90 	.word	0xe000ed90

08002040 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002048:	4a0b      	ldr	r2, [pc, #44]	@ (8002078 <HAL_MPU_Enable+0x38>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002052:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <HAL_MPU_Enable+0x3c>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	4a09      	ldr	r2, [pc, #36]	@ (800207c <HAL_MPU_Enable+0x3c>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800205e:	f3bf 8f4f 	dsb	sy
}
 8002062:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002064:	f3bf 8f6f 	isb	sy
}
 8002068:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed90 	.word	0xe000ed90
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	785a      	ldrb	r2, [r3, #1]
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <HAL_MPU_ConfigRegion+0x7c>)
 800208e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002090:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <HAL_MPU_ConfigRegion+0x7c>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_MPU_ConfigRegion+0x7c>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800209c:	4a17      	ldr	r2, [pc, #92]	@ (80020fc <HAL_MPU_ConfigRegion+0x7c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7b1b      	ldrb	r3, [r3, #12]
 80020a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7adb      	ldrb	r3, [r3, #11]
 80020ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7a9b      	ldrb	r3, [r3, #10]
 80020b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7b5b      	ldrb	r3, [r3, #13]
 80020be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7b9b      	ldrb	r3, [r3, #14]
 80020c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7bdb      	ldrb	r3, [r3, #15]
 80020ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7a5b      	ldrb	r3, [r3, #9]
 80020d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7a1b      	ldrb	r3, [r3, #8]
 80020de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020e8:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020ec:	6113      	str	r3, [r2, #16]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed90 	.word	0xe000ed90

08002100 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e086      	b.n	8002220 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002118:	2b00      	cmp	r3, #0
 800211a:	d106      	bne.n	800212a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7fe ffd9 	bl	80010dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	4b3f      	ldr	r3, [pc, #252]	@ (8002228 <HAL_ETH_Init+0x128>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212e:	4a3e      	ldr	r2, [pc, #248]	@ (8002228 <HAL_ETH_Init+0x128>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002134:	6453      	str	r3, [r2, #68]	@ 0x44
 8002136:	4b3c      	ldr	r3, [pc, #240]	@ (8002228 <HAL_ETH_Init+0x128>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002142:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <HAL_ETH_Init+0x12c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a39      	ldr	r2, [pc, #228]	@ (800222c <HAL_ETH_Init+0x12c>)
 8002148:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800214c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800214e:	4b37      	ldr	r3, [pc, #220]	@ (800222c <HAL_ETH_Init+0x12c>)
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4935      	ldr	r1, [pc, #212]	@ (800222c <HAL_ETH_Init+0x12c>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800215c:	4b33      	ldr	r3, [pc, #204]	@ (800222c <HAL_ETH_Init+0x12c>)
 800215e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002176:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002178:	f7ff fe38 	bl	8001dec <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800217e:	e011      	b.n	80021a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002180:	f7ff fe34 	bl	8001dec <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800218e:	d909      	bls.n	80021a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2204      	movs	r2, #4
 8002194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	22e0      	movs	r2, #224	@ 0xe0
 800219c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e03d      	b.n	8002220 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e4      	bne.n	8002180 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fa40 	bl	800263c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 faeb 	bl	8002798 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fb41 	bl	800284a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	461a      	mov	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 faa9 	bl	8002728 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80021e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <HAL_ETH_Init+0x130>)
 80021f4:	430b      	orrs	r3, r1
 80021f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800220a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2210      	movs	r2, #16
 800221a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	40013800 	.word	0x40013800
 8002230:	00020060 	.word	0x00020060

08002234 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002242:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800225c:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_ETH_IRQHandler+0x158>)
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <HAL_ETH_IRQHandler+0x56>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227e:	461a      	mov	r2, r3
 8002280:	4b43      	ldr	r3, [pc, #268]	@ (8002390 <HAL_ETH_IRQHandler+0x15c>)
 8002282:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f003 fec1 	bl	800600c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00f      	beq.n	80022b4 <HAL_ETH_IRQHandler+0x80>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a6:	461a      	mov	r2, r3
 80022a8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80022ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f003 fedc 	bl	800606c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d042      	beq.n	8002344 <HAL_ETH_IRQHandler+0x110>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03d      	beq.n	8002344 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	f043 0208 	orr.w	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01a      	beq.n	8002318 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ea:	695a      	ldr	r2, [r3, #20]
 80022ec:	4b29      	ldr	r3, [pc, #164]	@ (8002394 <HAL_ETH_IRQHandler+0x160>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002308:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800230c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	22e0      	movs	r2, #224	@ 0xe0
 8002312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002316:	e012      	b.n	800233e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002326:	4013      	ands	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002336:	461a      	mov	r2, r3
 8002338:	f248 6380 	movw	r3, #34432	@ 0x8680
 800233c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f003 fe08 	bl	8005f54 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00e      	beq.n	800236c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f81a 	bl	8002398 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002376:	4b05      	ldr	r3, [pc, #20]	@ (800238c <HAL_ETH_IRQHandler+0x158>)
 8002378:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800237c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f814 	bl	80023ac <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40013c00 	.word	0x40013c00
 8002390:	00010040 	.word	0x00010040
 8002394:	007e2000 	.word	0x007e2000

08002398 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4b53      	ldr	r3, [pc, #332]	@ (8002524 <ETH_SetMACConfig+0x164>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	7b9b      	ldrb	r3, [r3, #14]
 80023de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	7c12      	ldrb	r2, [r2, #16]
 80023e4:	2a00      	cmp	r2, #0
 80023e6:	d102      	bne.n	80023ee <ETH_SetMACConfig+0x2e>
 80023e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023ec:	e000      	b.n	80023f0 <ETH_SetMACConfig+0x30>
 80023ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80023f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	7c52      	ldrb	r2, [r2, #17]
 80023f6:	2a00      	cmp	r2, #0
 80023f8:	d102      	bne.n	8002400 <ETH_SetMACConfig+0x40>
 80023fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80023fe:	e000      	b.n	8002402 <ETH_SetMACConfig+0x42>
 8002400:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002402:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002408:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	7fdb      	ldrb	r3, [r3, #31]
 800240e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002410:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002416:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	7f92      	ldrb	r2, [r2, #30]
 800241c:	2a00      	cmp	r2, #0
 800241e:	d102      	bne.n	8002426 <ETH_SetMACConfig+0x66>
 8002420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002424:	e000      	b.n	8002428 <ETH_SetMACConfig+0x68>
 8002426:	2200      	movs	r2, #0
                        macconf->Speed |
 8002428:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7f1b      	ldrb	r3, [r3, #28]
 800242e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002430:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800243e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002446:	2a00      	cmp	r2, #0
 8002448:	d102      	bne.n	8002450 <ETH_SetMACConfig+0x90>
 800244a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244e:	e000      	b.n	8002452 <ETH_SetMACConfig+0x92>
 8002450:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002452:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	7bdb      	ldrb	r3, [r3, #15]
 8002458:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800245a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002460:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002468:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800246a:	4313      	orrs	r3, r2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff fcbe 	bl	8001e04 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800249e:	4013      	ands	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	d101      	bne.n	80024b6 <ETH_SetMACConfig+0xf6>
 80024b2:	2280      	movs	r2, #128	@ 0x80
 80024b4:	e000      	b.n	80024b8 <ETH_SetMACConfig+0xf8>
 80024b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80024c6:	2a01      	cmp	r2, #1
 80024c8:	d101      	bne.n	80024ce <ETH_SetMACConfig+0x10e>
 80024ca:	2208      	movs	r2, #8
 80024cc:	e000      	b.n	80024d0 <ETH_SetMACConfig+0x110>
 80024ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80024d8:	2a01      	cmp	r2, #1
 80024da:	d101      	bne.n	80024e0 <ETH_SetMACConfig+0x120>
 80024dc:	2204      	movs	r2, #4
 80024de:	e000      	b.n	80024e2 <ETH_SetMACConfig+0x122>
 80024e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80024ea:	2a01      	cmp	r2, #1
 80024ec:	d101      	bne.n	80024f2 <ETH_SetMACConfig+0x132>
 80024ee:	2202      	movs	r2, #2
 80024f0:	e000      	b.n	80024f4 <ETH_SetMACConfig+0x134>
 80024f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024f4:	4313      	orrs	r3, r2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff fc79 	bl	8001e04 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	fd20810f 	.word	0xfd20810f

08002528 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4b3d      	ldr	r3, [pc, #244]	@ (8002638 <ETH_SetDMAConfig+0x110>)
 8002542:	4013      	ands	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	7b1b      	ldrb	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <ETH_SetDMAConfig+0x2c>
 800254e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002552:	e000      	b.n	8002556 <ETH_SetDMAConfig+0x2e>
 8002554:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7b5b      	ldrb	r3, [r3, #13]
 800255a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800255c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	7f52      	ldrb	r2, [r2, #29]
 8002562:	2a00      	cmp	r2, #0
 8002564:	d102      	bne.n	800256c <ETH_SetDMAConfig+0x44>
 8002566:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800256a:	e000      	b.n	800256e <ETH_SetDMAConfig+0x46>
 800256c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800256e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	7b9b      	ldrb	r3, [r3, #14]
 8002574:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002576:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800257c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	7f1b      	ldrb	r3, [r3, #28]
 8002582:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002584:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7f9b      	ldrb	r3, [r3, #30]
 800258a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800258c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002592:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800259a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800259c:	4313      	orrs	r3, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ac:	461a      	mov	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025be:	2001      	movs	r0, #1
 80025c0:	f7ff fc20 	bl	8001e04 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025cc:	461a      	mov	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002600:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800260a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800260e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800261c:	2001      	movs	r0, #1
 800261e:	f7ff fbf1 	bl	8001e04 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	f8de3f23 	.word	0xf8de3f23

0800263c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b0a6      	sub	sp, #152	@ 0x98
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002650:	2300      	movs	r3, #0
 8002652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800267e:	2300      	movs	r3, #0
 8002680:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002688:	2300      	movs	r3, #0
 800268a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff fe7f 	bl	80023c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026c2:	2301      	movs	r3, #1
 80026c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026c6:	2301      	movs	r3, #1
 80026c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002702:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800270a:	2300      	movs	r3, #0
 800270c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff05 	bl	8002528 <ETH_SetDMAConfig>
}
 800271e:	bf00      	nop
 8002720:	3798      	adds	r7, #152	@ 0x98
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3305      	adds	r3, #5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	3204      	adds	r2, #4
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <ETH_MACAddressConfig+0x68>)
 800274a:	4413      	add	r3, r2
 800274c:	461a      	mov	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3303      	adds	r3, #3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	061a      	lsls	r2, r3, #24
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3302      	adds	r3, #2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3301      	adds	r3, #1
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	4313      	orrs	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <ETH_MACAddressConfig+0x6c>)
 800277a:	4413      	add	r3, r2
 800277c:	461a      	mov	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40028040 	.word	0x40028040
 8002794:	40028044 	.word	0x40028044

08002798 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e03e      	b.n	8002824 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	3206      	adds	r2, #6
 80027d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d80c      	bhi.n	8002808 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	e004      	b.n	8002812 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	461a      	mov	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3301      	adds	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d9bd      	bls.n	80027a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800283c:	611a      	str	r2, [r3, #16]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e048      	b.n	80028ea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002894:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	3212      	adds	r2, #18
 80028b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d80c      	bhi.n	80028da <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6919      	ldr	r1, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	e004      	b.n	80028e4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	3301      	adds	r3, #1
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d9b3      	bls.n	8002858 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800291a:	60da      	str	r2, [r3, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	@ 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	e175      	b.n	8002c34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002948:	2201      	movs	r2, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	f040 8164 	bne.w	8002c2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d005      	beq.n	800297e <HAL_GPIO_Init+0x56>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d130      	bne.n	80029e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2203      	movs	r2, #3
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b4:	2201      	movs	r2, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 0201 	and.w	r2, r3, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d017      	beq.n	8002a1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d123      	bne.n	8002a70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3208      	adds	r2, #8
 8002a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	220f      	movs	r2, #15
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	08da      	lsrs	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3208      	adds	r2, #8
 8002a6a:	69b9      	ldr	r1, [r7, #24]
 8002a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0203 	and.w	r2, r3, #3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80be 	beq.w	8002c2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab2:	4b66      	ldr	r3, [pc, #408]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a65      	ldr	r2, [pc, #404]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <HAL_GPIO_Init+0x324>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002aca:	4a61      	ldr	r2, [pc, #388]	@ (8002c50 <HAL_GPIO_Init+0x328>)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a58      	ldr	r2, [pc, #352]	@ (8002c54 <HAL_GPIO_Init+0x32c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d037      	beq.n	8002b66 <HAL_GPIO_Init+0x23e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a57      	ldr	r2, [pc, #348]	@ (8002c58 <HAL_GPIO_Init+0x330>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d031      	beq.n	8002b62 <HAL_GPIO_Init+0x23a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a56      	ldr	r2, [pc, #344]	@ (8002c5c <HAL_GPIO_Init+0x334>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d02b      	beq.n	8002b5e <HAL_GPIO_Init+0x236>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a55      	ldr	r2, [pc, #340]	@ (8002c60 <HAL_GPIO_Init+0x338>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d025      	beq.n	8002b5a <HAL_GPIO_Init+0x232>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a54      	ldr	r2, [pc, #336]	@ (8002c64 <HAL_GPIO_Init+0x33c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01f      	beq.n	8002b56 <HAL_GPIO_Init+0x22e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a53      	ldr	r2, [pc, #332]	@ (8002c68 <HAL_GPIO_Init+0x340>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d019      	beq.n	8002b52 <HAL_GPIO_Init+0x22a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a52      	ldr	r2, [pc, #328]	@ (8002c6c <HAL_GPIO_Init+0x344>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0x226>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a51      	ldr	r2, [pc, #324]	@ (8002c70 <HAL_GPIO_Init+0x348>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00d      	beq.n	8002b4a <HAL_GPIO_Init+0x222>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a50      	ldr	r2, [pc, #320]	@ (8002c74 <HAL_GPIO_Init+0x34c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <HAL_GPIO_Init+0x21e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a4f      	ldr	r2, [pc, #316]	@ (8002c78 <HAL_GPIO_Init+0x350>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_GPIO_Init+0x21a>
 8002b3e:	2309      	movs	r3, #9
 8002b40:	e012      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b42:	230a      	movs	r3, #10
 8002b44:	e010      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b46:	2308      	movs	r3, #8
 8002b48:	e00e      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e00c      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b4e:	2306      	movs	r3, #6
 8002b50:	e00a      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b52:	2305      	movs	r3, #5
 8002b54:	e008      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b56:	2304      	movs	r3, #4
 8002b58:	e006      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e004      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_GPIO_Init+0x240>
 8002b66:	2300      	movs	r3, #0
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	f002 0203 	and.w	r2, r2, #3
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	4093      	lsls	r3, r2
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b78:	4935      	ldr	r1, [pc, #212]	@ (8002c50 <HAL_GPIO_Init+0x328>)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b86:	4b3d      	ldr	r3, [pc, #244]	@ (8002c7c <HAL_GPIO_Init+0x354>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002baa:	4a34      	ldr	r2, [pc, #208]	@ (8002c7c <HAL_GPIO_Init+0x354>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb0:	4b32      	ldr	r3, [pc, #200]	@ (8002c7c <HAL_GPIO_Init+0x354>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd4:	4a29      	ldr	r2, [pc, #164]	@ (8002c7c <HAL_GPIO_Init+0x354>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bda:	4b28      	ldr	r3, [pc, #160]	@ (8002c7c <HAL_GPIO_Init+0x354>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002c7c <HAL_GPIO_Init+0x354>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c04:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <HAL_GPIO_Init+0x354>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c28:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <HAL_GPIO_Init+0x354>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3301      	adds	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	f67f ae86 	bls.w	8002948 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3724      	adds	r7, #36	@ 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40021400 	.word	0x40021400
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40021c00 	.word	0x40021c00
 8002c74:	40022000 	.word	0x40022000
 8002c78:	40022400 	.word	0x40022400
 8002c7c:	40013c00 	.word	0x40013c00

08002c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c9c:	e003      	b.n	8002ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	619a      	str	r2, [r3, #24]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af02      	add	r7, sp, #8
 8002cb8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e108      	b.n	8002ed6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe ffb0 	bl	8001c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cf2:	d102      	bne.n	8002cfa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fe6a 	bl	80059d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7c1a      	ldrb	r2, [r3, #16]
 8002d0c:	f88d 2000 	strb.w	r2, [sp]
 8002d10:	3304      	adds	r3, #4
 8002d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d14:	f002 fe06 	bl	8005924 <USB_CoreInit>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0d5      	b.n	8002ed6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 fe62 	bl	80059fa <USB_SetCurrentMode>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0c6      	b.n	8002ed6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e04a      	b.n	8002de4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3315      	adds	r3, #21
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3314      	adds	r3, #20
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	b298      	uxth	r0, r3
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	332e      	adds	r3, #46	@ 0x2e
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3318      	adds	r3, #24
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	331c      	adds	r3, #28
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3320      	adds	r3, #32
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3324      	adds	r3, #36	@ 0x24
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	3301      	adds	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	791b      	ldrb	r3, [r3, #4]
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d3af      	bcc.n	8002d4e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e044      	b.n	8002e7e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002df4:	7bfa      	ldrb	r2, [r7, #15]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	791b      	ldrb	r3, [r3, #4]
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d3b5      	bcc.n	8002df4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7c1a      	ldrb	r2, [r3, #16]
 8002e90:	f88d 2000 	strb.w	r2, [sp]
 8002e94:	3304      	adds	r3, #4
 8002e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e98:	f002 fdfc 	bl	8005a94 <USB_DevInit>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e013      	b.n	8002ed6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7b1b      	ldrb	r3, [r3, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d102      	bne.n	8002eca <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f80b 	bl	8002ee0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 ffb7 	bl	8005e42 <USB_DevDisconnect>

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_PCDEx_ActivateLPM+0x44>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	10000003 	.word	0x10000003

08002f28 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a04      	ldr	r2, [pc, #16]	@ (8002f44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40007000 	.word	0x40007000

08002f48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f76:	f7fe ff39 	bl	8001dec <HAL_GetTick>
 8002f7a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f7c:	e009      	b.n	8002f92 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f7e:	f7fe ff35 	bl	8001dec <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f8c:	d901      	bls.n	8002f92 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e022      	b.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f92:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f9e:	d1ee      	bne.n	8002f7e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002fa0:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002faa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fac:	f7fe ff1e 	bl	8001dec <HAL_GetTick>
 8002fb0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fb2:	e009      	b.n	8002fc8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fb4:	f7fe ff1a 	bl	8001dec <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fc2:	d901      	bls.n	8002fc8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e007      	b.n	8002fd8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e29b      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8087 	beq.w	800311a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800300c:	4b96      	ldr	r3, [pc, #600]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b04      	cmp	r3, #4
 8003016:	d00c      	beq.n	8003032 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003018:	4b93      	ldr	r3, [pc, #588]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d112      	bne.n	800304a <HAL_RCC_OscConfig+0x62>
 8003024:	4b90      	ldr	r3, [pc, #576]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003030:	d10b      	bne.n	800304a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003032:	4b8d      	ldr	r3, [pc, #564]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d06c      	beq.n	8003118 <HAL_RCC_OscConfig+0x130>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d168      	bne.n	8003118 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e275      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003052:	d106      	bne.n	8003062 <HAL_RCC_OscConfig+0x7a>
 8003054:	4b84      	ldr	r3, [pc, #528]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a83      	ldr	r2, [pc, #524]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e02e      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x9c>
 800306a:	4b7f      	ldr	r3, [pc, #508]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a7e      	ldr	r2, [pc, #504]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b7c      	ldr	r3, [pc, #496]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7b      	ldr	r2, [pc, #492]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800307c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e01d      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0xc0>
 800308e:	4b76      	ldr	r3, [pc, #472]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a75      	ldr	r2, [pc, #468]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003094:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	4b73      	ldr	r3, [pc, #460]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a72      	ldr	r2, [pc, #456]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0xd8>
 80030a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6b      	ldr	r2, [pc, #428]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe fe90 	bl	8001dec <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe fe8c 	bl	8001dec <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	@ 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e229      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b61      	ldr	r3, [pc, #388]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe8>
 80030ee:	e014      	b.n	800311a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe fe7c 	bl	8001dec <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe fe78 	bl	8001dec <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e215      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	4b57      	ldr	r3, [pc, #348]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x110>
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d069      	beq.n	80031fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003126:	4b50      	ldr	r3, [pc, #320]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003132:	4b4d      	ldr	r3, [pc, #308]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b08      	cmp	r3, #8
 800313c:	d11c      	bne.n	8003178 <HAL_RCC_OscConfig+0x190>
 800313e:	4b4a      	ldr	r3, [pc, #296]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d116      	bne.n	8003178 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_RCC_OscConfig+0x17a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e1e9      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003162:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	493d      	ldr	r1, [pc, #244]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003176:	e040      	b.n	80031fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d023      	beq.n	80031c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a38      	ldr	r2, [pc, #224]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe fe2e 	bl	8001dec <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe fe2a 	bl	8001dec <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e1c7      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a6:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4929      	ldr	r1, [pc, #164]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]
 80031c6:	e018      	b.n	80031fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c8:	4b27      	ldr	r3, [pc, #156]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe fe0a 	bl	8001dec <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031dc:	f7fe fe06 	bl	8001dec <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e1a3      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d038      	beq.n	8003278 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d019      	beq.n	8003242 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b16      	ldr	r3, [pc, #88]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003212:	4a15      	ldr	r2, [pc, #84]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fe fde7 	bl	8001dec <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fe fde3 	bl	8001dec <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e180      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003234:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x23a>
 8003240:	e01a      	b.n	8003278 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	4a08      	ldr	r2, [pc, #32]	@ (8003268 <HAL_RCC_OscConfig+0x280>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324e:	f7fe fdcd 	bl	8001dec <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe fdc9 	bl	8001dec <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d903      	bls.n	800326c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e166      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
 8003268:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	4b92      	ldr	r3, [pc, #584]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80a4 	beq.w	80033ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003286:	4b8c      	ldr	r3, [pc, #560]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b89      	ldr	r3, [pc, #548]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4a88      	ldr	r2, [pc, #544]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	@ 0x40
 800329e:	4b86      	ldr	r3, [pc, #536]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ae:	4b83      	ldr	r3, [pc, #524]	@ (80034bc <HAL_RCC_OscConfig+0x4d4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032ba:	4b80      	ldr	r3, [pc, #512]	@ (80034bc <HAL_RCC_OscConfig+0x4d4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7f      	ldr	r2, [pc, #508]	@ (80034bc <HAL_RCC_OscConfig+0x4d4>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fe fd91 	bl	8001dec <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fe fd8d 	bl	8001dec <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b64      	cmp	r3, #100	@ 0x64
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e12a      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e0:	4b76      	ldr	r3, [pc, #472]	@ (80034bc <HAL_RCC_OscConfig+0x4d4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d106      	bne.n	8003302 <HAL_RCC_OscConfig+0x31a>
 80032f4:	4b70      	ldr	r3, [pc, #448]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	4a6f      	ldr	r2, [pc, #444]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003300:	e02d      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x33c>
 800330a:	4b6b      	ldr	r3, [pc, #428]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a6a      	ldr	r2, [pc, #424]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	4b68      	ldr	r3, [pc, #416]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a67      	ldr	r2, [pc, #412]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
 8003322:	e01c      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_OscConfig+0x35e>
 800332c:	4b62      	ldr	r3, [pc, #392]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a61      	ldr	r2, [pc, #388]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
 8003338:	4b5f      	ldr	r3, [pc, #380]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	4a5e      	ldr	r2, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70
 8003344:	e00b      	b.n	800335e <HAL_RCC_OscConfig+0x376>
 8003346:	4b5c      	ldr	r3, [pc, #368]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	4a5b      	ldr	r2, [pc, #364]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
 8003352:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d015      	beq.n	8003392 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fd41 	bl	8001dec <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fd3d 	bl	8001dec <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0d8      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003384:	4b4c      	ldr	r3, [pc, #304]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ee      	beq.n	800336e <HAL_RCC_OscConfig+0x386>
 8003390:	e014      	b.n	80033bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe fd2b 	bl	8001dec <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe fd27 	bl	8001dec <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0c2      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	4b41      	ldr	r3, [pc, #260]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ee      	bne.n	800339a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c2:	4b3d      	ldr	r3, [pc, #244]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	4a3c      	ldr	r2, [pc, #240]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80ae 	beq.w	8003534 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d8:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d06d      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d14b      	bne.n	8003484 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ec:	4b32      	ldr	r3, [pc, #200]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a31      	ldr	r2, [pc, #196]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe fcf8 	bl	8001dec <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fcf4 	bl	8001dec <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e091      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b29      	ldr	r3, [pc, #164]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	071b      	lsls	r3, r3, #28
 800344a:	491b      	ldr	r1, [pc, #108]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fcc6 	bl	8001dec <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fcc2 	bl	8001dec <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e05f      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x47c>
 8003482:	e057      	b.n	8003534 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0b      	ldr	r2, [pc, #44]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 800348a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe fcac 	bl	8001dec <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe fca8 	bl	8001dec <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e045      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <HAL_RCC_OscConfig+0x4d0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x4b0>
 80034b6:	e03d      	b.n	8003534 <HAL_RCC_OscConfig+0x54c>
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003540 <HAL_RCC_OscConfig+0x558>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d030      	beq.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d129      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d122      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034f0:	4013      	ands	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d119      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003506:	085b      	lsrs	r3, r3, #1
 8003508:	3b01      	subs	r3, #1
 800350a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350c:	429a      	cmp	r2, r3
 800350e:	d10f      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0d0      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b6a      	ldr	r3, [pc, #424]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b67      	ldr	r3, [pc, #412]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 020f 	bic.w	r2, r3, #15
 8003572:	4965      	ldr	r1, [pc, #404]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b63      	ldr	r3, [pc, #396]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b59      	ldr	r3, [pc, #356]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4b53      	ldr	r3, [pc, #332]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4a52      	ldr	r2, [pc, #328]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b50      	ldr	r3, [pc, #320]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	494d      	ldr	r1, [pc, #308]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d040      	beq.n	8003668 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d115      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e073      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b3d      	ldr	r3, [pc, #244]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b39      	ldr	r3, [pc, #228]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4936      	ldr	r1, [pc, #216]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003634:	4313      	orrs	r3, r2
 8003636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fe fbd8 	bl	8001dec <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe fbd4 	bl	8001dec <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e053      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b2d      	ldr	r3, [pc, #180]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b27      	ldr	r3, [pc, #156]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d210      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 020f 	bic.w	r2, r3, #15
 800367e:	4922      	ldr	r1, [pc, #136]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b20      	ldr	r3, [pc, #128]	@ (8003708 <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e032      	b.n	80036fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b19      	ldr	r3, [pc, #100]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4916      	ldr	r1, [pc, #88]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036c2:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	490e      	ldr	r1, [pc, #56]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d6:	f000 f821 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_ClockConfig+0x1c8>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	@ (8003710 <HAL_RCC_ClockConfig+0x1cc>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	4a09      	ldr	r2, [pc, #36]	@ (8003714 <HAL_RCC_ClockConfig+0x1d0>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036f2:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <HAL_RCC_ClockConfig+0x1d4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe f934 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40023c00 	.word	0x40023c00
 800370c:	40023800 	.word	0x40023800
 8003710:	08009194 	.word	0x08009194
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003720:	b094      	sub	sp, #80	@ 0x50
 8003722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	647b      	str	r3, [r7, #68]	@ 0x44
 8003728:	2300      	movs	r3, #0
 800372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800372c:	2300      	movs	r3, #0
 800372e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003734:	4b79      	ldr	r3, [pc, #484]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d00d      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x40>
 8003740:	2b08      	cmp	r3, #8
 8003742:	f200 80e1 	bhi.w	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_RCC_GetSysClockFreq+0x34>
 800374a:	2b04      	cmp	r3, #4
 800374c:	d003      	beq.n	8003756 <HAL_RCC_GetSysClockFreq+0x3a>
 800374e:	e0db      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 8003752:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003754:	e0db      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003756:	4b73      	ldr	r3, [pc, #460]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x208>)
 8003758:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375a:	e0d8      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4b6f      	ldr	r3, [pc, #444]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003764:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003766:	4b6d      	ldr	r3, [pc, #436]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d063      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003772:	4b6a      	ldr	r3, [pc, #424]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	099b      	lsrs	r3, r3, #6
 8003778:	2200      	movs	r2, #0
 800377a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800377c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
 8003786:	2300      	movs	r3, #0
 8003788:	637b      	str	r3, [r7, #52]	@ 0x34
 800378a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800378e:	4622      	mov	r2, r4
 8003790:	462b      	mov	r3, r5
 8003792:	f04f 0000 	mov.w	r0, #0
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a0:	0150      	lsls	r0, r2, #5
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4621      	mov	r1, r4
 80037a8:	1a51      	subs	r1, r2, r1
 80037aa:	6139      	str	r1, [r7, #16]
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb63 0301 	sbc.w	r3, r3, r1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c0:	4659      	mov	r1, fp
 80037c2:	018b      	lsls	r3, r1, #6
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037ca:	4651      	mov	r1, sl
 80037cc:	018a      	lsls	r2, r1, #6
 80037ce:	4651      	mov	r1, sl
 80037d0:	ebb2 0801 	subs.w	r8, r2, r1
 80037d4:	4659      	mov	r1, fp
 80037d6:	eb63 0901 	sbc.w	r9, r3, r1
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ee:	4690      	mov	r8, r2
 80037f0:	4699      	mov	r9, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	eb18 0303 	adds.w	r3, r8, r3
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	462b      	mov	r3, r5
 80037fc:	eb49 0303 	adc.w	r3, r9, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800380e:	4629      	mov	r1, r5
 8003810:	024b      	lsls	r3, r1, #9
 8003812:	4621      	mov	r1, r4
 8003814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003818:	4621      	mov	r1, r4
 800381a:	024a      	lsls	r2, r1, #9
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800382c:	f7fc fd08 	bl	8000240 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	e058      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383a:	4b38      	ldr	r3, [pc, #224]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	099b      	lsrs	r3, r3, #6
 8003840:	2200      	movs	r2, #0
 8003842:	4618      	mov	r0, r3
 8003844:	4611      	mov	r1, r2
 8003846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800384a:	623b      	str	r3, [r7, #32]
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0159      	lsls	r1, r3, #5
 8003862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003866:	0150      	lsls	r0, r2, #5
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4641      	mov	r1, r8
 800386e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003872:	4649      	mov	r1, r9
 8003874:	eb63 0b01 	sbc.w	fp, r3, r1
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800388c:	ebb2 040a 	subs.w	r4, r2, sl
 8003890:	eb63 050b 	sbc.w	r5, r3, fp
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	00eb      	lsls	r3, r5, #3
 800389e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a2:	00e2      	lsls	r2, r4, #3
 80038a4:	4614      	mov	r4, r2
 80038a6:	461d      	mov	r5, r3
 80038a8:	4643      	mov	r3, r8
 80038aa:	18e3      	adds	r3, r4, r3
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	464b      	mov	r3, r9
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038c2:	4629      	mov	r1, r5
 80038c4:	028b      	lsls	r3, r1, #10
 80038c6:	4621      	mov	r1, r4
 80038c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038cc:	4621      	mov	r1, r4
 80038ce:	028a      	lsls	r2, r1, #10
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	61fa      	str	r2, [r7, #28]
 80038dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e0:	f7fc fcae 	bl	8000240 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038ec:	4b0b      	ldr	r3, [pc, #44]	@ (800391c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	3301      	adds	r3, #1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003906:	e002      	b.n	800390e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <HAL_RCC_GetSysClockFreq+0x204>)
 800390a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800390c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003910:	4618      	mov	r0, r3
 8003912:	3750      	adds	r7, #80	@ 0x50
 8003914:	46bd      	mov	sp, r7
 8003916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	00f42400 	.word	0x00f42400
 8003924:	007a1200 	.word	0x007a1200

08003928 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800392c:	4b03      	ldr	r3, [pc, #12]	@ (800393c <HAL_RCC_GetHCLKFreq+0x14>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000000 	.word	0x20000000

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003944:	f7ff fff0 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b05      	ldr	r3, [pc, #20]	@ (8003960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	0a9b      	lsrs	r3, r3, #10
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	4903      	ldr	r1, [pc, #12]	@ (8003964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40023800 	.word	0x40023800
 8003964:	080091a4 	.word	0x080091a4

08003968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800396c:	f7ff ffdc 	bl	8003928 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0b5b      	lsrs	r3, r3, #13
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	@ (800398c <HAL_RCC_GetPCLK2Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	080091a4 	.word	0x080091a4

08003990 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	220f      	movs	r2, #15
 800399e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039a0:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039ac:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039b8:	4b0c      	ldr	r3, [pc, #48]	@ (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039c4:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039d2:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <HAL_RCC_GetClockConfig+0x60>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d012      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a1c:	4b69      	ldr	r3, [pc, #420]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a68      	ldr	r2, [pc, #416]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a26:	6093      	str	r3, [r2, #8]
 8003a28:	4b66      	ldr	r3, [pc, #408]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a30:	4964      	ldr	r1, [pc, #400]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d017      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a54:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5c:	4959      	ldr	r1, [pc, #356]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d017      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a90:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	494a      	ldr	r1, [pc, #296]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aa8:	d101      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 808b 	beq.w	8003bee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	4a39      	ldr	r2, [pc, #228]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ae4:	4b37      	ldr	r3, [pc, #220]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003af0:	4b35      	ldr	r3, [pc, #212]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a34      	ldr	r2, [pc, #208]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afc:	f7fe f976 	bl	8001dec <HAL_GetTick>
 8003b00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7fe f972 	bl	8001dec <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e38f      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b16:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b22:	4b28      	ldr	r3, [pc, #160]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d035      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d02e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b40:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b54:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b56:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b62:	4a18      	ldr	r2, [pc, #96]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b68:	4b16      	ldr	r3, [pc, #88]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d114      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe f93a 	bl	8001dec <HAL_GetTick>
 8003b78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe f936 	bl	8001dec <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e351      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b92:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0ee      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003baa:	d111      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003bb8:	4b04      	ldr	r3, [pc, #16]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bba:	400b      	ands	r3, r1
 8003bbc:	4901      	ldr	r1, [pc, #4]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	0ffffcff 	.word	0x0ffffcff
 8003bd0:	4bac      	ldr	r3, [pc, #688]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4aab      	ldr	r2, [pc, #684]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bda:	6093      	str	r3, [r2, #8]
 8003bdc:	4ba9      	ldr	r3, [pc, #676]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	49a6      	ldr	r1, [pc, #664]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfa:	4ba2      	ldr	r3, [pc, #648]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c00:	4aa0      	ldr	r2, [pc, #640]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	499b      	ldr	r1, [pc, #620]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c28:	4b96      	ldr	r3, [pc, #600]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c36:	4993      	ldr	r1, [pc, #588]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c4a:	4b8e      	ldr	r3, [pc, #568]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c58:	498a      	ldr	r1, [pc, #552]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c6c:	4b85      	ldr	r3, [pc, #532]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c7a:	4982      	ldr	r1, [pc, #520]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	4979      	ldr	r1, [pc, #484]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb0:	4b74      	ldr	r3, [pc, #464]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	4971      	ldr	r1, [pc, #452]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	f023 020c 	bic.w	r2, r3, #12
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce0:	4968      	ldr	r1, [pc, #416]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf4:	4b63      	ldr	r3, [pc, #396]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d02:	4960      	ldr	r1, [pc, #384]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d16:	4b5b      	ldr	r3, [pc, #364]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d24:	4957      	ldr	r1, [pc, #348]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d38:	4b52      	ldr	r3, [pc, #328]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d46:	494f      	ldr	r1, [pc, #316]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d60:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	4946      	ldr	r1, [pc, #280]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d7c:	4b41      	ldr	r3, [pc, #260]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d82:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8a:	493e      	ldr	r1, [pc, #248]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d9e:	4b39      	ldr	r3, [pc, #228]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dac:	4935      	ldr	r1, [pc, #212]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dc0:	4b30      	ldr	r3, [pc, #192]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dce:	492d      	ldr	r1, [pc, #180]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d011      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003de2:	4b28      	ldr	r3, [pc, #160]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003df0:	4924      	ldr	r1, [pc, #144]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e22:	4b18      	ldr	r3, [pc, #96]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e30:	4914      	ldr	r1, [pc, #80]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e54:	490b      	ldr	r1, [pc, #44]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e68:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e78:	4902      	ldr	r1, [pc, #8]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e80:	e002      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00b      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e94:	4b8a      	ldr	r3, [pc, #552]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	4986      	ldr	r1, [pc, #536]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003eb8:	4b81      	ldr	r3, [pc, #516]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ebe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ec8:	497d      	ldr	r1, [pc, #500]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d006      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80d6 	beq.w	8004090 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ee4:	4b76      	ldr	r3, [pc, #472]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a75      	ldr	r2, [pc, #468]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fd ff7c 	bl	8001dec <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ef8:	f7fd ff78 	bl	8001dec <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	@ 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e195      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d021      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11d      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f2a:	4b65      	ldr	r3, [pc, #404]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f38:	4b61      	ldr	r3, [pc, #388]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f3e:	0e1b      	lsrs	r3, r3, #24
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4958      	ldr	r1, [pc, #352]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02e      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f90:	d129      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f92:	4b4b      	ldr	r3, [pc, #300]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f98:	0c1b      	lsrs	r3, r3, #16
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fa0:	4b47      	ldr	r3, [pc, #284]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa6:	0f1b      	lsrs	r3, r3, #28
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	019a      	lsls	r2, r3, #6
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	071b      	lsls	r3, r3, #28
 8003fc6:	493e      	ldr	r1, [pc, #248]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fce:	4b3c      	ldr	r3, [pc, #240]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd4:	f023 021f 	bic.w	r2, r3, #31
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	4938      	ldr	r1, [pc, #224]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01d      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff2:	4b33      	ldr	r3, [pc, #204]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ff8:	0e1b      	lsrs	r3, r3, #24
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004000:	4b2f      	ldr	r3, [pc, #188]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004006:	0f1b      	lsrs	r3, r3, #28
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	019a      	lsls	r2, r3, #6
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	041b      	lsls	r3, r3, #16
 800401a:	431a      	orrs	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	071b      	lsls	r3, r3, #28
 8004026:	4926      	ldr	r1, [pc, #152]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d011      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	019a      	lsls	r2, r3, #6
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	071b      	lsls	r3, r3, #28
 8004056:	491a      	ldr	r1, [pc, #104]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800405e:	4b18      	ldr	r3, [pc, #96]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004064:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406a:	f7fd febf 	bl	8001dec <HAL_GetTick>
 800406e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004072:	f7fd febb 	bl	8001dec <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b64      	cmp	r3, #100	@ 0x64
 800407e:	d901      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e0d8      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004084:	4b0e      	ldr	r3, [pc, #56]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	f040 80ce 	bne.w	8004234 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a08      	ldr	r2, [pc, #32]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fd fea2 	bl	8001dec <HAL_GetTick>
 80040a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040aa:	e00b      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040ac:	f7fd fe9e 	bl	8001dec <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	@ 0x64
 80040b8:	d904      	bls.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0bb      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d0:	d0ec      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d02e      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d12a      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040fa:	4b51      	ldr	r3, [pc, #324]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004108:	4b4d      	ldr	r3, [pc, #308]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	0f1b      	lsrs	r3, r3, #28
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	019a      	lsls	r2, r3, #6
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	431a      	orrs	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	071b      	lsls	r3, r3, #28
 800412e:	4944      	ldr	r1, [pc, #272]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004136:	4b42      	ldr	r3, [pc, #264]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004138:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800413c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	3b01      	subs	r3, #1
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	493d      	ldr	r1, [pc, #244]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d022      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004164:	d11d      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004166:	4b36      	ldr	r3, [pc, #216]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800416c:	0e1b      	lsrs	r3, r3, #24
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004174:	4b32      	ldr	r3, [pc, #200]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	0f1b      	lsrs	r3, r3, #28
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	019a      	lsls	r2, r3, #6
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	431a      	orrs	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	431a      	orrs	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	071b      	lsls	r3, r3, #28
 800419a:	4929      	ldr	r1, [pc, #164]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d028      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ae:	4b24      	ldr	r3, [pc, #144]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b4:	0e1b      	lsrs	r3, r3, #24
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041bc:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	019a      	lsls	r2, r3, #6
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	431a      	orrs	r2, r3
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	071b      	lsls	r3, r3, #28
 80041e2:	4917      	ldr	r1, [pc, #92]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	4911      	ldr	r1, [pc, #68]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004200:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a0e      	ldr	r2, [pc, #56]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fd fdee 	bl	8001dec <HAL_GetTick>
 8004210:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004214:	f7fd fdea 	bl	8001dec <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b64      	cmp	r3, #100	@ 0x64
 8004220:	d901      	bls.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e007      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800422e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004232:	d1ef      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800

08004244 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e01c      	b.n	8004290 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	795b      	ldrb	r3, [r3, #5]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd fa9e 	bl	80017a8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0204 	orr.w	r2, r2, #4
 8004280:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e09d      	b.n	80043e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ba:	d009      	beq.n	80042d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	61da      	str	r2, [r3, #28]
 80042c2:	e005      	b.n	80042d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd face 	bl	800188c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004306:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004310:	d902      	bls.n	8004318 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e002      	b.n	800431e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800431c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004326:	d007      	beq.n	8004338 <HAL_SPI_Init+0xa0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004330:	d002      	beq.n	8004338 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437a:	ea42 0103 	orr.w	r1, r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	0c1b      	lsrs	r3, r3, #16
 8004394:	f003 0204 	and.w	r2, r3, #4
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043b4:	ea42 0103 	orr.w	r1, r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b088      	sub	sp, #32
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043fe:	f7fd fcf5 	bl	8001dec <HAL_GetTick>
 8004402:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d001      	beq.n	8004418 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004414:	2302      	movs	r3, #2
 8004416:	e15c      	b.n	80046d2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_SPI_Transmit+0x36>
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e154      	b.n	80046d2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_SPI_Transmit+0x48>
 8004432:	2302      	movs	r3, #2
 8004434:	e14d      	b.n	80046d2 <HAL_SPI_Transmit+0x2e4>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2203      	movs	r2, #3
 8004442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004488:	d10f      	bne.n	80044aa <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b4:	2b40      	cmp	r3, #64	@ 0x40
 80044b6:	d007      	beq.n	80044c8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044d0:	d952      	bls.n	8004578 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_SPI_Transmit+0xf2>
 80044da:	8b7b      	ldrh	r3, [r7, #26]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d145      	bne.n	800456c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	881a      	ldrh	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004504:	e032      	b.n	800456c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d112      	bne.n	800453a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	881a      	ldrh	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	1c9a      	adds	r2, r3, #2
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004538:	e018      	b.n	800456c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453a:	f7fd fc57 	bl	8001dec <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d803      	bhi.n	8004552 <HAL_SPI_Transmit+0x164>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d102      	bne.n	8004558 <HAL_SPI_Transmit+0x16a>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0b2      	b.n	80046d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1c7      	bne.n	8004506 <HAL_SPI_Transmit+0x118>
 8004576:	e083      	b.n	8004680 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_SPI_Transmit+0x198>
 8004580:	8b7b      	ldrh	r3, [r7, #26]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d177      	bne.n	8004676 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d912      	bls.n	80045b6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	881a      	ldrh	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b02      	subs	r3, #2
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045b4:	e05f      	b.n	8004676 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	7812      	ldrb	r2, [r2, #0]
 80045c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045dc:	e04b      	b.n	8004676 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d12b      	bne.n	8004644 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d912      	bls.n	800461c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	881a      	ldrh	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	1c9a      	adds	r2, r3, #2
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b02      	subs	r3, #2
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800461a:	e02c      	b.n	8004676 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	7812      	ldrb	r2, [r2, #0]
 8004628:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004642:	e018      	b.n	8004676 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004644:	f7fd fbd2 	bl	8001dec <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d803      	bhi.n	800465c <HAL_SPI_Transmit+0x26e>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d102      	bne.n	8004662 <HAL_SPI_Transmit+0x274>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e02d      	b.n	80046d2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1ae      	bne.n	80045de <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f947 	bl	8004918 <SPI_EndRxTxTransaction>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046ec:	f7fd fb7e 	bl	8001dec <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	4413      	add	r3, r2
 80046fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046fc:	f7fd fb76 	bl	8001dec <HAL_GetTick>
 8004700:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004702:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	015b      	lsls	r3, r3, #5
 8004708:	0d1b      	lsrs	r3, r3, #20
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	fb02 f303 	mul.w	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004712:	e055      	b.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d051      	beq.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800471c:	f7fd fb66 	bl	8001dec <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	69fa      	ldr	r2, [r7, #28]
 8004728:	429a      	cmp	r2, r3
 800472a:	d902      	bls.n	8004732 <SPI_WaitFlagStateUntilTimeout+0x56>
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d13d      	bne.n	80047ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004740:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800474a:	d111      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x94>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004754:	d004      	beq.n	8004760 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475e:	d107      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800476e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004778:	d10f      	bne.n	800479a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004798:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e018      	b.n	80047e0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e002      	b.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	3b01      	subs	r3, #1
 80047be:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4013      	ands	r3, r2
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	79fb      	ldrb	r3, [r7, #7]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d19a      	bne.n	8004714 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000000 	.word	0x20000000

080047ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	@ 0x28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80047fe:	f7fd faf5 	bl	8001dec <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	4413      	add	r3, r2
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800480e:	f7fd faed 	bl	8001dec <HAL_GetTick>
 8004812:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800481c:	4b3d      	ldr	r3, [pc, #244]	@ (8004914 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	00da      	lsls	r2, r3, #3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	0d1b      	lsrs	r3, r3, #20
 800482c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004834:	e061      	b.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800483c:	d107      	bne.n	800484e <SPI_WaitFifoStateUntilTimeout+0x62>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800484c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d051      	beq.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004856:	f7fd fac9 	bl	8001dec <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004862:	429a      	cmp	r2, r3
 8004864:	d902      	bls.n	800486c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d13d      	bne.n	80048e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800487a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004884:	d111      	bne.n	80048aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488e:	d004      	beq.n	800489a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004898:	d107      	bne.n	80048aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048b2:	d10f      	bne.n	80048d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e011      	b.n	800490c <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f2:	e002      	b.n	80048fa <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d195      	bne.n	8004836 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3728      	adds	r7, #40	@ 0x28
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000000 	.word	0x20000000

08004918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2200      	movs	r2, #0
 800492c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff ff5b 	bl	80047ec <SPI_WaitFifoStateUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e046      	b.n	80049da <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800494c:	4b25      	ldr	r3, [pc, #148]	@ (80049e4 <SPI_EndRxTxTransaction+0xcc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a25      	ldr	r2, [pc, #148]	@ (80049e8 <SPI_EndRxTxTransaction+0xd0>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0d5b      	lsrs	r3, r3, #21
 8004958:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800496a:	d112      	bne.n	8004992 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	2180      	movs	r1, #128	@ 0x80
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff feb0 	bl	80046dc <SPI_WaitFlagStateUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e023      	b.n	80049da <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3b01      	subs	r3, #1
 800499c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a8:	2b80      	cmp	r3, #128	@ 0x80
 80049aa:	d0f2      	beq.n	8004992 <SPI_EndRxTxTransaction+0x7a>
 80049ac:	e000      	b.n	80049b0 <SPI_EndRxTxTransaction+0x98>
        break;
 80049ae:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff ff15 	bl	80047ec <SPI_WaitFifoStateUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e000      	b.n	80049da <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000000 	.word	0x20000000
 80049e8:	165e9f81 	.word	0x165e9f81

080049ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e049      	b.n	8004a92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f841 	bl	8004a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f000 f9e8 	bl	8004e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d001      	beq.n	8004ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e054      	b.n	8004b72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a26      	ldr	r2, [pc, #152]	@ (8004b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d022      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x80>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af2:	d01d      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x80>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a22      	ldr	r2, [pc, #136]	@ (8004b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d018      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x80>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a21      	ldr	r2, [pc, #132]	@ (8004b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x80>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x80>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1e      	ldr	r2, [pc, #120]	@ (8004b90 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x80>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	@ (8004b94 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x80>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b98 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d115      	bne.n	8004b5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	4b19      	ldr	r3, [pc, #100]	@ (8004b9c <HAL_TIM_Base_Start_IT+0xec>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d015      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0xbe>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b48:	d011      	beq.n	8004b6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5a:	e008      	b.n	8004b6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e000      	b.n	8004b70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	40010400 	.word	0x40010400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40001800 	.word	0x40001800
 8004b9c:	00010007 	.word	0x00010007

08004ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d020      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0202 	mvn.w	r2, #2
 8004bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f8e9 	bl	8004dc2 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8db 	bl	8004dae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f8ec 	bl	8004dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01b      	beq.n	8004c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0204 	mvn.w	r2, #4
 8004c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2202      	movs	r2, #2
 8004c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f8c3 	bl	8004dc2 <HAL_TIM_IC_CaptureCallback>
 8004c3c:	e005      	b.n	8004c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8b5 	bl	8004dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f8c6 	bl	8004dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0208 	mvn.w	r2, #8
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f89d 	bl	8004dc2 <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f88f 	bl	8004dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8a0 	bl	8004dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d020      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0210 	mvn.w	r2, #16
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f877 	bl	8004dc2 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f869 	bl	8004dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f87a 	bl	8004dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0201 	mvn.w	r2, #1
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fd22 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d104      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f913 	bl	8004f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f90b 	bl	8004f74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00c      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f834 	bl	8004dea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0220 	mvn.w	r2, #32
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f8d3 	bl	8004f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a43      	ldr	r2, [pc, #268]	@ (8004f20 <TIM_Base_SetConfig+0x120>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d013      	beq.n	8004e40 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1e:	d00f      	beq.n	8004e40 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a40      	ldr	r2, [pc, #256]	@ (8004f24 <TIM_Base_SetConfig+0x124>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d00b      	beq.n	8004e40 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f28 <TIM_Base_SetConfig+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d007      	beq.n	8004e40 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3e      	ldr	r2, [pc, #248]	@ (8004f2c <TIM_Base_SetConfig+0x12c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f30 <TIM_Base_SetConfig+0x130>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d108      	bne.n	8004e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a32      	ldr	r2, [pc, #200]	@ (8004f20 <TIM_Base_SetConfig+0x120>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02b      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e60:	d027      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2f      	ldr	r2, [pc, #188]	@ (8004f24 <TIM_Base_SetConfig+0x124>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d023      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f28 <TIM_Base_SetConfig+0x128>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01f      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2d      	ldr	r2, [pc, #180]	@ (8004f2c <TIM_Base_SetConfig+0x12c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01b      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f30 <TIM_Base_SetConfig+0x130>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d017      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2b      	ldr	r2, [pc, #172]	@ (8004f34 <TIM_Base_SetConfig+0x134>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004f38 <TIM_Base_SetConfig+0x138>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00f      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a29      	ldr	r2, [pc, #164]	@ (8004f3c <TIM_Base_SetConfig+0x13c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00b      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a28      	ldr	r2, [pc, #160]	@ (8004f40 <TIM_Base_SetConfig+0x140>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d007      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a27      	ldr	r2, [pc, #156]	@ (8004f44 <TIM_Base_SetConfig+0x144>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a26      	ldr	r2, [pc, #152]	@ (8004f48 <TIM_Base_SetConfig+0x148>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d108      	bne.n	8004ec4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f20 <TIM_Base_SetConfig+0x120>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_Base_SetConfig+0xf2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a10      	ldr	r2, [pc, #64]	@ (8004f30 <TIM_Base_SetConfig+0x130>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d103      	bne.n	8004efa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f043 0204 	orr.w	r2, r3, #4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40010400 	.word	0x40010400
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800
 8004f40:	40001800 	.word	0x40001800
 8004f44:	40001c00 	.word	0x40001c00
 8004f48:	40002000 	.word	0x40002000

08004f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e040      	b.n	800501c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fc fdbc 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2224      	movs	r2, #36	@ 0x24
 8004fb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fa8c 	bl	80054ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f825 	bl	8005024 <UART_SetConfig>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e01b      	b.n	800501c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fb0b 	bl	8005630 <UART_CheckIdleState>
 800501a:	4603      	mov	r3, r0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4ba6      	ldr	r3, [pc, #664]	@ (80052e8 <UART_SetConfig+0x2c4>)
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	6979      	ldr	r1, [r7, #20]
 8005058:	430b      	orrs	r3, r1
 800505a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a94      	ldr	r2, [pc, #592]	@ (80052ec <UART_SetConfig+0x2c8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d120      	bne.n	80050e2 <UART_SetConfig+0xbe>
 80050a0:	4b93      	ldr	r3, [pc, #588]	@ (80052f0 <UART_SetConfig+0x2cc>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	d816      	bhi.n	80050dc <UART_SetConfig+0xb8>
 80050ae:	a201      	add	r2, pc, #4	@ (adr r2, 80050b4 <UART_SetConfig+0x90>)
 80050b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b4:	080050c5 	.word	0x080050c5
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050cb 	.word	0x080050cb
 80050c0:	080050d7 	.word	0x080050d7
 80050c4:	2301      	movs	r3, #1
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e150      	b.n	800536c <UART_SetConfig+0x348>
 80050ca:	2302      	movs	r3, #2
 80050cc:	77fb      	strb	r3, [r7, #31]
 80050ce:	e14d      	b.n	800536c <UART_SetConfig+0x348>
 80050d0:	2304      	movs	r3, #4
 80050d2:	77fb      	strb	r3, [r7, #31]
 80050d4:	e14a      	b.n	800536c <UART_SetConfig+0x348>
 80050d6:	2308      	movs	r3, #8
 80050d8:	77fb      	strb	r3, [r7, #31]
 80050da:	e147      	b.n	800536c <UART_SetConfig+0x348>
 80050dc:	2310      	movs	r3, #16
 80050de:	77fb      	strb	r3, [r7, #31]
 80050e0:	e144      	b.n	800536c <UART_SetConfig+0x348>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a83      	ldr	r2, [pc, #524]	@ (80052f4 <UART_SetConfig+0x2d0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d132      	bne.n	8005152 <UART_SetConfig+0x12e>
 80050ec:	4b80      	ldr	r3, [pc, #512]	@ (80052f0 <UART_SetConfig+0x2cc>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d828      	bhi.n	800514c <UART_SetConfig+0x128>
 80050fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005100 <UART_SetConfig+0xdc>)
 80050fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005100:	08005135 	.word	0x08005135
 8005104:	0800514d 	.word	0x0800514d
 8005108:	0800514d 	.word	0x0800514d
 800510c:	0800514d 	.word	0x0800514d
 8005110:	08005141 	.word	0x08005141
 8005114:	0800514d 	.word	0x0800514d
 8005118:	0800514d 	.word	0x0800514d
 800511c:	0800514d 	.word	0x0800514d
 8005120:	0800513b 	.word	0x0800513b
 8005124:	0800514d 	.word	0x0800514d
 8005128:	0800514d 	.word	0x0800514d
 800512c:	0800514d 	.word	0x0800514d
 8005130:	08005147 	.word	0x08005147
 8005134:	2300      	movs	r3, #0
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e118      	b.n	800536c <UART_SetConfig+0x348>
 800513a:	2302      	movs	r3, #2
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e115      	b.n	800536c <UART_SetConfig+0x348>
 8005140:	2304      	movs	r3, #4
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e112      	b.n	800536c <UART_SetConfig+0x348>
 8005146:	2308      	movs	r3, #8
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e10f      	b.n	800536c <UART_SetConfig+0x348>
 800514c:	2310      	movs	r3, #16
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e10c      	b.n	800536c <UART_SetConfig+0x348>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a68      	ldr	r2, [pc, #416]	@ (80052f8 <UART_SetConfig+0x2d4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d120      	bne.n	800519e <UART_SetConfig+0x17a>
 800515c:	4b64      	ldr	r3, [pc, #400]	@ (80052f0 <UART_SetConfig+0x2cc>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005162:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005166:	2b30      	cmp	r3, #48	@ 0x30
 8005168:	d013      	beq.n	8005192 <UART_SetConfig+0x16e>
 800516a:	2b30      	cmp	r3, #48	@ 0x30
 800516c:	d814      	bhi.n	8005198 <UART_SetConfig+0x174>
 800516e:	2b20      	cmp	r3, #32
 8005170:	d009      	beq.n	8005186 <UART_SetConfig+0x162>
 8005172:	2b20      	cmp	r3, #32
 8005174:	d810      	bhi.n	8005198 <UART_SetConfig+0x174>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <UART_SetConfig+0x15c>
 800517a:	2b10      	cmp	r3, #16
 800517c:	d006      	beq.n	800518c <UART_SetConfig+0x168>
 800517e:	e00b      	b.n	8005198 <UART_SetConfig+0x174>
 8005180:	2300      	movs	r3, #0
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e0f2      	b.n	800536c <UART_SetConfig+0x348>
 8005186:	2302      	movs	r3, #2
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e0ef      	b.n	800536c <UART_SetConfig+0x348>
 800518c:	2304      	movs	r3, #4
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e0ec      	b.n	800536c <UART_SetConfig+0x348>
 8005192:	2308      	movs	r3, #8
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e0e9      	b.n	800536c <UART_SetConfig+0x348>
 8005198:	2310      	movs	r3, #16
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e0e6      	b.n	800536c <UART_SetConfig+0x348>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a56      	ldr	r2, [pc, #344]	@ (80052fc <UART_SetConfig+0x2d8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d120      	bne.n	80051ea <UART_SetConfig+0x1c6>
 80051a8:	4b51      	ldr	r3, [pc, #324]	@ (80052f0 <UART_SetConfig+0x2cc>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051b4:	d013      	beq.n	80051de <UART_SetConfig+0x1ba>
 80051b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051b8:	d814      	bhi.n	80051e4 <UART_SetConfig+0x1c0>
 80051ba:	2b80      	cmp	r3, #128	@ 0x80
 80051bc:	d009      	beq.n	80051d2 <UART_SetConfig+0x1ae>
 80051be:	2b80      	cmp	r3, #128	@ 0x80
 80051c0:	d810      	bhi.n	80051e4 <UART_SetConfig+0x1c0>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <UART_SetConfig+0x1a8>
 80051c6:	2b40      	cmp	r3, #64	@ 0x40
 80051c8:	d006      	beq.n	80051d8 <UART_SetConfig+0x1b4>
 80051ca:	e00b      	b.n	80051e4 <UART_SetConfig+0x1c0>
 80051cc:	2300      	movs	r3, #0
 80051ce:	77fb      	strb	r3, [r7, #31]
 80051d0:	e0cc      	b.n	800536c <UART_SetConfig+0x348>
 80051d2:	2302      	movs	r3, #2
 80051d4:	77fb      	strb	r3, [r7, #31]
 80051d6:	e0c9      	b.n	800536c <UART_SetConfig+0x348>
 80051d8:	2304      	movs	r3, #4
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e0c6      	b.n	800536c <UART_SetConfig+0x348>
 80051de:	2308      	movs	r3, #8
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e0c3      	b.n	800536c <UART_SetConfig+0x348>
 80051e4:	2310      	movs	r3, #16
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e0c0      	b.n	800536c <UART_SetConfig+0x348>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a44      	ldr	r2, [pc, #272]	@ (8005300 <UART_SetConfig+0x2dc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d125      	bne.n	8005240 <UART_SetConfig+0x21c>
 80051f4:	4b3e      	ldr	r3, [pc, #248]	@ (80052f0 <UART_SetConfig+0x2cc>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005202:	d017      	beq.n	8005234 <UART_SetConfig+0x210>
 8005204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005208:	d817      	bhi.n	800523a <UART_SetConfig+0x216>
 800520a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520e:	d00b      	beq.n	8005228 <UART_SetConfig+0x204>
 8005210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005214:	d811      	bhi.n	800523a <UART_SetConfig+0x216>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <UART_SetConfig+0x1fe>
 800521a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521e:	d006      	beq.n	800522e <UART_SetConfig+0x20a>
 8005220:	e00b      	b.n	800523a <UART_SetConfig+0x216>
 8005222:	2300      	movs	r3, #0
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e0a1      	b.n	800536c <UART_SetConfig+0x348>
 8005228:	2302      	movs	r3, #2
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e09e      	b.n	800536c <UART_SetConfig+0x348>
 800522e:	2304      	movs	r3, #4
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e09b      	b.n	800536c <UART_SetConfig+0x348>
 8005234:	2308      	movs	r3, #8
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e098      	b.n	800536c <UART_SetConfig+0x348>
 800523a:	2310      	movs	r3, #16
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e095      	b.n	800536c <UART_SetConfig+0x348>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a2f      	ldr	r2, [pc, #188]	@ (8005304 <UART_SetConfig+0x2e0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d125      	bne.n	8005296 <UART_SetConfig+0x272>
 800524a:	4b29      	ldr	r3, [pc, #164]	@ (80052f0 <UART_SetConfig+0x2cc>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005250:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005254:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005258:	d017      	beq.n	800528a <UART_SetConfig+0x266>
 800525a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800525e:	d817      	bhi.n	8005290 <UART_SetConfig+0x26c>
 8005260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005264:	d00b      	beq.n	800527e <UART_SetConfig+0x25a>
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800526a:	d811      	bhi.n	8005290 <UART_SetConfig+0x26c>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <UART_SetConfig+0x254>
 8005270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005274:	d006      	beq.n	8005284 <UART_SetConfig+0x260>
 8005276:	e00b      	b.n	8005290 <UART_SetConfig+0x26c>
 8005278:	2301      	movs	r3, #1
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e076      	b.n	800536c <UART_SetConfig+0x348>
 800527e:	2302      	movs	r3, #2
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e073      	b.n	800536c <UART_SetConfig+0x348>
 8005284:	2304      	movs	r3, #4
 8005286:	77fb      	strb	r3, [r7, #31]
 8005288:	e070      	b.n	800536c <UART_SetConfig+0x348>
 800528a:	2308      	movs	r3, #8
 800528c:	77fb      	strb	r3, [r7, #31]
 800528e:	e06d      	b.n	800536c <UART_SetConfig+0x348>
 8005290:	2310      	movs	r3, #16
 8005292:	77fb      	strb	r3, [r7, #31]
 8005294:	e06a      	b.n	800536c <UART_SetConfig+0x348>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <UART_SetConfig+0x2e4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d138      	bne.n	8005312 <UART_SetConfig+0x2ee>
 80052a0:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <UART_SetConfig+0x2cc>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80052aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052ae:	d017      	beq.n	80052e0 <UART_SetConfig+0x2bc>
 80052b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052b4:	d82a      	bhi.n	800530c <UART_SetConfig+0x2e8>
 80052b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ba:	d00b      	beq.n	80052d4 <UART_SetConfig+0x2b0>
 80052bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c0:	d824      	bhi.n	800530c <UART_SetConfig+0x2e8>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <UART_SetConfig+0x2aa>
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ca:	d006      	beq.n	80052da <UART_SetConfig+0x2b6>
 80052cc:	e01e      	b.n	800530c <UART_SetConfig+0x2e8>
 80052ce:	2300      	movs	r3, #0
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e04b      	b.n	800536c <UART_SetConfig+0x348>
 80052d4:	2302      	movs	r3, #2
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e048      	b.n	800536c <UART_SetConfig+0x348>
 80052da:	2304      	movs	r3, #4
 80052dc:	77fb      	strb	r3, [r7, #31]
 80052de:	e045      	b.n	800536c <UART_SetConfig+0x348>
 80052e0:	2308      	movs	r3, #8
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e042      	b.n	800536c <UART_SetConfig+0x348>
 80052e6:	bf00      	nop
 80052e8:	efff69f3 	.word	0xefff69f3
 80052ec:	40011000 	.word	0x40011000
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40004400 	.word	0x40004400
 80052f8:	40004800 	.word	0x40004800
 80052fc:	40004c00 	.word	0x40004c00
 8005300:	40005000 	.word	0x40005000
 8005304:	40011400 	.word	0x40011400
 8005308:	40007800 	.word	0x40007800
 800530c:	2310      	movs	r3, #16
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e02c      	b.n	800536c <UART_SetConfig+0x348>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a72      	ldr	r2, [pc, #456]	@ (80054e0 <UART_SetConfig+0x4bc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d125      	bne.n	8005368 <UART_SetConfig+0x344>
 800531c:	4b71      	ldr	r3, [pc, #452]	@ (80054e4 <UART_SetConfig+0x4c0>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005322:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005326:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800532a:	d017      	beq.n	800535c <UART_SetConfig+0x338>
 800532c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005330:	d817      	bhi.n	8005362 <UART_SetConfig+0x33e>
 8005332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005336:	d00b      	beq.n	8005350 <UART_SetConfig+0x32c>
 8005338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800533c:	d811      	bhi.n	8005362 <UART_SetConfig+0x33e>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <UART_SetConfig+0x326>
 8005342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005346:	d006      	beq.n	8005356 <UART_SetConfig+0x332>
 8005348:	e00b      	b.n	8005362 <UART_SetConfig+0x33e>
 800534a:	2300      	movs	r3, #0
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e00d      	b.n	800536c <UART_SetConfig+0x348>
 8005350:	2302      	movs	r3, #2
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e00a      	b.n	800536c <UART_SetConfig+0x348>
 8005356:	2304      	movs	r3, #4
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e007      	b.n	800536c <UART_SetConfig+0x348>
 800535c:	2308      	movs	r3, #8
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e004      	b.n	800536c <UART_SetConfig+0x348>
 8005362:	2310      	movs	r3, #16
 8005364:	77fb      	strb	r3, [r7, #31]
 8005366:	e001      	b.n	800536c <UART_SetConfig+0x348>
 8005368:	2310      	movs	r3, #16
 800536a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005374:	d15b      	bne.n	800542e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005376:	7ffb      	ldrb	r3, [r7, #31]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d828      	bhi.n	80053ce <UART_SetConfig+0x3aa>
 800537c:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <UART_SetConfig+0x360>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b9 	.word	0x080053b9
 8005390:	080053cf 	.word	0x080053cf
 8005394:	080053bf 	.word	0x080053bf
 8005398:	080053cf 	.word	0x080053cf
 800539c:	080053cf 	.word	0x080053cf
 80053a0:	080053cf 	.word	0x080053cf
 80053a4:	080053c7 	.word	0x080053c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a8:	f7fe faca 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 80053ac:	61b8      	str	r0, [r7, #24]
        break;
 80053ae:	e013      	b.n	80053d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b0:	f7fe fada 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 80053b4:	61b8      	str	r0, [r7, #24]
        break;
 80053b6:	e00f      	b.n	80053d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b8:	4b4b      	ldr	r3, [pc, #300]	@ (80054e8 <UART_SetConfig+0x4c4>)
 80053ba:	61bb      	str	r3, [r7, #24]
        break;
 80053bc:	e00c      	b.n	80053d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053be:	f7fe f9ad 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80053c2:	61b8      	str	r0, [r7, #24]
        break;
 80053c4:	e008      	b.n	80053d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ca:	61bb      	str	r3, [r7, #24]
        break;
 80053cc:	e004      	b.n	80053d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	77bb      	strb	r3, [r7, #30]
        break;
 80053d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d074      	beq.n	80054c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	005a      	lsls	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d916      	bls.n	8005428 <UART_SetConfig+0x404>
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005400:	d212      	bcs.n	8005428 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f023 030f 	bic.w	r3, r3, #15
 800540a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	b29a      	uxth	r2, r3
 8005418:	89fb      	ldrh	r3, [r7, #14]
 800541a:	4313      	orrs	r3, r2
 800541c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	89fa      	ldrh	r2, [r7, #14]
 8005424:	60da      	str	r2, [r3, #12]
 8005426:	e04f      	b.n	80054c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	77bb      	strb	r3, [r7, #30]
 800542c:	e04c      	b.n	80054c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800542e:	7ffb      	ldrb	r3, [r7, #31]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d828      	bhi.n	8005486 <UART_SetConfig+0x462>
 8005434:	a201      	add	r2, pc, #4	@ (adr r2, 800543c <UART_SetConfig+0x418>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005461 	.word	0x08005461
 8005440:	08005469 	.word	0x08005469
 8005444:	08005471 	.word	0x08005471
 8005448:	08005487 	.word	0x08005487
 800544c:	08005477 	.word	0x08005477
 8005450:	08005487 	.word	0x08005487
 8005454:	08005487 	.word	0x08005487
 8005458:	08005487 	.word	0x08005487
 800545c:	0800547f 	.word	0x0800547f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005460:	f7fe fa6e 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
 8005464:	61b8      	str	r0, [r7, #24]
        break;
 8005466:	e013      	b.n	8005490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005468:	f7fe fa7e 	bl	8003968 <HAL_RCC_GetPCLK2Freq>
 800546c:	61b8      	str	r0, [r7, #24]
        break;
 800546e:	e00f      	b.n	8005490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005470:	4b1d      	ldr	r3, [pc, #116]	@ (80054e8 <UART_SetConfig+0x4c4>)
 8005472:	61bb      	str	r3, [r7, #24]
        break;
 8005474:	e00c      	b.n	8005490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005476:	f7fe f951 	bl	800371c <HAL_RCC_GetSysClockFreq>
 800547a:	61b8      	str	r0, [r7, #24]
        break;
 800547c:	e008      	b.n	8005490 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800547e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005482:	61bb      	str	r3, [r7, #24]
        break;
 8005484:	e004      	b.n	8005490 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	77bb      	strb	r3, [r7, #30]
        break;
 800548e:	bf00      	nop
    }

    if (pclk != 0U)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d018      	beq.n	80054c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	085a      	lsrs	r2, r3, #1
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	441a      	add	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2b0f      	cmp	r3, #15
 80054ae:	d909      	bls.n	80054c4 <UART_SetConfig+0x4a0>
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054b6:	d205      	bcs.n	80054c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	e001      	b.n	80054c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80054d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40007c00 	.word	0x40007c00
 80054e4:	40023800 	.word	0x40023800
 80054e8:	00f42400 	.word	0x00f42400

080054ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01a      	beq.n	8005602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055ea:	d10a      	bne.n	8005602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
  }
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b098      	sub	sp, #96	@ 0x60
 8005634:	af02      	add	r7, sp, #8
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005640:	f7fc fbd4 	bl	8001dec <HAL_GetTick>
 8005644:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b08      	cmp	r3, #8
 8005652:	d12e      	bne.n	80056b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005654:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565c:	2200      	movs	r2, #0
 800565e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f88c 	bl	8005780 <UART_WaitOnFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d021      	beq.n	80056b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005682:	653b      	str	r3, [r7, #80]	@ 0x50
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800568c:	647b      	str	r3, [r7, #68]	@ 0x44
 800568e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800569a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e6      	bne.n	800566e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e062      	b.n	8005778 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d149      	bne.n	8005754 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c8:	2200      	movs	r2, #0
 80056ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f856 	bl	8005780 <UART_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d03c      	beq.n	8005754 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	623b      	str	r3, [r7, #32]
   return(result);
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e6      	bne.n	80056da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	60fb      	str	r3, [r7, #12]
   return(result);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0301 	bic.w	r3, r3, #1
 8005722:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3308      	adds	r3, #8
 800572a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800572c:	61fa      	str	r2, [r7, #28]
 800572e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	617b      	str	r3, [r7, #20]
   return(result);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e5      	bne.n	800570c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e011      	b.n	8005778 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3758      	adds	r7, #88	@ 0x58
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005790:	e04f      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d04b      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579a:	f7fc fb27 	bl	8001dec <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d302      	bcc.n	80057b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e04e      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d037      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b80      	cmp	r3, #128	@ 0x80
 80057c6:	d034      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b40      	cmp	r3, #64	@ 0x40
 80057cc:	d031      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d110      	bne.n	80057fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2208      	movs	r2, #8
 80057e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f838 	bl	800585a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2208      	movs	r2, #8
 80057ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e029      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800580c:	d111      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005816:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f81e 	bl	800585a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e00f      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4013      	ands	r3, r2
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	bf0c      	ite	eq
 8005842:	2301      	moveq	r3, #1
 8005844:	2300      	movne	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	429a      	cmp	r2, r3
 800584e:	d0a0      	beq.n	8005792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800585a:	b480      	push	{r7}
 800585c:	b095      	sub	sp, #84	@ 0x54
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005880:	643b      	str	r3, [r7, #64]	@ 0x40
 8005882:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e6      	bne.n	8005862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d118      	bne.n	8005902 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f023 0310 	bic.w	r3, r3, #16
 80058e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6979      	ldr	r1, [r7, #20]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	613b      	str	r3, [r7, #16]
   return(result);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e6      	bne.n	80058d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005916:	bf00      	nop
 8005918:	3754      	adds	r7, #84	@ 0x54
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005924:	b084      	sub	sp, #16
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	f107 001c 	add.w	r0, r7, #28
 8005932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005936:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800593a:	2b01      	cmp	r3, #1
 800593c:	d121      	bne.n	8005982 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005942:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	4b21      	ldr	r3, [pc, #132]	@ (80059d4 <USB_CoreInit+0xb0>)
 8005950:	4013      	ands	r3, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005962:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005966:	2b01      	cmp	r3, #1
 8005968:	d105      	bne.n	8005976 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa92 	bl	8005ea0 <USB_CoreReset>
 800597c:	4603      	mov	r3, r0
 800597e:	73fb      	strb	r3, [r7, #15]
 8005980:	e010      	b.n	80059a4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fa86 	bl	8005ea0 <USB_CoreReset>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80059a4:	7fbb      	ldrb	r3, [r7, #30]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10b      	bne.n	80059c2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f043 0206 	orr.w	r2, r3, #6
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ce:	b004      	add	sp, #16
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	ffbdffbf 	.word	0xffbdffbf

080059d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f023 0201 	bic.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d115      	bne.n	8005a48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a28:	200a      	movs	r0, #10
 8005a2a:	f7fc f9eb 	bl	8001e04 <HAL_Delay>
      ms += 10U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	330a      	adds	r3, #10
 8005a32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fa25 	bl	8005e84 <USB_GetMode>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d01e      	beq.n	8005a7e <USB_SetCurrentMode+0x84>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a44:	d9f0      	bls.n	8005a28 <USB_SetCurrentMode+0x2e>
 8005a46:	e01a      	b.n	8005a7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d115      	bne.n	8005a7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a5a:	200a      	movs	r0, #10
 8005a5c:	f7fc f9d2 	bl	8001e04 <HAL_Delay>
      ms += 10U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	330a      	adds	r3, #10
 8005a64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa0c 	bl	8005e84 <USB_GetMode>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <USB_SetCurrentMode+0x84>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a76:	d9f0      	bls.n	8005a5a <USB_SetCurrentMode+0x60>
 8005a78:	e001      	b.n	8005a7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e005      	b.n	8005a8a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a82:	d101      	bne.n	8005a88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a94:	b084      	sub	sp, #16
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aae:	2300      	movs	r3, #0
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	e009      	b.n	8005ac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	3340      	adds	r3, #64	@ 0x40
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b0e      	cmp	r3, #14
 8005acc:	d9f2      	bls.n	8005ab4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ace:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d11c      	bne.n	8005b10 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ae4:	f043 0302 	orr.w	r3, r3, #2
 8005ae8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e005      	b.n	8005b1c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b22:	461a      	mov	r2, r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b28:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d10d      	bne.n	8005b4c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d104      	bne.n	8005b42 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b38:	2100      	movs	r1, #0
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f968 	bl	8005e10 <USB_SetDevSpeed>
 8005b40:	e008      	b.n	8005b54 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b42:	2101      	movs	r1, #1
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f963 	bl	8005e10 <USB_SetDevSpeed>
 8005b4a:	e003      	b.n	8005b54 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b4c:	2103      	movs	r1, #3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f95e 	bl	8005e10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b54:	2110      	movs	r1, #16
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8fa 	bl	8005d50 <USB_FlushTxFifo>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f924 	bl	8005db4 <USB_FlushRxFifo>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b94:	461a      	mov	r2, r3
 8005b96:	2300      	movs	r3, #0
 8005b98:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	e043      	b.n	8005c28 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bb6:	d118      	bne.n	8005bea <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e013      	b.n	8005bfc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be0:	461a      	mov	r2, r3
 8005be2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e008      	b.n	8005bfc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3301      	adds	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d3b5      	bcc.n	8005ba0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c34:	2300      	movs	r3, #0
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	e043      	b.n	8005cc2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c50:	d118      	bne.n	8005c84 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c64:	461a      	mov	r2, r3
 8005c66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e013      	b.n	8005c96 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e008      	b.n	8005c96 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c90:	461a      	mov	r2, r3
 8005c92:	2300      	movs	r3, #0
 8005c94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005cba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d3b5      	bcc.n	8005c3a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ce0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005cee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f043 0210 	orr.w	r2, r3, #16
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	699a      	ldr	r2, [r3, #24]
 8005d08:	4b0f      	ldr	r3, [pc, #60]	@ (8005d48 <USB_DevInit+0x2b4>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	f043 0208 	orr.w	r2, r3, #8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d105      	bne.n	8005d38 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	4b06      	ldr	r3, [pc, #24]	@ (8005d4c <USB_DevInit+0x2b8>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d44:	b004      	add	sp, #16
 8005d46:	4770      	bx	lr
 8005d48:	803c3800 	.word	0x803c3800
 8005d4c:	40000004 	.word	0x40000004

08005d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d6a:	d901      	bls.n	8005d70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e01b      	b.n	8005da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	daf2      	bge.n	8005d5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	019b      	lsls	r3, r3, #6
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d94:	d901      	bls.n	8005d9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e006      	b.n	8005da8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d0f0      	beq.n	8005d88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dcc:	d901      	bls.n	8005dd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e018      	b.n	8005e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	daf2      	bge.n	8005dc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2210      	movs	r2, #16
 8005de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005df0:	d901      	bls.n	8005df6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e006      	b.n	8005e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0310 	and.w	r3, r3, #16
 8005dfe:	2b10      	cmp	r3, #16
 8005e00:	d0f0      	beq.n	8005de4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e30:	4313      	orrs	r3, r2
 8005e32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e70:	f043 0302 	orr.w	r3, r3, #2
 8005e74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f003 0301 	and.w	r3, r3, #1
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eb8:	d901      	bls.n	8005ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e022      	b.n	8005f04 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	daf2      	bge.n	8005eac <USB_CoreReset+0xc>

  count = 10U;
 8005ec6:	230a      	movs	r3, #10
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005eca:	e002      	b.n	8005ed2 <USB_CoreReset+0x32>
  {
    count--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f9      	bne.n	8005ecc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f043 0201 	orr.w	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ef0:	d901      	bls.n	8005ef6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e006      	b.n	8005f04 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d0f0      	beq.n	8005ee4 <USB_CoreReset+0x44>

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8005f16:	4b0c      	ldr	r3, [pc, #48]	@ (8005f48 <ETH_IRQHandler+0x38>)
 8005f18:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f4c <ETH_IRQHandler+0x3c>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fc f987 	bl	8002234 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 8005f26:	4b09      	ldr	r3, [pc, #36]	@ (8005f4c <ETH_IRQHandler+0x3c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <ETH_IRQHandler+0x2e>
 8005f2e:	4b08      	ldr	r3, [pc, #32]	@ (8005f50 <ETH_IRQHandler+0x40>)
 8005f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	f3bf 8f6f 	isb	sy
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000c54 	.word	0x20000c54
 8005f4c:	20000d08 	.word	0x20000d08
 8005f50:	e000ed04 	.word	0xe000ed04

08005f54 <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f66:	2be0      	cmp	r3, #224	@ 0xe0
 8005f68:	d103      	bne.n	8005f72 <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
 8005f6c:	f043 0320 	orr.w	r3, r3, #32
 8005f70:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f78:	f003 0308 	and.w	r3, r3, #8
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d019      	beq.n	8005fb4 <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	f043 0310 	orr.w	r3, r3, #16
 8005f86:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f8e:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	f043 0308 	orr.w	r3, r3, #8
 8005fa0:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	f043 0304 	orr.w	r3, r3, #4
 8005fb2:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fba:	f003 0310 	and.w	r3, r3, #16
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fc8:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 8005fca:	4b0e      	ldr	r3, [pc, #56]	@ (8006004 <HAL_ETH_ErrorCallback+0xb0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <HAL_ETH_ErrorCallback+0xa8>
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d011      	beq.n	8005ffc <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 8005fdc:	4b09      	ldr	r3, [pc, #36]	@ (8006004 <HAL_ETH_ErrorCallback+0xb0>)
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	7df9      	ldrb	r1, [r7, #23]
 8005fe2:	f107 030c 	add.w	r3, r7, #12
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2201      	movs	r2, #1
 8005fec:	f001 fec0 	bl	8007d70 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8005ff0:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <HAL_ETH_ErrorCallback+0xb4>)
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	4a03      	ldr	r2, [pc, #12]	@ (8006008 <HAL_ETH_ErrorCallback+0xb4>)
 8005ffa:	6013      	str	r3, [r2, #0]
    }
}
 8005ffc:	bf00      	nop
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20000d04 	.word	0x20000d04
 8006008:	20000d08 	.word	0x20000d08

0800600c <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af02      	add	r7, sp, #8
 8006012:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006018:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 800601a:	4b11      	ldr	r3, [pc, #68]	@ (8006060 <HAL_ETH_RxCpltCallback+0x54>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	429a      	cmp	r2, r3
 8006022:	d902      	bls.n	800602a <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 8006024:	4a0e      	ldr	r2, [pc, #56]	@ (8006060 <HAL_ETH_RxCpltCallback+0x54>)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 800602a:	4b0e      	ldr	r3, [pc, #56]	@ (8006064 <HAL_ETH_RxCpltCallback+0x58>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d011      	beq.n	8006056 <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 8006036:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <HAL_ETH_RxCpltCallback+0x58>)
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	2300      	movs	r3, #0
 8006042:	2201      	movs	r2, #1
 8006044:	2101      	movs	r1, #1
 8006046:	f001 fe93 	bl	8007d70 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 800604a:	4b07      	ldr	r3, [pc, #28]	@ (8006068 <HAL_ETH_RxCpltCallback+0x5c>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	4313      	orrs	r3, r2
 8006052:	4a05      	ldr	r2, [pc, #20]	@ (8006068 <HAL_ETH_RxCpltCallback+0x5c>)
 8006054:	6013      	str	r3, [r2, #0]
    }
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000d0c 	.word	0x20000d0c
 8006064:	20000d04 	.word	0x20000d04
 8006068:	20000d08 	.word	0x20000d08

0800606c <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af02      	add	r7, sp, #8
 8006072:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 800607a:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <HAL_ETH_TxCpltCallback+0x54>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	429a      	cmp	r2, r3
 8006082:	d902      	bls.n	800608a <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 8006084:	4a0e      	ldr	r2, [pc, #56]	@ (80060c0 <HAL_ETH_TxCpltCallback+0x54>)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 800608a:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <HAL_ETH_TxCpltCallback+0x58>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d011      	beq.n	80060b6 <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 8006096:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <HAL_ETH_TxCpltCallback+0x58>)
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f107 0308 	add.w	r3, r7, #8
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	2300      	movs	r3, #0
 80060a2:	2201      	movs	r2, #1
 80060a4:	2102      	movs	r1, #2
 80060a6:	f001 fe63 	bl	8007d70 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80060aa:	4b07      	ldr	r3, [pc, #28]	@ (80060c8 <HAL_ETH_TxCpltCallback+0x5c>)
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	4a05      	ldr	r2, [pc, #20]	@ (80060c8 <HAL_ETH_TxCpltCallback+0x5c>)
 80060b4:	6013      	str	r3, [r2, #0]
    }
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000d10 	.word	0x20000d10
 80060c4:	20000d04 	.word	0x20000d04
 80060c8:	20000d08 	.word	0x20000d08

080060cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80060d0:	bf00      	nop
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e2:	f3ef 8305 	mrs	r3, IPSR
 80060e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80060e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ee:	f3ef 8310 	mrs	r3, PRIMASK
 80060f2:	607b      	str	r3, [r7, #4]
  return(result);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d105      	bne.n	8006106 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060fa:	f3ef 8311 	mrs	r3, BASEPRI
 80060fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <osKernelInitialize+0x3a>
 8006106:	4b0e      	ldr	r3, [pc, #56]	@ (8006140 <osKernelInitialize+0x64>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d103      	bne.n	8006116 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800610e:	f06f 0305 	mvn.w	r3, #5
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e00c      	b.n	8006130 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006116:	4b0a      	ldr	r3, [pc, #40]	@ (8006140 <osKernelInitialize+0x64>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d105      	bne.n	800612a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800611e:	4b08      	ldr	r3, [pc, #32]	@ (8006140 <osKernelInitialize+0x64>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e002      	b.n	8006130 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295
 800612e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006130:	68fb      	ldr	r3, [r7, #12]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20000d14 	.word	0x20000d14

08006144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800614a:	f3ef 8305 	mrs	r3, IPSR
 800614e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006150:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006156:	f3ef 8310 	mrs	r3, PRIMASK
 800615a:	607b      	str	r3, [r7, #4]
  return(result);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d105      	bne.n	800616e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006162:	f3ef 8311 	mrs	r3, BASEPRI
 8006166:	603b      	str	r3, [r7, #0]
  return(result);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <osKernelStart+0x3a>
 800616e:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <osKernelStart+0x68>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b02      	cmp	r3, #2
 8006174:	d103      	bne.n	800617e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006176:	f06f 0305 	mvn.w	r3, #5
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	e010      	b.n	80061a0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800617e:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <osKernelStart+0x68>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d109      	bne.n	800619a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006186:	f7ff ffa1 	bl	80060cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800618a:	4b08      	ldr	r3, [pc, #32]	@ (80061ac <osKernelStart+0x68>)
 800618c:	2202      	movs	r2, #2
 800618e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006190:	f001 f8e2 	bl	8007358 <vTaskStartScheduler>
      stat = osOK;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e002      	b.n	80061a0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061a0:	68fb      	ldr	r3, [r7, #12]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000d14 	.word	0x20000d14

080061b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b090      	sub	sp, #64	@ 0x40
 80061b4:	af04      	add	r7, sp, #16
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c0:	f3ef 8305 	mrs	r3, IPSR
 80061c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80061c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f040 8090 	bne.w	80062ee <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ce:	f3ef 8310 	mrs	r3, PRIMASK
 80061d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d105      	bne.n	80061e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061da:	f3ef 8311 	mrs	r3, BASEPRI
 80061de:	617b      	str	r3, [r7, #20]
  return(result);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <osThreadNew+0x3e>
 80061e6:	4b44      	ldr	r3, [pc, #272]	@ (80062f8 <osThreadNew+0x148>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d07f      	beq.n	80062ee <osThreadNew+0x13e>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d07c      	beq.n	80062ee <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 80061f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80061fa:	2318      	movs	r3, #24
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8006202:	f04f 33ff 	mov.w	r3, #4294967295
 8006206:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d045      	beq.n	800629a <osThreadNew+0xea>
      if (attr->name != NULL) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <osThreadNew+0x6c>
        name = attr->name;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <osThreadNew+0x92>
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	2b38      	cmp	r3, #56	@ 0x38
 8006234:	d805      	bhi.n	8006242 <osThreadNew+0x92>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <osThreadNew+0x96>
        return (NULL);
 8006242:	2300      	movs	r3, #0
 8006244:	e054      	b.n	80062f0 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	089b      	lsrs	r3, r3, #2
 8006254:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00e      	beq.n	800627c <osThreadNew+0xcc>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2ba7      	cmp	r3, #167	@ 0xa7
 8006264:	d90a      	bls.n	800627c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800626a:	2b00      	cmp	r3, #0
 800626c:	d006      	beq.n	800627c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <osThreadNew+0xcc>
        mem = 1;
 8006276:	2301      	movs	r3, #1
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	e010      	b.n	800629e <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10c      	bne.n	800629e <osThreadNew+0xee>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d108      	bne.n	800629e <osThreadNew+0xee>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <osThreadNew+0xee>
          mem = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	623b      	str	r3, [r7, #32]
 8006298:	e001      	b.n	800629e <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d110      	bne.n	80062c6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062ac:	9202      	str	r2, [sp, #8]
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fe4e 	bl	8006f5c <xTaskCreateStatic>
 80062c0:	4603      	mov	r3, r0
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	e013      	b.n	80062ee <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d110      	bne.n	80062ee <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	f107 0310 	add.w	r3, r7, #16
 80062d4:	9301      	str	r3, [sp, #4]
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fea2 	bl	8007028 <xTaskCreate>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d001      	beq.n	80062ee <osThreadNew+0x13e>
          hTask = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062ee:	693b      	ldr	r3, [r7, #16]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3730      	adds	r7, #48	@ 0x30
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000d14 	.word	0x20000d14

080062fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006304:	f3ef 8305 	mrs	r3, IPSR
 8006308:	613b      	str	r3, [r7, #16]
  return(result);
 800630a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10f      	bne.n	8006330 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006310:	f3ef 8310 	mrs	r3, PRIMASK
 8006314:	60fb      	str	r3, [r7, #12]
  return(result);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d105      	bne.n	8006328 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800631c:	f3ef 8311 	mrs	r3, BASEPRI
 8006320:	60bb      	str	r3, [r7, #8]
  return(result);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <osDelay+0x3c>
 8006328:	4b0a      	ldr	r3, [pc, #40]	@ (8006354 <osDelay+0x58>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d103      	bne.n	8006338 <osDelay+0x3c>
    stat = osErrorISR;
 8006330:	f06f 0305 	mvn.w	r3, #5
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	e007      	b.n	8006348 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 ffd0 	bl	80072e8 <vTaskDelay>
    }
  }

  return (stat);
 8006348:	697b      	ldr	r3, [r7, #20]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000d14 	.word	0x20000d14

08006358 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a07      	ldr	r2, [pc, #28]	@ (8006384 <vApplicationGetIdleTaskMemory+0x2c>)
 8006368:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4a06      	ldr	r2, [pc, #24]	@ (8006388 <vApplicationGetIdleTaskMemory+0x30>)
 800636e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006376:	601a      	str	r2, [r3, #0]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	20000d18 	.word	0x20000d18
 8006388:	20000dc0 	.word	0x20000dc0

0800638c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a07      	ldr	r2, [pc, #28]	@ (80063b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800639c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4a06      	ldr	r2, [pc, #24]	@ (80063bc <vApplicationGetTimerTaskMemory+0x30>)
 80063a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063aa:	601a      	str	r2, [r3, #0]
}
 80063ac:	bf00      	nop
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	200011c0 	.word	0x200011c0
 80063bc:	20001268 	.word	0x20001268

080063c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f103 0208 	add.w	r2, r3, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295
 80063d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f103 0208 	add.w	r2, r3, #8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f103 0208 	add.w	r2, r3, #8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800641a:	b480      	push	{r7}
 800641c:	b085      	sub	sp, #20
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d103      	bne.n	8006482 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	e00c      	b.n	800649c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3308      	adds	r3, #8
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	e002      	b.n	8006490 <vListInsert+0x2e>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d2f6      	bcs.n	800648a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]
}
 80064c8:	bf00      	nop
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6892      	ldr	r2, [r2, #8]
 80064ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6852      	ldr	r2, [r2, #4]
 80064f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d103      	bne.n	8006508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	1e5a      	subs	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10d      	bne.n	8006558 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	b672      	cpsid	i
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	b662      	cpsie	i
 8006550:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006552:	bf00      	nop
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006558:	f002 f9c0 	bl	80088dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006564:	68f9      	ldr	r1, [r7, #12]
 8006566:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	441a      	add	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006588:	3b01      	subs	r3, #1
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	441a      	add	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	22ff      	movs	r2, #255	@ 0xff
 800659c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	22ff      	movs	r2, #255	@ 0xff
 80065a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d114      	bne.n	80065d8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01a      	beq.n	80065ec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3310      	adds	r3, #16
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 f978 	bl	80078b0 <xTaskRemoveFromEventList>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d012      	beq.n	80065ec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065c6:	4b0d      	ldr	r3, [pc, #52]	@ (80065fc <xQueueGenericReset+0xd4>)
 80065c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	e009      	b.n	80065ec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3310      	adds	r3, #16
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff feef 	bl	80063c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3324      	adds	r3, #36	@ 0x24
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff feea 	bl	80063c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065ec:	f002 f9ac 	bl	8008948 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065f0:	2301      	movs	r3, #1
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	e000ed04 	.word	0xe000ed04

08006600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08e      	sub	sp, #56	@ 0x38
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10d      	bne.n	8006630 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006618:	b672      	cpsid	i
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	b662      	cpsie	i
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	e7fd      	b.n	800662c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10d      	bne.n	8006652 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	b672      	cpsid	i
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	b662      	cpsie	i
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <xQueueGenericCreateStatic+0x5e>
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <xQueueGenericCreateStatic+0x62>
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <xQueueGenericCreateStatic+0x64>
 8006662:	2300      	movs	r3, #0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10d      	bne.n	8006684 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	b672      	cpsid	i
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	b662      	cpsie	i
 800667c:	623b      	str	r3, [r7, #32]
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	e7fd      	b.n	8006680 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d102      	bne.n	8006690 <xQueueGenericCreateStatic+0x90>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <xQueueGenericCreateStatic+0x94>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <xQueueGenericCreateStatic+0x96>
 8006694:	2300      	movs	r3, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10d      	bne.n	80066b6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	b672      	cpsid	i
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	b662      	cpsie	i
 80066ae:	61fb      	str	r3, [r7, #28]
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	e7fd      	b.n	80066b2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066b6:	2350      	movs	r3, #80	@ 0x50
 80066b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b50      	cmp	r3, #80	@ 0x50
 80066be:	d00d      	beq.n	80066dc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c4:	b672      	cpsid	i
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	b662      	cpsie	i
 80066d4:	61bb      	str	r3, [r7, #24]
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00d      	beq.n	8006704 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80066f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	4613      	mov	r3, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f805 	bl	800670e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006706:	4618      	mov	r0, r3
 8006708:	3730      	adds	r7, #48	@ 0x30
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	e002      	b.n	8006730 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800673c:	2101      	movs	r1, #1
 800673e:	69b8      	ldr	r0, [r7, #24]
 8006740:	f7ff fef2 	bl	8006528 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	78fa      	ldrb	r2, [r7, #3]
 8006748:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b08e      	sub	sp, #56	@ 0x38
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006762:	2300      	movs	r3, #0
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10d      	bne.n	800678c <xQueueGenericSend+0x38>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	b672      	cpsid	i
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	b662      	cpsie	i
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006786:	bf00      	nop
 8006788:	bf00      	nop
 800678a:	e7fd      	b.n	8006788 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d103      	bne.n	800679a <xQueueGenericSend+0x46>
 8006792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <xQueueGenericSend+0x4a>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <xQueueGenericSend+0x4c>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10d      	bne.n	80067c0 <xQueueGenericSend+0x6c>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a8:	b672      	cpsid	i
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	b662      	cpsie	i
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	e7fd      	b.n	80067bc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d103      	bne.n	80067ce <xQueueGenericSend+0x7a>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <xQueueGenericSend+0x7e>
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <xQueueGenericSend+0x80>
 80067d2:	2300      	movs	r3, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10d      	bne.n	80067f4 <xQueueGenericSend+0xa0>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067dc:	b672      	cpsid	i
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	b662      	cpsie	i
 80067ec:	623b      	str	r3, [r7, #32]
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	e7fd      	b.n	80067f0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067f4:	f001 fa2a 	bl	8007c4c <xTaskGetSchedulerState>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <xQueueGenericSend+0xb0>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <xQueueGenericSend+0xb4>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <xQueueGenericSend+0xb6>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10d      	bne.n	800682a <xQueueGenericSend+0xd6>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	b672      	cpsid	i
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	b662      	cpsie	i
 8006822:	61fb      	str	r3, [r7, #28]
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	e7fd      	b.n	8006826 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800682a:	f002 f857 	bl	80088dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <xQueueGenericSend+0xec>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d129      	bne.n	8006894 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006846:	f000 fa1b 	bl	8006c80 <prvCopyDataToQueue>
 800684a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d010      	beq.n	8006876 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	3324      	adds	r3, #36	@ 0x24
 8006858:	4618      	mov	r0, r3
 800685a:	f001 f829 	bl	80078b0 <xTaskRemoveFromEventList>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d013      	beq.n	800688c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006864:	4b3f      	ldr	r3, [pc, #252]	@ (8006964 <xQueueGenericSend+0x210>)
 8006866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	e00a      	b.n	800688c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800687c:	4b39      	ldr	r3, [pc, #228]	@ (8006964 <xQueueGenericSend+0x210>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800688c:	f002 f85c 	bl	8008948 <vPortExitCritical>
				return pdPASS;
 8006890:	2301      	movs	r3, #1
 8006892:	e063      	b.n	800695c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d103      	bne.n	80068a2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800689a:	f002 f855 	bl	8008948 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	e05c      	b.n	800695c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068a8:	f107 0314 	add.w	r3, r7, #20
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 f865 	bl	800797c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068b2:	2301      	movs	r3, #1
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068b6:	f002 f847 	bl	8008948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068ba:	f000 fdc1 	bl	8007440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068be:	f002 f80d 	bl	80088dc <vPortEnterCritical>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068c8:	b25b      	sxtb	r3, r3
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d103      	bne.n	80068d8 <xQueueGenericSend+0x184>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e4:	d103      	bne.n	80068ee <xQueueGenericSend+0x19a>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ee:	f002 f82b 	bl	8008948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068f2:	1d3a      	adds	r2, r7, #4
 80068f4:	f107 0314 	add.w	r3, r7, #20
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 f854 	bl	80079a8 <xTaskCheckForTimeOut>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d124      	bne.n	8006950 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006906:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006908:	f000 fab2 	bl	8006e70 <prvIsQueueFull>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d018      	beq.n	8006944 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	3310      	adds	r3, #16
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	4611      	mov	r1, r2
 800691a:	4618      	mov	r0, r3
 800691c:	f000 ff72 	bl	8007804 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006920:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006922:	f000 fa3d 	bl	8006da0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006926:	f000 fd99 	bl	800745c <xTaskResumeAll>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	f47f af7c 	bne.w	800682a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8006932:	4b0c      	ldr	r3, [pc, #48]	@ (8006964 <xQueueGenericSend+0x210>)
 8006934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	e772      	b.n	800682a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006944:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006946:	f000 fa2b 	bl	8006da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800694a:	f000 fd87 	bl	800745c <xTaskResumeAll>
 800694e:	e76c      	b.n	800682a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006952:	f000 fa25 	bl	8006da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006956:	f000 fd81 	bl	800745c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800695a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800695c:	4618      	mov	r0, r3
 800695e:	3738      	adds	r7, #56	@ 0x38
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08e      	sub	sp, #56	@ 0x38
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10d      	bne.n	800699c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	b672      	cpsid	i
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	b662      	cpsie	i
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <xQueueGenericSendFromISR+0x42>
 80069a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <xQueueGenericSendFromISR+0x46>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <xQueueGenericSendFromISR+0x48>
 80069ae:	2300      	movs	r3, #0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10d      	bne.n	80069d0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b8:	b672      	cpsid	i
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	b662      	cpsie	i
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	e7fd      	b.n	80069cc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d103      	bne.n	80069de <xQueueGenericSendFromISR+0x76>
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <xQueueGenericSendFromISR+0x7a>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <xQueueGenericSendFromISR+0x7c>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10d      	bne.n	8006a04 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ec:	b672      	cpsid	i
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	b662      	cpsie	i
 80069fc:	61fb      	str	r3, [r7, #28]
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	e7fd      	b.n	8006a00 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a04:	f002 f852 	bl	8008aac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a08:	f3ef 8211 	mrs	r2, BASEPRI
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	b672      	cpsid	i
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	b662      	cpsie	i
 8006a20:	61ba      	str	r2, [r7, #24]
 8006a22:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a24:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d302      	bcc.n	8006a3a <xQueueGenericSendFromISR+0xd2>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d12c      	bne.n	8006a94 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a4a:	f000 f919 	bl	8006c80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a4e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a56:	d112      	bne.n	8006a7e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d016      	beq.n	8006a8e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	3324      	adds	r3, #36	@ 0x24
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 ff23 	bl	80078b0 <xTaskRemoveFromEventList>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00e      	beq.n	8006a8e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	e007      	b.n	8006a8e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	3301      	adds	r3, #1
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	b25a      	sxtb	r2, r3
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006a92:	e001      	b.n	8006a98 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006aa2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3738      	adds	r7, #56	@ 0x38
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08c      	sub	sp, #48	@ 0x30
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10d      	bne.n	8006ae6 <xQueueReceive+0x36>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ace:	b672      	cpsid	i
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	b662      	cpsie	i
 8006ade:	623b      	str	r3, [r7, #32]
}
 8006ae0:	bf00      	nop
 8006ae2:	bf00      	nop
 8006ae4:	e7fd      	b.n	8006ae2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <xQueueReceive+0x44>
 8006aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <xQueueReceive+0x48>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <xQueueReceive+0x4a>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <xQueueReceive+0x6a>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	b672      	cpsid	i
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	b662      	cpsie	i
 8006b12:	61fb      	str	r3, [r7, #28]
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	e7fd      	b.n	8006b16 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b1a:	f001 f897 	bl	8007c4c <xTaskGetSchedulerState>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <xQueueReceive+0x7a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <xQueueReceive+0x7e>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xQueueReceive+0x80>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10d      	bne.n	8006b50 <xQueueReceive+0xa0>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	b672      	cpsid	i
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	b662      	cpsie	i
 8006b48:	61bb      	str	r3, [r7, #24]
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	e7fd      	b.n	8006b4c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b50:	f001 fec4 	bl	80088dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01f      	beq.n	8006ba0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b64:	f000 f8f6 	bl	8006d54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6a:	1e5a      	subs	r2, r3, #1
 8006b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00f      	beq.n	8006b98 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	3310      	adds	r3, #16
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 fe97 	bl	80078b0 <xTaskRemoveFromEventList>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b88:	4b3c      	ldr	r3, [pc, #240]	@ (8006c7c <xQueueReceive+0x1cc>)
 8006b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b98:	f001 fed6 	bl	8008948 <vPortExitCritical>
				return pdPASS;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e069      	b.n	8006c74 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d103      	bne.n	8006bae <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ba6:	f001 fecf 	bl	8008948 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e062      	b.n	8006c74 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bb4:	f107 0310 	add.w	r3, r7, #16
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fedf 	bl	800797c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bc2:	f001 fec1 	bl	8008948 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bc6:	f000 fc3b 	bl	8007440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bca:	f001 fe87 	bl	80088dc <vPortEnterCritical>
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d103      	bne.n	8006be4 <xQueueReceive+0x134>
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf0:	d103      	bne.n	8006bfa <xQueueReceive+0x14a>
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bfa:	f001 fea5 	bl	8008948 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bfe:	1d3a      	adds	r2, r7, #4
 8006c00:	f107 0310 	add.w	r3, r7, #16
 8006c04:	4611      	mov	r1, r2
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fece 	bl	80079a8 <xTaskCheckForTimeOut>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d123      	bne.n	8006c5a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c14:	f000 f916 	bl	8006e44 <prvIsQueueEmpty>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d017      	beq.n	8006c4e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c20:	3324      	adds	r3, #36	@ 0x24
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4611      	mov	r1, r2
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fdec 	bl	8007804 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c2e:	f000 f8b7 	bl	8006da0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c32:	f000 fc13 	bl	800745c <xTaskResumeAll>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d189      	bne.n	8006b50 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c7c <xQueueReceive+0x1cc>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	e780      	b.n	8006b50 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c50:	f000 f8a6 	bl	8006da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c54:	f000 fc02 	bl	800745c <xTaskResumeAll>
 8006c58:	e77a      	b.n	8006b50 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c5c:	f000 f8a0 	bl	8006da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c60:	f000 fbfc 	bl	800745c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c66:	f000 f8ed 	bl	8006e44 <prvIsQueueEmpty>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f43f af6f 	beq.w	8006b50 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3730      	adds	r7, #48	@ 0x30
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10d      	bne.n	8006cba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d14d      	bne.n	8006d42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 ffec 	bl	8007c88 <xTaskPriorityDisinherit>
 8006cb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	609a      	str	r2, [r3, #8]
 8006cb8:	e043      	b.n	8006d42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d119      	bne.n	8006cf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6858      	ldr	r0, [r3, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	f002 f9aa 	bl	8009024 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd8:	441a      	add	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d32b      	bcc.n	8006d42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	e026      	b.n	8006d42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68d8      	ldr	r0, [r3, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	f002 f990 	bl	8009024 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0c:	425b      	negs	r3, r3
 8006d0e:	441a      	add	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d207      	bcs.n	8006d30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d28:	425b      	negs	r3, r3
 8006d2a:	441a      	add	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d105      	bne.n	8006d42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006d4a:	697b      	ldr	r3, [r7, #20]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d018      	beq.n	8006d98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68da      	ldr	r2, [r3, #12]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	441a      	add	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d303      	bcc.n	8006d88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68d9      	ldr	r1, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d90:	461a      	mov	r2, r3
 8006d92:	6838      	ldr	r0, [r7, #0]
 8006d94:	f002 f946 	bl	8009024 <memcpy>
	}
}
 8006d98:	bf00      	nop
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006da8:	f001 fd98 	bl	80088dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006db2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006db4:	e011      	b.n	8006dda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d012      	beq.n	8006de4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3324      	adds	r3, #36	@ 0x24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fd74 	bl	80078b0 <xTaskRemoveFromEventList>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dce:	f000 fe53 	bl	8007a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dce9      	bgt.n	8006db6 <prvUnlockQueue+0x16>
 8006de2:	e000      	b.n	8006de6 <prvUnlockQueue+0x46>
					break;
 8006de4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	22ff      	movs	r2, #255	@ 0xff
 8006dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006dee:	f001 fdab 	bl	8008948 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006df2:	f001 fd73 	bl	80088dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dfe:	e011      	b.n	8006e24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d012      	beq.n	8006e2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3310      	adds	r3, #16
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fd4f 	bl	80078b0 <xTaskRemoveFromEventList>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e18:	f000 fe2e 	bl	8007a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dce9      	bgt.n	8006e00 <prvUnlockQueue+0x60>
 8006e2c:	e000      	b.n	8006e30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	22ff      	movs	r2, #255	@ 0xff
 8006e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006e38:	f001 fd86 	bl	8008948 <vPortExitCritical>
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e4c:	f001 fd46 	bl	80088dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e001      	b.n	8006e62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e62:	f001 fd71 	bl	8008948 <vPortExitCritical>

	return xReturn;
 8006e66:	68fb      	ldr	r3, [r7, #12]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e78:	f001 fd30 	bl	80088dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d102      	bne.n	8006e8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e001      	b.n	8006e92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e92:	f001 fd59 	bl	8008948 <vPortExitCritical>

	return xReturn;
 8006e96:	68fb      	ldr	r3, [r7, #12]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e014      	b.n	8006eda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006eb0:	4a0f      	ldr	r2, [pc, #60]	@ (8006ef0 <vQueueAddToRegistry+0x50>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ebc:	490c      	ldr	r1, [pc, #48]	@ (8006ef0 <vQueueAddToRegistry+0x50>)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef0 <vQueueAddToRegistry+0x50>)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4413      	add	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ed2:	e006      	b.n	8006ee2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b07      	cmp	r3, #7
 8006ede:	d9e7      	bls.n	8006eb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20001a68 	.word	0x20001a68

08006ef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f04:	f001 fcea 	bl	80088dc <vPortEnterCritical>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f0e:	b25b      	sxtb	r3, r3
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d103      	bne.n	8006f1e <vQueueWaitForMessageRestricted+0x2a>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d103      	bne.n	8006f34 <vQueueWaitForMessageRestricted+0x40>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f34:	f001 fd08 	bl	8008948 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3324      	adds	r3, #36	@ 0x24
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fc83 	bl	8007854 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff ff26 	bl	8006da0 <prvUnlockQueue>
	}
 8006f54:	bf00      	nop
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08e      	sub	sp, #56	@ 0x38
 8006f60:	af04      	add	r7, sp, #16
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10d      	bne.n	8006f8c <xTaskCreateStatic+0x30>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f74:	b672      	cpsid	i
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	b662      	cpsie	i
 8006f84:	623b      	str	r3, [r7, #32]
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	e7fd      	b.n	8006f88 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10d      	bne.n	8006fae <xTaskCreateStatic+0x52>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f96:	b672      	cpsid	i
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	b662      	cpsie	i
 8006fa6:	61fb      	str	r3, [r7, #28]
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	e7fd      	b.n	8006faa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fae:	23a8      	movs	r3, #168	@ 0xa8
 8006fb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2ba8      	cmp	r3, #168	@ 0xa8
 8006fb6:	d00d      	beq.n	8006fd4 <xTaskCreateStatic+0x78>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbc:	b672      	cpsid	i
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	b662      	cpsie	i
 8006fcc:	61bb      	str	r3, [r7, #24]
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01e      	beq.n	800701a <xTaskCreateStatic+0xbe>
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01b      	beq.n	800701a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	9302      	str	r3, [sp, #8]
 8006ffc:	f107 0314 	add.w	r3, r7, #20
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f851 	bl	80070b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007012:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007014:	f000 f8f8 	bl	8007208 <prvAddNewTaskToReadyList>
 8007018:	e001      	b.n	800701e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800701e:	697b      	ldr	r3, [r7, #20]
	}
 8007020:	4618      	mov	r0, r3
 8007022:	3728      	adds	r7, #40	@ 0x28
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08c      	sub	sp, #48	@ 0x30
 800702c:	af04      	add	r7, sp, #16
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	4613      	mov	r3, r2
 8007036:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4618      	mov	r0, r3
 800703e:	f001 fd7b 	bl	8008b38 <pvPortMalloc>
 8007042:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00e      	beq.n	8007068 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800704a:	20a8      	movs	r0, #168	@ 0xa8
 800704c:	f001 fd74 	bl	8008b38 <pvPortMalloc>
 8007050:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	631a      	str	r2, [r3, #48]	@ 0x30
 800705e:	e005      	b.n	800706c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007060:	6978      	ldr	r0, [r7, #20]
 8007062:	f001 fe37 	bl	8008cd4 <vPortFree>
 8007066:	e001      	b.n	800706c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d017      	beq.n	80070a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	2300      	movs	r3, #0
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	9302      	str	r3, [sp, #8]
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f80f 	bl	80070b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007096:	69f8      	ldr	r0, [r7, #28]
 8007098:	f000 f8b6 	bl	8007208 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800709c:	2301      	movs	r3, #1
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e002      	b.n	80070a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295
 80070a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070a8:	69bb      	ldr	r3, [r7, #24]
	}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	461a      	mov	r2, r3
 80070cc:	21a5      	movs	r1, #165	@ 0xa5
 80070ce:	f001 ff1d 	bl	8008f0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80070dc:	440b      	add	r3, r1
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f023 0307 	bic.w	r3, r3, #7
 80070ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00d      	beq.n	8007112 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	b672      	cpsid	i
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	b662      	cpsie	i
 800710a:	617b      	str	r3, [r7, #20]
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	e7fd      	b.n	800710e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01f      	beq.n	8007158 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	e012      	b.n	8007144 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	7819      	ldrb	r1, [r3, #0]
 8007126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	3334      	adds	r3, #52	@ 0x34
 800712e:	460a      	mov	r2, r1
 8007130:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d006      	beq.n	800714c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	3301      	adds	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b0f      	cmp	r3, #15
 8007148:	d9e9      	bls.n	800711e <prvInitialiseNewTask+0x6a>
 800714a:	e000      	b.n	800714e <prvInitialiseNewTask+0x9a>
			{
				break;
 800714c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007156:	e003      	b.n	8007160 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	2b37      	cmp	r3, #55	@ 0x37
 8007164:	d901      	bls.n	800716a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007166:	2337      	movs	r3, #55	@ 0x37
 8007168:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800716e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007174:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	2200      	movs	r2, #0
 800717a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717e:	3304      	adds	r3, #4
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff f93d 	bl	8006400 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007188:	3318      	adds	r3, #24
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff f938 	bl	8006400 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007194:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	3354      	adds	r3, #84	@ 0x54
 80071ba:	224c      	movs	r2, #76	@ 0x4c
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 fea4 	bl	8008f0c <memset>
 80071c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c6:	4a0d      	ldr	r2, [pc, #52]	@ (80071fc <prvInitialiseNewTask+0x148>)
 80071c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	4a0c      	ldr	r2, [pc, #48]	@ (8007200 <prvInitialiseNewTask+0x14c>)
 80071ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007204 <prvInitialiseNewTask+0x150>)
 80071d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	69b8      	ldr	r0, [r7, #24]
 80071dc:	f001 fa72 	bl	80086c4 <pxPortInitialiseStack>
 80071e0:	4602      	mov	r2, r0
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f2:	bf00      	nop
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20005cf4 	.word	0x20005cf4
 8007200:	20005d5c 	.word	0x20005d5c
 8007204:	20005dc4 	.word	0x20005dc4

08007208 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007210:	f001 fb64 	bl	80088dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007214:	4b2d      	ldr	r3, [pc, #180]	@ (80072cc <prvAddNewTaskToReadyList+0xc4>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	4a2c      	ldr	r2, [pc, #176]	@ (80072cc <prvAddNewTaskToReadyList+0xc4>)
 800721c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800721e:	4b2c      	ldr	r3, [pc, #176]	@ (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d109      	bne.n	800723a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007226:	4a2a      	ldr	r2, [pc, #168]	@ (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800722c:	4b27      	ldr	r3, [pc, #156]	@ (80072cc <prvAddNewTaskToReadyList+0xc4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d110      	bne.n	8007256 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007234:	f000 fc44 	bl	8007ac0 <prvInitialiseTaskLists>
 8007238:	e00d      	b.n	8007256 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800723a:	4b26      	ldr	r3, [pc, #152]	@ (80072d4 <prvAddNewTaskToReadyList+0xcc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007242:	4b23      	ldr	r3, [pc, #140]	@ (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724c:	429a      	cmp	r2, r3
 800724e:	d802      	bhi.n	8007256 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007250:	4a1f      	ldr	r2, [pc, #124]	@ (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007256:	4b20      	ldr	r3, [pc, #128]	@ (80072d8 <prvAddNewTaskToReadyList+0xd0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	4a1e      	ldr	r2, [pc, #120]	@ (80072d8 <prvAddNewTaskToReadyList+0xd0>)
 800725e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007260:	4b1d      	ldr	r3, [pc, #116]	@ (80072d8 <prvAddNewTaskToReadyList+0xd0>)
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800726c:	4b1b      	ldr	r3, [pc, #108]	@ (80072dc <prvAddNewTaskToReadyList+0xd4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d903      	bls.n	800727c <prvAddNewTaskToReadyList+0x74>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007278:	4a18      	ldr	r2, [pc, #96]	@ (80072dc <prvAddNewTaskToReadyList+0xd4>)
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4a15      	ldr	r2, [pc, #84]	@ (80072e0 <prvAddNewTaskToReadyList+0xd8>)
 800728a:	441a      	add	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f7ff f8c1 	bl	800641a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007298:	f001 fb56 	bl	8008948 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800729c:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <prvAddNewTaskToReadyList+0xcc>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00e      	beq.n	80072c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072a4:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <prvAddNewTaskToReadyList+0xc8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d207      	bcs.n	80072c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072b2:	4b0c      	ldr	r3, [pc, #48]	@ (80072e4 <prvAddNewTaskToReadyList+0xdc>)
 80072b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20001f7c 	.word	0x20001f7c
 80072d0:	20001aa8 	.word	0x20001aa8
 80072d4:	20001f88 	.word	0x20001f88
 80072d8:	20001f98 	.word	0x20001f98
 80072dc:	20001f84 	.word	0x20001f84
 80072e0:	20001aac 	.word	0x20001aac
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d01a      	beq.n	8007330 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072fa:	4b15      	ldr	r3, [pc, #84]	@ (8007350 <vTaskDelay+0x68>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00d      	beq.n	800731e <vTaskDelay+0x36>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	b672      	cpsid	i
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	b662      	cpsie	i
 8007316:	60bb      	str	r3, [r7, #8]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800731e:	f000 f88f 	bl	8007440 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007322:	2100      	movs	r1, #0
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fe11 	bl	8007f4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800732a:	f000 f897 	bl	800745c <xTaskResumeAll>
 800732e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d107      	bne.n	8007346 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007336:	4b07      	ldr	r3, [pc, #28]	@ (8007354 <vTaskDelay+0x6c>)
 8007338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20001fa4 	.word	0x20001fa4
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	@ 0x28
 800735c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007366:	463a      	mov	r2, r7
 8007368:	1d39      	adds	r1, r7, #4
 800736a:	f107 0308 	add.w	r3, r7, #8
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fff2 	bl	8006358 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	9202      	str	r2, [sp, #8]
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	2300      	movs	r3, #0
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	2300      	movs	r3, #0
 8007384:	460a      	mov	r2, r1
 8007386:	4926      	ldr	r1, [pc, #152]	@ (8007420 <vTaskStartScheduler+0xc8>)
 8007388:	4826      	ldr	r0, [pc, #152]	@ (8007424 <vTaskStartScheduler+0xcc>)
 800738a:	f7ff fde7 	bl	8006f5c <xTaskCreateStatic>
 800738e:	4603      	mov	r3, r0
 8007390:	4a25      	ldr	r2, [pc, #148]	@ (8007428 <vTaskStartScheduler+0xd0>)
 8007392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007394:	4b24      	ldr	r3, [pc, #144]	@ (8007428 <vTaskStartScheduler+0xd0>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800739c:	2301      	movs	r3, #1
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	e001      	b.n	80073a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d102      	bne.n	80073b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073ac:	f000 fe22 	bl	8007ff4 <xTimerCreateTimerTask>
 80073b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d11d      	bne.n	80073f4 <vTaskStartScheduler+0x9c>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	b672      	cpsid	i
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	b662      	cpsie	i
 80073cc:	613b      	str	r3, [r7, #16]
}
 80073ce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073d0:	4b16      	ldr	r3, [pc, #88]	@ (800742c <vTaskStartScheduler+0xd4>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3354      	adds	r3, #84	@ 0x54
 80073d6:	4a16      	ldr	r2, [pc, #88]	@ (8007430 <vTaskStartScheduler+0xd8>)
 80073d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073da:	4b16      	ldr	r3, [pc, #88]	@ (8007434 <vTaskStartScheduler+0xdc>)
 80073dc:	f04f 32ff 	mov.w	r2, #4294967295
 80073e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073e2:	4b15      	ldr	r3, [pc, #84]	@ (8007438 <vTaskStartScheduler+0xe0>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073e8:	4b14      	ldr	r3, [pc, #80]	@ (800743c <vTaskStartScheduler+0xe4>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073ee:	f001 f9f7 	bl	80087e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073f2:	e011      	b.n	8007418 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fa:	d10d      	bne.n	8007418 <vTaskStartScheduler+0xc0>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007400:	b672      	cpsid	i
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	b662      	cpsie	i
 8007410:	60fb      	str	r3, [r7, #12]
}
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	e7fd      	b.n	8007414 <vTaskStartScheduler+0xbc>
}
 8007418:	bf00      	nop
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	08009134 	.word	0x08009134
 8007424:	08007a91 	.word	0x08007a91
 8007428:	20001fa0 	.word	0x20001fa0
 800742c:	20001aa8 	.word	0x20001aa8
 8007430:	20000010 	.word	0x20000010
 8007434:	20001f9c 	.word	0x20001f9c
 8007438:	20001f88 	.word	0x20001f88
 800743c:	20001f80 	.word	0x20001f80

08007440 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007444:	4b04      	ldr	r3, [pc, #16]	@ (8007458 <vTaskSuspendAll+0x18>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3301      	adds	r3, #1
 800744a:	4a03      	ldr	r2, [pc, #12]	@ (8007458 <vTaskSuspendAll+0x18>)
 800744c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800744e:	bf00      	nop
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	20001fa4 	.word	0x20001fa4

0800745c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007466:	2300      	movs	r3, #0
 8007468:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800746a:	4b43      	ldr	r3, [pc, #268]	@ (8007578 <xTaskResumeAll+0x11c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <xTaskResumeAll+0x32>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	b672      	cpsid	i
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	b662      	cpsie	i
 8007486:	603b      	str	r3, [r7, #0]
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800748e:	f001 fa25 	bl	80088dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007492:	4b39      	ldr	r3, [pc, #228]	@ (8007578 <xTaskResumeAll+0x11c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3b01      	subs	r3, #1
 8007498:	4a37      	ldr	r2, [pc, #220]	@ (8007578 <xTaskResumeAll+0x11c>)
 800749a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800749c:	4b36      	ldr	r3, [pc, #216]	@ (8007578 <xTaskResumeAll+0x11c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d162      	bne.n	800756a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074a4:	4b35      	ldr	r3, [pc, #212]	@ (800757c <xTaskResumeAll+0x120>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d05e      	beq.n	800756a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074ac:	e02f      	b.n	800750e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ae:	4b34      	ldr	r3, [pc, #208]	@ (8007580 <xTaskResumeAll+0x124>)
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3318      	adds	r3, #24
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff f80a 	bl	80064d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3304      	adds	r3, #4
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff f805 	bl	80064d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007584 <xTaskResumeAll+0x128>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d903      	bls.n	80074de <xTaskResumeAll+0x82>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	4a2a      	ldr	r2, [pc, #168]	@ (8007584 <xTaskResumeAll+0x128>)
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4a27      	ldr	r2, [pc, #156]	@ (8007588 <xTaskResumeAll+0x12c>)
 80074ec:	441a      	add	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f7fe ff90 	bl	800641a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fe:	4b23      	ldr	r3, [pc, #140]	@ (800758c <xTaskResumeAll+0x130>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007504:	429a      	cmp	r2, r3
 8007506:	d302      	bcc.n	800750e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007508:	4b21      	ldr	r3, [pc, #132]	@ (8007590 <xTaskResumeAll+0x134>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800750e:	4b1c      	ldr	r3, [pc, #112]	@ (8007580 <xTaskResumeAll+0x124>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1cb      	bne.n	80074ae <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800751c:	f000 fb76 	bl	8007c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007520:	4b1c      	ldr	r3, [pc, #112]	@ (8007594 <xTaskResumeAll+0x138>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d010      	beq.n	800754e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800752c:	f000 f846 	bl	80075bc <xTaskIncrementTick>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007536:	4b16      	ldr	r3, [pc, #88]	@ (8007590 <xTaskResumeAll+0x134>)
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3b01      	subs	r3, #1
 8007540:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1f1      	bne.n	800752c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007548:	4b12      	ldr	r3, [pc, #72]	@ (8007594 <xTaskResumeAll+0x138>)
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800754e:	4b10      	ldr	r3, [pc, #64]	@ (8007590 <xTaskResumeAll+0x134>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007556:	2301      	movs	r3, #1
 8007558:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800755a:	4b0f      	ldr	r3, [pc, #60]	@ (8007598 <xTaskResumeAll+0x13c>)
 800755c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800756a:	f001 f9ed 	bl	8008948 <vPortExitCritical>

	return xAlreadyYielded;
 800756e:	68bb      	ldr	r3, [r7, #8]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20001fa4 	.word	0x20001fa4
 800757c:	20001f7c 	.word	0x20001f7c
 8007580:	20001f3c 	.word	0x20001f3c
 8007584:	20001f84 	.word	0x20001f84
 8007588:	20001aac 	.word	0x20001aac
 800758c:	20001aa8 	.word	0x20001aa8
 8007590:	20001f90 	.word	0x20001f90
 8007594:	20001f8c 	.word	0x20001f8c
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075a2:	4b05      	ldr	r3, [pc, #20]	@ (80075b8 <xTaskGetTickCount+0x1c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075a8:	687b      	ldr	r3, [r7, #4]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20001f80 	.word	0x20001f80

080075bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c6:	4b50      	ldr	r3, [pc, #320]	@ (8007708 <xTaskIncrementTick+0x14c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 808c 	bne.w	80076e8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075d0:	4b4e      	ldr	r3, [pc, #312]	@ (800770c <xTaskIncrementTick+0x150>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075d8:	4a4c      	ldr	r2, [pc, #304]	@ (800770c <xTaskIncrementTick+0x150>)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d123      	bne.n	800762c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80075e4:	4b4a      	ldr	r3, [pc, #296]	@ (8007710 <xTaskIncrementTick+0x154>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00d      	beq.n	800760a <xTaskIncrementTick+0x4e>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	b672      	cpsid	i
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	b662      	cpsie	i
 8007602:	603b      	str	r3, [r7, #0]
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	e7fd      	b.n	8007606 <xTaskIncrementTick+0x4a>
 800760a:	4b41      	ldr	r3, [pc, #260]	@ (8007710 <xTaskIncrementTick+0x154>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	4b40      	ldr	r3, [pc, #256]	@ (8007714 <xTaskIncrementTick+0x158>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a3e      	ldr	r2, [pc, #248]	@ (8007710 <xTaskIncrementTick+0x154>)
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4a3e      	ldr	r2, [pc, #248]	@ (8007714 <xTaskIncrementTick+0x158>)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	4b3e      	ldr	r3, [pc, #248]	@ (8007718 <xTaskIncrementTick+0x15c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	4a3c      	ldr	r2, [pc, #240]	@ (8007718 <xTaskIncrementTick+0x15c>)
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	f000 faf0 	bl	8007c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800762c:	4b3b      	ldr	r3, [pc, #236]	@ (800771c <xTaskIncrementTick+0x160>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	429a      	cmp	r2, r3
 8007634:	d349      	bcc.n	80076ca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007636:	4b36      	ldr	r3, [pc, #216]	@ (8007710 <xTaskIncrementTick+0x154>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007640:	4b36      	ldr	r3, [pc, #216]	@ (800771c <xTaskIncrementTick+0x160>)
 8007642:	f04f 32ff 	mov.w	r2, #4294967295
 8007646:	601a      	str	r2, [r3, #0]
					break;
 8007648:	e03f      	b.n	80076ca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800764a:	4b31      	ldr	r3, [pc, #196]	@ (8007710 <xTaskIncrementTick+0x154>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	429a      	cmp	r2, r3
 8007660:	d203      	bcs.n	800766a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007662:	4a2e      	ldr	r2, [pc, #184]	@ (800771c <xTaskIncrementTick+0x160>)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007668:	e02f      	b.n	80076ca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	3304      	adds	r3, #4
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe ff30 	bl	80064d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	3318      	adds	r3, #24
 8007680:	4618      	mov	r0, r3
 8007682:	f7fe ff27 	bl	80064d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800768a:	4b25      	ldr	r3, [pc, #148]	@ (8007720 <xTaskIncrementTick+0x164>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d903      	bls.n	800769a <xTaskIncrementTick+0xde>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007696:	4a22      	ldr	r2, [pc, #136]	@ (8007720 <xTaskIncrementTick+0x164>)
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007724 <xTaskIncrementTick+0x168>)
 80076a8:	441a      	add	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f7fe feb2 	bl	800641a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007728 <xTaskIncrementTick+0x16c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d3b8      	bcc.n	8007636 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80076c4:	2301      	movs	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c8:	e7b5      	b.n	8007636 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076ca:	4b17      	ldr	r3, [pc, #92]	@ (8007728 <xTaskIncrementTick+0x16c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d0:	4914      	ldr	r1, [pc, #80]	@ (8007724 <xTaskIncrementTick+0x168>)
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d907      	bls.n	80076f2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80076e2:	2301      	movs	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	e004      	b.n	80076f2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076e8:	4b10      	ldr	r3, [pc, #64]	@ (800772c <xTaskIncrementTick+0x170>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3301      	adds	r3, #1
 80076ee:	4a0f      	ldr	r2, [pc, #60]	@ (800772c <xTaskIncrementTick+0x170>)
 80076f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007730 <xTaskIncrementTick+0x174>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80076fa:	2301      	movs	r3, #1
 80076fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80076fe:	697b      	ldr	r3, [r7, #20]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20001fa4 	.word	0x20001fa4
 800770c:	20001f80 	.word	0x20001f80
 8007710:	20001f34 	.word	0x20001f34
 8007714:	20001f38 	.word	0x20001f38
 8007718:	20001f94 	.word	0x20001f94
 800771c:	20001f9c 	.word	0x20001f9c
 8007720:	20001f84 	.word	0x20001f84
 8007724:	20001aac 	.word	0x20001aac
 8007728:	20001aa8 	.word	0x20001aa8
 800772c:	20001f8c 	.word	0x20001f8c
 8007730:	20001f90 	.word	0x20001f90

08007734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800773a:	4b2c      	ldr	r3, [pc, #176]	@ (80077ec <vTaskSwitchContext+0xb8>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007742:	4b2b      	ldr	r3, [pc, #172]	@ (80077f0 <vTaskSwitchContext+0xbc>)
 8007744:	2201      	movs	r2, #1
 8007746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007748:	e049      	b.n	80077de <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800774a:	4b29      	ldr	r3, [pc, #164]	@ (80077f0 <vTaskSwitchContext+0xbc>)
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007750:	4b28      	ldr	r3, [pc, #160]	@ (80077f4 <vTaskSwitchContext+0xc0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	e013      	b.n	8007780 <vTaskSwitchContext+0x4c>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10d      	bne.n	800777a <vTaskSwitchContext+0x46>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	b672      	cpsid	i
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	b662      	cpsie	i
 8007772:	607b      	str	r3, [r7, #4]
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop
 8007778:	e7fd      	b.n	8007776 <vTaskSwitchContext+0x42>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b01      	subs	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	491d      	ldr	r1, [pc, #116]	@ (80077f8 <vTaskSwitchContext+0xc4>)
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0e1      	beq.n	8007758 <vTaskSwitchContext+0x24>
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4613      	mov	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4a16      	ldr	r2, [pc, #88]	@ (80077f8 <vTaskSwitchContext+0xc4>)
 80077a0:	4413      	add	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	605a      	str	r2, [r3, #4]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	3308      	adds	r3, #8
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d104      	bne.n	80077c4 <vTaskSwitchContext+0x90>
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	605a      	str	r2, [r3, #4]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	4a0c      	ldr	r2, [pc, #48]	@ (80077fc <vTaskSwitchContext+0xc8>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	4a09      	ldr	r2, [pc, #36]	@ (80077f4 <vTaskSwitchContext+0xc0>)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077d4:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <vTaskSwitchContext+0xc8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3354      	adds	r3, #84	@ 0x54
 80077da:	4a09      	ldr	r2, [pc, #36]	@ (8007800 <vTaskSwitchContext+0xcc>)
 80077dc:	6013      	str	r3, [r2, #0]
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	20001fa4 	.word	0x20001fa4
 80077f0:	20001f90 	.word	0x20001f90
 80077f4:	20001f84 	.word	0x20001f84
 80077f8:	20001aac 	.word	0x20001aac
 80077fc:	20001aa8 	.word	0x20001aa8
 8007800:	20000010 	.word	0x20000010

08007804 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10d      	bne.n	8007830 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007818:	b672      	cpsid	i
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	b662      	cpsie	i
 8007828:	60fb      	str	r3, [r7, #12]
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	e7fd      	b.n	800782c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <vTaskPlaceOnEventList+0x4c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3318      	adds	r3, #24
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7fe fe12 	bl	8006462 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800783e:	2101      	movs	r1, #1
 8007840:	6838      	ldr	r0, [r7, #0]
 8007842:	f000 fb83 	bl	8007f4c <prvAddCurrentTaskToDelayedList>
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20001aa8 	.word	0x20001aa8

08007854 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10d      	bne.n	8007882 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	b672      	cpsid	i
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	b662      	cpsie	i
 800787a:	617b      	str	r3, [r7, #20]
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	e7fd      	b.n	800787e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007882:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <vTaskPlaceOnEventListRestricted+0x58>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3318      	adds	r3, #24
 8007888:	4619      	mov	r1, r3
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7fe fdc5 	bl	800641a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007896:	f04f 33ff 	mov.w	r3, #4294967295
 800789a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	68b8      	ldr	r0, [r7, #8]
 80078a0:	f000 fb54 	bl	8007f4c <prvAddCurrentTaskToDelayedList>
	}
 80078a4:	bf00      	nop
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	20001aa8 	.word	0x20001aa8

080078b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10d      	bne.n	80078e2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ca:	b672      	cpsid	i
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	b662      	cpsie	i
 80078da:	60fb      	str	r3, [r7, #12]
}
 80078dc:	bf00      	nop
 80078de:	bf00      	nop
 80078e0:	e7fd      	b.n	80078de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3318      	adds	r3, #24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fdf4 	bl	80064d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007964 <xTaskRemoveFromEventList+0xb4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11d      	bne.n	8007930 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fe fdeb 	bl	80064d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007902:	4b19      	ldr	r3, [pc, #100]	@ (8007968 <xTaskRemoveFromEventList+0xb8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d903      	bls.n	8007912 <xTaskRemoveFromEventList+0x62>
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790e:	4a16      	ldr	r2, [pc, #88]	@ (8007968 <xTaskRemoveFromEventList+0xb8>)
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4a13      	ldr	r2, [pc, #76]	@ (800796c <xTaskRemoveFromEventList+0xbc>)
 8007920:	441a      	add	r2, r3
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3304      	adds	r3, #4
 8007926:	4619      	mov	r1, r3
 8007928:	4610      	mov	r0, r2
 800792a:	f7fe fd76 	bl	800641a <vListInsertEnd>
 800792e:	e005      	b.n	800793c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3318      	adds	r3, #24
 8007934:	4619      	mov	r1, r3
 8007936:	480e      	ldr	r0, [pc, #56]	@ (8007970 <xTaskRemoveFromEventList+0xc0>)
 8007938:	f7fe fd6f 	bl	800641a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007940:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <xTaskRemoveFromEventList+0xc4>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007946:	429a      	cmp	r2, r3
 8007948:	d905      	bls.n	8007956 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800794a:	2301      	movs	r3, #1
 800794c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800794e:	4b0a      	ldr	r3, [pc, #40]	@ (8007978 <xTaskRemoveFromEventList+0xc8>)
 8007950:	2201      	movs	r2, #1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e001      	b.n	800795a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007956:	2300      	movs	r3, #0
 8007958:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800795a:	697b      	ldr	r3, [r7, #20]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20001fa4 	.word	0x20001fa4
 8007968:	20001f84 	.word	0x20001f84
 800796c:	20001aac 	.word	0x20001aac
 8007970:	20001f3c 	.word	0x20001f3c
 8007974:	20001aa8 	.word	0x20001aa8
 8007978:	20001f90 	.word	0x20001f90

0800797c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007984:	4b06      	ldr	r3, [pc, #24]	@ (80079a0 <vTaskInternalSetTimeOutState+0x24>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800798c:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <vTaskInternalSetTimeOutState+0x28>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	605a      	str	r2, [r3, #4]
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	20001f94 	.word	0x20001f94
 80079a4:	20001f80 	.word	0x20001f80

080079a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10d      	bne.n	80079d4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	b672      	cpsid	i
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	b662      	cpsie	i
 80079cc:	613b      	str	r3, [r7, #16]
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	e7fd      	b.n	80079d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10d      	bne.n	80079f6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	b672      	cpsid	i
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	b662      	cpsie	i
 80079ee:	60fb      	str	r3, [r7, #12]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80079f6:	f000 ff71 	bl	80088dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007a70 <xTaskCheckForTimeOut+0xc8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d102      	bne.n	8007a1a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	e023      	b.n	8007a62 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b15      	ldr	r3, [pc, #84]	@ (8007a74 <xTaskCheckForTimeOut+0xcc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d007      	beq.n	8007a36 <xTaskCheckForTimeOut+0x8e>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e015      	b.n	8007a62 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d20b      	bcs.n	8007a58 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1ad2      	subs	r2, r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ff95 	bl	800797c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	e004      	b.n	8007a62 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a62:	f000 ff71 	bl	8008948 <vPortExitCritical>

	return xReturn;
 8007a66:	69fb      	ldr	r3, [r7, #28]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20001f80 	.word	0x20001f80
 8007a74:	20001f94 	.word	0x20001f94

08007a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a7c:	4b03      	ldr	r3, [pc, #12]	@ (8007a8c <vTaskMissedYield+0x14>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
}
 8007a82:	bf00      	nop
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	20001f90 	.word	0x20001f90

08007a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a98:	f000 f852 	bl	8007b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a9c:	4b06      	ldr	r3, [pc, #24]	@ (8007ab8 <prvIdleTask+0x28>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d9f9      	bls.n	8007a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007aa4:	4b05      	ldr	r3, [pc, #20]	@ (8007abc <prvIdleTask+0x2c>)
 8007aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ab4:	e7f0      	b.n	8007a98 <prvIdleTask+0x8>
 8007ab6:	bf00      	nop
 8007ab8:	20001aac 	.word	0x20001aac
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
 8007aca:	e00c      	b.n	8007ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4a12      	ldr	r2, [pc, #72]	@ (8007b20 <prvInitialiseTaskLists+0x60>)
 8007ad8:	4413      	add	r3, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fc70 	bl	80063c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b37      	cmp	r3, #55	@ 0x37
 8007aea:	d9ef      	bls.n	8007acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aec:	480d      	ldr	r0, [pc, #52]	@ (8007b24 <prvInitialiseTaskLists+0x64>)
 8007aee:	f7fe fc67 	bl	80063c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007af2:	480d      	ldr	r0, [pc, #52]	@ (8007b28 <prvInitialiseTaskLists+0x68>)
 8007af4:	f7fe fc64 	bl	80063c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007af8:	480c      	ldr	r0, [pc, #48]	@ (8007b2c <prvInitialiseTaskLists+0x6c>)
 8007afa:	f7fe fc61 	bl	80063c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007afe:	480c      	ldr	r0, [pc, #48]	@ (8007b30 <prvInitialiseTaskLists+0x70>)
 8007b00:	f7fe fc5e 	bl	80063c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b04:	480b      	ldr	r0, [pc, #44]	@ (8007b34 <prvInitialiseTaskLists+0x74>)
 8007b06:	f7fe fc5b 	bl	80063c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b38 <prvInitialiseTaskLists+0x78>)
 8007b0c:	4a05      	ldr	r2, [pc, #20]	@ (8007b24 <prvInitialiseTaskLists+0x64>)
 8007b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b10:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <prvInitialiseTaskLists+0x7c>)
 8007b12:	4a05      	ldr	r2, [pc, #20]	@ (8007b28 <prvInitialiseTaskLists+0x68>)
 8007b14:	601a      	str	r2, [r3, #0]
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20001aac 	.word	0x20001aac
 8007b24:	20001f0c 	.word	0x20001f0c
 8007b28:	20001f20 	.word	0x20001f20
 8007b2c:	20001f3c 	.word	0x20001f3c
 8007b30:	20001f50 	.word	0x20001f50
 8007b34:	20001f68 	.word	0x20001f68
 8007b38:	20001f34 	.word	0x20001f34
 8007b3c:	20001f38 	.word	0x20001f38

08007b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b46:	e019      	b.n	8007b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b48:	f000 fec8 	bl	80088dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4c:	4b10      	ldr	r3, [pc, #64]	@ (8007b90 <prvCheckTasksWaitingTermination+0x50>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fcbb 	bl	80064d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <prvCheckTasksWaitingTermination+0x54>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a0b      	ldr	r2, [pc, #44]	@ (8007b94 <prvCheckTasksWaitingTermination+0x54>)
 8007b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b68:	4b0b      	ldr	r3, [pc, #44]	@ (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b72:	f000 fee9 	bl	8008948 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f810 	bl	8007b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7c:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e1      	bne.n	8007b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20001f50 	.word	0x20001f50
 8007b94:	20001f7c 	.word	0x20001f7c
 8007b98:	20001f64 	.word	0x20001f64

08007b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3354      	adds	r3, #84	@ 0x54
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 f9b7 	bl	8008f1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d108      	bne.n	8007bca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 f889 	bl	8008cd4 <vPortFree>
				vPortFree( pxTCB );
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 f886 	bl	8008cd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bc8:	e01b      	b.n	8007c02 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d103      	bne.n	8007bdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f87d 	bl	8008cd4 <vPortFree>
	}
 8007bda:	e012      	b.n	8007c02 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d00d      	beq.n	8007c02 <prvDeleteTCB+0x66>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	b672      	cpsid	i
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	b662      	cpsie	i
 8007bfa:	60fb      	str	r3, [r7, #12]
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	e7fd      	b.n	8007bfe <prvDeleteTCB+0x62>
	}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c12:	4b0c      	ldr	r3, [pc, #48]	@ (8007c44 <prvResetNextTaskUnblockTime+0x38>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c48 <prvResetNextTaskUnblockTime+0x3c>)
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c24:	e008      	b.n	8007c38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c26:	4b07      	ldr	r3, [pc, #28]	@ (8007c44 <prvResetNextTaskUnblockTime+0x38>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4a04      	ldr	r2, [pc, #16]	@ (8007c48 <prvResetNextTaskUnblockTime+0x3c>)
 8007c36:	6013      	str	r3, [r2, #0]
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	20001f34 	.word	0x20001f34
 8007c48:	20001f9c 	.word	0x20001f9c

08007c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c52:	4b0b      	ldr	r3, [pc, #44]	@ (8007c80 <xTaskGetSchedulerState+0x34>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	e008      	b.n	8007c72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c60:	4b08      	ldr	r3, [pc, #32]	@ (8007c84 <xTaskGetSchedulerState+0x38>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	e001      	b.n	8007c72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c72:	687b      	ldr	r3, [r7, #4]
	}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	20001f88 	.word	0x20001f88
 8007c84:	20001fa4 	.word	0x20001fa4

08007c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d05c      	beq.n	8007d58 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c9e:	4b31      	ldr	r3, [pc, #196]	@ (8007d64 <xTaskPriorityDisinherit+0xdc>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d00d      	beq.n	8007cc4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cac:	b672      	cpsid	i
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	b662      	cpsie	i
 8007cbc:	60fb      	str	r3, [r7, #12]
}
 8007cbe:	bf00      	nop
 8007cc0:	bf00      	nop
 8007cc2:	e7fd      	b.n	8007cc0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10d      	bne.n	8007ce8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd0:	b672      	cpsid	i
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	b662      	cpsie	i
 8007ce0:	60bb      	str	r3, [r7, #8]
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	e7fd      	b.n	8007ce4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cec:	1e5a      	subs	r2, r3, #1
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d02c      	beq.n	8007d58 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d128      	bne.n	8007d58 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fbe2 	bl	80064d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d28:	4b0f      	ldr	r3, [pc, #60]	@ (8007d68 <xTaskPriorityDisinherit+0xe0>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d903      	bls.n	8007d38 <xTaskPriorityDisinherit+0xb0>
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	4a0c      	ldr	r2, [pc, #48]	@ (8007d68 <xTaskPriorityDisinherit+0xe0>)
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4a09      	ldr	r2, [pc, #36]	@ (8007d6c <xTaskPriorityDisinherit+0xe4>)
 8007d46:	441a      	add	r2, r3
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	f7fe fb63 	bl	800641a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d54:	2301      	movs	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d58:	697b      	ldr	r3, [r7, #20]
	}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20001aa8 	.word	0x20001aa8
 8007d68:	20001f84 	.word	0x20001f84
 8007d6c:	20001aac 	.word	0x20001aac

08007d70 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08e      	sub	sp, #56	@ 0x38
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007d80:	2301      	movs	r3, #1
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10d      	bne.n	8007da6 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8e:	b672      	cpsid	i
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	b662      	cpsie	i
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	e7fd      	b.n	8007da2 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007da6:	f000 fe81 	bl	8008aac <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007dae:	f3ef 8211 	mrs	r2, BASEPRI
 8007db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db6:	b672      	cpsid	i
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	b662      	cpsie	i
 8007dc6:	623a      	str	r2, [r7, #32]
 8007dc8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007dca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007de4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d82e      	bhi.n	8007e54 <xTaskGenericNotifyFromISR+0xe4>
 8007df6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dfc <xTaskGenericNotifyFromISR+0x8c>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e7d 	.word	0x08007e7d
 8007e00:	08007e11 	.word	0x08007e11
 8007e04:	08007e23 	.word	0x08007e23
 8007e08:	08007e33 	.word	0x08007e33
 8007e0c:	08007e3d 	.word	0x08007e3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007e20:	e02f      	b.n	8007e82 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007e30:	e027      	b.n	8007e82 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	68ba      	ldr	r2, [r7, #8]
 8007e36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007e3a:	e022      	b.n	8007e82 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d004      	beq.n	8007e4e <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007e4c:	e019      	b.n	8007e82 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007e52:	e016      	b.n	8007e82 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5e:	d00f      	beq.n	8007e80 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	b672      	cpsid	i
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	b662      	cpsie	i
 8007e74:	61bb      	str	r3, [r7, #24]
}
 8007e76:	bf00      	nop
 8007e78:	bf00      	nop
 8007e7a:	e7fd      	b.n	8007e78 <xTaskGenericNotifyFromISR+0x108>
					break;
 8007e7c:	bf00      	nop
 8007e7e:	e000      	b.n	8007e82 <xTaskGenericNotifyFromISR+0x112>
					break;
 8007e80:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007e82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d149      	bne.n	8007f1e <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00d      	beq.n	8007eae <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	b672      	cpsid	i
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	b662      	cpsie	i
 8007ea6:	617b      	str	r3, [r7, #20]
}
 8007ea8:	bf00      	nop
 8007eaa:	bf00      	nop
 8007eac:	e7fd      	b.n	8007eaa <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eae:	4b21      	ldr	r3, [pc, #132]	@ (8007f34 <xTaskGenericNotifyFromISR+0x1c4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d11d      	bne.n	8007ef2 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fb0a 	bl	80064d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8007f38 <xTaskGenericNotifyFromISR+0x1c8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d903      	bls.n	8007ed4 <xTaskGenericNotifyFromISR+0x164>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed0:	4a19      	ldr	r2, [pc, #100]	@ (8007f38 <xTaskGenericNotifyFromISR+0x1c8>)
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4a16      	ldr	r2, [pc, #88]	@ (8007f3c <xTaskGenericNotifyFromISR+0x1cc>)
 8007ee2:	441a      	add	r2, r3
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f7fe fa95 	bl	800641a <vListInsertEnd>
 8007ef0:	e005      	b.n	8007efe <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef4:	3318      	adds	r3, #24
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4811      	ldr	r0, [pc, #68]	@ (8007f40 <xTaskGenericNotifyFromISR+0x1d0>)
 8007efa:	f7fe fa8e 	bl	800641a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f02:	4b10      	ldr	r3, [pc, #64]	@ (8007f44 <xTaskGenericNotifyFromISR+0x1d4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d908      	bls.n	8007f1e <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007f0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f14:	2201      	movs	r2, #1
 8007f16:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007f18:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <xTaskGenericNotifyFromISR+0x1d8>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f383 8811 	msr	BASEPRI, r3
}
 8007f28:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3738      	adds	r7, #56	@ 0x38
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20001fa4 	.word	0x20001fa4
 8007f38:	20001f84 	.word	0x20001f84
 8007f3c:	20001aac 	.word	0x20001aac
 8007f40:	20001f3c 	.word	0x20001f3c
 8007f44:	20001aa8 	.word	0x20001aa8
 8007f48:	20001f90 	.word	0x20001f90

08007f4c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f56:	4b21      	ldr	r3, [pc, #132]	@ (8007fdc <prvAddCurrentTaskToDelayedList+0x90>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f5c:	4b20      	ldr	r3, [pc, #128]	@ (8007fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fab6 	bl	80064d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d10a      	bne.n	8007f86 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d007      	beq.n	8007f86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f76:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4819      	ldr	r0, [pc, #100]	@ (8007fe4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f80:	f7fe fa4b 	bl	800641a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f84:	e026      	b.n	8007fd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f8e:	4b14      	ldr	r3, [pc, #80]	@ (8007fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d209      	bcs.n	8007fb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f9e:	4b12      	ldr	r3, [pc, #72]	@ (8007fe8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	4619      	mov	r1, r3
 8007faa:	4610      	mov	r0, r2
 8007fac:	f7fe fa59 	bl	8006462 <vListInsert>
}
 8007fb0:	e010      	b.n	8007fd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8007fec <prvAddCurrentTaskToDelayedList+0xa0>)
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	f7fe fa4f 	bl	8006462 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d202      	bcs.n	8007fd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007fce:	4a08      	ldr	r2, [pc, #32]	@ (8007ff0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	6013      	str	r3, [r2, #0]
}
 8007fd4:	bf00      	nop
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20001f80 	.word	0x20001f80
 8007fe0:	20001aa8 	.word	0x20001aa8
 8007fe4:	20001f68 	.word	0x20001f68
 8007fe8:	20001f38 	.word	0x20001f38
 8007fec:	20001f34 	.word	0x20001f34
 8007ff0:	20001f9c 	.word	0x20001f9c

08007ff4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	@ 0x28
 8007ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ffe:	f000 fb21 	bl	8008644 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008002:	4b1e      	ldr	r3, [pc, #120]	@ (800807c <xTimerCreateTimerTask+0x88>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d021      	beq.n	800804e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800800a:	2300      	movs	r3, #0
 800800c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008012:	1d3a      	adds	r2, r7, #4
 8008014:	f107 0108 	add.w	r1, r7, #8
 8008018:	f107 030c 	add.w	r3, r7, #12
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe f9b5 	bl	800638c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	9202      	str	r2, [sp, #8]
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	2302      	movs	r3, #2
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	2300      	movs	r3, #0
 8008032:	460a      	mov	r2, r1
 8008034:	4912      	ldr	r1, [pc, #72]	@ (8008080 <xTimerCreateTimerTask+0x8c>)
 8008036:	4813      	ldr	r0, [pc, #76]	@ (8008084 <xTimerCreateTimerTask+0x90>)
 8008038:	f7fe ff90 	bl	8006f5c <xTaskCreateStatic>
 800803c:	4603      	mov	r3, r0
 800803e:	4a12      	ldr	r2, [pc, #72]	@ (8008088 <xTimerCreateTimerTask+0x94>)
 8008040:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008042:	4b11      	ldr	r3, [pc, #68]	@ (8008088 <xTimerCreateTimerTask+0x94>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800804a:	2301      	movs	r3, #1
 800804c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10d      	bne.n	8008070 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008058:	b672      	cpsid	i
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	b662      	cpsie	i
 8008068:	613b      	str	r3, [r7, #16]
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	e7fd      	b.n	800806c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008070:	697b      	ldr	r3, [r7, #20]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20001fd8 	.word	0x20001fd8
 8008080:	0800913c 	.word	0x0800913c
 8008084:	080081cd 	.word	0x080081cd
 8008088:	20001fdc 	.word	0x20001fdc

0800808c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08a      	sub	sp, #40	@ 0x28
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800809a:	2300      	movs	r3, #0
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10d      	bne.n	80080c0 <xTimerGenericCommand+0x34>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a8:	b672      	cpsid	i
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	b662      	cpsie	i
 80080b8:	623b      	str	r3, [r7, #32]
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080c0:	4b19      	ldr	r3, [pc, #100]	@ (8008128 <xTimerGenericCommand+0x9c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d02a      	beq.n	800811e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	dc18      	bgt.n	800810c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080da:	f7ff fdb7 	bl	8007c4c <xTaskGetSchedulerState>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d109      	bne.n	80080f8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080e4:	4b10      	ldr	r3, [pc, #64]	@ (8008128 <xTimerGenericCommand+0x9c>)
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	f107 0110 	add.w	r1, r7, #16
 80080ec:	2300      	movs	r3, #0
 80080ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f0:	f7fe fb30 	bl	8006754 <xQueueGenericSend>
 80080f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80080f6:	e012      	b.n	800811e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008128 <xTimerGenericCommand+0x9c>)
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	f107 0110 	add.w	r1, r7, #16
 8008100:	2300      	movs	r3, #0
 8008102:	2200      	movs	r2, #0
 8008104:	f7fe fb26 	bl	8006754 <xQueueGenericSend>
 8008108:	6278      	str	r0, [r7, #36]	@ 0x24
 800810a:	e008      	b.n	800811e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800810c:	4b06      	ldr	r3, [pc, #24]	@ (8008128 <xTimerGenericCommand+0x9c>)
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	f107 0110 	add.w	r1, r7, #16
 8008114:	2300      	movs	r3, #0
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	f7fe fc26 	bl	8006968 <xQueueGenericSendFromISR>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008120:	4618      	mov	r0, r3
 8008122:	3728      	adds	r7, #40	@ 0x28
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20001fd8 	.word	0x20001fd8

0800812c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af02      	add	r7, sp, #8
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008136:	4b24      	ldr	r3, [pc, #144]	@ (80081c8 <prvProcessExpiredTimer+0x9c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	3304      	adds	r3, #4
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe f9c5 	bl	80064d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d025      	beq.n	80081a4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	699a      	ldr	r2, [r3, #24]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	18d1      	adds	r1, r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	6978      	ldr	r0, [r7, #20]
 8008166:	f000 f8d7 	bl	8008318 <prvInsertTimerInActiveList>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d022      	beq.n	80081b6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008170:	2300      	movs	r3, #0
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	2100      	movs	r1, #0
 800817a:	6978      	ldr	r0, [r7, #20]
 800817c:	f7ff ff86 	bl	800808c <xTimerGenericCommand>
 8008180:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d116      	bne.n	80081b6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818c:	b672      	cpsid	i
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	b662      	cpsie	i
 800819c:	60fb      	str	r3, [r7, #12]
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	e7fd      	b.n	80081a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081aa:	f023 0301 	bic.w	r3, r3, #1
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	6978      	ldr	r0, [r7, #20]
 80081bc:	4798      	blx	r3
}
 80081be:	bf00      	nop
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20001fd0 	.word	0x20001fd0

080081cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081d4:	f107 0308 	add.w	r3, r7, #8
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 f859 	bl	8008290 <prvGetNextExpireTime>
 80081de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	4619      	mov	r1, r3
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 f805 	bl	80081f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081ea:	f000 f8d7 	bl	800839c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081ee:	bf00      	nop
 80081f0:	e7f0      	b.n	80081d4 <prvTimerTask+0x8>
	...

080081f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081fe:	f7ff f91f 	bl	8007440 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008202:	f107 0308 	add.w	r3, r7, #8
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f866 	bl	80082d8 <prvSampleTimeNow>
 800820c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d130      	bne.n	8008276 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <prvProcessTimerOrBlockTask+0x3c>
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	429a      	cmp	r2, r3
 8008220:	d806      	bhi.n	8008230 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008222:	f7ff f91b 	bl	800745c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff ff7f 	bl	800812c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800822e:	e024      	b.n	800827a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008236:	4b13      	ldr	r3, [pc, #76]	@ (8008284 <prvProcessTimerOrBlockTask+0x90>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <prvProcessTimerOrBlockTask+0x50>
 8008240:	2301      	movs	r3, #1
 8008242:	e000      	b.n	8008246 <prvProcessTimerOrBlockTask+0x52>
 8008244:	2300      	movs	r3, #0
 8008246:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008248:	4b0f      	ldr	r3, [pc, #60]	@ (8008288 <prvProcessTimerOrBlockTask+0x94>)
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	4619      	mov	r1, r3
 8008256:	f7fe fe4d 	bl	8006ef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800825a:	f7ff f8ff 	bl	800745c <xTaskResumeAll>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008264:	4b09      	ldr	r3, [pc, #36]	@ (800828c <prvProcessTimerOrBlockTask+0x98>)
 8008266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	f3bf 8f6f 	isb	sy
}
 8008274:	e001      	b.n	800827a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008276:	f7ff f8f1 	bl	800745c <xTaskResumeAll>
}
 800827a:	bf00      	nop
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20001fd4 	.word	0x20001fd4
 8008288:	20001fd8 	.word	0x20001fd8
 800828c:	e000ed04 	.word	0xe000ed04

08008290 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008298:	4b0e      	ldr	r3, [pc, #56]	@ (80082d4 <prvGetNextExpireTime+0x44>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <prvGetNextExpireTime+0x16>
 80082a2:	2201      	movs	r2, #1
 80082a4:	e000      	b.n	80082a8 <prvGetNextExpireTime+0x18>
 80082a6:	2200      	movs	r2, #0
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d105      	bne.n	80082c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082b4:	4b07      	ldr	r3, [pc, #28]	@ (80082d4 <prvGetNextExpireTime+0x44>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	e001      	b.n	80082c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082c4:	68fb      	ldr	r3, [r7, #12]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20001fd0 	.word	0x20001fd0

080082d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082e0:	f7ff f95c 	bl	800759c <xTaskGetTickCount>
 80082e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008314 <prvSampleTimeNow+0x3c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d205      	bcs.n	80082fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082f0:	f000 f940 	bl	8008574 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e002      	b.n	8008302 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008302:	4a04      	ldr	r2, [pc, #16]	@ (8008314 <prvSampleTimeNow+0x3c>)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008308:	68fb      	ldr	r3, [r7, #12]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20001fe0 	.word	0x20001fe0

08008318 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	429a      	cmp	r2, r3
 800833c:	d812      	bhi.n	8008364 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	429a      	cmp	r2, r3
 800834a:	d302      	bcc.n	8008352 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800834c:	2301      	movs	r3, #1
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	e01b      	b.n	800838a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008352:	4b10      	ldr	r3, [pc, #64]	@ (8008394 <prvInsertTimerInActiveList+0x7c>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3304      	adds	r3, #4
 800835a:	4619      	mov	r1, r3
 800835c:	4610      	mov	r0, r2
 800835e:	f7fe f880 	bl	8006462 <vListInsert>
 8008362:	e012      	b.n	800838a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d206      	bcs.n	800837a <prvInsertTimerInActiveList+0x62>
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	429a      	cmp	r2, r3
 8008372:	d302      	bcc.n	800837a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008374:	2301      	movs	r3, #1
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	e007      	b.n	800838a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800837a:	4b07      	ldr	r3, [pc, #28]	@ (8008398 <prvInsertTimerInActiveList+0x80>)
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3304      	adds	r3, #4
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f7fe f86c 	bl	8006462 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800838a:	697b      	ldr	r3, [r7, #20]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20001fd4 	.word	0x20001fd4
 8008398:	20001fd0 	.word	0x20001fd0

0800839c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b08e      	sub	sp, #56	@ 0x38
 80083a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083a2:	e0d4      	b.n	800854e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da1b      	bge.n	80083e2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083aa:	1d3b      	adds	r3, r7, #4
 80083ac:	3304      	adds	r3, #4
 80083ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10d      	bne.n	80083d2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	b672      	cpsid	i
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	b662      	cpsie	i
 80083ca:	61fb      	str	r3, [r7, #28]
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d8:	6850      	ldr	r0, [r2, #4]
 80083da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083dc:	6892      	ldr	r2, [r2, #8]
 80083de:	4611      	mov	r1, r2
 80083e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f2c0 80b2 	blt.w	800854e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	3304      	adds	r3, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe f86a 	bl	80064d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008400:	463b      	mov	r3, r7
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff ff68 	bl	80082d8 <prvSampleTimeNow>
 8008408:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b09      	cmp	r3, #9
 800840e:	f200 809b 	bhi.w	8008548 <prvProcessReceivedCommands+0x1ac>
 8008412:	a201      	add	r2, pc, #4	@ (adr r2, 8008418 <prvProcessReceivedCommands+0x7c>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008441 	.word	0x08008441
 800841c:	08008441 	.word	0x08008441
 8008420:	08008441 	.word	0x08008441
 8008424:	080084bb 	.word	0x080084bb
 8008428:	080084cf 	.word	0x080084cf
 800842c:	0800851f 	.word	0x0800851f
 8008430:	08008441 	.word	0x08008441
 8008434:	08008441 	.word	0x08008441
 8008438:	080084bb 	.word	0x080084bb
 800843c:	080084cf 	.word	0x080084cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008442:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008446:	f043 0301 	orr.w	r3, r3, #1
 800844a:	b2da      	uxtb	r2, r3
 800844c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	18d1      	adds	r1, r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800845e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008460:	f7ff ff5a 	bl	8008318 <prvInsertTimerInActiveList>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d070      	beq.n	800854c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008470:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d065      	beq.n	800854c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	441a      	add	r2, r3
 8008488:	2300      	movs	r3, #0
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	2300      	movs	r3, #0
 800848e:	2100      	movs	r1, #0
 8008490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008492:	f7ff fdfb 	bl	800808c <xTimerGenericCommand>
 8008496:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d156      	bne.n	800854c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	b672      	cpsid	i
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	b662      	cpsie	i
 80084b2:	61bb      	str	r3, [r7, #24]
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	e7fd      	b.n	80084b6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80084cc:	e03f      	b.n	800854e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084d4:	f043 0301 	orr.w	r3, r3, #1
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10d      	bne.n	800850a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80084ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f2:	b672      	cpsid	i
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	b662      	cpsie	i
 8008502:	617b      	str	r3, [r7, #20]
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	e7fd      	b.n	8008506 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	18d1      	adds	r1, r2, r3
 8008512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008518:	f7ff fefe 	bl	8008318 <prvInsertTimerInActiveList>
					break;
 800851c:	e017      	b.n	800854e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d103      	bne.n	8008534 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800852c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800852e:	f000 fbd1 	bl	8008cd4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008532:	e00c      	b.n	800854e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800853a:	f023 0301 	bic.w	r3, r3, #1
 800853e:	b2da      	uxtb	r2, r3
 8008540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008546:	e002      	b.n	800854e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008548:	bf00      	nop
 800854a:	e000      	b.n	800854e <prvProcessReceivedCommands+0x1b2>
					break;
 800854c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800854e:	4b08      	ldr	r3, [pc, #32]	@ (8008570 <prvProcessReceivedCommands+0x1d4>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	1d39      	adds	r1, r7, #4
 8008554:	2200      	movs	r2, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe faaa 	bl	8006ab0 <xQueueReceive>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	f47f af20 	bne.w	80083a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	3730      	adds	r7, #48	@ 0x30
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	20001fd8 	.word	0x20001fd8

08008574 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800857a:	e04b      	b.n	8008614 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800857c:	4b2f      	ldr	r3, [pc, #188]	@ (800863c <prvSwitchTimerLists+0xc8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008586:	4b2d      	ldr	r3, [pc, #180]	@ (800863c <prvSwitchTimerLists+0xc8>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd ff9d 	bl	80064d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d031      	beq.n	8008614 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d90e      	bls.n	80085e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085ce:	4b1b      	ldr	r3, [pc, #108]	@ (800863c <prvSwitchTimerLists+0xc8>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4619      	mov	r1, r3
 80085d8:	4610      	mov	r0, r2
 80085da:	f7fd ff42 	bl	8006462 <vListInsert>
 80085de:	e019      	b.n	8008614 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085e0:	2300      	movs	r3, #0
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2300      	movs	r3, #0
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	2100      	movs	r1, #0
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff fd4e 	bl	800808c <xTimerGenericCommand>
 80085f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10d      	bne.n	8008614 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fc:	b672      	cpsid	i
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	b662      	cpsie	i
 800860c:	603b      	str	r3, [r7, #0]
}
 800860e:	bf00      	nop
 8008610:	bf00      	nop
 8008612:	e7fd      	b.n	8008610 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008614:	4b09      	ldr	r3, [pc, #36]	@ (800863c <prvSwitchTimerLists+0xc8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1ae      	bne.n	800857c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800861e:	4b07      	ldr	r3, [pc, #28]	@ (800863c <prvSwitchTimerLists+0xc8>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008624:	4b06      	ldr	r3, [pc, #24]	@ (8008640 <prvSwitchTimerLists+0xcc>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a04      	ldr	r2, [pc, #16]	@ (800863c <prvSwitchTimerLists+0xc8>)
 800862a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800862c:	4a04      	ldr	r2, [pc, #16]	@ (8008640 <prvSwitchTimerLists+0xcc>)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6013      	str	r3, [r2, #0]
}
 8008632:	bf00      	nop
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20001fd0 	.word	0x20001fd0
 8008640:	20001fd4 	.word	0x20001fd4

08008644 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800864a:	f000 f947 	bl	80088dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800864e:	4b15      	ldr	r3, [pc, #84]	@ (80086a4 <prvCheckForValidListAndQueue+0x60>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d120      	bne.n	8008698 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008656:	4814      	ldr	r0, [pc, #80]	@ (80086a8 <prvCheckForValidListAndQueue+0x64>)
 8008658:	f7fd feb2 	bl	80063c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800865c:	4813      	ldr	r0, [pc, #76]	@ (80086ac <prvCheckForValidListAndQueue+0x68>)
 800865e:	f7fd feaf 	bl	80063c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008662:	4b13      	ldr	r3, [pc, #76]	@ (80086b0 <prvCheckForValidListAndQueue+0x6c>)
 8008664:	4a10      	ldr	r2, [pc, #64]	@ (80086a8 <prvCheckForValidListAndQueue+0x64>)
 8008666:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008668:	4b12      	ldr	r3, [pc, #72]	@ (80086b4 <prvCheckForValidListAndQueue+0x70>)
 800866a:	4a10      	ldr	r2, [pc, #64]	@ (80086ac <prvCheckForValidListAndQueue+0x68>)
 800866c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800866e:	2300      	movs	r3, #0
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	4b11      	ldr	r3, [pc, #68]	@ (80086b8 <prvCheckForValidListAndQueue+0x74>)
 8008674:	4a11      	ldr	r2, [pc, #68]	@ (80086bc <prvCheckForValidListAndQueue+0x78>)
 8008676:	2110      	movs	r1, #16
 8008678:	200a      	movs	r0, #10
 800867a:	f7fd ffc1 	bl	8006600 <xQueueGenericCreateStatic>
 800867e:	4603      	mov	r3, r0
 8008680:	4a08      	ldr	r2, [pc, #32]	@ (80086a4 <prvCheckForValidListAndQueue+0x60>)
 8008682:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008684:	4b07      	ldr	r3, [pc, #28]	@ (80086a4 <prvCheckForValidListAndQueue+0x60>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d005      	beq.n	8008698 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800868c:	4b05      	ldr	r3, [pc, #20]	@ (80086a4 <prvCheckForValidListAndQueue+0x60>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	490b      	ldr	r1, [pc, #44]	@ (80086c0 <prvCheckForValidListAndQueue+0x7c>)
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fc04 	bl	8006ea0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008698:	f000 f956 	bl	8008948 <vPortExitCritical>
}
 800869c:	bf00      	nop
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20001fd8 	.word	0x20001fd8
 80086a8:	20001fa8 	.word	0x20001fa8
 80086ac:	20001fbc 	.word	0x20001fbc
 80086b0:	20001fd0 	.word	0x20001fd0
 80086b4:	20001fd4 	.word	0x20001fd4
 80086b8:	20002084 	.word	0x20002084
 80086bc:	20001fe4 	.word	0x20001fe4
 80086c0:	08009144 	.word	0x08009144

080086c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3b04      	subs	r3, #4
 80086d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3b04      	subs	r3, #4
 80086e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f023 0201 	bic.w	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3b04      	subs	r3, #4
 80086f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008728 <pxPortInitialiseStack+0x64>)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3b14      	subs	r3, #20
 80086fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3b04      	subs	r3, #4
 800870a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f06f 0202 	mvn.w	r2, #2
 8008712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3b20      	subs	r3, #32
 8008718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800871a:	68fb      	ldr	r3, [r7, #12]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	0800872d 	.word	0x0800872d

0800872c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008736:	4b15      	ldr	r3, [pc, #84]	@ (800878c <prvTaskExitError+0x60>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873e:	d00d      	beq.n	800875c <prvTaskExitError+0x30>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008744:	b672      	cpsid	i
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	b662      	cpsie	i
 8008754:	60fb      	str	r3, [r7, #12]
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <prvTaskExitError+0x2c>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	b672      	cpsid	i
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	b662      	cpsie	i
 8008770:	60bb      	str	r3, [r7, #8]
}
 8008772:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008774:	bf00      	nop
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0fc      	beq.n	8008776 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	2000000c 	.word	0x2000000c

08008790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008790:	4b07      	ldr	r3, [pc, #28]	@ (80087b0 <pxCurrentTCBConst2>)
 8008792:	6819      	ldr	r1, [r3, #0]
 8008794:	6808      	ldr	r0, [r1, #0]
 8008796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879a:	f380 8809 	msr	PSP, r0
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f04f 0000 	mov.w	r0, #0
 80087a6:	f380 8811 	msr	BASEPRI, r0
 80087aa:	4770      	bx	lr
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst2>:
 80087b0:	20001aa8 	.word	0x20001aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087b8:	4808      	ldr	r0, [pc, #32]	@ (80087dc <prvPortStartFirstTask+0x24>)
 80087ba:	6800      	ldr	r0, [r0, #0]
 80087bc:	6800      	ldr	r0, [r0, #0]
 80087be:	f380 8808 	msr	MSP, r0
 80087c2:	f04f 0000 	mov.w	r0, #0
 80087c6:	f380 8814 	msr	CONTROL, r0
 80087ca:	b662      	cpsie	i
 80087cc:	b661      	cpsie	f
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	df00      	svc	0
 80087d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087da:	bf00      	nop
 80087dc:	e000ed08 	.word	0xe000ed08

080087e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087e6:	4b37      	ldr	r3, [pc, #220]	@ (80088c4 <xPortStartScheduler+0xe4>)
 80087e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	22ff      	movs	r2, #255	@ 0xff
 80087f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008808:	b2da      	uxtb	r2, r3
 800880a:	4b2f      	ldr	r3, [pc, #188]	@ (80088c8 <xPortStartScheduler+0xe8>)
 800880c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800880e:	4b2f      	ldr	r3, [pc, #188]	@ (80088cc <xPortStartScheduler+0xec>)
 8008810:	2207      	movs	r2, #7
 8008812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008814:	e009      	b.n	800882a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008816:	4b2d      	ldr	r3, [pc, #180]	@ (80088cc <xPortStartScheduler+0xec>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3b01      	subs	r3, #1
 800881c:	4a2b      	ldr	r2, [pc, #172]	@ (80088cc <xPortStartScheduler+0xec>)
 800881e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	b2db      	uxtb	r3, r3
 8008828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008832:	2b80      	cmp	r3, #128	@ 0x80
 8008834:	d0ef      	beq.n	8008816 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008836:	4b25      	ldr	r3, [pc, #148]	@ (80088cc <xPortStartScheduler+0xec>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1c3 0307 	rsb	r3, r3, #7
 800883e:	2b04      	cmp	r3, #4
 8008840:	d00d      	beq.n	800885e <xPortStartScheduler+0x7e>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008846:	b672      	cpsid	i
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	b662      	cpsie	i
 8008856:	60bb      	str	r3, [r7, #8]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800885e:	4b1b      	ldr	r3, [pc, #108]	@ (80088cc <xPortStartScheduler+0xec>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	4a19      	ldr	r2, [pc, #100]	@ (80088cc <xPortStartScheduler+0xec>)
 8008866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008868:	4b18      	ldr	r3, [pc, #96]	@ (80088cc <xPortStartScheduler+0xec>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008870:	4a16      	ldr	r2, [pc, #88]	@ (80088cc <xPortStartScheduler+0xec>)
 8008872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	b2da      	uxtb	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800887c:	4b14      	ldr	r3, [pc, #80]	@ (80088d0 <xPortStartScheduler+0xf0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a13      	ldr	r2, [pc, #76]	@ (80088d0 <xPortStartScheduler+0xf0>)
 8008882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008888:	4b11      	ldr	r3, [pc, #68]	@ (80088d0 <xPortStartScheduler+0xf0>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a10      	ldr	r2, [pc, #64]	@ (80088d0 <xPortStartScheduler+0xf0>)
 800888e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008894:	f000 f8dc 	bl	8008a50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008898:	4b0e      	ldr	r3, [pc, #56]	@ (80088d4 <xPortStartScheduler+0xf4>)
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800889e:	f000 f8fb 	bl	8008a98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088a2:	4b0d      	ldr	r3, [pc, #52]	@ (80088d8 <xPortStartScheduler+0xf8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a0c      	ldr	r2, [pc, #48]	@ (80088d8 <xPortStartScheduler+0xf8>)
 80088a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088ae:	f7ff ff83 	bl	80087b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088b2:	f7fe ff3f 	bl	8007734 <vTaskSwitchContext>
	prvTaskExitError();
 80088b6:	f7ff ff39 	bl	800872c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	e000e400 	.word	0xe000e400
 80088c8:	200020d4 	.word	0x200020d4
 80088cc:	200020d8 	.word	0x200020d8
 80088d0:	e000ed20 	.word	0xe000ed20
 80088d4:	2000000c 	.word	0x2000000c
 80088d8:	e000ef34 	.word	0xe000ef34

080088dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e6:	b672      	cpsid	i
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	b662      	cpsie	i
 80088f6:	607b      	str	r3, [r7, #4]
}
 80088f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088fa:	4b11      	ldr	r3, [pc, #68]	@ (8008940 <vPortEnterCritical+0x64>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3301      	adds	r3, #1
 8008900:	4a0f      	ldr	r2, [pc, #60]	@ (8008940 <vPortEnterCritical+0x64>)
 8008902:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008904:	4b0e      	ldr	r3, [pc, #56]	@ (8008940 <vPortEnterCritical+0x64>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d112      	bne.n	8008932 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800890c:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <vPortEnterCritical+0x68>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <vPortEnterCritical+0x56>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891a:	b672      	cpsid	i
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	b662      	cpsie	i
 800892a:	603b      	str	r3, [r7, #0]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <vPortEnterCritical+0x52>
	}
}
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	2000000c 	.word	0x2000000c
 8008944:	e000ed04 	.word	0xe000ed04

08008948 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800894e:	4b13      	ldr	r3, [pc, #76]	@ (800899c <vPortExitCritical+0x54>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10d      	bne.n	8008972 <vPortExitCritical+0x2a>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895a:	b672      	cpsid	i
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	b662      	cpsie	i
 800896a:	607b      	str	r3, [r7, #4]
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	e7fd      	b.n	800896e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008972:	4b0a      	ldr	r3, [pc, #40]	@ (800899c <vPortExitCritical+0x54>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3b01      	subs	r3, #1
 8008978:	4a08      	ldr	r2, [pc, #32]	@ (800899c <vPortExitCritical+0x54>)
 800897a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800897c:	4b07      	ldr	r3, [pc, #28]	@ (800899c <vPortExitCritical+0x54>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <vPortExitCritical+0x48>
 8008984:	2300      	movs	r3, #0
 8008986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f383 8811 	msr	BASEPRI, r3
}
 800898e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	2000000c 	.word	0x2000000c

080089a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089a0:	f3ef 8009 	mrs	r0, PSP
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4b15      	ldr	r3, [pc, #84]	@ (8008a00 <pxCurrentTCBConst>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	f01e 0f10 	tst.w	lr, #16
 80089b0:	bf08      	it	eq
 80089b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	6010      	str	r0, [r2, #0]
 80089bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089c4:	b672      	cpsid	i
 80089c6:	f380 8811 	msr	BASEPRI, r0
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	b662      	cpsie	i
 80089d4:	f7fe feae 	bl	8007734 <vTaskSwitchContext>
 80089d8:	f04f 0000 	mov.w	r0, #0
 80089dc:	f380 8811 	msr	BASEPRI, r0
 80089e0:	bc09      	pop	{r0, r3}
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	6808      	ldr	r0, [r1, #0]
 80089e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	f01e 0f10 	tst.w	lr, #16
 80089ee:	bf08      	it	eq
 80089f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089f4:	f380 8809 	msr	PSP, r0
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop

08008a00 <pxCurrentTCBConst>:
 8008a00:	20001aa8 	.word	0x20001aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	b672      	cpsid	i
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	b662      	cpsie	i
 8008a22:	607b      	str	r3, [r7, #4]
}
 8008a24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a26:	f7fe fdc9 	bl	80075bc <xTaskIncrementTick>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a30:	4b06      	ldr	r3, [pc, #24]	@ (8008a4c <SysTick_Handler+0x44>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	f383 8811 	msr	BASEPRI, r3
}
 8008a42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	e000ed04 	.word	0xe000ed04

08008a50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a54:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <vPortSetupTimerInterrupt+0x34>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a88 <vPortSetupTimerInterrupt+0x38>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a60:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <vPortSetupTimerInterrupt+0x3c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a0a      	ldr	r2, [pc, #40]	@ (8008a90 <vPortSetupTimerInterrupt+0x40>)
 8008a66:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6a:	099b      	lsrs	r3, r3, #6
 8008a6c:	4a09      	ldr	r2, [pc, #36]	@ (8008a94 <vPortSetupTimerInterrupt+0x44>)
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a72:	4b04      	ldr	r3, [pc, #16]	@ (8008a84 <vPortSetupTimerInterrupt+0x34>)
 8008a74:	2207      	movs	r2, #7
 8008a76:	601a      	str	r2, [r3, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	e000e010 	.word	0xe000e010
 8008a88:	e000e018 	.word	0xe000e018
 8008a8c:	20000000 	.word	0x20000000
 8008a90:	10624dd3 	.word	0x10624dd3
 8008a94:	e000e014 	.word	0xe000e014

08008a98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008aa8 <vPortEnableVFP+0x10>
 8008a9c:	6801      	ldr	r1, [r0, #0]
 8008a9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008aa2:	6001      	str	r1, [r0, #0]
 8008aa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aa6:	bf00      	nop
 8008aa8:	e000ed88 	.word	0xe000ed88

08008aac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ab2:	f3ef 8305 	mrs	r3, IPSR
 8008ab6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d917      	bls.n	8008aee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008abe:	4a1a      	ldr	r2, [pc, #104]	@ (8008b28 <vPortValidateInterruptPriority+0x7c>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ac8:	4b18      	ldr	r3, [pc, #96]	@ (8008b2c <vPortValidateInterruptPriority+0x80>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	7afa      	ldrb	r2, [r7, #11]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d20d      	bcs.n	8008aee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad6:	b672      	cpsid	i
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	b662      	cpsie	i
 8008ae6:	607b      	str	r3, [r7, #4]
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	e7fd      	b.n	8008aea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aee:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <vPortValidateInterruptPriority+0x84>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008af6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b34 <vPortValidateInterruptPriority+0x88>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d90d      	bls.n	8008b1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	b672      	cpsid	i
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	b662      	cpsie	i
 8008b12:	603b      	str	r3, [r7, #0]
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	e7fd      	b.n	8008b16 <vPortValidateInterruptPriority+0x6a>
	}
 8008b1a:	bf00      	nop
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	e000e3f0 	.word	0xe000e3f0
 8008b2c:	200020d4 	.word	0x200020d4
 8008b30:	e000ed0c 	.word	0xe000ed0c
 8008b34:	200020d8 	.word	0x200020d8

08008b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08a      	sub	sp, #40	@ 0x28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b44:	f7fe fc7c 	bl	8007440 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b48:	4b5d      	ldr	r3, [pc, #372]	@ (8008cc0 <pvPortMalloc+0x188>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b50:	f000 f920 	bl	8008d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b54:	4b5b      	ldr	r3, [pc, #364]	@ (8008cc4 <pvPortMalloc+0x18c>)
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 8094 	bne.w	8008c8a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d020      	beq.n	8008baa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008b68:	2208      	movs	r2, #8
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d017      	beq.n	8008baa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f023 0307 	bic.w	r3, r3, #7
 8008b80:	3308      	adds	r3, #8
 8008b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f003 0307 	and.w	r3, r3, #7
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00d      	beq.n	8008baa <pvPortMalloc+0x72>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b92:	b672      	cpsid	i
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	b662      	cpsie	i
 8008ba2:	617b      	str	r3, [r7, #20]
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	e7fd      	b.n	8008ba6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d06c      	beq.n	8008c8a <pvPortMalloc+0x152>
 8008bb0:	4b45      	ldr	r3, [pc, #276]	@ (8008cc8 <pvPortMalloc+0x190>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d867      	bhi.n	8008c8a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bba:	4b44      	ldr	r3, [pc, #272]	@ (8008ccc <pvPortMalloc+0x194>)
 8008bbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bbe:	4b43      	ldr	r3, [pc, #268]	@ (8008ccc <pvPortMalloc+0x194>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bc4:	e004      	b.n	8008bd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d903      	bls.n	8008be2 <pvPortMalloc+0xaa>
 8008bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1f1      	bne.n	8008bc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008be2:	4b37      	ldr	r3, [pc, #220]	@ (8008cc0 <pvPortMalloc+0x188>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d04e      	beq.n	8008c8a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	4413      	add	r3, r2
 8008bf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	1ad2      	subs	r2, r2, r3
 8008c06:	2308      	movs	r3, #8
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d922      	bls.n	8008c54 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4413      	add	r3, r2
 8008c14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00d      	beq.n	8008c3c <pvPortMalloc+0x104>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	613b      	str	r3, [r7, #16]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	1ad2      	subs	r2, r2, r3
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c4e:	69b8      	ldr	r0, [r7, #24]
 8008c50:	f000 f902 	bl	8008e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c54:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc8 <pvPortMalloc+0x190>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc8 <pvPortMalloc+0x190>)
 8008c60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c62:	4b19      	ldr	r3, [pc, #100]	@ (8008cc8 <pvPortMalloc+0x190>)
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4b1a      	ldr	r3, [pc, #104]	@ (8008cd0 <pvPortMalloc+0x198>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d203      	bcs.n	8008c76 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c6e:	4b16      	ldr	r3, [pc, #88]	@ (8008cc8 <pvPortMalloc+0x190>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a17      	ldr	r2, [pc, #92]	@ (8008cd0 <pvPortMalloc+0x198>)
 8008c74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	4b12      	ldr	r3, [pc, #72]	@ (8008cc4 <pvPortMalloc+0x18c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c8a:	f7fe fbe7 	bl	800745c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00d      	beq.n	8008cb4 <pvPortMalloc+0x17c>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9c:	b672      	cpsid	i
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	b662      	cpsie	i
 8008cac:	60fb      	str	r3, [r7, #12]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <pvPortMalloc+0x178>
	return pvReturn;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3728      	adds	r7, #40	@ 0x28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20005ce4 	.word	0x20005ce4
 8008cc4:	20005cf0 	.word	0x20005cf0
 8008cc8:	20005ce8 	.word	0x20005ce8
 8008ccc:	20005cdc 	.word	0x20005cdc
 8008cd0:	20005cec 	.word	0x20005cec

08008cd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d04e      	beq.n	8008d84 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ce6:	2308      	movs	r3, #8
 8008ce8:	425b      	negs	r3, r3
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	4413      	add	r3, r2
 8008cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	4b24      	ldr	r3, [pc, #144]	@ (8008d8c <vPortFree+0xb8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10d      	bne.n	8008d1e <vPortFree+0x4a>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d06:	b672      	cpsid	i
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	b662      	cpsie	i
 8008d16:	60fb      	str	r3, [r7, #12]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00d      	beq.n	8008d42 <vPortFree+0x6e>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	b672      	cpsid	i
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	b662      	cpsie	i
 8008d3a:	60bb      	str	r3, [r7, #8]
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	e7fd      	b.n	8008d3e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	685a      	ldr	r2, [r3, #4]
 8008d46:	4b11      	ldr	r3, [pc, #68]	@ (8008d8c <vPortFree+0xb8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d019      	beq.n	8008d84 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d115      	bne.n	8008d84 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d8c <vPortFree+0xb8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	43db      	mvns	r3, r3
 8008d62:	401a      	ands	r2, r3
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d68:	f7fe fb6a 	bl	8007440 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	4b07      	ldr	r3, [pc, #28]	@ (8008d90 <vPortFree+0xbc>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4413      	add	r3, r2
 8008d76:	4a06      	ldr	r2, [pc, #24]	@ (8008d90 <vPortFree+0xbc>)
 8008d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d7a:	6938      	ldr	r0, [r7, #16]
 8008d7c:	f000 f86c 	bl	8008e58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d80:	f7fe fb6c 	bl	800745c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d84:	bf00      	nop
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20005cf0 	.word	0x20005cf0
 8008d90:	20005ce8 	.word	0x20005ce8

08008d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d9a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008da0:	4b27      	ldr	r3, [pc, #156]	@ (8008e40 <prvHeapInit+0xac>)
 8008da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00c      	beq.n	8008dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	3307      	adds	r3, #7
 8008db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0307 	bic.w	r3, r3, #7
 8008dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e40 <prvHeapInit+0xac>)
 8008dc4:	4413      	add	r3, r2
 8008dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008e44 <prvHeapInit+0xb0>)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8008e44 <prvHeapInit+0xb0>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	4413      	add	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008de0:	2208      	movs	r2, #8
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	1a9b      	subs	r3, r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 0307 	bic.w	r3, r3, #7
 8008dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4a15      	ldr	r2, [pc, #84]	@ (8008e48 <prvHeapInit+0xb4>)
 8008df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008df6:	4b14      	ldr	r3, [pc, #80]	@ (8008e48 <prvHeapInit+0xb4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dfe:	4b12      	ldr	r3, [pc, #72]	@ (8008e48 <prvHeapInit+0xb4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	1ad2      	subs	r2, r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e14:	4b0c      	ldr	r3, [pc, #48]	@ (8008e48 <prvHeapInit+0xb4>)
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	4a0a      	ldr	r2, [pc, #40]	@ (8008e4c <prvHeapInit+0xb8>)
 8008e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	4a09      	ldr	r2, [pc, #36]	@ (8008e50 <prvHeapInit+0xbc>)
 8008e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e2c:	4b09      	ldr	r3, [pc, #36]	@ (8008e54 <prvHeapInit+0xc0>)
 8008e2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e32:	601a      	str	r2, [r3, #0]
}
 8008e34:	bf00      	nop
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	200020dc 	.word	0x200020dc
 8008e44:	20005cdc 	.word	0x20005cdc
 8008e48:	20005ce4 	.word	0x20005ce4
 8008e4c:	20005cec 	.word	0x20005cec
 8008e50:	20005ce8 	.word	0x20005ce8
 8008e54:	20005cf0 	.word	0x20005cf0

08008e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e60:	4b28      	ldr	r3, [pc, #160]	@ (8008f04 <prvInsertBlockIntoFreeList+0xac>)
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	e002      	b.n	8008e6c <prvInsertBlockIntoFreeList+0x14>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d8f7      	bhi.n	8008e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	4413      	add	r3, r2
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d108      	bne.n	8008e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	441a      	add	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	68ba      	ldr	r2, [r7, #8]
 8008ea4:	441a      	add	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d118      	bne.n	8008ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	4b15      	ldr	r3, [pc, #84]	@ (8008f08 <prvInsertBlockIntoFreeList+0xb0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d00d      	beq.n	8008ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	441a      	add	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e008      	b.n	8008ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8008f08 <prvInsertBlockIntoFreeList+0xb0>)
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e003      	b.n	8008ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d002      	beq.n	8008ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ef6:	bf00      	nop
 8008ef8:	3714      	adds	r7, #20
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20005cdc 	.word	0x20005cdc
 8008f08:	20005ce4 	.word	0x20005ce4

08008f0c <memset>:
 8008f0c:	4402      	add	r2, r0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d100      	bne.n	8008f16 <memset+0xa>
 8008f14:	4770      	bx	lr
 8008f16:	f803 1b01 	strb.w	r1, [r3], #1
 8008f1a:	e7f9      	b.n	8008f10 <memset+0x4>

08008f1c <_reclaim_reent>:
 8008f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd4 <_reclaim_reent+0xb8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4283      	cmp	r3, r0
 8008f22:	b570      	push	{r4, r5, r6, lr}
 8008f24:	4604      	mov	r4, r0
 8008f26:	d053      	beq.n	8008fd0 <_reclaim_reent+0xb4>
 8008f28:	69c3      	ldr	r3, [r0, #28]
 8008f2a:	b31b      	cbz	r3, 8008f74 <_reclaim_reent+0x58>
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	b163      	cbz	r3, 8008f4a <_reclaim_reent+0x2e>
 8008f30:	2500      	movs	r5, #0
 8008f32:	69e3      	ldr	r3, [r4, #28]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	5959      	ldr	r1, [r3, r5]
 8008f38:	b9b1      	cbnz	r1, 8008f68 <_reclaim_reent+0x4c>
 8008f3a:	3504      	adds	r5, #4
 8008f3c:	2d80      	cmp	r5, #128	@ 0x80
 8008f3e:	d1f8      	bne.n	8008f32 <_reclaim_reent+0x16>
 8008f40:	69e3      	ldr	r3, [r4, #28]
 8008f42:	4620      	mov	r0, r4
 8008f44:	68d9      	ldr	r1, [r3, #12]
 8008f46:	f000 f87b 	bl	8009040 <_free_r>
 8008f4a:	69e3      	ldr	r3, [r4, #28]
 8008f4c:	6819      	ldr	r1, [r3, #0]
 8008f4e:	b111      	cbz	r1, 8008f56 <_reclaim_reent+0x3a>
 8008f50:	4620      	mov	r0, r4
 8008f52:	f000 f875 	bl	8009040 <_free_r>
 8008f56:	69e3      	ldr	r3, [r4, #28]
 8008f58:	689d      	ldr	r5, [r3, #8]
 8008f5a:	b15d      	cbz	r5, 8008f74 <_reclaim_reent+0x58>
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	4620      	mov	r0, r4
 8008f60:	682d      	ldr	r5, [r5, #0]
 8008f62:	f000 f86d 	bl	8009040 <_free_r>
 8008f66:	e7f8      	b.n	8008f5a <_reclaim_reent+0x3e>
 8008f68:	680e      	ldr	r6, [r1, #0]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 f868 	bl	8009040 <_free_r>
 8008f70:	4631      	mov	r1, r6
 8008f72:	e7e1      	b.n	8008f38 <_reclaim_reent+0x1c>
 8008f74:	6961      	ldr	r1, [r4, #20]
 8008f76:	b111      	cbz	r1, 8008f7e <_reclaim_reent+0x62>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 f861 	bl	8009040 <_free_r>
 8008f7e:	69e1      	ldr	r1, [r4, #28]
 8008f80:	b111      	cbz	r1, 8008f88 <_reclaim_reent+0x6c>
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 f85c 	bl	8009040 <_free_r>
 8008f88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008f8a:	b111      	cbz	r1, 8008f92 <_reclaim_reent+0x76>
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 f857 	bl	8009040 <_free_r>
 8008f92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f94:	b111      	cbz	r1, 8008f9c <_reclaim_reent+0x80>
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 f852 	bl	8009040 <_free_r>
 8008f9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008f9e:	b111      	cbz	r1, 8008fa6 <_reclaim_reent+0x8a>
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 f84d 	bl	8009040 <_free_r>
 8008fa6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008fa8:	b111      	cbz	r1, 8008fb0 <_reclaim_reent+0x94>
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 f848 	bl	8009040 <_free_r>
 8008fb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008fb2:	b111      	cbz	r1, 8008fba <_reclaim_reent+0x9e>
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 f843 	bl	8009040 <_free_r>
 8008fba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008fbc:	b111      	cbz	r1, 8008fc4 <_reclaim_reent+0xa8>
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 f83e 	bl	8009040 <_free_r>
 8008fc4:	6a23      	ldr	r3, [r4, #32]
 8008fc6:	b11b      	cbz	r3, 8008fd0 <_reclaim_reent+0xb4>
 8008fc8:	4620      	mov	r0, r4
 8008fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fce:	4718      	bx	r3
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000010 	.word	0x20000010

08008fd8 <__libc_init_array>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	4d0d      	ldr	r5, [pc, #52]	@ (8009010 <__libc_init_array+0x38>)
 8008fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8009014 <__libc_init_array+0x3c>)
 8008fde:	1b64      	subs	r4, r4, r5
 8008fe0:	10a4      	asrs	r4, r4, #2
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	42a6      	cmp	r6, r4
 8008fe6:	d109      	bne.n	8008ffc <__libc_init_array+0x24>
 8008fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8009018 <__libc_init_array+0x40>)
 8008fea:	4c0c      	ldr	r4, [pc, #48]	@ (800901c <__libc_init_array+0x44>)
 8008fec:	f000 f87e 	bl	80090ec <_init>
 8008ff0:	1b64      	subs	r4, r4, r5
 8008ff2:	10a4      	asrs	r4, r4, #2
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	42a6      	cmp	r6, r4
 8008ff8:	d105      	bne.n	8009006 <__libc_init_array+0x2e>
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
 8008ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009000:	4798      	blx	r3
 8009002:	3601      	adds	r6, #1
 8009004:	e7ee      	b.n	8008fe4 <__libc_init_array+0xc>
 8009006:	f855 3b04 	ldr.w	r3, [r5], #4
 800900a:	4798      	blx	r3
 800900c:	3601      	adds	r6, #1
 800900e:	e7f2      	b.n	8008ff6 <__libc_init_array+0x1e>
 8009010:	080091b4 	.word	0x080091b4
 8009014:	080091b4 	.word	0x080091b4
 8009018:	080091b4 	.word	0x080091b4
 800901c:	080091b8 	.word	0x080091b8

08009020 <__retarget_lock_acquire_recursive>:
 8009020:	4770      	bx	lr

08009022 <__retarget_lock_release_recursive>:
 8009022:	4770      	bx	lr

08009024 <memcpy>:
 8009024:	440a      	add	r2, r1
 8009026:	4291      	cmp	r1, r2
 8009028:	f100 33ff 	add.w	r3, r0, #4294967295
 800902c:	d100      	bne.n	8009030 <memcpy+0xc>
 800902e:	4770      	bx	lr
 8009030:	b510      	push	{r4, lr}
 8009032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800903a:	4291      	cmp	r1, r2
 800903c:	d1f9      	bne.n	8009032 <memcpy+0xe>
 800903e:	bd10      	pop	{r4, pc}

08009040 <_free_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4605      	mov	r5, r0
 8009044:	2900      	cmp	r1, #0
 8009046:	d041      	beq.n	80090cc <_free_r+0x8c>
 8009048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800904c:	1f0c      	subs	r4, r1, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	bfb8      	it	lt
 8009052:	18e4      	addlt	r4, r4, r3
 8009054:	f000 f83e 	bl	80090d4 <__malloc_lock>
 8009058:	4a1d      	ldr	r2, [pc, #116]	@ (80090d0 <_free_r+0x90>)
 800905a:	6813      	ldr	r3, [r2, #0]
 800905c:	b933      	cbnz	r3, 800906c <_free_r+0x2c>
 800905e:	6063      	str	r3, [r4, #4]
 8009060:	6014      	str	r4, [r2, #0]
 8009062:	4628      	mov	r0, r5
 8009064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009068:	f000 b83a 	b.w	80090e0 <__malloc_unlock>
 800906c:	42a3      	cmp	r3, r4
 800906e:	d908      	bls.n	8009082 <_free_r+0x42>
 8009070:	6820      	ldr	r0, [r4, #0]
 8009072:	1821      	adds	r1, r4, r0
 8009074:	428b      	cmp	r3, r1
 8009076:	bf01      	itttt	eq
 8009078:	6819      	ldreq	r1, [r3, #0]
 800907a:	685b      	ldreq	r3, [r3, #4]
 800907c:	1809      	addeq	r1, r1, r0
 800907e:	6021      	streq	r1, [r4, #0]
 8009080:	e7ed      	b.n	800905e <_free_r+0x1e>
 8009082:	461a      	mov	r2, r3
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	b10b      	cbz	r3, 800908c <_free_r+0x4c>
 8009088:	42a3      	cmp	r3, r4
 800908a:	d9fa      	bls.n	8009082 <_free_r+0x42>
 800908c:	6811      	ldr	r1, [r2, #0]
 800908e:	1850      	adds	r0, r2, r1
 8009090:	42a0      	cmp	r0, r4
 8009092:	d10b      	bne.n	80090ac <_free_r+0x6c>
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	4401      	add	r1, r0
 8009098:	1850      	adds	r0, r2, r1
 800909a:	4283      	cmp	r3, r0
 800909c:	6011      	str	r1, [r2, #0]
 800909e:	d1e0      	bne.n	8009062 <_free_r+0x22>
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	6053      	str	r3, [r2, #4]
 80090a6:	4408      	add	r0, r1
 80090a8:	6010      	str	r0, [r2, #0]
 80090aa:	e7da      	b.n	8009062 <_free_r+0x22>
 80090ac:	d902      	bls.n	80090b4 <_free_r+0x74>
 80090ae:	230c      	movs	r3, #12
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	e7d6      	b.n	8009062 <_free_r+0x22>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	1821      	adds	r1, r4, r0
 80090b8:	428b      	cmp	r3, r1
 80090ba:	bf04      	itt	eq
 80090bc:	6819      	ldreq	r1, [r3, #0]
 80090be:	685b      	ldreq	r3, [r3, #4]
 80090c0:	6063      	str	r3, [r4, #4]
 80090c2:	bf04      	itt	eq
 80090c4:	1809      	addeq	r1, r1, r0
 80090c6:	6021      	streq	r1, [r4, #0]
 80090c8:	6054      	str	r4, [r2, #4]
 80090ca:	e7ca      	b.n	8009062 <_free_r+0x22>
 80090cc:	bd38      	pop	{r3, r4, r5, pc}
 80090ce:	bf00      	nop
 80090d0:	20005e30 	.word	0x20005e30

080090d4 <__malloc_lock>:
 80090d4:	4801      	ldr	r0, [pc, #4]	@ (80090dc <__malloc_lock+0x8>)
 80090d6:	f7ff bfa3 	b.w	8009020 <__retarget_lock_acquire_recursive>
 80090da:	bf00      	nop
 80090dc:	20005e2c 	.word	0x20005e2c

080090e0 <__malloc_unlock>:
 80090e0:	4801      	ldr	r0, [pc, #4]	@ (80090e8 <__malloc_unlock+0x8>)
 80090e2:	f7ff bf9e 	b.w	8009022 <__retarget_lock_release_recursive>
 80090e6:	bf00      	nop
 80090e8:	20005e2c 	.word	0x20005e2c

080090ec <_init>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr

080090f8 <_fini>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	bf00      	nop
 80090fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090fe:	bc08      	pop	{r3}
 8009100:	469e      	mov	lr, r3
 8009102:	4770      	bx	lr
