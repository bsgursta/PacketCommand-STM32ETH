
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4c4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800a6c4  0800a6c4  0000b6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f8  0800a7f8  0000c1ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a7f8  0800a7f8  0000b7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a800  0800a800  0000c1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a800  0800a800  0000b800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a804  0800a804  0000b804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a808  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  0800a874  0000c06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  0800a914  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005e24  200001ac  0800a9b4  0000c1ac  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005fd0  0800a9b4  0000cfd0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c1ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f8a8  00000000  00000000  0000c1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006856  00000000  00000000  0003ba82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002360  00000000  00000000  000422d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b40  00000000  00000000  00044638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003212f  00000000  00000000  00046178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f7a8  00000000  00000000  000782a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011c60b  00000000  00000000  000a7a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c405a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000099f4  00000000  00000000  001c40a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004a  00000000  00000000  001cda94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001ac 	.word	0x200001ac
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a6ac 	.word	0x0800a6ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b0 	.word	0x200001b0
 800023c:	0800a6ac 	.word	0x0800a6ac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000612:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <_DoInit+0xa0>)
 8000614:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000616:	22a8      	movs	r2, #168	@ 0xa8
 8000618:	2100      	movs	r1, #0
 800061a:	6838      	ldr	r0, [r7, #0]
 800061c:	f009 f9d5 	bl	80099ca <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2203      	movs	r2, #3
 8000624:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	2203      	movs	r2, #3
 800062a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	4a20      	ldr	r2, [pc, #128]	@ (80006b0 <_DoInit+0xa4>)
 8000630:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	4a1f      	ldr	r2, [pc, #124]	@ (80006b4 <_DoInit+0xa8>)
 8000636:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800063e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	4a16      	ldr	r2, [pc, #88]	@ (80006b0 <_DoInit+0xa4>)
 8000656:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	4a17      	ldr	r2, [pc, #92]	@ (80006b8 <_DoInit+0xac>)
 800065c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	2210      	movs	r2, #16
 8000662:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2200      	movs	r2, #0
 8000668:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000676:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	e00c      	b.n	800069a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f1c3 030f 	rsb	r3, r3, #15
 8000686:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <_DoInit+0xb0>)
 8000688:	5cd1      	ldrb	r1, [r2, r3]
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	460a      	mov	r2, r1
 8000692:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b0f      	cmp	r3, #15
 800069e:	d9ef      	bls.n	8000680 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006a0:	f3bf 8f5f 	dmb	sy
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200001c8 	.word	0x200001c8
 80006b0:	0800a6c4 	.word	0x0800a6c4
 80006b4:	20000270 	.word	0x20000270
 80006b8:	20000670 	.word	0x20000670
 80006bc:	0800a764 	.word	0x0800a764

080006c0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80006dc:	69ba      	ldr	r2, [r7, #24]
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d905      	bls.n	80006f0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	3b01      	subs	r3, #1
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ee:	e007      	b.n	8000700 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	689a      	ldr	r2, [r3, #8]
 80006f4:	69b9      	ldr	r1, [r7, #24]
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	1acb      	subs	r3, r1, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	3b01      	subs	r3, #1
 80006fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	689a      	ldr	r2, [r3, #8]
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800070a:	4293      	cmp	r3, r2
 800070c:	bf28      	it	cs
 800070e:	4613      	movcs	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4293      	cmp	r3, r2
 8000718:	bf28      	it	cs
 800071a:	4613      	movcs	r3, r2
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	685a      	ldr	r2, [r3, #4]
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	4413      	add	r3, r2
 8000726:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800072a:	68b9      	ldr	r1, [r7, #8]
 800072c:	6978      	ldr	r0, [r7, #20]
 800072e:	f009 fa14 	bl	8009b5a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000732:	6a3a      	ldr	r2, [r7, #32]
 8000734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000736:	4413      	add	r3, r2
 8000738:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073e:	4413      	add	r3, r2
 8000740:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800074a:	69fa      	ldr	r2, [r7, #28]
 800074c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074e:	4413      	add	r3, r2
 8000750:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	69fa      	ldr	r2, [r7, #28]
 8000758:	429a      	cmp	r2, r3
 800075a:	d101      	bne.n	8000760 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000760:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	69fa      	ldr	r2, [r7, #28]
 8000768:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1b2      	bne.n	80006d6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8000770:	6a3b      	ldr	r3, [r7, #32]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3728      	adds	r7, #40	@ 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b088      	sub	sp, #32
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	429a      	cmp	r2, r3
 800079c:	d911      	bls.n	80007c2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	685a      	ldr	r2, [r3, #4]
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	4413      	add	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	68b9      	ldr	r1, [r7, #8]
 80007ac:	6938      	ldr	r0, [r7, #16]
 80007ae:	f009 f9d4 	bl	8009b5a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80007b2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	441a      	add	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80007c0:	e01f      	b.n	8000802 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	4413      	add	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	68b9      	ldr	r1, [r7, #8]
 80007d4:	6938      	ldr	r0, [r7, #16]
 80007d6:	f009 f9c0 	bl	8009b5a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	4413      	add	r3, r2
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	4619      	mov	r1, r3
 80007f2:	6938      	ldr	r0, [r7, #16]
 80007f4:	f009 f9b1 	bl	8009b5a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80007f8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	60da      	str	r2, [r3, #12]
}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800080a:	b480      	push	{r7}
 800080c:	b087      	sub	sp, #28
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	429a      	cmp	r2, r3
 8000824:	d808      	bhi.n	8000838 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	1ad2      	subs	r2, r2, r3
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	4413      	add	r3, r2
 8000832:	3b01      	subs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e004      	b.n	8000842 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	3b01      	subs	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000842:	697b      	ldr	r3, [r7, #20]
}
 8000844:	4618      	mov	r0, r3
 8000846:	371c      	adds	r7, #28
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4a1f      	ldr	r2, [pc, #124]	@ (80008ec <SEGGER_RTT_WriteNoLock+0x9c>)
 800086e:	4413      	add	r3, r2
 8000870:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d029      	beq.n	80008ce <SEGGER_RTT_WriteNoLock+0x7e>
 800087a:	2b02      	cmp	r3, #2
 800087c:	d82e      	bhi.n	80008dc <SEGGER_RTT_WriteNoLock+0x8c>
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <SEGGER_RTT_WriteNoLock+0x38>
 8000882:	2b01      	cmp	r3, #1
 8000884:	d013      	beq.n	80008ae <SEGGER_RTT_WriteNoLock+0x5e>
 8000886:	e029      	b.n	80008dc <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000888:	6978      	ldr	r0, [r7, #20]
 800088a:	f7ff ffbe 	bl	800080a <_GetAvailWriteSpace>
 800088e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	d202      	bcs.n	800089e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800089c:	e021      	b.n	80008e2 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff67 	bl	800077a <_WriteNoCheck>
    break;
 80008ac:	e019      	b.n	80008e2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ffab 	bl	800080a <_GetAvailWriteSpace>
 80008b4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	4293      	cmp	r3, r2
 80008bc:	bf28      	it	cs
 80008be:	4613      	movcs	r3, r2
 80008c0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	69b9      	ldr	r1, [r7, #24]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff57 	bl	800077a <_WriteNoCheck>
    break;
 80008cc:	e009      	b.n	80008e2 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	69b9      	ldr	r1, [r7, #24]
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f7ff fef4 	bl	80006c0 <_WriteBlocking>
 80008d8:	61f8      	str	r0, [r7, #28]
    break;
 80008da:	e002      	b.n	80008e2 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    break;
 80008e0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80008e2:	69fb      	ldr	r3, [r7, #28]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200001c8 	.word	0x200001c8

080008f0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <SEGGER_RTT_Write+0x48>)
 80008fe:	61fb      	str	r3, [r7, #28]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	2b53      	cmp	r3, #83	@ 0x53
 8000908:	d001      	beq.n	800090e <SEGGER_RTT_Write+0x1e>
 800090a:	f7ff fe7f 	bl	800060c <_DoInit>
  SEGGER_RTT_LOCK();
 800090e:	f3ef 8311 	mrs	r3, BASEPRI
 8000912:	f04f 0120 	mov.w	r1, #32
 8000916:	f381 8811 	msr	BASEPRI, r1
 800091a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	68b9      	ldr	r1, [r7, #8]
 8000920:	68f8      	ldr	r0, [r7, #12]
 8000922:	f7ff ff95 	bl	8000850 <SEGGER_RTT_WriteNoLock>
 8000926:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800092e:	697b      	ldr	r3, [r7, #20]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001c8 	.word	0x200001c8

0800093c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff ffce 	bl	80008f0 <SEGGER_RTT_Write>
  return len;
 8000954:	683b      	ldr	r3, [r7, #0]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	460b      	mov	r3, r1
 8000968:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	d80e      	bhi.n	800099a <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	78fa      	ldrb	r2, [r7, #3]
 8000986:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d115      	bne.n	80009d2 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6918      	ldr	r0, [r3, #16]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	461a      	mov	r2, r3
 80009b4:	f7ff ff9c 	bl	80008f0 <SEGGER_RTT_Write>
 80009b8:	4602      	mov	r2, r0
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d004      	beq.n	80009cc <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80009ca:	e002      	b.n	80009d2 <_StoreChar+0x74>
      p->Cnt = 0u;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80009ee:	2301      	movs	r3, #1
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80009f6:	e007      	b.n	8000a08 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80009f8:	6a3a      	ldr	r2, [r7, #32]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a00:	623b      	str	r3, [r7, #32]
    Width++;
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3301      	adds	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a08:	6a3a      	ldr	r2, [r7, #32]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d2f3      	bcs.n	80009f8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d901      	bls.n	8000a1c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d125      	bne.n	8000a72 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d022      	beq.n	8000a72 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d005      	beq.n	8000a42 <_PrintUnsigned+0x66>
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_PrintUnsigned+0x66>
        c = '0';
 8000a3c:	2330      	movs	r3, #48	@ 0x30
 8000a3e:	76fb      	strb	r3, [r7, #27]
 8000a40:	e001      	b.n	8000a46 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000a42:	2320      	movs	r3, #32
 8000a44:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a46:	e00b      	b.n	8000a60 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8000a4e:	7efb      	ldrb	r3, [r7, #27]
 8000a50:	4619      	mov	r1, r3
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff ff83 	bl	800095e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db07      	blt.n	8000a70 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <_PrintUnsigned+0x96>
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d3ec      	bcc.n	8000a48 <_PrintUnsigned+0x6c>
 8000a6e:	e000      	b.n	8000a72 <_PrintUnsigned+0x96>
          break;
 8000a70:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db55      	blt.n	8000b26 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d903      	bls.n	8000a88 <_PrintUnsigned+0xac>
        NumDigits--;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	e009      	b.n	8000a9c <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a90:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d200      	bcs.n	8000a9c <_PrintUnsigned+0xc0>
          break;
 8000a9a:	e005      	b.n	8000aa8 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	fb02 f303 	mul.w	r3, r2, r3
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000aa6:	e7e8      	b.n	8000a7a <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab0:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ab6:	fb02 f303 	mul.w	r3, r2, r3
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <_PrintUnsigned+0x154>)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f7ff ff47 	bl	800095e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db08      	blt.n	8000aea <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1df      	bne.n	8000aa8 <_PrintUnsigned+0xcc>
 8000ae8:	e000      	b.n	8000aec <_PrintUnsigned+0x110>
        break;
 8000aea:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d017      	beq.n	8000b26 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d014      	beq.n	8000b26 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000afc:	e00a      	b.n	8000b14 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b00:	3b01      	subs	r3, #1
 8000b02:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000b04:	2120      	movs	r1, #32
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f7ff ff29 	bl	800095e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db07      	blt.n	8000b24 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d005      	beq.n	8000b26 <_PrintUnsigned+0x14a>
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3ed      	bcc.n	8000afe <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000b22:	e000      	b.n	8000b26 <_PrintUnsigned+0x14a>
            break;
 8000b24:	bf00      	nop
}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	0800a778 	.word	0x0800a778

08000b34 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	bfb8      	it	lt
 8000b48:	425b      	neglt	r3, r3
 8000b4a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b50:	e007      	b.n	8000b62 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b5a:	613b      	str	r3, [r7, #16]
    Width++;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	daf3      	bge.n	8000b52 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d901      	bls.n	8000b76 <_PrintInt+0x42>
    Width = NumDigits;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00a      	beq.n	8000b92 <_PrintInt+0x5e>
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db04      	blt.n	8000b8c <_PrintInt+0x58>
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <_PrintInt+0x5e>
    FieldWidth--;
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <_PrintInt+0x6e>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d01c      	beq.n	8000bdc <_PrintInt+0xa8>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d117      	bne.n	8000bdc <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d014      	beq.n	8000bdc <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bb2:	e00a      	b.n	8000bca <_PrintInt+0x96>
        FieldWidth--;
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000bba:	2120      	movs	r1, #32
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff fece 	bl	800095e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db07      	blt.n	8000bda <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d005      	beq.n	8000bdc <_PrintInt+0xa8>
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d3ed      	bcc.n	8000bb4 <_PrintInt+0x80>
 8000bd8:	e000      	b.n	8000bdc <_PrintInt+0xa8>
          break;
 8000bda:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db4a      	blt.n	8000c7a <_PrintInt+0x146>
    if (v < 0) {
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	da07      	bge.n	8000bfa <_PrintInt+0xc6>
      v = -v;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	425b      	negs	r3, r3
 8000bee:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000bf0:	212d      	movs	r1, #45	@ 0x2d
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f7ff feb3 	bl	800095e <_StoreChar>
 8000bf8:	e008      	b.n	8000c0c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000c04:	212b      	movs	r1, #43	@ 0x2b
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f7ff fea9 	bl	800095e <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db32      	blt.n	8000c7a <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d01f      	beq.n	8000c5e <_PrintInt+0x12a>
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d11a      	bne.n	8000c5e <_PrintInt+0x12a>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d117      	bne.n	8000c5e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d014      	beq.n	8000c5e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c34:	e00a      	b.n	8000c4c <_PrintInt+0x118>
            FieldWidth--;
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000c3c:	2130      	movs	r1, #48	@ 0x30
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f7ff fe8d 	bl	800095e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db07      	blt.n	8000c5c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <_PrintInt+0x12a>
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d3ed      	bcc.n	8000c36 <_PrintInt+0x102>
 8000c5a:	e000      	b.n	8000c5e <_PrintInt+0x12a>
              break;
 8000c5c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db09      	blt.n	8000c7a <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f7ff feb1 	bl	80009dc <_PrintUnsigned>
      }
    }
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0a4      	sub	sp, #144	@ 0x90
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000c96:	2340      	movs	r3, #64	@ 0x40
 8000c98:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000cb4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f000 81d9 	beq.w	8001070 <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 8000cbe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cc2:	2b25      	cmp	r3, #37	@ 0x25
 8000cc4:	f040 81c7 	bne.w	8001056 <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 8000cda:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cde:	3b23      	subs	r3, #35	@ 0x23
 8000ce0:	2b0d      	cmp	r3, #13
 8000ce2:	d83f      	bhi.n	8000d64 <SEGGER_RTT_vprintf+0xe0>
 8000ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cec <SEGGER_RTT_vprintf+0x68>)
 8000ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cea:	bf00      	nop
 8000cec:	08000d55 	.word	0x08000d55
 8000cf0:	08000d65 	.word	0x08000d65
 8000cf4:	08000d65 	.word	0x08000d65
 8000cf8:	08000d65 	.word	0x08000d65
 8000cfc:	08000d65 	.word	0x08000d65
 8000d00:	08000d65 	.word	0x08000d65
 8000d04:	08000d65 	.word	0x08000d65
 8000d08:	08000d65 	.word	0x08000d65
 8000d0c:	08000d45 	.word	0x08000d45
 8000d10:	08000d65 	.word	0x08000d65
 8000d14:	08000d25 	.word	0x08000d25
 8000d18:	08000d65 	.word	0x08000d65
 8000d1c:	08000d65 	.word	0x08000d65
 8000d20:	08000d35 	.word	0x08000d35
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	e01b      	b.n	8000d6c <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	e013      	b.n	8000d6c <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	e00b      	b.n	8000d6c <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	e003      	b.n	8000d6c <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d6a:	bf00      	nop
        }
      } while (v);
 8000d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1ae      	bne.n	8000cd2 <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000d74:	2300      	movs	r3, #0
 8000d76:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 8000d80:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d84:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d86:	d912      	bls.n	8000dae <SEGGER_RTT_vprintf+0x12a>
 8000d88:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d8c:	2b39      	cmp	r3, #57	@ 0x39
 8000d8e:	d80e      	bhi.n	8000dae <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3301      	adds	r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000d96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	461a      	mov	r2, r3
 8000da2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000da6:	4413      	add	r3, r2
 8000da8:	3b30      	subs	r3, #48	@ 0x30
 8000daa:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8000dac:	e7e4      	b.n	8000d78 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 8000db4:	2300      	movs	r3, #0
 8000db6:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 8000dc0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000dc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dc6:	d132      	bne.n	8000e2e <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dd4:	d10d      	bne.n	8000df2 <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1d19      	adds	r1, r3, #4
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	6011      	str	r1, [r2, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000df0:	e01d      	b.n	8000e2e <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 8000dfa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000dfe:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e00:	d915      	bls.n	8000e2e <SEGGER_RTT_vprintf+0x1aa>
 8000e02:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e06:	2b39      	cmp	r3, #57	@ 0x39
 8000e08:	d811      	bhi.n	8000e2e <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 8000e16:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	461a      	mov	r2, r3
 8000e22:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e26:	4413      	add	r3, r2
 8000e28:	3b30      	subs	r3, #48	@ 0x30
 8000e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8000e2c:	e7e1      	b.n	8000df2 <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 8000e36:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e3a:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e3c:	d003      	beq.n	8000e46 <SEGGER_RTT_vprintf+0x1c2>
 8000e3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e42:	2b68      	cmp	r3, #104	@ 0x68
 8000e44:	d107      	bne.n	8000e56 <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 8000e54:	e7ef      	b.n	8000e36 <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000e56:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e5a:	2b25      	cmp	r3, #37	@ 0x25
 8000e5c:	f000 80ef 	beq.w	800103e <SEGGER_RTT_vprintf+0x3ba>
 8000e60:	2b25      	cmp	r3, #37	@ 0x25
 8000e62:	f2c0 80f3 	blt.w	800104c <SEGGER_RTT_vprintf+0x3c8>
 8000e66:	2b78      	cmp	r3, #120	@ 0x78
 8000e68:	f300 80f0 	bgt.w	800104c <SEGGER_RTT_vprintf+0x3c8>
 8000e6c:	2b58      	cmp	r3, #88	@ 0x58
 8000e6e:	f2c0 80ed 	blt.w	800104c <SEGGER_RTT_vprintf+0x3c8>
 8000e72:	3b58      	subs	r3, #88	@ 0x58
 8000e74:	2b20      	cmp	r3, #32
 8000e76:	f200 80e9 	bhi.w	800104c <SEGGER_RTT_vprintf+0x3c8>
 8000e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e80 <SEGGER_RTT_vprintf+0x1fc>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000f83 	.word	0x08000f83
 8000e84:	0800104d 	.word	0x0800104d
 8000e88:	0800104d 	.word	0x0800104d
 8000e8c:	0800104d 	.word	0x0800104d
 8000e90:	0800104d 	.word	0x0800104d
 8000e94:	0800104d 	.word	0x0800104d
 8000e98:	0800104d 	.word	0x0800104d
 8000e9c:	0800104d 	.word	0x0800104d
 8000ea0:	0800104d 	.word	0x0800104d
 8000ea4:	0800104d 	.word	0x0800104d
 8000ea8:	0800104d 	.word	0x0800104d
 8000eac:	08000f05 	.word	0x08000f05
 8000eb0:	08000f2f 	.word	0x08000f2f
 8000eb4:	0800104d 	.word	0x0800104d
 8000eb8:	0800104d 	.word	0x0800104d
 8000ebc:	0800104d 	.word	0x0800104d
 8000ec0:	0800104d 	.word	0x0800104d
 8000ec4:	0800104d 	.word	0x0800104d
 8000ec8:	0800104d 	.word	0x0800104d
 8000ecc:	0800104d 	.word	0x0800104d
 8000ed0:	0800104d 	.word	0x0800104d
 8000ed4:	0800104d 	.word	0x0800104d
 8000ed8:	0800104d 	.word	0x0800104d
 8000edc:	0800104d 	.word	0x0800104d
 8000ee0:	08001015 	.word	0x08001015
 8000ee4:	0800104d 	.word	0x0800104d
 8000ee8:	0800104d 	.word	0x0800104d
 8000eec:	08000fad 	.word	0x08000fad
 8000ef0:	0800104d 	.word	0x0800104d
 8000ef4:	08000f59 	.word	0x08000f59
 8000ef8:	0800104d 	.word	0x0800104d
 8000efc:	0800104d 	.word	0x0800104d
 8000f00:	08000f83 	.word	0x08000f83
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	1d19      	adds	r1, r3, #4
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6011      	str	r1, [r2, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 8000f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f18:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 8000f1c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000f20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fd19 	bl	800095e <_StoreChar>
        break;
 8000f2c:	e08f      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	1d19      	adds	r1, r3, #4
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6011      	str	r1, [r2, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 8000f3e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f52:	f7ff fdef 	bl	8000b34 <_PrintInt>
        break;
 8000f56:	e07a      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1d19      	adds	r1, r3, #4
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6011      	str	r1, [r2, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8000f68:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f6c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000f70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f7a:	220a      	movs	r2, #10
 8000f7c:	f7ff fd2e 	bl	80009dc <_PrintUnsigned>
        break;
 8000f80:	e065      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1d19      	adds	r1, r3, #4
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	6011      	str	r1, [r2, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 8000f92:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f96:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	f7ff fd19 	bl	80009dc <_PrintUnsigned>
        break;
 8000faa:	e050      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1d19      	adds	r1, r3, #4
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6011      	str	r1, [r2, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8000fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d104      	bne.n	8000fca <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8000fc0:	4b37      	ldr	r3, [pc, #220]	@ (80010a0 <SEGGER_RTT_vprintf+0x41c>)
 8000fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 8000fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 8000fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8000fd8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d015      	beq.n	800100c <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8000fe0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d002      	beq.n	8000fee <SEGGER_RTT_vprintf+0x36a>
 8000fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d010      	beq.n	8001010 <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 8000fee:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8000ff2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fcb0 	bl	800095e <_StoreChar>
            Precision--;
 8000ffe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001000:	3b01      	subs	r3, #1
 8001002:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 8001004:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001006:	2b00      	cmp	r3, #0
 8001008:	dadf      	bge.n	8000fca <SEGGER_RTT_vprintf+0x346>
        }
        break;
 800100a:	e020      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
              break;
 800100c:	bf00      	nop
 800100e:	e01e      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
              break;
 8001010:	bf00      	nop
        break;
 8001012:	e01c      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1d19      	adds	r1, r3, #4
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6011      	str	r1, [r2, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8001024:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001028:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800102c:	2300      	movs	r3, #0
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	2308      	movs	r3, #8
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2308      	movs	r3, #8
 8001036:	2210      	movs	r2, #16
 8001038:	f7ff fcd0 	bl	80009dc <_PrintUnsigned>
        break;
 800103c:	e007      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800103e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001042:	2125      	movs	r1, #37	@ 0x25
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fc8a 	bl	800095e <_StoreChar>
        break;
 800104a:	e000      	b.n	800104e <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 800104c:	bf00      	nop
      }
      sFormat++;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3301      	adds	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	e007      	b.n	8001066 <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 8001056:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800105a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fc7c 	bl	800095e <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8001066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001068:	2b00      	cmp	r3, #0
 800106a:	f6bf ae1c 	bge.w	8000ca6 <SEGGER_RTT_vprintf+0x22>
 800106e:	e000      	b.n	8001072 <SEGGER_RTT_vprintf+0x3ee>
      break;
 8001070:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8001072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd0d      	ble.n	8001094 <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8001078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800107e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f7ff fc32 	bl	80008f0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800108c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800108e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001090:	4413      	add	r3, r2
 8001092:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 8001094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 8001096:	4618      	mov	r0, r3
 8001098:	3788      	adds	r7, #136	@ 0x88
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	0800a6d0 	.word	0x0800a6d0

080010a4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80010a4:	b40e      	push	{r1, r2, r3}
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	461a      	mov	r2, r3
 80010ba:	69f9      	ldr	r1, [r7, #28]
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff fde1 	bl	8000c84 <SEGGER_RTT_vprintf>
 80010c2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010d0:	b003      	add	sp, #12
 80010d2:	4770      	bx	lr

080010d4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <MX_ETH_Init+0x84>)
 80010da:	4a20      	ldr	r2, [pc, #128]	@ (800115c <MX_ETH_Init+0x88>)
 80010dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x02;
 80010de:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <MX_ETH_Init+0x8c>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x00;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_ETH_Init+0x8c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0x00;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <MX_ETH_Init+0x8c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0xFA;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <MX_ETH_Init+0x8c>)
 80010f2:	22fa      	movs	r2, #250	@ 0xfa
 80010f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x15;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <MX_ETH_Init+0x8c>)
 80010f8:	2215      	movs	r2, #21
 80010fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x47;
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <MX_ETH_Init+0x8c>)
 80010fe:	2247      	movs	r2, #71	@ 0x47
 8001100:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_ETH_Init+0x84>)
 8001104:	4a16      	ldr	r2, [pc, #88]	@ (8001160 <MX_ETH_Init+0x8c>)
 8001106:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <MX_ETH_Init+0x84>)
 800110a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800110e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_ETH_Init+0x84>)
 8001112:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <MX_ETH_Init+0x90>)
 8001114:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_ETH_Init+0x84>)
 8001118:	4a13      	ldr	r2, [pc, #76]	@ (8001168 <MX_ETH_Init+0x94>)
 800111a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_ETH_Init+0x84>)
 800111e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001122:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <MX_ETH_Init+0x84>)
 8001126:	f001 f9fd 	bl	8002524 <HAL_ETH_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001130:	f000 fb56 	bl	80017e0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001134:	2238      	movs	r2, #56	@ 0x38
 8001136:	2100      	movs	r1, #0
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <MX_ETH_Init+0x98>)
 800113a:	f008 fc46 	bl	80099ca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800113e:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <MX_ETH_Init+0x98>)
 8001140:	2221      	movs	r2, #33	@ 0x21
 8001142:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001144:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_ETH_Init+0x98>)
 8001146:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800114a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MX_ETH_Init+0x98>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200006b8 	.word	0x200006b8
 800115c:	40028000 	.word	0x40028000
 8001160:	20000768 	.word	0x20000768
 8001164:	2000010c 	.word	0x2000010c
 8001168:	2000006c 	.word	0x2000006c
 800116c:	20000680 	.word	0x20000680

08001170 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08e      	sub	sp, #56	@ 0x38
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a4e      	ldr	r2, [pc, #312]	@ (80012c8 <HAL_ETH_MspInit+0x158>)
 800118e:	4293      	cmp	r3, r2
 8001190:	f040 8096 	bne.w	80012c0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001194:	4b4d      	ldr	r3, [pc, #308]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001198:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 800119a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800119e:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a0:	4b4a      	ldr	r3, [pc, #296]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	4b47      	ldr	r3, [pc, #284]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	4a46      	ldr	r2, [pc, #280]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b8:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d0:	4b3e      	ldr	r3, [pc, #248]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	4b3b      	ldr	r3, [pc, #236]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	4a3a      	ldr	r2, [pc, #232]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e8:	4b38      	ldr	r3, [pc, #224]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	4a34      	ldr	r2, [pc, #208]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001200:	4b32      	ldr	r3, [pc, #200]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	4a2e      	ldr	r2, [pc, #184]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	6313      	str	r3, [r2, #48]	@ 0x30
 8001218:	4b2c      	ldr	r3, [pc, #176]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001224:	4b29      	ldr	r3, [pc, #164]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a28      	ldr	r2, [pc, #160]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 800122a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001230:	4b26      	ldr	r3, [pc, #152]	@ (80012cc <HAL_ETH_MspInit+0x15c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800123c:	233a      	movs	r3, #58	@ 0x3a
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800124c:	230b      	movs	r3, #11
 800124e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	481e      	ldr	r0, [pc, #120]	@ (80012d0 <HAL_ETH_MspInit+0x160>)
 8001258:	f001 fd78 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 800125c:	238e      	movs	r3, #142	@ 0x8e
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126c:	230b      	movs	r3, #11
 800126e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <HAL_ETH_MspInit+0x164>)
 8001278:	f001 fd68 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 800127c:	f242 0301 	movw	r3, #8193	@ 0x2001
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128e:	230b      	movs	r3, #11
 8001290:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	480f      	ldr	r0, [pc, #60]	@ (80012d8 <HAL_ETH_MspInit+0x168>)
 800129a:	f001 fd57 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800129e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b0:	230b      	movs	r3, #11
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	4808      	ldr	r0, [pc, #32]	@ (80012dc <HAL_ETH_MspInit+0x16c>)
 80012bc:	f001 fd46 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012c0:	bf00      	nop
 80012c2:	3738      	adds	r7, #56	@ 0x38
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40028000 	.word	0x40028000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40021800 	.word	0x40021800

080012e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012e4:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <MX_FREERTOS_Init+0x18>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4804      	ldr	r0, [pc, #16]	@ (80012fc <MX_FREERTOS_Init+0x1c>)
 80012ea:	f005 fba5 	bl	8006a38 <osThreadNew>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a03      	ldr	r2, [pc, #12]	@ (8001300 <MX_FREERTOS_Init+0x20>)
 80012f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	0800a788 	.word	0x0800a788
 80012fc:	08001305 	.word	0x08001305
 8001300:	20000770 	.word	0x20000770

08001304 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 AppMain();
 800130c:	f000 fdd2 	bl	8001eb4 <AppMain>
    osDelay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f005 fc37 	bl	8006b84 <osDelay>
	 AppMain();
 8001316:	bf00      	nop
 8001318:	e7f8      	b.n	800130c <StartDefaultTask+0x8>
	...

0800131c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	@ 0x30
 8001320:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b63      	ldr	r3, [pc, #396]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a62      	ldr	r2, [pc, #392]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b60      	ldr	r3, [pc, #384]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	4b5d      	ldr	r3, [pc, #372]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a5c      	ldr	r2, [pc, #368]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b5a      	ldr	r3, [pc, #360]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b57      	ldr	r3, [pc, #348]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a56      	ldr	r2, [pc, #344]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b54      	ldr	r3, [pc, #336]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b51      	ldr	r3, [pc, #324]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a50      	ldr	r2, [pc, #320]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b4e      	ldr	r3, [pc, #312]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001392:	4b4b      	ldr	r3, [pc, #300]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a4a      	ldr	r2, [pc, #296]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b48      	ldr	r3, [pc, #288]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013aa:	4b45      	ldr	r3, [pc, #276]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a44      	ldr	r2, [pc, #272]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 80013b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <MX_GPIO_Init+0x1a4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2101      	movs	r1, #1
 80013c6:	483f      	ldr	r0, [pc, #252]	@ (80014c4 <MX_GPIO_Init+0x1a8>)
 80013c8:	f001 fe6c 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2104      	movs	r1, #4
 80013d0:	483d      	ldr	r0, [pc, #244]	@ (80014c8 <MX_GPIO_Init+0x1ac>)
 80013d2:	f001 fe67 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80013dc:	483a      	ldr	r0, [pc, #232]	@ (80014c8 <MX_GPIO_Init+0x1ac>)
 80013de:	f001 fe61 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2140      	movs	r1, #64	@ 0x40
 80013e6:	4839      	ldr	r0, [pc, #228]	@ (80014cc <MX_GPIO_Init+0x1b0>)
 80013e8:	f001 fe5c 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	21c0      	movs	r1, #192	@ 0xc0
 80013f0:	4837      	ldr	r0, [pc, #220]	@ (80014d0 <MX_GPIO_Init+0x1b4>)
 80013f2:	f001 fe57 	bl	80030a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	482d      	ldr	r0, [pc, #180]	@ (80014c4 <MX_GPIO_Init+0x1a8>)
 800140e:	f001 fc9d 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001412:	2301      	movs	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141e:	2303      	movs	r3, #3
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4826      	ldr	r0, [pc, #152]	@ (80014c4 <MX_GPIO_Init+0x1a8>)
 800142a:	f001 fc8f 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800142e:	2304      	movs	r3, #4
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	4820      	ldr	r0, [pc, #128]	@ (80014c8 <MX_GPIO_Init+0x1ac>)
 8001446:	f001 fc81 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800144a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4819      	ldr	r0, [pc, #100]	@ (80014c8 <MX_GPIO_Init+0x1ac>)
 8001464:	f001 fc72 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_GPIO_Init+0x1b0>)
 8001480:	f001 fc64 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	@ (80014cc <MX_GPIO_Init+0x1b0>)
 8001498:	f001 fc58 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800149c:	23c0      	movs	r3, #192	@ 0xc0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	@ (80014d0 <MX_GPIO_Init+0x1b4>)
 80014b4:	f001 fc4a 	bl	8002d4c <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	@ 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40021800 	.word	0x40021800
 80014d0:	40020c00 	.word	0x40020c00

080014d4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_I2S3_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <MX_I2S3_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_I2S3_Init+0x4c>)
 80014e0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_I2S3_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_I2S3_Init+0x4c>)
 80014ee:	2203      	movs	r2, #3
 80014f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_I2S3_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_I2S3_Init+0x4c>)
 80014fa:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80014fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <MX_I2S3_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_I2S3_Init+0x4c>)
 8001508:	2202      	movs	r2, #2
 800150a:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	@ (8001520 <MX_I2S3_Init+0x4c>)
 800150e:	f001 fde3 	bl	80030d8 <HAL_I2S_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2S3_Init+0x48>
  {
    Error_Handler();
 8001518:	f000 f962 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000774 	.word	0x20000774
 8001524:	40003c00 	.word	0x40003c00

08001528 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ae      	sub	sp, #184	@ 0xb8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2290      	movs	r2, #144	@ 0x90
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f008 fa3e 	bl	80099ca <memset>
  if(i2sHandle->Instance==SPI3)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a36      	ldr	r2, [pc, #216]	@ (800162c <HAL_I2S_MspInit+0x104>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d164      	bne.n	8001622 <HAL_I2S_MspInit+0xfa>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001558:	23c0      	movs	r3, #192	@ 0xc0
 800155a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800155c:	2302      	movs	r3, #2
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001560:	2302      	movs	r3, #2
 8001562:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 800156c:	2300      	movs	r3, #0
 800156e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4618      	mov	r0, r3
 8001576:	f002 fe81 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_I2S_MspInit+0x5c>
    {
      Error_Handler();
 8001580:	f000 f92e 	bl	80017e0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001584:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	4a29      	ldr	r2, [pc, #164]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 800158a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800158e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001590:	4b27      	ldr	r3, [pc, #156]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a0:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a8:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <HAL_I2S_MspInit+0x108>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015cc:	2310      	movs	r3, #16
 80015ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015e4:	2306      	movs	r3, #6
 80015e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4810      	ldr	r0, [pc, #64]	@ (8001634 <HAL_I2S_MspInit+0x10c>)
 80015f2:	f001 fbab 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80015f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001610:	2306      	movs	r3, #6
 8001612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001616:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800161a:	4619      	mov	r1, r3
 800161c:	4806      	ldr	r0, [pc, #24]	@ (8001638 <HAL_I2S_MspInit+0x110>)
 800161e:	f001 fb95 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001622:	bf00      	nop
 8001624:	37b8      	adds	r7, #184	@ 0xb8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40003c00 	.word	0x40003c00
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020800 	.word	0x40020800

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001640:	f000 f88e 	bl	8001760 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001644:	f000 fdb4 	bl	80021b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001648:	f000 f818 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164c:	f7ff fe66 	bl	800131c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001650:	f000 faf8 	bl	8001c44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001654:	f000 fb86 	bl	8001d64 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8001658:	f000 f910 	bl	800187c <MX_SPI2_Init>
  MX_ETH_Init();
 800165c:	f7ff fd3a 	bl	80010d4 <MX_ETH_Init>
  MX_RNG_Init();
 8001660:	f000 f8c4 	bl	80017ec <MX_RNG_Init>
  MX_I2S3_Init();
 8001664:	f7ff ff36 	bl	80014d4 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001668:	f005 f97c 	bl	8006964 <osKernelInitialize>
  MX_FREERTOS_Init();
 800166c:	f7ff fe38 	bl	80012e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001670:	f005 f9ac 	bl	80069cc <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 8001674:	f000 fc1e 	bl	8001eb4 <AppMain>
 8001678:	e7fc      	b.n	8001674 <main+0x38>
	...

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	@ 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2234      	movs	r2, #52	@ 0x34
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f008 f99d 	bl	80099ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016a0:	f002 f886 	bl	80037b0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <SystemClock_Config+0xdc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001758 <SystemClock_Config+0xdc>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b0:	4b29      	ldr	r3, [pc, #164]	@ (8001758 <SystemClock_Config+0xdc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016bc:	4b27      	ldr	r3, [pc, #156]	@ (800175c <SystemClock_Config+0xe0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016c4:	4a25      	ldr	r2, [pc, #148]	@ (800175c <SystemClock_Config+0xe0>)
 80016c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <SystemClock_Config+0xe0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d8:	2301      	movs	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80016e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	2302      	movs	r3, #2
 80016e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016ec:	2304      	movs	r3, #4
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80016f0:	2360      	movs	r3, #96	@ 0x60
 80016f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f4:	2302      	movs	r3, #2
 80016f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4618      	mov	r0, r3
 8001706:	f002 f8b3 	bl	8003870 <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001710:	f000 f866 	bl	80017e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001714:	f002 f85c 	bl	80037d0 <HAL_PWREx_EnableOverDrive>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800171e:	f000 f85f 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001726:	2302      	movs	r3, #2
 8001728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	2103      	movs	r1, #3
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fb44 	bl	8003dcc <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800174a:	f000 f849 	bl	80017e0 <Error_Handler>
  }
}
 800174e:	bf00      	nop
 8001750:	3750      	adds	r7, #80	@ 0x50
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000

08001760 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001766:	463b      	mov	r3, r7
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001772:	f000 fe5f 	bl	8002434 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800177a:	2300      	movs	r3, #0
 800177c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MPU_Config+0x58>)
 8001780:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001782:	230d      	movs	r3, #13
 8001784:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001786:	2300      	movs	r3, #0
 8001788:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800178a:	2301      	movs	r3, #1
 800178c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800178e:	2303      	movs	r3, #3
 8001790:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001796:	2301      	movs	r3, #1
 8001798:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017a2:	463b      	mov	r3, r7
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fe7d 	bl	80024a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80017aa:	2006      	movs	r0, #6
 80017ac:	f000 fe5a 	bl	8002464 <HAL_MPU_Enable>

}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	2007c000 	.word	0x2007c000

080017bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80017ce:	f000 fd0b 	bl	80021e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40001000 	.word	0x40001000

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <Error_Handler+0x8>

080017ec <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_RNG_Init+0x20>)
 80017f2:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <MX_RNG_Init+0x24>)
 80017f4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_RNG_Init+0x20>)
 80017f8:	f003 f968 	bl	8004acc <HAL_RNG_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001802:	f7ff ffed 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200007b4 	.word	0x200007b4
 8001810:	50060800 	.word	0x50060800

08001814 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0a8      	sub	sp, #160	@ 0xa0
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2290      	movs	r2, #144	@ 0x90
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f008 f8d0 	bl	80099ca <memset>
  if(rngHandle->Instance==RNG)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a11      	ldr	r2, [pc, #68]	@ (8001874 <HAL_RNG_MspInit+0x60>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d11b      	bne.n	800186c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001834:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001838:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fd19 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001850:	f7ff ffc6 	bl	80017e0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_RNG_MspInit+0x64>)
 8001856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001858:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_RNG_MspInit+0x64>)
 800185a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800185e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001860:	4b05      	ldr	r3, [pc, #20]	@ (8001878 <HAL_RNG_MspInit+0x64>)
 8001862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800186c:	bf00      	nop
 800186e:	37a0      	adds	r7, #160	@ 0xa0
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	50060800 	.word	0x50060800
 8001878:	40023800 	.word	0x40023800

0800187c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <MX_SPI2_Init+0x74>)
 8001882:	4a1c      	ldr	r2, [pc, #112]	@ (80018f4 <MX_SPI2_Init+0x78>)
 8001884:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <MX_SPI2_Init+0x74>)
 8001888:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800188c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <MX_SPI2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_SPI2_Init+0x74>)
 8001896:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800189a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_SPI2_Init+0x74>)
 800189e:	2202      	movs	r2, #2
 80018a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018b2:	2238      	movs	r2, #56	@ 0x38
 80018b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018ca:	2207      	movs	r2, #7
 80018cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	@ (80018f0 <MX_SPI2_Init+0x74>)
 80018dc:	f003 f920 	bl	8004b20 <HAL_SPI_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018e6:	f7ff ff7b 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200007c4 	.word	0x200007c4
 80018f4:	40003800 	.word	0x40003800

080018f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a17      	ldr	r2, [pc, #92]	@ (8001974 <HAL_SPI_MspInit+0x7c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d128      	bne.n	800196c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800191a:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <HAL_SPI_MspInit+0x80>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a16      	ldr	r2, [pc, #88]	@ (8001978 <HAL_SPI_MspInit+0x80>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <HAL_SPI_MspInit+0x80>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_SPI_MspInit+0x80>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <HAL_SPI_MspInit+0x80>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_SPI_MspInit+0x80>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800194a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800195c:	2305      	movs	r3, #5
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <HAL_SPI_MspInit+0x84>)
 8001968:	f001 f9f0 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800196c:	bf00      	nop
 800196e:	3728      	adds	r7, #40	@ 0x28
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40003800 	.word	0x40003800
 8001978:	40023800 	.word	0x40023800
 800197c:	40020400 	.word	0x40020400

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a10      	ldr	r2, [pc, #64]	@ (80019cc <HAL_MspInit+0x4c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <HAL_MspInit+0x4c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <HAL_MspInit+0x4c>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	210f      	movs	r1, #15
 80019ba:	f06f 0001 	mvn.w	r0, #1
 80019be:	f000 fd0f 	bl	80023e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08e      	sub	sp, #56	@ 0x38
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019e0:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <HAL_InitTick+0xe0>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	4a32      	ldr	r2, [pc, #200]	@ (8001ab0 <HAL_InitTick+0xe0>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ec:	4b30      	ldr	r3, [pc, #192]	@ (8001ab0 <HAL_InitTick+0xe0>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019f8:	f107 0210 	add.w	r2, r7, #16
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fc08 	bl	8004218 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a12:	f002 fbd9 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8001a16:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a18:	e004      	b.n	8001a24 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a1a:	f002 fbd5 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a26:	4a23      	ldr	r2, [pc, #140]	@ (8001ab4 <HAL_InitTick+0xe4>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	0c9b      	lsrs	r3, r3, #18
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a32:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <HAL_InitTick+0xe8>)
 8001a34:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <HAL_InitTick+0xec>)
 8001a36:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_InitTick+0xe8>)
 8001a3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a40:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <HAL_InitTick+0xe8>)
 8001a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <HAL_InitTick+0xe8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <HAL_InitTick+0xe8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_InitTick+0xe8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a58:	4817      	ldr	r0, [pc, #92]	@ (8001ab8 <HAL_InitTick+0xe8>)
 8001a5a:	f003 fc0b 	bl	8005274 <HAL_TIM_Base_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a6c:	4812      	ldr	r0, [pc, #72]	@ (8001ab8 <HAL_InitTick+0xe8>)
 8001a6e:	f003 fc63 	bl	8005338 <HAL_TIM_Base_Start_IT>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d111      	bne.n	8001aa4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a80:	2036      	movs	r0, #54	@ 0x36
 8001a82:	f000 fcc9 	bl	8002418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d808      	bhi.n	8001a9e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	2036      	movs	r0, #54	@ 0x36
 8001a92:	f000 fca5 	bl	80023e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <HAL_InitTick+0xf0>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e002      	b.n	8001aa4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3738      	adds	r7, #56	@ 0x38
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	431bde83 	.word	0x431bde83
 8001ab8:	20000828 	.word	0x20000828
 8001abc:	40001000 	.word	0x40001000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <NMI_Handler+0x4>

08001acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <MemManage_Handler+0x4>

08001adc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <BusFault_Handler+0x4>

08001ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <UsageFault_Handler+0x4>

08001aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <TIM6_DAC_IRQHandler+0x10>)
 8001b02:	f003 fc91 	bl	8005428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000828 	.word	0x20000828

08001b10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e00a      	b.n	8001b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b22:	f3af 8000 	nop.w
 8001b26:	4601      	mov	r1, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf0      	blt.n	8001b22 <_read+0x12>
  }

  return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b72:	605a      	str	r2, [r3, #4]
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_isatty>:

int _isatty(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <_sbrk+0x5c>)
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <_sbrk+0x60>)
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <_sbrk+0x64>)
 8001bd2:	4a12      	ldr	r2, [pc, #72]	@ (8001c1c <_sbrk+0x68>)
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <_sbrk+0x64>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be4:	f007 ff8c 	bl	8009b00 <__errno>
 8001be8:	4603      	mov	r3, r0
 8001bea:	220c      	movs	r2, #12
 8001bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	e009      	b.n	8001c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <_sbrk+0x64>)
 8001c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2007c000 	.word	0x2007c000
 8001c14:	00000400 	.word	0x00000400
 8001c18:	20000874 	.word	0x20000874
 8001c1c:	20005fd0 	.word	0x20005fd0

08001c20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ca0 <MX_USART3_UART_Init+0x5c>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c86:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_USART3_UART_Init+0x58>)
 8001c88:	f003 fdc2 	bl	8005810 <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c92:	f7ff fda5 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000878 	.word	0x20000878
 8001ca0:	40004800 	.word	0x40004800

08001ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b0ae      	sub	sp, #184	@ 0xb8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2290      	movs	r2, #144	@ 0x90
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f007 fe80 	bl	80099ca <memset>
  if(uartHandle->Instance==USART3)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a22      	ldr	r2, [pc, #136]	@ (8001d58 <HAL_UART_MspInit+0xb4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d13c      	bne.n	8001d4e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 faca 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cee:	f7ff fd77 	bl	80017e0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_UART_MspInit+0xb8>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_UART_MspInit+0xb8>)
 8001cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_UART_MspInit+0xb8>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0a:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <HAL_UART_MspInit+0xb8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a13      	ldr	r2, [pc, #76]	@ (8001d5c <HAL_UART_MspInit+0xb8>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_UART_MspInit+0xb8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d42:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_UART_MspInit+0xbc>)
 8001d4a:	f000 ffff 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d4e:	bf00      	nop
 8001d50:	37b8      	adds	r7, #184	@ 0xb8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40004800 	.word	0x40004800
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020c00 	.word	0x40020c00

08001d64 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d6a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d72:	2206      	movs	r2, #6
 8001d74:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d78:	2202      	movs	r2, #2
 8001d7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d84:	2202      	movs	r2, #2
 8001d86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d94:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001da6:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001da8:	f001 fbc7 	bl	800353a <HAL_PCD_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001db2:	f7ff fd15 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000900 	.word	0x20000900

08001dc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0ae      	sub	sp, #184	@ 0xb8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2290      	movs	r2, #144	@ 0x90
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f007 fdf2 	bl	80099ca <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dee:	d159      	bne.n	8001ea4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001df0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001df4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 fa3b 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e0c:	f7ff fce8 	bl	80017e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	4a25      	ldr	r2, [pc, #148]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e28:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e42:	230a      	movs	r3, #10
 8001e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4818      	ldr	r0, [pc, #96]	@ (8001eb0 <HAL_PCD_MspInit+0xf0>)
 8001e50:	f000 ff7c 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4810      	ldr	r0, [pc, #64]	@ (8001eb0 <HAL_PCD_MspInit+0xf0>)
 8001e70:	f000 ff6c 	bl	8002d4c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e74:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e78:	4a0c      	ldr	r2, [pc, #48]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e7e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e90:	4a06      	ldr	r2, [pc, #24]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <HAL_PCD_MspInit+0xec>)
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	37b8      	adds	r7, #184	@ 0xb8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <AppMain>:
#include "TCP_IP.h"
#include "proj_tasks.h"
#include "mic.h"


void AppMain(void){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af02      	add	r7, sp, #8

	//Task to create network interface and socket
	xTaskCreate(vInterfaceSocketTask, "Task Initialize Interface & Socket",
 8001eba:	2300      	movs	r3, #0
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	2328      	movs	r3, #40	@ 0x28
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ec8:	490a      	ldr	r1, [pc, #40]	@ (8001ef4 <AppMain+0x40>)
 8001eca:	480b      	ldr	r0, [pc, #44]	@ (8001ef8 <AppMain+0x44>)
 8001ecc:	f005 fcf0 	bl	80078b0 <xTaskCreate>

	//test LCD

	//configureI2S();
	//getAudio();
	lcd_4SPI_init();
 8001ed0:	f000 f8d6 	bl	8002080 <lcd_4SPI_init>
	setPageaddressing();
 8001ed4:	f000 f860 	bl	8001f98 <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f000 f873 	bl	8001fc4 <lcd_setpage_address>
	lcd_setcolumn_address(32);
 8001ede:	2020      	movs	r0, #32
 8001ee0:	f000 f88a 	bl	8001ff8 <lcd_setcolumn_address>

	while(1){
		//SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
		getAudio();
 8001ee4:	f000 f8e6 	bl	80020b4 <getAudio>
		HAL_Delay(2000);
 8001ee8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001eec:	f000 f99c 	bl	8002228 <HAL_Delay>
		getAudio();
 8001ef0:	bf00      	nop
 8001ef2:	e7f7      	b.n	8001ee4 <AppMain+0x30>
 8001ef4:	0800a6e4 	.word	0x0800a6e4
 8001ef8:	08002149 	.word	0x08002149

08001efc <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2140      	movs	r1, #64	@ 0x40
 8001f0a:	480b      	ldr	r0, [pc, #44]	@ (8001f38 <lcd_transfer+0x3c>)
 8001f0c:	f001 f8ca 	bl	80030a4 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 8001f10:	1df9      	adds	r1, r7, #7
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	2201      	movs	r2, #1
 8001f18:	4808      	ldr	r0, [pc, #32]	@ (8001f3c <lcd_transfer+0x40>)
 8001f1a:	f002 feac 	bl	8004c76 <HAL_SPI_Transmit>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	2140      	movs	r1, #64	@ 0x40
 8001f26:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <lcd_transfer+0x3c>)
 8001f28:	f001 f8bc 	bl	80030a4 <HAL_GPIO_WritePin>

	return HAL_OK;
 8001f2c:	2300      	movs	r3, #0

}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	200007c4 	.word	0x200007c4

08001f40 <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 8001f46:	23af      	movs	r3, #175	@ 0xaf
 8001f48:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2180      	movs	r1, #128	@ 0x80
 8001f4e:	4806      	ldr	r0, [pc, #24]	@ (8001f68 <onLCD+0x28>)
 8001f50:	f001 f8a8 	bl	80030a4 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ffd0 	bl	8001efc <lcd_transfer>
 8001f5c:	4603      	mov	r3, r0

}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40020c00 	.word	0x40020c00

08001f6c <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 8001f72:	23ae      	movs	r3, #174	@ 0xae
 8001f74:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	4806      	ldr	r0, [pc, #24]	@ (8001f94 <offLCD+0x28>)
 8001f7c:	f001 f892 	bl	80030a4 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ffba 	bl	8001efc <lcd_transfer>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40020c00 	.word	0x40020c00

08001f98 <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 8001f9e:	2320      	movs	r3, #32
 8001fa0:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2180      	movs	r1, #128	@ 0x80
 8001fa6:	4806      	ldr	r0, [pc, #24]	@ (8001fc0 <setPageaddressing+0x28>)
 8001fa8:	f001 f87c 	bl	80030a4 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ffa4 	bl	8001efc <lcd_transfer>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40020c00 	.word	0x40020c00

08001fc4 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8001fd6:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2180      	movs	r1, #128	@ 0x80
 8001fdc:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <lcd_setpage_address+0x30>)
 8001fde:	f001 f861 	bl	80030a4 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8001fe2:	7bbb      	ldrb	r3, [r7, #14]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff89 	bl	8001efc <lcd_transfer>
 8001fea:	4603      	mov	r3, r0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40020c00 	.word	0x40020c00

08001ff8 <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b7f      	cmp	r3, #127	@ 0x7f
 8002004:	dc02      	bgt.n	800200c <lcd_setcolumn_address+0x14>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	da01      	bge.n	8002010 <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e030      	b.n	8002072 <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 8002014:	2310      	movs	r3, #16
 8002016:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 8002018:	2300      	movs	r3, #0
 800201a:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	b2db      	uxtb	r3, r3
 8002022:	b25a      	sxtb	r2, r3
 8002024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002028:	4313      	orrs	r3, r2
 800202a:	b25b      	sxtb	r3, r3
 800202c:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	b25a      	sxtb	r2, r3
 8002038:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800203c:	4313      	orrs	r3, r2
 800203e:	b25b      	sxtb	r3, r3
 8002040:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	2180      	movs	r1, #128	@ 0x80
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <lcd_setcolumn_address+0x84>)
 8002048:	f001 f82c 	bl	80030a4 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 800204c:	7bbb      	ldrb	r3, [r7, #14]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff54 	bl	8001efc <lcd_transfer>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e009      	b.n	8002072 <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 800205e:	7b7b      	ldrb	r3, [r7, #13]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff4b 	bl	8001efc <lcd_transfer>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40020c00 	.word	0x40020c00

08002080 <lcd_4SPI_init>:
}

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2140      	movs	r1, #64	@ 0x40
 8002088:	4808      	ldr	r0, [pc, #32]	@ (80020ac <lcd_4SPI_init+0x2c>)
 800208a:	f001 f80b 	bl	80030a4 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	2101      	movs	r1, #1
 8002092:	4807      	ldr	r0, [pc, #28]	@ (80020b0 <lcd_4SPI_init+0x30>)
 8002094:	f001 f806 	bl	80030a4 <HAL_GPIO_WritePin>

	//dummy transmission for SPI

	onLCD();
 8002098:	f7ff ff52 	bl	8001f40 <onLCD>
	offLCD();
 800209c:	f7ff ff66 	bl	8001f6c <offLCD>

	//this is the column where the lcd starts
	lcd_setcolumn_address(32);
 80020a0:	2020      	movs	r0, #32
 80020a2:	f7ff ffa9 	bl	8001ff8 <lcd_setcolumn_address>

	return HAL_OK;
 80020a6:	2300      	movs	r3, #0

}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40020c00 	.word	0x40020c00
 80020b0:	40020800 	.word	0x40020800

080020b4 <getAudio>:
 * 		SDA -> PC12 (WHITE)
 */


//get audio from the mic
uint32_t getAudio(){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint32_t timeout_I2S = 5000;
 80020ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80020be:	60fb      	str	r3, [r7, #12]

	// For 24-bit data in 32-bit frame, each sample is one 32-bit word
	uint32_t i2sRxBuffer[1]; // Single 32-bit sample

	//pass buffer as uint16_t* but with size for 32-bit data
	status = HAL_I2S_Receive(&hi2s3, (uint16_t*)i2sRxBuffer, 2, timeout_I2S);
 80020c0:	1d39      	adds	r1, r7, #4
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2202      	movs	r2, #2
 80020c6:	481a      	ldr	r0, [pc, #104]	@ (8002130 <getAudio+0x7c>)
 80020c8:	f001 f8ec 	bl	80032a4 <HAL_I2S_Receive>
 80020cc:	4603      	mov	r3, r0
 80020ce:	72fb      	strb	r3, [r7, #11]

	printf("I2S Mode: 0x%08lX\n", hi2s3.Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG);
 80020d0:	4b17      	ldr	r3, [pc, #92]	@ (8002130 <getAudio+0x7c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020da:	4619      	mov	r1, r3
 80020dc:	4815      	ldr	r0, [pc, #84]	@ (8002134 <getAudio+0x80>)
 80020de:	f007 fc1f 	bl	8009920 <iprintf>

	//I2S state is 1, correct

	if(status == HAL_OK){
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <getAudio+0x3c>
		SEGGER_RTT_printf(0,"works\n");
 80020e8:	4913      	ldr	r1, [pc, #76]	@ (8002138 <getAudio+0x84>)
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7fe ffda 	bl	80010a4 <SEGGER_RTT_printf>
	}
	if (status != HAL_OK) {
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <getAudio+0x70>
	    if (status == HAL_BUSY) {
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d104      	bne.n	8002106 <getAudio+0x52>
			SEGGER_RTT_printf(0,"busy error\n");
 80020fc:	490f      	ldr	r1, [pc, #60]	@ (800213c <getAudio+0x88>)
 80020fe:	2000      	movs	r0, #0
 8002100:	f7fe ffd0 	bl	80010a4 <SEGGER_RTT_printf>
 8002104:	e00e      	b.n	8002124 <getAudio+0x70>
	    } else if (status == HAL_TIMEOUT) {
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d104      	bne.n	8002116 <getAudio+0x62>
			SEGGER_RTT_printf(0,"timeout error\n");
 800210c:	490c      	ldr	r1, [pc, #48]	@ (8002140 <getAudio+0x8c>)
 800210e:	2000      	movs	r0, #0
 8002110:	f7fe ffc8 	bl	80010a4 <SEGGER_RTT_printf>
 8002114:	e006      	b.n	8002124 <getAudio+0x70>
	    } else if (status == HAL_ERROR) {
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d103      	bne.n	8002124 <getAudio+0x70>
			SEGGER_RTT_printf(0,"reg error\n");
 800211c:	4909      	ldr	r1, [pc, #36]	@ (8002144 <getAudio+0x90>)
 800211e:	2000      	movs	r0, #0
 8002120:	f7fe ffc0 	bl	80010a4 <SEGGER_RTT_printf>
	    }
	}
	return 0xDEAD;
 8002124:	f64d 63ad 	movw	r3, #57005	@ 0xdead
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000774 	.word	0x20000774
 8002134:	0800a708 	.word	0x0800a708
 8002138:	0800a71c 	.word	0x0800a71c
 800213c:	0800a724 	.word	0x0800a724
 8002140:	0800a730 	.word	0x0800a730
 8002144:	0800a740 	.word	0x0800a740

08002148 <vInterfaceSocketTask>:

//store Mic data, use 8 chars for 64 bits in case
static char TxBuffer[8];

//initailize network interface and create socket, only 1 for my current applications
void vInterfaceSocketTask(void * argument) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

	//Initialize Socket
	//xClientSocket = ConfigTCPClientSocket();

    for(;;) {
        vTaskDelay(1000);
 8002150:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002154:	f005 fd0c 	bl	8007b70 <vTaskDelay>
 8002158:	e7fa      	b.n	8002150 <vInterfaceSocketTask+0x8>
	...

0800215c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002160:	f7ff fd5e 	bl	8001c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002164:	480c      	ldr	r0, [pc, #48]	@ (8002198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002166:	490d      	ldr	r1, [pc, #52]	@ (800219c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002168:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800217c:	4c0a      	ldr	r4, [pc, #40]	@ (80021a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800218a:	f007 fcbf 	bl	8009b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218e:	f7ff fa55 	bl	800163c <main>
  bx  lr    
 8002192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002194:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800219c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80021a0:	0800a808 	.word	0x0800a808
  ldr r2, =_sbss
 80021a4:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 80021a8:	20005fd0 	.word	0x20005fd0

080021ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC_IRQHandler>
	...

080021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	@ (80021e4 <HAL_Init+0x34>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <HAL_Init+0x34>)
 80021ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021be:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <HAL_Init+0x34>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <HAL_Init+0x34>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 f8fc 	bl	80023ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f7ff fbfc 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fbd2 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_IncTick+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_IncTick+0x24>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	@ (800220c <HAL_IncTick+0x24>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000008 	.word	0x20000008
 800220c:	20000de0 	.word	0x20000de0

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000de0 	.word	0x20000de0

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_Delay+0x44>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffde 	bl	8002210 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000008 	.word	0x20000008

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	4313      	orrs	r3, r2
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x40>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00
 80022b4:	05fa0000 	.word	0x05fa0000

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4907      	ldr	r1, [pc, #28]	@ (800230c <__NVIC_EnableIRQ+0x38>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	@ (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	@ (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
         );
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	@ 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ff4c 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f2:	f7ff ff61 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 80023f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	6978      	ldr	r0, [r7, #20]
 80023fe:	f7ff ffb1 	bl	8002364 <NVIC_EncodePriority>
 8002402:	4602      	mov	r2, r0
 8002404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff80 	bl	8002310 <__NVIC_SetPriority>
}
 8002410:	bf00      	nop
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff54 	bl	80022d4 <__NVIC_EnableIRQ>
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002438:	f3bf 8f5f 	dmb	sy
}
 800243c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <HAL_MPU_Disable+0x28>)
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	4a06      	ldr	r2, [pc, #24]	@ (800245c <HAL_MPU_Disable+0x28>)
 8002444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002448:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_MPU_Disable+0x2c>)
 800244c:	2200      	movs	r2, #0
 800244e:	605a      	str	r2, [r3, #4]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00
 8002460:	e000ed90 	.word	0xe000ed90

08002464 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800246c:	4a0b      	ldr	r2, [pc, #44]	@ (800249c <HAL_MPU_Enable+0x38>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_MPU_Enable+0x3c>)
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	4a09      	ldr	r2, [pc, #36]	@ (80024a0 <HAL_MPU_Enable+0x3c>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002480:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002482:	f3bf 8f4f 	dsb	sy
}
 8002486:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002488:	f3bf 8f6f 	isb	sy
}
 800248c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000ed90 	.word	0xe000ed90
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	785a      	ldrb	r2, [r3, #1]
 80024b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_MPU_ConfigRegion+0x7c>)
 80024b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <HAL_MPU_ConfigRegion+0x7c>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4a19      	ldr	r2, [pc, #100]	@ (8002520 <HAL_MPU_ConfigRegion+0x7c>)
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80024c0:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HAL_MPU_ConfigRegion+0x7c>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7b1b      	ldrb	r3, [r3, #12]
 80024cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7adb      	ldrb	r3, [r3, #11]
 80024d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7a9b      	ldrb	r3, [r3, #10]
 80024da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80024dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7b5b      	ldrb	r3, [r3, #13]
 80024e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80024e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7b9b      	ldrb	r3, [r3, #14]
 80024ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80024ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7bdb      	ldrb	r3, [r3, #15]
 80024f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80024f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7a5b      	ldrb	r3, [r3, #9]
 80024fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80024fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7a1b      	ldrb	r3, [r3, #8]
 8002502:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002504:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	7812      	ldrb	r2, [r2, #0]
 800250a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800250c:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800250e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002510:	6113      	str	r3, [r2, #16]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed90 	.word	0xe000ed90

08002524 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e086      	b.n	8002644 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7fe fe11 	bl	8001170 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254e:	4b3f      	ldr	r3, [pc, #252]	@ (800264c <HAL_ETH_Init+0x128>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a3e      	ldr	r2, [pc, #248]	@ (800264c <HAL_ETH_Init+0x128>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b3c      	ldr	r3, [pc, #240]	@ (800264c <HAL_ETH_Init+0x128>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002566:	4b3a      	ldr	r3, [pc, #232]	@ (8002650 <HAL_ETH_Init+0x12c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a39      	ldr	r2, [pc, #228]	@ (8002650 <HAL_ETH_Init+0x12c>)
 800256c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002570:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002572:	4b37      	ldr	r3, [pc, #220]	@ (8002650 <HAL_ETH_Init+0x12c>)
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	4935      	ldr	r1, [pc, #212]	@ (8002650 <HAL_ETH_Init+0x12c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002580:	4b33      	ldr	r3, [pc, #204]	@ (8002650 <HAL_ETH_Init+0x12c>)
 8002582:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800259a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800259c:	f7ff fe38 	bl	8002210 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025a2:	e011      	b.n	80025c8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025a4:	f7ff fe34 	bl	8002210 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025b2:	d909      	bls.n	80025c8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2204      	movs	r2, #4
 80025b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	22e0      	movs	r2, #224	@ 0xe0
 80025c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e03d      	b.n	8002644 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1e4      	bne.n	80025a4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fa40 	bl	8002a60 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 faeb 	bl	8002bbc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fb41 	bl	8002c6e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	461a      	mov	r2, r3
 80025f2:	2100      	movs	r1, #0
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 faa9 	bl	8002b4c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <HAL_ETH_Init+0x130>)
 8002618:	430b      	orrs	r3, r1
 800261a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800262e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2210      	movs	r2, #16
 800263e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	00020060 	.word	0x00020060

08002658 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002680:	4b4b      	ldr	r3, [pc, #300]	@ (80027b0 <HAL_ETH_IRQHandler+0x158>)
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00e      	beq.n	80026ae <HAL_ETH_IRQHandler+0x56>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b43      	ldr	r3, [pc, #268]	@ (80027b4 <HAL_ETH_IRQHandler+0x15c>)
 80026a6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f004 f8f3 	bl	8006894 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00f      	beq.n	80026d8 <HAL_ETH_IRQHandler+0x80>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ca:	461a      	mov	r2, r3
 80026cc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80026d0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f004 f90e 	bl	80068f4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d042      	beq.n	8002768 <HAL_ETH_IRQHandler+0x110>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03d      	beq.n	8002768 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	f043 0208 	orr.w	r2, r3, #8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01a      	beq.n	800273c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	4b29      	ldr	r3, [pc, #164]	@ (80027b8 <HAL_ETH_IRQHandler+0x160>)
 8002712:	4013      	ands	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800272c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002730:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	22e0      	movs	r2, #224	@ 0xe0
 8002736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800273a:	e012      	b.n	8002762 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	f248 6380 	movw	r3, #34432	@ 0x8680
 800274a:	4013      	ands	r3, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800275a:	461a      	mov	r2, r3
 800275c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002760:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f004 f83a 	bl	80067dc <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00e      	beq.n	8002790 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f81a 	bl	80027bc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800279a:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_ETH_IRQHandler+0x158>)
 800279c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80027a0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f814 	bl	80027d0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40013c00 	.word	0x40013c00
 80027b4:	00010040 	.word	0x00010040
 80027b8:	007e2000 	.word	0x007e2000

080027bc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4b53      	ldr	r3, [pc, #332]	@ (8002948 <ETH_SetMACConfig+0x164>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	7b9b      	ldrb	r3, [r3, #14]
 8002802:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	7c12      	ldrb	r2, [r2, #16]
 8002808:	2a00      	cmp	r2, #0
 800280a:	d102      	bne.n	8002812 <ETH_SetMACConfig+0x2e>
 800280c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002810:	e000      	b.n	8002814 <ETH_SetMACConfig+0x30>
 8002812:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002814:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	7c52      	ldrb	r2, [r2, #17]
 800281a:	2a00      	cmp	r2, #0
 800281c:	d102      	bne.n	8002824 <ETH_SetMACConfig+0x40>
 800281e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002822:	e000      	b.n	8002826 <ETH_SetMACConfig+0x42>
 8002824:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002826:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800282c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	7fdb      	ldrb	r3, [r3, #31]
 8002832:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002834:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800283a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	7f92      	ldrb	r2, [r2, #30]
 8002840:	2a00      	cmp	r2, #0
 8002842:	d102      	bne.n	800284a <ETH_SetMACConfig+0x66>
 8002844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002848:	e000      	b.n	800284c <ETH_SetMACConfig+0x68>
 800284a:	2200      	movs	r2, #0
                        macconf->Speed |
 800284c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7f1b      	ldrb	r3, [r3, #28]
 8002852:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002854:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800285a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	791b      	ldrb	r3, [r3, #4]
 8002860:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002862:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	f892 2020 	ldrb.w	r2, [r2, #32]
 800286a:	2a00      	cmp	r2, #0
 800286c:	d102      	bne.n	8002874 <ETH_SetMACConfig+0x90>
 800286e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002872:	e000      	b.n	8002876 <ETH_SetMACConfig+0x92>
 8002874:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002876:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	7bdb      	ldrb	r3, [r3, #15]
 800287c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800287e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002884:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800288c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800288e:	4313      	orrs	r3, r2
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7ff fcbe 	bl	8002228 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80028c2:	4013      	ands	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80028d2:	2a00      	cmp	r2, #0
 80028d4:	d101      	bne.n	80028da <ETH_SetMACConfig+0xf6>
 80028d6:	2280      	movs	r2, #128	@ 0x80
 80028d8:	e000      	b.n	80028dc <ETH_SetMACConfig+0xf8>
 80028da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80028ea:	2a01      	cmp	r2, #1
 80028ec:	d101      	bne.n	80028f2 <ETH_SetMACConfig+0x10e>
 80028ee:	2208      	movs	r2, #8
 80028f0:	e000      	b.n	80028f4 <ETH_SetMACConfig+0x110>
 80028f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80028fc:	2a01      	cmp	r2, #1
 80028fe:	d101      	bne.n	8002904 <ETH_SetMACConfig+0x120>
 8002900:	2204      	movs	r2, #4
 8002902:	e000      	b.n	8002906 <ETH_SetMACConfig+0x122>
 8002904:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002906:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800290e:	2a01      	cmp	r2, #1
 8002910:	d101      	bne.n	8002916 <ETH_SetMACConfig+0x132>
 8002912:	2202      	movs	r2, #2
 8002914:	e000      	b.n	8002918 <ETH_SetMACConfig+0x134>
 8002916:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002918:	4313      	orrs	r3, r2
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002930:	2001      	movs	r0, #1
 8002932:	f7ff fc79 	bl	8002228 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	fd20810f 	.word	0xfd20810f

0800294c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <ETH_SetDMAConfig+0x110>)
 8002966:	4013      	ands	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	7b1b      	ldrb	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <ETH_SetDMAConfig+0x2c>
 8002972:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002976:	e000      	b.n	800297a <ETH_SetDMAConfig+0x2e>
 8002978:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	7b5b      	ldrb	r3, [r3, #13]
 800297e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002980:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	7f52      	ldrb	r2, [r2, #29]
 8002986:	2a00      	cmp	r2, #0
 8002988:	d102      	bne.n	8002990 <ETH_SetDMAConfig+0x44>
 800298a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800298e:	e000      	b.n	8002992 <ETH_SetDMAConfig+0x46>
 8002990:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002992:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	7b9b      	ldrb	r3, [r3, #14]
 8002998:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800299a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	7f1b      	ldrb	r3, [r3, #28]
 80029a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	7f9b      	ldrb	r3, [r3, #30]
 80029ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029c0:	4313      	orrs	r3, r2
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029d0:	461a      	mov	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e2:	2001      	movs	r0, #1
 80029e4:	f7ff fc20 	bl	8002228 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	791b      	ldrb	r3, [r3, #4]
 80029fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a00:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a06:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a0c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a14:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a16:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a1e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a24:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a32:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7ff fbf1 	bl	8002228 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	f8de3f23 	.word	0xf8de3f23

08002a60 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0a6      	sub	sp, #152	@ 0x98
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a74:	2300      	movs	r3, #0
 8002a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ac8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ace:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ada:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff fe7f 	bl	80027e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b12:	2301      	movs	r3, #1
 8002b14:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b1a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b20:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b26:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b36:	f107 0308 	add.w	r3, r7, #8
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff05 	bl	800294c <ETH_SetDMAConfig>
}
 8002b42:	bf00      	nop
 8002b44:	3798      	adds	r7, #152	@ 0x98
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3305      	adds	r3, #5
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	3204      	adds	r2, #4
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <ETH_MACAddressConfig+0x68>)
 8002b6e:	4413      	add	r3, r2
 8002b70:	461a      	mov	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3303      	adds	r3, #3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	061a      	lsls	r2, r3, #24
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3302      	adds	r3, #2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	4313      	orrs	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <ETH_MACAddressConfig+0x6c>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6013      	str	r3, [r2, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40028040 	.word	0x40028040
 8002bb8:	40028044 	.word	0x40028044

08002bbc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e03e      	b.n	8002c48 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2200      	movs	r2, #0
 8002be6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	3206      	adds	r2, #6
 8002bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d80c      	bhi.n	8002c2c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68d9      	ldr	r1, [r3, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	461a      	mov	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	e004      	b.n	8002c36 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3301      	adds	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d9bd      	bls.n	8002bca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c60:	611a      	str	r2, [r3, #16]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e048      	b.n	8002d0e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6919      	ldr	r1, [r3, #16]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	3212      	adds	r2, #18
 8002cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d80c      	bhi.n	8002cfe <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6919      	ldr	r1, [r3, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	e004      	b.n	8002d08 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	461a      	mov	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d9b3      	bls.n	8002c7c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d3e:	60da      	str	r2, [r3, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	@ 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e175      	b.n	8003058 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f040 8164 	bne.w	8003052 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d005      	beq.n	8002da2 <HAL_GPIO_Init+0x56>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d130      	bne.n	8002e04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 0201 	and.w	r2, r3, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d017      	beq.n	8002e40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d123      	bne.n	8002e94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3208      	adds	r2, #8
 8002e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220f      	movs	r2, #15
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80be 	beq.w	8003052 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed6:	4b66      	ldr	r3, [pc, #408]	@ (8003070 <HAL_GPIO_Init+0x324>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	4a65      	ldr	r2, [pc, #404]	@ (8003070 <HAL_GPIO_Init+0x324>)
 8002edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ee2:	4b63      	ldr	r3, [pc, #396]	@ (8003070 <HAL_GPIO_Init+0x324>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eee:	4a61      	ldr	r2, [pc, #388]	@ (8003074 <HAL_GPIO_Init+0x328>)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	220f      	movs	r2, #15
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a58      	ldr	r2, [pc, #352]	@ (8003078 <HAL_GPIO_Init+0x32c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d037      	beq.n	8002f8a <HAL_GPIO_Init+0x23e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a57      	ldr	r2, [pc, #348]	@ (800307c <HAL_GPIO_Init+0x330>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d031      	beq.n	8002f86 <HAL_GPIO_Init+0x23a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a56      	ldr	r2, [pc, #344]	@ (8003080 <HAL_GPIO_Init+0x334>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d02b      	beq.n	8002f82 <HAL_GPIO_Init+0x236>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a55      	ldr	r2, [pc, #340]	@ (8003084 <HAL_GPIO_Init+0x338>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d025      	beq.n	8002f7e <HAL_GPIO_Init+0x232>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a54      	ldr	r2, [pc, #336]	@ (8003088 <HAL_GPIO_Init+0x33c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01f      	beq.n	8002f7a <HAL_GPIO_Init+0x22e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a53      	ldr	r2, [pc, #332]	@ (800308c <HAL_GPIO_Init+0x340>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d019      	beq.n	8002f76 <HAL_GPIO_Init+0x22a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a52      	ldr	r2, [pc, #328]	@ (8003090 <HAL_GPIO_Init+0x344>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_GPIO_Init+0x226>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a51      	ldr	r2, [pc, #324]	@ (8003094 <HAL_GPIO_Init+0x348>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00d      	beq.n	8002f6e <HAL_GPIO_Init+0x222>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a50      	ldr	r2, [pc, #320]	@ (8003098 <HAL_GPIO_Init+0x34c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <HAL_GPIO_Init+0x21e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800309c <HAL_GPIO_Init+0x350>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_GPIO_Init+0x21a>
 8002f62:	2309      	movs	r3, #9
 8002f64:	e012      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f66:	230a      	movs	r3, #10
 8002f68:	e010      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	e00e      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f6e:	2307      	movs	r3, #7
 8002f70:	e00c      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f72:	2306      	movs	r3, #6
 8002f74:	e00a      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e008      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e004      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x240>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	f002 0203 	and.w	r2, r2, #3
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	4093      	lsls	r3, r2
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f9c:	4935      	ldr	r1, [pc, #212]	@ (8003074 <HAL_GPIO_Init+0x328>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002faa:	4b3d      	ldr	r3, [pc, #244]	@ (80030a0 <HAL_GPIO_Init+0x354>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fce:	4a34      	ldr	r2, [pc, #208]	@ (80030a0 <HAL_GPIO_Init+0x354>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd4:	4b32      	ldr	r3, [pc, #200]	@ (80030a0 <HAL_GPIO_Init+0x354>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff8:	4a29      	ldr	r2, [pc, #164]	@ (80030a0 <HAL_GPIO_Init+0x354>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffe:	4b28      	ldr	r3, [pc, #160]	@ (80030a0 <HAL_GPIO_Init+0x354>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003022:	4a1f      	ldr	r2, [pc, #124]	@ (80030a0 <HAL_GPIO_Init+0x354>)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003028:	4b1d      	ldr	r3, [pc, #116]	@ (80030a0 <HAL_GPIO_Init+0x354>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800304c:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <HAL_GPIO_Init+0x354>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3301      	adds	r3, #1
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	f67f ae86 	bls.w	8002d6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40013800 	.word	0x40013800
 8003078:	40020000 	.word	0x40020000
 800307c:	40020400 	.word	0x40020400
 8003080:	40020800 	.word	0x40020800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40021000 	.word	0x40021000
 800308c:	40021400 	.word	0x40021400
 8003090:	40021800 	.word	0x40021800
 8003094:	40021c00 	.word	0x40021c00
 8003098:	40022000 	.word	0x40022000
 800309c:	40022400 	.word	0x40022400
 80030a0:	40013c00 	.word	0x40013c00

080030a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
 80030b0:	4613      	mov	r3, r2
 80030b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b4:	787b      	ldrb	r3, [r7, #1]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030c0:	e003      	b.n	80030ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	041a      	lsls	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	619a      	str	r2, [r3, #24]
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0d2      	b.n	8003290 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fa12 	bl	8001528 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69d9      	ldr	r1, [r3, #28]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b60      	ldr	r3, [pc, #384]	@ (8003298 <HAL_I2S_Init+0x1c0>)
 8003118:	400b      	ands	r3, r1
 800311a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2202      	movs	r2, #2
 8003122:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d067      	beq.n	80031fc <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003134:	2310      	movs	r3, #16
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	e001      	b.n	800313e <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b20      	cmp	r3, #32
 8003144:	d802      	bhi.n	800314c <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d102      	bne.n	800315a <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8003154:	4b51      	ldr	r3, [pc, #324]	@ (800329c <HAL_I2S_Init+0x1c4>)
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	e003      	b.n	8003162 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f968 	bl	8003430 <I2S_GetClockFreq>
 8003160:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316a:	d125      	bne.n	80031b8 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	fbb2 f2f3 	udiv	r2, r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	3305      	adds	r3, #5
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e01f      	b.n	80031d6 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	461a      	mov	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b2:	3305      	adds	r3, #5
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	e00e      	b.n	80031d6 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	3305      	adds	r3, #5
 80031d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4a31      	ldr	r2, [pc, #196]	@ (80032a0 <HAL_I2S_Init+0x1c8>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	08db      	lsrs	r3, r3, #3
 80031e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	085b      	lsrs	r3, r3, #1
 80031f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	61bb      	str	r3, [r7, #24]
 80031fa:	e003      	b.n	8003204 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031fc:	2302      	movs	r3, #2
 80031fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d902      	bls.n	8003210 <HAL_I2S_Init+0x138>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2bff      	cmp	r3, #255	@ 0xff
 800320e:	d907      	bls.n	8003220 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003214:	f043 0210 	orr.w	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e037      	b.n	8003290 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	ea42 0103 	orr.w	r1, r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	430a      	orrs	r2, r1
 8003232:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <HAL_I2S_Init+0x1c0>)
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6851      	ldr	r1, [r2, #4]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6892      	ldr	r2, [r2, #8]
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68d2      	ldr	r2, [r2, #12]
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6992      	ldr	r2, [r2, #24]
 8003252:	430a      	orrs	r2, r1
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b30      	cmp	r3, #48	@ 0x30
 8003266:	d003      	beq.n	8003270 <HAL_I2S_Init+0x198>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2bb0      	cmp	r3, #176	@ 0xb0
 800326e:	d107      	bne.n	8003280 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800327e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	fffff040 	.word	0xfffff040
 800329c:	00bb8000 	.word	0x00bb8000
 80032a0:	cccccccd 	.word	0xcccccccd

080032a4 <HAL_I2S_Receive>:
  * @note   In I2S Master Receiver mode, just after enabling the peripheral the clock will be generate
  *         in continuous way and as the I2S is not disabled at the end of the I2S transaction.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_I2S_Receive+0x1c>
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_I2S_Receive+0x20>
  {
    return  HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b0      	b.n	8003426 <HAL_I2S_Receive+0x182>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <HAL_I2S_Receive+0x30>
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
 80032d2:	e0a8      	b.n	8003426 <HAL_I2S_Receive+0x182>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_I2S_Receive+0x40>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e0a0      	b.n	8003426 <HAL_I2S_Receive+0x182>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  
  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2204      	movs	r2, #4
 80032f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->pRxBuffPtr = pData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	629a      	str	r2, [r3, #40]	@ 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d002      	beq.n	8003318 <HAL_I2S_Receive+0x74>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d10a      	bne.n	800332e <HAL_I2S_Receive+0x8a>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800332c:	e005      	b.n	800333a <HAL_I2S_Receive+0x96>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	88fa      	ldrh	r2, [r7, #6]
 8003332:	859a      	strh	r2, [r3, #44]	@ 0x2c
    hi2s->RxXferCount = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	88fa      	ldrh	r2, [r7, #6]
 8003338:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003348:	d007      	beq.n	800335a <HAL_I2S_Receive+0xb6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003358:	61da      	str	r2, [r3, #28]
  }

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003368:	d14f      	bne.n	800340a <HAL_I2S_Receive+0x166>
  {
    /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	69bb      	ldr	r3, [r7, #24]
  }

  /* Receive data */
  while (hi2s->RxXferCount > 0U)
 8003380:	e043      	b.n	800340a <HAL_I2S_Receive+0x166>
  {
    /* Wait until RXNE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_RXNE, SET, Timeout) != HAL_OK)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2201      	movs	r2, #1
 8003386:	2101      	movs	r1, #1
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f89d 	bl	80034c8 <I2S_WaitFlagStateUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00f      	beq.n	80033b4 <HAL_I2S_Receive+0x110>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	63da      	str	r2, [r3, #60]	@ 0x3c
      hi2s->State = HAL_I2S_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      __HAL_UNLOCK(hi2s);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e038      	b.n	8003426 <HAL_I2S_Receive+0x182>
    }

    (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	b292      	uxth	r2, r2
 80033c0:	801a      	strh	r2, [r3, #0]
    hi2s->pRxBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c6:	1c9a      	adds	r2, r3, #2
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	629a      	str	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Check if an overrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_OVR) == SET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e4:	2b40      	cmp	r3, #64	@ 0x40
 80033e6:	d110      	bne.n	800340a <HAL_I2S_Receive+0x166>
    {
      /* Clear overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	63da      	str	r2, [r3, #60]	@ 0x3c
  while (hi2s->RxXferCount > 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1b6      	bne.n	8003382 <HAL_I2S_Receive+0xde>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hi2s);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d02d      	beq.n	800349c <I2S_GetClockFreq+0x6c>
 8003440:	2b02      	cmp	r3, #2
 8003442:	d12e      	bne.n	80034a2 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003444:	4b1c      	ldr	r3, [pc, #112]	@ (80034b8 <I2S_GetClockFreq+0x88>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d108      	bne.n	8003462 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <I2S_GetClockFreq+0x88>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003458:	4a18      	ldr	r2, [pc, #96]	@ (80034bc <I2S_GetClockFreq+0x8c>)
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e007      	b.n	8003472 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003462:	4b15      	ldr	r3, [pc, #84]	@ (80034b8 <I2S_GetClockFreq+0x88>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800346a:	4a15      	ldr	r2, [pc, #84]	@ (80034c0 <I2S_GetClockFreq+0x90>)
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8003472:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <I2S_GetClockFreq+0x88>)
 8003474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003478:	0f1b      	lsrs	r3, r3, #28
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8003480:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <I2S_GetClockFreq+0x88>)
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	fb03 f202 	mul.w	r2, r3, r2
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	613b      	str	r3, [r7, #16]

      break;
 800349a:	e005      	b.n	80034a8 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 800349c:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <I2S_GetClockFreq+0x94>)
 800349e:	613b      	str	r3, [r7, #16]
      break;
 80034a0:	e002      	b.n	80034a8 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
      break;
 80034a6:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80034a8:	693b      	ldr	r3, [r7, #16]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	007a1200 	.word	0x007a1200
 80034c4:	00bb8000 	.word	0x00bb8000

080034c8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d8:	f7fe fe9a 	bl	8002210 <HAL_GetTick>
 80034dc:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80034de:	e018      	b.n	8003512 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d014      	beq.n	8003512 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80034e8:	f7fe fe92 	bl	8002210 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d902      	bls.n	80034fe <I2S_WaitFlagStateUntilTimeout+0x36>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e00f      	b.n	8003532 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d1d7      	bne.n	80034e0 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af02      	add	r7, sp, #8
 8003540:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e108      	b.n	800375e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fc2a 	bl	8001dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2203      	movs	r2, #3
 8003570:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800357a:	d102      	bne.n	8003582 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f002 fe6a 	bl	8006260 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7c1a      	ldrb	r2, [r3, #16]
 8003594:	f88d 2000 	strb.w	r2, [sp]
 8003598:	3304      	adds	r3, #4
 800359a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800359c:	f002 fe06 	bl	80061ac <USB_CoreInit>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0d5      	b.n	800375e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f002 fe62 	bl	8006282 <USB_SetCurrentMode>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0c6      	b.n	800375e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
 80035d4:	e04a      	b.n	800366c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3315      	adds	r3, #21
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035ea:	7bfa      	ldrb	r2, [r7, #15]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3314      	adds	r3, #20
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	b298      	uxth	r0, r3
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	332e      	adds	r3, #46	@ 0x2e
 8003612:	4602      	mov	r2, r0
 8003614:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	3318      	adds	r3, #24
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	331c      	adds	r3, #28
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3320      	adds	r3, #32
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3324      	adds	r3, #36	@ 0x24
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	3301      	adds	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	791b      	ldrb	r3, [r3, #4]
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	429a      	cmp	r2, r3
 8003674:	d3af      	bcc.n	80035d6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e044      	b.n	8003706 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ea:	7bfa      	ldrb	r2, [r7, #15]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	3301      	adds	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	791b      	ldrb	r3, [r3, #4]
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	429a      	cmp	r2, r3
 800370e:	d3b5      	bcc.n	800367c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7c1a      	ldrb	r2, [r3, #16]
 8003718:	f88d 2000 	strb.w	r2, [sp]
 800371c:	3304      	adds	r3, #4
 800371e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003720:	f002 fdfc 	bl	800631c <USB_DevInit>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e013      	b.n	800375e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7b1b      	ldrb	r3, [r3, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f80b 	bl	8003768 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f002 ffb7 	bl	80066ca <USB_DevDisconnect>

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003796:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <HAL_PCDEx_ActivateLPM+0x44>)
 8003798:	4313      	orrs	r3, r2
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	10000003 	.word	0x10000003

080037b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40007000 	.word	0x40007000

080037d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	4b23      	ldr	r3, [pc, #140]	@ (8003868 <HAL_PWREx_EnableOverDrive+0x98>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	4a22      	ldr	r2, [pc, #136]	@ (8003868 <HAL_PWREx_EnableOverDrive+0x98>)
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e6:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_PWREx_EnableOverDrive+0x98>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037f2:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	@ (800386c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037fe:	f7fe fd07 	bl	8002210 <HAL_GetTick>
 8003802:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003804:	e009      	b.n	800381a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003806:	f7fe fd03 	bl	8002210 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003814:	d901      	bls.n	800381a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e022      	b.n	8003860 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800381a:	4b14      	ldr	r3, [pc, #80]	@ (800386c <HAL_PWREx_EnableOverDrive+0x9c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003826:	d1ee      	bne.n	8003806 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003828:	4b10      	ldr	r3, [pc, #64]	@ (800386c <HAL_PWREx_EnableOverDrive+0x9c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a0f      	ldr	r2, [pc, #60]	@ (800386c <HAL_PWREx_EnableOverDrive+0x9c>)
 800382e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003832:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003834:	f7fe fcec 	bl	8002210 <HAL_GetTick>
 8003838:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800383a:	e009      	b.n	8003850 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800383c:	f7fe fce8 	bl	8002210 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800384a:	d901      	bls.n	8003850 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e007      	b.n	8003860 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003850:	4b06      	ldr	r3, [pc, #24]	@ (800386c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800385c:	d1ee      	bne.n	800383c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	40007000 	.word	0x40007000

08003870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003878:	2300      	movs	r3, #0
 800387a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e29b      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8087 	beq.w	80039a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003894:	4b96      	ldr	r3, [pc, #600]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b04      	cmp	r3, #4
 800389e:	d00c      	beq.n	80038ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a0:	4b93      	ldr	r3, [pc, #588]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d112      	bne.n	80038d2 <HAL_RCC_OscConfig+0x62>
 80038ac:	4b90      	ldr	r3, [pc, #576]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038b8:	d10b      	bne.n	80038d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ba:	4b8d      	ldr	r3, [pc, #564]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d06c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x130>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d168      	bne.n	80039a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e275      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x7a>
 80038dc:	4b84      	ldr	r3, [pc, #528]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a83      	ldr	r2, [pc, #524]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e02e      	b.n	8003948 <HAL_RCC_OscConfig+0xd8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x9c>
 80038f2:	4b7f      	ldr	r3, [pc, #508]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7e      	ldr	r2, [pc, #504]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b7c      	ldr	r3, [pc, #496]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7b      	ldr	r2, [pc, #492]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003904:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e01d      	b.n	8003948 <HAL_RCC_OscConfig+0xd8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0xc0>
 8003916:	4b76      	ldr	r3, [pc, #472]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a75      	ldr	r2, [pc, #468]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 800391c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b73      	ldr	r3, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a72      	ldr	r2, [pc, #456]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0xd8>
 8003930:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6e      	ldr	r2, [pc, #440]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b6c      	ldr	r3, [pc, #432]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6b      	ldr	r2, [pc, #428]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fe fc5e 	bl	8002210 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe fc5a 	bl	8002210 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e229      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b61      	ldr	r3, [pc, #388]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0xe8>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fc4a 	bl	8002210 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe fc46 	bl	8002210 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e215      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	4b57      	ldr	r3, [pc, #348]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x110>
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d069      	beq.n	8003a82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ae:	4b50      	ldr	r3, [pc, #320]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ba:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d11c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x190>
 80039c6:	4b4a      	ldr	r3, [pc, #296]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d116      	bne.n	8003a00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d2:	4b47      	ldr	r3, [pc, #284]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x17a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e1e9      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b41      	ldr	r3, [pc, #260]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	493d      	ldr	r1, [pc, #244]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	e040      	b.n	8003a82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d023      	beq.n	8003a50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a08:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a38      	ldr	r2, [pc, #224]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe fbfc 	bl	8002210 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1c:	f7fe fbf8 	bl	8002210 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1c7      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2e:	4b30      	ldr	r3, [pc, #192]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4929      	ldr	r1, [pc, #164]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]
 8003a4e:	e018      	b.n	8003a82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a50:	4b27      	ldr	r3, [pc, #156]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a26      	ldr	r2, [pc, #152]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fbd8 	bl	8002210 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fe fbd4 	bl	8002210 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1a3      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	4b1e      	ldr	r3, [pc, #120]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d038      	beq.n	8003b00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d019      	beq.n	8003aca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9a:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fbb5 	bl	8002210 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aaa:	f7fe fbb1 	bl	8002210 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e180      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x23a>
 8003ac8:	e01a      	b.n	8003b00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aca:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ace:	4a08      	ldr	r2, [pc, #32]	@ (8003af0 <HAL_RCC_OscConfig+0x280>)
 8003ad0:	f023 0301 	bic.w	r3, r3, #1
 8003ad4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fe fb9b 	bl	8002210 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ade:	f7fe fb97 	bl	8002210 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d903      	bls.n	8003af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e166      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
 8003af0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	4b92      	ldr	r3, [pc, #584]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ee      	bne.n	8003ade <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80a4 	beq.w	8003c56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0e:	4b8c      	ldr	r3, [pc, #560]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	4b89      	ldr	r3, [pc, #548]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	4a88      	ldr	r2, [pc, #544]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b26:	4b86      	ldr	r3, [pc, #536]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b36:	4b83      	ldr	r3, [pc, #524]	@ (8003d44 <HAL_RCC_OscConfig+0x4d4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d118      	bne.n	8003b74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b42:	4b80      	ldr	r3, [pc, #512]	@ (8003d44 <HAL_RCC_OscConfig+0x4d4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a7f      	ldr	r2, [pc, #508]	@ (8003d44 <HAL_RCC_OscConfig+0x4d4>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4e:	f7fe fb5f 	bl	8002210 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b56:	f7fe fb5b 	bl	8002210 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	@ 0x64
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e12a      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b68:	4b76      	ldr	r3, [pc, #472]	@ (8003d44 <HAL_RCC_OscConfig+0x4d4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_OscConfig+0x31a>
 8003b7c:	4b70      	ldr	r3, [pc, #448]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b80:	4a6f      	ldr	r2, [pc, #444]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b88:	e02d      	b.n	8003be6 <HAL_RCC_OscConfig+0x376>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10c      	bne.n	8003bac <HAL_RCC_OscConfig+0x33c>
 8003b92:	4b6b      	ldr	r3, [pc, #428]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	4a6a      	ldr	r2, [pc, #424]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003b98:	f023 0301 	bic.w	r3, r3, #1
 8003b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b9e:	4b68      	ldr	r3, [pc, #416]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	4a67      	ldr	r2, [pc, #412]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003ba4:	f023 0304 	bic.w	r3, r3, #4
 8003ba8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003baa:	e01c      	b.n	8003be6 <HAL_RCC_OscConfig+0x376>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCC_OscConfig+0x35e>
 8003bb4:	4b62      	ldr	r3, [pc, #392]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	4a61      	ldr	r2, [pc, #388]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc0:	4b5f      	ldr	r3, [pc, #380]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4a5e      	ldr	r2, [pc, #376]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCC_OscConfig+0x376>
 8003bce:	4b5c      	ldr	r3, [pc, #368]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bda:	4b59      	ldr	r3, [pc, #356]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bde:	4a58      	ldr	r2, [pc, #352]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d015      	beq.n	8003c1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7fe fb0f 	bl	8002210 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7fe fb0b 	bl	8002210 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0d8      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ee      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x386>
 8003c18:	e014      	b.n	8003c44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fe faf9 	bl	8002210 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fe faf5 	bl	8002210 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0c2      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	4b41      	ldr	r3, [pc, #260]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ee      	bne.n	8003c22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d105      	bne.n	8003c56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80ae 	beq.w	8003dbc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c60:	4b37      	ldr	r3, [pc, #220]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d06d      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d14b      	bne.n	8003d0c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c74:	4b32      	ldr	r3, [pc, #200]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a31      	ldr	r2, [pc, #196]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003c7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe fac6 	bl	8002210 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fac2 	bl	8002210 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e091      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	071b      	lsls	r3, r3, #28
 8003cd2:	491b      	ldr	r1, [pc, #108]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd8:	4b19      	ldr	r3, [pc, #100]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fa94 	bl	8002210 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe fa90 	bl	8002210 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e05f      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x47c>
 8003d0a:	e057      	b.n	8003dbc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0b      	ldr	r2, [pc, #44]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fa7a 	bl	8002210 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe fa76 	bl	8002210 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e045      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4b0>
 8003d3e:	e03d      	b.n	8003dbc <HAL_RCC_OscConfig+0x54c>
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d48:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <HAL_RCC_OscConfig+0x558>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d030      	beq.n	8003db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d129      	bne.n	8003db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d122      	bne.n	8003db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d119      	bne.n	8003db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	085b      	lsrs	r3, r3, #1
 8003d90:	3b01      	subs	r3, #1
 8003d92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d10f      	bne.n	8003db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800

08003dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0d0      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d910      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b67      	ldr	r3, [pc, #412]	@ (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 020f 	bic.w	r2, r3, #15
 8003dfa:	4965      	ldr	r1, [pc, #404]	@ (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b63      	ldr	r3, [pc, #396]	@ (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b8      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e2c:	4b59      	ldr	r3, [pc, #356]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a58      	ldr	r2, [pc, #352]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e44:	4b53      	ldr	r3, [pc, #332]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a52      	ldr	r2, [pc, #328]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b50      	ldr	r3, [pc, #320]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	494d      	ldr	r1, [pc, #308]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d040      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b47      	ldr	r3, [pc, #284]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d115      	bne.n	8003eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	4b41      	ldr	r3, [pc, #260]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e073      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06b      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eae:	4b39      	ldr	r3, [pc, #228]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4936      	ldr	r1, [pc, #216]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fe f9a6 	bl	8002210 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fe f9a2 	bl	8002210 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e053      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 020c 	and.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1eb      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b27      	ldr	r3, [pc, #156]	@ (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d210      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b24      	ldr	r3, [pc, #144]	@ (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 020f 	bic.w	r2, r3, #15
 8003f06:	4922      	ldr	r1, [pc, #136]	@ (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e032      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b19      	ldr	r3, [pc, #100]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4916      	ldr	r1, [pc, #88]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4a:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	490e      	ldr	r1, [pc, #56]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f5e:	f000 f821 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b0b      	ldr	r3, [pc, #44]	@ (8003f94 <HAL_RCC_ClockConfig+0x1c8>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	490a      	ldr	r1, [pc, #40]	@ (8003f98 <HAL_RCC_ClockConfig+0x1cc>)
 8003f70:	5ccb      	ldrb	r3, [r1, r3]
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	4a09      	ldr	r2, [pc, #36]	@ (8003f9c <HAL_RCC_ClockConfig+0x1d0>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <HAL_RCC_ClockConfig+0x1d4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd fd26 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023c00 	.word	0x40023c00
 8003f94:	40023800 	.word	0x40023800
 8003f98:	0800a7ac 	.word	0x0800a7ac
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	20000004 	.word	0x20000004

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b094      	sub	sp, #80	@ 0x50
 8003faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fbc:	4b79      	ldr	r3, [pc, #484]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	f200 80e1 	bhi.w	8004190 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d003      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x3a>
 8003fd6:	e0db      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b73      	ldr	r3, [pc, #460]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fdc:	e0db      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fde:	4b73      	ldr	r3, [pc, #460]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x208>)
 8003fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fe2:	e0d8      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003fee:	4b6d      	ldr	r3, [pc, #436]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d063      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	2200      	movs	r2, #0
 8004002:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004004:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400c:	633b      	str	r3, [r7, #48]	@ 0x30
 800400e:	2300      	movs	r3, #0
 8004010:	637b      	str	r3, [r7, #52]	@ 0x34
 8004012:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004016:	4622      	mov	r2, r4
 8004018:	462b      	mov	r3, r5
 800401a:	f04f 0000 	mov.w	r0, #0
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	0159      	lsls	r1, r3, #5
 8004024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004028:	0150      	lsls	r0, r2, #5
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4621      	mov	r1, r4
 8004030:	1a51      	subs	r1, r2, r1
 8004032:	6139      	str	r1, [r7, #16]
 8004034:	4629      	mov	r1, r5
 8004036:	eb63 0301 	sbc.w	r3, r3, r1
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004048:	4659      	mov	r1, fp
 800404a:	018b      	lsls	r3, r1, #6
 800404c:	4651      	mov	r1, sl
 800404e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004052:	4651      	mov	r1, sl
 8004054:	018a      	lsls	r2, r1, #6
 8004056:	4651      	mov	r1, sl
 8004058:	ebb2 0801 	subs.w	r8, r2, r1
 800405c:	4659      	mov	r1, fp
 800405e:	eb63 0901 	sbc.w	r9, r3, r1
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800406e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004076:	4690      	mov	r8, r2
 8004078:	4699      	mov	r9, r3
 800407a:	4623      	mov	r3, r4
 800407c:	eb18 0303 	adds.w	r3, r8, r3
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	462b      	mov	r3, r5
 8004084:	eb49 0303 	adc.w	r3, r9, r3
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004096:	4629      	mov	r1, r5
 8004098:	024b      	lsls	r3, r1, #9
 800409a:	4621      	mov	r1, r4
 800409c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040a0:	4621      	mov	r1, r4
 80040a2:	024a      	lsls	r2, r1, #9
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040aa:	2200      	movs	r2, #0
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040b4:	f7fc f914 	bl	80002e0 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4613      	mov	r3, r2
 80040be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c0:	e058      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c2:	4b38      	ldr	r3, [pc, #224]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	099b      	lsrs	r3, r3, #6
 80040c8:	2200      	movs	r2, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	4611      	mov	r1, r2
 80040ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	2300      	movs	r3, #0
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	f04f 0000 	mov.w	r0, #0
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	0159      	lsls	r1, r3, #5
 80040ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ee:	0150      	lsls	r0, r2, #5
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4641      	mov	r1, r8
 80040f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040fa:	4649      	mov	r1, r9
 80040fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800410c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004110:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004114:	ebb2 040a 	subs.w	r4, r2, sl
 8004118:	eb63 050b 	sbc.w	r5, r3, fp
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	00eb      	lsls	r3, r5, #3
 8004126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412a:	00e2      	lsls	r2, r4, #3
 800412c:	4614      	mov	r4, r2
 800412e:	461d      	mov	r5, r3
 8004130:	4643      	mov	r3, r8
 8004132:	18e3      	adds	r3, r4, r3
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	464b      	mov	r3, r9
 8004138:	eb45 0303 	adc.w	r3, r5, r3
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800414a:	4629      	mov	r1, r5
 800414c:	028b      	lsls	r3, r1, #10
 800414e:	4621      	mov	r1, r4
 8004150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004154:	4621      	mov	r1, r4
 8004156:	028a      	lsls	r2, r1, #10
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800415e:	2200      	movs	r2, #0
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	61fa      	str	r2, [r7, #28]
 8004164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004168:	f7fc f8ba 	bl	80002e0 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4613      	mov	r3, r2
 8004172:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	3301      	adds	r3, #1
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004184:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800418e:	e002      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004192:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004198:	4618      	mov	r0, r3
 800419a:	3750      	adds	r7, #80	@ 0x50
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	007a1200 	.word	0x007a1200

080041b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000000 	.word	0x20000000

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041cc:	f7ff fff0 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	0a9b      	lsrs	r3, r3, #10
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4903      	ldr	r1, [pc, #12]	@ (80041ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	0800a7bc 	.word	0x0800a7bc

080041f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041f4:	f7ff ffdc 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	0b5b      	lsrs	r3, r3, #13
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	4903      	ldr	r1, [pc, #12]	@ (8004214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800420c:	4618      	mov	r0, r3
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40023800 	.word	0x40023800
 8004214:	0800a7bc 	.word	0x0800a7bc

08004218 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	220f      	movs	r2, #15
 8004226:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004228:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0203 	and.w	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004234:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800424c:	4b09      	ldr	r3, [pc, #36]	@ (8004274 <HAL_RCC_GetClockConfig+0x5c>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	08db      	lsrs	r3, r3, #3
 8004252:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800425a:	4b07      	ldr	r3, [pc, #28]	@ (8004278 <HAL_RCC_GetClockConfig+0x60>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	601a      	str	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	40023c00 	.word	0x40023c00

0800427c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042a4:	4b69      	ldr	r3, [pc, #420]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a68      	ldr	r2, [pc, #416]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	4b66      	ldr	r3, [pc, #408]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b8:	4964      	ldr	r1, [pc, #400]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d6:	4b5d      	ldr	r3, [pc, #372]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	4959      	ldr	r1, [pc, #356]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042f4:	d101      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d017      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004312:	4b4e      	ldr	r3, [pc, #312]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004318:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004320:	494a      	ldr	r1, [pc, #296]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004330:	d101      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800433e:	2301      	movs	r3, #1
 8004340:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800434e:	2301      	movs	r3, #1
 8004350:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 808b 	beq.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004360:	4b3a      	ldr	r3, [pc, #232]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	4a39      	ldr	r2, [pc, #228]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800436a:	6413      	str	r3, [r2, #64]	@ 0x40
 800436c:	4b37      	ldr	r3, [pc, #220]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004378:	4b35      	ldr	r3, [pc, #212]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a34      	ldr	r2, [pc, #208]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004384:	f7fd ff44 	bl	8002210 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fd ff40 	bl	8002210 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e38f      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800439e:	4b2c      	ldr	r3, [pc, #176]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043aa:	4b28      	ldr	r3, [pc, #160]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d035      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d02e      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043d2:	4b1e      	ldr	r3, [pc, #120]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d6:	4a1d      	ldr	r2, [pc, #116]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043de:	4b1b      	ldr	r3, [pc, #108]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e2:	4a1a      	ldr	r2, [pc, #104]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043ea:	4a18      	ldr	r2, [pc, #96]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043f0:	4b16      	ldr	r3, [pc, #88]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d114      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd ff08 	bl	8002210 <HAL_GetTick>
 8004400:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd ff04 	bl	8002210 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e351      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ee      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004432:	d111      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004434:	4b05      	ldr	r3, [pc, #20]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004440:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004442:	400b      	ands	r3, r1
 8004444:	4901      	ldr	r1, [pc, #4]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]
 800444a:	e00b      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000
 8004454:	0ffffcff 	.word	0x0ffffcff
 8004458:	4bac      	ldr	r3, [pc, #688]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	4aab      	ldr	r2, [pc, #684]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800445e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004462:	6093      	str	r3, [r2, #8]
 8004464:	4ba9      	ldr	r3, [pc, #676]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004466:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	49a6      	ldr	r1, [pc, #664]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004472:	4313      	orrs	r3, r2
 8004474:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	d010      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004482:	4ba2      	ldr	r3, [pc, #648]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004488:	4aa0      	ldr	r2, [pc, #640]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800448e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004492:	4b9e      	ldr	r3, [pc, #632]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004494:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	499b      	ldr	r1, [pc, #620]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044b0:	4b96      	ldr	r3, [pc, #600]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044be:	4993      	ldr	r1, [pc, #588]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044d2:	4b8e      	ldr	r3, [pc, #568]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044e0:	498a      	ldr	r1, [pc, #552]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044f4:	4b85      	ldr	r3, [pc, #532]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004502:	4982      	ldr	r1, [pc, #520]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004516:	4b7d      	ldr	r3, [pc, #500]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	4979      	ldr	r1, [pc, #484]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004538:	4b74      	ldr	r3, [pc, #464]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004546:	4971      	ldr	r1, [pc, #452]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800455a:	4b6c      	ldr	r3, [pc, #432]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004560:	f023 020c 	bic.w	r2, r3, #12
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004568:	4968      	ldr	r1, [pc, #416]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800457c:	4b63      	ldr	r3, [pc, #396]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004582:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458a:	4960      	ldr	r1, [pc, #384]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800459e:	4b5b      	ldr	r3, [pc, #364]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ac:	4957      	ldr	r1, [pc, #348]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045c0:	4b52      	ldr	r3, [pc, #328]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	494f      	ldr	r1, [pc, #316]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045e2:	4b4a      	ldr	r3, [pc, #296]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f0:	4946      	ldr	r1, [pc, #280]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004604:	4b41      	ldr	r3, [pc, #260]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004612:	493e      	ldr	r1, [pc, #248]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004626:	4b39      	ldr	r3, [pc, #228]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004634:	4935      	ldr	r1, [pc, #212]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004648:	4b30      	ldr	r3, [pc, #192]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004656:	492d      	ldr	r1, [pc, #180]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800466a:	4b28      	ldr	r3, [pc, #160]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004670:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004678:	4924      	ldr	r1, [pc, #144]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004688:	d101      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800469a:	2301      	movs	r3, #1
 800469c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046aa:	4b18      	ldr	r3, [pc, #96]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b8:	4914      	ldr	r1, [pc, #80]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046dc:	490b      	ldr	r1, [pc, #44]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00f      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046f0:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004700:	4902      	ldr	r1, [pc, #8]	@ (800470c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004708:	e002      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800471c:	4b8a      	ldr	r3, [pc, #552]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004722:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472c:	4986      	ldr	r1, [pc, #536]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004740:	4b81      	ldr	r3, [pc, #516]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004746:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004750:	497d      	ldr	r1, [pc, #500]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d006      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80d6 	beq.w	8004918 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800476c:	4b76      	ldr	r3, [pc, #472]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a75      	ldr	r2, [pc, #468]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004772:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004778:	f7fd fd4a 	bl	8002210 <HAL_GetTick>
 800477c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004780:	f7fd fd46 	bl	8002210 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	@ 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e195      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004792:	4b6d      	ldr	r3, [pc, #436]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d021      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d11d      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047b2:	4b65      	ldr	r3, [pc, #404]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b8:	0c1b      	lsrs	r3, r3, #16
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047c0:	4b61      	ldr	r3, [pc, #388]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047c6:	0e1b      	lsrs	r3, r3, #24
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	019a      	lsls	r2, r3, #6
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	041b      	lsls	r3, r3, #16
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	071b      	lsls	r3, r3, #28
 80047e6:	4958      	ldr	r1, [pc, #352]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02e      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004818:	d129      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800481a:	4b4b      	ldr	r3, [pc, #300]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004820:	0c1b      	lsrs	r3, r3, #16
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004828:	4b47      	ldr	r3, [pc, #284]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800482e:	0f1b      	lsrs	r3, r3, #28
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	019a      	lsls	r2, r3, #6
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	431a      	orrs	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	071b      	lsls	r3, r3, #28
 800484e:	493e      	ldr	r1, [pc, #248]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004856:	4b3c      	ldr	r3, [pc, #240]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800485c:	f023 021f 	bic.w	r2, r3, #31
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	3b01      	subs	r3, #1
 8004866:	4938      	ldr	r1, [pc, #224]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01d      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800487a:	4b33      	ldr	r3, [pc, #204]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004880:	0e1b      	lsrs	r3, r3, #24
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004888:	4b2f      	ldr	r3, [pc, #188]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800488e:	0f1b      	lsrs	r3, r3, #28
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	019a      	lsls	r2, r3, #6
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	041b      	lsls	r3, r3, #16
 80048a2:	431a      	orrs	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	071b      	lsls	r3, r3, #28
 80048ae:	4926      	ldr	r1, [pc, #152]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	019a      	lsls	r2, r3, #6
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	071b      	lsls	r3, r3, #28
 80048de:	491a      	ldr	r1, [pc, #104]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048e6:	4b18      	ldr	r3, [pc, #96]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f2:	f7fd fc8d 	bl	8002210 <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048fa:	f7fd fc89 	bl	8002210 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b64      	cmp	r3, #100	@ 0x64
 8004906:	d901      	bls.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e0d8      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b01      	cmp	r3, #1
 800491c:	f040 80ce 	bne.w	8004abc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004920:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a08      	ldr	r2, [pc, #32]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800492a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492c:	f7fd fc70 	bl	8002210 <HAL_GetTick>
 8004930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004932:	e00b      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004934:	f7fd fc6c 	bl	8002210 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	@ 0x64
 8004940:	d904      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e0bb      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800494c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004958:	d0ec      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02e      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d12a      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004982:	4b51      	ldr	r3, [pc, #324]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004990:	4b4d      	ldr	r3, [pc, #308]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004996:	0f1b      	lsrs	r3, r3, #28
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	019a      	lsls	r2, r3, #6
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	071b      	lsls	r3, r3, #28
 80049b6:	4944      	ldr	r1, [pc, #272]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049be:	4b42      	ldr	r3, [pc, #264]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049cc:	3b01      	subs	r3, #1
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	493d      	ldr	r1, [pc, #244]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d022      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ec:	d11d      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049ee:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f4:	0e1b      	lsrs	r3, r3, #24
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049fc:	4b32      	ldr	r3, [pc, #200]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a02:	0f1b      	lsrs	r3, r3, #28
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	019a      	lsls	r2, r3, #6
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	071b      	lsls	r3, r3, #28
 8004a22:	4929      	ldr	r1, [pc, #164]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d028      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a36:	4b24      	ldr	r3, [pc, #144]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3c:	0e1b      	lsrs	r3, r3, #24
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a44:	4b20      	ldr	r3, [pc, #128]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	019a      	lsls	r2, r3, #6
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	061b      	lsls	r3, r3, #24
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	071b      	lsls	r3, r3, #28
 8004a6a:	4917      	ldr	r1, [pc, #92]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a72:	4b15      	ldr	r3, [pc, #84]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	4911      	ldr	r1, [pc, #68]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fd fbbc 	bl	8002210 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a9c:	f7fd fbb8 	bl	8002210 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	@ 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e007      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aae:	4b06      	ldr	r3, [pc, #24]	@ (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aba:	d1ef      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40023800 	.word	0x40023800

08004acc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e01c      	b.n	8004b18 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	795b      	ldrb	r3, [r3, #5]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d105      	bne.n	8004af4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fc fe90 	bl	8001814 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0204 	orr.w	r2, r2, #4
 8004b08:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e09d      	b.n	8004c6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b42:	d009      	beq.n	8004b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	61da      	str	r2, [r3, #28]
 8004b4a:	e005      	b.n	8004b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc fec0 	bl	80018f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004b98:	d902      	bls.n	8004ba0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	e002      	b.n	8004ba6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004bae:	d007      	beq.n	8004bc0 <HAL_SPI_Init+0xa0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c02:	ea42 0103 	orr.w	r1, r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	0c1b      	lsrs	r3, r3, #16
 8004c1c:	f003 0204 	and.w	r2, r3, #4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c3c:	ea42 0103 	orr.w	r1, r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b088      	sub	sp, #32
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c86:	f7fd fac3 	bl	8002210 <HAL_GetTick>
 8004c8a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d001      	beq.n	8004ca0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e15c      	b.n	8004f5a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_Transmit+0x36>
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e154      	b.n	8004f5a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_SPI_Transmit+0x48>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e14d      	b.n	8004f5a <HAL_SPI_Transmit+0x2e4>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d10:	d10f      	bne.n	8004d32 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b40      	cmp	r3, #64	@ 0x40
 8004d3e:	d007      	beq.n	8004d50 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d58:	d952      	bls.n	8004e00 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_SPI_Transmit+0xf2>
 8004d62:	8b7b      	ldrh	r3, [r7, #26]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d145      	bne.n	8004df4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	1c9a      	adds	r2, r3, #2
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d8c:	e032      	b.n	8004df4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d112      	bne.n	8004dc2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	881a      	ldrh	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	1c9a      	adds	r2, r3, #2
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004dc0:	e018      	b.n	8004df4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc2:	f7fd fa25 	bl	8002210 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d803      	bhi.n	8004dda <HAL_SPI_Transmit+0x164>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d102      	bne.n	8004de0 <HAL_SPI_Transmit+0x16a>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e0b2      	b.n	8004f5a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1c7      	bne.n	8004d8e <HAL_SPI_Transmit+0x118>
 8004dfe:	e083      	b.n	8004f08 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_SPI_Transmit+0x198>
 8004e08:	8b7b      	ldrh	r3, [r7, #26]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d177      	bne.n	8004efe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d912      	bls.n	8004e3e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	881a      	ldrh	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b02      	subs	r3, #2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004e3c:	e05f      	b.n	8004efe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e64:	e04b      	b.n	8004efe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d12b      	bne.n	8004ecc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d912      	bls.n	8004ea4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e82:	881a      	ldrh	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b02      	subs	r3, #2
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ea2:	e02c      	b.n	8004efe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	330c      	adds	r3, #12
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004eca:	e018      	b.n	8004efe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ecc:	f7fd f9a0 	bl	8002210 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d803      	bhi.n	8004ee4 <HAL_SPI_Transmit+0x26e>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d102      	bne.n	8004eea <HAL_SPI_Transmit+0x274>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d109      	bne.n	8004efe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e02d      	b.n	8004f5a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1ae      	bne.n	8004e66 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f947 	bl	80051a0 <SPI_EndRxTxTransaction>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
  }
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f74:	f7fd f94c 	bl	8002210 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	4413      	add	r3, r2
 8004f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f84:	f7fd f944 	bl	8002210 <HAL_GetTick>
 8004f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f8a:	4b39      	ldr	r3, [pc, #228]	@ (8005070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	015b      	lsls	r3, r3, #5
 8004f90:	0d1b      	lsrs	r3, r3, #20
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9a:	e055      	b.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d051      	beq.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fa4:	f7fd f934 	bl	8002210 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d902      	bls.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d13d      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fd2:	d111      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fdc:	d004      	beq.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fe6:	d107      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005000:	d10f      	bne.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e018      	b.n	8005068 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e002      	b.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	3b01      	subs	r3, #1
 8005046:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	429a      	cmp	r2, r3
 8005064:	d19a      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3720      	adds	r7, #32
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20000000 	.word	0x20000000

08005074 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	@ 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005086:	f7fd f8c3 	bl	8002210 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	4413      	add	r3, r2
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005096:	f7fd f8bb 	bl	8002210 <HAL_GetTick>
 800509a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050a4:	4b3d      	ldr	r3, [pc, #244]	@ (800519c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	00da      	lsls	r2, r3, #3
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	0d1b      	lsrs	r3, r3, #20
 80050b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050bc:	e061      	b.n	8005182 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80050c4:	d107      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d104      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d051      	beq.n	8005182 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050de:	f7fd f897 	bl	8002210 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d902      	bls.n	80050f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d13d      	bne.n	8005170 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005102:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510c:	d111      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005116:	d004      	beq.n	8005122 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005120:	d107      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005130:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800513a:	d10f      	bne.n	800515c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800515a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e011      	b.n	8005194 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
 800517a:	e002      	b.n	8005182 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	3b01      	subs	r3, #1
 8005180:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4013      	ands	r3, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d195      	bne.n	80050be <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3728      	adds	r7, #40	@ 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20000000 	.word	0x20000000

080051a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff5b 	bl	8005074 <SPI_WaitFifoStateUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e046      	b.n	8005262 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051d4:	4b25      	ldr	r3, [pc, #148]	@ (800526c <SPI_EndRxTxTransaction+0xcc>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a25      	ldr	r2, [pc, #148]	@ (8005270 <SPI_EndRxTxTransaction+0xd0>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	0d5b      	lsrs	r3, r3, #21
 80051e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051e4:	fb02 f303 	mul.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051f2:	d112      	bne.n	800521a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	2180      	movs	r1, #128	@ 0x80
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f7ff feb0 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d016      	beq.n	8005238 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e023      	b.n	8005262 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3b01      	subs	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005230:	2b80      	cmp	r3, #128	@ 0x80
 8005232:	d0f2      	beq.n	800521a <SPI_EndRxTxTransaction+0x7a>
 8005234:	e000      	b.n	8005238 <SPI_EndRxTxTransaction+0x98>
        break;
 8005236:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7ff ff15 	bl	8005074 <SPI_WaitFifoStateUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005254:	f043 0220 	orr.w	r2, r3, #32
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e000      	b.n	8005262 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000000 	.word	0x20000000
 8005270:	165e9f81 	.word	0x165e9f81

08005274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e049      	b.n	800531a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f841 	bl	8005322 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f000 f9e8 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d001      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e054      	b.n	80053fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a26      	ldr	r2, [pc, #152]	@ (8005408 <HAL_TIM_Base_Start_IT+0xd0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d022      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537a:	d01d      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a22      	ldr	r2, [pc, #136]	@ (800540c <HAL_TIM_Base_Start_IT+0xd4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d018      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a21      	ldr	r2, [pc, #132]	@ (8005410 <HAL_TIM_Base_Start_IT+0xd8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1f      	ldr	r2, [pc, #124]	@ (8005414 <HAL_TIM_Base_Start_IT+0xdc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00e      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1e      	ldr	r2, [pc, #120]	@ (8005418 <HAL_TIM_Base_Start_IT+0xe0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	@ (800541c <HAL_TIM_Base_Start_IT+0xe4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_TIM_Base_Start_IT+0x80>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005420 <HAL_TIM_Base_Start_IT+0xe8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d115      	bne.n	80053e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	4b19      	ldr	r3, [pc, #100]	@ (8005424 <HAL_TIM_Base_Start_IT+0xec>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b06      	cmp	r3, #6
 80053c8:	d015      	beq.n	80053f6 <HAL_TIM_Base_Start_IT+0xbe>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d0:	d011      	beq.n	80053f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0201 	orr.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	e008      	b.n	80053f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e000      	b.n	80053f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40010400 	.word	0x40010400
 800541c:	40014000 	.word	0x40014000
 8005420:	40001800 	.word	0x40001800
 8005424:	00010007 	.word	0x00010007

08005428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d020      	beq.n	800548c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0202 	mvn.w	r2, #2
 800545c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f8e9 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f8db 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f8ec 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d020      	beq.n	80054d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d01b      	beq.n	80054d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0204 	mvn.w	r2, #4
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f8c3 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f8b5 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f8c6 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01b      	beq.n	8005524 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0208 	mvn.w	r2, #8
 80054f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2204      	movs	r2, #4
 80054fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f89d 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f88f 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f8a0 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f003 0310 	and.w	r3, r3, #16
 800552a:	2b00      	cmp	r3, #0
 800552c:	d020      	beq.n	8005570 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01b      	beq.n	8005570 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0210 	mvn.w	r2, #16
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2208      	movs	r2, #8
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f877 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f869 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f87a 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0201 	mvn.w	r2, #1
 800558c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc f914 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f913 	bl	80057e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00c      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f90b 	bl	80057fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f834 	bl	8005672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00c      	beq.n	800562e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f06f 0220 	mvn.w	r2, #32
 8005626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8d3 	bl	80057d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a43      	ldr	r2, [pc, #268]	@ (80057a8 <TIM_Base_SetConfig+0x120>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a6:	d00f      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a40      	ldr	r2, [pc, #256]	@ (80057ac <TIM_Base_SetConfig+0x124>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3f      	ldr	r2, [pc, #252]	@ (80057b0 <TIM_Base_SetConfig+0x128>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3e      	ldr	r2, [pc, #248]	@ (80057b4 <TIM_Base_SetConfig+0x12c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3d      	ldr	r2, [pc, #244]	@ (80057b8 <TIM_Base_SetConfig+0x130>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d108      	bne.n	80056da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a32      	ldr	r2, [pc, #200]	@ (80057a8 <TIM_Base_SetConfig+0x120>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d02b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e8:	d027      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2f      	ldr	r2, [pc, #188]	@ (80057ac <TIM_Base_SetConfig+0x124>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d023      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2e      	ldr	r2, [pc, #184]	@ (80057b0 <TIM_Base_SetConfig+0x128>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01f      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2d      	ldr	r2, [pc, #180]	@ (80057b4 <TIM_Base_SetConfig+0x12c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a2c      	ldr	r2, [pc, #176]	@ (80057b8 <TIM_Base_SetConfig+0x130>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d017      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2b      	ldr	r2, [pc, #172]	@ (80057bc <TIM_Base_SetConfig+0x134>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2a      	ldr	r2, [pc, #168]	@ (80057c0 <TIM_Base_SetConfig+0x138>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a29      	ldr	r2, [pc, #164]	@ (80057c4 <TIM_Base_SetConfig+0x13c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a28      	ldr	r2, [pc, #160]	@ (80057c8 <TIM_Base_SetConfig+0x140>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a27      	ldr	r2, [pc, #156]	@ (80057cc <TIM_Base_SetConfig+0x144>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a26      	ldr	r2, [pc, #152]	@ (80057d0 <TIM_Base_SetConfig+0x148>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a0e      	ldr	r2, [pc, #56]	@ (80057a8 <TIM_Base_SetConfig+0x120>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d003      	beq.n	800577a <TIM_Base_SetConfig+0xf2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a10      	ldr	r2, [pc, #64]	@ (80057b8 <TIM_Base_SetConfig+0x130>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d103      	bne.n	8005782 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f043 0204 	orr.w	r2, r3, #4
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40010000 	.word	0x40010000
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40000800 	.word	0x40000800
 80057b4:	40000c00 	.word	0x40000c00
 80057b8:	40010400 	.word	0x40010400
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40014400 	.word	0x40014400
 80057c4:	40014800 	.word	0x40014800
 80057c8:	40001800 	.word	0x40001800
 80057cc:	40001c00 	.word	0x40001c00
 80057d0:	40002000 	.word	0x40002000

080057d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e040      	b.n	80058a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc fa36 	bl	8001ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	@ 0x24
 800583c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa8c 	bl	8005d74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f825 	bl	80058ac <UART_SetConfig>
 8005862:	4603      	mov	r3, r0
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e01b      	b.n	80058a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800587a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800588a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fb0b 	bl	8005eb8 <UART_CheckIdleState>
 80058a2:	4603      	mov	r3, r0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4ba6      	ldr	r3, [pc, #664]	@ (8005b70 <UART_SetConfig+0x2c4>)
 80058d8:	4013      	ands	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6812      	ldr	r2, [r2, #0]
 80058de:	6979      	ldr	r1, [r7, #20]
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	430a      	orrs	r2, r1
 800591c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a94      	ldr	r2, [pc, #592]	@ (8005b74 <UART_SetConfig+0x2c8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d120      	bne.n	800596a <UART_SetConfig+0xbe>
 8005928:	4b93      	ldr	r3, [pc, #588]	@ (8005b78 <UART_SetConfig+0x2cc>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d816      	bhi.n	8005964 <UART_SetConfig+0xb8>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <UART_SetConfig+0x90>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	0800594d 	.word	0x0800594d
 8005940:	08005959 	.word	0x08005959
 8005944:	08005953 	.word	0x08005953
 8005948:	0800595f 	.word	0x0800595f
 800594c:	2301      	movs	r3, #1
 800594e:	77fb      	strb	r3, [r7, #31]
 8005950:	e150      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005952:	2302      	movs	r3, #2
 8005954:	77fb      	strb	r3, [r7, #31]
 8005956:	e14d      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005958:	2304      	movs	r3, #4
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e14a      	b.n	8005bf4 <UART_SetConfig+0x348>
 800595e:	2308      	movs	r3, #8
 8005960:	77fb      	strb	r3, [r7, #31]
 8005962:	e147      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005964:	2310      	movs	r3, #16
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e144      	b.n	8005bf4 <UART_SetConfig+0x348>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a83      	ldr	r2, [pc, #524]	@ (8005b7c <UART_SetConfig+0x2d0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d132      	bne.n	80059da <UART_SetConfig+0x12e>
 8005974:	4b80      	ldr	r3, [pc, #512]	@ (8005b78 <UART_SetConfig+0x2cc>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b0c      	cmp	r3, #12
 8005980:	d828      	bhi.n	80059d4 <UART_SetConfig+0x128>
 8005982:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <UART_SetConfig+0xdc>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059bd 	.word	0x080059bd
 800598c:	080059d5 	.word	0x080059d5
 8005990:	080059d5 	.word	0x080059d5
 8005994:	080059d5 	.word	0x080059d5
 8005998:	080059c9 	.word	0x080059c9
 800599c:	080059d5 	.word	0x080059d5
 80059a0:	080059d5 	.word	0x080059d5
 80059a4:	080059d5 	.word	0x080059d5
 80059a8:	080059c3 	.word	0x080059c3
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059d5 	.word	0x080059d5
 80059b8:	080059cf 	.word	0x080059cf
 80059bc:	2300      	movs	r3, #0
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e118      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059c2:	2302      	movs	r3, #2
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e115      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059c8:	2304      	movs	r3, #4
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e112      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059ce:	2308      	movs	r3, #8
 80059d0:	77fb      	strb	r3, [r7, #31]
 80059d2:	e10f      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059d4:	2310      	movs	r3, #16
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e10c      	b.n	8005bf4 <UART_SetConfig+0x348>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a68      	ldr	r2, [pc, #416]	@ (8005b80 <UART_SetConfig+0x2d4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d120      	bne.n	8005a26 <UART_SetConfig+0x17a>
 80059e4:	4b64      	ldr	r3, [pc, #400]	@ (8005b78 <UART_SetConfig+0x2cc>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059ee:	2b30      	cmp	r3, #48	@ 0x30
 80059f0:	d013      	beq.n	8005a1a <UART_SetConfig+0x16e>
 80059f2:	2b30      	cmp	r3, #48	@ 0x30
 80059f4:	d814      	bhi.n	8005a20 <UART_SetConfig+0x174>
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d009      	beq.n	8005a0e <UART_SetConfig+0x162>
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d810      	bhi.n	8005a20 <UART_SetConfig+0x174>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <UART_SetConfig+0x15c>
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d006      	beq.n	8005a14 <UART_SetConfig+0x168>
 8005a06:	e00b      	b.n	8005a20 <UART_SetConfig+0x174>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e0f2      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e0ef      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a14:	2304      	movs	r3, #4
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e0ec      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e0e9      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a20:	2310      	movs	r3, #16
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e0e6      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a56      	ldr	r2, [pc, #344]	@ (8005b84 <UART_SetConfig+0x2d8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d120      	bne.n	8005a72 <UART_SetConfig+0x1c6>
 8005a30:	4b51      	ldr	r3, [pc, #324]	@ (8005b78 <UART_SetConfig+0x2cc>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a3c:	d013      	beq.n	8005a66 <UART_SetConfig+0x1ba>
 8005a3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a40:	d814      	bhi.n	8005a6c <UART_SetConfig+0x1c0>
 8005a42:	2b80      	cmp	r3, #128	@ 0x80
 8005a44:	d009      	beq.n	8005a5a <UART_SetConfig+0x1ae>
 8005a46:	2b80      	cmp	r3, #128	@ 0x80
 8005a48:	d810      	bhi.n	8005a6c <UART_SetConfig+0x1c0>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <UART_SetConfig+0x1a8>
 8005a4e:	2b40      	cmp	r3, #64	@ 0x40
 8005a50:	d006      	beq.n	8005a60 <UART_SetConfig+0x1b4>
 8005a52:	e00b      	b.n	8005a6c <UART_SetConfig+0x1c0>
 8005a54:	2300      	movs	r3, #0
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e0cc      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	77fb      	strb	r3, [r7, #31]
 8005a5e:	e0c9      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a60:	2304      	movs	r3, #4
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e0c6      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a66:	2308      	movs	r3, #8
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e0c3      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e0c0      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a44      	ldr	r2, [pc, #272]	@ (8005b88 <UART_SetConfig+0x2dc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d125      	bne.n	8005ac8 <UART_SetConfig+0x21c>
 8005a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8005b78 <UART_SetConfig+0x2cc>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a8a:	d017      	beq.n	8005abc <UART_SetConfig+0x210>
 8005a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a90:	d817      	bhi.n	8005ac2 <UART_SetConfig+0x216>
 8005a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a96:	d00b      	beq.n	8005ab0 <UART_SetConfig+0x204>
 8005a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9c:	d811      	bhi.n	8005ac2 <UART_SetConfig+0x216>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <UART_SetConfig+0x1fe>
 8005aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aa6:	d006      	beq.n	8005ab6 <UART_SetConfig+0x20a>
 8005aa8:	e00b      	b.n	8005ac2 <UART_SetConfig+0x216>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	77fb      	strb	r3, [r7, #31]
 8005aae:	e0a1      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e09e      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e09b      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005abc:	2308      	movs	r3, #8
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e098      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005ac2:	2310      	movs	r3, #16
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e095      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a2f      	ldr	r2, [pc, #188]	@ (8005b8c <UART_SetConfig+0x2e0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d125      	bne.n	8005b1e <UART_SetConfig+0x272>
 8005ad2:	4b29      	ldr	r3, [pc, #164]	@ (8005b78 <UART_SetConfig+0x2cc>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae0:	d017      	beq.n	8005b12 <UART_SetConfig+0x266>
 8005ae2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae6:	d817      	bhi.n	8005b18 <UART_SetConfig+0x26c>
 8005ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aec:	d00b      	beq.n	8005b06 <UART_SetConfig+0x25a>
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005af2:	d811      	bhi.n	8005b18 <UART_SetConfig+0x26c>
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <UART_SetConfig+0x254>
 8005af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005afc:	d006      	beq.n	8005b0c <UART_SetConfig+0x260>
 8005afe:	e00b      	b.n	8005b18 <UART_SetConfig+0x26c>
 8005b00:	2301      	movs	r3, #1
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e076      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b06:	2302      	movs	r3, #2
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e073      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e070      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b12:	2308      	movs	r3, #8
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e06d      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e06a      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1b      	ldr	r2, [pc, #108]	@ (8005b90 <UART_SetConfig+0x2e4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d138      	bne.n	8005b9a <UART_SetConfig+0x2ee>
 8005b28:	4b13      	ldr	r3, [pc, #76]	@ (8005b78 <UART_SetConfig+0x2cc>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b36:	d017      	beq.n	8005b68 <UART_SetConfig+0x2bc>
 8005b38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b3c:	d82a      	bhi.n	8005b94 <UART_SetConfig+0x2e8>
 8005b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b42:	d00b      	beq.n	8005b5c <UART_SetConfig+0x2b0>
 8005b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b48:	d824      	bhi.n	8005b94 <UART_SetConfig+0x2e8>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <UART_SetConfig+0x2aa>
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b52:	d006      	beq.n	8005b62 <UART_SetConfig+0x2b6>
 8005b54:	e01e      	b.n	8005b94 <UART_SetConfig+0x2e8>
 8005b56:	2300      	movs	r3, #0
 8005b58:	77fb      	strb	r3, [r7, #31]
 8005b5a:	e04b      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e048      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b62:	2304      	movs	r3, #4
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e045      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e042      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b6e:	bf00      	nop
 8005b70:	efff69f3 	.word	0xefff69f3
 8005b74:	40011000 	.word	0x40011000
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	40004400 	.word	0x40004400
 8005b80:	40004800 	.word	0x40004800
 8005b84:	40004c00 	.word	0x40004c00
 8005b88:	40005000 	.word	0x40005000
 8005b8c:	40011400 	.word	0x40011400
 8005b90:	40007800 	.word	0x40007800
 8005b94:	2310      	movs	r3, #16
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e02c      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a72      	ldr	r2, [pc, #456]	@ (8005d68 <UART_SetConfig+0x4bc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d125      	bne.n	8005bf0 <UART_SetConfig+0x344>
 8005ba4:	4b71      	ldr	r3, [pc, #452]	@ (8005d6c <UART_SetConfig+0x4c0>)
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005baa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005bae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005bb2:	d017      	beq.n	8005be4 <UART_SetConfig+0x338>
 8005bb4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005bb8:	d817      	bhi.n	8005bea <UART_SetConfig+0x33e>
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bbe:	d00b      	beq.n	8005bd8 <UART_SetConfig+0x32c>
 8005bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc4:	d811      	bhi.n	8005bea <UART_SetConfig+0x33e>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <UART_SetConfig+0x326>
 8005bca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bce:	d006      	beq.n	8005bde <UART_SetConfig+0x332>
 8005bd0:	e00b      	b.n	8005bea <UART_SetConfig+0x33e>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e00d      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e00a      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005bde:	2304      	movs	r3, #4
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e007      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005be4:	2308      	movs	r3, #8
 8005be6:	77fb      	strb	r3, [r7, #31]
 8005be8:	e004      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005bea:	2310      	movs	r3, #16
 8005bec:	77fb      	strb	r3, [r7, #31]
 8005bee:	e001      	b.n	8005bf4 <UART_SetConfig+0x348>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfc:	d15b      	bne.n	8005cb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005bfe:	7ffb      	ldrb	r3, [r7, #31]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d828      	bhi.n	8005c56 <UART_SetConfig+0x3aa>
 8005c04:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <UART_SetConfig+0x360>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	08005c57 	.word	0x08005c57
 8005c1c:	08005c47 	.word	0x08005c47
 8005c20:	08005c57 	.word	0x08005c57
 8005c24:	08005c57 	.word	0x08005c57
 8005c28:	08005c57 	.word	0x08005c57
 8005c2c:	08005c4f 	.word	0x08005c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7fe faca 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8005c34:	61b8      	str	r0, [r7, #24]
        break;
 8005c36:	e013      	b.n	8005c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c38:	f7fe fada 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8005c3c:	61b8      	str	r0, [r7, #24]
        break;
 8005c3e:	e00f      	b.n	8005c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c40:	4b4b      	ldr	r3, [pc, #300]	@ (8005d70 <UART_SetConfig+0x4c4>)
 8005c42:	61bb      	str	r3, [r7, #24]
        break;
 8005c44:	e00c      	b.n	8005c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c46:	f7fe f9ad 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8005c4a:	61b8      	str	r0, [r7, #24]
        break;
 8005c4c:	e008      	b.n	8005c60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c52:	61bb      	str	r3, [r7, #24]
        break;
 8005c54:	e004      	b.n	8005c60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8005c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d074      	beq.n	8005d50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	005a      	lsls	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	441a      	add	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	d916      	bls.n	8005cb0 <UART_SetConfig+0x404>
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c88:	d212      	bcs.n	8005cb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f023 030f 	bic.w	r3, r3, #15
 8005c92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	89fb      	ldrh	r3, [r7, #14]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	89fa      	ldrh	r2, [r7, #14]
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e04f      	b.n	8005d50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	77bb      	strb	r3, [r7, #30]
 8005cb4:	e04c      	b.n	8005d50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cb6:	7ffb      	ldrb	r3, [r7, #31]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d828      	bhi.n	8005d0e <UART_SetConfig+0x462>
 8005cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <UART_SetConfig+0x418>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005cf9 	.word	0x08005cf9
 8005cd0:	08005d0f 	.word	0x08005d0f
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005d0f 	.word	0x08005d0f
 8005cdc:	08005d0f 	.word	0x08005d0f
 8005ce0:	08005d0f 	.word	0x08005d0f
 8005ce4:	08005d07 	.word	0x08005d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7fe fa6e 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8005cec:	61b8      	str	r0, [r7, #24]
        break;
 8005cee:	e013      	b.n	8005d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf0:	f7fe fa7e 	bl	80041f0 <HAL_RCC_GetPCLK2Freq>
 8005cf4:	61b8      	str	r0, [r7, #24]
        break;
 8005cf6:	e00f      	b.n	8005d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d70 <UART_SetConfig+0x4c4>)
 8005cfa:	61bb      	str	r3, [r7, #24]
        break;
 8005cfc:	e00c      	b.n	8005d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfe:	f7fe f951 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8005d02:	61b8      	str	r0, [r7, #24]
        break;
 8005d04:	e008      	b.n	8005d18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d0a:	61bb      	str	r3, [r7, #24]
        break;
 8005d0c:	e004      	b.n	8005d18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	77bb      	strb	r3, [r7, #30]
        break;
 8005d16:	bf00      	nop
    }

    if (pclk != 0U)
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	085a      	lsrs	r2, r3, #1
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	441a      	add	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b0f      	cmp	r3, #15
 8005d36:	d909      	bls.n	8005d4c <UART_SetConfig+0x4a0>
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3e:	d205      	bcs.n	8005d4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60da      	str	r2, [r3, #12]
 8005d4a:	e001      	b.n	8005d50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40007c00 	.word	0x40007c00
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	00f42400 	.word	0x00f42400

08005d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e72:	d10a      	bne.n	8005e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b098      	sub	sp, #96	@ 0x60
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ec8:	f7fc f9a2 	bl	8002210 <HAL_GetTick>
 8005ecc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d12e      	bne.n	8005f3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005edc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f88c 	bl	8006008 <UART_WaitOnFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d021      	beq.n	8005f3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f16:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e6      	bne.n	8005ef6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e062      	b.n	8006000 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d149      	bne.n	8005fdc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f50:	2200      	movs	r2, #0
 8005f52:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f856 	bl	8006008 <UART_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d03c      	beq.n	8005fdc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0301 	bic.w	r3, r3, #1
 8005faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fb4:	61fa      	str	r2, [r7, #28]
 8005fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	69b9      	ldr	r1, [r7, #24]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e5      	bne.n	8005f94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e011      	b.n	8006000 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3758      	adds	r7, #88	@ 0x58
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	4613      	mov	r3, r2
 8006016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006018:	e04f      	b.n	80060ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006020:	d04b      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006022:	f7fc f8f5 	bl	8002210 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <UART_WaitOnFlagUntilTimeout+0x30>
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e04e      	b.n	80060da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	d037      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b80      	cmp	r3, #128	@ 0x80
 800604e:	d034      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b40      	cmp	r3, #64	@ 0x40
 8006054:	d031      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b08      	cmp	r3, #8
 8006062:	d110      	bne.n	8006086 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2208      	movs	r2, #8
 800606a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f838 	bl	80060e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2208      	movs	r2, #8
 8006076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e029      	b.n	80060da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006094:	d111      	bne.n	80060ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800609e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f81e 	bl	80060e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e00f      	b.n	80060da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	4013      	ands	r3, r2
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	bf0c      	ite	eq
 80060ca:	2301      	moveq	r3, #1
 80060cc:	2300      	movne	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d0a0      	beq.n	800601a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b095      	sub	sp, #84	@ 0x54
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006108:	643b      	str	r3, [r7, #64]	@ 0x40
 800610a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800610e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e6      	bne.n	80060ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	61fb      	str	r3, [r7, #28]
   return(result);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3308      	adds	r3, #8
 800613a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800613c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800613e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006154:	2b01      	cmp	r3, #1
 8006156:	d118      	bne.n	800618a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	60bb      	str	r3, [r7, #8]
   return(result);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f023 0310 	bic.w	r3, r3, #16
 800616c:	647b      	str	r3, [r7, #68]	@ 0x44
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6979      	ldr	r1, [r7, #20]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	613b      	str	r3, [r7, #16]
   return(result);
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e6      	bne.n	8006158 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800619e:	bf00      	nop
 80061a0:	3754      	adds	r7, #84	@ 0x54
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061ac:	b084      	sub	sp, #16
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	f107 001c 	add.w	r0, r7, #28
 80061ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d121      	bne.n	800620a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	4b21      	ldr	r3, [pc, #132]	@ (800625c <USB_CoreInit+0xb0>)
 80061d8:	4013      	ands	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d105      	bne.n	80061fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa92 	bl	8006728 <USB_CoreReset>
 8006204:	4603      	mov	r3, r0
 8006206:	73fb      	strb	r3, [r7, #15]
 8006208:	e010      	b.n	800622c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fa86 	bl	8006728 <USB_CoreReset>
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006224:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800622c:	7fbb      	ldrb	r3, [r7, #30]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d10b      	bne.n	800624a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f043 0206 	orr.w	r2, r3, #6
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f043 0220 	orr.w	r2, r3, #32
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006256:	b004      	add	sp, #16
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	ffbdffbf 	.word	0xffbdffbf

08006260 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 0201 	bic.w	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d115      	bne.n	80062d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062b0:	200a      	movs	r0, #10
 80062b2:	f7fb ffb9 	bl	8002228 <HAL_Delay>
      ms += 10U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	330a      	adds	r3, #10
 80062ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa25 	bl	800670c <USB_GetMode>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d01e      	beq.n	8006306 <USB_SetCurrentMode+0x84>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80062cc:	d9f0      	bls.n	80062b0 <USB_SetCurrentMode+0x2e>
 80062ce:	e01a      	b.n	8006306 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d115      	bne.n	8006302 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062e2:	200a      	movs	r0, #10
 80062e4:	f7fb ffa0 	bl	8002228 <HAL_Delay>
      ms += 10U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	330a      	adds	r3, #10
 80062ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa0c 	bl	800670c <USB_GetMode>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <USB_SetCurrentMode+0x84>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80062fe:	d9f0      	bls.n	80062e2 <USB_SetCurrentMode+0x60>
 8006300:	e001      	b.n	8006306 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e005      	b.n	8006312 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2bc8      	cmp	r3, #200	@ 0xc8
 800630a:	d101      	bne.n	8006310 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800631c:	b084      	sub	sp, #16
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800632a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	e009      	b.n	8006350 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	3340      	adds	r3, #64	@ 0x40
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	2200      	movs	r2, #0
 8006348:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	3301      	adds	r3, #1
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b0e      	cmp	r3, #14
 8006354:	d9f2      	bls.n	800633c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006356:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11c      	bne.n	8006398 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800636c:	f043 0302 	orr.w	r3, r3, #2
 8006370:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006376:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	e005      	b.n	80063a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063aa:	461a      	mov	r2, r3
 80063ac:	2300      	movs	r3, #0
 80063ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d10d      	bne.n	80063d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063c0:	2100      	movs	r1, #0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f968 	bl	8006698 <USB_SetDevSpeed>
 80063c8:	e008      	b.n	80063dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063ca:	2101      	movs	r1, #1
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f963 	bl	8006698 <USB_SetDevSpeed>
 80063d2:	e003      	b.n	80063dc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063d4:	2103      	movs	r1, #3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f95e 	bl	8006698 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063dc:	2110      	movs	r1, #16
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f8fa 	bl	80065d8 <USB_FlushTxFifo>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f924 	bl	800663c <USB_FlushRxFifo>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006404:	461a      	mov	r2, r3
 8006406:	2300      	movs	r3, #0
 8006408:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006410:	461a      	mov	r2, r3
 8006412:	2300      	movs	r3, #0
 8006414:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641c:	461a      	mov	r2, r3
 800641e:	2300      	movs	r3, #0
 8006420:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	e043      	b.n	80064b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800643a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800643e:	d118      	bne.n	8006472 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006452:	461a      	mov	r2, r3
 8006454:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	e013      	b.n	8006484 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006468:	461a      	mov	r2, r3
 800646a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	e008      	b.n	8006484 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647e:	461a      	mov	r2, r3
 8006480:	2300      	movs	r3, #0
 8006482:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006490:	461a      	mov	r2, r3
 8006492:	2300      	movs	r3, #0
 8006494:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a2:	461a      	mov	r2, r3
 80064a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3301      	adds	r3, #1
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064b4:	461a      	mov	r2, r3
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d3b5      	bcc.n	8006428 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
 80064c0:	e043      	b.n	800654a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064d8:	d118      	bne.n	800650c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ec:	461a      	mov	r2, r3
 80064ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e013      	b.n	800651e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006502:	461a      	mov	r2, r3
 8006504:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e008      	b.n	800651e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006518:	461a      	mov	r2, r3
 800651a:	2300      	movs	r3, #0
 800651c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652a:	461a      	mov	r2, r3
 800652c:	2300      	movs	r3, #0
 800652e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653c:	461a      	mov	r2, r3
 800653e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006542:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	3301      	adds	r3, #1
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800654e:	461a      	mov	r2, r3
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	4293      	cmp	r3, r2
 8006554:	d3b5      	bcc.n	80064c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006568:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006576:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006578:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800657c:	2b00      	cmp	r3, #0
 800657e:	d105      	bne.n	800658c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f043 0210 	orr.w	r2, r3, #16
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	4b0f      	ldr	r3, [pc, #60]	@ (80065d0 <USB_DevInit+0x2b4>)
 8006592:	4313      	orrs	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006598:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f043 0208 	orr.w	r2, r3, #8
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d105      	bne.n	80065c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699a      	ldr	r2, [r3, #24]
 80065b8:	4b06      	ldr	r3, [pc, #24]	@ (80065d4 <USB_DevInit+0x2b8>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065cc:	b004      	add	sp, #16
 80065ce:	4770      	bx	lr
 80065d0:	803c3800 	.word	0x803c3800
 80065d4:	40000004 	.word	0x40000004

080065d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3301      	adds	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065f2:	d901      	bls.n	80065f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e01b      	b.n	8006630 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	daf2      	bge.n	80065e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	019b      	lsls	r3, r3, #6
 8006608:	f043 0220 	orr.w	r2, r3, #32
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800661c:	d901      	bls.n	8006622 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e006      	b.n	8006630 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b20      	cmp	r3, #32
 800662c:	d0f0      	beq.n	8006610 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3301      	adds	r3, #1
 800664c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006654:	d901      	bls.n	800665a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e018      	b.n	800668c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	daf2      	bge.n	8006648 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2210      	movs	r2, #16
 800666a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006678:	d901      	bls.n	800667e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e006      	b.n	800668c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	2b10      	cmp	r3, #16
 8006688:	d0f0      	beq.n	800666c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	68f9      	ldr	r1, [r7, #12]
 80066b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066e4:	f023 0303 	bic.w	r3, r3, #3
 80066e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066f8:	f043 0302 	orr.w	r3, r3, #2
 80066fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0301 	and.w	r3, r3, #1
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3301      	adds	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006740:	d901      	bls.n	8006746 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e022      	b.n	800678c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	daf2      	bge.n	8006734 <USB_CoreReset+0xc>

  count = 10U;
 800674e:	230a      	movs	r3, #10
 8006750:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006752:	e002      	b.n	800675a <USB_CoreReset+0x32>
  {
    count--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3b01      	subs	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f9      	bne.n	8006754 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f043 0201 	orr.w	r2, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006778:	d901      	bls.n	800677e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e006      	b.n	800678c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b01      	cmp	r3, #1
 8006788:	d0f0      	beq.n	800676c <USB_CoreReset+0x44>

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 800679e:	4b0c      	ldr	r3, [pc, #48]	@ (80067d0 <ETH_IRQHandler+0x38>)
 80067a0:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 80067a2:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <ETH_IRQHandler+0x3c>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7fb ff55 	bl	8002658 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 80067ae:	4b09      	ldr	r3, [pc, #36]	@ (80067d4 <ETH_IRQHandler+0x3c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <ETH_IRQHandler+0x2e>
 80067b6:	4b08      	ldr	r3, [pc, #32]	@ (80067d8 <ETH_IRQHandler+0x40>)
 80067b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	f3bf 8f6f 	isb	sy
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000de4 	.word	0x20000de4
 80067d4:	20000e98 	.word	0x20000e98
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 80067e4:	2300      	movs	r3, #0
 80067e6:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ee:	2be0      	cmp	r3, #224	@ 0xe0
 80067f0:	d103      	bne.n	80067fa <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006800:	f003 0308 	and.w	r3, r3, #8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d019      	beq.n	800683c <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	f043 0310 	orr.w	r3, r3, #16
 800680e:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006816:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	f043 0308 	orr.w	r3, r3, #8
 8006828:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	f043 0304 	orr.w	r3, r3, #4
 800683a:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006850:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 8006852:	4b0e      	ldr	r3, [pc, #56]	@ (800688c <HAL_ETH_ErrorCallback+0xb0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d014      	beq.n	8006884 <HAL_ETH_ErrorCallback+0xa8>
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d011      	beq.n	8006884 <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 8006864:	4b09      	ldr	r3, [pc, #36]	@ (800688c <HAL_ETH_ErrorCallback+0xb0>)
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	7df9      	ldrb	r1, [r7, #23]
 800686a:	f107 030c 	add.w	r3, r7, #12
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	2300      	movs	r3, #0
 8006872:	2201      	movs	r2, #1
 8006874:	f001 fec0 	bl	80085f8 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8006878:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <HAL_ETH_ErrorCallback+0xb4>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	4a03      	ldr	r2, [pc, #12]	@ (8006890 <HAL_ETH_ErrorCallback+0xb4>)
 8006882:	6013      	str	r3, [r2, #0]
    }
}
 8006884:	bf00      	nop
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000e94 	.word	0x20000e94
 8006890:	20000e98 	.word	0x20000e98

08006894 <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af02      	add	r7, sp, #8
 800689a:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a0:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 80068a2:	4b11      	ldr	r3, [pc, #68]	@ (80068e8 <HAL_ETH_RxCpltCallback+0x54>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d902      	bls.n	80068b2 <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 80068ac:	4a0e      	ldr	r2, [pc, #56]	@ (80068e8 <HAL_ETH_RxCpltCallback+0x54>)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 80068b2:	4b0e      	ldr	r3, [pc, #56]	@ (80068ec <HAL_ETH_RxCpltCallback+0x58>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d011      	beq.n	80068de <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 80068be:	4b0b      	ldr	r3, [pc, #44]	@ (80068ec <HAL_ETH_RxCpltCallback+0x58>)
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	f107 0308 	add.w	r3, r7, #8
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	2300      	movs	r3, #0
 80068ca:	2201      	movs	r2, #1
 80068cc:	2101      	movs	r1, #1
 80068ce:	f001 fe93 	bl	80085f8 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80068d2:	4b07      	ldr	r3, [pc, #28]	@ (80068f0 <HAL_ETH_RxCpltCallback+0x5c>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4313      	orrs	r3, r2
 80068da:	4a05      	ldr	r2, [pc, #20]	@ (80068f0 <HAL_ETH_RxCpltCallback+0x5c>)
 80068dc:	6013      	str	r3, [r2, #0]
    }
}
 80068de:	bf00      	nop
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000e9c 	.word	0x20000e9c
 80068ec:	20000e94 	.word	0x20000e94
 80068f0:	20000e98 	.word	0x20000e98

080068f4 <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 8006902:	4b11      	ldr	r3, [pc, #68]	@ (8006948 <HAL_ETH_TxCpltCallback+0x54>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	429a      	cmp	r2, r3
 800690a:	d902      	bls.n	8006912 <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 800690c:	4a0e      	ldr	r2, [pc, #56]	@ (8006948 <HAL_ETH_TxCpltCallback+0x54>)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 8006912:	4b0e      	ldr	r3, [pc, #56]	@ (800694c <HAL_ETH_TxCpltCallback+0x58>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d011      	beq.n	800693e <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <HAL_ETH_TxCpltCallback+0x58>)
 8006920:	6818      	ldr	r0, [r3, #0]
 8006922:	f107 0308 	add.w	r3, r7, #8
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	2300      	movs	r3, #0
 800692a:	2201      	movs	r2, #1
 800692c:	2102      	movs	r1, #2
 800692e:	f001 fe63 	bl	80085f8 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8006932:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <HAL_ETH_TxCpltCallback+0x5c>)
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4313      	orrs	r3, r2
 800693a:	4a05      	ldr	r2, [pc, #20]	@ (8006950 <HAL_ETH_TxCpltCallback+0x5c>)
 800693c:	6013      	str	r3, [r2, #0]
    }
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20000ea0 	.word	0x20000ea0
 800694c:	20000e94 	.word	0x20000e94
 8006950:	20000e98 	.word	0x20000e98

08006954 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006958:	bf00      	nop
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800696a:	f3ef 8305 	mrs	r3, IPSR
 800696e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006970:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10f      	bne.n	8006996 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006976:	f3ef 8310 	mrs	r3, PRIMASK
 800697a:	607b      	str	r3, [r7, #4]
  return(result);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d105      	bne.n	800698e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006982:	f3ef 8311 	mrs	r3, BASEPRI
 8006986:	603b      	str	r3, [r7, #0]
  return(result);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <osKernelInitialize+0x3a>
 800698e:	4b0e      	ldr	r3, [pc, #56]	@ (80069c8 <osKernelInitialize+0x64>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d103      	bne.n	800699e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006996:	f06f 0305 	mvn.w	r3, #5
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e00c      	b.n	80069b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800699e:	4b0a      	ldr	r3, [pc, #40]	@ (80069c8 <osKernelInitialize+0x64>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d105      	bne.n	80069b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80069a6:	4b08      	ldr	r3, [pc, #32]	@ (80069c8 <osKernelInitialize+0x64>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e002      	b.n	80069b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80069b2:	f04f 33ff 	mov.w	r3, #4294967295
 80069b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80069b8:	68fb      	ldr	r3, [r7, #12]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000ea4 	.word	0x20000ea4

080069cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069d2:	f3ef 8305 	mrs	r3, IPSR
 80069d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80069d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10f      	bne.n	80069fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069de:	f3ef 8310 	mrs	r3, PRIMASK
 80069e2:	607b      	str	r3, [r7, #4]
  return(result);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069ea:	f3ef 8311 	mrs	r3, BASEPRI
 80069ee:	603b      	str	r3, [r7, #0]
  return(result);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d007      	beq.n	8006a06 <osKernelStart+0x3a>
 80069f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a34 <osKernelStart+0x68>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d103      	bne.n	8006a06 <osKernelStart+0x3a>
    stat = osErrorISR;
 80069fe:	f06f 0305 	mvn.w	r3, #5
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e010      	b.n	8006a28 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a06:	4b0b      	ldr	r3, [pc, #44]	@ (8006a34 <osKernelStart+0x68>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d109      	bne.n	8006a22 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a0e:	f7ff ffa1 	bl	8006954 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a12:	4b08      	ldr	r3, [pc, #32]	@ (8006a34 <osKernelStart+0x68>)
 8006a14:	2202      	movs	r2, #2
 8006a16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a18:	f001 f8e2 	bl	8007be0 <vTaskStartScheduler>
      stat = osOK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e002      	b.n	8006a28 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006a22:	f04f 33ff 	mov.w	r3, #4294967295
 8006a26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006a28:	68fb      	ldr	r3, [r7, #12]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000ea4 	.word	0x20000ea4

08006a38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b090      	sub	sp, #64	@ 0x40
 8006a3c:	af04      	add	r7, sp, #16
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a48:	f3ef 8305 	mrs	r3, IPSR
 8006a4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 8090 	bne.w	8006b76 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a56:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d105      	bne.n	8006a6e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a62:	f3ef 8311 	mrs	r3, BASEPRI
 8006a66:	617b      	str	r3, [r7, #20]
  return(result);
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <osThreadNew+0x3e>
 8006a6e:	4b44      	ldr	r3, [pc, #272]	@ (8006b80 <osThreadNew+0x148>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d07f      	beq.n	8006b76 <osThreadNew+0x13e>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d07c      	beq.n	8006b76 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8006a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006a82:	2318      	movs	r3, #24
 8006a84:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d045      	beq.n	8006b22 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <osThreadNew+0x6c>
        name = attr->name;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <osThreadNew+0x92>
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	2b38      	cmp	r3, #56	@ 0x38
 8006abc:	d805      	bhi.n	8006aca <osThreadNew+0x92>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <osThreadNew+0x96>
        return (NULL);
 8006aca:	2300      	movs	r3, #0
 8006acc:	e054      	b.n	8006b78 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	089b      	lsrs	r3, r3, #2
 8006adc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00e      	beq.n	8006b04 <osThreadNew+0xcc>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2ba7      	cmp	r3, #167	@ 0xa7
 8006aec:	d90a      	bls.n	8006b04 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d006      	beq.n	8006b04 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <osThreadNew+0xcc>
        mem = 1;
 8006afe:	2301      	movs	r3, #1
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	e010      	b.n	8006b26 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10c      	bne.n	8006b26 <osThreadNew+0xee>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d108      	bne.n	8006b26 <osThreadNew+0xee>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <osThreadNew+0xee>
          mem = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	623b      	str	r3, [r7, #32]
 8006b20:	e001      	b.n	8006b26 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d110      	bne.n	8006b4e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b34:	9202      	str	r2, [sp, #8]
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fe4e 	bl	80077e4 <xTaskCreateStatic>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	e013      	b.n	8006b76 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d110      	bne.n	8006b76 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	f107 0310 	add.w	r3, r7, #16
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fea2 	bl	80078b0 <xTaskCreate>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d001      	beq.n	8006b76 <osThreadNew+0x13e>
          hTask = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b76:	693b      	ldr	r3, [r7, #16]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3730      	adds	r7, #48	@ 0x30
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000ea4 	.word	0x20000ea4

08006b84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b8c:	f3ef 8305 	mrs	r3, IPSR
 8006b90:	613b      	str	r3, [r7, #16]
  return(result);
 8006b92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10f      	bne.n	8006bb8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b98:	f3ef 8310 	mrs	r3, PRIMASK
 8006b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ba4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d007      	beq.n	8006bc0 <osDelay+0x3c>
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bdc <osDelay+0x58>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d103      	bne.n	8006bc0 <osDelay+0x3c>
    stat = osErrorISR;
 8006bb8:	f06f 0305 	mvn.w	r3, #5
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e007      	b.n	8006bd0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 ffd0 	bl	8007b70 <vTaskDelay>
    }
  }

  return (stat);
 8006bd0:	697b      	ldr	r3, [r7, #20]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000ea4 	.word	0x20000ea4

08006be0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a07      	ldr	r2, [pc, #28]	@ (8006c0c <vApplicationGetIdleTaskMemory+0x2c>)
 8006bf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4a06      	ldr	r2, [pc, #24]	@ (8006c10 <vApplicationGetIdleTaskMemory+0x30>)
 8006bf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bfe:	601a      	str	r2, [r3, #0]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	20000ea8 	.word	0x20000ea8
 8006c10:	20000f50 	.word	0x20000f50

08006c14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4a07      	ldr	r2, [pc, #28]	@ (8006c40 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4a06      	ldr	r2, [pc, #24]	@ (8006c44 <vApplicationGetTimerTaskMemory+0x30>)
 8006c2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c32:	601a      	str	r2, [r3, #0]
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	20001350 	.word	0x20001350
 8006c44:	200013f8 	.word	0x200013f8

08006c48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f103 0208 	add.w	r2, r3, #8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f103 0208 	add.w	r2, r3, #8
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f103 0208 	add.w	r2, r3, #8
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d103      	bne.n	8006d0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	e00c      	b.n	8006d24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	e002      	b.n	8006d18 <vListInsert+0x2e>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d2f6      	bcs.n	8006d12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	601a      	str	r2, [r3, #0]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6892      	ldr	r2, [r2, #8]
 8006d72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6852      	ldr	r2, [r2, #4]
 8006d7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d103      	bne.n	8006d90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	1e5a      	subs	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10d      	bne.n	8006de0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	b672      	cpsid	i
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	b662      	cpsie	i
 8006dd8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006dda:	bf00      	nop
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006de0:	f002 f9c4 	bl	800916c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	68f9      	ldr	r1, [r7, #12]
 8006dee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006df0:	fb01 f303 	mul.w	r3, r1, r3
 8006df4:	441a      	add	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e10:	3b01      	subs	r3, #1
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	22ff      	movs	r2, #255	@ 0xff
 8006e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	22ff      	movs	r2, #255	@ 0xff
 8006e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d114      	bne.n	8006e60 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01a      	beq.n	8006e74 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3310      	adds	r3, #16
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 f978 	bl	8008138 <xTaskRemoveFromEventList>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d012      	beq.n	8006e74 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e84 <xQueueGenericReset+0xd4>)
 8006e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	e009      	b.n	8006e74 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3310      	adds	r3, #16
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff feef 	bl	8006c48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3324      	adds	r3, #36	@ 0x24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff feea 	bl	8006c48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e74:	f002 f9b0 	bl	80091d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e78:	2301      	movs	r3, #1
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	e000ed04 	.word	0xe000ed04

08006e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	@ 0x38
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10d      	bne.n	8006eb8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea0:	b672      	cpsid	i
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	b662      	cpsie	i
 8006eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10d      	bne.n	8006eda <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	b672      	cpsid	i
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	b662      	cpsie	i
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <xQueueGenericCreateStatic+0x5e>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <xQueueGenericCreateStatic+0x62>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <xQueueGenericCreateStatic+0x64>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10d      	bne.n	8006f0c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	b672      	cpsid	i
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	b662      	cpsie	i
 8006f04:	623b      	str	r3, [r7, #32]
}
 8006f06:	bf00      	nop
 8006f08:	bf00      	nop
 8006f0a:	e7fd      	b.n	8006f08 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <xQueueGenericCreateStatic+0x90>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <xQueueGenericCreateStatic+0x94>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <xQueueGenericCreateStatic+0x96>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10d      	bne.n	8006f3e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f26:	b672      	cpsid	i
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	b662      	cpsie	i
 8006f36:	61fb      	str	r3, [r7, #28]
}
 8006f38:	bf00      	nop
 8006f3a:	bf00      	nop
 8006f3c:	e7fd      	b.n	8006f3a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f3e:	2350      	movs	r3, #80	@ 0x50
 8006f40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b50      	cmp	r3, #80	@ 0x50
 8006f46:	d00d      	beq.n	8006f64 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	b672      	cpsid	i
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	b662      	cpsie	i
 8006f5c:	61bb      	str	r3, [r7, #24]
}
 8006f5e:	bf00      	nop
 8006f60:	bf00      	nop
 8006f62:	e7fd      	b.n	8006f60 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00d      	beq.n	8006f8c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f805 	bl	8006f96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3730      	adds	r7, #48	@ 0x30
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	e002      	b.n	8006fb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	69b8      	ldr	r0, [r7, #24]
 8006fc8:	f7ff fef2 	bl	8006db0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fd4:	bf00      	nop
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08e      	sub	sp, #56	@ 0x38
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006fea:	2300      	movs	r3, #0
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10d      	bne.n	8007014 <xQueueGenericSend+0x38>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	b672      	cpsid	i
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	b662      	cpsie	i
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <xQueueGenericSend+0x46>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <xQueueGenericSend+0x4a>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <xQueueGenericSend+0x4c>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10d      	bne.n	8007048 <xQueueGenericSend+0x6c>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	b672      	cpsid	i
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	b662      	cpsie	i
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d103      	bne.n	8007056 <xQueueGenericSend+0x7a>
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <xQueueGenericSend+0x7e>
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <xQueueGenericSend+0x80>
 800705a:	2300      	movs	r3, #0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10d      	bne.n	800707c <xQueueGenericSend+0xa0>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	b672      	cpsid	i
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	b662      	cpsie	i
 8007074:	623b      	str	r3, [r7, #32]
}
 8007076:	bf00      	nop
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800707c:	f001 fa2a 	bl	80084d4 <xTaskGetSchedulerState>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <xQueueGenericSend+0xb0>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <xQueueGenericSend+0xb4>
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <xQueueGenericSend+0xb6>
 8007090:	2300      	movs	r3, #0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10d      	bne.n	80070b2 <xQueueGenericSend+0xd6>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	b672      	cpsid	i
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	b662      	cpsie	i
 80070aa:	61fb      	str	r3, [r7, #28]
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	e7fd      	b.n	80070ae <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070b2:	f002 f85b 	bl	800916c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070be:	429a      	cmp	r2, r3
 80070c0:	d302      	bcc.n	80070c8 <xQueueGenericSend+0xec>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d129      	bne.n	800711c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070ce:	f000 fa1b 	bl	8007508 <prvCopyDataToQueue>
 80070d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d010      	beq.n	80070fe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	3324      	adds	r3, #36	@ 0x24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f001 f829 	bl	8008138 <xTaskRemoveFromEventList>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d013      	beq.n	8007114 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070ec:	4b3f      	ldr	r3, [pc, #252]	@ (80071ec <xQueueGenericSend+0x210>)
 80070ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	e00a      	b.n	8007114 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80070fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007104:	4b39      	ldr	r3, [pc, #228]	@ (80071ec <xQueueGenericSend+0x210>)
 8007106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007114:	f002 f860 	bl	80091d8 <vPortExitCritical>
				return pdPASS;
 8007118:	2301      	movs	r3, #1
 800711a:	e063      	b.n	80071e4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007122:	f002 f859 	bl	80091d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007126:	2300      	movs	r3, #0
 8007128:	e05c      	b.n	80071e4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800712a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	4618      	mov	r0, r3
 8007136:	f001 f865 	bl	8008204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800713a:	2301      	movs	r3, #1
 800713c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800713e:	f002 f84b 	bl	80091d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007142:	f000 fdc1 	bl	8007cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007146:	f002 f811 	bl	800916c <vPortEnterCritical>
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007150:	b25b      	sxtb	r3, r3
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d103      	bne.n	8007160 <xQueueGenericSend+0x184>
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007166:	b25b      	sxtb	r3, r3
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d103      	bne.n	8007176 <xQueueGenericSend+0x19a>
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007176:	f002 f82f 	bl	80091d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800717a:	1d3a      	adds	r2, r7, #4
 800717c:	f107 0314 	add.w	r3, r7, #20
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f001 f854 	bl	8008230 <xTaskCheckForTimeOut>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d124      	bne.n	80071d8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800718e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007190:	f000 fab2 	bl	80076f8 <prvIsQueueFull>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d018      	beq.n	80071cc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	3310      	adds	r3, #16
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 ff72 	bl	800808c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071aa:	f000 fa3d 	bl	8007628 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071ae:	f000 fd99 	bl	8007ce4 <xTaskResumeAll>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f47f af7c 	bne.w	80070b2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80071ba:	4b0c      	ldr	r3, [pc, #48]	@ (80071ec <xQueueGenericSend+0x210>)
 80071bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	e772      	b.n	80070b2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071ce:	f000 fa2b 	bl	8007628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071d2:	f000 fd87 	bl	8007ce4 <xTaskResumeAll>
 80071d6:	e76c      	b.n	80070b2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071da:	f000 fa25 	bl	8007628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071de:	f000 fd81 	bl	8007ce4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3738      	adds	r7, #56	@ 0x38
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	e000ed04 	.word	0xe000ed04

080071f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08e      	sub	sp, #56	@ 0x38
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10d      	bne.n	8007224 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720c:	b672      	cpsid	i
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	b662      	cpsie	i
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	e7fd      	b.n	8007220 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <xQueueGenericSendFromISR+0x42>
 800722a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <xQueueGenericSendFromISR+0x46>
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <xQueueGenericSendFromISR+0x48>
 8007236:	2300      	movs	r3, #0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10d      	bne.n	8007258 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007240:	b672      	cpsid	i
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	b662      	cpsie	i
 8007250:	623b      	str	r3, [r7, #32]
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	e7fd      	b.n	8007254 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d103      	bne.n	8007266 <xQueueGenericSendFromISR+0x76>
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007262:	2b01      	cmp	r3, #1
 8007264:	d101      	bne.n	800726a <xQueueGenericSendFromISR+0x7a>
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <xQueueGenericSendFromISR+0x7c>
 800726a:	2300      	movs	r3, #0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10d      	bne.n	800728c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	b672      	cpsid	i
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	b662      	cpsie	i
 8007284:	61fb      	str	r3, [r7, #28]
}
 8007286:	bf00      	nop
 8007288:	bf00      	nop
 800728a:	e7fd      	b.n	8007288 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800728c:	f002 f856 	bl	800933c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007290:	f3ef 8211 	mrs	r2, BASEPRI
 8007294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007298:	b672      	cpsid	i
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	b662      	cpsie	i
 80072a8:	61ba      	str	r2, [r7, #24]
 80072aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <xQueueGenericSendFromISR+0xd2>
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d12c      	bne.n	800731c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072d2:	f000 f919 	bl	8007508 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072de:	d112      	bne.n	8007306 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d016      	beq.n	8007316 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	3324      	adds	r3, #36	@ 0x24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 ff23 	bl	8008138 <xTaskRemoveFromEventList>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00e      	beq.n	8007316 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00b      	beq.n	8007316 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e007      	b.n	8007316 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007306:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800730a:	3301      	adds	r3, #1
 800730c:	b2db      	uxtb	r3, r3
 800730e:	b25a      	sxtb	r2, r3
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007316:	2301      	movs	r3, #1
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800731a:	e001      	b.n	8007320 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800731c:	2300      	movs	r3, #0
 800731e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007322:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800732a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800732c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800732e:	4618      	mov	r0, r3
 8007330:	3738      	adds	r7, #56	@ 0x38
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08c      	sub	sp, #48	@ 0x30
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007344:	2300      	movs	r3, #0
 8007346:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800734c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10d      	bne.n	800736e <xQueueReceive+0x36>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	b672      	cpsid	i
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	b662      	cpsie	i
 8007366:	623b      	str	r3, [r7, #32]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d103      	bne.n	800737c <xQueueReceive+0x44>
 8007374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d101      	bne.n	8007380 <xQueueReceive+0x48>
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <xQueueReceive+0x4a>
 8007380:	2300      	movs	r3, #0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10d      	bne.n	80073a2 <xQueueReceive+0x6a>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738a:	b672      	cpsid	i
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	b662      	cpsie	i
 800739a:	61fb      	str	r3, [r7, #28]
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073a2:	f001 f897 	bl	80084d4 <xTaskGetSchedulerState>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d102      	bne.n	80073b2 <xQueueReceive+0x7a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <xQueueReceive+0x7e>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e000      	b.n	80073b8 <xQueueReceive+0x80>
 80073b6:	2300      	movs	r3, #0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d10d      	bne.n	80073d8 <xQueueReceive+0xa0>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c0:	b672      	cpsid	i
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	b662      	cpsie	i
 80073d0:	61bb      	str	r3, [r7, #24]
}
 80073d2:	bf00      	nop
 80073d4:	bf00      	nop
 80073d6:	e7fd      	b.n	80073d4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073d8:	f001 fec8 	bl	800916c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01f      	beq.n	8007428 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80073e8:	68b9      	ldr	r1, [r7, #8]
 80073ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ec:	f000 f8f6 	bl	80075dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	1e5a      	subs	r2, r3, #1
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00f      	beq.n	8007420 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	3310      	adds	r3, #16
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fe97 	bl	8008138 <xTaskRemoveFromEventList>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d007      	beq.n	8007420 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007410:	4b3c      	ldr	r3, [pc, #240]	@ (8007504 <xQueueReceive+0x1cc>)
 8007412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007420:	f001 feda 	bl	80091d8 <vPortExitCritical>
				return pdPASS;
 8007424:	2301      	movs	r3, #1
 8007426:	e069      	b.n	80074fc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d103      	bne.n	8007436 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800742e:	f001 fed3 	bl	80091d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007432:	2300      	movs	r3, #0
 8007434:	e062      	b.n	80074fc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800743c:	f107 0310 	add.w	r3, r7, #16
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fedf 	bl	8008204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007446:	2301      	movs	r3, #1
 8007448:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800744a:	f001 fec5 	bl	80091d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800744e:	f000 fc3b 	bl	8007cc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007452:	f001 fe8b 	bl	800916c <vPortEnterCritical>
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800745c:	b25b      	sxtb	r3, r3
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007462:	d103      	bne.n	800746c <xQueueReceive+0x134>
 8007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007472:	b25b      	sxtb	r3, r3
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d103      	bne.n	8007482 <xQueueReceive+0x14a>
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007482:	f001 fea9 	bl	80091d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007486:	1d3a      	adds	r2, r7, #4
 8007488:	f107 0310 	add.w	r3, r7, #16
 800748c:	4611      	mov	r1, r2
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fece 	bl	8008230 <xTaskCheckForTimeOut>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d123      	bne.n	80074e2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800749a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800749c:	f000 f916 	bl	80076cc <prvIsQueueEmpty>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d017      	beq.n	80074d6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	3324      	adds	r3, #36	@ 0x24
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fdec 	bl	800808c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074b6:	f000 f8b7 	bl	8007628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074ba:	f000 fc13 	bl	8007ce4 <xTaskResumeAll>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d189      	bne.n	80073d8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80074c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <xQueueReceive+0x1cc>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	e780      	b.n	80073d8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074d8:	f000 f8a6 	bl	8007628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074dc:	f000 fc02 	bl	8007ce4 <xTaskResumeAll>
 80074e0:	e77a      	b.n	80073d8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e4:	f000 f8a0 	bl	8007628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074e8:	f000 fbfc 	bl	8007ce4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074ee:	f000 f8ed 	bl	80076cc <prvIsQueueEmpty>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f43f af6f 	beq.w	80073d8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80074fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3730      	adds	r7, #48	@ 0x30
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	e000ed04 	.word	0xe000ed04

08007508 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10d      	bne.n	8007542 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d14d      	bne.n	80075ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 ffec 	bl	8008510 <xTaskPriorityDisinherit>
 8007538:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	e043      	b.n	80075ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d119      	bne.n	800757c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6858      	ldr	r0, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007550:	461a      	mov	r2, r3
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	f002 fb01 	bl	8009b5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007560:	441a      	add	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	429a      	cmp	r2, r3
 8007570:	d32b      	bcc.n	80075ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	e026      	b.n	80075ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68d8      	ldr	r0, [r3, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007584:	461a      	mov	r2, r3
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	f002 fae7 	bl	8009b5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007594:	425b      	negs	r3, r3
 8007596:	441a      	add	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d207      	bcs.n	80075b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689a      	ldr	r2, [r3, #8]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b0:	425b      	negs	r3, r3
 80075b2:	441a      	add	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d105      	bne.n	80075ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80075d2:	697b      	ldr	r3, [r7, #20]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d018      	beq.n	8007620 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f6:	441a      	add	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	429a      	cmp	r2, r3
 8007606:	d303      	bcc.n	8007610 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	68d9      	ldr	r1, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007618:	461a      	mov	r2, r3
 800761a:	6838      	ldr	r0, [r7, #0]
 800761c:	f002 fa9d 	bl	8009b5a <memcpy>
	}
}
 8007620:	bf00      	nop
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007630:	f001 fd9c 	bl	800916c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800763a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800763c:	e011      	b.n	8007662 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007642:	2b00      	cmp	r3, #0
 8007644:	d012      	beq.n	800766c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	3324      	adds	r3, #36	@ 0x24
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fd74 	bl	8008138 <xTaskRemoveFromEventList>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007656:	f000 fe53 	bl	8008300 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	3b01      	subs	r3, #1
 800765e:	b2db      	uxtb	r3, r3
 8007660:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007666:	2b00      	cmp	r3, #0
 8007668:	dce9      	bgt.n	800763e <prvUnlockQueue+0x16>
 800766a:	e000      	b.n	800766e <prvUnlockQueue+0x46>
					break;
 800766c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	22ff      	movs	r2, #255	@ 0xff
 8007672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007676:	f001 fdaf 	bl	80091d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800767a:	f001 fd77 	bl	800916c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007684:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007686:	e011      	b.n	80076ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d012      	beq.n	80076b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3310      	adds	r3, #16
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fd4f 	bl	8008138 <xTaskRemoveFromEventList>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076a0:	f000 fe2e 	bl	8008300 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dce9      	bgt.n	8007688 <prvUnlockQueue+0x60>
 80076b4:	e000      	b.n	80076b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	22ff      	movs	r2, #255	@ 0xff
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80076c0:	f001 fd8a 	bl	80091d8 <vPortExitCritical>
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076d4:	f001 fd4a 	bl	800916c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d102      	bne.n	80076e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e001      	b.n	80076ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ea:	f001 fd75 	bl	80091d8 <vPortExitCritical>

	return xReturn;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007700:	f001 fd34 	bl	800916c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770c:	429a      	cmp	r2, r3
 800770e:	d102      	bne.n	8007716 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007710:	2301      	movs	r3, #1
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e001      	b.n	800771a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800771a:	f001 fd5d 	bl	80091d8 <vPortExitCritical>

	return xReturn;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	e014      	b.n	8007762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007738:	4a0f      	ldr	r2, [pc, #60]	@ (8007778 <vQueueAddToRegistry+0x50>)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007744:	490c      	ldr	r1, [pc, #48]	@ (8007778 <vQueueAddToRegistry+0x50>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800774e:	4a0a      	ldr	r2, [pc, #40]	@ (8007778 <vQueueAddToRegistry+0x50>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	4413      	add	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800775a:	e006      	b.n	800776a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b07      	cmp	r3, #7
 8007766:	d9e7      	bls.n	8007738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20001bf8 	.word	0x20001bf8

0800777c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800778c:	f001 fcee 	bl	800916c <vPortEnterCritical>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007796:	b25b      	sxtb	r3, r3
 8007798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779c:	d103      	bne.n	80077a6 <vQueueWaitForMessageRestricted+0x2a>
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ac:	b25b      	sxtb	r3, r3
 80077ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b2:	d103      	bne.n	80077bc <vQueueWaitForMessageRestricted+0x40>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077bc:	f001 fd0c 	bl	80091d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d106      	bne.n	80077d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	3324      	adds	r3, #36	@ 0x24
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68b9      	ldr	r1, [r7, #8]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 fc83 	bl	80080dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077d6:	6978      	ldr	r0, [r7, #20]
 80077d8:	f7ff ff26 	bl	8007628 <prvUnlockQueue>
	}
 80077dc:	bf00      	nop
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08e      	sub	sp, #56	@ 0x38
 80077e8:	af04      	add	r7, sp, #16
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10d      	bne.n	8007814 <xTaskCreateStatic+0x30>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	b672      	cpsid	i
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	b662      	cpsie	i
 800780c:	623b      	str	r3, [r7, #32]
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	e7fd      	b.n	8007810 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10d      	bne.n	8007836 <xTaskCreateStatic+0x52>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	b672      	cpsid	i
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	b662      	cpsie	i
 800782e:	61fb      	str	r3, [r7, #28]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007836:	23a8      	movs	r3, #168	@ 0xa8
 8007838:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2ba8      	cmp	r3, #168	@ 0xa8
 800783e:	d00d      	beq.n	800785c <xTaskCreateStatic+0x78>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007844:	b672      	cpsid	i
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	b662      	cpsie	i
 8007854:	61bb      	str	r3, [r7, #24]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800785c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800785e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007860:	2b00      	cmp	r3, #0
 8007862:	d01e      	beq.n	80078a2 <xTaskCreateStatic+0xbe>
 8007864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01b      	beq.n	80078a2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007872:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	2202      	movs	r2, #2
 8007878:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800787c:	2300      	movs	r3, #0
 800787e:	9303      	str	r3, [sp, #12]
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	9302      	str	r3, [sp, #8]
 8007884:	f107 0314 	add.w	r3, r7, #20
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 f851 	bl	800793c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800789a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800789c:	f000 f8f8 	bl	8007a90 <prvAddNewTaskToReadyList>
 80078a0:	e001      	b.n	80078a6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078a6:	697b      	ldr	r3, [r7, #20]
	}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3728      	adds	r7, #40	@ 0x28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08c      	sub	sp, #48	@ 0x30
 80078b4:	af04      	add	r7, sp, #16
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	603b      	str	r3, [r7, #0]
 80078bc:	4613      	mov	r3, r2
 80078be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078c0:	88fb      	ldrh	r3, [r7, #6]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 fd7f 	bl	80093c8 <pvPortMalloc>
 80078ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00e      	beq.n	80078f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078d2:	20a8      	movs	r0, #168	@ 0xa8
 80078d4:	f001 fd78 	bl	80093c8 <pvPortMalloc>
 80078d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80078e6:	e005      	b.n	80078f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078e8:	6978      	ldr	r0, [r7, #20]
 80078ea:	f001 fe3b 	bl	8009564 <vPortFree>
 80078ee:	e001      	b.n	80078f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d017      	beq.n	800792a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007902:	88fa      	ldrh	r2, [r7, #6]
 8007904:	2300      	movs	r3, #0
 8007906:	9303      	str	r3, [sp, #12]
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	9302      	str	r3, [sp, #8]
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	9301      	str	r3, [sp, #4]
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f80f 	bl	800793c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800791e:	69f8      	ldr	r0, [r7, #28]
 8007920:	f000 f8b6 	bl	8007a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007924:	2301      	movs	r3, #1
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	e002      	b.n	8007930 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800792a:	f04f 33ff 	mov.w	r3, #4294967295
 800792e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007930:	69bb      	ldr	r3, [r7, #24]
	}
 8007932:	4618      	mov	r0, r3
 8007934:	3720      	adds	r7, #32
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	461a      	mov	r2, r3
 8007954:	21a5      	movs	r1, #165	@ 0xa5
 8007956:	f002 f838 	bl	80099ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800795a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007964:	440b      	add	r3, r1
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4413      	add	r3, r2
 800796a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	f023 0307 	bic.w	r3, r3, #7
 8007972:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00d      	beq.n	800799a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	b672      	cpsid	i
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	b662      	cpsie	i
 8007992:	617b      	str	r3, [r7, #20]
}
 8007994:	bf00      	nop
 8007996:	bf00      	nop
 8007998:	e7fd      	b.n	8007996 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01f      	beq.n	80079e0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079a0:	2300      	movs	r3, #0
 80079a2:	61fb      	str	r3, [r7, #28]
 80079a4:	e012      	b.n	80079cc <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	4413      	add	r3, r2
 80079ac:	7819      	ldrb	r1, [r3, #0]
 80079ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	4413      	add	r3, r2
 80079b4:	3334      	adds	r3, #52	@ 0x34
 80079b6:	460a      	mov	r2, r1
 80079b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	4413      	add	r3, r2
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d006      	beq.n	80079d4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	3301      	adds	r3, #1
 80079ca:	61fb      	str	r3, [r7, #28]
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	2b0f      	cmp	r3, #15
 80079d0:	d9e9      	bls.n	80079a6 <prvInitialiseNewTask+0x6a>
 80079d2:	e000      	b.n	80079d6 <prvInitialiseNewTask+0x9a>
			{
				break;
 80079d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079de:	e003      	b.n	80079e8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ea:	2b37      	cmp	r3, #55	@ 0x37
 80079ec:	d901      	bls.n	80079f2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079ee:	2337      	movs	r3, #55	@ 0x37
 80079f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	2200      	movs	r2, #0
 8007a02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff f93d 	bl	8006c88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a10:	3318      	adds	r3, #24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff f938 	bl	8006c88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a30:	2200      	movs	r2, #0
 8007a32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a40:	3354      	adds	r3, #84	@ 0x54
 8007a42:	224c      	movs	r2, #76	@ 0x4c
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 ffbf 	bl	80099ca <memset>
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8007a84 <prvInitialiseNewTask+0x148>)
 8007a50:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	4a0c      	ldr	r2, [pc, #48]	@ (8007a88 <prvInitialiseNewTask+0x14c>)
 8007a56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a8c <prvInitialiseNewTask+0x150>)
 8007a5c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	68f9      	ldr	r1, [r7, #12]
 8007a62:	69b8      	ldr	r0, [r7, #24]
 8007a64:	f001 fa72 	bl	8008f4c <pxPortInitialiseStack>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a7a:	bf00      	nop
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20005e84 	.word	0x20005e84
 8007a88:	20005eec 	.word	0x20005eec
 8007a8c:	20005f54 	.word	0x20005f54

08007a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a98:	f001 fb68 	bl	800916c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8007b54 <prvAddNewTaskToReadyList+0xc4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8007b54 <prvAddNewTaskToReadyList+0xc4>)
 8007aa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b58 <prvAddNewTaskToReadyList+0xc8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d109      	bne.n	8007ac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007aae:	4a2a      	ldr	r2, [pc, #168]	@ (8007b58 <prvAddNewTaskToReadyList+0xc8>)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ab4:	4b27      	ldr	r3, [pc, #156]	@ (8007b54 <prvAddNewTaskToReadyList+0xc4>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d110      	bne.n	8007ade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007abc:	f000 fc44 	bl	8008348 <prvInitialiseTaskLists>
 8007ac0:	e00d      	b.n	8007ade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ac2:	4b26      	ldr	r3, [pc, #152]	@ (8007b5c <prvAddNewTaskToReadyList+0xcc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aca:	4b23      	ldr	r3, [pc, #140]	@ (8007b58 <prvAddNewTaskToReadyList+0xc8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d802      	bhi.n	8007ade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b58 <prvAddNewTaskToReadyList+0xc8>)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ade:	4b20      	ldr	r3, [pc, #128]	@ (8007b60 <prvAddNewTaskToReadyList+0xd0>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8007b60 <prvAddNewTaskToReadyList+0xd0>)
 8007ae6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8007b60 <prvAddNewTaskToReadyList+0xd0>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b64 <prvAddNewTaskToReadyList+0xd4>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d903      	bls.n	8007b04 <prvAddNewTaskToReadyList+0x74>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	4a18      	ldr	r2, [pc, #96]	@ (8007b64 <prvAddNewTaskToReadyList+0xd4>)
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b08:	4613      	mov	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4a15      	ldr	r2, [pc, #84]	@ (8007b68 <prvAddNewTaskToReadyList+0xd8>)
 8007b12:	441a      	add	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f7ff f8c1 	bl	8006ca2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b20:	f001 fb5a 	bl	80091d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b24:	4b0d      	ldr	r3, [pc, #52]	@ (8007b5c <prvAddNewTaskToReadyList+0xcc>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00e      	beq.n	8007b4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b58 <prvAddNewTaskToReadyList+0xc8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d207      	bcs.n	8007b4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b6c <prvAddNewTaskToReadyList+0xdc>)
 8007b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	2000210c 	.word	0x2000210c
 8007b58:	20001c38 	.word	0x20001c38
 8007b5c:	20002118 	.word	0x20002118
 8007b60:	20002128 	.word	0x20002128
 8007b64:	20002114 	.word	0x20002114
 8007b68:	20001c3c 	.word	0x20001c3c
 8007b6c:	e000ed04 	.word	0xe000ed04

08007b70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d01a      	beq.n	8007bb8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b82:	4b15      	ldr	r3, [pc, #84]	@ (8007bd8 <vTaskDelay+0x68>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00d      	beq.n	8007ba6 <vTaskDelay+0x36>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	b672      	cpsid	i
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	b662      	cpsie	i
 8007b9e:	60bb      	str	r3, [r7, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007ba6:	f000 f88f 	bl	8007cc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fe11 	bl	80087d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bb2:	f000 f897 	bl	8007ce4 <xTaskResumeAll>
 8007bb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d107      	bne.n	8007bce <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8007bbe:	4b07      	ldr	r3, [pc, #28]	@ (8007bdc <vTaskDelay+0x6c>)
 8007bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20002134 	.word	0x20002134
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08a      	sub	sp, #40	@ 0x28
 8007be4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bee:	463a      	mov	r2, r7
 8007bf0:	1d39      	adds	r1, r7, #4
 8007bf2:	f107 0308 	add.w	r3, r7, #8
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe fff2 	bl	8006be0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	9202      	str	r2, [sp, #8]
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	2300      	movs	r3, #0
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	460a      	mov	r2, r1
 8007c0e:	4926      	ldr	r1, [pc, #152]	@ (8007ca8 <vTaskStartScheduler+0xc8>)
 8007c10:	4826      	ldr	r0, [pc, #152]	@ (8007cac <vTaskStartScheduler+0xcc>)
 8007c12:	f7ff fde7 	bl	80077e4 <xTaskCreateStatic>
 8007c16:	4603      	mov	r3, r0
 8007c18:	4a25      	ldr	r2, [pc, #148]	@ (8007cb0 <vTaskStartScheduler+0xd0>)
 8007c1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c1c:	4b24      	ldr	r3, [pc, #144]	@ (8007cb0 <vTaskStartScheduler+0xd0>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c24:	2301      	movs	r3, #1
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e001      	b.n	8007c2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d102      	bne.n	8007c3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c34:	f000 fe22 	bl	800887c <xTimerCreateTimerTask>
 8007c38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d11d      	bne.n	8007c7c <vTaskStartScheduler+0x9c>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c44:	b672      	cpsid	i
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	b662      	cpsie	i
 8007c54:	613b      	str	r3, [r7, #16]
}
 8007c56:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c58:	4b16      	ldr	r3, [pc, #88]	@ (8007cb4 <vTaskStartScheduler+0xd4>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3354      	adds	r3, #84	@ 0x54
 8007c5e:	4a16      	ldr	r2, [pc, #88]	@ (8007cb8 <vTaskStartScheduler+0xd8>)
 8007c60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c62:	4b16      	ldr	r3, [pc, #88]	@ (8007cbc <vTaskStartScheduler+0xdc>)
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295
 8007c68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c6a:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <vTaskStartScheduler+0xe0>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c70:	4b14      	ldr	r3, [pc, #80]	@ (8007cc4 <vTaskStartScheduler+0xe4>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c76:	f001 f9fb 	bl	8009070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c7a:	e011      	b.n	8007ca0 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d10d      	bne.n	8007ca0 <vTaskStartScheduler+0xc0>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c88:	b672      	cpsid	i
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	b662      	cpsie	i
 8007c98:	60fb      	str	r3, [r7, #12]
}
 8007c9a:	bf00      	nop
 8007c9c:	bf00      	nop
 8007c9e:	e7fd      	b.n	8007c9c <vTaskStartScheduler+0xbc>
}
 8007ca0:	bf00      	nop
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	0800a74c 	.word	0x0800a74c
 8007cac:	08008319 	.word	0x08008319
 8007cb0:	20002130 	.word	0x20002130
 8007cb4:	20001c38 	.word	0x20001c38
 8007cb8:	2000001c 	.word	0x2000001c
 8007cbc:	2000212c 	.word	0x2000212c
 8007cc0:	20002118 	.word	0x20002118
 8007cc4:	20002110 	.word	0x20002110

08007cc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ccc:	4b04      	ldr	r3, [pc, #16]	@ (8007ce0 <vTaskSuspendAll+0x18>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	4a03      	ldr	r2, [pc, #12]	@ (8007ce0 <vTaskSuspendAll+0x18>)
 8007cd4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007cd6:	bf00      	nop
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20002134 	.word	0x20002134

08007ce4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cf2:	4b43      	ldr	r3, [pc, #268]	@ (8007e00 <xTaskResumeAll+0x11c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10d      	bne.n	8007d16 <xTaskResumeAll+0x32>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfe:	b672      	cpsid	i
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	b662      	cpsie	i
 8007d0e:	603b      	str	r3, [r7, #0]
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	e7fd      	b.n	8007d12 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d16:	f001 fa29 	bl	800916c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d1a:	4b39      	ldr	r3, [pc, #228]	@ (8007e00 <xTaskResumeAll+0x11c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	4a37      	ldr	r2, [pc, #220]	@ (8007e00 <xTaskResumeAll+0x11c>)
 8007d22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d24:	4b36      	ldr	r3, [pc, #216]	@ (8007e00 <xTaskResumeAll+0x11c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d162      	bne.n	8007df2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d2c:	4b35      	ldr	r3, [pc, #212]	@ (8007e04 <xTaskResumeAll+0x120>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d05e      	beq.n	8007df2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d34:	e02f      	b.n	8007d96 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d36:	4b34      	ldr	r3, [pc, #208]	@ (8007e08 <xTaskResumeAll+0x124>)
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3318      	adds	r3, #24
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff f80a 	bl	8006d5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff f805 	bl	8006d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	4b2d      	ldr	r3, [pc, #180]	@ (8007e0c <xTaskResumeAll+0x128>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d903      	bls.n	8007d66 <xTaskResumeAll+0x82>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	4a2a      	ldr	r2, [pc, #168]	@ (8007e0c <xTaskResumeAll+0x128>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4a27      	ldr	r2, [pc, #156]	@ (8007e10 <xTaskResumeAll+0x12c>)
 8007d74:	441a      	add	r2, r3
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe ff90 	bl	8006ca2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d86:	4b23      	ldr	r3, [pc, #140]	@ (8007e14 <xTaskResumeAll+0x130>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d302      	bcc.n	8007d96 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8007d90:	4b21      	ldr	r3, [pc, #132]	@ (8007e18 <xTaskResumeAll+0x134>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d96:	4b1c      	ldr	r3, [pc, #112]	@ (8007e08 <xTaskResumeAll+0x124>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1cb      	bne.n	8007d36 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007da4:	f000 fb76 	bl	8008494 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007da8:	4b1c      	ldr	r3, [pc, #112]	@ (8007e1c <xTaskResumeAll+0x138>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d010      	beq.n	8007dd6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007db4:	f000 f846 	bl	8007e44 <xTaskIncrementTick>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8007dbe:	4b16      	ldr	r3, [pc, #88]	@ (8007e18 <xTaskResumeAll+0x134>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f1      	bne.n	8007db4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007dd0:	4b12      	ldr	r3, [pc, #72]	@ (8007e1c <xTaskResumeAll+0x138>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dd6:	4b10      	ldr	r3, [pc, #64]	@ (8007e18 <xTaskResumeAll+0x134>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007de2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e20 <xTaskResumeAll+0x13c>)
 8007de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007df2:	f001 f9f1 	bl	80091d8 <vPortExitCritical>

	return xAlreadyYielded;
 8007df6:	68bb      	ldr	r3, [r7, #8]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20002134 	.word	0x20002134
 8007e04:	2000210c 	.word	0x2000210c
 8007e08:	200020cc 	.word	0x200020cc
 8007e0c:	20002114 	.word	0x20002114
 8007e10:	20001c3c 	.word	0x20001c3c
 8007e14:	20001c38 	.word	0x20001c38
 8007e18:	20002120 	.word	0x20002120
 8007e1c:	2000211c 	.word	0x2000211c
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e2a:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <xTaskGetTickCount+0x1c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e30:	687b      	ldr	r3, [r7, #4]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20002110 	.word	0x20002110

08007e44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e4e:	4b50      	ldr	r3, [pc, #320]	@ (8007f90 <xTaskIncrementTick+0x14c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f040 808c 	bne.w	8007f70 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e58:	4b4e      	ldr	r3, [pc, #312]	@ (8007f94 <xTaskIncrementTick+0x150>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e60:	4a4c      	ldr	r2, [pc, #304]	@ (8007f94 <xTaskIncrementTick+0x150>)
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d123      	bne.n	8007eb4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8007f98 <xTaskIncrementTick+0x154>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <xTaskIncrementTick+0x4e>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	b672      	cpsid	i
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	b662      	cpsie	i
 8007e8a:	603b      	str	r3, [r7, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	bf00      	nop
 8007e90:	e7fd      	b.n	8007e8e <xTaskIncrementTick+0x4a>
 8007e92:	4b41      	ldr	r3, [pc, #260]	@ (8007f98 <xTaskIncrementTick+0x154>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	4b40      	ldr	r3, [pc, #256]	@ (8007f9c <xTaskIncrementTick+0x158>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f98 <xTaskIncrementTick+0x154>)
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8007f9c <xTaskIncrementTick+0x158>)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fa0 <xTaskIncrementTick+0x15c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	4a3c      	ldr	r2, [pc, #240]	@ (8007fa0 <xTaskIncrementTick+0x15c>)
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	f000 faf0 	bl	8008494 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8007fa4 <xTaskIncrementTick+0x160>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d349      	bcc.n	8007f52 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ebe:	4b36      	ldr	r3, [pc, #216]	@ (8007f98 <xTaskIncrementTick+0x154>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec8:	4b36      	ldr	r3, [pc, #216]	@ (8007fa4 <xTaskIncrementTick+0x160>)
 8007eca:	f04f 32ff 	mov.w	r2, #4294967295
 8007ece:	601a      	str	r2, [r3, #0]
					break;
 8007ed0:	e03f      	b.n	8007f52 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed2:	4b31      	ldr	r3, [pc, #196]	@ (8007f98 <xTaskIncrementTick+0x154>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d203      	bcs.n	8007ef2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007eea:	4a2e      	ldr	r2, [pc, #184]	@ (8007fa4 <xTaskIncrementTick+0x160>)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ef0:	e02f      	b.n	8007f52 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe ff30 	bl	8006d5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d004      	beq.n	8007f0e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	3318      	adds	r3, #24
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fe ff27 	bl	8006d5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f12:	4b25      	ldr	r3, [pc, #148]	@ (8007fa8 <xTaskIncrementTick+0x164>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d903      	bls.n	8007f22 <xTaskIncrementTick+0xde>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1e:	4a22      	ldr	r2, [pc, #136]	@ (8007fa8 <xTaskIncrementTick+0x164>)
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007fac <xTaskIncrementTick+0x168>)
 8007f30:	441a      	add	r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	3304      	adds	r3, #4
 8007f36:	4619      	mov	r1, r3
 8007f38:	4610      	mov	r0, r2
 8007f3a:	f7fe feb2 	bl	8006ca2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f42:	4b1b      	ldr	r3, [pc, #108]	@ (8007fb0 <xTaskIncrementTick+0x16c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d3b8      	bcc.n	8007ebe <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f50:	e7b5      	b.n	8007ebe <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f52:	4b17      	ldr	r3, [pc, #92]	@ (8007fb0 <xTaskIncrementTick+0x16c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f58:	4914      	ldr	r1, [pc, #80]	@ (8007fac <xTaskIncrementTick+0x168>)
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	440b      	add	r3, r1
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d907      	bls.n	8007f7a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	e004      	b.n	8007f7a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f70:	4b10      	ldr	r3, [pc, #64]	@ (8007fb4 <xTaskIncrementTick+0x170>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	4a0f      	ldr	r2, [pc, #60]	@ (8007fb4 <xTaskIncrementTick+0x170>)
 8007f78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007fb8 <xTaskIncrementTick+0x174>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007f82:	2301      	movs	r3, #1
 8007f84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f86:	697b      	ldr	r3, [r7, #20]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20002134 	.word	0x20002134
 8007f94:	20002110 	.word	0x20002110
 8007f98:	200020c4 	.word	0x200020c4
 8007f9c:	200020c8 	.word	0x200020c8
 8007fa0:	20002124 	.word	0x20002124
 8007fa4:	2000212c 	.word	0x2000212c
 8007fa8:	20002114 	.word	0x20002114
 8007fac:	20001c3c 	.word	0x20001c3c
 8007fb0:	20001c38 	.word	0x20001c38
 8007fb4:	2000211c 	.word	0x2000211c
 8007fb8:	20002120 	.word	0x20002120

08007fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8008074 <vTaskSwitchContext+0xb8>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fca:	4b2b      	ldr	r3, [pc, #172]	@ (8008078 <vTaskSwitchContext+0xbc>)
 8007fcc:	2201      	movs	r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fd0:	e049      	b.n	8008066 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007fd2:	4b29      	ldr	r3, [pc, #164]	@ (8008078 <vTaskSwitchContext+0xbc>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd8:	4b28      	ldr	r3, [pc, #160]	@ (800807c <vTaskSwitchContext+0xc0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60fb      	str	r3, [r7, #12]
 8007fde:	e013      	b.n	8008008 <vTaskSwitchContext+0x4c>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10d      	bne.n	8008002 <vTaskSwitchContext+0x46>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	b672      	cpsid	i
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	b662      	cpsie	i
 8007ffa:	607b      	str	r3, [r7, #4]
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	e7fd      	b.n	8007ffe <vTaskSwitchContext+0x42>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3b01      	subs	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	491d      	ldr	r1, [pc, #116]	@ (8008080 <vTaskSwitchContext+0xc4>)
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0e1      	beq.n	8007fe0 <vTaskSwitchContext+0x24>
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4a16      	ldr	r2, [pc, #88]	@ (8008080 <vTaskSwitchContext+0xc4>)
 8008028:	4413      	add	r3, r2
 800802a:	60bb      	str	r3, [r7, #8]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	3308      	adds	r3, #8
 800803e:	429a      	cmp	r2, r3
 8008040:	d104      	bne.n	800804c <vTaskSwitchContext+0x90>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	605a      	str	r2, [r3, #4]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	4a0c      	ldr	r2, [pc, #48]	@ (8008084 <vTaskSwitchContext+0xc8>)
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	4a09      	ldr	r2, [pc, #36]	@ (800807c <vTaskSwitchContext+0xc0>)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800805c:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <vTaskSwitchContext+0xc8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3354      	adds	r3, #84	@ 0x54
 8008062:	4a09      	ldr	r2, [pc, #36]	@ (8008088 <vTaskSwitchContext+0xcc>)
 8008064:	6013      	str	r3, [r2, #0]
}
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20002134 	.word	0x20002134
 8008078:	20002120 	.word	0x20002120
 800807c:	20002114 	.word	0x20002114
 8008080:	20001c3c 	.word	0x20001c3c
 8008084:	20001c38 	.word	0x20001c38
 8008088:	2000001c 	.word	0x2000001c

0800808c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10d      	bne.n	80080b8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a0:	b672      	cpsid	i
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	b662      	cpsie	i
 80080b0:	60fb      	str	r3, [r7, #12]
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	e7fd      	b.n	80080b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080b8:	4b07      	ldr	r3, [pc, #28]	@ (80080d8 <vTaskPlaceOnEventList+0x4c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3318      	adds	r3, #24
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7fe fe12 	bl	8006cea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080c6:	2101      	movs	r1, #1
 80080c8:	6838      	ldr	r0, [r7, #0]
 80080ca:	f000 fb83 	bl	80087d4 <prvAddCurrentTaskToDelayedList>
}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20001c38 	.word	0x20001c38

080080dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10d      	bne.n	800810a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f2:	b672      	cpsid	i
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	b662      	cpsie	i
 8008102:	617b      	str	r3, [r7, #20]
}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	e7fd      	b.n	8008106 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800810a:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <vTaskPlaceOnEventListRestricted+0x58>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3318      	adds	r3, #24
 8008110:	4619      	mov	r1, r3
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7fe fdc5 	bl	8006ca2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800811e:	f04f 33ff 	mov.w	r3, #4294967295
 8008122:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	68b8      	ldr	r0, [r7, #8]
 8008128:	f000 fb54 	bl	80087d4 <prvAddCurrentTaskToDelayedList>
	}
 800812c:	bf00      	nop
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20001c38 	.word	0x20001c38

08008138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10d      	bne.n	800816a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	b672      	cpsid	i
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	b662      	cpsie	i
 8008162:	60fb      	str	r3, [r7, #12]
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3318      	adds	r3, #24
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe fdf4 	bl	8006d5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008174:	4b1d      	ldr	r3, [pc, #116]	@ (80081ec <xTaskRemoveFromEventList+0xb4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d11d      	bne.n	80081b8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	3304      	adds	r3, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fdeb 	bl	8006d5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800818a:	4b19      	ldr	r3, [pc, #100]	@ (80081f0 <xTaskRemoveFromEventList+0xb8>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d903      	bls.n	800819a <xTaskRemoveFromEventList+0x62>
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008196:	4a16      	ldr	r2, [pc, #88]	@ (80081f0 <xTaskRemoveFromEventList+0xb8>)
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4a13      	ldr	r2, [pc, #76]	@ (80081f4 <xTaskRemoveFromEventList+0xbc>)
 80081a8:	441a      	add	r2, r3
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4619      	mov	r1, r3
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7fe fd76 	bl	8006ca2 <vListInsertEnd>
 80081b6:	e005      	b.n	80081c4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	3318      	adds	r3, #24
 80081bc:	4619      	mov	r1, r3
 80081be:	480e      	ldr	r0, [pc, #56]	@ (80081f8 <xTaskRemoveFromEventList+0xc0>)
 80081c0:	f7fe fd6f 	bl	8006ca2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c8:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <xTaskRemoveFromEventList+0xc4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d905      	bls.n	80081de <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081d2:	2301      	movs	r3, #1
 80081d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008200 <xTaskRemoveFromEventList+0xc8>)
 80081d8:	2201      	movs	r2, #1
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e001      	b.n	80081e2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80081de:	2300      	movs	r3, #0
 80081e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081e2:	697b      	ldr	r3, [r7, #20]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20002134 	.word	0x20002134
 80081f0:	20002114 	.word	0x20002114
 80081f4:	20001c3c 	.word	0x20001c3c
 80081f8:	200020cc 	.word	0x200020cc
 80081fc:	20001c38 	.word	0x20001c38
 8008200:	20002120 	.word	0x20002120

08008204 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800820c:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <vTaskInternalSetTimeOutState+0x24>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008214:	4b05      	ldr	r3, [pc, #20]	@ (800822c <vTaskInternalSetTimeOutState+0x28>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	605a      	str	r2, [r3, #4]
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	20002124 	.word	0x20002124
 800822c:	20002110 	.word	0x20002110

08008230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10d      	bne.n	800825c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	b672      	cpsid	i
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	b662      	cpsie	i
 8008254:	613b      	str	r3, [r7, #16]
}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10d      	bne.n	800827e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	b672      	cpsid	i
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	b662      	cpsie	i
 8008276:	60fb      	str	r3, [r7, #12]
}
 8008278:	bf00      	nop
 800827a:	bf00      	nop
 800827c:	e7fd      	b.n	800827a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800827e:	f000 ff75 	bl	800916c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008282:	4b1d      	ldr	r3, [pc, #116]	@ (80082f8 <xTaskCheckForTimeOut+0xc8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829a:	d102      	bne.n	80082a2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	e023      	b.n	80082ea <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b15      	ldr	r3, [pc, #84]	@ (80082fc <xTaskCheckForTimeOut+0xcc>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d007      	beq.n	80082be <xTaskCheckForTimeOut+0x8e>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d302      	bcc.n	80082be <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	61fb      	str	r3, [r7, #28]
 80082bc:	e015      	b.n	80082ea <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d20b      	bcs.n	80082e0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff ff95 	bl	8008204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	e004      	b.n	80082ea <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082ea:	f000 ff75 	bl	80091d8 <vPortExitCritical>

	return xReturn;
 80082ee:	69fb      	ldr	r3, [r7, #28]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3720      	adds	r7, #32
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20002110 	.word	0x20002110
 80082fc:	20002124 	.word	0x20002124

08008300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008304:	4b03      	ldr	r3, [pc, #12]	@ (8008314 <vTaskMissedYield+0x14>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]
}
 800830a:	bf00      	nop
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	20002120 	.word	0x20002120

08008318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008320:	f000 f852 	bl	80083c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008324:	4b06      	ldr	r3, [pc, #24]	@ (8008340 <prvIdleTask+0x28>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d9f9      	bls.n	8008320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800832c:	4b05      	ldr	r3, [pc, #20]	@ (8008344 <prvIdleTask+0x2c>)
 800832e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800833c:	e7f0      	b.n	8008320 <prvIdleTask+0x8>
 800833e:	bf00      	nop
 8008340:	20001c3c 	.word	0x20001c3c
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800834e:	2300      	movs	r3, #0
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	e00c      	b.n	800836e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4a12      	ldr	r2, [pc, #72]	@ (80083a8 <prvInitialiseTaskLists+0x60>)
 8008360:	4413      	add	r3, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fc70 	bl	8006c48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3301      	adds	r3, #1
 800836c:	607b      	str	r3, [r7, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b37      	cmp	r3, #55	@ 0x37
 8008372:	d9ef      	bls.n	8008354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008374:	480d      	ldr	r0, [pc, #52]	@ (80083ac <prvInitialiseTaskLists+0x64>)
 8008376:	f7fe fc67 	bl	8006c48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800837a:	480d      	ldr	r0, [pc, #52]	@ (80083b0 <prvInitialiseTaskLists+0x68>)
 800837c:	f7fe fc64 	bl	8006c48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008380:	480c      	ldr	r0, [pc, #48]	@ (80083b4 <prvInitialiseTaskLists+0x6c>)
 8008382:	f7fe fc61 	bl	8006c48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008386:	480c      	ldr	r0, [pc, #48]	@ (80083b8 <prvInitialiseTaskLists+0x70>)
 8008388:	f7fe fc5e 	bl	8006c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800838c:	480b      	ldr	r0, [pc, #44]	@ (80083bc <prvInitialiseTaskLists+0x74>)
 800838e:	f7fe fc5b 	bl	8006c48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008392:	4b0b      	ldr	r3, [pc, #44]	@ (80083c0 <prvInitialiseTaskLists+0x78>)
 8008394:	4a05      	ldr	r2, [pc, #20]	@ (80083ac <prvInitialiseTaskLists+0x64>)
 8008396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008398:	4b0a      	ldr	r3, [pc, #40]	@ (80083c4 <prvInitialiseTaskLists+0x7c>)
 800839a:	4a05      	ldr	r2, [pc, #20]	@ (80083b0 <prvInitialiseTaskLists+0x68>)
 800839c:	601a      	str	r2, [r3, #0]
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20001c3c 	.word	0x20001c3c
 80083ac:	2000209c 	.word	0x2000209c
 80083b0:	200020b0 	.word	0x200020b0
 80083b4:	200020cc 	.word	0x200020cc
 80083b8:	200020e0 	.word	0x200020e0
 80083bc:	200020f8 	.word	0x200020f8
 80083c0:	200020c4 	.word	0x200020c4
 80083c4:	200020c8 	.word	0x200020c8

080083c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ce:	e019      	b.n	8008404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083d0:	f000 fecc 	bl	800916c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d4:	4b10      	ldr	r3, [pc, #64]	@ (8008418 <prvCheckTasksWaitingTermination+0x50>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fcbb 	bl	8006d5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083e6:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <prvCheckTasksWaitingTermination+0x54>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4a0b      	ldr	r2, [pc, #44]	@ (800841c <prvCheckTasksWaitingTermination+0x54>)
 80083ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008420 <prvCheckTasksWaitingTermination+0x58>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	4a0a      	ldr	r2, [pc, #40]	@ (8008420 <prvCheckTasksWaitingTermination+0x58>)
 80083f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083fa:	f000 feed 	bl	80091d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f810 	bl	8008424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008404:	4b06      	ldr	r3, [pc, #24]	@ (8008420 <prvCheckTasksWaitingTermination+0x58>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e1      	bne.n	80083d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200020e0 	.word	0x200020e0
 800841c:	2000210c 	.word	0x2000210c
 8008420:	200020f4 	.word	0x200020f4

08008424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3354      	adds	r3, #84	@ 0x54
 8008430:	4618      	mov	r0, r3
 8008432:	f001 fae3 	bl	80099fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800843c:	2b00      	cmp	r3, #0
 800843e:	d108      	bne.n	8008452 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008444:	4618      	mov	r0, r3
 8008446:	f001 f88d 	bl	8009564 <vPortFree>
				vPortFree( pxTCB );
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 f88a 	bl	8009564 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008450:	e01b      	b.n	800848a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008458:	2b01      	cmp	r3, #1
 800845a:	d103      	bne.n	8008464 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 f881 	bl	8009564 <vPortFree>
	}
 8008462:	e012      	b.n	800848a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800846a:	2b02      	cmp	r3, #2
 800846c:	d00d      	beq.n	800848a <prvDeleteTCB+0x66>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	b672      	cpsid	i
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	b662      	cpsie	i
 8008482:	60fb      	str	r3, [r7, #12]
}
 8008484:	bf00      	nop
 8008486:	bf00      	nop
 8008488:	e7fd      	b.n	8008486 <prvDeleteTCB+0x62>
	}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800849a:	4b0c      	ldr	r3, [pc, #48]	@ (80084cc <prvResetNextTaskUnblockTime+0x38>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084a4:	4b0a      	ldr	r3, [pc, #40]	@ (80084d0 <prvResetNextTaskUnblockTime+0x3c>)
 80084a6:	f04f 32ff 	mov.w	r2, #4294967295
 80084aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084ac:	e008      	b.n	80084c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ae:	4b07      	ldr	r3, [pc, #28]	@ (80084cc <prvResetNextTaskUnblockTime+0x38>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4a04      	ldr	r2, [pc, #16]	@ (80084d0 <prvResetNextTaskUnblockTime+0x3c>)
 80084be:	6013      	str	r3, [r2, #0]
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	200020c4 	.word	0x200020c4
 80084d0:	2000212c 	.word	0x2000212c

080084d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084da:	4b0b      	ldr	r3, [pc, #44]	@ (8008508 <xTaskGetSchedulerState+0x34>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d102      	bne.n	80084e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084e2:	2301      	movs	r3, #1
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	e008      	b.n	80084fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084e8:	4b08      	ldr	r3, [pc, #32]	@ (800850c <xTaskGetSchedulerState+0x38>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084f0:	2302      	movs	r3, #2
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	e001      	b.n	80084fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084f6:	2300      	movs	r3, #0
 80084f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084fa:	687b      	ldr	r3, [r7, #4]
	}
 80084fc:	4618      	mov	r0, r3
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	20002118 	.word	0x20002118
 800850c:	20002134 	.word	0x20002134

08008510 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d05c      	beq.n	80085e0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008526:	4b31      	ldr	r3, [pc, #196]	@ (80085ec <xTaskPriorityDisinherit+0xdc>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	429a      	cmp	r2, r3
 800852e:	d00d      	beq.n	800854c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	b672      	cpsid	i
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	b662      	cpsie	i
 8008544:	60fb      	str	r3, [r7, #12]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10d      	bne.n	8008570 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	b672      	cpsid	i
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	b662      	cpsie	i
 8008568:	60bb      	str	r3, [r7, #8]
}
 800856a:	bf00      	nop
 800856c:	bf00      	nop
 800856e:	e7fd      	b.n	800856c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008574:	1e5a      	subs	r2, r3, #1
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008582:	429a      	cmp	r2, r3
 8008584:	d02c      	beq.n	80085e0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858a:	2b00      	cmp	r3, #0
 800858c:	d128      	bne.n	80085e0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3304      	adds	r3, #4
 8008592:	4618      	mov	r0, r3
 8008594:	f7fe fbe2 	bl	8006d5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b0:	4b0f      	ldr	r3, [pc, #60]	@ (80085f0 <xTaskPriorityDisinherit+0xe0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d903      	bls.n	80085c0 <xTaskPriorityDisinherit+0xb0>
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085bc:	4a0c      	ldr	r2, [pc, #48]	@ (80085f0 <xTaskPriorityDisinherit+0xe0>)
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4a09      	ldr	r2, [pc, #36]	@ (80085f4 <xTaskPriorityDisinherit+0xe4>)
 80085ce:	441a      	add	r2, r3
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f7fe fb63 	bl	8006ca2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085dc:	2301      	movs	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085e0:	697b      	ldr	r3, [r7, #20]
	}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20001c38 	.word	0x20001c38
 80085f0:	20002114 	.word	0x20002114
 80085f4:	20001c3c 	.word	0x20001c3c

080085f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b08e      	sub	sp, #56	@ 0x38
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4613      	mov	r3, r2
 8008606:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008608:	2301      	movs	r3, #1
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10d      	bne.n	800862e <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008616:	b672      	cpsid	i
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	b662      	cpsie	i
 8008626:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	e7fd      	b.n	800862a <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800862e:	f000 fe85 	bl	800933c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8008636:	f3ef 8211 	mrs	r2, BASEPRI
 800863a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863e:	b672      	cpsid	i
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	b662      	cpsie	i
 800864e:	623a      	str	r2, [r7, #32]
 8008650:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008652:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008654:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008668:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800866c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008672:	2202      	movs	r2, #2
 8008674:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008678:	79fb      	ldrb	r3, [r7, #7]
 800867a:	2b04      	cmp	r3, #4
 800867c:	d82e      	bhi.n	80086dc <xTaskGenericNotifyFromISR+0xe4>
 800867e:	a201      	add	r2, pc, #4	@ (adr r2, 8008684 <xTaskGenericNotifyFromISR+0x8c>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	08008705 	.word	0x08008705
 8008688:	08008699 	.word	0x08008699
 800868c:	080086ab 	.word	0x080086ab
 8008690:	080086bb 	.word	0x080086bb
 8008694:	080086c5 	.word	0x080086c5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	431a      	orrs	r2, r3
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80086a8:	e02f      	b.n	800870a <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80086aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80086b8:	e027      	b.n	800870a <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80086ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80086c2:	e022      	b.n	800870a <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80086c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d004      	beq.n	80086d6 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80086d4:	e019      	b.n	800870a <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80086da:	e016      	b.n	800870a <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80086dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e6:	d00f      	beq.n	8008708 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ec:	b672      	cpsid	i
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	b662      	cpsie	i
 80086fc:	61bb      	str	r3, [r7, #24]
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <xTaskGenericNotifyFromISR+0x108>
					break;
 8008704:	bf00      	nop
 8008706:	e000      	b.n	800870a <xTaskGenericNotifyFromISR+0x112>
					break;
 8008708:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800870a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800870e:	2b01      	cmp	r3, #1
 8008710:	d149      	bne.n	80087a6 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00d      	beq.n	8008736 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871e:	b672      	cpsid	i
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	b662      	cpsie	i
 800872e:	617b      	str	r3, [r7, #20]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008736:	4b21      	ldr	r3, [pc, #132]	@ (80087bc <xTaskGenericNotifyFromISR+0x1c4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d11d      	bne.n	800877a <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	3304      	adds	r3, #4
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe fb0a 	bl	8006d5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874c:	4b1c      	ldr	r3, [pc, #112]	@ (80087c0 <xTaskGenericNotifyFromISR+0x1c8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d903      	bls.n	800875c <xTaskGenericNotifyFromISR+0x164>
 8008754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008758:	4a19      	ldr	r2, [pc, #100]	@ (80087c0 <xTaskGenericNotifyFromISR+0x1c8>)
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4a16      	ldr	r2, [pc, #88]	@ (80087c4 <xTaskGenericNotifyFromISR+0x1cc>)
 800876a:	441a      	add	r2, r3
 800876c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876e:	3304      	adds	r3, #4
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f7fe fa95 	bl	8006ca2 <vListInsertEnd>
 8008778:	e005      	b.n	8008786 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800877a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877c:	3318      	adds	r3, #24
 800877e:	4619      	mov	r1, r3
 8008780:	4811      	ldr	r0, [pc, #68]	@ (80087c8 <xTaskGenericNotifyFromISR+0x1d0>)
 8008782:	f7fe fa8e 	bl	8006ca2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878a:	4b10      	ldr	r3, [pc, #64]	@ (80087cc <xTaskGenericNotifyFromISR+0x1d4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008790:	429a      	cmp	r2, r3
 8008792:	d908      	bls.n	80087a6 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800879a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800879c:	2201      	movs	r2, #1
 800879e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80087a0:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <xTaskGenericNotifyFromISR+0x1d8>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f383 8811 	msr	BASEPRI, r3
}
 80087b0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80087b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3738      	adds	r7, #56	@ 0x38
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20002134 	.word	0x20002134
 80087c0:	20002114 	.word	0x20002114
 80087c4:	20001c3c 	.word	0x20001c3c
 80087c8:	200020cc 	.word	0x200020cc
 80087cc:	20001c38 	.word	0x20001c38
 80087d0:	20002120 	.word	0x20002120

080087d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087de:	4b21      	ldr	r3, [pc, #132]	@ (8008864 <prvAddCurrentTaskToDelayedList+0x90>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087e4:	4b20      	ldr	r3, [pc, #128]	@ (8008868 <prvAddCurrentTaskToDelayedList+0x94>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3304      	adds	r3, #4
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fab6 	bl	8006d5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d10a      	bne.n	800880e <prvAddCurrentTaskToDelayedList+0x3a>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d007      	beq.n	800880e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008868 <prvAddCurrentTaskToDelayedList+0x94>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3304      	adds	r3, #4
 8008804:	4619      	mov	r1, r3
 8008806:	4819      	ldr	r0, [pc, #100]	@ (800886c <prvAddCurrentTaskToDelayedList+0x98>)
 8008808:	f7fe fa4b 	bl	8006ca2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800880c:	e026      	b.n	800885c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008816:	4b14      	ldr	r3, [pc, #80]	@ (8008868 <prvAddCurrentTaskToDelayedList+0x94>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	429a      	cmp	r2, r3
 8008824:	d209      	bcs.n	800883a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008826:	4b12      	ldr	r3, [pc, #72]	@ (8008870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4b0f      	ldr	r3, [pc, #60]	@ (8008868 <prvAddCurrentTaskToDelayedList+0x94>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3304      	adds	r3, #4
 8008830:	4619      	mov	r1, r3
 8008832:	4610      	mov	r0, r2
 8008834:	f7fe fa59 	bl	8006cea <vListInsert>
}
 8008838:	e010      	b.n	800885c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800883a:	4b0e      	ldr	r3, [pc, #56]	@ (8008874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	4b0a      	ldr	r3, [pc, #40]	@ (8008868 <prvAddCurrentTaskToDelayedList+0x94>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f7fe fa4f 	bl	8006cea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800884c:	4b0a      	ldr	r3, [pc, #40]	@ (8008878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	429a      	cmp	r2, r3
 8008854:	d202      	bcs.n	800885c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008856:	4a08      	ldr	r2, [pc, #32]	@ (8008878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	6013      	str	r3, [r2, #0]
}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20002110 	.word	0x20002110
 8008868:	20001c38 	.word	0x20001c38
 800886c:	200020f8 	.word	0x200020f8
 8008870:	200020c8 	.word	0x200020c8
 8008874:	200020c4 	.word	0x200020c4
 8008878:	2000212c 	.word	0x2000212c

0800887c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	@ 0x28
 8008880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008886:	f000 fb21 	bl	8008ecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800888a:	4b1e      	ldr	r3, [pc, #120]	@ (8008904 <xTimerCreateTimerTask+0x88>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d021      	beq.n	80088d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800889a:	1d3a      	adds	r2, r7, #4
 800889c:	f107 0108 	add.w	r1, r7, #8
 80088a0:	f107 030c 	add.w	r3, r7, #12
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe f9b5 	bl	8006c14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	9202      	str	r2, [sp, #8]
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	2302      	movs	r3, #2
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	2300      	movs	r3, #0
 80088ba:	460a      	mov	r2, r1
 80088bc:	4912      	ldr	r1, [pc, #72]	@ (8008908 <xTimerCreateTimerTask+0x8c>)
 80088be:	4813      	ldr	r0, [pc, #76]	@ (800890c <xTimerCreateTimerTask+0x90>)
 80088c0:	f7fe ff90 	bl	80077e4 <xTaskCreateStatic>
 80088c4:	4603      	mov	r3, r0
 80088c6:	4a12      	ldr	r2, [pc, #72]	@ (8008910 <xTimerCreateTimerTask+0x94>)
 80088c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088ca:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <xTimerCreateTimerTask+0x94>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80088d2:	2301      	movs	r3, #1
 80088d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10d      	bne.n	80088f8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e0:	b672      	cpsid	i
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	b662      	cpsie	i
 80088f0:	613b      	str	r3, [r7, #16]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80088f8:	697b      	ldr	r3, [r7, #20]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20002168 	.word	0x20002168
 8008908:	0800a754 	.word	0x0800a754
 800890c:	08008a55 	.word	0x08008a55
 8008910:	2000216c 	.word	0x2000216c

08008914 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	@ 0x28
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008922:	2300      	movs	r3, #0
 8008924:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10d      	bne.n	8008948 <xTimerGenericCommand+0x34>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008930:	b672      	cpsid	i
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	b662      	cpsie	i
 8008940:	623b      	str	r3, [r7, #32]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008948:	4b19      	ldr	r3, [pc, #100]	@ (80089b0 <xTimerGenericCommand+0x9c>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d02a      	beq.n	80089a6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b05      	cmp	r3, #5
 8008960:	dc18      	bgt.n	8008994 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008962:	f7ff fdb7 	bl	80084d4 <xTaskGetSchedulerState>
 8008966:	4603      	mov	r3, r0
 8008968:	2b02      	cmp	r3, #2
 800896a:	d109      	bne.n	8008980 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800896c:	4b10      	ldr	r3, [pc, #64]	@ (80089b0 <xTimerGenericCommand+0x9c>)
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	f107 0110 	add.w	r1, r7, #16
 8008974:	2300      	movs	r3, #0
 8008976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008978:	f7fe fb30 	bl	8006fdc <xQueueGenericSend>
 800897c:	6278      	str	r0, [r7, #36]	@ 0x24
 800897e:	e012      	b.n	80089a6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008980:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <xTimerGenericCommand+0x9c>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	f107 0110 	add.w	r1, r7, #16
 8008988:	2300      	movs	r3, #0
 800898a:	2200      	movs	r2, #0
 800898c:	f7fe fb26 	bl	8006fdc <xQueueGenericSend>
 8008990:	6278      	str	r0, [r7, #36]	@ 0x24
 8008992:	e008      	b.n	80089a6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008994:	4b06      	ldr	r3, [pc, #24]	@ (80089b0 <xTimerGenericCommand+0x9c>)
 8008996:	6818      	ldr	r0, [r3, #0]
 8008998:	f107 0110 	add.w	r1, r7, #16
 800899c:	2300      	movs	r3, #0
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	f7fe fc26 	bl	80071f0 <xQueueGenericSendFromISR>
 80089a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3728      	adds	r7, #40	@ 0x28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20002168 	.word	0x20002168

080089b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089be:	4b24      	ldr	r3, [pc, #144]	@ (8008a50 <prvProcessExpiredTimer+0x9c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe f9c5 	bl	8006d5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d025      	beq.n	8008a2c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	699a      	ldr	r2, [r3, #24]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	18d1      	adds	r1, r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	6978      	ldr	r0, [r7, #20]
 80089ee:	f000 f8d7 	bl	8008ba0 <prvInsertTimerInActiveList>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d022      	beq.n	8008a3e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089f8:	2300      	movs	r3, #0
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	2300      	movs	r3, #0
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	2100      	movs	r1, #0
 8008a02:	6978      	ldr	r0, [r7, #20]
 8008a04:	f7ff ff86 	bl	8008914 <xTimerGenericCommand>
 8008a08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d116      	bne.n	8008a3e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a14:	b672      	cpsid	i
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	b662      	cpsie	i
 8008a24:	60fb      	str	r3, [r7, #12]
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	6978      	ldr	r0, [r7, #20]
 8008a44:	4798      	blx	r3
}
 8008a46:	bf00      	nop
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20002160 	.word	0x20002160

08008a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a5c:	f107 0308 	add.w	r3, r7, #8
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f859 	bl	8008b18 <prvGetNextExpireTime>
 8008a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f000 f805 	bl	8008a7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a72:	f000 f8d7 	bl	8008c24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a76:	bf00      	nop
 8008a78:	e7f0      	b.n	8008a5c <prvTimerTask+0x8>
	...

08008a7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a86:	f7ff f91f 	bl	8007cc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f866 	bl	8008b60 <prvSampleTimeNow>
 8008a94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d130      	bne.n	8008afe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <prvProcessTimerOrBlockTask+0x3c>
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d806      	bhi.n	8008ab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008aaa:	f7ff f91b 	bl	8007ce4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff ff7f 	bl	80089b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ab6:	e024      	b.n	8008b02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d008      	beq.n	8008ad0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008abe:	4b13      	ldr	r3, [pc, #76]	@ (8008b0c <prvProcessTimerOrBlockTask+0x90>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <prvProcessTimerOrBlockTask+0x50>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <prvProcessTimerOrBlockTask+0x52>
 8008acc:	2300      	movs	r3, #0
 8008ace:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8008b10 <prvProcessTimerOrBlockTask+0x94>)
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4619      	mov	r1, r3
 8008ade:	f7fe fe4d 	bl	800777c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008ae2:	f7ff f8ff 	bl	8007ce4 <xTaskResumeAll>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10a      	bne.n	8008b02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008aec:	4b09      	ldr	r3, [pc, #36]	@ (8008b14 <prvProcessTimerOrBlockTask+0x98>)
 8008aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	f3bf 8f6f 	isb	sy
}
 8008afc:	e001      	b.n	8008b02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008afe:	f7ff f8f1 	bl	8007ce4 <xTaskResumeAll>
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20002164 	.word	0x20002164
 8008b10:	20002168 	.word	0x20002168
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b20:	4b0e      	ldr	r3, [pc, #56]	@ (8008b5c <prvGetNextExpireTime+0x44>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <prvGetNextExpireTime+0x16>
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	e000      	b.n	8008b30 <prvGetNextExpireTime+0x18>
 8008b2e:	2200      	movs	r2, #0
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d105      	bne.n	8008b48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b3c:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <prvGetNextExpireTime+0x44>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	e001      	b.n	8008b4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20002160 	.word	0x20002160

08008b60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008b68:	f7ff f95c 	bl	8007e24 <xTaskGetTickCount>
 8008b6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b9c <prvSampleTimeNow+0x3c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d205      	bcs.n	8008b84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b78:	f000 f940 	bl	8008dfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	e002      	b.n	8008b8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b8a:	4a04      	ldr	r2, [pc, #16]	@ (8008b9c <prvSampleTimeNow+0x3c>)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b90:	68fb      	ldr	r3, [r7, #12]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20002170 	.word	0x20002170

08008ba0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d812      	bhi.n	8008bec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	1ad2      	subs	r2, r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d302      	bcc.n	8008bda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	617b      	str	r3, [r7, #20]
 8008bd8:	e01b      	b.n	8008c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008bda:	4b10      	ldr	r3, [pc, #64]	@ (8008c1c <prvInsertTimerInActiveList+0x7c>)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3304      	adds	r3, #4
 8008be2:	4619      	mov	r1, r3
 8008be4:	4610      	mov	r0, r2
 8008be6:	f7fe f880 	bl	8006cea <vListInsert>
 8008bea:	e012      	b.n	8008c12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d206      	bcs.n	8008c02 <prvInsertTimerInActiveList+0x62>
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d302      	bcc.n	8008c02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	e007      	b.n	8008c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c02:	4b07      	ldr	r3, [pc, #28]	@ (8008c20 <prvInsertTimerInActiveList+0x80>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f7fe f86c 	bl	8006cea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c12:	697b      	ldr	r3, [r7, #20]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3718      	adds	r7, #24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20002164 	.word	0x20002164
 8008c20:	20002160 	.word	0x20002160

08008c24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08e      	sub	sp, #56	@ 0x38
 8008c28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c2a:	e0d4      	b.n	8008dd6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	da1b      	bge.n	8008c6a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c32:	1d3b      	adds	r3, r7, #4
 8008c34:	3304      	adds	r3, #4
 8008c36:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10d      	bne.n	8008c5a <prvProcessReceivedCommands+0x36>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	b672      	cpsid	i
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	b662      	cpsie	i
 8008c52:	61fb      	str	r3, [r7, #28]
}
 8008c54:	bf00      	nop
 8008c56:	bf00      	nop
 8008c58:	e7fd      	b.n	8008c56 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c60:	6850      	ldr	r0, [r2, #4]
 8008c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c64:	6892      	ldr	r2, [r2, #8]
 8008c66:	4611      	mov	r1, r2
 8008c68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f2c0 80b2 	blt.w	8008dd6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d004      	beq.n	8008c88 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c80:	3304      	adds	r3, #4
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe f86a 	bl	8006d5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c88:	463b      	mov	r3, r7
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff ff68 	bl	8008b60 <prvSampleTimeNow>
 8008c90:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b09      	cmp	r3, #9
 8008c96:	f200 809b 	bhi.w	8008dd0 <prvProcessReceivedCommands+0x1ac>
 8008c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca0 <prvProcessReceivedCommands+0x7c>)
 8008c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca0:	08008cc9 	.word	0x08008cc9
 8008ca4:	08008cc9 	.word	0x08008cc9
 8008ca8:	08008cc9 	.word	0x08008cc9
 8008cac:	08008d43 	.word	0x08008d43
 8008cb0:	08008d57 	.word	0x08008d57
 8008cb4:	08008da7 	.word	0x08008da7
 8008cb8:	08008cc9 	.word	0x08008cc9
 8008cbc:	08008cc9 	.word	0x08008cc9
 8008cc0:	08008d43 	.word	0x08008d43
 8008cc4:	08008d57 	.word	0x08008d57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	18d1      	adds	r1, r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ce8:	f7ff ff5a 	bl	8008ba0 <prvInsertTimerInActiveList>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d070      	beq.n	8008dd4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cf8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d065      	beq.n	8008dd4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	441a      	add	r2, r3
 8008d10:	2300      	movs	r3, #0
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	2100      	movs	r1, #0
 8008d18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d1a:	f7ff fdfb 	bl	8008914 <xTimerGenericCommand>
 8008d1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d156      	bne.n	8008dd4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	b672      	cpsid	i
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	b662      	cpsie	i
 8008d3a:	61bb      	str	r3, [r7, #24]
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	e7fd      	b.n	8008d3e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d48:	f023 0301 	bic.w	r3, r3, #1
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008d54:	e03f      	b.n	8008dd6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10d      	bne.n	8008d92 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	b672      	cpsid	i
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	b662      	cpsie	i
 8008d8a:	617b      	str	r3, [r7, #20]
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	e7fd      	b.n	8008d8e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d94:	699a      	ldr	r2, [r3, #24]
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	18d1      	adds	r1, r2, r3
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008da0:	f7ff fefe 	bl	8008ba0 <prvInsertTimerInActiveList>
					break;
 8008da4:	e017      	b.n	8008dd6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d103      	bne.n	8008dbc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008db4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008db6:	f000 fbd5 	bl	8009564 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008dba:	e00c      	b.n	8008dd6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dc2:	f023 0301 	bic.w	r3, r3, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008dce:	e002      	b.n	8008dd6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008dd0:	bf00      	nop
 8008dd2:	e000      	b.n	8008dd6 <prvProcessReceivedCommands+0x1b2>
					break;
 8008dd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008dd6:	4b08      	ldr	r3, [pc, #32]	@ (8008df8 <prvProcessReceivedCommands+0x1d4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	1d39      	adds	r1, r7, #4
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe faaa 	bl	8007338 <xQueueReceive>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f47f af20 	bne.w	8008c2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	3730      	adds	r7, #48	@ 0x30
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20002168 	.word	0x20002168

08008dfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e02:	e04b      	b.n	8008e9c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e04:	4b2f      	ldr	r3, [pc, #188]	@ (8008ec4 <prvSwitchTimerLists+0xc8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ec4 <prvSwitchTimerLists+0xc8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fd ff9d 	bl	8006d5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d031      	beq.n	8008e9c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4413      	add	r3, r2
 8008e40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d90e      	bls.n	8008e68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e56:	4b1b      	ldr	r3, [pc, #108]	@ (8008ec4 <prvSwitchTimerLists+0xc8>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4610      	mov	r0, r2
 8008e62:	f7fd ff42 	bl	8006cea <vListInsert>
 8008e66:	e019      	b.n	8008e9c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	2100      	movs	r1, #0
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f7ff fd4e 	bl	8008914 <xTimerGenericCommand>
 8008e78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10d      	bne.n	8008e9c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e84:	b672      	cpsid	i
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	b662      	cpsie	i
 8008e94:	603b      	str	r3, [r7, #0]
}
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	e7fd      	b.n	8008e98 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e9c:	4b09      	ldr	r3, [pc, #36]	@ (8008ec4 <prvSwitchTimerLists+0xc8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1ae      	bne.n	8008e04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ea6:	4b07      	ldr	r3, [pc, #28]	@ (8008ec4 <prvSwitchTimerLists+0xc8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008eac:	4b06      	ldr	r3, [pc, #24]	@ (8008ec8 <prvSwitchTimerLists+0xcc>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a04      	ldr	r2, [pc, #16]	@ (8008ec4 <prvSwitchTimerLists+0xc8>)
 8008eb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008eb4:	4a04      	ldr	r2, [pc, #16]	@ (8008ec8 <prvSwitchTimerLists+0xcc>)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	6013      	str	r3, [r2, #0]
}
 8008eba:	bf00      	nop
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20002160 	.word	0x20002160
 8008ec8:	20002164 	.word	0x20002164

08008ecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ed2:	f000 f94b 	bl	800916c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ed6:	4b15      	ldr	r3, [pc, #84]	@ (8008f2c <prvCheckForValidListAndQueue+0x60>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d120      	bne.n	8008f20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ede:	4814      	ldr	r0, [pc, #80]	@ (8008f30 <prvCheckForValidListAndQueue+0x64>)
 8008ee0:	f7fd feb2 	bl	8006c48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ee4:	4813      	ldr	r0, [pc, #76]	@ (8008f34 <prvCheckForValidListAndQueue+0x68>)
 8008ee6:	f7fd feaf 	bl	8006c48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008eea:	4b13      	ldr	r3, [pc, #76]	@ (8008f38 <prvCheckForValidListAndQueue+0x6c>)
 8008eec:	4a10      	ldr	r2, [pc, #64]	@ (8008f30 <prvCheckForValidListAndQueue+0x64>)
 8008eee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ef0:	4b12      	ldr	r3, [pc, #72]	@ (8008f3c <prvCheckForValidListAndQueue+0x70>)
 8008ef2:	4a10      	ldr	r2, [pc, #64]	@ (8008f34 <prvCheckForValidListAndQueue+0x68>)
 8008ef4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	4b11      	ldr	r3, [pc, #68]	@ (8008f40 <prvCheckForValidListAndQueue+0x74>)
 8008efc:	4a11      	ldr	r2, [pc, #68]	@ (8008f44 <prvCheckForValidListAndQueue+0x78>)
 8008efe:	2110      	movs	r1, #16
 8008f00:	200a      	movs	r0, #10
 8008f02:	f7fd ffc1 	bl	8006e88 <xQueueGenericCreateStatic>
 8008f06:	4603      	mov	r3, r0
 8008f08:	4a08      	ldr	r2, [pc, #32]	@ (8008f2c <prvCheckForValidListAndQueue+0x60>)
 8008f0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f0c:	4b07      	ldr	r3, [pc, #28]	@ (8008f2c <prvCheckForValidListAndQueue+0x60>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d005      	beq.n	8008f20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f14:	4b05      	ldr	r3, [pc, #20]	@ (8008f2c <prvCheckForValidListAndQueue+0x60>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	490b      	ldr	r1, [pc, #44]	@ (8008f48 <prvCheckForValidListAndQueue+0x7c>)
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe fc04 	bl	8007728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f20:	f000 f95a 	bl	80091d8 <vPortExitCritical>
}
 8008f24:	bf00      	nop
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20002168 	.word	0x20002168
 8008f30:	20002138 	.word	0x20002138
 8008f34:	2000214c 	.word	0x2000214c
 8008f38:	20002160 	.word	0x20002160
 8008f3c:	20002164 	.word	0x20002164
 8008f40:	20002214 	.word	0x20002214
 8008f44:	20002174 	.word	0x20002174
 8008f48:	0800a75c 	.word	0x0800a75c

08008f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	3b04      	subs	r3, #4
 8008f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3b04      	subs	r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f023 0201 	bic.w	r2, r3, #1
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3b04      	subs	r3, #4
 8008f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8008fb0 <pxPortInitialiseStack+0x64>)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3b14      	subs	r3, #20
 8008f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3b04      	subs	r3, #4
 8008f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f06f 0202 	mvn.w	r2, #2
 8008f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3b20      	subs	r3, #32
 8008fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	08008fb5 	.word	0x08008fb5

08008fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fbe:	4b15      	ldr	r3, [pc, #84]	@ (8009014 <prvTaskExitError+0x60>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d00d      	beq.n	8008fe4 <prvTaskExitError+0x30>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fcc:	b672      	cpsid	i
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	b662      	cpsie	i
 8008fdc:	60fb      	str	r3, [r7, #12]
}
 8008fde:	bf00      	nop
 8008fe0:	bf00      	nop
 8008fe2:	e7fd      	b.n	8008fe0 <prvTaskExitError+0x2c>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe8:	b672      	cpsid	i
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	b662      	cpsie	i
 8008ff8:	60bb      	str	r3, [r7, #8]
}
 8008ffa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ffc:	bf00      	nop
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0fc      	beq.n	8008ffe <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	2000000c 	.word	0x2000000c
	...

08009020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009020:	4b07      	ldr	r3, [pc, #28]	@ (8009040 <pxCurrentTCBConst2>)
 8009022:	6819      	ldr	r1, [r3, #0]
 8009024:	6808      	ldr	r0, [r1, #0]
 8009026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902a:	f380 8809 	msr	PSP, r0
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f04f 0000 	mov.w	r0, #0
 8009036:	f380 8811 	msr	BASEPRI, r0
 800903a:	4770      	bx	lr
 800903c:	f3af 8000 	nop.w

08009040 <pxCurrentTCBConst2>:
 8009040:	20001c38 	.word	0x20001c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009048:	4808      	ldr	r0, [pc, #32]	@ (800906c <prvPortStartFirstTask+0x24>)
 800904a:	6800      	ldr	r0, [r0, #0]
 800904c:	6800      	ldr	r0, [r0, #0]
 800904e:	f380 8808 	msr	MSP, r0
 8009052:	f04f 0000 	mov.w	r0, #0
 8009056:	f380 8814 	msr	CONTROL, r0
 800905a:	b662      	cpsie	i
 800905c:	b661      	cpsie	f
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	df00      	svc	0
 8009068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800906a:	bf00      	nop
 800906c:	e000ed08 	.word	0xe000ed08

08009070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009076:	4b37      	ldr	r3, [pc, #220]	@ (8009154 <xPortStartScheduler+0xe4>)
 8009078:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	22ff      	movs	r2, #255	@ 0xff
 8009086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	b2db      	uxtb	r3, r3
 8009094:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009098:	b2da      	uxtb	r2, r3
 800909a:	4b2f      	ldr	r3, [pc, #188]	@ (8009158 <xPortStartScheduler+0xe8>)
 800909c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800909e:	4b2f      	ldr	r3, [pc, #188]	@ (800915c <xPortStartScheduler+0xec>)
 80090a0:	2207      	movs	r2, #7
 80090a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090a4:	e009      	b.n	80090ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80090a6:	4b2d      	ldr	r3, [pc, #180]	@ (800915c <xPortStartScheduler+0xec>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	4a2b      	ldr	r2, [pc, #172]	@ (800915c <xPortStartScheduler+0xec>)
 80090ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090c2:	2b80      	cmp	r3, #128	@ 0x80
 80090c4:	d0ef      	beq.n	80090a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80090c6:	4b25      	ldr	r3, [pc, #148]	@ (800915c <xPortStartScheduler+0xec>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f1c3 0307 	rsb	r3, r3, #7
 80090ce:	2b04      	cmp	r3, #4
 80090d0:	d00d      	beq.n	80090ee <xPortStartScheduler+0x7e>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	b672      	cpsid	i
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	b662      	cpsie	i
 80090e6:	60bb      	str	r3, [r7, #8]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80090ee:	4b1b      	ldr	r3, [pc, #108]	@ (800915c <xPortStartScheduler+0xec>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	021b      	lsls	r3, r3, #8
 80090f4:	4a19      	ldr	r2, [pc, #100]	@ (800915c <xPortStartScheduler+0xec>)
 80090f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80090f8:	4b18      	ldr	r3, [pc, #96]	@ (800915c <xPortStartScheduler+0xec>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009100:	4a16      	ldr	r2, [pc, #88]	@ (800915c <xPortStartScheduler+0xec>)
 8009102:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	b2da      	uxtb	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800910c:	4b14      	ldr	r3, [pc, #80]	@ (8009160 <xPortStartScheduler+0xf0>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a13      	ldr	r2, [pc, #76]	@ (8009160 <xPortStartScheduler+0xf0>)
 8009112:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009116:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009118:	4b11      	ldr	r3, [pc, #68]	@ (8009160 <xPortStartScheduler+0xf0>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a10      	ldr	r2, [pc, #64]	@ (8009160 <xPortStartScheduler+0xf0>)
 800911e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009122:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009124:	f000 f8dc 	bl	80092e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009128:	4b0e      	ldr	r3, [pc, #56]	@ (8009164 <xPortStartScheduler+0xf4>)
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800912e:	f000 f8fb 	bl	8009328 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009132:	4b0d      	ldr	r3, [pc, #52]	@ (8009168 <xPortStartScheduler+0xf8>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a0c      	ldr	r2, [pc, #48]	@ (8009168 <xPortStartScheduler+0xf8>)
 8009138:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800913c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800913e:	f7ff ff83 	bl	8009048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009142:	f7fe ff3b 	bl	8007fbc <vTaskSwitchContext>
	prvTaskExitError();
 8009146:	f7ff ff35 	bl	8008fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	e000e400 	.word	0xe000e400
 8009158:	20002264 	.word	0x20002264
 800915c:	20002268 	.word	0x20002268
 8009160:	e000ed20 	.word	0xe000ed20
 8009164:	2000000c 	.word	0x2000000c
 8009168:	e000ef34 	.word	0xe000ef34

0800916c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009176:	b672      	cpsid	i
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	b662      	cpsie	i
 8009186:	607b      	str	r3, [r7, #4]
}
 8009188:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800918a:	4b11      	ldr	r3, [pc, #68]	@ (80091d0 <vPortEnterCritical+0x64>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3301      	adds	r3, #1
 8009190:	4a0f      	ldr	r2, [pc, #60]	@ (80091d0 <vPortEnterCritical+0x64>)
 8009192:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009194:	4b0e      	ldr	r3, [pc, #56]	@ (80091d0 <vPortEnterCritical+0x64>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d112      	bne.n	80091c2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800919c:	4b0d      	ldr	r3, [pc, #52]	@ (80091d4 <vPortEnterCritical+0x68>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00d      	beq.n	80091c2 <vPortEnterCritical+0x56>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091aa:	b672      	cpsid	i
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	b662      	cpsie	i
 80091ba:	603b      	str	r3, [r7, #0]
}
 80091bc:	bf00      	nop
 80091be:	bf00      	nop
 80091c0:	e7fd      	b.n	80091be <vPortEnterCritical+0x52>
	}
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	2000000c 	.word	0x2000000c
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80091de:	4b13      	ldr	r3, [pc, #76]	@ (800922c <vPortExitCritical+0x54>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10d      	bne.n	8009202 <vPortExitCritical+0x2a>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	b672      	cpsid	i
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	b662      	cpsie	i
 80091fa:	607b      	str	r3, [r7, #4]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009202:	4b0a      	ldr	r3, [pc, #40]	@ (800922c <vPortExitCritical+0x54>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3b01      	subs	r3, #1
 8009208:	4a08      	ldr	r2, [pc, #32]	@ (800922c <vPortExitCritical+0x54>)
 800920a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800920c:	4b07      	ldr	r3, [pc, #28]	@ (800922c <vPortExitCritical+0x54>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d105      	bne.n	8009220 <vPortExitCritical+0x48>
 8009214:	2300      	movs	r3, #0
 8009216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	f383 8811 	msr	BASEPRI, r3
}
 800921e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	2000000c 	.word	0x2000000c

08009230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009230:	f3ef 8009 	mrs	r0, PSP
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	4b15      	ldr	r3, [pc, #84]	@ (8009290 <pxCurrentTCBConst>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	f01e 0f10 	tst.w	lr, #16
 8009240:	bf08      	it	eq
 8009242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924a:	6010      	str	r0, [r2, #0]
 800924c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009254:	b672      	cpsid	i
 8009256:	f380 8811 	msr	BASEPRI, r0
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	b662      	cpsie	i
 8009264:	f7fe feaa 	bl	8007fbc <vTaskSwitchContext>
 8009268:	f04f 0000 	mov.w	r0, #0
 800926c:	f380 8811 	msr	BASEPRI, r0
 8009270:	bc09      	pop	{r0, r3}
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	6808      	ldr	r0, [r1, #0]
 8009276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927a:	f01e 0f10 	tst.w	lr, #16
 800927e:	bf08      	it	eq
 8009280:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009284:	f380 8809 	msr	PSP, r0
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop

08009290 <pxCurrentTCBConst>:
 8009290:	20001c38 	.word	0x20001c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop

08009298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	b672      	cpsid	i
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	b662      	cpsie	i
 80092b2:	607b      	str	r3, [r7, #4]
}
 80092b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092b6:	f7fe fdc5 	bl	8007e44 <xTaskIncrementTick>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d003      	beq.n	80092c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092c0:	4b06      	ldr	r3, [pc, #24]	@ (80092dc <SysTick_Handler+0x44>)
 80092c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	2300      	movs	r3, #0
 80092ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	f383 8811 	msr	BASEPRI, r3
}
 80092d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	e000ed04 	.word	0xe000ed04

080092e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80092e0:	b480      	push	{r7}
 80092e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009314 <vPortSetupTimerInterrupt+0x34>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009318 <vPortSetupTimerInterrupt+0x38>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092f0:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <vPortSetupTimerInterrupt+0x3c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a0a      	ldr	r2, [pc, #40]	@ (8009320 <vPortSetupTimerInterrupt+0x40>)
 80092f6:	fba2 2303 	umull	r2, r3, r2, r3
 80092fa:	099b      	lsrs	r3, r3, #6
 80092fc:	4a09      	ldr	r2, [pc, #36]	@ (8009324 <vPortSetupTimerInterrupt+0x44>)
 80092fe:	3b01      	subs	r3, #1
 8009300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009302:	4b04      	ldr	r3, [pc, #16]	@ (8009314 <vPortSetupTimerInterrupt+0x34>)
 8009304:	2207      	movs	r2, #7
 8009306:	601a      	str	r2, [r3, #0]
}
 8009308:	bf00      	nop
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	e000e010 	.word	0xe000e010
 8009318:	e000e018 	.word	0xe000e018
 800931c:	20000000 	.word	0x20000000
 8009320:	10624dd3 	.word	0x10624dd3
 8009324:	e000e014 	.word	0xe000e014

08009328 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009328:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009338 <vPortEnableVFP+0x10>
 800932c:	6801      	ldr	r1, [r0, #0]
 800932e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009332:	6001      	str	r1, [r0, #0]
 8009334:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009336:	bf00      	nop
 8009338:	e000ed88 	.word	0xe000ed88

0800933c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009342:	f3ef 8305 	mrs	r3, IPSR
 8009346:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b0f      	cmp	r3, #15
 800934c:	d917      	bls.n	800937e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800934e:	4a1a      	ldr	r2, [pc, #104]	@ (80093b8 <vPortValidateInterruptPriority+0x7c>)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009358:	4b18      	ldr	r3, [pc, #96]	@ (80093bc <vPortValidateInterruptPriority+0x80>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	7afa      	ldrb	r2, [r7, #11]
 800935e:	429a      	cmp	r2, r3
 8009360:	d20d      	bcs.n	800937e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009366:	b672      	cpsid	i
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	b662      	cpsie	i
 8009376:	607b      	str	r3, [r7, #4]
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	e7fd      	b.n	800937a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800937e:	4b10      	ldr	r3, [pc, #64]	@ (80093c0 <vPortValidateInterruptPriority+0x84>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009386:	4b0f      	ldr	r3, [pc, #60]	@ (80093c4 <vPortValidateInterruptPriority+0x88>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d90d      	bls.n	80093aa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009392:	b672      	cpsid	i
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	b662      	cpsie	i
 80093a2:	603b      	str	r3, [r7, #0]
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	e7fd      	b.n	80093a6 <vPortValidateInterruptPriority+0x6a>
	}
 80093aa:	bf00      	nop
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	e000e3f0 	.word	0xe000e3f0
 80093bc:	20002264 	.word	0x20002264
 80093c0:	e000ed0c 	.word	0xe000ed0c
 80093c4:	20002268 	.word	0x20002268

080093c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	@ 0x28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093d4:	f7fe fc78 	bl	8007cc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093d8:	4b5d      	ldr	r3, [pc, #372]	@ (8009550 <pvPortMalloc+0x188>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80093e0:	f000 f920 	bl	8009624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093e4:	4b5b      	ldr	r3, [pc, #364]	@ (8009554 <pvPortMalloc+0x18c>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4013      	ands	r3, r2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f040 8094 	bne.w	800951a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d020      	beq.n	800943a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80093f8:	2208      	movs	r2, #8
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	2b00      	cmp	r3, #0
 8009408:	d017      	beq.n	800943a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f023 0307 	bic.w	r3, r3, #7
 8009410:	3308      	adds	r3, #8
 8009412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <pvPortMalloc+0x72>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	b672      	cpsid	i
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	b662      	cpsie	i
 8009432:	617b      	str	r3, [r7, #20]
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d06c      	beq.n	800951a <pvPortMalloc+0x152>
 8009440:	4b45      	ldr	r3, [pc, #276]	@ (8009558 <pvPortMalloc+0x190>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	429a      	cmp	r2, r3
 8009448:	d867      	bhi.n	800951a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800944a:	4b44      	ldr	r3, [pc, #272]	@ (800955c <pvPortMalloc+0x194>)
 800944c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800944e:	4b43      	ldr	r3, [pc, #268]	@ (800955c <pvPortMalloc+0x194>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009454:	e004      	b.n	8009460 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d903      	bls.n	8009472 <pvPortMalloc+0xaa>
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f1      	bne.n	8009456 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009472:	4b37      	ldr	r3, [pc, #220]	@ (8009550 <pvPortMalloc+0x188>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009478:	429a      	cmp	r2, r3
 800947a:	d04e      	beq.n	800951a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2208      	movs	r2, #8
 8009482:	4413      	add	r3, r2
 8009484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	1ad2      	subs	r2, r2, r3
 8009496:	2308      	movs	r3, #8
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	429a      	cmp	r2, r3
 800949c:	d922      	bls.n	80094e4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800949e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4413      	add	r3, r2
 80094a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	f003 0307 	and.w	r3, r3, #7
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00d      	beq.n	80094cc <pvPortMalloc+0x104>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b4:	b672      	cpsid	i
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	b662      	cpsie	i
 80094c4:	613b      	str	r3, [r7, #16]
}
 80094c6:	bf00      	nop
 80094c8:	bf00      	nop
 80094ca:	e7fd      	b.n	80094c8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	1ad2      	subs	r2, r2, r3
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094de:	69b8      	ldr	r0, [r7, #24]
 80094e0:	f000 f902 	bl	80096e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009558 <pvPortMalloc+0x190>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	4a1a      	ldr	r2, [pc, #104]	@ (8009558 <pvPortMalloc+0x190>)
 80094f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094f2:	4b19      	ldr	r3, [pc, #100]	@ (8009558 <pvPortMalloc+0x190>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009560 <pvPortMalloc+0x198>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d203      	bcs.n	8009506 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094fe:	4b16      	ldr	r3, [pc, #88]	@ (8009558 <pvPortMalloc+0x190>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a17      	ldr	r2, [pc, #92]	@ (8009560 <pvPortMalloc+0x198>)
 8009504:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	4b12      	ldr	r3, [pc, #72]	@ (8009554 <pvPortMalloc+0x18c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	431a      	orrs	r2, r3
 8009510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009512:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009516:	2200      	movs	r2, #0
 8009518:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800951a:	f7fe fbe3 	bl	8007ce4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f003 0307 	and.w	r3, r3, #7
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00d      	beq.n	8009544 <pvPortMalloc+0x17c>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800952c:	b672      	cpsid	i
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	b662      	cpsie	i
 800953c:	60fb      	str	r3, [r7, #12]
}
 800953e:	bf00      	nop
 8009540:	bf00      	nop
 8009542:	e7fd      	b.n	8009540 <pvPortMalloc+0x178>
	return pvReturn;
 8009544:	69fb      	ldr	r3, [r7, #28]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3728      	adds	r7, #40	@ 0x28
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20005e74 	.word	0x20005e74
 8009554:	20005e80 	.word	0x20005e80
 8009558:	20005e78 	.word	0x20005e78
 800955c:	20005e6c 	.word	0x20005e6c
 8009560:	20005e7c 	.word	0x20005e7c

08009564 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d04e      	beq.n	8009614 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009576:	2308      	movs	r3, #8
 8009578:	425b      	negs	r3, r3
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	4413      	add	r3, r2
 800957e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	4b24      	ldr	r3, [pc, #144]	@ (800961c <vPortFree+0xb8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4013      	ands	r3, r2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10d      	bne.n	80095ae <vPortFree+0x4a>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009596:	b672      	cpsid	i
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	b662      	cpsie	i
 80095a6:	60fb      	str	r3, [r7, #12]
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	e7fd      	b.n	80095aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00d      	beq.n	80095d2 <vPortFree+0x6e>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ba:	b672      	cpsid	i
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	b662      	cpsie	i
 80095ca:	60bb      	str	r3, [r7, #8]
}
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
 80095d0:	e7fd      	b.n	80095ce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	4b11      	ldr	r3, [pc, #68]	@ (800961c <vPortFree+0xb8>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4013      	ands	r3, r2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d019      	beq.n	8009614 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d115      	bne.n	8009614 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	4b0b      	ldr	r3, [pc, #44]	@ (800961c <vPortFree+0xb8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	43db      	mvns	r3, r3
 80095f2:	401a      	ands	r2, r3
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095f8:	f7fe fb66 	bl	8007cc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	4b07      	ldr	r3, [pc, #28]	@ (8009620 <vPortFree+0xbc>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4413      	add	r3, r2
 8009606:	4a06      	ldr	r2, [pc, #24]	@ (8009620 <vPortFree+0xbc>)
 8009608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800960a:	6938      	ldr	r0, [r7, #16]
 800960c:	f000 f86c 	bl	80096e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009610:	f7fe fb68 	bl	8007ce4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009614:	bf00      	nop
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	20005e80 	.word	0x20005e80
 8009620:	20005e78 	.word	0x20005e78

08009624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800962a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800962e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009630:	4b27      	ldr	r3, [pc, #156]	@ (80096d0 <prvHeapInit+0xac>)
 8009632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00c      	beq.n	8009658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3307      	adds	r3, #7
 8009642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0307 	bic.w	r3, r3, #7
 800964a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	4a1f      	ldr	r2, [pc, #124]	@ (80096d0 <prvHeapInit+0xac>)
 8009654:	4413      	add	r3, r2
 8009656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800965c:	4a1d      	ldr	r2, [pc, #116]	@ (80096d4 <prvHeapInit+0xb0>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009662:	4b1c      	ldr	r3, [pc, #112]	@ (80096d4 <prvHeapInit+0xb0>)
 8009664:	2200      	movs	r2, #0
 8009666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	4413      	add	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009670:	2208      	movs	r2, #8
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	1a9b      	subs	r3, r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0307 	bic.w	r3, r3, #7
 800967e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4a15      	ldr	r2, [pc, #84]	@ (80096d8 <prvHeapInit+0xb4>)
 8009684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009686:	4b14      	ldr	r3, [pc, #80]	@ (80096d8 <prvHeapInit+0xb4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2200      	movs	r2, #0
 800968c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800968e:	4b12      	ldr	r3, [pc, #72]	@ (80096d8 <prvHeapInit+0xb4>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096a4:	4b0c      	ldr	r3, [pc, #48]	@ (80096d8 <prvHeapInit+0xb4>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	4a0a      	ldr	r2, [pc, #40]	@ (80096dc <prvHeapInit+0xb8>)
 80096b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	4a09      	ldr	r2, [pc, #36]	@ (80096e0 <prvHeapInit+0xbc>)
 80096ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096bc:	4b09      	ldr	r3, [pc, #36]	@ (80096e4 <prvHeapInit+0xc0>)
 80096be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80096c2:	601a      	str	r2, [r3, #0]
}
 80096c4:	bf00      	nop
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	2000226c 	.word	0x2000226c
 80096d4:	20005e6c 	.word	0x20005e6c
 80096d8:	20005e74 	.word	0x20005e74
 80096dc:	20005e7c 	.word	0x20005e7c
 80096e0:	20005e78 	.word	0x20005e78
 80096e4:	20005e80 	.word	0x20005e80

080096e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096f0:	4b28      	ldr	r3, [pc, #160]	@ (8009794 <prvInsertBlockIntoFreeList+0xac>)
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	e002      	b.n	80096fc <prvInsertBlockIntoFreeList+0x14>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d8f7      	bhi.n	80096f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	4413      	add	r3, r2
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	d108      	bne.n	800972a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	441a      	add	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	441a      	add	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d118      	bne.n	8009770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b15      	ldr	r3, [pc, #84]	@ (8009798 <prvInsertBlockIntoFreeList+0xb0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d00d      	beq.n	8009766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	441a      	add	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	e008      	b.n	8009778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009766:	4b0c      	ldr	r3, [pc, #48]	@ (8009798 <prvInsertBlockIntoFreeList+0xb0>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e003      	b.n	8009778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d002      	beq.n	8009786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20005e6c 	.word	0x20005e6c
 8009798:	20005e74 	.word	0x20005e74

0800979c <std>:
 800979c:	2300      	movs	r3, #0
 800979e:	b510      	push	{r4, lr}
 80097a0:	4604      	mov	r4, r0
 80097a2:	e9c0 3300 	strd	r3, r3, [r0]
 80097a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097aa:	6083      	str	r3, [r0, #8]
 80097ac:	8181      	strh	r1, [r0, #12]
 80097ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80097b0:	81c2      	strh	r2, [r0, #14]
 80097b2:	6183      	str	r3, [r0, #24]
 80097b4:	4619      	mov	r1, r3
 80097b6:	2208      	movs	r2, #8
 80097b8:	305c      	adds	r0, #92	@ 0x5c
 80097ba:	f000 f906 	bl	80099ca <memset>
 80097be:	4b0d      	ldr	r3, [pc, #52]	@ (80097f4 <std+0x58>)
 80097c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80097c2:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <std+0x5c>)
 80097c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097c6:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <std+0x60>)
 80097c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x64>)
 80097cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x68>)
 80097d0:	6224      	str	r4, [r4, #32]
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d006      	beq.n	80097e4 <std+0x48>
 80097d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097da:	4294      	cmp	r4, r2
 80097dc:	d002      	beq.n	80097e4 <std+0x48>
 80097de:	33d0      	adds	r3, #208	@ 0xd0
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d105      	bne.n	80097f0 <std+0x54>
 80097e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ec:	f000 b9b2 	b.w	8009b54 <__retarget_lock_init_recursive>
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	bf00      	nop
 80097f4:	08009945 	.word	0x08009945
 80097f8:	08009967 	.word	0x08009967
 80097fc:	0800999f 	.word	0x0800999f
 8009800:	080099c3 	.word	0x080099c3
 8009804:	20005e84 	.word	0x20005e84

08009808 <stdio_exit_handler>:
 8009808:	4a02      	ldr	r2, [pc, #8]	@ (8009814 <stdio_exit_handler+0xc>)
 800980a:	4903      	ldr	r1, [pc, #12]	@ (8009818 <stdio_exit_handler+0x10>)
 800980c:	4803      	ldr	r0, [pc, #12]	@ (800981c <stdio_exit_handler+0x14>)
 800980e:	f000 b869 	b.w	80098e4 <_fwalk_sglue>
 8009812:	bf00      	nop
 8009814:	20000010 	.word	0x20000010
 8009818:	0800a40d 	.word	0x0800a40d
 800981c:	20000020 	.word	0x20000020

08009820 <cleanup_stdio>:
 8009820:	6841      	ldr	r1, [r0, #4]
 8009822:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <cleanup_stdio+0x34>)
 8009824:	4299      	cmp	r1, r3
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	d001      	beq.n	8009830 <cleanup_stdio+0x10>
 800982c:	f000 fdee 	bl	800a40c <_fflush_r>
 8009830:	68a1      	ldr	r1, [r4, #8]
 8009832:	4b09      	ldr	r3, [pc, #36]	@ (8009858 <cleanup_stdio+0x38>)
 8009834:	4299      	cmp	r1, r3
 8009836:	d002      	beq.n	800983e <cleanup_stdio+0x1e>
 8009838:	4620      	mov	r0, r4
 800983a:	f000 fde7 	bl	800a40c <_fflush_r>
 800983e:	68e1      	ldr	r1, [r4, #12]
 8009840:	4b06      	ldr	r3, [pc, #24]	@ (800985c <cleanup_stdio+0x3c>)
 8009842:	4299      	cmp	r1, r3
 8009844:	d004      	beq.n	8009850 <cleanup_stdio+0x30>
 8009846:	4620      	mov	r0, r4
 8009848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800984c:	f000 bdde 	b.w	800a40c <_fflush_r>
 8009850:	bd10      	pop	{r4, pc}
 8009852:	bf00      	nop
 8009854:	20005e84 	.word	0x20005e84
 8009858:	20005eec 	.word	0x20005eec
 800985c:	20005f54 	.word	0x20005f54

08009860 <global_stdio_init.part.0>:
 8009860:	b510      	push	{r4, lr}
 8009862:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <global_stdio_init.part.0+0x30>)
 8009864:	4c0b      	ldr	r4, [pc, #44]	@ (8009894 <global_stdio_init.part.0+0x34>)
 8009866:	4a0c      	ldr	r2, [pc, #48]	@ (8009898 <global_stdio_init.part.0+0x38>)
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	4620      	mov	r0, r4
 800986c:	2200      	movs	r2, #0
 800986e:	2104      	movs	r1, #4
 8009870:	f7ff ff94 	bl	800979c <std>
 8009874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009878:	2201      	movs	r2, #1
 800987a:	2109      	movs	r1, #9
 800987c:	f7ff ff8e 	bl	800979c <std>
 8009880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009884:	2202      	movs	r2, #2
 8009886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988a:	2112      	movs	r1, #18
 800988c:	f7ff bf86 	b.w	800979c <std>
 8009890:	20005fbc 	.word	0x20005fbc
 8009894:	20005e84 	.word	0x20005e84
 8009898:	08009809 	.word	0x08009809

0800989c <__sfp_lock_acquire>:
 800989c:	4801      	ldr	r0, [pc, #4]	@ (80098a4 <__sfp_lock_acquire+0x8>)
 800989e:	f000 b95a 	b.w	8009b56 <__retarget_lock_acquire_recursive>
 80098a2:	bf00      	nop
 80098a4:	20005fc5 	.word	0x20005fc5

080098a8 <__sfp_lock_release>:
 80098a8:	4801      	ldr	r0, [pc, #4]	@ (80098b0 <__sfp_lock_release+0x8>)
 80098aa:	f000 b955 	b.w	8009b58 <__retarget_lock_release_recursive>
 80098ae:	bf00      	nop
 80098b0:	20005fc5 	.word	0x20005fc5

080098b4 <__sinit>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	f7ff fff0 	bl	800989c <__sfp_lock_acquire>
 80098bc:	6a23      	ldr	r3, [r4, #32]
 80098be:	b11b      	cbz	r3, 80098c8 <__sinit+0x14>
 80098c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c4:	f7ff bff0 	b.w	80098a8 <__sfp_lock_release>
 80098c8:	4b04      	ldr	r3, [pc, #16]	@ (80098dc <__sinit+0x28>)
 80098ca:	6223      	str	r3, [r4, #32]
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <__sinit+0x2c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f5      	bne.n	80098c0 <__sinit+0xc>
 80098d4:	f7ff ffc4 	bl	8009860 <global_stdio_init.part.0>
 80098d8:	e7f2      	b.n	80098c0 <__sinit+0xc>
 80098da:	bf00      	nop
 80098dc:	08009821 	.word	0x08009821
 80098e0:	20005fbc 	.word	0x20005fbc

080098e4 <_fwalk_sglue>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	4607      	mov	r7, r0
 80098ea:	4688      	mov	r8, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	2600      	movs	r6, #0
 80098f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f4:	f1b9 0901 	subs.w	r9, r9, #1
 80098f8:	d505      	bpl.n	8009906 <_fwalk_sglue+0x22>
 80098fa:	6824      	ldr	r4, [r4, #0]
 80098fc:	2c00      	cmp	r4, #0
 80098fe:	d1f7      	bne.n	80098f0 <_fwalk_sglue+0xc>
 8009900:	4630      	mov	r0, r6
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d907      	bls.n	800991c <_fwalk_sglue+0x38>
 800990c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009910:	3301      	adds	r3, #1
 8009912:	d003      	beq.n	800991c <_fwalk_sglue+0x38>
 8009914:	4629      	mov	r1, r5
 8009916:	4638      	mov	r0, r7
 8009918:	47c0      	blx	r8
 800991a:	4306      	orrs	r6, r0
 800991c:	3568      	adds	r5, #104	@ 0x68
 800991e:	e7e9      	b.n	80098f4 <_fwalk_sglue+0x10>

08009920 <iprintf>:
 8009920:	b40f      	push	{r0, r1, r2, r3}
 8009922:	b507      	push	{r0, r1, r2, lr}
 8009924:	4906      	ldr	r1, [pc, #24]	@ (8009940 <iprintf+0x20>)
 8009926:	ab04      	add	r3, sp, #16
 8009928:	6808      	ldr	r0, [r1, #0]
 800992a:	f853 2b04 	ldr.w	r2, [r3], #4
 800992e:	6881      	ldr	r1, [r0, #8]
 8009930:	9301      	str	r3, [sp, #4]
 8009932:	f000 fa43 	bl	8009dbc <_vfiprintf_r>
 8009936:	b003      	add	sp, #12
 8009938:	f85d eb04 	ldr.w	lr, [sp], #4
 800993c:	b004      	add	sp, #16
 800993e:	4770      	bx	lr
 8009940:	2000001c 	.word	0x2000001c

08009944 <__sread>:
 8009944:	b510      	push	{r4, lr}
 8009946:	460c      	mov	r4, r1
 8009948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994c:	f000 f8c6 	bl	8009adc <_read_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	bfab      	itete	ge
 8009954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009956:	89a3      	ldrhlt	r3, [r4, #12]
 8009958:	181b      	addge	r3, r3, r0
 800995a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800995e:	bfac      	ite	ge
 8009960:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009962:	81a3      	strhlt	r3, [r4, #12]
 8009964:	bd10      	pop	{r4, pc}

08009966 <__swrite>:
 8009966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996a:	461f      	mov	r7, r3
 800996c:	898b      	ldrh	r3, [r1, #12]
 800996e:	05db      	lsls	r3, r3, #23
 8009970:	4605      	mov	r5, r0
 8009972:	460c      	mov	r4, r1
 8009974:	4616      	mov	r6, r2
 8009976:	d505      	bpl.n	8009984 <__swrite+0x1e>
 8009978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800997c:	2302      	movs	r3, #2
 800997e:	2200      	movs	r2, #0
 8009980:	f000 f89a 	bl	8009ab8 <_lseek_r>
 8009984:	89a3      	ldrh	r3, [r4, #12]
 8009986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800998a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	4632      	mov	r2, r6
 8009992:	463b      	mov	r3, r7
 8009994:	4628      	mov	r0, r5
 8009996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800999a:	f7f6 bfcf 	b.w	800093c <_write_r>

0800999e <__sseek>:
 800999e:	b510      	push	{r4, lr}
 80099a0:	460c      	mov	r4, r1
 80099a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a6:	f000 f887 	bl	8009ab8 <_lseek_r>
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	bf15      	itete	ne
 80099b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099ba:	81a3      	strheq	r3, [r4, #12]
 80099bc:	bf18      	it	ne
 80099be:	81a3      	strhne	r3, [r4, #12]
 80099c0:	bd10      	pop	{r4, pc}

080099c2 <__sclose>:
 80099c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c6:	f000 b809 	b.w	80099dc <_close_r>

080099ca <memset>:
 80099ca:	4402      	add	r2, r0
 80099cc:	4603      	mov	r3, r0
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d100      	bne.n	80099d4 <memset+0xa>
 80099d2:	4770      	bx	lr
 80099d4:	f803 1b01 	strb.w	r1, [r3], #1
 80099d8:	e7f9      	b.n	80099ce <memset+0x4>
	...

080099dc <_close_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4d06      	ldr	r5, [pc, #24]	@ (80099f8 <_close_r+0x1c>)
 80099e0:	2300      	movs	r3, #0
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	f7f8 f8af 	bl	8001b4a <_close>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_close_r+0x1a>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_close_r+0x1a>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	20005fc0 	.word	0x20005fc0

080099fc <_reclaim_reent>:
 80099fc:	4b2d      	ldr	r3, [pc, #180]	@ (8009ab4 <_reclaim_reent+0xb8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4283      	cmp	r3, r0
 8009a02:	b570      	push	{r4, r5, r6, lr}
 8009a04:	4604      	mov	r4, r0
 8009a06:	d053      	beq.n	8009ab0 <_reclaim_reent+0xb4>
 8009a08:	69c3      	ldr	r3, [r0, #28]
 8009a0a:	b31b      	cbz	r3, 8009a54 <_reclaim_reent+0x58>
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	b163      	cbz	r3, 8009a2a <_reclaim_reent+0x2e>
 8009a10:	2500      	movs	r5, #0
 8009a12:	69e3      	ldr	r3, [r4, #28]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	5959      	ldr	r1, [r3, r5]
 8009a18:	b9b1      	cbnz	r1, 8009a48 <_reclaim_reent+0x4c>
 8009a1a:	3504      	adds	r5, #4
 8009a1c:	2d80      	cmp	r5, #128	@ 0x80
 8009a1e:	d1f8      	bne.n	8009a12 <_reclaim_reent+0x16>
 8009a20:	69e3      	ldr	r3, [r4, #28]
 8009a22:	4620      	mov	r0, r4
 8009a24:	68d9      	ldr	r1, [r3, #12]
 8009a26:	f000 f8a7 	bl	8009b78 <_free_r>
 8009a2a:	69e3      	ldr	r3, [r4, #28]
 8009a2c:	6819      	ldr	r1, [r3, #0]
 8009a2e:	b111      	cbz	r1, 8009a36 <_reclaim_reent+0x3a>
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 f8a1 	bl	8009b78 <_free_r>
 8009a36:	69e3      	ldr	r3, [r4, #28]
 8009a38:	689d      	ldr	r5, [r3, #8]
 8009a3a:	b15d      	cbz	r5, 8009a54 <_reclaim_reent+0x58>
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	4620      	mov	r0, r4
 8009a40:	682d      	ldr	r5, [r5, #0]
 8009a42:	f000 f899 	bl	8009b78 <_free_r>
 8009a46:	e7f8      	b.n	8009a3a <_reclaim_reent+0x3e>
 8009a48:	680e      	ldr	r6, [r1, #0]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f894 	bl	8009b78 <_free_r>
 8009a50:	4631      	mov	r1, r6
 8009a52:	e7e1      	b.n	8009a18 <_reclaim_reent+0x1c>
 8009a54:	6961      	ldr	r1, [r4, #20]
 8009a56:	b111      	cbz	r1, 8009a5e <_reclaim_reent+0x62>
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 f88d 	bl	8009b78 <_free_r>
 8009a5e:	69e1      	ldr	r1, [r4, #28]
 8009a60:	b111      	cbz	r1, 8009a68 <_reclaim_reent+0x6c>
 8009a62:	4620      	mov	r0, r4
 8009a64:	f000 f888 	bl	8009b78 <_free_r>
 8009a68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009a6a:	b111      	cbz	r1, 8009a72 <_reclaim_reent+0x76>
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 f883 	bl	8009b78 <_free_r>
 8009a72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a74:	b111      	cbz	r1, 8009a7c <_reclaim_reent+0x80>
 8009a76:	4620      	mov	r0, r4
 8009a78:	f000 f87e 	bl	8009b78 <_free_r>
 8009a7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009a7e:	b111      	cbz	r1, 8009a86 <_reclaim_reent+0x8a>
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 f879 	bl	8009b78 <_free_r>
 8009a86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009a88:	b111      	cbz	r1, 8009a90 <_reclaim_reent+0x94>
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 f874 	bl	8009b78 <_free_r>
 8009a90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009a92:	b111      	cbz	r1, 8009a9a <_reclaim_reent+0x9e>
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 f86f 	bl	8009b78 <_free_r>
 8009a9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009a9c:	b111      	cbz	r1, 8009aa4 <_reclaim_reent+0xa8>
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f86a 	bl	8009b78 <_free_r>
 8009aa4:	6a23      	ldr	r3, [r4, #32]
 8009aa6:	b11b      	cbz	r3, 8009ab0 <_reclaim_reent+0xb4>
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009aae:	4718      	bx	r3
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	bf00      	nop
 8009ab4:	2000001c 	.word	0x2000001c

08009ab8 <_lseek_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4d07      	ldr	r5, [pc, #28]	@ (8009ad8 <_lseek_r+0x20>)
 8009abc:	4604      	mov	r4, r0
 8009abe:	4608      	mov	r0, r1
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	602a      	str	r2, [r5, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f7f8 f866 	bl	8001b98 <_lseek>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_lseek_r+0x1e>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_lseek_r+0x1e>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	20005fc0 	.word	0x20005fc0

08009adc <_read_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d07      	ldr	r5, [pc, #28]	@ (8009afc <_read_r+0x20>)
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	4608      	mov	r0, r1
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	602a      	str	r2, [r5, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	f7f8 f810 	bl	8001b10 <_read>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d102      	bne.n	8009afa <_read_r+0x1e>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	b103      	cbz	r3, 8009afa <_read_r+0x1e>
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	20005fc0 	.word	0x20005fc0

08009b00 <__errno>:
 8009b00:	4b01      	ldr	r3, [pc, #4]	@ (8009b08 <__errno+0x8>)
 8009b02:	6818      	ldr	r0, [r3, #0]
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	2000001c 	.word	0x2000001c

08009b0c <__libc_init_array>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8009b44 <__libc_init_array+0x38>)
 8009b10:	4c0d      	ldr	r4, [pc, #52]	@ (8009b48 <__libc_init_array+0x3c>)
 8009b12:	1b64      	subs	r4, r4, r5
 8009b14:	10a4      	asrs	r4, r4, #2
 8009b16:	2600      	movs	r6, #0
 8009b18:	42a6      	cmp	r6, r4
 8009b1a:	d109      	bne.n	8009b30 <__libc_init_array+0x24>
 8009b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8009b4c <__libc_init_array+0x40>)
 8009b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8009b50 <__libc_init_array+0x44>)
 8009b20:	f000 fdc4 	bl	800a6ac <_init>
 8009b24:	1b64      	subs	r4, r4, r5
 8009b26:	10a4      	asrs	r4, r4, #2
 8009b28:	2600      	movs	r6, #0
 8009b2a:	42a6      	cmp	r6, r4
 8009b2c:	d105      	bne.n	8009b3a <__libc_init_array+0x2e>
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b34:	4798      	blx	r3
 8009b36:	3601      	adds	r6, #1
 8009b38:	e7ee      	b.n	8009b18 <__libc_init_array+0xc>
 8009b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b3e:	4798      	blx	r3
 8009b40:	3601      	adds	r6, #1
 8009b42:	e7f2      	b.n	8009b2a <__libc_init_array+0x1e>
 8009b44:	0800a800 	.word	0x0800a800
 8009b48:	0800a800 	.word	0x0800a800
 8009b4c:	0800a800 	.word	0x0800a800
 8009b50:	0800a804 	.word	0x0800a804

08009b54 <__retarget_lock_init_recursive>:
 8009b54:	4770      	bx	lr

08009b56 <__retarget_lock_acquire_recursive>:
 8009b56:	4770      	bx	lr

08009b58 <__retarget_lock_release_recursive>:
 8009b58:	4770      	bx	lr

08009b5a <memcpy>:
 8009b5a:	440a      	add	r2, r1
 8009b5c:	4291      	cmp	r1, r2
 8009b5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b62:	d100      	bne.n	8009b66 <memcpy+0xc>
 8009b64:	4770      	bx	lr
 8009b66:	b510      	push	{r4, lr}
 8009b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b70:	4291      	cmp	r1, r2
 8009b72:	d1f9      	bne.n	8009b68 <memcpy+0xe>
 8009b74:	bd10      	pop	{r4, pc}
	...

08009b78 <_free_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	d041      	beq.n	8009c04 <_free_r+0x8c>
 8009b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b84:	1f0c      	subs	r4, r1, #4
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bfb8      	it	lt
 8009b8a:	18e4      	addlt	r4, r4, r3
 8009b8c:	f000 f8e0 	bl	8009d50 <__malloc_lock>
 8009b90:	4a1d      	ldr	r2, [pc, #116]	@ (8009c08 <_free_r+0x90>)
 8009b92:	6813      	ldr	r3, [r2, #0]
 8009b94:	b933      	cbnz	r3, 8009ba4 <_free_r+0x2c>
 8009b96:	6063      	str	r3, [r4, #4]
 8009b98:	6014      	str	r4, [r2, #0]
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba0:	f000 b8dc 	b.w	8009d5c <__malloc_unlock>
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	d908      	bls.n	8009bba <_free_r+0x42>
 8009ba8:	6820      	ldr	r0, [r4, #0]
 8009baa:	1821      	adds	r1, r4, r0
 8009bac:	428b      	cmp	r3, r1
 8009bae:	bf01      	itttt	eq
 8009bb0:	6819      	ldreq	r1, [r3, #0]
 8009bb2:	685b      	ldreq	r3, [r3, #4]
 8009bb4:	1809      	addeq	r1, r1, r0
 8009bb6:	6021      	streq	r1, [r4, #0]
 8009bb8:	e7ed      	b.n	8009b96 <_free_r+0x1e>
 8009bba:	461a      	mov	r2, r3
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	b10b      	cbz	r3, 8009bc4 <_free_r+0x4c>
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d9fa      	bls.n	8009bba <_free_r+0x42>
 8009bc4:	6811      	ldr	r1, [r2, #0]
 8009bc6:	1850      	adds	r0, r2, r1
 8009bc8:	42a0      	cmp	r0, r4
 8009bca:	d10b      	bne.n	8009be4 <_free_r+0x6c>
 8009bcc:	6820      	ldr	r0, [r4, #0]
 8009bce:	4401      	add	r1, r0
 8009bd0:	1850      	adds	r0, r2, r1
 8009bd2:	4283      	cmp	r3, r0
 8009bd4:	6011      	str	r1, [r2, #0]
 8009bd6:	d1e0      	bne.n	8009b9a <_free_r+0x22>
 8009bd8:	6818      	ldr	r0, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	6053      	str	r3, [r2, #4]
 8009bde:	4408      	add	r0, r1
 8009be0:	6010      	str	r0, [r2, #0]
 8009be2:	e7da      	b.n	8009b9a <_free_r+0x22>
 8009be4:	d902      	bls.n	8009bec <_free_r+0x74>
 8009be6:	230c      	movs	r3, #12
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	e7d6      	b.n	8009b9a <_free_r+0x22>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	1821      	adds	r1, r4, r0
 8009bf0:	428b      	cmp	r3, r1
 8009bf2:	bf04      	itt	eq
 8009bf4:	6819      	ldreq	r1, [r3, #0]
 8009bf6:	685b      	ldreq	r3, [r3, #4]
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	bf04      	itt	eq
 8009bfc:	1809      	addeq	r1, r1, r0
 8009bfe:	6021      	streq	r1, [r4, #0]
 8009c00:	6054      	str	r4, [r2, #4]
 8009c02:	e7ca      	b.n	8009b9a <_free_r+0x22>
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	bf00      	nop
 8009c08:	20005fcc 	.word	0x20005fcc

08009c0c <sbrk_aligned>:
 8009c0c:	b570      	push	{r4, r5, r6, lr}
 8009c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8009c4c <sbrk_aligned+0x40>)
 8009c10:	460c      	mov	r4, r1
 8009c12:	6831      	ldr	r1, [r6, #0]
 8009c14:	4605      	mov	r5, r0
 8009c16:	b911      	cbnz	r1, 8009c1e <sbrk_aligned+0x12>
 8009c18:	f000 fcb4 	bl	800a584 <_sbrk_r>
 8009c1c:	6030      	str	r0, [r6, #0]
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4628      	mov	r0, r5
 8009c22:	f000 fcaf 	bl	800a584 <_sbrk_r>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	d103      	bne.n	8009c32 <sbrk_aligned+0x26>
 8009c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c2e:	4620      	mov	r0, r4
 8009c30:	bd70      	pop	{r4, r5, r6, pc}
 8009c32:	1cc4      	adds	r4, r0, #3
 8009c34:	f024 0403 	bic.w	r4, r4, #3
 8009c38:	42a0      	cmp	r0, r4
 8009c3a:	d0f8      	beq.n	8009c2e <sbrk_aligned+0x22>
 8009c3c:	1a21      	subs	r1, r4, r0
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 fca0 	bl	800a584 <_sbrk_r>
 8009c44:	3001      	adds	r0, #1
 8009c46:	d1f2      	bne.n	8009c2e <sbrk_aligned+0x22>
 8009c48:	e7ef      	b.n	8009c2a <sbrk_aligned+0x1e>
 8009c4a:	bf00      	nop
 8009c4c:	20005fc8 	.word	0x20005fc8

08009c50 <_malloc_r>:
 8009c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c54:	1ccd      	adds	r5, r1, #3
 8009c56:	f025 0503 	bic.w	r5, r5, #3
 8009c5a:	3508      	adds	r5, #8
 8009c5c:	2d0c      	cmp	r5, #12
 8009c5e:	bf38      	it	cc
 8009c60:	250c      	movcc	r5, #12
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	4606      	mov	r6, r0
 8009c66:	db01      	blt.n	8009c6c <_malloc_r+0x1c>
 8009c68:	42a9      	cmp	r1, r5
 8009c6a:	d904      	bls.n	8009c76 <_malloc_r+0x26>
 8009c6c:	230c      	movs	r3, #12
 8009c6e:	6033      	str	r3, [r6, #0]
 8009c70:	2000      	movs	r0, #0
 8009c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d4c <_malloc_r+0xfc>
 8009c7a:	f000 f869 	bl	8009d50 <__malloc_lock>
 8009c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c82:	461c      	mov	r4, r3
 8009c84:	bb44      	cbnz	r4, 8009cd8 <_malloc_r+0x88>
 8009c86:	4629      	mov	r1, r5
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7ff ffbf 	bl	8009c0c <sbrk_aligned>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	4604      	mov	r4, r0
 8009c92:	d158      	bne.n	8009d46 <_malloc_r+0xf6>
 8009c94:	f8d8 4000 	ldr.w	r4, [r8]
 8009c98:	4627      	mov	r7, r4
 8009c9a:	2f00      	cmp	r7, #0
 8009c9c:	d143      	bne.n	8009d26 <_malloc_r+0xd6>
 8009c9e:	2c00      	cmp	r4, #0
 8009ca0:	d04b      	beq.n	8009d3a <_malloc_r+0xea>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	eb04 0903 	add.w	r9, r4, r3
 8009cac:	f000 fc6a 	bl	800a584 <_sbrk_r>
 8009cb0:	4581      	cmp	r9, r0
 8009cb2:	d142      	bne.n	8009d3a <_malloc_r+0xea>
 8009cb4:	6821      	ldr	r1, [r4, #0]
 8009cb6:	1a6d      	subs	r5, r5, r1
 8009cb8:	4629      	mov	r1, r5
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7ff ffa6 	bl	8009c0c <sbrk_aligned>
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d03a      	beq.n	8009d3a <_malloc_r+0xea>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	442b      	add	r3, r5
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	f8d8 3000 	ldr.w	r3, [r8]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	bb62      	cbnz	r2, 8009d2c <_malloc_r+0xdc>
 8009cd2:	f8c8 7000 	str.w	r7, [r8]
 8009cd6:	e00f      	b.n	8009cf8 <_malloc_r+0xa8>
 8009cd8:	6822      	ldr	r2, [r4, #0]
 8009cda:	1b52      	subs	r2, r2, r5
 8009cdc:	d420      	bmi.n	8009d20 <_malloc_r+0xd0>
 8009cde:	2a0b      	cmp	r2, #11
 8009ce0:	d917      	bls.n	8009d12 <_malloc_r+0xc2>
 8009ce2:	1961      	adds	r1, r4, r5
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	6025      	str	r5, [r4, #0]
 8009ce8:	bf18      	it	ne
 8009cea:	6059      	strne	r1, [r3, #4]
 8009cec:	6863      	ldr	r3, [r4, #4]
 8009cee:	bf08      	it	eq
 8009cf0:	f8c8 1000 	streq.w	r1, [r8]
 8009cf4:	5162      	str	r2, [r4, r5]
 8009cf6:	604b      	str	r3, [r1, #4]
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f000 f82f 	bl	8009d5c <__malloc_unlock>
 8009cfe:	f104 000b 	add.w	r0, r4, #11
 8009d02:	1d23      	adds	r3, r4, #4
 8009d04:	f020 0007 	bic.w	r0, r0, #7
 8009d08:	1ac2      	subs	r2, r0, r3
 8009d0a:	bf1c      	itt	ne
 8009d0c:	1a1b      	subne	r3, r3, r0
 8009d0e:	50a3      	strne	r3, [r4, r2]
 8009d10:	e7af      	b.n	8009c72 <_malloc_r+0x22>
 8009d12:	6862      	ldr	r2, [r4, #4]
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	bf0c      	ite	eq
 8009d18:	f8c8 2000 	streq.w	r2, [r8]
 8009d1c:	605a      	strne	r2, [r3, #4]
 8009d1e:	e7eb      	b.n	8009cf8 <_malloc_r+0xa8>
 8009d20:	4623      	mov	r3, r4
 8009d22:	6864      	ldr	r4, [r4, #4]
 8009d24:	e7ae      	b.n	8009c84 <_malloc_r+0x34>
 8009d26:	463c      	mov	r4, r7
 8009d28:	687f      	ldr	r7, [r7, #4]
 8009d2a:	e7b6      	b.n	8009c9a <_malloc_r+0x4a>
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	d1fb      	bne.n	8009d2c <_malloc_r+0xdc>
 8009d34:	2300      	movs	r3, #0
 8009d36:	6053      	str	r3, [r2, #4]
 8009d38:	e7de      	b.n	8009cf8 <_malloc_r+0xa8>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	6033      	str	r3, [r6, #0]
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f000 f80c 	bl	8009d5c <__malloc_unlock>
 8009d44:	e794      	b.n	8009c70 <_malloc_r+0x20>
 8009d46:	6005      	str	r5, [r0, #0]
 8009d48:	e7d6      	b.n	8009cf8 <_malloc_r+0xa8>
 8009d4a:	bf00      	nop
 8009d4c:	20005fcc 	.word	0x20005fcc

08009d50 <__malloc_lock>:
 8009d50:	4801      	ldr	r0, [pc, #4]	@ (8009d58 <__malloc_lock+0x8>)
 8009d52:	f7ff bf00 	b.w	8009b56 <__retarget_lock_acquire_recursive>
 8009d56:	bf00      	nop
 8009d58:	20005fc4 	.word	0x20005fc4

08009d5c <__malloc_unlock>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	@ (8009d64 <__malloc_unlock+0x8>)
 8009d5e:	f7ff befb 	b.w	8009b58 <__retarget_lock_release_recursive>
 8009d62:	bf00      	nop
 8009d64:	20005fc4 	.word	0x20005fc4

08009d68 <__sfputc_r>:
 8009d68:	6893      	ldr	r3, [r2, #8]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	b410      	push	{r4}
 8009d70:	6093      	str	r3, [r2, #8]
 8009d72:	da08      	bge.n	8009d86 <__sfputc_r+0x1e>
 8009d74:	6994      	ldr	r4, [r2, #24]
 8009d76:	42a3      	cmp	r3, r4
 8009d78:	db01      	blt.n	8009d7e <__sfputc_r+0x16>
 8009d7a:	290a      	cmp	r1, #10
 8009d7c:	d103      	bne.n	8009d86 <__sfputc_r+0x1e>
 8009d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d82:	f000 bb6b 	b.w	800a45c <__swbuf_r>
 8009d86:	6813      	ldr	r3, [r2, #0]
 8009d88:	1c58      	adds	r0, r3, #1
 8009d8a:	6010      	str	r0, [r2, #0]
 8009d8c:	7019      	strb	r1, [r3, #0]
 8009d8e:	4608      	mov	r0, r1
 8009d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <__sfputs_r>:
 8009d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d98:	4606      	mov	r6, r0
 8009d9a:	460f      	mov	r7, r1
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	18d5      	adds	r5, r2, r3
 8009da0:	42ac      	cmp	r4, r5
 8009da2:	d101      	bne.n	8009da8 <__sfputs_r+0x12>
 8009da4:	2000      	movs	r0, #0
 8009da6:	e007      	b.n	8009db8 <__sfputs_r+0x22>
 8009da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dac:	463a      	mov	r2, r7
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff ffda 	bl	8009d68 <__sfputc_r>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d1f3      	bne.n	8009da0 <__sfputs_r+0xa>
 8009db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dbc <_vfiprintf_r>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	460d      	mov	r5, r1
 8009dc2:	b09d      	sub	sp, #116	@ 0x74
 8009dc4:	4614      	mov	r4, r2
 8009dc6:	4698      	mov	r8, r3
 8009dc8:	4606      	mov	r6, r0
 8009dca:	b118      	cbz	r0, 8009dd4 <_vfiprintf_r+0x18>
 8009dcc:	6a03      	ldr	r3, [r0, #32]
 8009dce:	b90b      	cbnz	r3, 8009dd4 <_vfiprintf_r+0x18>
 8009dd0:	f7ff fd70 	bl	80098b4 <__sinit>
 8009dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dd6:	07d9      	lsls	r1, r3, #31
 8009dd8:	d405      	bmi.n	8009de6 <_vfiprintf_r+0x2a>
 8009dda:	89ab      	ldrh	r3, [r5, #12]
 8009ddc:	059a      	lsls	r2, r3, #22
 8009dde:	d402      	bmi.n	8009de6 <_vfiprintf_r+0x2a>
 8009de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009de2:	f7ff feb8 	bl	8009b56 <__retarget_lock_acquire_recursive>
 8009de6:	89ab      	ldrh	r3, [r5, #12]
 8009de8:	071b      	lsls	r3, r3, #28
 8009dea:	d501      	bpl.n	8009df0 <_vfiprintf_r+0x34>
 8009dec:	692b      	ldr	r3, [r5, #16]
 8009dee:	b99b      	cbnz	r3, 8009e18 <_vfiprintf_r+0x5c>
 8009df0:	4629      	mov	r1, r5
 8009df2:	4630      	mov	r0, r6
 8009df4:	f000 fb70 	bl	800a4d8 <__swsetup_r>
 8009df8:	b170      	cbz	r0, 8009e18 <_vfiprintf_r+0x5c>
 8009dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dfc:	07dc      	lsls	r4, r3, #31
 8009dfe:	d504      	bpl.n	8009e0a <_vfiprintf_r+0x4e>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	b01d      	add	sp, #116	@ 0x74
 8009e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	0598      	lsls	r0, r3, #22
 8009e0e:	d4f7      	bmi.n	8009e00 <_vfiprintf_r+0x44>
 8009e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e12:	f7ff fea1 	bl	8009b58 <__retarget_lock_release_recursive>
 8009e16:	e7f3      	b.n	8009e00 <_vfiprintf_r+0x44>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e1c:	2320      	movs	r3, #32
 8009e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e26:	2330      	movs	r3, #48	@ 0x30
 8009e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fd8 <_vfiprintf_r+0x21c>
 8009e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e30:	f04f 0901 	mov.w	r9, #1
 8009e34:	4623      	mov	r3, r4
 8009e36:	469a      	mov	sl, r3
 8009e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e3c:	b10a      	cbz	r2, 8009e42 <_vfiprintf_r+0x86>
 8009e3e:	2a25      	cmp	r2, #37	@ 0x25
 8009e40:	d1f9      	bne.n	8009e36 <_vfiprintf_r+0x7a>
 8009e42:	ebba 0b04 	subs.w	fp, sl, r4
 8009e46:	d00b      	beq.n	8009e60 <_vfiprintf_r+0xa4>
 8009e48:	465b      	mov	r3, fp
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff ffa1 	bl	8009d96 <__sfputs_r>
 8009e54:	3001      	adds	r0, #1
 8009e56:	f000 80a7 	beq.w	8009fa8 <_vfiprintf_r+0x1ec>
 8009e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e5c:	445a      	add	r2, fp
 8009e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e60:	f89a 3000 	ldrb.w	r3, [sl]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 809f 	beq.w	8009fa8 <_vfiprintf_r+0x1ec>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e74:	f10a 0a01 	add.w	sl, sl, #1
 8009e78:	9304      	str	r3, [sp, #16]
 8009e7a:	9307      	str	r3, [sp, #28]
 8009e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e82:	4654      	mov	r4, sl
 8009e84:	2205      	movs	r2, #5
 8009e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8a:	4853      	ldr	r0, [pc, #332]	@ (8009fd8 <_vfiprintf_r+0x21c>)
 8009e8c:	f7f6 f9d8 	bl	8000240 <memchr>
 8009e90:	9a04      	ldr	r2, [sp, #16]
 8009e92:	b9d8      	cbnz	r0, 8009ecc <_vfiprintf_r+0x110>
 8009e94:	06d1      	lsls	r1, r2, #27
 8009e96:	bf44      	itt	mi
 8009e98:	2320      	movmi	r3, #32
 8009e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e9e:	0713      	lsls	r3, r2, #28
 8009ea0:	bf44      	itt	mi
 8009ea2:	232b      	movmi	r3, #43	@ 0x2b
 8009ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8009eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eae:	d015      	beq.n	8009edc <_vfiprintf_r+0x120>
 8009eb0:	9a07      	ldr	r2, [sp, #28]
 8009eb2:	4654      	mov	r4, sl
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f04f 0c0a 	mov.w	ip, #10
 8009eba:	4621      	mov	r1, r4
 8009ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ec0:	3b30      	subs	r3, #48	@ 0x30
 8009ec2:	2b09      	cmp	r3, #9
 8009ec4:	d94b      	bls.n	8009f5e <_vfiprintf_r+0x1a2>
 8009ec6:	b1b0      	cbz	r0, 8009ef6 <_vfiprintf_r+0x13a>
 8009ec8:	9207      	str	r2, [sp, #28]
 8009eca:	e014      	b.n	8009ef6 <_vfiprintf_r+0x13a>
 8009ecc:	eba0 0308 	sub.w	r3, r0, r8
 8009ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	9304      	str	r3, [sp, #16]
 8009ed8:	46a2      	mov	sl, r4
 8009eda:	e7d2      	b.n	8009e82 <_vfiprintf_r+0xc6>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	1d19      	adds	r1, r3, #4
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	9103      	str	r1, [sp, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bfbb      	ittet	lt
 8009ee8:	425b      	neglt	r3, r3
 8009eea:	f042 0202 	orrlt.w	r2, r2, #2
 8009eee:	9307      	strge	r3, [sp, #28]
 8009ef0:	9307      	strlt	r3, [sp, #28]
 8009ef2:	bfb8      	it	lt
 8009ef4:	9204      	strlt	r2, [sp, #16]
 8009ef6:	7823      	ldrb	r3, [r4, #0]
 8009ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009efa:	d10a      	bne.n	8009f12 <_vfiprintf_r+0x156>
 8009efc:	7863      	ldrb	r3, [r4, #1]
 8009efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f00:	d132      	bne.n	8009f68 <_vfiprintf_r+0x1ac>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	1d1a      	adds	r2, r3, #4
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	9203      	str	r2, [sp, #12]
 8009f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f0e:	3402      	adds	r4, #2
 8009f10:	9305      	str	r3, [sp, #20]
 8009f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fe8 <_vfiprintf_r+0x22c>
 8009f16:	7821      	ldrb	r1, [r4, #0]
 8009f18:	2203      	movs	r2, #3
 8009f1a:	4650      	mov	r0, sl
 8009f1c:	f7f6 f990 	bl	8000240 <memchr>
 8009f20:	b138      	cbz	r0, 8009f32 <_vfiprintf_r+0x176>
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	eba0 000a 	sub.w	r0, r0, sl
 8009f28:	2240      	movs	r2, #64	@ 0x40
 8009f2a:	4082      	lsls	r2, r0
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	3401      	adds	r4, #1
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f36:	4829      	ldr	r0, [pc, #164]	@ (8009fdc <_vfiprintf_r+0x220>)
 8009f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f3c:	2206      	movs	r2, #6
 8009f3e:	f7f6 f97f 	bl	8000240 <memchr>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d03f      	beq.n	8009fc6 <_vfiprintf_r+0x20a>
 8009f46:	4b26      	ldr	r3, [pc, #152]	@ (8009fe0 <_vfiprintf_r+0x224>)
 8009f48:	bb1b      	cbnz	r3, 8009f92 <_vfiprintf_r+0x1d6>
 8009f4a:	9b03      	ldr	r3, [sp, #12]
 8009f4c:	3307      	adds	r3, #7
 8009f4e:	f023 0307 	bic.w	r3, r3, #7
 8009f52:	3308      	adds	r3, #8
 8009f54:	9303      	str	r3, [sp, #12]
 8009f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f58:	443b      	add	r3, r7
 8009f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f5c:	e76a      	b.n	8009e34 <_vfiprintf_r+0x78>
 8009f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f62:	460c      	mov	r4, r1
 8009f64:	2001      	movs	r0, #1
 8009f66:	e7a8      	b.n	8009eba <_vfiprintf_r+0xfe>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	3401      	adds	r4, #1
 8009f6c:	9305      	str	r3, [sp, #20]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	f04f 0c0a 	mov.w	ip, #10
 8009f74:	4620      	mov	r0, r4
 8009f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f7a:	3a30      	subs	r2, #48	@ 0x30
 8009f7c:	2a09      	cmp	r2, #9
 8009f7e:	d903      	bls.n	8009f88 <_vfiprintf_r+0x1cc>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0c6      	beq.n	8009f12 <_vfiprintf_r+0x156>
 8009f84:	9105      	str	r1, [sp, #20]
 8009f86:	e7c4      	b.n	8009f12 <_vfiprintf_r+0x156>
 8009f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7f0      	b.n	8009f74 <_vfiprintf_r+0x1b8>
 8009f92:	ab03      	add	r3, sp, #12
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	462a      	mov	r2, r5
 8009f98:	4b12      	ldr	r3, [pc, #72]	@ (8009fe4 <_vfiprintf_r+0x228>)
 8009f9a:	a904      	add	r1, sp, #16
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f3af 8000 	nop.w
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	1c78      	adds	r0, r7, #1
 8009fa6:	d1d6      	bne.n	8009f56 <_vfiprintf_r+0x19a>
 8009fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009faa:	07d9      	lsls	r1, r3, #31
 8009fac:	d405      	bmi.n	8009fba <_vfiprintf_r+0x1fe>
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	059a      	lsls	r2, r3, #22
 8009fb2:	d402      	bmi.n	8009fba <_vfiprintf_r+0x1fe>
 8009fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fb6:	f7ff fdcf 	bl	8009b58 <__retarget_lock_release_recursive>
 8009fba:	89ab      	ldrh	r3, [r5, #12]
 8009fbc:	065b      	lsls	r3, r3, #25
 8009fbe:	f53f af1f 	bmi.w	8009e00 <_vfiprintf_r+0x44>
 8009fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fc4:	e71e      	b.n	8009e04 <_vfiprintf_r+0x48>
 8009fc6:	ab03      	add	r3, sp, #12
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	462a      	mov	r2, r5
 8009fcc:	4b05      	ldr	r3, [pc, #20]	@ (8009fe4 <_vfiprintf_r+0x228>)
 8009fce:	a904      	add	r1, sp, #16
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f000 f879 	bl	800a0c8 <_printf_i>
 8009fd6:	e7e4      	b.n	8009fa2 <_vfiprintf_r+0x1e6>
 8009fd8:	0800a7c4 	.word	0x0800a7c4
 8009fdc:	0800a7ce 	.word	0x0800a7ce
 8009fe0:	00000000 	.word	0x00000000
 8009fe4:	08009d97 	.word	0x08009d97
 8009fe8:	0800a7ca 	.word	0x0800a7ca

08009fec <_printf_common>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	4698      	mov	r8, r3
 8009ff4:	688a      	ldr	r2, [r1, #8]
 8009ff6:	690b      	ldr	r3, [r1, #16]
 8009ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	bfb8      	it	lt
 800a000:	4613      	movlt	r3, r2
 800a002:	6033      	str	r3, [r6, #0]
 800a004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a008:	4607      	mov	r7, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	b10a      	cbz	r2, 800a012 <_printf_common+0x26>
 800a00e:	3301      	adds	r3, #1
 800a010:	6033      	str	r3, [r6, #0]
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	0699      	lsls	r1, r3, #26
 800a016:	bf42      	ittt	mi
 800a018:	6833      	ldrmi	r3, [r6, #0]
 800a01a:	3302      	addmi	r3, #2
 800a01c:	6033      	strmi	r3, [r6, #0]
 800a01e:	6825      	ldr	r5, [r4, #0]
 800a020:	f015 0506 	ands.w	r5, r5, #6
 800a024:	d106      	bne.n	800a034 <_printf_common+0x48>
 800a026:	f104 0a19 	add.w	sl, r4, #25
 800a02a:	68e3      	ldr	r3, [r4, #12]
 800a02c:	6832      	ldr	r2, [r6, #0]
 800a02e:	1a9b      	subs	r3, r3, r2
 800a030:	42ab      	cmp	r3, r5
 800a032:	dc26      	bgt.n	800a082 <_printf_common+0x96>
 800a034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	3b00      	subs	r3, #0
 800a03c:	bf18      	it	ne
 800a03e:	2301      	movne	r3, #1
 800a040:	0692      	lsls	r2, r2, #26
 800a042:	d42b      	bmi.n	800a09c <_printf_common+0xb0>
 800a044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a048:	4641      	mov	r1, r8
 800a04a:	4638      	mov	r0, r7
 800a04c:	47c8      	blx	r9
 800a04e:	3001      	adds	r0, #1
 800a050:	d01e      	beq.n	800a090 <_printf_common+0xa4>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	6922      	ldr	r2, [r4, #16]
 800a056:	f003 0306 	and.w	r3, r3, #6
 800a05a:	2b04      	cmp	r3, #4
 800a05c:	bf02      	ittt	eq
 800a05e:	68e5      	ldreq	r5, [r4, #12]
 800a060:	6833      	ldreq	r3, [r6, #0]
 800a062:	1aed      	subeq	r5, r5, r3
 800a064:	68a3      	ldr	r3, [r4, #8]
 800a066:	bf0c      	ite	eq
 800a068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a06c:	2500      	movne	r5, #0
 800a06e:	4293      	cmp	r3, r2
 800a070:	bfc4      	itt	gt
 800a072:	1a9b      	subgt	r3, r3, r2
 800a074:	18ed      	addgt	r5, r5, r3
 800a076:	2600      	movs	r6, #0
 800a078:	341a      	adds	r4, #26
 800a07a:	42b5      	cmp	r5, r6
 800a07c:	d11a      	bne.n	800a0b4 <_printf_common+0xc8>
 800a07e:	2000      	movs	r0, #0
 800a080:	e008      	b.n	800a094 <_printf_common+0xa8>
 800a082:	2301      	movs	r3, #1
 800a084:	4652      	mov	r2, sl
 800a086:	4641      	mov	r1, r8
 800a088:	4638      	mov	r0, r7
 800a08a:	47c8      	blx	r9
 800a08c:	3001      	adds	r0, #1
 800a08e:	d103      	bne.n	800a098 <_printf_common+0xac>
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a098:	3501      	adds	r5, #1
 800a09a:	e7c6      	b.n	800a02a <_printf_common+0x3e>
 800a09c:	18e1      	adds	r1, r4, r3
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	2030      	movs	r0, #48	@ 0x30
 800a0a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0a6:	4422      	add	r2, r4
 800a0a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0b0:	3302      	adds	r3, #2
 800a0b2:	e7c7      	b.n	800a044 <_printf_common+0x58>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	4622      	mov	r2, r4
 800a0b8:	4641      	mov	r1, r8
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	47c8      	blx	r9
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d0e6      	beq.n	800a090 <_printf_common+0xa4>
 800a0c2:	3601      	adds	r6, #1
 800a0c4:	e7d9      	b.n	800a07a <_printf_common+0x8e>
	...

0800a0c8 <_printf_i>:
 800a0c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0cc:	7e0f      	ldrb	r7, [r1, #24]
 800a0ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0d0:	2f78      	cmp	r7, #120	@ 0x78
 800a0d2:	4691      	mov	r9, r2
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	469a      	mov	sl, r3
 800a0da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0de:	d807      	bhi.n	800a0f0 <_printf_i+0x28>
 800a0e0:	2f62      	cmp	r7, #98	@ 0x62
 800a0e2:	d80a      	bhi.n	800a0fa <_printf_i+0x32>
 800a0e4:	2f00      	cmp	r7, #0
 800a0e6:	f000 80d1 	beq.w	800a28c <_printf_i+0x1c4>
 800a0ea:	2f58      	cmp	r7, #88	@ 0x58
 800a0ec:	f000 80b8 	beq.w	800a260 <_printf_i+0x198>
 800a0f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0f8:	e03a      	b.n	800a170 <_printf_i+0xa8>
 800a0fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0fe:	2b15      	cmp	r3, #21
 800a100:	d8f6      	bhi.n	800a0f0 <_printf_i+0x28>
 800a102:	a101      	add	r1, pc, #4	@ (adr r1, 800a108 <_printf_i+0x40>)
 800a104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a108:	0800a161 	.word	0x0800a161
 800a10c:	0800a175 	.word	0x0800a175
 800a110:	0800a0f1 	.word	0x0800a0f1
 800a114:	0800a0f1 	.word	0x0800a0f1
 800a118:	0800a0f1 	.word	0x0800a0f1
 800a11c:	0800a0f1 	.word	0x0800a0f1
 800a120:	0800a175 	.word	0x0800a175
 800a124:	0800a0f1 	.word	0x0800a0f1
 800a128:	0800a0f1 	.word	0x0800a0f1
 800a12c:	0800a0f1 	.word	0x0800a0f1
 800a130:	0800a0f1 	.word	0x0800a0f1
 800a134:	0800a273 	.word	0x0800a273
 800a138:	0800a19f 	.word	0x0800a19f
 800a13c:	0800a22d 	.word	0x0800a22d
 800a140:	0800a0f1 	.word	0x0800a0f1
 800a144:	0800a0f1 	.word	0x0800a0f1
 800a148:	0800a295 	.word	0x0800a295
 800a14c:	0800a0f1 	.word	0x0800a0f1
 800a150:	0800a19f 	.word	0x0800a19f
 800a154:	0800a0f1 	.word	0x0800a0f1
 800a158:	0800a0f1 	.word	0x0800a0f1
 800a15c:	0800a235 	.word	0x0800a235
 800a160:	6833      	ldr	r3, [r6, #0]
 800a162:	1d1a      	adds	r2, r3, #4
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6032      	str	r2, [r6, #0]
 800a168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a16c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a170:	2301      	movs	r3, #1
 800a172:	e09c      	b.n	800a2ae <_printf_i+0x1e6>
 800a174:	6833      	ldr	r3, [r6, #0]
 800a176:	6820      	ldr	r0, [r4, #0]
 800a178:	1d19      	adds	r1, r3, #4
 800a17a:	6031      	str	r1, [r6, #0]
 800a17c:	0606      	lsls	r6, r0, #24
 800a17e:	d501      	bpl.n	800a184 <_printf_i+0xbc>
 800a180:	681d      	ldr	r5, [r3, #0]
 800a182:	e003      	b.n	800a18c <_printf_i+0xc4>
 800a184:	0645      	lsls	r5, r0, #25
 800a186:	d5fb      	bpl.n	800a180 <_printf_i+0xb8>
 800a188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a18c:	2d00      	cmp	r5, #0
 800a18e:	da03      	bge.n	800a198 <_printf_i+0xd0>
 800a190:	232d      	movs	r3, #45	@ 0x2d
 800a192:	426d      	negs	r5, r5
 800a194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a198:	4858      	ldr	r0, [pc, #352]	@ (800a2fc <_printf_i+0x234>)
 800a19a:	230a      	movs	r3, #10
 800a19c:	e011      	b.n	800a1c2 <_printf_i+0xfa>
 800a19e:	6821      	ldr	r1, [r4, #0]
 800a1a0:	6833      	ldr	r3, [r6, #0]
 800a1a2:	0608      	lsls	r0, r1, #24
 800a1a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1a8:	d402      	bmi.n	800a1b0 <_printf_i+0xe8>
 800a1aa:	0649      	lsls	r1, r1, #25
 800a1ac:	bf48      	it	mi
 800a1ae:	b2ad      	uxthmi	r5, r5
 800a1b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1b2:	4852      	ldr	r0, [pc, #328]	@ (800a2fc <_printf_i+0x234>)
 800a1b4:	6033      	str	r3, [r6, #0]
 800a1b6:	bf14      	ite	ne
 800a1b8:	230a      	movne	r3, #10
 800a1ba:	2308      	moveq	r3, #8
 800a1bc:	2100      	movs	r1, #0
 800a1be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a1c2:	6866      	ldr	r6, [r4, #4]
 800a1c4:	60a6      	str	r6, [r4, #8]
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	db05      	blt.n	800a1d6 <_printf_i+0x10e>
 800a1ca:	6821      	ldr	r1, [r4, #0]
 800a1cc:	432e      	orrs	r6, r5
 800a1ce:	f021 0104 	bic.w	r1, r1, #4
 800a1d2:	6021      	str	r1, [r4, #0]
 800a1d4:	d04b      	beq.n	800a26e <_printf_i+0x1a6>
 800a1d6:	4616      	mov	r6, r2
 800a1d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1dc:	fb03 5711 	mls	r7, r3, r1, r5
 800a1e0:	5dc7      	ldrb	r7, [r0, r7]
 800a1e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1e6:	462f      	mov	r7, r5
 800a1e8:	42bb      	cmp	r3, r7
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	d9f4      	bls.n	800a1d8 <_printf_i+0x110>
 800a1ee:	2b08      	cmp	r3, #8
 800a1f0:	d10b      	bne.n	800a20a <_printf_i+0x142>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	07df      	lsls	r7, r3, #31
 800a1f6:	d508      	bpl.n	800a20a <_printf_i+0x142>
 800a1f8:	6923      	ldr	r3, [r4, #16]
 800a1fa:	6861      	ldr	r1, [r4, #4]
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	bfde      	ittt	le
 800a200:	2330      	movle	r3, #48	@ 0x30
 800a202:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a20a:	1b92      	subs	r2, r2, r6
 800a20c:	6122      	str	r2, [r4, #16]
 800a20e:	f8cd a000 	str.w	sl, [sp]
 800a212:	464b      	mov	r3, r9
 800a214:	aa03      	add	r2, sp, #12
 800a216:	4621      	mov	r1, r4
 800a218:	4640      	mov	r0, r8
 800a21a:	f7ff fee7 	bl	8009fec <_printf_common>
 800a21e:	3001      	adds	r0, #1
 800a220:	d14a      	bne.n	800a2b8 <_printf_i+0x1f0>
 800a222:	f04f 30ff 	mov.w	r0, #4294967295
 800a226:	b004      	add	sp, #16
 800a228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	f043 0320 	orr.w	r3, r3, #32
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	4832      	ldr	r0, [pc, #200]	@ (800a300 <_printf_i+0x238>)
 800a236:	2778      	movs	r7, #120	@ 0x78
 800a238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	6831      	ldr	r1, [r6, #0]
 800a240:	061f      	lsls	r7, r3, #24
 800a242:	f851 5b04 	ldr.w	r5, [r1], #4
 800a246:	d402      	bmi.n	800a24e <_printf_i+0x186>
 800a248:	065f      	lsls	r7, r3, #25
 800a24a:	bf48      	it	mi
 800a24c:	b2ad      	uxthmi	r5, r5
 800a24e:	6031      	str	r1, [r6, #0]
 800a250:	07d9      	lsls	r1, r3, #31
 800a252:	bf44      	itt	mi
 800a254:	f043 0320 	orrmi.w	r3, r3, #32
 800a258:	6023      	strmi	r3, [r4, #0]
 800a25a:	b11d      	cbz	r5, 800a264 <_printf_i+0x19c>
 800a25c:	2310      	movs	r3, #16
 800a25e:	e7ad      	b.n	800a1bc <_printf_i+0xf4>
 800a260:	4826      	ldr	r0, [pc, #152]	@ (800a2fc <_printf_i+0x234>)
 800a262:	e7e9      	b.n	800a238 <_printf_i+0x170>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	f023 0320 	bic.w	r3, r3, #32
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	e7f6      	b.n	800a25c <_printf_i+0x194>
 800a26e:	4616      	mov	r6, r2
 800a270:	e7bd      	b.n	800a1ee <_printf_i+0x126>
 800a272:	6833      	ldr	r3, [r6, #0]
 800a274:	6825      	ldr	r5, [r4, #0]
 800a276:	6961      	ldr	r1, [r4, #20]
 800a278:	1d18      	adds	r0, r3, #4
 800a27a:	6030      	str	r0, [r6, #0]
 800a27c:	062e      	lsls	r6, r5, #24
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	d501      	bpl.n	800a286 <_printf_i+0x1be>
 800a282:	6019      	str	r1, [r3, #0]
 800a284:	e002      	b.n	800a28c <_printf_i+0x1c4>
 800a286:	0668      	lsls	r0, r5, #25
 800a288:	d5fb      	bpl.n	800a282 <_printf_i+0x1ba>
 800a28a:	8019      	strh	r1, [r3, #0]
 800a28c:	2300      	movs	r3, #0
 800a28e:	6123      	str	r3, [r4, #16]
 800a290:	4616      	mov	r6, r2
 800a292:	e7bc      	b.n	800a20e <_printf_i+0x146>
 800a294:	6833      	ldr	r3, [r6, #0]
 800a296:	1d1a      	adds	r2, r3, #4
 800a298:	6032      	str	r2, [r6, #0]
 800a29a:	681e      	ldr	r6, [r3, #0]
 800a29c:	6862      	ldr	r2, [r4, #4]
 800a29e:	2100      	movs	r1, #0
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	f7f5 ffcd 	bl	8000240 <memchr>
 800a2a6:	b108      	cbz	r0, 800a2ac <_printf_i+0x1e4>
 800a2a8:	1b80      	subs	r0, r0, r6
 800a2aa:	6060      	str	r0, [r4, #4]
 800a2ac:	6863      	ldr	r3, [r4, #4]
 800a2ae:	6123      	str	r3, [r4, #16]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2b6:	e7aa      	b.n	800a20e <_printf_i+0x146>
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	4632      	mov	r2, r6
 800a2bc:	4649      	mov	r1, r9
 800a2be:	4640      	mov	r0, r8
 800a2c0:	47d0      	blx	sl
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	d0ad      	beq.n	800a222 <_printf_i+0x15a>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	079b      	lsls	r3, r3, #30
 800a2ca:	d413      	bmi.n	800a2f4 <_printf_i+0x22c>
 800a2cc:	68e0      	ldr	r0, [r4, #12]
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	4298      	cmp	r0, r3
 800a2d2:	bfb8      	it	lt
 800a2d4:	4618      	movlt	r0, r3
 800a2d6:	e7a6      	b.n	800a226 <_printf_i+0x15e>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	4632      	mov	r2, r6
 800a2dc:	4649      	mov	r1, r9
 800a2de:	4640      	mov	r0, r8
 800a2e0:	47d0      	blx	sl
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d09d      	beq.n	800a222 <_printf_i+0x15a>
 800a2e6:	3501      	adds	r5, #1
 800a2e8:	68e3      	ldr	r3, [r4, #12]
 800a2ea:	9903      	ldr	r1, [sp, #12]
 800a2ec:	1a5b      	subs	r3, r3, r1
 800a2ee:	42ab      	cmp	r3, r5
 800a2f0:	dcf2      	bgt.n	800a2d8 <_printf_i+0x210>
 800a2f2:	e7eb      	b.n	800a2cc <_printf_i+0x204>
 800a2f4:	2500      	movs	r5, #0
 800a2f6:	f104 0619 	add.w	r6, r4, #25
 800a2fa:	e7f5      	b.n	800a2e8 <_printf_i+0x220>
 800a2fc:	0800a7d5 	.word	0x0800a7d5
 800a300:	0800a7e6 	.word	0x0800a7e6

0800a304 <__sflush_r>:
 800a304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30c:	0716      	lsls	r6, r2, #28
 800a30e:	4605      	mov	r5, r0
 800a310:	460c      	mov	r4, r1
 800a312:	d454      	bmi.n	800a3be <__sflush_r+0xba>
 800a314:	684b      	ldr	r3, [r1, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	dc02      	bgt.n	800a320 <__sflush_r+0x1c>
 800a31a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	dd48      	ble.n	800a3b2 <__sflush_r+0xae>
 800a320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a322:	2e00      	cmp	r6, #0
 800a324:	d045      	beq.n	800a3b2 <__sflush_r+0xae>
 800a326:	2300      	movs	r3, #0
 800a328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a32c:	682f      	ldr	r7, [r5, #0]
 800a32e:	6a21      	ldr	r1, [r4, #32]
 800a330:	602b      	str	r3, [r5, #0]
 800a332:	d030      	beq.n	800a396 <__sflush_r+0x92>
 800a334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	0759      	lsls	r1, r3, #29
 800a33a:	d505      	bpl.n	800a348 <__sflush_r+0x44>
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	1ad2      	subs	r2, r2, r3
 800a340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a342:	b10b      	cbz	r3, 800a348 <__sflush_r+0x44>
 800a344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a346:	1ad2      	subs	r2, r2, r3
 800a348:	2300      	movs	r3, #0
 800a34a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a34c:	6a21      	ldr	r1, [r4, #32]
 800a34e:	4628      	mov	r0, r5
 800a350:	47b0      	blx	r6
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	d106      	bne.n	800a366 <__sflush_r+0x62>
 800a358:	6829      	ldr	r1, [r5, #0]
 800a35a:	291d      	cmp	r1, #29
 800a35c:	d82b      	bhi.n	800a3b6 <__sflush_r+0xb2>
 800a35e:	4a2a      	ldr	r2, [pc, #168]	@ (800a408 <__sflush_r+0x104>)
 800a360:	40ca      	lsrs	r2, r1
 800a362:	07d6      	lsls	r6, r2, #31
 800a364:	d527      	bpl.n	800a3b6 <__sflush_r+0xb2>
 800a366:	2200      	movs	r2, #0
 800a368:	6062      	str	r2, [r4, #4]
 800a36a:	04d9      	lsls	r1, r3, #19
 800a36c:	6922      	ldr	r2, [r4, #16]
 800a36e:	6022      	str	r2, [r4, #0]
 800a370:	d504      	bpl.n	800a37c <__sflush_r+0x78>
 800a372:	1c42      	adds	r2, r0, #1
 800a374:	d101      	bne.n	800a37a <__sflush_r+0x76>
 800a376:	682b      	ldr	r3, [r5, #0]
 800a378:	b903      	cbnz	r3, 800a37c <__sflush_r+0x78>
 800a37a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a37e:	602f      	str	r7, [r5, #0]
 800a380:	b1b9      	cbz	r1, 800a3b2 <__sflush_r+0xae>
 800a382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a386:	4299      	cmp	r1, r3
 800a388:	d002      	beq.n	800a390 <__sflush_r+0x8c>
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7ff fbf4 	bl	8009b78 <_free_r>
 800a390:	2300      	movs	r3, #0
 800a392:	6363      	str	r3, [r4, #52]	@ 0x34
 800a394:	e00d      	b.n	800a3b2 <__sflush_r+0xae>
 800a396:	2301      	movs	r3, #1
 800a398:	4628      	mov	r0, r5
 800a39a:	47b0      	blx	r6
 800a39c:	4602      	mov	r2, r0
 800a39e:	1c50      	adds	r0, r2, #1
 800a3a0:	d1c9      	bne.n	800a336 <__sflush_r+0x32>
 800a3a2:	682b      	ldr	r3, [r5, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0c6      	beq.n	800a336 <__sflush_r+0x32>
 800a3a8:	2b1d      	cmp	r3, #29
 800a3aa:	d001      	beq.n	800a3b0 <__sflush_r+0xac>
 800a3ac:	2b16      	cmp	r3, #22
 800a3ae:	d11e      	bne.n	800a3ee <__sflush_r+0xea>
 800a3b0:	602f      	str	r7, [r5, #0]
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	e022      	b.n	800a3fc <__sflush_r+0xf8>
 800a3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ba:	b21b      	sxth	r3, r3
 800a3bc:	e01b      	b.n	800a3f6 <__sflush_r+0xf2>
 800a3be:	690f      	ldr	r7, [r1, #16]
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	d0f6      	beq.n	800a3b2 <__sflush_r+0xae>
 800a3c4:	0793      	lsls	r3, r2, #30
 800a3c6:	680e      	ldr	r6, [r1, #0]
 800a3c8:	bf08      	it	eq
 800a3ca:	694b      	ldreq	r3, [r1, #20]
 800a3cc:	600f      	str	r7, [r1, #0]
 800a3ce:	bf18      	it	ne
 800a3d0:	2300      	movne	r3, #0
 800a3d2:	eba6 0807 	sub.w	r8, r6, r7
 800a3d6:	608b      	str	r3, [r1, #8]
 800a3d8:	f1b8 0f00 	cmp.w	r8, #0
 800a3dc:	dde9      	ble.n	800a3b2 <__sflush_r+0xae>
 800a3de:	6a21      	ldr	r1, [r4, #32]
 800a3e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a3e2:	4643      	mov	r3, r8
 800a3e4:	463a      	mov	r2, r7
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	47b0      	blx	r6
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	dc08      	bgt.n	800a400 <__sflush_r+0xfc>
 800a3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f6:	81a3      	strh	r3, [r4, #12]
 800a3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a400:	4407      	add	r7, r0
 800a402:	eba8 0800 	sub.w	r8, r8, r0
 800a406:	e7e7      	b.n	800a3d8 <__sflush_r+0xd4>
 800a408:	20400001 	.word	0x20400001

0800a40c <_fflush_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	690b      	ldr	r3, [r1, #16]
 800a410:	4605      	mov	r5, r0
 800a412:	460c      	mov	r4, r1
 800a414:	b913      	cbnz	r3, 800a41c <_fflush_r+0x10>
 800a416:	2500      	movs	r5, #0
 800a418:	4628      	mov	r0, r5
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	b118      	cbz	r0, 800a426 <_fflush_r+0x1a>
 800a41e:	6a03      	ldr	r3, [r0, #32]
 800a420:	b90b      	cbnz	r3, 800a426 <_fflush_r+0x1a>
 800a422:	f7ff fa47 	bl	80098b4 <__sinit>
 800a426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0f3      	beq.n	800a416 <_fflush_r+0xa>
 800a42e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a430:	07d0      	lsls	r0, r2, #31
 800a432:	d404      	bmi.n	800a43e <_fflush_r+0x32>
 800a434:	0599      	lsls	r1, r3, #22
 800a436:	d402      	bmi.n	800a43e <_fflush_r+0x32>
 800a438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a43a:	f7ff fb8c 	bl	8009b56 <__retarget_lock_acquire_recursive>
 800a43e:	4628      	mov	r0, r5
 800a440:	4621      	mov	r1, r4
 800a442:	f7ff ff5f 	bl	800a304 <__sflush_r>
 800a446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a448:	07da      	lsls	r2, r3, #31
 800a44a:	4605      	mov	r5, r0
 800a44c:	d4e4      	bmi.n	800a418 <_fflush_r+0xc>
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	059b      	lsls	r3, r3, #22
 800a452:	d4e1      	bmi.n	800a418 <_fflush_r+0xc>
 800a454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a456:	f7ff fb7f 	bl	8009b58 <__retarget_lock_release_recursive>
 800a45a:	e7dd      	b.n	800a418 <_fflush_r+0xc>

0800a45c <__swbuf_r>:
 800a45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45e:	460e      	mov	r6, r1
 800a460:	4614      	mov	r4, r2
 800a462:	4605      	mov	r5, r0
 800a464:	b118      	cbz	r0, 800a46e <__swbuf_r+0x12>
 800a466:	6a03      	ldr	r3, [r0, #32]
 800a468:	b90b      	cbnz	r3, 800a46e <__swbuf_r+0x12>
 800a46a:	f7ff fa23 	bl	80098b4 <__sinit>
 800a46e:	69a3      	ldr	r3, [r4, #24]
 800a470:	60a3      	str	r3, [r4, #8]
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	071a      	lsls	r2, r3, #28
 800a476:	d501      	bpl.n	800a47c <__swbuf_r+0x20>
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	b943      	cbnz	r3, 800a48e <__swbuf_r+0x32>
 800a47c:	4621      	mov	r1, r4
 800a47e:	4628      	mov	r0, r5
 800a480:	f000 f82a 	bl	800a4d8 <__swsetup_r>
 800a484:	b118      	cbz	r0, 800a48e <__swbuf_r+0x32>
 800a486:	f04f 37ff 	mov.w	r7, #4294967295
 800a48a:	4638      	mov	r0, r7
 800a48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	6922      	ldr	r2, [r4, #16]
 800a492:	1a98      	subs	r0, r3, r2
 800a494:	6963      	ldr	r3, [r4, #20]
 800a496:	b2f6      	uxtb	r6, r6
 800a498:	4283      	cmp	r3, r0
 800a49a:	4637      	mov	r7, r6
 800a49c:	dc05      	bgt.n	800a4aa <__swbuf_r+0x4e>
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	f7ff ffb3 	bl	800a40c <_fflush_r>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d1ed      	bne.n	800a486 <__swbuf_r+0x2a>
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	60a3      	str	r3, [r4, #8]
 800a4b0:	6823      	ldr	r3, [r4, #0]
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	6022      	str	r2, [r4, #0]
 800a4b6:	701e      	strb	r6, [r3, #0]
 800a4b8:	6962      	ldr	r2, [r4, #20]
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d004      	beq.n	800a4ca <__swbuf_r+0x6e>
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	07db      	lsls	r3, r3, #31
 800a4c4:	d5e1      	bpl.n	800a48a <__swbuf_r+0x2e>
 800a4c6:	2e0a      	cmp	r6, #10
 800a4c8:	d1df      	bne.n	800a48a <__swbuf_r+0x2e>
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	f7ff ff9d 	bl	800a40c <_fflush_r>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d0d9      	beq.n	800a48a <__swbuf_r+0x2e>
 800a4d6:	e7d6      	b.n	800a486 <__swbuf_r+0x2a>

0800a4d8 <__swsetup_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4b29      	ldr	r3, [pc, #164]	@ (800a580 <__swsetup_r+0xa8>)
 800a4dc:	4605      	mov	r5, r0
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	b118      	cbz	r0, 800a4ec <__swsetup_r+0x14>
 800a4e4:	6a03      	ldr	r3, [r0, #32]
 800a4e6:	b90b      	cbnz	r3, 800a4ec <__swsetup_r+0x14>
 800a4e8:	f7ff f9e4 	bl	80098b4 <__sinit>
 800a4ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f0:	0719      	lsls	r1, r3, #28
 800a4f2:	d422      	bmi.n	800a53a <__swsetup_r+0x62>
 800a4f4:	06da      	lsls	r2, r3, #27
 800a4f6:	d407      	bmi.n	800a508 <__swsetup_r+0x30>
 800a4f8:	2209      	movs	r2, #9
 800a4fa:	602a      	str	r2, [r5, #0]
 800a4fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a500:	81a3      	strh	r3, [r4, #12]
 800a502:	f04f 30ff 	mov.w	r0, #4294967295
 800a506:	e033      	b.n	800a570 <__swsetup_r+0x98>
 800a508:	0758      	lsls	r0, r3, #29
 800a50a:	d512      	bpl.n	800a532 <__swsetup_r+0x5a>
 800a50c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a50e:	b141      	cbz	r1, 800a522 <__swsetup_r+0x4a>
 800a510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a514:	4299      	cmp	r1, r3
 800a516:	d002      	beq.n	800a51e <__swsetup_r+0x46>
 800a518:	4628      	mov	r0, r5
 800a51a:	f7ff fb2d 	bl	8009b78 <_free_r>
 800a51e:	2300      	movs	r3, #0
 800a520:	6363      	str	r3, [r4, #52]	@ 0x34
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a528:	81a3      	strh	r3, [r4, #12]
 800a52a:	2300      	movs	r3, #0
 800a52c:	6063      	str	r3, [r4, #4]
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	f043 0308 	orr.w	r3, r3, #8
 800a538:	81a3      	strh	r3, [r4, #12]
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	b94b      	cbnz	r3, 800a552 <__swsetup_r+0x7a>
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a548:	d003      	beq.n	800a552 <__swsetup_r+0x7a>
 800a54a:	4621      	mov	r1, r4
 800a54c:	4628      	mov	r0, r5
 800a54e:	f000 f84f 	bl	800a5f0 <__smakebuf_r>
 800a552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a556:	f013 0201 	ands.w	r2, r3, #1
 800a55a:	d00a      	beq.n	800a572 <__swsetup_r+0x9a>
 800a55c:	2200      	movs	r2, #0
 800a55e:	60a2      	str	r2, [r4, #8]
 800a560:	6962      	ldr	r2, [r4, #20]
 800a562:	4252      	negs	r2, r2
 800a564:	61a2      	str	r2, [r4, #24]
 800a566:	6922      	ldr	r2, [r4, #16]
 800a568:	b942      	cbnz	r2, 800a57c <__swsetup_r+0xa4>
 800a56a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a56e:	d1c5      	bne.n	800a4fc <__swsetup_r+0x24>
 800a570:	bd38      	pop	{r3, r4, r5, pc}
 800a572:	0799      	lsls	r1, r3, #30
 800a574:	bf58      	it	pl
 800a576:	6962      	ldrpl	r2, [r4, #20]
 800a578:	60a2      	str	r2, [r4, #8]
 800a57a:	e7f4      	b.n	800a566 <__swsetup_r+0x8e>
 800a57c:	2000      	movs	r0, #0
 800a57e:	e7f7      	b.n	800a570 <__swsetup_r+0x98>
 800a580:	2000001c 	.word	0x2000001c

0800a584 <_sbrk_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d06      	ldr	r5, [pc, #24]	@ (800a5a0 <_sbrk_r+0x1c>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	602b      	str	r3, [r5, #0]
 800a590:	f7f7 fb10 	bl	8001bb4 <_sbrk>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_sbrk_r+0x1a>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_sbrk_r+0x1a>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	20005fc0 	.word	0x20005fc0

0800a5a4 <__swhatbuf_r>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ac:	2900      	cmp	r1, #0
 800a5ae:	b096      	sub	sp, #88	@ 0x58
 800a5b0:	4615      	mov	r5, r2
 800a5b2:	461e      	mov	r6, r3
 800a5b4:	da0d      	bge.n	800a5d2 <__swhatbuf_r+0x2e>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5bc:	f04f 0100 	mov.w	r1, #0
 800a5c0:	bf14      	ite	ne
 800a5c2:	2340      	movne	r3, #64	@ 0x40
 800a5c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	6031      	str	r1, [r6, #0]
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	b016      	add	sp, #88	@ 0x58
 800a5d0:	bd70      	pop	{r4, r5, r6, pc}
 800a5d2:	466a      	mov	r2, sp
 800a5d4:	f000 f848 	bl	800a668 <_fstat_r>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	dbec      	blt.n	800a5b6 <__swhatbuf_r+0x12>
 800a5dc:	9901      	ldr	r1, [sp, #4]
 800a5de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5e6:	4259      	negs	r1, r3
 800a5e8:	4159      	adcs	r1, r3
 800a5ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5ee:	e7eb      	b.n	800a5c8 <__swhatbuf_r+0x24>

0800a5f0 <__smakebuf_r>:
 800a5f0:	898b      	ldrh	r3, [r1, #12]
 800a5f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5f4:	079d      	lsls	r5, r3, #30
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	d507      	bpl.n	800a60c <__smakebuf_r+0x1c>
 800a5fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	2301      	movs	r3, #1
 800a606:	6163      	str	r3, [r4, #20]
 800a608:	b003      	add	sp, #12
 800a60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a60c:	ab01      	add	r3, sp, #4
 800a60e:	466a      	mov	r2, sp
 800a610:	f7ff ffc8 	bl	800a5a4 <__swhatbuf_r>
 800a614:	9f00      	ldr	r7, [sp, #0]
 800a616:	4605      	mov	r5, r0
 800a618:	4639      	mov	r1, r7
 800a61a:	4630      	mov	r0, r6
 800a61c:	f7ff fb18 	bl	8009c50 <_malloc_r>
 800a620:	b948      	cbnz	r0, 800a636 <__smakebuf_r+0x46>
 800a622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a626:	059a      	lsls	r2, r3, #22
 800a628:	d4ee      	bmi.n	800a608 <__smakebuf_r+0x18>
 800a62a:	f023 0303 	bic.w	r3, r3, #3
 800a62e:	f043 0302 	orr.w	r3, r3, #2
 800a632:	81a3      	strh	r3, [r4, #12]
 800a634:	e7e2      	b.n	800a5fc <__smakebuf_r+0xc>
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	6020      	str	r0, [r4, #0]
 800a63a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	9b01      	ldr	r3, [sp, #4]
 800a642:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a646:	b15b      	cbz	r3, 800a660 <__smakebuf_r+0x70>
 800a648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 f81d 	bl	800a68c <_isatty_r>
 800a652:	b128      	cbz	r0, 800a660 <__smakebuf_r+0x70>
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	f043 0301 	orr.w	r3, r3, #1
 800a65e:	81a3      	strh	r3, [r4, #12]
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	431d      	orrs	r5, r3
 800a664:	81a5      	strh	r5, [r4, #12]
 800a666:	e7cf      	b.n	800a608 <__smakebuf_r+0x18>

0800a668 <_fstat_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	4d07      	ldr	r5, [pc, #28]	@ (800a688 <_fstat_r+0x20>)
 800a66c:	2300      	movs	r3, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	4608      	mov	r0, r1
 800a672:	4611      	mov	r1, r2
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	f7f7 fa74 	bl	8001b62 <_fstat>
 800a67a:	1c43      	adds	r3, r0, #1
 800a67c:	d102      	bne.n	800a684 <_fstat_r+0x1c>
 800a67e:	682b      	ldr	r3, [r5, #0]
 800a680:	b103      	cbz	r3, 800a684 <_fstat_r+0x1c>
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	bd38      	pop	{r3, r4, r5, pc}
 800a686:	bf00      	nop
 800a688:	20005fc0 	.word	0x20005fc0

0800a68c <_isatty_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d06      	ldr	r5, [pc, #24]	@ (800a6a8 <_isatty_r+0x1c>)
 800a690:	2300      	movs	r3, #0
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	602b      	str	r3, [r5, #0]
 800a698:	f7f7 fa73 	bl	8001b82 <_isatty>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d102      	bne.n	800a6a6 <_isatty_r+0x1a>
 800a6a0:	682b      	ldr	r3, [r5, #0]
 800a6a2:	b103      	cbz	r3, 800a6a6 <_isatty_r+0x1a>
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	bd38      	pop	{r3, r4, r5, pc}
 800a6a8:	20005fc0 	.word	0x20005fc0

0800a6ac <_init>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	bf00      	nop
 800a6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b2:	bc08      	pop	{r3}
 800a6b4:	469e      	mov	lr, r3
 800a6b6:	4770      	bx	lr

0800a6b8 <_fini>:
 800a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ba:	bf00      	nop
 800a6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6be:	bc08      	pop	{r3}
 800a6c0:	469e      	mov	lr, r3
 800a6c2:	4770      	bx	lr
