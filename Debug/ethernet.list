
ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018410  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08018610  08018610  00019610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a28  08018a28  0001a300  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018a28  08018a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a30  08018a30  0001a300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018a30  08018a30  00019a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018a34  08018a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08018a38  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  08018ab4  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  08018b54  0001a11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .TxDescripSection 000000a0  200001c0  08018bf4  0001a1c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 12 .RxDescripSection 000000a0  20000260  08018c94  0001a260  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000094c8  20000300  08018d34  0001a300  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  200097c8  08018d34  0001a7c8  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  0001a300  2**0
                  CONTENTS, READONLY
 16 .debug_info   00056e0d  00000000  00000000  0001a32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000beed  00000000  00000000  0007113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003288  00000000  00000000  0007d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002740  00000000  00000000  000802b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003e300  00000000  00000000  000829f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00052de8  00000000  00000000  000c0cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0012211d  00000000  00000000  00113ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  00235bf5  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000da4c  00000000  00000000  00235c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000004a  00000000  00000000  00243684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000300 	.word	0x20000300
 800021c:	00000000 	.word	0x00000000
 8000220:	080185f8 	.word	0x080185f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000304 	.word	0x20000304
 800023c:	080185f8 	.word	0x080185f8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <_DoInit+0xa0>)
 8000644:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000646:	22a8      	movs	r2, #168	@ 0xa8
 8000648:	2100      	movs	r1, #0
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f016 ffd2 	bl	80175f4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	2203      	movs	r2, #3
 8000654:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2203      	movs	r2, #3
 800065a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	4a20      	ldr	r2, [pc, #128]	@ (80006e0 <_DoInit+0xa4>)
 8000660:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <_DoInit+0xa8>)
 8000666:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800066e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <_DoInit+0xa4>)
 8000686:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <_DoInit+0xac>)
 800068c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2210      	movs	r2, #16
 8000692:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2200      	movs	r2, #0
 8000698:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2200      	movs	r2, #0
 800069e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006a6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e00c      	b.n	80006ca <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f1c3 030f 	rsb	r3, r3, #15
 80006b6:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <_DoInit+0xb0>)
 80006b8:	5cd1      	ldrb	r1, [r2, r3]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	460a      	mov	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3301      	adds	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d9ef      	bls.n	80006b0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006d0:	f3bf 8f5f 	dmb	sy
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000031c 	.word	0x2000031c
 80006e0:	08018610 	.word	0x08018610
 80006e4:	200003c4 	.word	0x200003c4
 80006e8:	200007c4 	.word	0x200007c4
 80006ec:	08018858 	.word	0x08018858

080006f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	429a      	cmp	r2, r3
 8000712:	d905      	bls.n	8000720 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	3b01      	subs	r3, #1
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
 800071e:	e007      	b.n	8000730 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	689a      	ldr	r2, [r3, #8]
 8000724:	69b9      	ldr	r1, [r7, #24]
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	1acb      	subs	r3, r1, r3
 800072a:	4413      	add	r3, r2
 800072c:	3b01      	subs	r3, #1
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800073a:	4293      	cmp	r3, r2
 800073c:	bf28      	it	cs
 800073e:	4613      	movcs	r3, r2
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4293      	cmp	r3, r2
 8000748:	bf28      	it	cs
 800074a:	4613      	movcs	r3, r2
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	4413      	add	r3, r2
 8000756:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	6978      	ldr	r0, [r7, #20]
 800075e:	f017 f824 	bl	80177aa <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000762:	6a3a      	ldr	r2, [r7, #32]
 8000764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000766:	4413      	add	r3, r2
 8000768:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076e:	4413      	add	r3, r2
 8000770:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800077a:	69fa      	ldr	r2, [r7, #28]
 800077c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077e:	4413      	add	r3, r2
 8000780:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	429a      	cmp	r2, r3
 800078a:	d101      	bne.n	8000790 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000790:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	69fa      	ldr	r2, [r7, #28]
 8000798:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1b2      	bne.n	8000706 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80007a0:	6a3b      	ldr	r3, [r7, #32]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3728      	adds	r7, #40	@ 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b088      	sub	sp, #32
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80007c6:	69ba      	ldr	r2, [r7, #24]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d911      	bls.n	80007f2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	4413      	add	r3, r2
 80007d6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	6938      	ldr	r0, [r7, #16]
 80007de:	f016 ffe4 	bl	80177aa <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80007e2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	441a      	add	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80007f0:	e01f      	b.n	8000832 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	4413      	add	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	6938      	ldr	r0, [r7, #16]
 8000806:	f016 ffd0 	bl	80177aa <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	4619      	mov	r1, r3
 8000822:	6938      	ldr	r0, [r7, #16]
 8000824:	f016 ffc1 	bl	80177aa <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000828:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	697a      	ldr	r2, [r7, #20]
 8000830:	60da      	str	r2, [r3, #12]
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800083a:	b480      	push	{r7}
 800083c:	b087      	sub	sp, #28
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	429a      	cmp	r2, r3
 8000854:	d808      	bhi.n	8000868 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689a      	ldr	r2, [r3, #8]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	1ad2      	subs	r2, r2, r3
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	4413      	add	r3, r2
 8000862:	3b01      	subs	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e004      	b.n	8000872 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	3b01      	subs	r3, #1
 8000870:	617b      	str	r3, [r7, #20]
  }
  return r;
 8000872:	697b      	ldr	r3, [r7, #20]
}
 8000874:	4618      	mov	r0, r3
 8000876:	371c      	adds	r7, #28
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	4613      	mov	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4a1f      	ldr	r2, [pc, #124]	@ (800091c <SEGGER_RTT_WriteNoLock+0x9c>)
 800089e:	4413      	add	r3, r2
 80008a0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d029      	beq.n	80008fe <SEGGER_RTT_WriteNoLock+0x7e>
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d82e      	bhi.n	800090c <SEGGER_RTT_WriteNoLock+0x8c>
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <SEGGER_RTT_WriteNoLock+0x38>
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d013      	beq.n	80008de <SEGGER_RTT_WriteNoLock+0x5e>
 80008b6:	e029      	b.n	800090c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008b8:	6978      	ldr	r0, [r7, #20]
 80008ba:	f7ff ffbe 	bl	800083a <_GetAvailWriteSpace>
 80008be:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d202      	bcs.n	80008ce <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80008cc:	e021      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	69b9      	ldr	r1, [r7, #24]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff67 	bl	80007aa <_WriteNoCheck>
    break;
 80008dc:	e019      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ffab 	bl	800083a <_GetAvailWriteSpace>
 80008e4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	4293      	cmp	r3, r2
 80008ec:	bf28      	it	cs
 80008ee:	4613      	movcs	r3, r2
 80008f0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	69b9      	ldr	r1, [r7, #24]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff57 	bl	80007aa <_WriteNoCheck>
    break;
 80008fc:	e009      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	69b9      	ldr	r1, [r7, #24]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff fef4 	bl	80006f0 <_WriteBlocking>
 8000908:	61f8      	str	r0, [r7, #28]
    break;
 800090a:	e002      	b.n	8000912 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    break;
 8000910:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000912:	69fb      	ldr	r3, [r7, #28]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000031c 	.word	0x2000031c

08000920 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <SEGGER_RTT_Write+0x48>)
 800092e:	61fb      	str	r3, [r7, #28]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b53      	cmp	r3, #83	@ 0x53
 8000938:	d001      	beq.n	800093e <SEGGER_RTT_Write+0x1e>
 800093a:	f7ff fe7f 	bl	800063c <_DoInit>
  SEGGER_RTT_LOCK();
 800093e:	f3ef 8311 	mrs	r3, BASEPRI
 8000942:	f04f 0120 	mov.w	r1, #32
 8000946:	f381 8811 	msr	BASEPRI, r1
 800094a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	68f8      	ldr	r0, [r7, #12]
 8000952:	f7ff ff95 	bl	8000880 <SEGGER_RTT_WriteNoLock>
 8000956:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800095e:	697b      	ldr	r3, [r7, #20]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000031c 	.word	0x2000031c

0800096c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ffce 	bl	8000920 <SEGGER_RTT_Write>
  return len;
 8000984:	683b      	ldr	r3, [r7, #0]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d80e      	bhi.n	80009ca <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	78fa      	ldrb	r2, [r7, #3]
 80009b6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d115      	bne.n	8000a02 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6918      	ldr	r0, [r3, #16]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6819      	ldr	r1, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	461a      	mov	r2, r3
 80009e4:	f7ff ff9c 	bl	8000920 <SEGGER_RTT_Write>
 80009e8:	4602      	mov	r2, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d004      	beq.n	80009fc <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80009fa:	e002      	b.n	8000a02 <_StoreChar+0x74>
      p->Cnt = 0u;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a26:	e007      	b.n	8000a38 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8000a28:	6a3a      	ldr	r2, [r7, #32]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	623b      	str	r3, [r7, #32]
    Width++;
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3301      	adds	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000a38:	6a3a      	ldr	r2, [r7, #32]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d2f3      	bcs.n	8000a28 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d901      	bls.n	8000a4c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d125      	bne.n	8000aa2 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8000a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d022      	beq.n	8000aa2 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <_PrintUnsigned+0x66>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_PrintUnsigned+0x66>
        c = '0';
 8000a6c:	2330      	movs	r3, #48	@ 0x30
 8000a6e:	76fb      	strb	r3, [r7, #27]
 8000a70:	e001      	b.n	8000a76 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8000a72:	2320      	movs	r3, #32
 8000a74:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a76:	e00b      	b.n	8000a90 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8000a7e:	7efb      	ldrb	r3, [r7, #27]
 8000a80:	4619      	mov	r1, r3
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff ff83 	bl	800098e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db07      	blt.n	8000aa0 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d005      	beq.n	8000aa2 <_PrintUnsigned+0x96>
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3ec      	bcc.n	8000a78 <_PrintUnsigned+0x6c>
 8000a9e:	e000      	b.n	8000aa2 <_PrintUnsigned+0x96>
          break;
 8000aa0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db55      	blt.n	8000b56 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d903      	bls.n	8000ab8 <_PrintUnsigned+0xac>
        NumDigits--;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	e009      	b.n	8000acc <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac0:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d200      	bcs.n	8000acc <_PrintUnsigned+0xc0>
          break;
 8000aca:	e005      	b.n	8000ad8 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000ad6:	e7e8      	b.n	8000aaa <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae0:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8000af0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b60 <_PrintUnsigned+0x154>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	4413      	add	r3, r2
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff ff47 	bl	800098e <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db08      	blt.n	8000b1a <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8000b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
    } while (Digit);
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1df      	bne.n	8000ad8 <_PrintUnsigned+0xcc>
 8000b18:	e000      	b.n	8000b1c <_PrintUnsigned+0x110>
        break;
 8000b1a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8000b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d017      	beq.n	8000b56 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8000b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d014      	beq.n	8000b56 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b2c:	e00a      	b.n	8000b44 <_PrintUnsigned+0x138>
          FieldWidth--;
 8000b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b30:	3b01      	subs	r3, #1
 8000b32:	633b      	str	r3, [r7, #48]	@ 0x30
          _StoreChar(pBufferDesc, ' ');
 8000b34:	2120      	movs	r1, #32
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff ff29 	bl	800098e <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db07      	blt.n	8000b54 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <_PrintUnsigned+0x14a>
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3ed      	bcc.n	8000b2e <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8000b52:	e000      	b.n	8000b56 <_PrintUnsigned+0x14a>
            break;
 8000b54:	bf00      	nop
}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	0801886c 	.word	0x0801886c

08000b64 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	bfb8      	it	lt
 8000b78:	425b      	neglt	r3, r3
 8000b7a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b80:	e007      	b.n	8000b92 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b8a:	613b      	str	r3, [r7, #16]
    Width++;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	daf3      	bge.n	8000b82 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d901      	bls.n	8000ba6 <_PrintInt+0x42>
    Width = NumDigits;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00a      	beq.n	8000bc2 <_PrintInt+0x5e>
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db04      	blt.n	8000bbc <_PrintInt+0x58>
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <_PrintInt+0x5e>
    FieldWidth--;
 8000bbc:	6a3b      	ldr	r3, [r7, #32]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <_PrintInt+0x6e>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d01c      	beq.n	8000c0c <_PrintInt+0xa8>
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d117      	bne.n	8000c0c <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d014      	beq.n	8000c0c <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000be2:	e00a      	b.n	8000bfa <_PrintInt+0x96>
        FieldWidth--;
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8000bea:	2120      	movs	r1, #32
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff fece 	bl	800098e <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db07      	blt.n	8000c0a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d005      	beq.n	8000c0c <_PrintInt+0xa8>
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d3ed      	bcc.n	8000be4 <_PrintInt+0x80>
 8000c08:	e000      	b.n	8000c0c <_PrintInt+0xa8>
          break;
 8000c0a:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db4a      	blt.n	8000caa <_PrintInt+0x146>
    if (v < 0) {
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da07      	bge.n	8000c2a <_PrintInt+0xc6>
      v = -v;
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8000c20:	212d      	movs	r1, #45	@ 0x2d
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f7ff feb3 	bl	800098e <_StoreChar>
 8000c28:	e008      	b.n	8000c3c <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	f003 0304 	and.w	r3, r3, #4
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8000c34:	212b      	movs	r1, #43	@ 0x2b
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f7ff fea9 	bl	800098e <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db32      	blt.n	8000caa <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8000c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <_PrintInt+0x12a>
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d11a      	bne.n	8000c8e <_PrintInt+0x12a>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d117      	bne.n	8000c8e <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000c5e:	6a3b      	ldr	r3, [r7, #32]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d014      	beq.n	8000c8e <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c64:	e00a      	b.n	8000c7c <_PrintInt+0x118>
            FieldWidth--;
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000c6c:	2130      	movs	r1, #48	@ 0x30
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fe8d 	bl	800098e <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db07      	blt.n	8000c8c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <_PrintInt+0x12a>
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3ed      	bcc.n	8000c66 <_PrintInt+0x102>
 8000c8a:	e000      	b.n	8000c8e <_PrintInt+0x12a>
              break;
 8000c8c:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db09      	blt.n	8000caa <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff feb1 	bl	8000a0c <_PrintUnsigned>
      }
    }
  }
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0a4      	sub	sp, #144	@ 0x90
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  unsigned Precision;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	657b      	str	r3, [r7, #84]	@ 0x54
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
 8000cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  BufferDesc.Cnt            = 0u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	667b      	str	r3, [r7, #100]	@ 0x64
  BufferDesc.ReturnValue    = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	663b      	str	r3, [r7, #96]	@ 0x60

  do {
    c = *sFormat;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    sFormat++;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8000ce4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 81d9 	beq.w	80010a0 <SEGGER_RTT_vprintf+0x3ec>
      break;
    }
    if (c == '%') {
 8000cee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000cf2:	2b25      	cmp	r3, #37	@ 0x25
 8000cf4:	f040 81c7 	bne.w	8001086 <SEGGER_RTT_vprintf+0x3d2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	677b      	str	r3, [r7, #116]	@ 0x74
      v = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      do {
        c = *sFormat;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        switch (c) {
 8000d0a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000d0e:	3b23      	subs	r3, #35	@ 0x23
 8000d10:	2b0d      	cmp	r3, #13
 8000d12:	d83f      	bhi.n	8000d94 <SEGGER_RTT_vprintf+0xe0>
 8000d14:	a201      	add	r2, pc, #4	@ (adr r2, 8000d1c <SEGGER_RTT_vprintf+0x68>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d85 	.word	0x08000d85
 8000d20:	08000d95 	.word	0x08000d95
 8000d24:	08000d95 	.word	0x08000d95
 8000d28:	08000d95 	.word	0x08000d95
 8000d2c:	08000d95 	.word	0x08000d95
 8000d30:	08000d95 	.word	0x08000d95
 8000d34:	08000d95 	.word	0x08000d95
 8000d38:	08000d95 	.word	0x08000d95
 8000d3c:	08000d75 	.word	0x08000d75
 8000d40:	08000d95 	.word	0x08000d95
 8000d44:	08000d55 	.word	0x08000d55
 8000d48:	08000d95 	.word	0x08000d95
 8000d4c:	08000d95 	.word	0x08000d95
 8000d50:	08000d65 	.word	0x08000d65
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	e01b      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	e013      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000d74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	e00b      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000d84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	e003      	b.n	8000d9c <SEGGER_RTT_vprintf+0xe8>
        default:  v = 0; break;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000d9a:	bf00      	nop
        }
      } while (v);
 8000d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1ae      	bne.n	8000d02 <SEGGER_RTT_vprintf+0x4e>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000da4:	2300      	movs	r3, #0
 8000da6:	673b      	str	r3, [r7, #112]	@ 0x70
      do {
        c = *sFormat;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c < '0') || (c > '9')) {
 8000db0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000db4:	2b2f      	cmp	r3, #47	@ 0x2f
 8000db6:	d912      	bls.n	8000dde <SEGGER_RTT_vprintf+0x12a>
 8000db8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000dbc:	2b39      	cmp	r3, #57	@ 0x39
 8000dbe:	d80e      	bhi.n	8000dde <SEGGER_RTT_vprintf+0x12a>
          break;
        }
        sFormat++;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000dc6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b30      	subs	r3, #48	@ 0x30
 8000dda:	673b      	str	r3, [r7, #112]	@ 0x70
        c = *sFormat;
 8000ddc:	e7e4      	b.n	8000da8 <SEGGER_RTT_vprintf+0xf4>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      PrecisionSet = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      Precision = 0u;
 8000de4:	2300      	movs	r3, #0
 8000de6:	67bb      	str	r3, [r7, #120]	@ 0x78
      c = *sFormat;
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      if (c == '.') {
 8000df0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000df6:	d132      	bne.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
        sFormat++;
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
        if (*sFormat == '*') {
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e04:	d10d      	bne.n	8000e22 <SEGGER_RTT_vprintf+0x16e>
          sFormat++;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
          PrecisionSet = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          Precision = va_arg(*pParamList, int);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1d19      	adds	r1, r3, #4
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6011      	str	r1, [r2, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e20:	e01d      	b.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
        } else {
          do {
            c = *sFormat;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            if ((c < '0') || (c > '9')) {
 8000e2a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e30:	d915      	bls.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
 8000e32:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e36:	2b39      	cmp	r3, #57	@ 0x39
 8000e38:	d811      	bhi.n	8000e5e <SEGGER_RTT_vprintf+0x1aa>
              break;
            }
            PrecisionSet = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
            sFormat++;
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
            Precision = Precision * 10u + ((unsigned)c - '0');
 8000e46:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	461a      	mov	r2, r3
 8000e52:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e56:	4413      	add	r3, r2
 8000e58:	3b30      	subs	r3, #48	@ 0x30
 8000e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
            c = *sFormat;
 8000e5c:	e7e1      	b.n	8000e22 <SEGGER_RTT_vprintf+0x16e>
        }
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
 8000e66:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e6a:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e6c:	d003      	beq.n	8000e76 <SEGGER_RTT_vprintf+0x1c2>
 8000e6e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e72:	2b68      	cmp	r3, #104	@ 0x68
 8000e74:	d107      	bne.n	8000e86 <SEGGER_RTT_vprintf+0x1d2>
          sFormat++;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        if ((c == 'l') || (c == 'h')) {
 8000e84:	e7ef      	b.n	8000e66 <SEGGER_RTT_vprintf+0x1b2>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000e86:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000e8a:	2b25      	cmp	r3, #37	@ 0x25
 8000e8c:	f000 80ef 	beq.w	800106e <SEGGER_RTT_vprintf+0x3ba>
 8000e90:	2b25      	cmp	r3, #37	@ 0x25
 8000e92:	f2c0 80f3 	blt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000e96:	2b78      	cmp	r3, #120	@ 0x78
 8000e98:	f300 80f0 	bgt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000e9c:	2b58      	cmp	r3, #88	@ 0x58
 8000e9e:	f2c0 80ed 	blt.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000ea2:	3b58      	subs	r3, #88	@ 0x58
 8000ea4:	2b20      	cmp	r3, #32
 8000ea6:	f200 80e9 	bhi.w	800107c <SEGGER_RTT_vprintf+0x3c8>
 8000eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb0 <SEGGER_RTT_vprintf+0x1fc>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000fb3 	.word	0x08000fb3
 8000eb4:	0800107d 	.word	0x0800107d
 8000eb8:	0800107d 	.word	0x0800107d
 8000ebc:	0800107d 	.word	0x0800107d
 8000ec0:	0800107d 	.word	0x0800107d
 8000ec4:	0800107d 	.word	0x0800107d
 8000ec8:	0800107d 	.word	0x0800107d
 8000ecc:	0800107d 	.word	0x0800107d
 8000ed0:	0800107d 	.word	0x0800107d
 8000ed4:	0800107d 	.word	0x0800107d
 8000ed8:	0800107d 	.word	0x0800107d
 8000edc:	08000f35 	.word	0x08000f35
 8000ee0:	08000f5f 	.word	0x08000f5f
 8000ee4:	0800107d 	.word	0x0800107d
 8000ee8:	0800107d 	.word	0x0800107d
 8000eec:	0800107d 	.word	0x0800107d
 8000ef0:	0800107d 	.word	0x0800107d
 8000ef4:	0800107d 	.word	0x0800107d
 8000ef8:	0800107d 	.word	0x0800107d
 8000efc:	0800107d 	.word	0x0800107d
 8000f00:	0800107d 	.word	0x0800107d
 8000f04:	0800107d 	.word	0x0800107d
 8000f08:	0800107d 	.word	0x0800107d
 8000f0c:	0800107d 	.word	0x0800107d
 8000f10:	08001045 	.word	0x08001045
 8000f14:	0800107d 	.word	0x0800107d
 8000f18:	0800107d 	.word	0x0800107d
 8000f1c:	08000fdd 	.word	0x08000fdd
 8000f20:	0800107d 	.word	0x0800107d
 8000f24:	08000f89 	.word	0x08000f89
 8000f28:	0800107d 	.word	0x0800107d
 8000f2c:	0800107d 	.word	0x0800107d
 8000f30:	08000fb3 	.word	0x08000fb3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	1d19      	adds	r1, r3, #4
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6011      	str	r1, [r2, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        c0 = (char)v;
 8000f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f48:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
        _StoreChar(&BufferDesc, c0);
 8000f4c:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000f50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fd19 	bl	800098e <_StoreChar>
        break;
 8000f5c:	e08f      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1d19      	adds	r1, r3, #4
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6011      	str	r1, [r2, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintInt(&BufferDesc, v, 10u, Precision, FieldWidth, FormatFlags);
 8000f6e:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f7c:	220a      	movs	r2, #10
 8000f7e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f82:	f7ff fdef 	bl	8000b64 <_PrintInt>
        break;
 8000f86:	e07a      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'u':
        v = va_arg(*pParamList, int);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1d19      	adds	r1, r3, #4
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6011      	str	r1, [r2, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, Precision, FieldWidth, FormatFlags);
 8000f98:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000f9c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000faa:	220a      	movs	r2, #10
 8000fac:	f7ff fd2e 	bl	8000a0c <_PrintUnsigned>
        break;
 8000fb0:	e065      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1d19      	adds	r1, r3, #4
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6011      	str	r1, [r2, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, Precision, FieldWidth, FormatFlags);
 8000fc2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8000fc6:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8000fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	f7ff fd19 	bl	8000a0c <_PrintUnsigned>
        break;
 8000fda:	e050      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1d19      	adds	r1, r3, #4
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6011      	str	r1, [r2, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
          if (s == NULL) {
 8000fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d104      	bne.n	8000ffa <SEGGER_RTT_vprintf+0x346>
            s = "(NULL)";     // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
 8000ff0:	4b37      	ldr	r3, [pc, #220]	@ (80010d0 <SEGGER_RTT_vprintf+0x41c>)
 8000ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
            PrecisionSet = 0; // Make sure (NULL) is printed, even when precision was set.
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          }
          do {
            c = *s;
 8000ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            s++;
 8001002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001004:	3301      	adds	r3, #1
 8001006:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if (c == '\0') {
 8001008:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800100c:	2b00      	cmp	r3, #0
 800100e:	d015      	beq.n	800103c <SEGGER_RTT_vprintf+0x388>
              break;
            }
            if ((PrecisionSet != 0) && (Precision == 0)) {
 8001010:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <SEGGER_RTT_vprintf+0x36a>
 8001018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800101a:	2b00      	cmp	r3, #0
 800101c:	d010      	beq.n	8001040 <SEGGER_RTT_vprintf+0x38c>
              break;
            }
            _StoreChar(&BufferDesc, c);
 800101e:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001022:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fcb0 	bl	800098e <_StoreChar>
            Precision--;
 800102e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001030:	3b01      	subs	r3, #1
 8001032:	67bb      	str	r3, [r7, #120]	@ 0x78
          } while (BufferDesc.ReturnValue >= 0);
 8001034:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001036:	2b00      	cmp	r3, #0
 8001038:	dadf      	bge.n	8000ffa <SEGGER_RTT_vprintf+0x346>
        }
        break;
 800103a:	e020      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
              break;
 800103c:	bf00      	nop
 800103e:	e01e      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
              break;
 8001040:	bf00      	nop
        break;
 8001042:	e01c      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case 'p':
        v = va_arg(*pParamList, int);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	1d19      	adds	r1, r3, #4
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6011      	str	r1, [r2, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8001054:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001058:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 800105c:	2300      	movs	r3, #0
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2308      	movs	r3, #8
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2308      	movs	r3, #8
 8001066:	2210      	movs	r2, #16
 8001068:	f7ff fcd0 	bl	8000a0c <_PrintUnsigned>
        break;
 800106c:	e007      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800106e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001072:	2125      	movs	r1, #37	@ 0x25
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fc8a 	bl	800098e <_StoreChar>
        break;
 800107a:	e000      	b.n	800107e <SEGGER_RTT_vprintf+0x3ca>
      default:
        break;
 800107c:	bf00      	nop
      }
      sFormat++;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	e007      	b.n	8001096 <SEGGER_RTT_vprintf+0x3e2>
    } else {
      _StoreChar(&BufferDesc, c);
 8001086:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800108a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fc7c 	bl	800098e <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8001096:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001098:	2b00      	cmp	r3, #0
 800109a:	f6bf ae1c 	bge.w	8000cd6 <SEGGER_RTT_vprintf+0x22>
 800109e:	e000      	b.n	80010a2 <SEGGER_RTT_vprintf+0x3ee>
      break;
 80010a0:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80010a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dd0d      	ble.n	80010c4 <SEGGER_RTT_vprintf+0x410>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80010a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d006      	beq.n	80010bc <SEGGER_RTT_vprintf+0x408>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80010ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff fc32 	bl	8000920 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80010bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80010c0:	4413      	add	r3, r2
 80010c2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  return BufferDesc.ReturnValue;
 80010c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3788      	adds	r7, #136	@ 0x88
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0801861c 	.word	0x0801861c

080010d4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80010d4:	b40e      	push	{r1, r2, r3}
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	461a      	mov	r2, r3
 80010ea:	69f9      	ldr	r1, [r7, #28]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff fde1 	bl	8000cb4 <SEGGER_RTT_vprintf>
 80010f2:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001100:	b003      	add	sp, #12
 8001102:	4770      	bx	lr

08001104 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_ETH_Init+0x84>)
 800110a:	4a20      	ldr	r2, [pc, #128]	@ (800118c <MX_ETH_Init+0x88>)
 800110c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x02;
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001110:	2202      	movs	r2, #2
 8001112:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x00;
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001116:	2200      	movs	r2, #0
 8001118:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0x00;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_ETH_Init+0x8c>)
 800111c:	2200      	movs	r2, #0
 800111e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0xFA;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001122:	22fa      	movs	r2, #250	@ 0xfa
 8001124:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x15;
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001128:	2215      	movs	r2, #21
 800112a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x47;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_ETH_Init+0x8c>)
 800112e:	2247      	movs	r2, #71	@ 0x47
 8001130:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_ETH_Init+0x84>)
 8001134:	4a16      	ldr	r2, [pc, #88]	@ (8001190 <MX_ETH_Init+0x8c>)
 8001136:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_ETH_Init+0x84>)
 800113a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800113e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_ETH_Init+0x84>)
 8001142:	4a14      	ldr	r2, [pc, #80]	@ (8001194 <MX_ETH_Init+0x90>)
 8001144:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_ETH_Init+0x84>)
 8001148:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_ETH_Init+0x94>)
 800114a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_ETH_Init+0x84>)
 800114e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001152:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001154:	480c      	ldr	r0, [pc, #48]	@ (8001188 <MX_ETH_Init+0x84>)
 8001156:	f001 fab3 	bl	80026c0 <HAL_ETH_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001160:	f000 fb56 	bl	8001810 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001164:	2238      	movs	r2, #56	@ 0x38
 8001166:	2100      	movs	r1, #0
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <MX_ETH_Init+0x98>)
 800116a:	f016 fa43 	bl	80175f4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <MX_ETH_Init+0x98>)
 8001170:	2221      	movs	r2, #33	@ 0x21
 8001172:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_ETH_Init+0x98>)
 8001176:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800117a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <MX_ETH_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000080c 	.word	0x2000080c
 800118c:	40028000 	.word	0x40028000
 8001190:	200008bc 	.word	0x200008bc
 8001194:	2000011c 	.word	0x2000011c
 8001198:	2000007c 	.word	0x2000007c
 800119c:	200007d4 	.word	0x200007d4

080011a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	@ 0x38
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	@ (80012f8 <HAL_ETH_MspInit+0x158>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	f040 8096 	bne.w	80012f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011c4:	4b4d      	ldr	r3, [pc, #308]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d0:	4b4a      	ldr	r3, [pc, #296]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	4a46      	ldr	r2, [pc, #280]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e8:	4b44      	ldr	r3, [pc, #272]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	4b41      	ldr	r3, [pc, #260]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	4a40      	ldr	r2, [pc, #256]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 80011fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001200:	4b3e      	ldr	r3, [pc, #248]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001208:	61bb      	str	r3, [r7, #24]
 800120a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	4b3b      	ldr	r3, [pc, #236]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	4a3a      	ldr	r2, [pc, #232]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6313      	str	r3, [r2, #48]	@ 0x30
 8001218:	4b38      	ldr	r3, [pc, #224]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b35      	ldr	r3, [pc, #212]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a34      	ldr	r2, [pc, #208]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001230:	4b32      	ldr	r3, [pc, #200]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a2e      	ldr	r2, [pc, #184]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a28      	ldr	r2, [pc, #160]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 800125a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001260:	4b26      	ldr	r3, [pc, #152]	@ (80012fc <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_3|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800126c:	233a      	movs	r3, #58	@ 0x3a
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127c:	230b      	movs	r3, #11
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	481e      	ldr	r0, [pc, #120]	@ (8001300 <HAL_ETH_MspInit+0x160>)
 8001288:	f002 fe9a 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3|GPIO_PIN_7;
 800128c:	238e      	movs	r3, #142	@ 0x8e
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800129c:	230b      	movs	r3, #11
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4817      	ldr	r0, [pc, #92]	@ (8001304 <HAL_ETH_MspInit+0x164>)
 80012a8:	f002 fe8a 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80012ac:	f242 0301 	movw	r3, #8193	@ 0x2001
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012be:	230b      	movs	r3, #11
 80012c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	480f      	ldr	r0, [pc, #60]	@ (8001308 <HAL_ETH_MspInit+0x168>)
 80012ca:	f002 fe79 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012ce:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e0:	230b      	movs	r3, #11
 80012e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4808      	ldr	r0, [pc, #32]	@ (800130c <HAL_ETH_MspInit+0x16c>)
 80012ec:	f002 fe68 	bl	8003fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3738      	adds	r7, #56	@ 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40028000 	.word	0x40028000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	40021800 	.word	0x40021800

08001310 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <MX_FREERTOS_Init+0x18>)
 8001316:	2100      	movs	r1, #0
 8001318:	4804      	ldr	r0, [pc, #16]	@ (800132c <MX_FREERTOS_Init+0x1c>)
 800131a:	f012 f88b 	bl	8013434 <osThreadNew>
 800131e:	4603      	mov	r3, r0
 8001320:	4a03      	ldr	r2, [pc, #12]	@ (8001330 <MX_FREERTOS_Init+0x20>)
 8001322:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801887c 	.word	0x0801887c
 800132c:	08001335 	.word	0x08001335
 8001330:	200008c4 	.word	0x200008c4

08001334 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	 AppMain();
 800133c:	f000 fec8 	bl	80020d0 <AppMain>
    osDelay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f012 f91d 	bl	8013580 <osDelay>
	 AppMain();
 8001346:	bf00      	nop
 8001348:	e7f8      	b.n	800133c <StartDefaultTask+0x8>
	...

0800134c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b63      	ldr	r3, [pc, #396]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a62      	ldr	r2, [pc, #392]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b60      	ldr	r3, [pc, #384]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	4b5d      	ldr	r3, [pc, #372]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a5c      	ldr	r2, [pc, #368]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b5a      	ldr	r3, [pc, #360]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b57      	ldr	r3, [pc, #348]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a56      	ldr	r2, [pc, #344]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b54      	ldr	r3, [pc, #336]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b51      	ldr	r3, [pc, #324]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a50      	ldr	r2, [pc, #320]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b4e      	ldr	r3, [pc, #312]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	4b4b      	ldr	r3, [pc, #300]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a4a      	ldr	r2, [pc, #296]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	4b45      	ldr	r3, [pc, #276]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a44      	ldr	r2, [pc, #272]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b42      	ldr	r3, [pc, #264]	@ (80014f0 <MX_GPIO_Init+0x1a4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2101      	movs	r1, #1
 80013f6:	483f      	ldr	r0, [pc, #252]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 80013f8:	f002 ff8e 	bl	8004318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	2104      	movs	r1, #4
 8001400:	483d      	ldr	r0, [pc, #244]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001402:	f002 ff89 	bl	8004318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800140c:	483a      	ldr	r0, [pc, #232]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 800140e:	f002 ff83 	bl	8004318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	@ 0x40
 8001416:	4839      	ldr	r0, [pc, #228]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 8001418:	f002 ff7e 	bl	8004318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	21c0      	movs	r1, #192	@ 0xc0
 8001420:	4837      	ldr	r0, [pc, #220]	@ (8001500 <MX_GPIO_Init+0x1b4>)
 8001422:	f002 ff79 	bl	8004318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	482d      	ldr	r0, [pc, #180]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 800143e:	f002 fdbf 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001442:	2301      	movs	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	4826      	ldr	r0, [pc, #152]	@ (80014f4 <MX_GPIO_Init+0x1a8>)
 800145a:	f002 fdb1 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800145e:	2304      	movs	r3, #4
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4820      	ldr	r0, [pc, #128]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001476:	f002 fda3 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800147a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4819      	ldr	r0, [pc, #100]	@ (80014f8 <MX_GPIO_Init+0x1ac>)
 8001494:	f002 fd94 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001498:	2340      	movs	r3, #64	@ 0x40
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4813      	ldr	r0, [pc, #76]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 80014b0:	f002 fd86 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_GPIO_Init+0x1b0>)
 80014c8:	f002 fd7a 	bl	8003fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014cc:	23c0      	movs	r3, #192	@ 0xc0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <MX_GPIO_Init+0x1b4>)
 80014e4:	f002 fd6c 	bl	8003fc0 <HAL_GPIO_Init>

}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	@ 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020800 	.word	0x40020800
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40020c00 	.word	0x40020c00

08001504 <MX_I2S1_Init>:

I2S_HandleTypeDef hi2s1;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_I2S1_Init+0x4c>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <MX_I2S1_Init+0x50>)
 800150c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001510:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001514:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_32B;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_I2S1_Init+0x4c>)
 800151e:	2205      	movs	r2, #5
 8001520:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_I2S1_Init+0x4c>)
 800152a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800152e:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_HIGH;
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001532:	2208      	movs	r2, #8
 8001534:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_I2S1_Init+0x4c>)
 8001538:	2202      	movs	r2, #2
 800153a:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	@ (8001550 <MX_I2S1_Init+0x4c>)
 800153e:	f002 ff05 	bl	800434c <HAL_I2S_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 8001548:	f000 f962 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	200008c8 	.word	0x200008c8
 8001554:	40013000 	.word	0x40013000

08001558 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0ae      	sub	sp, #184	@ 0xb8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2290      	movs	r2, #144	@ 0x90
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f016 f83b 	bl	80175f4 <memset>
  if(i2sHandle->Instance==SPI1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a36      	ldr	r2, [pc, #216]	@ (800165c <HAL_I2S_MspInit+0x104>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d165      	bne.n	8001654 <HAL_I2S_MspInit+0xfc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001588:	2301      	movs	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800158c:	23c0      	movs	r3, #192	@ 0xc0
 800158e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80015a0:	2300      	movs	r3, #0
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fea1 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2S_MspInit+0x60>
    {
      Error_Handler();
 80015b4:	f000 f92c 	bl	8001810 <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015bc:	4a28      	ldr	r2, [pc, #160]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c4:	4b26      	ldr	r3, [pc, #152]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d0:	4b23      	ldr	r3, [pc, #140]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d4:	4a22      	ldr	r2, [pc, #136]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6313      	str	r3, [r2, #48]	@ 0x30
 80015dc:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_I2S_MspInit+0x108>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001600:	2330      	movs	r3, #48	@ 0x30
 8001602:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001618:	2305      	movs	r3, #5
 800161a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	@ (8001664 <HAL_I2S_MspInit+0x10c>)
 8001626:	f002 fccb 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800162a:	2320      	movs	r3, #32
 800162c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001642:	2305      	movs	r3, #5
 8001644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <HAL_I2S_MspInit+0x110>)
 8001650:	f002 fcb6 	bl	8003fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001654:	bf00      	nop
 8001656:	37b8      	adds	r7, #184	@ 0xb8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013000 	.word	0x40013000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000
 8001668:	40020400 	.word	0x40020400

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001670:	f000 f88e 	bl	8001790 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001674:	f000 fe6a 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001678:	f000 f818 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167c:	f7ff fe66 	bl	800134c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001680:	f000 fb1a 	bl	8001cb8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001684:	f000 fba8 	bl	8001dd8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8001688:	f000 f910 	bl	80018ac <MX_SPI2_Init>
  MX_ETH_Init();
 800168c:	f7ff fd3a 	bl	8001104 <MX_ETH_Init>
  MX_RNG_Init();
 8001690:	f000 f8c4 	bl	800181c <MX_RNG_Init>
  MX_I2S1_Init();
 8001694:	f7ff ff36 	bl	8001504 <MX_I2S1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8001698:	f011 fe62 	bl	8013360 <osKernelInitialize>
  MX_FREERTOS_Init();
 800169c:	f7ff fe38 	bl	8001310 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016a0:	f011 fe92 	bl	80133c8 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AppMain();
 80016a4:	f000 fd14 	bl	80020d0 <AppMain>
 80016a8:	e7fc      	b.n	80016a4 <main+0x38>
	...

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	@ 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2234      	movs	r2, #52	@ 0x34
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f015 ff9a 	bl	80175f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016d0:	f003 f8a8 	bl	8004824 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <SystemClock_Config+0xdc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001788 <SystemClock_Config+0xdc>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <SystemClock_Config+0xdc>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016ec:	4b27      	ldr	r3, [pc, #156]	@ (800178c <SystemClock_Config+0xe0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016f4:	4a25      	ldr	r2, [pc, #148]	@ (800178c <SystemClock_Config+0xe0>)
 80016f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <SystemClock_Config+0xe0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001708:	2301      	movs	r3, #1
 800170a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800170c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001710:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001712:	2302      	movs	r3, #2
 8001714:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800171a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800171c:	2304      	movs	r3, #4
 800171e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001720:	2360      	movs	r3, #96	@ 0x60
 8001722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001724:	2302      	movs	r3, #2
 8001726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001728:	2304      	movs	r3, #4
 800172a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800172c:	2302      	movs	r3, #2
 800172e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4618      	mov	r0, r3
 8001736:	f003 f8d5 	bl	80048e4 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001740:	f000 f866 	bl	8001810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001744:	f003 f87e 	bl	8004844 <HAL_PWREx_EnableOverDrive>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800174e:	f000 f85f 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001752:	230f      	movs	r3, #15
 8001754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001756:	2302      	movs	r3, #2
 8001758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	2103      	movs	r1, #3
 800176e:	4618      	mov	r0, r3
 8001770:	f003 fb66 	bl	8004e40 <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800177a:	f000 f849 	bl	8001810 <Error_Handler>
  }
}
 800177e:	bf00      	nop
 8001780:	3750      	adds	r7, #80	@ 0x50
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40007000 	.word	0x40007000

08001790 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80017a2:	f000 ff15 	bl	80025d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MPU_Config+0x58>)
 80017b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80017b2:	230d      	movs	r3, #13
 80017b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80017be:	2303      	movs	r3, #3
 80017c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017d2:	463b      	mov	r3, r7
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 ff33 	bl	8002640 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80017da:	2006      	movs	r0, #6
 80017dc:	f000 ff10 	bl	8002600 <HAL_MPU_Enable>

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2007c000 	.word	0x2007c000

080017ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80017fe:	f000 fdc1 	bl	8002384 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40001000 	.word	0x40001000

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <Error_Handler+0x8>

0800181c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_RNG_Init+0x20>)
 8001822:	4a07      	ldr	r2, [pc, #28]	@ (8001840 <MX_RNG_Init+0x24>)
 8001824:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <MX_RNG_Init+0x20>)
 8001828:	f004 f98a 	bl	8005b40 <HAL_RNG_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001832:	f7ff ffed 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000908 	.word	0x20000908
 8001840:	50060800 	.word	0x50060800

08001844 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0a8      	sub	sp, #160	@ 0xa0
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	2290      	movs	r2, #144	@ 0x90
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f015 fecd 	bl	80175f4 <memset>
  if(rngHandle->Instance==RNG)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <HAL_RNG_MspInit+0x60>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d11b      	bne.n	800189c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001864:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001868:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fd3b 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001880:	f7ff ffc6 	bl	8001810 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_RNG_MspInit+0x64>)
 8001886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001888:	4a07      	ldr	r2, [pc, #28]	@ (80018a8 <HAL_RNG_MspInit+0x64>)
 800188a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800188e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RNG_MspInit+0x64>)
 8001892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800189c:	bf00      	nop
 800189e:	37a0      	adds	r7, #160	@ 0xa0
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50060800 	.word	0x50060800
 80018a8:	40023800 	.word	0x40023800

080018ac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001924 <MX_SPI2_Init+0x78>)
 80018b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80018ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018e2:	2238      	movs	r2, #56	@ 0x38
 80018e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <MX_SPI2_Init+0x74>)
 80018fa:	2207      	movs	r2, #7
 80018fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <MX_SPI2_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <MX_SPI2_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	@ (8001920 <MX_SPI2_Init+0x74>)
 800190c:	f004 f942 	bl	8005b94 <HAL_SPI_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001916:	f7ff ff7b 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000918 	.word	0x20000918
 8001924:	40003800 	.word	0x40003800

08001928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <HAL_SPI_MspInit+0x7c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d128      	bne.n	800199c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6313      	str	r3, [r2, #48]	@ 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_SPI_MspInit+0x80>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800197a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800198c:	2305      	movs	r3, #5
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	4805      	ldr	r0, [pc, #20]	@ (80019ac <HAL_SPI_MspInit+0x84>)
 8001998:	f002 fb12 	bl	8003fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	@ 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40003800 	.word	0x40003800
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <HAL_MspInit+0x4c>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210f      	movs	r1, #15
 80019ea:	f06f 0001 	mvn.w	r0, #1
 80019ee:	f000 fdc5 	bl	800257c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	@ 0x38
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a10:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	4a32      	ldr	r2, [pc, #200]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ae0 <HAL_InitTick+0xe0>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a28:	f107 0210 	add.w	r2, r7, #16
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fc2a 	bl	800528c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a42:	f003 fbfb 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8001a46:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a48:	e004      	b.n	8001a54 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a4a:	f003 fbf7 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a56:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <HAL_InitTick+0xe4>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9b      	lsrs	r3, r3, #18
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a62:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a64:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <HAL_InitTick+0xec>)
 8001a66:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a88:	4817      	ldr	r0, [pc, #92]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a8a:	f004 fc2d 	bl	80062e8 <HAL_TIM_Base_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a9c:	4812      	ldr	r0, [pc, #72]	@ (8001ae8 <HAL_InitTick+0xe8>)
 8001a9e:	f004 fc85 	bl	80063ac <HAL_TIM_Base_Start_IT>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d111      	bne.n	8001ad4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ab0:	2036      	movs	r0, #54	@ 0x36
 8001ab2:	f000 fd7f 	bl	80025b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d808      	bhi.n	8001ace <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	2036      	movs	r0, #54	@ 0x36
 8001ac2:	f000 fd5b 	bl	800257c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <HAL_InitTick+0xf0>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e002      	b.n	8001ad4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3738      	adds	r7, #56	@ 0x38
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	2000097c 	.word	0x2000097c
 8001aec:	40001000 	.word	0x40001000
 8001af0:	20000004 	.word	0x20000004

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <NMI_Handler+0x4>

08001afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <TIM6_DAC_IRQHandler+0x10>)
 8001b32:	f004 fcb3 	bl	800649c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000097c 	.word	0x2000097c

08001b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_kill>:

int _kill(int pid, int sig)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5a:	f015 fdf9 	bl	8017750 <__errno>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2216      	movs	r2, #22
 8001b62:	601a      	str	r2, [r3, #0]
  return -1;
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_exit>:

void _exit (int status)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffe7 	bl	8001b50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b82:	bf00      	nop
 8001b84:	e7fd      	b.n	8001b82 <_exit+0x12>

08001b86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e00a      	b.n	8001bae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b98:	f3af 8000 	nop.w
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	b2ca      	uxtb	r2, r1
 8001ba6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbf0      	blt.n	8001b98 <_read+0x12>
  }

  return len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_isatty>:

int _isatty(int file)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f015 fd7a 	bl	8017750 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2007c000 	.word	0x2007c000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	200009c8 	.word	0x200009c8
 8001c90:	200097c8 	.word	0x200097c8

08001c94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <MX_USART3_UART_Init+0x5c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_USART3_UART_Init+0x58>)
 8001cfc:	f004 fdc2 	bl	8006884 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d06:	f7ff fd83 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200009cc 	.word	0x200009cc
 8001d14:	40004800 	.word	0x40004800

08001d18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b0ae      	sub	sp, #184	@ 0xb8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2290      	movs	r2, #144	@ 0x90
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f015 fc5b 	bl	80175f4 <memset>
  if(uartHandle->Instance==USART3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <HAL_UART_MspInit+0xb4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d13c      	bne.n	8001dc2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4618      	mov	r0, r3
 8001d58:	f003 faca 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d62:	f7ff fd55 	bl	8001810 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a19      	ldr	r2, [pc, #100]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_UART_MspInit+0xb8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db0:	2307      	movs	r3, #7
 8001db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <HAL_UART_MspInit+0xbc>)
 8001dbe:	f002 f8ff 	bl	8003fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	37b8      	adds	r7, #184	@ 0xb8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020c00 	.word	0x40020c00

08001dd8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dde:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001de2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de6:	2206      	movs	r2, #6
 8001de8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dea:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df8:	2202      	movs	r2, #2
 8001dfa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e08:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1c:	f002 fbc8 	bl	80045b0 <HAL_PCD_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e26:	f7ff fcf3 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000a54 	.word	0x20000a54

08001e34 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0ae      	sub	sp, #184	@ 0xb8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2290      	movs	r2, #144	@ 0x90
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f015 fbcd 	bl	80175f4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e62:	d159      	bne.n	8001f18 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fa3b 	bl	80052f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e80:	f7ff fcc6 	bl	8001810 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	4a25      	ldr	r2, [pc, #148]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e90:	4b23      	ldr	r3, [pc, #140]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e9c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4818      	ldr	r0, [pc, #96]	@ (8001f24 <HAL_PCD_MspInit+0xf0>)
 8001ec4:	f002 f87c 	bl	8003fc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4810      	ldr	r0, [pc, #64]	@ (8001f24 <HAL_PCD_MspInit+0xf0>)
 8001ee4:	f002 f86c 	bl	8003fc0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eec:	4a0c      	ldr	r2, [pc, #48]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef2:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f04:	4a06      	ldr	r2, [pc, #24]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <HAL_PCD_MspInit+0xec>)
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001f18:	bf00      	nop
 8001f1a:	37b8      	adds	r7, #184	@ 0xb8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000

08001f28 <initializeNetworkInterface>:

//saved in MCU RAM
static NetworkInterface_t xEthernetInterface;

//create a network interface, telling the stack what hardware is available
NetworkInterface_t* initializeNetworkInterface(void){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	@ 0x30
 8001f2c:	af04      	add	r7, sp, #16
	//ptr to interface
	NetworkInterface_t *pxInterface;

	//set EMAC idx to the first 0, and pass in ptr
	pxInterface = pxSTM32_FillInterfaceDescriptor(0, &xEthernetInterface);
 8001f2e:	491d      	ldr	r1, [pc, #116]	@ (8001fa4 <initializeNetworkInterface+0x7c>)
 8001f30:	2000      	movs	r0, #0
 8001f32:	f011 f9d1 	bl	80132d8 <pxSTM32_FillInterfaceDescriptor>
 8001f36:	4603      	mov	r3, r0
 8001f38:	61fb      	str	r3, [r7, #28]
		//allocate space for the endpoint
		static NetworkEndPoint_t *xLocalEndPoint;

	//use IPV4 because it's for less code and less RAM
		//actual IPV4 address
		const uint8_t ipAddress[4] = {10, 114, 20, 200};
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <initializeNetworkInterface+0x80>)
 8001f3c:	617b      	str	r3, [r7, #20]
		const uint8_t netMask[4] = {255, 255, 252, 0};
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <initializeNetworkInterface+0x84>)
 8001f40:	613b      	str	r3, [r7, #16]
		const uint8_t gatewayAddress[4] = {10, 114, 20, 1};
 8001f42:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <initializeNetworkInterface+0x88>)
 8001f44:	60fb      	str	r3, [r7, #12]
		const uint8_t dnsAddress[4] = {104,222,16,6};
 8001f46:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <initializeNetworkInterface+0x8c>)
 8001f48:	60bb      	str	r3, [r7, #8]


	//MAC address -> physical hardware identifier, interface card
		uint8_t macAddress[6];
		memcpy(macAddress, heth.Init.MACAddr, 6); // get MAC from config file
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <initializeNetworkInterface+0x90>)
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	463b      	mov	r3, r7
 8001f50:	6810      	ldr	r0, [r2, #0]
 8001f52:	6018      	str	r0, [r3, #0]
 8001f54:	8892      	ldrh	r2, [r2, #4]
 8001f56:	809a      	strh	r2, [r3, #4]
		//static NetworkInterface_t xInterfaces[1];

		//static NetworkEndPoint_t xEndPoints[4];

	//Add network interface and endpoint to FreeRTOS
		FreeRTOS_FillEndPoint(pxInterface,xLocalEndPoint,ipAddress,netMask,gatewayAddress,dnsAddress, macAddress);
 8001f58:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <initializeNetworkInterface+0x94>)
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	f107 0010 	add.w	r0, r7, #16
 8001f60:	f107 0214 	add.w	r2, r7, #20
 8001f64:	463b      	mov	r3, r7
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	f107 0308 	add.w	r3, r7, #8
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4603      	mov	r3, r0
 8001f76:	69f8      	ldr	r0, [r7, #28]
 8001f78:	f009 f825 	bl	800afc6 <FreeRTOS_FillEndPoint>

	BaseType_t xResult = FreeRTOS_IPInit_Multi();
 8001f7c:	f007 fbcc 	bl	8009718 <FreeRTOS_IPInit_Multi>
 8001f80:	61b8      	str	r0, [r7, #24]
	if (xResult == pdPASS) {
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d104      	bne.n	8001f92 <initializeNetworkInterface+0x6a>
		SEGGER_RTT_printf(0,"Network stack initialized successfully\n");
 8001f88:	490d      	ldr	r1, [pc, #52]	@ (8001fc0 <initializeNetworkInterface+0x98>)
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff f8a2 	bl	80010d4 <SEGGER_RTT_printf>
 8001f90:	e003      	b.n	8001f9a <initializeNetworkInterface+0x72>
	} else {
		SEGGER_RTT_printf(0,"Network initialization failed\n");
 8001f92:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <initializeNetworkInterface+0x9c>)
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff f89d 	bl	80010d4 <SEGGER_RTT_printf>
	}

	return &xEthernetInterface;
 8001f9a:	4b02      	ldr	r3, [pc, #8]	@ (8001fa4 <initializeNetworkInterface+0x7c>)
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3720      	adds	r7, #32
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000f34 	.word	0x20000f34
 8001fa8:	c814720a 	.word	0xc814720a
 8001fac:	00fcffff 	.word	0x00fcffff
 8001fb0:	0114720a 	.word	0x0114720a
 8001fb4:	0610de68 	.word	0x0610de68
 8001fb8:	2000080c 	.word	0x2000080c
 8001fbc:	20000f5c 	.word	0x20000f5c
 8001fc0:	08018630 	.word	0x08018630
 8001fc4:	08018658 	.word	0x08018658

08001fc8 <ConfigTCPClientSocket>:

//tasks to create/config socket -> create socket, set timeout for Rx and Tx and bind socket to port #
Socket_t ConfigTCPClientSocket(void){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af02      	add	r7, sp, #8
	Socket_t xClientSocket;
	socklen_t xSize = sizeof( struct freertos_sockaddr );
 8001fce:	2318      	movs	r3, #24
 8001fd0:	60bb      	str	r3, [r7, #8]
	static const TickType_t xTimeOut = pdMS_TO_TICKS( 2000 );

    xClientSocket = FreeRTOS_socket(FREERTOS_AF_INET, //ipv4 family
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f009 fae0 	bl	800b59c <FreeRTOS_socket>
 8001fdc:	6078      	str	r0, [r7, #4]
    								FREERTOS_SOCK_STREAM,  /* SOCK_STREAM for TCP. */

									 FREERTOS_IPPROTO_TCP  ); //TCP protocol

    /* Check the socket was created. */
    if( xClientSocket != FREERTOS_INVALID_SOCKET )
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d034      	beq.n	8002050 <ConfigTCPClientSocket+0x88>
    {
        printf("ERROR: Socket creation failed!\n");
 8001fe6:	482f      	ldr	r0, [pc, #188]	@ (80020a4 <ConfigTCPClientSocket+0xdc>)
 8001fe8:	f015 f9c4 	bl	8017374 <puts>

        // Check network status
        printf("Network up: %s\n", FreeRTOS_IsNetworkUp() ? "YES" : "NO");
 8001fec:	f007 ff78 	bl	8009ee0 <FreeRTOS_IsNetworkUp>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <ConfigTCPClientSocket+0x32>
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80020a8 <ConfigTCPClientSocket+0xe0>)
 8001ff8:	e000      	b.n	8001ffc <ConfigTCPClientSocket+0x34>
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	@ (80020ac <ConfigTCPClientSocket+0xe4>)
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	482c      	ldr	r0, [pc, #176]	@ (80020b0 <ConfigTCPClientSocket+0xe8>)
 8002000:	f015 f950 	bl	80172a4 <iprintf>

        // Check heap memory
        printf("Free heap: %u bytes\n", xPortGetFreeHeapSize());
 8002004:	f014 ff86 	bl	8016f14 <xPortGetFreeHeapSize>
 8002008:	4603      	mov	r3, r0
 800200a:	4619      	mov	r1, r3
 800200c:	4829      	ldr	r0, [pc, #164]	@ (80020b4 <ConfigTCPClientSocket+0xec>)
 800200e:	f015 f949 	bl	80172a4 <iprintf>

        // Check if we have an IP address

        // Add longer wait for DHCP
        printf("Waiting for DHCP...\n");
 8002012:	4829      	ldr	r0, [pc, #164]	@ (80020b8 <ConfigTCPClientSocket+0xf0>)
 8002014:	f015 f9ae 	bl	8017374 <puts>
        int attempts = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
        while(FreeRTOS_GetIPAddress() == 0 && attempts < 30) {
 800201c:	e00e      	b.n	800203c <ConfigTCPClientSocket+0x74>
            vTaskDelay(pdMS_TO_TICKS(1000));
 800201e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002022:	f012 fef9 	bl	8014e18 <vTaskDelay>
            attempts++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
            printf("DHCP attempt %d, IP: %lu\n", attempts, FreeRTOS_GetIPAddress());
 800202c:	f007 ff2e 	bl	8009e8c <FreeRTOS_GetIPAddress>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	68f9      	ldr	r1, [r7, #12]
 8002036:	4821      	ldr	r0, [pc, #132]	@ (80020bc <ConfigTCPClientSocket+0xf4>)
 8002038:	f015 f934 	bl	80172a4 <iprintf>
        while(FreeRTOS_GetIPAddress() == 0 && attempts < 30) {
 800203c:	f007 ff26 	bl	8009e8c <FreeRTOS_GetIPAddress>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <ConfigTCPClientSocket+0x86>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b1d      	cmp	r3, #29
 800204a:	dde8      	ble.n	800201e <ConfigTCPClientSocket+0x56>
 800204c:	e7ff      	b.n	800204e <ConfigTCPClientSocket+0x86>
        }

        // Stop here for debugging
        while(1);
 800204e:	e7fe      	b.n	800204e <ConfigTCPClientSocket+0x86>
    }

    //socket was created successfully
    else
    {
        printf("Socket created successfully!\n");
 8002050:	481b      	ldr	r0, [pc, #108]	@ (80020c0 <ConfigTCPClientSocket+0xf8>)
 8002052:	f015 f98f 	bl	8017374 <puts>

    //set socket options for the given socket
        /* Set send and receive time outs. */

        //set timeout for receiving data
        FreeRTOS_setsockopt( xClientSocket,
 8002056:	2304      	movs	r3, #4
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <ConfigTCPClientSocket+0xfc>)
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f009 ff55 	bl	800bf10 <FreeRTOS_setsockopt>
                             FREERTOS_SO_RCVTIMEO,
                             &xTimeOut,
                             sizeof( xTimeOut ) );

        //set timeout for sending data out of socket
        FreeRTOS_setsockopt( xClientSocket,
 8002066:	2304      	movs	r3, #4
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <ConfigTCPClientSocket+0xfc>)
 800206c:	2201      	movs	r2, #1
 800206e:	2100      	movs	r1, #0
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f009 ff4d 	bl	800bf10 <FreeRTOS_setsockopt>
                             FREERTOS_SO_SNDTIMEO,
                             &xTimeOut,
                             sizeof( xTimeOut ) );

        //bind socket to port num, NULL means FreeRTOS choose port #
        FreeRTOS_bind( xClientSocket, NULL, xSize );
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	2100      	movs	r1, #0
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f009 fb2f 	bl	800b6de <FreeRTOS_bind>

        if (xClientSocket == FREERTOS_INVALID_SOCKET) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d104      	bne.n	8002092 <ConfigTCPClientSocket+0xca>
        	SEGGER_RTT_printf(0,"Client socket is invalid!\n");
 8002088:	490f      	ldr	r1, [pc, #60]	@ (80020c8 <ConfigTCPClientSocket+0x100>)
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff f822 	bl	80010d4 <SEGGER_RTT_printf>
 8002090:	e003      	b.n	800209a <ConfigTCPClientSocket+0xd2>
        } else {

        	SEGGER_RTT_printf(0,"Client socket is valid\n");
 8002092:	490e      	ldr	r1, [pc, #56]	@ (80020cc <ConfigTCPClientSocket+0x104>)
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff f81d 	bl	80010d4 <SEGGER_RTT_printf>
        }
    }

        return xClientSocket;
 800209a:	687b      	ldr	r3, [r7, #4]

}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	08018678 	.word	0x08018678
 80020a8:	08018698 	.word	0x08018698
 80020ac:	0801869c 	.word	0x0801869c
 80020b0:	080186a0 	.word	0x080186a0
 80020b4:	080186b0 	.word	0x080186b0
 80020b8:	080186c8 	.word	0x080186c8
 80020bc:	080186dc 	.word	0x080186dc
 80020c0:	080186f8 	.word	0x080186f8
 80020c4:	080188b8 	.word	0x080188b8
 80020c8:	08018718 	.word	0x08018718
 80020cc:	08018734 	.word	0x08018734

080020d0 <AppMain>:
#include "TCP_IP.h"
#include "proj_tasks.h"
#include "mic.h"


void AppMain(void){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af02      	add	r7, sp, #8

	//Task to create network interface and socket
	xTaskCreate(vInterfaceSocketTask, "Task Initialize Interface & Socket",
 80020d6:	2300      	movs	r3, #0
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2328      	movs	r3, #40	@ 0x28
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2300      	movs	r3, #0
 80020e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020e4:	490b      	ldr	r1, [pc, #44]	@ (8002114 <AppMain+0x44>)
 80020e6:	480c      	ldr	r0, [pc, #48]	@ (8002118 <AppMain+0x48>)
 80020e8:	f012 fd36 	bl	8014b58 <xTaskCreate>

	//test LCD

	//configureI2S();
	//getAudio();
	lcd_4SPI_init();
 80020ec:	f000 f8da 	bl	80022a4 <lcd_4SPI_init>
	setPageaddressing();
 80020f0:	f000 f864 	bl	80021bc <setPageaddressing>

	//THIS WORKS, COLUMN SEEMS TO NOT
	lcd_setpage_address(1);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f000 f877 	bl	80021e8 <lcd_setpage_address>
	lcd_setcolumn_address(32);
 80020fa:	2020      	movs	r0, #32
 80020fc:	f000 f88e 	bl	800221c <lcd_setcolumn_address>

	while(1){
		SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
 8002100:	4906      	ldr	r1, [pc, #24]	@ (800211c <AppMain+0x4c>)
 8002102:	2000      	movs	r0, #0
 8002104:	f7fe ffe6 	bl	80010d4 <SEGGER_RTT_printf>
		HAL_Delay(5000);
 8002108:	f241 3088 	movw	r0, #5000	@ 0x1388
 800210c:	f000 f95a 	bl	80023c4 <HAL_Delay>
		SEGGER_RTT_printf(0,"HELLO WORLD!\r\n");
 8002110:	bf00      	nop
 8002112:	e7f5      	b.n	8002100 <AppMain+0x30>
 8002114:	0801874c 	.word	0x0801874c
 8002118:	080022d9 	.word	0x080022d9
 800211c:	08018770 	.word	0x08018770

08002120 <lcd_transfer>:

#include <lcd.h>
#include "main.h"
#include "stm32f7xx_hal.h"

HAL_StatusTypeDef lcd_transfer(uint8_t data){
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
	//pull CS low
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	2140      	movs	r1, #64	@ 0x40
 800212e:	480b      	ldr	r0, [pc, #44]	@ (800215c <lcd_transfer+0x3c>)
 8002130:	f002 f8f2 	bl	8004318 <HAL_GPIO_WritePin>

	//transmit the data

	HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 8002134:	1df9      	adds	r1, r7, #7
 8002136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213a:	2201      	movs	r2, #1
 800213c:	4808      	ldr	r0, [pc, #32]	@ (8002160 <lcd_transfer+0x40>)
 800213e:	f003 fdd4 	bl	8005cea <HAL_SPI_Transmit>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]
	if (status == HAL_OK){

	}
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002146:	2201      	movs	r2, #1
 8002148:	2140      	movs	r1, #64	@ 0x40
 800214a:	4804      	ldr	r0, [pc, #16]	@ (800215c <lcd_transfer+0x3c>)
 800214c:	f002 f8e4 	bl	8004318 <HAL_GPIO_WritePin>

	return HAL_OK;
 8002150:	2300      	movs	r3, #0

}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40020c00 	.word	0x40020c00
 8002160:	20000918 	.word	0x20000918

08002164 <onLCD>:

	return HAL_OK;
}

//turn LCD on to match RAM data
HAL_StatusTypeDef  onLCD(void){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

	//lcd on data
	uint8_t data = 0xAF;
 800216a:	23af      	movs	r3, #175	@ 0xaf
 800216c:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800216e:	2200      	movs	r2, #0
 8002170:	2180      	movs	r1, #128	@ 0x80
 8002172:	4806      	ldr	r0, [pc, #24]	@ (800218c <onLCD+0x28>)
 8002174:	f002 f8d0 	bl	8004318 <HAL_GPIO_WritePin>


	return lcd_transfer(data);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ffd0 	bl	8002120 <lcd_transfer>
 8002180:	4603      	mov	r3, r0

}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40020c00 	.word	0x40020c00

08002190 <offLCD>:
	return lcd_transfer(data);
}


//turn lcd OFF
HAL_StatusTypeDef  offLCD(void){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0

	//lcd off data
	uint8_t data = 0xAE;
 8002196:	23ae      	movs	r3, #174	@ 0xae
 8002198:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	2180      	movs	r1, #128	@ 0x80
 800219e:	4806      	ldr	r0, [pc, #24]	@ (80021b8 <offLCD+0x28>)
 80021a0:	f002 f8ba 	bl	8004318 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ffba 	bl	8002120 <lcd_transfer>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40020c00 	.word	0x40020c00

080021bc <setPageaddressing>:




//set page(horizontal) addressing after R/W a byte of SPI data
HAL_StatusTypeDef setPageaddressing(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	uint8_t data = 0x20;
 80021c2:	2320      	movs	r3, #32
 80021c4:	71fb      	strb	r3, [r7, #7]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2180      	movs	r1, #128	@ 0x80
 80021ca:	4806      	ldr	r0, [pc, #24]	@ (80021e4 <setPageaddressing+0x28>)
 80021cc:	f002 f8a4 	bl	8004318 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ffa4 	bl	8002120 <lcd_transfer>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40020c00 	.word	0x40020c00

080021e8 <lcd_setpage_address>:
}


//set the page address for writing pixels
//page number must be between 0-15
HAL_StatusTypeDef  lcd_setpage_address(int page_num){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

	//convert int to uint8
	uint8_t pg_num = page_num;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]
	//data byte for page address
	uint8_t data = 0xB0 | pg_num;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80021fa:	73bb      	strb	r3, [r7, #14]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2180      	movs	r1, #128	@ 0x80
 8002200:	4805      	ldr	r0, [pc, #20]	@ (8002218 <lcd_setpage_address+0x30>)
 8002202:	f002 f889 	bl	8004318 <HAL_GPIO_WritePin>

	return lcd_transfer(data);
 8002206:	7bbb      	ldrb	r3, [r7, #14]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff89 	bl	8002120 <lcd_transfer>
 800220e:	4603      	mov	r3, r0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40020c00 	.word	0x40020c00

0800221c <lcd_setcolumn_address>:

//set the column address for writing pixels
// must be between 0 and 127, there are 128 columns
HAL_StatusTypeDef  lcd_setcolumn_address(int column_num){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

	if(column_num >= 128 || column_num < 0){
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b7f      	cmp	r3, #127	@ 0x7f
 8002228:	dc02      	bgt.n	8002230 <lcd_setcolumn_address+0x14>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	da01      	bge.n	8002234 <lcd_setcolumn_address+0x18>
		return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e030      	b.n	8002296 <lcd_setcolumn_address+0x7a>
	}

	uint8_t num_conv = (uint8_t) column_num;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	73fb      	strb	r3, [r7, #15]

	uint8_t high_address = 0b00010000;
 8002238:	2310      	movs	r3, #16
 800223a:	73bb      	strb	r3, [r7, #14]
	uint8_t low_address = 0x00;
 800223c:	2300      	movs	r3, #0
 800223e:	737b      	strb	r3, [r7, #13]

	high_address = high_address | ((num_conv >> 4) & 0x0F);
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b25a      	sxtb	r2, r3
 8002248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800224c:	4313      	orrs	r3, r2
 800224e:	b25b      	sxtb	r3, r3
 8002250:	73bb      	strb	r3, [r7, #14]
	low_address = low_address | (num_conv & 0x0F);
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	b25a      	sxtb	r2, r3
 800225c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002260:	4313      	orrs	r3, r2
 8002262:	b25b      	sxtb	r3, r3
 8002264:	737b      	strb	r3, [r7, #13]

	//pull A0 low (PD7)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	2180      	movs	r1, #128	@ 0x80
 800226a:	480d      	ldr	r0, [pc, #52]	@ (80022a0 <lcd_setcolumn_address+0x84>)
 800226c:	f002 f854 	bl	8004318 <HAL_GPIO_WritePin>

	if(lcd_transfer(high_address) != HAL_OK){
 8002270:	7bbb      	ldrb	r3, [r7, #14]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff54 	bl	8002120 <lcd_transfer>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <lcd_setcolumn_address+0x66>
		return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e009      	b.n	8002296 <lcd_setcolumn_address+0x7a>
	}
	if(lcd_transfer(low_address) != HAL_OK){
 8002282:	7b7b      	ldrb	r3, [r7, #13]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff4b 	bl	8002120 <lcd_transfer>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <lcd_setcolumn_address+0x78>
		return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <lcd_setcolumn_address+0x7a>
	}

	return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40020c00 	.word	0x40020c00

080022a4 <lcd_4SPI_init>:
}

//initialize SPI protocol with 4 wire setup
//includes SCL,SI,A0, and /CS
//Pins: PB10 -> SCK, PC3 -> SI(MOSI), RES -> PC0, A0(D/C) -> PD7, CS -> PD6
HAL_StatusTypeDef lcd_4SPI_init(){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	//pull CS high
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80022a8:	2201      	movs	r2, #1
 80022aa:	2140      	movs	r1, #64	@ 0x40
 80022ac:	4808      	ldr	r0, [pc, #32]	@ (80022d0 <lcd_4SPI_init+0x2c>)
 80022ae:	f002 f833 	bl	8004318 <HAL_GPIO_WritePin>

	//pull RES pin up
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	2101      	movs	r1, #1
 80022b6:	4807      	ldr	r0, [pc, #28]	@ (80022d4 <lcd_4SPI_init+0x30>)
 80022b8:	f002 f82e 	bl	8004318 <HAL_GPIO_WritePin>

	//dummy transmission for SPI

	onLCD();
 80022bc:	f7ff ff52 	bl	8002164 <onLCD>
	offLCD();
 80022c0:	f7ff ff66 	bl	8002190 <offLCD>

	//this is the column where the lcd starts
	lcd_setcolumn_address(32);
 80022c4:	2020      	movs	r0, #32
 80022c6:	f7ff ffa9 	bl	800221c <lcd_setcolumn_address>

	return HAL_OK;
 80022ca:	2300      	movs	r3, #0

}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40020800 	.word	0x40020800

080022d8 <vInterfaceSocketTask>:
#include "FreeRTOS.h"
#include "FreeRTOS_Sockets.h"
#include "FreeRTOS_IP.h"
#include "TCP_IP.h"

void vInterfaceSocketTask(void * argument) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
//Initialize networkInterface
	NetworkInterface_t* ethInterace = initializeNetworkInterface();
 80022e0:	f7ff fe22 	bl	8001f28 <initializeNetworkInterface>
 80022e4:	60f8      	str	r0, [r7, #12]

	//Initialize Socket
	Socket_t clientSocket = ConfigTCPClientSocket();
 80022e6:	f7ff fe6f 	bl	8001fc8 <ConfigTCPClientSocket>
 80022ea:	60b8      	str	r0, [r7, #8]

    for(;;) {
        vTaskDelay(1000);
 80022ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022f0:	f012 fd92 	bl	8014e18 <vTaskDelay>
 80022f4:	e7fa      	b.n	80022ec <vInterfaceSocketTask+0x14>
	...

080022f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022fc:	f7ff fcca 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002300:	480c      	ldr	r0, [pc, #48]	@ (8002334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002302:	490d      	ldr	r1, [pc, #52]	@ (8002338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002304:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002308:	e002      	b.n	8002310 <LoopCopyDataInit>

0800230a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800230c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230e:	3304      	adds	r3, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002314:	d3f9      	bcc.n	800230a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002316:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002318:	4c0a      	ldr	r4, [pc, #40]	@ (8002344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800231c:	e001      	b.n	8002322 <LoopFillZerobss>

0800231e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002320:	3204      	adds	r2, #4

08002322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002324:	d3fb      	bcc.n	800231e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002326:	f015 fa19 	bl	801775c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232a:	f7ff f99f 	bl	800166c <main>
  bx  lr    
 800232e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002330:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002338:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800233c:	08018a38 	.word	0x08018a38
  ldr r2, =_sbss
 8002340:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8002344:	200097c8 	.word	0x200097c8

08002348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_Init+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <HAL_Init+0x34>)
 8002356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800235a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <HAL_Init+0x34>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a07      	ldr	r2, [pc, #28]	@ (8002380 <HAL_Init+0x34>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002368:	2003      	movs	r0, #3
 800236a:	f000 f8fc 	bl	8002566 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236e:	200f      	movs	r0, #15
 8002370:	f7ff fb46 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002374:	f7ff fb1c 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00

08002384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_IncTick+0x20>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_IncTick+0x24>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	@ (80023a8 <HAL_IncTick+0x24>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000008 	.word	0x20000008
 80023a8:	20000f60 	.word	0x20000f60

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000f60 	.word	0x20000f60

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff ffee 	bl	80023ac <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d005      	beq.n	80023ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023de:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_Delay+0x44>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ea:	bf00      	nop
 80023ec:	f7ff ffde 	bl	80023ac <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d8f7      	bhi.n	80023ec <HAL_Delay+0x28>
  {
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000008 	.word	0x20000008

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <__NVIC_SetPriorityGrouping+0x40>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	4313      	orrs	r3, r2
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <__NVIC_SetPriorityGrouping+0x40>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00
 8002450:	05fa0000 	.word	0x05fa0000

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	@ (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	@ (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	@ (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ff4c 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258e:	f7ff ff61 	bl	8002454 <__NVIC_GetPriorityGrouping>
 8002592:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	6978      	ldr	r0, [r7, #20]
 800259a:	f7ff ffb1 	bl	8002500 <NVIC_EncodePriority>
 800259e:	4602      	mov	r2, r0
 80025a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff80 	bl	80024ac <__NVIC_SetPriority>
}
 80025ac:	bf00      	nop
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ff54 	bl	8002470 <__NVIC_EnableIRQ>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80025d4:	f3bf 8f5f 	dmb	sy
}
 80025d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <HAL_MPU_Disable+0x28>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	4a06      	ldr	r2, [pc, #24]	@ (80025f8 <HAL_MPU_Disable+0x28>)
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80025e6:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_MPU_Disable+0x2c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	605a      	str	r2, [r3, #4]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00
 80025fc:	e000ed90 	.word	0xe000ed90

08002600 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002608:	4a0b      	ldr	r2, [pc, #44]	@ (8002638 <HAL_MPU_Enable+0x38>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002612:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <HAL_MPU_Enable+0x3c>)
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	4a09      	ldr	r2, [pc, #36]	@ (800263c <HAL_MPU_Enable+0x3c>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800261e:	f3bf 8f4f 	dsb	sy
}
 8002622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002624:	f3bf 8f6f 	isb	sy
}
 8002628:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed90 	.word	0xe000ed90
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	785a      	ldrb	r2, [r3, #1]
 800264c:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <HAL_MPU_ConfigRegion+0x7c>)
 800264e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <HAL_MPU_ConfigRegion+0x7c>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	4a19      	ldr	r2, [pc, #100]	@ (80026bc <HAL_MPU_ConfigRegion+0x7c>)
 8002656:	f023 0301 	bic.w	r3, r3, #1
 800265a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800265c:	4a17      	ldr	r2, [pc, #92]	@ (80026bc <HAL_MPU_ConfigRegion+0x7c>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	7b1b      	ldrb	r3, [r3, #12]
 8002668:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7adb      	ldrb	r3, [r3, #11]
 800266e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002670:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7a9b      	ldrb	r3, [r3, #10]
 8002676:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002678:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7b5b      	ldrb	r3, [r3, #13]
 800267e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002680:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7b9b      	ldrb	r3, [r3, #14]
 8002686:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002688:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7bdb      	ldrb	r3, [r3, #15]
 800268e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002690:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7a5b      	ldrb	r3, [r3, #9]
 8002696:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002698:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7a1b      	ldrb	r3, [r3, #8]
 800269e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026a8:	4a04      	ldr	r2, [pc, #16]	@ (80026bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026ac:	6113      	str	r3, [r2, #16]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000ed90 	.word	0xe000ed90

080026c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e086      	b.n	80027e0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7fe fd5b 	bl	80011a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	4b3f      	ldr	r3, [pc, #252]	@ (80027e8 <HAL_ETH_Init+0x128>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4a3e      	ldr	r2, [pc, #248]	@ (80027e8 <HAL_ETH_Init+0x128>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f6:	4b3c      	ldr	r3, [pc, #240]	@ (80027e8 <HAL_ETH_Init+0x128>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002702:	4b3a      	ldr	r3, [pc, #232]	@ (80027ec <HAL_ETH_Init+0x12c>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4a39      	ldr	r2, [pc, #228]	@ (80027ec <HAL_ETH_Init+0x12c>)
 8002708:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800270c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800270e:	4b37      	ldr	r3, [pc, #220]	@ (80027ec <HAL_ETH_Init+0x12c>)
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4935      	ldr	r1, [pc, #212]	@ (80027ec <HAL_ETH_Init+0x12c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800271c:	4b33      	ldr	r3, [pc, #204]	@ (80027ec <HAL_ETH_Init+0x12c>)
 800271e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002736:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002738:	f7ff fe38 	bl	80023ac <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800273e:	e011      	b.n	8002764 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002740:	f7ff fe34 	bl	80023ac <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800274e:	d909      	bls.n	8002764 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2204      	movs	r2, #4
 8002754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	22e0      	movs	r2, #224	@ 0xe0
 800275c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e03d      	b.n	80027e0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e4      	bne.n	8002740 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 f966 	bl	8003a48 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f001 fa11 	bl	8003ba4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f001 fa67 	bl	8003c56 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	461a      	mov	r2, r3
 800278e:	2100      	movs	r1, #0
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f001 f9cf 	bl	8003b34 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80027a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <HAL_ETH_Init+0x130>)
 80027b4:	430b      	orrs	r3, r1
 80027b6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80027ca:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2210      	movs	r2, #16
 80027da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	00020060 	.word	0x00020060

080027f4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002802:	2b10      	cmp	r3, #16
 8002804:	d15f      	bne.n	80028c6 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2204      	movs	r2, #4
 8002818:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9f6 	bl	8002c0c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff fdcb 	bl	80023c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002848:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800284c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002864:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 ff8a 	bl	8003780 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0208 	orr.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002884:	2001      	movs	r0, #1
 8002886:	f7ff fd9d 	bl	80023c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0204 	orr.w	r2, r2, #4
 80028a0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028aa:	69d9      	ldr	r1, [r3, #28]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <HAL_ETH_Start_IT+0xdc>)
 80028b2:	430b      	orrs	r3, r1
 80028b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028b8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2240      	movs	r2, #64	@ 0x40
 80028be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	0001a0c1 	.word	0x0001a0c1

080028d4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028e2:	2b40      	cmp	r3, #64	@ 0x40
 80028e4:	d16e      	bne.n	80029c4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f6:	69d9      	ldr	r1, [r3, #28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b34      	ldr	r3, [pc, #208]	@ (80029d0 <HAL_ETH_Stop_IT+0xfc>)
 80028fe:	400b      	ands	r3, r1
 8002900:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002904:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002918:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800291c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	f023 0302 	bic.w	r3, r3, #2
 8002930:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002934:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0204 	bic.w	r2, r2, #4
 8002944:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800294e:	2001      	movs	r0, #1
 8002950:	f7ff fd38 	bl	80023c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 ff0f 	bl	8003780 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0208 	bic.w	r2, r2, #8
 8002970:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800297a:	2001      	movs	r0, #1
 800297c:	f7ff fd22 	bl	80023c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	e00e      	b.n	80029ac <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	3212      	adds	r2, #18
 8002994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002998:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d9ed      	bls.n	800298e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2210      	movs	r2, #16
 80029bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e000      	b.n	80029c6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	fffe5f3e 	.word	0xfffe5f3e

080029d4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e045      	b.n	8002a84 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029fe:	2b40      	cmp	r3, #64	@ 0x40
 8002a00:	d13f      	bne.n	8002a82 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f001 f990 	bl	8003d34 <ETH_Prepare_Tx_Descriptors>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a20:	f043 0202 	orr.w	r2, r3, #2
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e02a      	b.n	8002a84 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002a2e:	f3bf 8f4f 	dsb	sy
}
 8002a32:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d904      	bls.n	8002a50 <HAL_ETH_Transmit_IT+0x7c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	1f1a      	subs	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e000      	b.n	8002a84 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0a4      	b.n	8002c02 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002abe:	2b40      	cmp	r3, #64	@ 0x40
 8002ac0:	d001      	beq.n	8002ac6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e09d      	b.n	8002c02 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	3212      	adds	r2, #18
 8002ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002adc:	f1c3 0304 	rsb	r3, r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002ae2:	e066      	b.n	8002bb2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <HAL_ETH_ReadData+0x88>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d03c      	beq.n	8002b8e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002b36:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f010 fb5e 	bl	801322e <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	441a      	add	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3301      	adds	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d902      	bls.n	8002ba0 <HAL_ETH_ReadData+0x114>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b04      	subs	r3, #4
 8002b9e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	3212      	adds	r2, #18
 8002ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002baa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db06      	blt.n	8002bc8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d202      	bcs.n	8002bc8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002bc2:	7cfb      	ldrb	r3, [r7, #19]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d08d      	beq.n	8002ae4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	441a      	add	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f815 	bl	8002c0c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d108      	bne.n	8002c00 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e000      	b.n	8002c02 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c20:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	3212      	adds	r2, #18
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c32:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002c34:	e042      	b.n	8002cbc <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d112      	bne.n	8002c64 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	4618      	mov	r0, r3
 8002c44:	f010 fade 	bl	8013204 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	74fb      	strb	r3, [r7, #19]
 8002c52:	e007      	b.n	8002c64 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	461a      	mov	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d028      	beq.n	8002cbc <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	4b26      	ldr	r3, [pc, #152]	@ (8002d10 <ETH_UpdateDescriptor+0x104>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	6053      	str	r3, [r2, #4]
 8002c7e:	e005      	b.n	8002c8c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d902      	bls.n	8002caa <ETH_UpdateDescriptor+0x9e>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	3212      	adds	r2, #18
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	617b      	str	r3, [r7, #20]
      desccount--;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <ETH_UpdateDescriptor+0xbc>
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1b6      	bne.n	8002c36 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d01a      	beq.n	8002d08 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3303      	adds	r3, #3
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cdc:	f3bf 8f5f 	dmb	sy
}
 8002ce0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6919      	ldr	r1, [r3, #16]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	18ca      	adds	r2, r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cfa:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3720      	adds	r7, #32
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	80004000 	.word	0x80004000

08002d14 <HAL_ETH_GetRxDataErrorCode>:
  *         the configuration information for ETHERNET module
  * @param  pErrorCode: pointer to uint32_t to hold the error code
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataErrorCode(const ETH_HandleTypeDef *heth, uint32_t *pErrorCode)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  /* Get error bits. */
  *pErrorCode = READ_BIT(heth->RxDescList.pRxLastRxDesc, ETH_DMARXDESC_ERRORS_MASK);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d22:	f644 03de 	movw	r3, #18654	@ 0x48de
 8002d26:	4013      	ands	r3, r2
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3318      	adds	r3, #24
 8002d46:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d58:	e047      	b.n	8002dea <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	3301      	adds	r3, #1
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d902      	bls.n	8002d86 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	3b04      	subs	r3, #4
 8002d84:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002d8a:	7bbb      	ldrb	r3, [r7, #14]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02c      	beq.n	8002dea <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68d9      	ldr	r1, [r3, #12]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	440b      	add	r3, r1
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	db1f      	blt.n	8002de6 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	3304      	adds	r3, #4
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f010 fa7a 	bl	80132ac <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d902      	bls.n	8002dd8 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	3b04      	subs	r3, #4
 8002dd6:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002de4:	e001      	b.n	8002dea <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1b1      	bne.n	8002d5a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002e28:	4b4b      	ldr	r3, [pc, #300]	@ (8002f58 <HAL_ETH_IRQHandler+0x158>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00e      	beq.n	8002e56 <HAL_ETH_IRQHandler+0x56>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b43      	ldr	r3, [pc, #268]	@ (8002f5c <HAL_ETH_IRQHandler+0x15c>)
 8002e4e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f010 f977 	bl	8013144 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00f      	beq.n	8002e80 <HAL_ETH_IRQHandler+0x80>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e72:	461a      	mov	r2, r3
 8002e74:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002e78:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f010 f992 	bl	80131a4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d042      	beq.n	8002f10 <HAL_ETH_IRQHandler+0x110>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d03d      	beq.n	8002f10 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	f043 0208 	orr.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01a      	beq.n	8002ee4 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	4b29      	ldr	r3, [pc, #164]	@ (8002f60 <HAL_ETH_IRQHandler+0x160>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002ed4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ed8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	22e0      	movs	r2, #224	@ 0xe0
 8002ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002ee2:	e012      	b.n	8002f0a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f02:	461a      	mov	r2, r3
 8002f04:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002f08:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f010 f8be 	bl	801308c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00e      	beq.n	8002f38 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f81a 	bl	8002f64 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d006      	beq.n	8002f50 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002f42:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_ETH_IRQHandler+0x158>)
 8002f44:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f48:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f814 	bl	8002f78 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40013c00 	.word	0x40013c00
 8002f5c:	00010040 	.word	0x00010040
 8002f60:	007e2000 	.word	0x007e2000

08002f64 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 031c 	and.w	r3, r3, #28
 8002fa8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	02db      	lsls	r3, r3, #11
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	019b      	lsls	r3, r3, #6
 8002fba:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 0302 	bic.w	r3, r3, #2
 8002fca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002fdc:	f7ff f9e6 	bl	80023ac <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fe2:	e00d      	b.n	8003000 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002fe4:	f7ff f9e2 	bl	80023ac <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff2:	d301      	bcc.n	8002ff8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e010      	b.n	800301a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ec      	bne.n	8002fe4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	b29b      	uxth	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f003 031c 	and.w	r3, r3, #28
 800303e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	02db      	lsls	r3, r3, #11
 8003044:	b29b      	uxth	r3, r3
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	019b      	lsls	r3, r3, #6
 8003050:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800307c:	f7ff f996 	bl	80023ac <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003082:	e00d      	b.n	80030a0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003084:	f7ff f992 	bl	80023ac <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003092:	d301      	bcc.n	8003098 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e009      	b.n	80030ac <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ec      	bne.n	8003084 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0e6      	b.n	8003296 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	bf14      	ite	ne
 8003216:	2301      	movne	r3, #1
 8003218:	2300      	moveq	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	2b00      	cmp	r3, #0
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	461a      	mov	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	b29a      	uxth	r2, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003282:	2b00      	cmp	r3, #0
 8003284:	bf14      	ite	ne
 8003286:	2301      	movne	r3, #1
 8003288:	2300      	moveq	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_ETH_GetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetDMAConfig(const ETH_HandleTypeDef *heth, ETH_DMAConfigTypeDef *dmaconf)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ETH_GetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0ca      	b.n	800344e <HAL_ETH_GetDMAConfig+0x1aa>
  }

  dmaconf->DMAArbitration = READ_BIT(heth->Instance->DMABMR,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f24c 0302 	movw	r3, #49154	@ 0xc002
 80032c6:	4013      	ands	r3, r2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	6013      	str	r3, [r2, #0]
                                     (ETH_DMAARBITRATION_RXPRIORTX | ETH_DMAARBITRATION_ROUNDROBIN_RXTX_4_1));
  dmaconf->AddressAlignedBeats = ((READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_AAB) >> 25U) > 0U) ? ENABLE : DISABLE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	711a      	strb	r2, [r3, #4]
  dmaconf->BurstMode = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_FB | ETH_DMABMR_MB);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b59      	ldr	r3, [pc, #356]	@ (800345c <HAL_ETH_GetDMAConfig+0x1b8>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	6093      	str	r3, [r2, #8]
  dmaconf->RxDMABurstLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_RDP);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 02fc 	and.w	r2, r3, #8257536	@ 0x7e0000
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	619a      	str	r2, [r3, #24]
  dmaconf->TxDMABurstLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_PBL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 527c 	and.w	r2, r3, #16128	@ 0x3f00
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	611a      	str	r2, [r3, #16]
  dmaconf->EnhancedDescriptorFormat = ((READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_EDE) >> 7) > 0U) ? ENABLE : DISABLE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	bf14      	ite	ne
 8003332:	2301      	movne	r3, #1
 8003334:	2300      	moveq	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  dmaconf->DescriptorSkipLength = READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_DSL) >> 2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28

  dmaconf->DropTCPIPChecksumErrorFrame = ((READ_BIT(heth->Instance->DMAOMR,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800335c:	699b      	ldr	r3, [r3, #24]
                                                    ETH_DMAOMR_DTCEFD) >> 26) > 0U) ? DISABLE : ENABLE;
 800335e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
  dmaconf->DropTCPIPChecksumErrorFrame = ((READ_BIT(heth->Instance->DMAOMR,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	731a      	strb	r2, [r3, #12]
  dmaconf->ReceiveStoreForward = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_RSF) >> 25) > 0U) ? ENABLE : DISABLE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf14      	ite	ne
 8003384:	2301      	movne	r3, #1
 8003386:	2300      	moveq	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	735a      	strb	r2, [r3, #13]
  dmaconf->FlushRxPacket = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_FTF) >> 20) > 0U) ? DISABLE : ENABLE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	775a      	strb	r2, [r3, #29]
  dmaconf->TransmitStoreForward = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_TSF) >> 21) > 0U) ? ENABLE : DISABLE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	739a      	strb	r2, [r3, #14]
  dmaconf->TransmitThresholdControl = READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_TTC);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 32e0 	and.w	r2, r3, #114688	@ 0x1c000
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	615a      	str	r2, [r3, #20]
  dmaconf->ForwardErrorFrames = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_FEF) >> 7) > 0U) ? ENABLE : DISABLE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	771a      	strb	r2, [r3, #28]
  dmaconf->ForwardUndersizedGoodFrames = ((READ_BIT(heth->Instance->DMAOMR,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003404:	699b      	ldr	r3, [r3, #24]
                                                    ETH_DMAOMR_FUGF) >> 6) > 0U) ? ENABLE : DISABLE;
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
  dmaconf->ForwardUndersizedGoodFrames = ((READ_BIT(heth->Instance->DMAOMR,
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	779a      	strb	r2, [r3, #30]
  dmaconf->ReceiveThresholdControl = READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_RTC);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0218 	and.w	r2, r3, #24
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	621a      	str	r2, [r3, #32]
  dmaconf->SecondFrameOperate = ((READ_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_OSF) >> 2) > 0U) ? ENABLE : DISABLE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	04010000 	.word	0x04010000

08003460 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e00b      	b.n	800348c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800347a:	2b10      	cmp	r3, #16
 800347c:	d105      	bne.n	800348a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800347e:	6839      	ldr	r1, [r7, #0]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9a3 	bl	80037cc <ETH_SetMACConfig>

    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e00b      	b.n	80034c0 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d105      	bne.n	80034be <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 80034b2:	6839      	ldr	r1, [r7, #0]
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa3d 	bl	8003934 <ETH_SetDMAConfig>

    return HAL_OK;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
  }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 031c 	bic.w	r3, r3, #28
 80034de:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80034e0:	f001 fea0 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 80034e4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4a14      	ldr	r2, [pc, #80]	@ (800353c <HAL_ETH_SetMDIOClockRange+0x74>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d804      	bhi.n	80034f8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f043 0308 	orr.w	r3, r3, #8
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e019      	b.n	800352c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4a11      	ldr	r2, [pc, #68]	@ (8003540 <HAL_ETH_SetMDIOClockRange+0x78>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d204      	bcs.n	800350a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f043 030c 	orr.w	r3, r3, #12
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e010      	b.n	800352c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4a0d      	ldr	r2, [pc, #52]	@ (8003544 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d90c      	bls.n	800352c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4a0c      	ldr	r2, [pc, #48]	@ (8003548 <HAL_ETH_SetMDIOClockRange+0x80>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d804      	bhi.n	8003524 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e003      	b.n	800352c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f043 0310 	orr.w	r3, r3, #16
 800352a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	611a      	str	r2, [r3, #16]
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	02160ebf 	.word	0x02160ebf
 8003540:	03938700 	.word	0x03938700
 8003544:	05f5e0ff 	.word	0x05f5e0ff
 8003548:	08f0d17f 	.word	0x08f0d17f

0800354c <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;
  uint32_t tmpreg1;

  if (pFilterConfig == NULL)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e044      	b.n	80035ea <HAL_ETH_SetMACFilterConfig+0x9e>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	78db      	ldrb	r3, [r3, #3]
 800356a:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 800356c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	791b      	ldrb	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003574:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	7a1b      	ldrb	r3, [r3, #8]
 800357a:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 800357c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	795b      	ldrb	r3, [r3, #5]
 8003582:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003584:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == ENABLE) ? 1U : 0U) << 5) |
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	7a52      	ldrb	r2, [r2, #9]
 800358a:	2a01      	cmp	r2, #1
 800358c:	d101      	bne.n	8003592 <HAL_ETH_SetMACFilterConfig+0x46>
 800358e:	2220      	movs	r2, #32
 8003590:	e000      	b.n	8003594 <HAL_ETH_SetMACFilterConfig+0x48>
 8003592:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8003594:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	79db      	ldrb	r3, [r3, #7]
 800359a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == ENABLE) ? 1U : 0U) << 5) |
 800359c:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	799b      	ldrb	r3, [r3, #6]
 80035a2:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 80035a4:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	789b      	ldrb	r3, [r3, #2]
 80035aa:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 80035ac:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80035b4:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACFFR, ETH_MACFFR_MASK, filterconfig);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <HAL_ETH_SetMACFilterConfig+0xa8>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	68f9      	ldr	r1, [r7, #12]
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6053      	str	r3, [r2, #4]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	60bb      	str	r3, [r7, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035da:	2001      	movs	r0, #1
 80035dc:	f7fe fef2 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	7ffff800 	.word	0x7ffff800

080035f8 <HAL_ETH_GetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that will hold
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetMACFilterConfig(const ETH_HandleTypeDef *heth, ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  if (pFilterConfig == NULL)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_ETH_GetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e084      	b.n	8003716 <HAL_ETH_GetMACFilterConfig+0x11e>
  }

  pFilterConfig->PromiscuousMode = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PM)) > 0U) ? ENABLE : DISABLE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	701a      	strb	r2, [r3, #0]
  pFilterConfig->HashUnicast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HU) >> 1) > 0U) ? ENABLE : DISABLE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	70da      	strb	r2, [r3, #3]
  pFilterConfig->HashMulticast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HM) >> 2) > 0U) ? ENABLE : DISABLE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf14      	ite	ne
 800364e:	2301      	movne	r3, #1
 8003650:	2300      	moveq	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	711a      	strb	r2, [r3, #4]
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
                                                       ETH_MACFFR_DAIF) >> 3) > 0U) ? ENABLE : DISABLE;
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
  pFilterConfig->DestAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	721a      	strb	r2, [r3, #8]
  pFilterConfig->PassAllMulticast = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PAM) >> 4) > 0U) ? ENABLE : DISABLE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	715a      	strb	r2, [r3, #5]
  pFilterConfig->BroadcastFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_BFD) >> 5) > 0U) ? ENABLE : DISABLE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	725a      	strb	r2, [r3, #9]
  pFilterConfig->ControlPacketsFilter = READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_PCF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	60da      	str	r2, [r3, #12]
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
                                                      ETH_MACFFR_SAIF) >> 8) > 0U) ? ENABLE : DISABLE;
 80036bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
  pFilterConfig->SrcAddrInverseFiltering = ((READ_BIT(heth->Instance->MACFFR,
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	71da      	strb	r2, [r3, #7]
  pFilterConfig->SrcAddrFiltering = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_SAF) >> 9) > 0U) ? ENABLE : DISABLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	719a      	strb	r2, [r3, #6]
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HPF) >> 10) > 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
                                       ? ENABLE : DISABLE;
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
  pFilterConfig->HachOrPerfectFilter = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_HPF) >> 10) > 0U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	709a      	strb	r2, [r3, #2]
  pFilterConfig->ReceiveAllMode = ((READ_BIT(heth->Instance->MACFFR, ETH_MACFFR_RA) >> 31) > 0U) ? ENABLE : DISABLE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0fdb      	lsrs	r3, r3, #31
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	705a      	strb	r2, [r3, #1]

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_ETH_SetHashTable>:
  * @param  pHashTable: pointer to a table of two 32 bit values, that contains
  *         the 64 bits of the hash table.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetHashTable(ETH_HandleTypeDef *heth, uint32_t *pHashTable)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;
  if (pHashTable == NULL)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ETH_SetHashTable+0x14>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e020      	b.n	8003778 <HAL_ETH_SetHashTable+0x56>
  }

  heth->Instance->MACHTHR = pHashTable[0];
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	609a      	str	r2, [r3, #8]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACHTHR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003748:	2001      	movs	r0, #1
 800374a:	f7fe fe3b 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->MACHTHR = tmpreg1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	609a      	str	r2, [r3, #8]

  heth->Instance->MACHTLR = pHashTable[1];
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	6852      	ldr	r2, [r2, #4]
 800375e:	60da      	str	r2, [r3, #12]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACHTLR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003768:	2001      	movs	r0, #1
 800376a:	f7fe fe2b 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->MACHTLR = tmpreg1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800379e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037a2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037b0:	2001      	movs	r0, #1
 80037b2:	f7fe fe07 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037c0:	6193      	str	r3, [r2, #24]
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <ETH_SetMACConfig+0x164>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	7b9b      	ldrb	r3, [r3, #14]
 80037ea:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	7c12      	ldrb	r2, [r2, #16]
 80037f0:	2a00      	cmp	r2, #0
 80037f2:	d102      	bne.n	80037fa <ETH_SetMACConfig+0x2e>
 80037f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80037f8:	e000      	b.n	80037fc <ETH_SetMACConfig+0x30>
 80037fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80037fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	7c52      	ldrb	r2, [r2, #17]
 8003802:	2a00      	cmp	r2, #0
 8003804:	d102      	bne.n	800380c <ETH_SetMACConfig+0x40>
 8003806:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800380a:	e000      	b.n	800380e <ETH_SetMACConfig+0x42>
 800380c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800380e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003814:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	7fdb      	ldrb	r3, [r3, #31]
 800381a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800381c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003822:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	7f92      	ldrb	r2, [r2, #30]
 8003828:	2a00      	cmp	r2, #0
 800382a:	d102      	bne.n	8003832 <ETH_SetMACConfig+0x66>
 800382c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003830:	e000      	b.n	8003834 <ETH_SetMACConfig+0x68>
 8003832:	2200      	movs	r2, #0
                        macconf->Speed |
 8003834:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	7f1b      	ldrb	r3, [r3, #28]
 800383a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800383c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003842:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	791b      	ldrb	r3, [r3, #4]
 8003848:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800384a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003852:	2a00      	cmp	r2, #0
 8003854:	d102      	bne.n	800385c <ETH_SetMACConfig+0x90>
 8003856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800385a:	e000      	b.n	800385e <ETH_SetMACConfig+0x92>
 800385c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800385e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	7bdb      	ldrb	r3, [r3, #15]
 8003864:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003866:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800386c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003874:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003876:	4313      	orrs	r3, r2
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800388e:	2001      	movs	r0, #1
 8003890:	f7fe fd98 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80038aa:	4013      	ands	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80038ba:	2a00      	cmp	r2, #0
 80038bc:	d101      	bne.n	80038c2 <ETH_SetMACConfig+0xf6>
 80038be:	2280      	movs	r2, #128	@ 0x80
 80038c0:	e000      	b.n	80038c4 <ETH_SetMACConfig+0xf8>
 80038c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80038c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80038ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	d101      	bne.n	80038da <ETH_SetMACConfig+0x10e>
 80038d6:	2208      	movs	r2, #8
 80038d8:	e000      	b.n	80038dc <ETH_SetMACConfig+0x110>
 80038da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80038dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80038e4:	2a01      	cmp	r2, #1
 80038e6:	d101      	bne.n	80038ec <ETH_SetMACConfig+0x120>
 80038e8:	2204      	movs	r2, #4
 80038ea:	e000      	b.n	80038ee <ETH_SetMACConfig+0x122>
 80038ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80038ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80038f6:	2a01      	cmp	r2, #1
 80038f8:	d101      	bne.n	80038fe <ETH_SetMACConfig+0x132>
 80038fa:	2202      	movs	r2, #2
 80038fc:	e000      	b.n	8003900 <ETH_SetMACConfig+0x134>
 80038fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003900:	4313      	orrs	r3, r2
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003918:	2001      	movs	r0, #1
 800391a:	f7fe fd53 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	619a      	str	r2, [r3, #24]
}
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	fd20810f 	.word	0xfd20810f

08003934 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a44 <ETH_SetDMAConfig+0x110>)
 800394e:	4013      	ands	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	7b1b      	ldrb	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <ETH_SetDMAConfig+0x2c>
 800395a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800395e:	e000      	b.n	8003962 <ETH_SetDMAConfig+0x2e>
 8003960:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	7b5b      	ldrb	r3, [r3, #13]
 8003966:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003968:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	7f52      	ldrb	r2, [r2, #29]
 800396e:	2a00      	cmp	r2, #0
 8003970:	d102      	bne.n	8003978 <ETH_SetDMAConfig+0x44>
 8003972:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003976:	e000      	b.n	800397a <ETH_SetDMAConfig+0x46>
 8003978:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800397a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	7b9b      	ldrb	r3, [r3, #14]
 8003980:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003982:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003988:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	7f1b      	ldrb	r3, [r3, #28]
 800398e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003990:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	7f9b      	ldrb	r3, [r3, #30]
 8003996:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003998:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800399e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039a8:	4313      	orrs	r3, r2
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039b8:	461a      	mov	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7fe fcfa 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039d8:	461a      	mov	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	791b      	ldrb	r3, [r3, #4]
 80039e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80039e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80039ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80039f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80039fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a06:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003a0c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a1a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a28:	2001      	movs	r0, #1
 8003a2a:	f7fe fccb 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	f8de3f23 	.word	0xf8de3f23

08003a48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b0a6      	sub	sp, #152	@ 0x98
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ab0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003ab6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ac2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fe7f 	bl	80037cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003afe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b02:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003b04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b08:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003b0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b0e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003b1e:	f107 0308 	add.w	r3, r7, #8
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ff05 	bl	8003934 <ETH_SetDMAConfig>
}
 8003b2a:	bf00      	nop
 8003b2c:	3798      	adds	r7, #152	@ 0x98
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3305      	adds	r3, #5
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	3204      	adds	r2, #4
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <ETH_MACAddressConfig+0x68>)
 8003b56:	4413      	add	r3, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3303      	adds	r3, #3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	061a      	lsls	r2, r3, #24
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3301      	adds	r3, #1
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	7812      	ldrb	r2, [r2, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <ETH_MACAddressConfig+0x6c>)
 8003b86:	4413      	add	r3, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40028040 	.word	0x40028040
 8003ba0:	40028044 	.word	0x40028044

08003ba4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e03e      	b.n	8003c30 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68d9      	ldr	r1, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	3206      	adds	r2, #6
 8003be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d80c      	bhi.n	8003c14 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68d9      	ldr	r1, [r3, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	e004      	b.n	8003c1e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d9bd      	bls.n	8003bb2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c48:	611a      	str	r2, [r3, #16]
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e048      	b.n	8003cf6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6919      	ldr	r1, [r3, #16]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	440b      	add	r3, r1
 8003c74:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2200      	movs	r2, #0
 8003c92:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2200      	movs	r2, #0
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003ca0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	3212      	adds	r2, #18
 8003cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d80c      	bhi.n	8003ce6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6919      	ldr	r1, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	440b      	add	r3, r1
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e004      	b.n	8003cf0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d9b3      	bls.n	8003c64 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d26:	60da      	str	r2, [r3, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b091      	sub	sp, #68	@ 0x44
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3318      	adds	r3, #24
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d5e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d76:	d007      	beq.n	8003d88 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e111      	b.n	8003fb0 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d8e:	3301      	adds	r3, #1
 8003d90:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4b86      	ldr	r3, [pc, #536]	@ (8003fbc <ETH_Prepare_Tx_Descriptors+0x288>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da6:	6852      	ldr	r2, [r2, #4]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003e0e:	e082      	b.n	8003f16 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d006      	beq.n	8003e30 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e005      	b.n	8003e3c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3e:	3301      	adds	r3, #1
 8003e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d902      	bls.n	8003e4e <ETH_Prepare_Tx_Descriptors+0x11a>
 8003e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e56:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e64:	d007      	beq.n	8003e76 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d029      	beq.n	8003eca <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e82:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e88:	e019      	b.n	8003ebe <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8003e8a:	f3bf 8f5f 	dmb	sy
}
 8003e8e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d902      	bls.n	8003eae <ETH_Prepare_Tx_Descriptors+0x17a>
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb6:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eba:	3301      	adds	r3, #1
 8003ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ebe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d3e1      	bcc.n	8003e8a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e072      	b.n	8003fb0 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed8:	3301      	adds	r3, #1
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	4b32      	ldr	r3, [pc, #200]	@ (8003fbc <ETH_Prepare_Tx_Descriptors+0x288>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef6:	6852      	ldr	r2, [r2, #4]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f00:	3301      	adds	r3, #1
 8003f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003f04:	f3bf 8f5f 	dmb	sy
}
 8003f08:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f47f af78 	bne.w	8003e10 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e005      	b.n	8003f40 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	6a3a      	ldr	r2, [r7, #32]
 8003f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f54:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003f56:	f3bf 8f5f 	dmb	sy
}
 8003f5a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f66:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f70:	3304      	adds	r3, #4
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f7c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f82:	613b      	str	r3, [r7, #16]
  return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9a:	4413      	add	r3, r2
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3744      	adds	r7, #68	@ 0x44
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	ffffe000 	.word	0xffffe000

08003fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	@ 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	e175      	b.n	80042cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f040 8164 	bne.w	80042c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d005      	beq.n	8004016 <HAL_GPIO_Init+0x56>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d130      	bne.n	8004078 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800404c:	2201      	movs	r2, #1
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 0201 	and.w	r2, r3, #1
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b03      	cmp	r3, #3
 8004082:	d017      	beq.n	80040b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	2203      	movs	r2, #3
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0303 	and.w	r3, r3, #3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d123      	bne.n	8004108 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	08da      	lsrs	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3208      	adds	r2, #8
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	220f      	movs	r2, #15
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	08da      	lsrs	r2, r3, #3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3208      	adds	r2, #8
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	2203      	movs	r2, #3
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 0203 	and.w	r2, r3, #3
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80be 	beq.w	80042c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414a:	4b66      	ldr	r3, [pc, #408]	@ (80042e4 <HAL_GPIO_Init+0x324>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414e:	4a65      	ldr	r2, [pc, #404]	@ (80042e4 <HAL_GPIO_Init+0x324>)
 8004150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004154:	6453      	str	r3, [r2, #68]	@ 0x44
 8004156:	4b63      	ldr	r3, [pc, #396]	@ (80042e4 <HAL_GPIO_Init+0x324>)
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004162:	4a61      	ldr	r2, [pc, #388]	@ (80042e8 <HAL_GPIO_Init+0x328>)
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	3302      	adds	r3, #2
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a58      	ldr	r2, [pc, #352]	@ (80042ec <HAL_GPIO_Init+0x32c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d037      	beq.n	80041fe <HAL_GPIO_Init+0x23e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a57      	ldr	r2, [pc, #348]	@ (80042f0 <HAL_GPIO_Init+0x330>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_GPIO_Init+0x23a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a56      	ldr	r2, [pc, #344]	@ (80042f4 <HAL_GPIO_Init+0x334>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <HAL_GPIO_Init+0x236>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a55      	ldr	r2, [pc, #340]	@ (80042f8 <HAL_GPIO_Init+0x338>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d025      	beq.n	80041f2 <HAL_GPIO_Init+0x232>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a54      	ldr	r2, [pc, #336]	@ (80042fc <HAL_GPIO_Init+0x33c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x22e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a53      	ldr	r2, [pc, #332]	@ (8004300 <HAL_GPIO_Init+0x340>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x22a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a52      	ldr	r2, [pc, #328]	@ (8004304 <HAL_GPIO_Init+0x344>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x226>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a51      	ldr	r2, [pc, #324]	@ (8004308 <HAL_GPIO_Init+0x348>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x222>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a50      	ldr	r2, [pc, #320]	@ (800430c <HAL_GPIO_Init+0x34c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x21e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004310 <HAL_GPIO_Init+0x350>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x21a>
 80041d6:	2309      	movs	r3, #9
 80041d8:	e012      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041da:	230a      	movs	r3, #10
 80041dc:	e010      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041de:	2308      	movs	r3, #8
 80041e0:	e00e      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041e2:	2307      	movs	r3, #7
 80041e4:	e00c      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041e6:	2306      	movs	r3, #6
 80041e8:	e00a      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041ea:	2305      	movs	r3, #5
 80041ec:	e008      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041ee:	2304      	movs	r3, #4
 80041f0:	e006      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e004      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e002      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <HAL_GPIO_Init+0x240>
 80041fe:	2300      	movs	r3, #0
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	f002 0203 	and.w	r2, r2, #3
 8004206:	0092      	lsls	r2, r2, #2
 8004208:	4093      	lsls	r3, r2
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004210:	4935      	ldr	r1, [pc, #212]	@ (80042e8 <HAL_GPIO_Init+0x328>)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	089b      	lsrs	r3, r3, #2
 8004216:	3302      	adds	r3, #2
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800421e:	4b3d      	ldr	r3, [pc, #244]	@ (8004314 <HAL_GPIO_Init+0x354>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004242:	4a34      	ldr	r2, [pc, #208]	@ (8004314 <HAL_GPIO_Init+0x354>)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004248:	4b32      	ldr	r3, [pc, #200]	@ (8004314 <HAL_GPIO_Init+0x354>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800426c:	4a29      	ldr	r2, [pc, #164]	@ (8004314 <HAL_GPIO_Init+0x354>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004272:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <HAL_GPIO_Init+0x354>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004296:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_GPIO_Init+0x354>)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800429c:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_GPIO_Init+0x354>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042c0:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <HAL_GPIO_Init+0x354>)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	f67f ae86 	bls.w	8003fe0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3724      	adds	r7, #36	@ 0x24
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40013800 	.word	0x40013800
 80042ec:	40020000 	.word	0x40020000
 80042f0:	40020400 	.word	0x40020400
 80042f4:	40020800 	.word	0x40020800
 80042f8:	40020c00 	.word	0x40020c00
 80042fc:	40021000 	.word	0x40021000
 8004300:	40021400 	.word	0x40021400
 8004304:	40021800 	.word	0x40021800
 8004308:	40021c00 	.word	0x40021c00
 800430c:	40022000 	.word	0x40022000
 8004310:	40022400 	.word	0x40022400
 8004314:	40013c00 	.word	0x40013c00

08004318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	807b      	strh	r3, [r7, #2]
 8004324:	4613      	mov	r3, r2
 8004326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004328:	787b      	ldrb	r3, [r7, #1]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004334:	e003      	b.n	800433e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004336:	887b      	ldrh	r3, [r7, #2]
 8004338:	041a      	lsls	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	619a      	str	r2, [r3, #24]
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0d2      	b.n	8004504 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd f8f0 	bl	8001558 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69d9      	ldr	r1, [r3, #28]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b60      	ldr	r3, [pc, #384]	@ (800450c <HAL_I2S_Init+0x1c0>)
 800438c:	400b      	ands	r3, r1
 800438e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2202      	movs	r2, #2
 8004396:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d067      	beq.n	8004470 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80043a8:	2310      	movs	r3, #16
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e001      	b.n	80043b2 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80043ae:	2320      	movs	r3, #32
 80043b0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d802      	bhi.n	80043c0 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d102      	bne.n	80043ce <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80043c8:	4b51      	ldr	r3, [pc, #324]	@ (8004510 <HAL_I2S_Init+0x1c4>)
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	e003      	b.n	80043d6 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f8a2 	bl	8004518 <I2S_GetClockFreq>
 80043d4:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043de:	d125      	bne.n	800442c <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	461a      	mov	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	3305      	adds	r3, #5
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	e01f      	b.n	800444a <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	fbb2 f2f3 	udiv	r2, r2, r3
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	461a      	mov	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	fbb2 f3f3 	udiv	r3, r2, r3
 8004426:	3305      	adds	r3, #5
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e00e      	b.n	800444a <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	fbb2 f2f3 	udiv	r2, r2, r3
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	461a      	mov	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	3305      	adds	r3, #5
 8004448:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4a31      	ldr	r2, [pc, #196]	@ (8004514 <HAL_I2S_Init+0x1c8>)
 800444e:	fba2 2303 	umull	r2, r3, r2, r3
 8004452:	08db      	lsrs	r3, r3, #3
 8004454:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e003      	b.n	8004478 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004470:	2302      	movs	r3, #2
 8004472:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d902      	bls.n	8004484 <HAL_I2S_Init+0x138>
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2bff      	cmp	r3, #255	@ 0xff
 8004482:	d907      	bls.n	8004494 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004488:	f043 0210 	orr.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	63da      	str	r2, [r3, #60]	@ 0x3c
    return  HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e037      	b.n	8004504 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	ea42 0103 	orr.w	r1, r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69fa      	ldr	r2, [r7, #28]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	4b17      	ldr	r3, [pc, #92]	@ (800450c <HAL_I2S_Init+0x1c0>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6851      	ldr	r1, [r2, #4]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68d2      	ldr	r2, [r2, #12]
 80044c0:	4311      	orrs	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6992      	ldr	r2, [r2, #24]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b30      	cmp	r3, #48	@ 0x30
 80044da:	d003      	beq.n	80044e4 <HAL_I2S_Init+0x198>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2bb0      	cmp	r3, #176	@ 0xb0
 80044e2:	d107      	bne.n	80044f4 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	fffff040 	.word	0xfffff040
 8004510:	00bb8000 	.word	0x00bb8000
 8004514:	cccccccd 	.word	0xcccccccd

08004518 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d02d      	beq.n	8004584 <I2S_GetClockFreq+0x6c>
 8004528:	2b02      	cmp	r3, #2
 800452a:	d12e      	bne.n	800458a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800452c:	4b1c      	ldr	r3, [pc, #112]	@ (80045a0 <I2S_GetClockFreq+0x88>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d108      	bne.n	800454a <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004538:	4b19      	ldr	r3, [pc, #100]	@ (80045a0 <I2S_GetClockFreq+0x88>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004540:	4a18      	ldr	r2, [pc, #96]	@ (80045a4 <I2S_GetClockFreq+0x8c>)
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e007      	b.n	800455a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800454a:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <I2S_GetClockFreq+0x88>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004552:	4a15      	ldr	r2, [pc, #84]	@ (80045a8 <I2S_GetClockFreq+0x90>)
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 800455a:	4b11      	ldr	r3, [pc, #68]	@ (80045a0 <I2S_GetClockFreq+0x88>)
 800455c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004560:	0f1b      	lsrs	r3, r3, #28
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8004568:	4b0d      	ldr	r3, [pc, #52]	@ (80045a0 <I2S_GetClockFreq+0x88>)
 800456a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456e:	099b      	lsrs	r3, r3, #6
 8004570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	fb03 f202 	mul.w	r2, r3, r2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	613b      	str	r3, [r7, #16]

      break;
 8004582:	e005      	b.n	8004590 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <I2S_GetClockFreq+0x94>)
 8004586:	613b      	str	r3, [r7, #16]
      break;
 8004588:	e002      	b.n	8004590 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
      break;
 800458e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8004590:	693b      	ldr	r3, [r7, #16]
}
 8004592:	4618      	mov	r0, r3
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	00f42400 	.word	0x00f42400
 80045a8:	007a1200 	.word	0x007a1200
 80045ac:	00bb8000 	.word	0x00bb8000

080045b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e108      	b.n	80047d4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fd fc29 	bl	8001e34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2203      	movs	r2, #3
 80045e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045f0:	d102      	bne.n	80045f8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f002 fe69 	bl	80072d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	7c1a      	ldrb	r2, [r3, #16]
 800460a:	f88d 2000 	strb.w	r2, [sp]
 800460e:	3304      	adds	r3, #4
 8004610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004612:	f002 fe05 	bl	8007220 <USB_CoreInit>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0d5      	b.n	80047d4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f002 fe61 	bl	80072f6 <USB_SetCurrentMode>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0c6      	b.n	80047d4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e04a      	b.n	80046e2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	3315      	adds	r3, #21
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3314      	adds	r3, #20
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	b298      	uxth	r0, r3
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	332e      	adds	r3, #46	@ 0x2e
 8004688:	4602      	mov	r2, r0
 800468a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	3318      	adds	r3, #24
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	331c      	adds	r3, #28
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046b4:	7bfa      	ldrb	r2, [r7, #15]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	3320      	adds	r3, #32
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	3324      	adds	r3, #36	@ 0x24
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	3301      	adds	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	791b      	ldrb	r3, [r3, #4]
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d3af      	bcc.n	800464c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	e044      	b.n	800477c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800474a:	7bfa      	ldrb	r2, [r7, #15]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	3301      	adds	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	791b      	ldrb	r3, [r3, #4]
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	429a      	cmp	r2, r3
 8004784:	d3b5      	bcc.n	80046f2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	7c1a      	ldrb	r2, [r3, #16]
 800478e:	f88d 2000 	strb.w	r2, [sp]
 8004792:	3304      	adds	r3, #4
 8004794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004796:	f002 fdfb 	bl	8007390 <USB_DevInit>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e013      	b.n	80047d4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7b1b      	ldrb	r3, [r3, #12]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d102      	bne.n	80047c8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f80a 	bl	80047dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f002 ffb6 	bl	800773e <USB_DevDisconnect>

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800480a:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_PCDEx_ActivateLPM+0x44>)
 800480c:	4313      	orrs	r3, r2
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	10000003 	.word	0x10000003

08004824 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a04      	ldr	r2, [pc, #16]	@ (8004840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004832:	6013      	str	r3, [r2, #0]
}
 8004834:	bf00      	nop
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40007000 	.word	0x40007000

08004844 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4b23      	ldr	r3, [pc, #140]	@ (80048dc <HAL_PWREx_EnableOverDrive+0x98>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	4a22      	ldr	r2, [pc, #136]	@ (80048dc <HAL_PWREx_EnableOverDrive+0x98>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004858:	6413      	str	r3, [r2, #64]	@ 0x40
 800485a:	4b20      	ldr	r3, [pc, #128]	@ (80048dc <HAL_PWREx_EnableOverDrive+0x98>)
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004866:	4b1e      	ldr	r3, [pc, #120]	@ (80048e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004870:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004872:	f7fd fd9b 	bl	80023ac <HAL_GetTick>
 8004876:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004878:	e009      	b.n	800488e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800487a:	f7fd fd97 	bl	80023ac <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004888:	d901      	bls.n	800488e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e022      	b.n	80048d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800488e:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489a:	d1ee      	bne.n	800487a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800489c:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0f      	ldr	r2, [pc, #60]	@ (80048e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048a8:	f7fd fd80 	bl	80023ac <HAL_GetTick>
 80048ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048ae:	e009      	b.n	80048c4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048b0:	f7fd fd7c 	bl	80023ac <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048be:	d901      	bls.n	80048c4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e007      	b.n	80048d4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048c4:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048d0:	d1ee      	bne.n	80048b0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40007000 	.word	0x40007000

080048e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80048ec:	2300      	movs	r3, #0
 80048ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e29b      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8087 	beq.w	8004a16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004908:	4b96      	ldr	r3, [pc, #600]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b04      	cmp	r3, #4
 8004912:	d00c      	beq.n	800492e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004914:	4b93      	ldr	r3, [pc, #588]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 030c 	and.w	r3, r3, #12
 800491c:	2b08      	cmp	r3, #8
 800491e:	d112      	bne.n	8004946 <HAL_RCC_OscConfig+0x62>
 8004920:	4b90      	ldr	r3, [pc, #576]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800492c:	d10b      	bne.n	8004946 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492e:	4b8d      	ldr	r3, [pc, #564]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d06c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x130>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d168      	bne.n	8004a14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e275      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494e:	d106      	bne.n	800495e <HAL_RCC_OscConfig+0x7a>
 8004950:	4b84      	ldr	r3, [pc, #528]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a83      	ldr	r2, [pc, #524]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e02e      	b.n	80049bc <HAL_RCC_OscConfig+0xd8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0x9c>
 8004966:	4b7f      	ldr	r3, [pc, #508]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 800496c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b7c      	ldr	r3, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7b      	ldr	r2, [pc, #492]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004978:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xd8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0xc0>
 800498a:	4b76      	ldr	r3, [pc, #472]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a75      	ldr	r2, [pc, #468]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b73      	ldr	r3, [pc, #460]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a72      	ldr	r2, [pc, #456]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xd8>
 80049a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd fcf2 	bl	80023ac <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fd fcee 	bl	80023ac <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	@ 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e229      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b61      	ldr	r3, [pc, #388]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xe8>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd fcde 	bl	80023ac <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fd fcda 	bl	80023ac <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	@ 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e215      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	4b57      	ldr	r3, [pc, #348]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x110>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d069      	beq.n	8004af6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a22:	4b50      	ldr	r3, [pc, #320]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d11c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x190>
 8004a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a46:	4b47      	ldr	r3, [pc, #284]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_RCC_OscConfig+0x17a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e1e9      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b41      	ldr	r3, [pc, #260]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	493d      	ldr	r1, [pc, #244]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a72:	e040      	b.n	8004af6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d023      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7c:	4b39      	ldr	r3, [pc, #228]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a38      	ldr	r2, [pc, #224]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fd fc90 	bl	80023ac <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fd fc8c 	bl	80023ac <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e1c7      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa2:	4b30      	ldr	r3, [pc, #192]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aae:	4b2d      	ldr	r3, [pc, #180]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4929      	ldr	r1, [pc, #164]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
 8004ac2:	e018      	b.n	8004af6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac4:	4b27      	ldr	r3, [pc, #156]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a26      	ldr	r2, [pc, #152]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fc6c 	bl	80023ac <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fd fc68 	bl	80023ac <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1a3      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d038      	beq.n	8004b74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d019      	beq.n	8004b3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0a:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b0e:	4a15      	ldr	r2, [pc, #84]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b16:	f7fd fc49 	bl	80023ac <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1e:	f7fd fc45 	bl	80023ac <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e180      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b30:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x23a>
 8004b3c:	e01a      	b.n	8004b74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b3e:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b42:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <HAL_RCC_OscConfig+0x280>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fd fc2f 	bl	80023ac <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b52:	f7fd fc2b 	bl	80023ac <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d903      	bls.n	8004b68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e166      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
 8004b64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	4b92      	ldr	r3, [pc, #584]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1ee      	bne.n	8004b52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a4 	beq.w	8004cca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b82:	4b8c      	ldr	r3, [pc, #560]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	4b89      	ldr	r3, [pc, #548]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	4a88      	ldr	r2, [pc, #544]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b9a:	4b86      	ldr	r3, [pc, #536]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004baa:	4b83      	ldr	r3, [pc, #524]	@ (8004db8 <HAL_RCC_OscConfig+0x4d4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d118      	bne.n	8004be8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004bb6:	4b80      	ldr	r3, [pc, #512]	@ (8004db8 <HAL_RCC_OscConfig+0x4d4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a7f      	ldr	r2, [pc, #508]	@ (8004db8 <HAL_RCC_OscConfig+0x4d4>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fbf3 	bl	80023ac <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bca:	f7fd fbef 	bl	80023ac <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b64      	cmp	r3, #100	@ 0x64
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e12a      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bdc:	4b76      	ldr	r3, [pc, #472]	@ (8004db8 <HAL_RCC_OscConfig+0x4d4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d106      	bne.n	8004bfe <HAL_RCC_OscConfig+0x31a>
 8004bf0:	4b70      	ldr	r3, [pc, #448]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	4a6f      	ldr	r2, [pc, #444]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfc:	e02d      	b.n	8004c5a <HAL_RCC_OscConfig+0x376>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x33c>
 8004c06:	4b6b      	ldr	r3, [pc, #428]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c12:	4b68      	ldr	r3, [pc, #416]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	4a67      	ldr	r2, [pc, #412]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c1e:	e01c      	b.n	8004c5a <HAL_RCC_OscConfig+0x376>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	d10c      	bne.n	8004c42 <HAL_RCC_OscConfig+0x35e>
 8004c28:	4b62      	ldr	r3, [pc, #392]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2c:	4a61      	ldr	r2, [pc, #388]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c2e:	f043 0304 	orr.w	r3, r3, #4
 8004c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c34:	4b5f      	ldr	r3, [pc, #380]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c38:	4a5e      	ldr	r2, [pc, #376]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c40:	e00b      	b.n	8004c5a <HAL_RCC_OscConfig+0x376>
 8004c42:	4b5c      	ldr	r3, [pc, #368]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c46:	4a5b      	ldr	r2, [pc, #364]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c4e:	4b59      	ldr	r3, [pc, #356]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c52:	4a58      	ldr	r2, [pc, #352]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d015      	beq.n	8004c8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fd fba3 	bl	80023ac <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6a:	f7fd fb9f 	bl	80023ac <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0d8      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c80:	4b4c      	ldr	r3, [pc, #304]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ee      	beq.n	8004c6a <HAL_RCC_OscConfig+0x386>
 8004c8c:	e014      	b.n	8004cb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fb8d 	bl	80023ac <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fd fb89 	bl	80023ac <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0c2      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cac:	4b41      	ldr	r3, [pc, #260]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ee      	bne.n	8004c96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d105      	bne.n	8004cca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	4a3c      	ldr	r2, [pc, #240]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80ae 	beq.w	8004e30 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cd4:	4b37      	ldr	r3, [pc, #220]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 030c 	and.w	r3, r3, #12
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d06d      	beq.n	8004dbc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d14b      	bne.n	8004d80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce8:	4b32      	ldr	r3, [pc, #200]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a31      	ldr	r2, [pc, #196]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fb5a 	bl	80023ac <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fd fb56 	bl	80023ac <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e091      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	4b29      	ldr	r3, [pc, #164]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	019b      	lsls	r3, r3, #6
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	3b01      	subs	r3, #1
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	061b      	lsls	r3, r3, #24
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d44:	071b      	lsls	r3, r3, #28
 8004d46:	491b      	ldr	r1, [pc, #108]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4c:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a18      	ldr	r2, [pc, #96]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004d52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fb28 	bl	80023ac <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fb24 	bl	80023ac <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e05f      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d72:	4b10      	ldr	r3, [pc, #64]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x47c>
 8004d7e:	e057      	b.n	8004e30 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d80:	4b0c      	ldr	r3, [pc, #48]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a0b      	ldr	r2, [pc, #44]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8c:	f7fd fb0e 	bl	80023ac <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd fb0a 	bl	80023ac <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e045      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	4b03      	ldr	r3, [pc, #12]	@ (8004db4 <HAL_RCC_OscConfig+0x4d0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f0      	bne.n	8004d94 <HAL_RCC_OscConfig+0x4b0>
 8004db2:	e03d      	b.n	8004e30 <HAL_RCC_OscConfig+0x54c>
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e3c <HAL_RCC_OscConfig+0x558>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d030      	beq.n	8004e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d129      	bne.n	8004e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d122      	bne.n	8004e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004dec:	4013      	ands	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004df2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d119      	bne.n	8004e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e02:	085b      	lsrs	r3, r3, #1
 8004e04:	3b01      	subs	r3, #1
 8004e06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d10f      	bne.n	8004e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e26:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800

08004e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0d0      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e58:	4b6a      	ldr	r3, [pc, #424]	@ (8005004 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d910      	bls.n	8004e88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e66:	4b67      	ldr	r3, [pc, #412]	@ (8005004 <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 020f 	bic.w	r2, r3, #15
 8004e6e:	4965      	ldr	r1, [pc, #404]	@ (8005004 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b63      	ldr	r3, [pc, #396]	@ (8005004 <HAL_RCC_ClockConfig+0x1c4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0b8      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d020      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ea0:	4b59      	ldr	r3, [pc, #356]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a58      	ldr	r2, [pc, #352]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004eaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eb8:	4b53      	ldr	r3, [pc, #332]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4a52      	ldr	r2, [pc, #328]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004ebe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ec2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec4:	4b50      	ldr	r3, [pc, #320]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	494d      	ldr	r1, [pc, #308]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d040      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d107      	bne.n	8004efa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eea:	4b47      	ldr	r3, [pc, #284]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d115      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e07f      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d107      	bne.n	8004f12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f02:	4b41      	ldr	r3, [pc, #260]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e073      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f12:	4b3d      	ldr	r3, [pc, #244]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e06b      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f22:	4b39      	ldr	r3, [pc, #228]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f023 0203 	bic.w	r2, r3, #3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4936      	ldr	r1, [pc, #216]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f34:	f7fd fa3a 	bl	80023ac <HAL_GetTick>
 8004f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f3c:	f7fd fa36 	bl	80023ac <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e053      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f52:	4b2d      	ldr	r3, [pc, #180]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 020c 	and.w	r2, r3, #12
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d1eb      	bne.n	8004f3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f64:	4b27      	ldr	r3, [pc, #156]	@ (8005004 <HAL_RCC_ClockConfig+0x1c4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d210      	bcs.n	8004f94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f72:	4b24      	ldr	r3, [pc, #144]	@ (8005004 <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f023 020f 	bic.w	r2, r3, #15
 8004f7a:	4922      	ldr	r1, [pc, #136]	@ (8005004 <HAL_RCC_ClockConfig+0x1c4>)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f82:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <HAL_RCC_ClockConfig+0x1c4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e032      	b.n	8004ffa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fa0:	4b19      	ldr	r3, [pc, #100]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4916      	ldr	r1, [pc, #88]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fbe:	4b12      	ldr	r3, [pc, #72]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	490e      	ldr	r1, [pc, #56]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fd2:	f000 f821 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <HAL_RCC_ClockConfig+0x1c8>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	490a      	ldr	r1, [pc, #40]	@ (800500c <HAL_RCC_ClockConfig+0x1cc>)
 8004fe4:	5ccb      	ldrb	r3, [r1, r3]
 8004fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fea:	4a09      	ldr	r2, [pc, #36]	@ (8005010 <HAL_RCC_ClockConfig+0x1d0>)
 8004fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fee:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <HAL_RCC_ClockConfig+0x1d4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fc fd04 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40023c00 	.word	0x40023c00
 8005008:	40023800 	.word	0x40023800
 800500c:	080188a0 	.word	0x080188a0
 8005010:	20000000 	.word	0x20000000
 8005014:	20000004 	.word	0x20000004

08005018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800501c:	b094      	sub	sp, #80	@ 0x50
 800501e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	647b      	str	r3, [r7, #68]	@ 0x44
 8005024:	2300      	movs	r3, #0
 8005026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005028:	2300      	movs	r3, #0
 800502a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005030:	4b79      	ldr	r3, [pc, #484]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x200>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 030c 	and.w	r3, r3, #12
 8005038:	2b08      	cmp	r3, #8
 800503a:	d00d      	beq.n	8005058 <HAL_RCC_GetSysClockFreq+0x40>
 800503c:	2b08      	cmp	r3, #8
 800503e:	f200 80e1 	bhi.w	8005204 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_RCC_GetSysClockFreq+0x34>
 8005046:	2b04      	cmp	r3, #4
 8005048:	d003      	beq.n	8005052 <HAL_RCC_GetSysClockFreq+0x3a>
 800504a:	e0db      	b.n	8005204 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800504c:	4b73      	ldr	r3, [pc, #460]	@ (800521c <HAL_RCC_GetSysClockFreq+0x204>)
 800504e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005050:	e0db      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005052:	4b73      	ldr	r3, [pc, #460]	@ (8005220 <HAL_RCC_GetSysClockFreq+0x208>)
 8005054:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005056:	e0d8      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005058:	4b6f      	ldr	r3, [pc, #444]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x200>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005060:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005062:	4b6d      	ldr	r3, [pc, #436]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x200>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d063      	beq.n	8005136 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800506e:	4b6a      	ldr	r3, [pc, #424]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x200>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	099b      	lsrs	r3, r3, #6
 8005074:	2200      	movs	r2, #0
 8005076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005078:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800507a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005080:	633b      	str	r3, [r7, #48]	@ 0x30
 8005082:	2300      	movs	r3, #0
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
 8005086:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800508a:	4622      	mov	r2, r4
 800508c:	462b      	mov	r3, r5
 800508e:	f04f 0000 	mov.w	r0, #0
 8005092:	f04f 0100 	mov.w	r1, #0
 8005096:	0159      	lsls	r1, r3, #5
 8005098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800509c:	0150      	lsls	r0, r2, #5
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4621      	mov	r1, r4
 80050a4:	1a51      	subs	r1, r2, r1
 80050a6:	6139      	str	r1, [r7, #16]
 80050a8:	4629      	mov	r1, r5
 80050aa:	eb63 0301 	sbc.w	r3, r3, r1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050bc:	4659      	mov	r1, fp
 80050be:	018b      	lsls	r3, r1, #6
 80050c0:	4651      	mov	r1, sl
 80050c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050c6:	4651      	mov	r1, sl
 80050c8:	018a      	lsls	r2, r1, #6
 80050ca:	4651      	mov	r1, sl
 80050cc:	ebb2 0801 	subs.w	r8, r2, r1
 80050d0:	4659      	mov	r1, fp
 80050d2:	eb63 0901 	sbc.w	r9, r3, r1
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ea:	4690      	mov	r8, r2
 80050ec:	4699      	mov	r9, r3
 80050ee:	4623      	mov	r3, r4
 80050f0:	eb18 0303 	adds.w	r3, r8, r3
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	462b      	mov	r3, r5
 80050f8:	eb49 0303 	adc.w	r3, r9, r3
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800510a:	4629      	mov	r1, r5
 800510c:	024b      	lsls	r3, r1, #9
 800510e:	4621      	mov	r1, r4
 8005110:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005114:	4621      	mov	r1, r4
 8005116:	024a      	lsls	r2, r1, #9
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511e:	2200      	movs	r2, #0
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005122:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005128:	f7fb f8f2 	bl	8000310 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4613      	mov	r3, r2
 8005132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005134:	e058      	b.n	80051e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005136:	4b38      	ldr	r3, [pc, #224]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x200>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	099b      	lsrs	r3, r3, #6
 800513c:	2200      	movs	r2, #0
 800513e:	4618      	mov	r0, r3
 8005140:	4611      	mov	r1, r2
 8005142:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005146:	623b      	str	r3, [r7, #32]
 8005148:	2300      	movs	r3, #0
 800514a:	627b      	str	r3, [r7, #36]	@ 0x24
 800514c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005150:	4642      	mov	r2, r8
 8005152:	464b      	mov	r3, r9
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	0159      	lsls	r1, r3, #5
 800515e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005162:	0150      	lsls	r0, r2, #5
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4641      	mov	r1, r8
 800516a:	ebb2 0a01 	subs.w	sl, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb63 0b01 	sbc.w	fp, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005180:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005184:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005188:	ebb2 040a 	subs.w	r4, r2, sl
 800518c:	eb63 050b 	sbc.w	r5, r3, fp
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	00eb      	lsls	r3, r5, #3
 800519a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519e:	00e2      	lsls	r2, r4, #3
 80051a0:	4614      	mov	r4, r2
 80051a2:	461d      	mov	r5, r3
 80051a4:	4643      	mov	r3, r8
 80051a6:	18e3      	adds	r3, r4, r3
 80051a8:	603b      	str	r3, [r7, #0]
 80051aa:	464b      	mov	r3, r9
 80051ac:	eb45 0303 	adc.w	r3, r5, r3
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051be:	4629      	mov	r1, r5
 80051c0:	028b      	lsls	r3, r1, #10
 80051c2:	4621      	mov	r1, r4
 80051c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051c8:	4621      	mov	r1, r4
 80051ca:	028a      	lsls	r2, r1, #10
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d2:	2200      	movs	r2, #0
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	61fa      	str	r2, [r7, #28]
 80051d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051dc:	f7fb f898 	bl	8000310 <__aeabi_uldivmod>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4613      	mov	r3, r2
 80051e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80051e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005218 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	3301      	adds	r3, #1
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80051f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005202:	e002      	b.n	800520a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <HAL_RCC_GetSysClockFreq+0x204>)
 8005206:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800520a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800520c:	4618      	mov	r0, r3
 800520e:	3750      	adds	r7, #80	@ 0x50
 8005210:	46bd      	mov	sp, r7
 8005212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	00f42400 	.word	0x00f42400
 8005220:	007a1200 	.word	0x007a1200

08005224 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005228:	4b03      	ldr	r3, [pc, #12]	@ (8005238 <HAL_RCC_GetHCLKFreq+0x14>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20000000 	.word	0x20000000

0800523c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005240:	f7ff fff0 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b05      	ldr	r3, [pc, #20]	@ (800525c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	0a9b      	lsrs	r3, r3, #10
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	4903      	ldr	r1, [pc, #12]	@ (8005260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005258:	4618      	mov	r0, r3
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40023800 	.word	0x40023800
 8005260:	080188b0 	.word	0x080188b0

08005264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005268:	f7ff ffdc 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 800526c:	4602      	mov	r2, r0
 800526e:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	0b5b      	lsrs	r3, r3, #13
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	4903      	ldr	r1, [pc, #12]	@ (8005288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800527a:	5ccb      	ldrb	r3, [r1, r3]
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40023800 	.word	0x40023800
 8005288:	080188b0 	.word	0x080188b0

0800528c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	220f      	movs	r2, #15
 800529a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800529c:	4b12      	ldr	r3, [pc, #72]	@ (80052e8 <HAL_RCC_GetClockConfig+0x5c>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 0203 	and.w	r2, r3, #3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052a8:	4b0f      	ldr	r3, [pc, #60]	@ (80052e8 <HAL_RCC_GetClockConfig+0x5c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052b4:	4b0c      	ldr	r3, [pc, #48]	@ (80052e8 <HAL_RCC_GetClockConfig+0x5c>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80052c0:	4b09      	ldr	r3, [pc, #36]	@ (80052e8 <HAL_RCC_GetClockConfig+0x5c>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	08db      	lsrs	r3, r3, #3
 80052c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052ce:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <HAL_RCC_GetClockConfig+0x60>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 020f 	and.w	r2, r3, #15
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	601a      	str	r2, [r3, #0]
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40023c00 	.word	0x40023c00

080052f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005318:	4b69      	ldr	r3, [pc, #420]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a68      	ldr	r2, [pc, #416]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005322:	6093      	str	r3, [r2, #8]
 8005324:	4b66      	ldr	r3, [pc, #408]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532c:	4964      	ldr	r1, [pc, #400]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532e:	4313      	orrs	r3, r2
 8005330:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800533a:	2301      	movs	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d017      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800534a:	4b5d      	ldr	r3, [pc, #372]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005350:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005358:	4959      	ldr	r1, [pc, #356]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005364:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005368:	d101      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800536a:	2301      	movs	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005376:	2301      	movs	r3, #1
 8005378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d017      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005386:	4b4e      	ldr	r3, [pc, #312]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800538c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	494a      	ldr	r1, [pc, #296]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a4:	d101      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053a6:	2301      	movs	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80053b2:	2301      	movs	r3, #1
 80053b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 808b 	beq.w	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d4:	4b3a      	ldr	r3, [pc, #232]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	4a39      	ldr	r2, [pc, #228]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053de:	6413      	str	r3, [r2, #64]	@ 0x40
 80053e0:	4b37      	ldr	r3, [pc, #220]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053ec:	4b35      	ldr	r3, [pc, #212]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a34      	ldr	r2, [pc, #208]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f8:	f7fc ffd8 	bl	80023ac <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005400:	f7fc ffd4 	bl	80023ac <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	@ 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e38f      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005412:	4b2c      	ldr	r3, [pc, #176]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800541e:	4b28      	ldr	r3, [pc, #160]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005426:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d035      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	429a      	cmp	r2, r3
 800543a:	d02e      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005444:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005446:	4b1e      	ldr	r3, [pc, #120]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005450:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005452:	4b1b      	ldr	r3, [pc, #108]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	4a1a      	ldr	r2, [pc, #104]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800545c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800545e:	4a18      	ldr	r2, [pc, #96]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005464:	4b16      	ldr	r3, [pc, #88]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b01      	cmp	r3, #1
 800546e:	d114      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fc ff9c 	bl	80023ac <HAL_GetTick>
 8005474:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005476:	e00a      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005478:	f7fc ff98 	bl	80023ac <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e351      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548e:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0ee      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054a6:	d111      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80054a8:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80054b4:	4b04      	ldr	r3, [pc, #16]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80054b6:	400b      	ands	r3, r1
 80054b8:	4901      	ldr	r1, [pc, #4]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
 80054be:	e00b      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054c0:	40023800 	.word	0x40023800
 80054c4:	40007000 	.word	0x40007000
 80054c8:	0ffffcff 	.word	0x0ffffcff
 80054cc:	4bac      	ldr	r3, [pc, #688]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4aab      	ldr	r2, [pc, #684]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054d6:	6093      	str	r3, [r2, #8]
 80054d8:	4ba9      	ldr	r3, [pc, #676]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e4:	49a6      	ldr	r1, [pc, #664]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054f6:	4ba2      	ldr	r3, [pc, #648]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054fc:	4aa0      	ldr	r2, [pc, #640]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005502:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005506:	4b9e      	ldr	r3, [pc, #632]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005508:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	499b      	ldr	r1, [pc, #620]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005524:	4b96      	ldr	r3, [pc, #600]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005532:	4993      	ldr	r1, [pc, #588]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005546:	4b8e      	ldr	r3, [pc, #568]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005554:	498a      	ldr	r1, [pc, #552]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005568:	4b85      	ldr	r3, [pc, #532]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005576:	4982      	ldr	r1, [pc, #520]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800558a:	4b7d      	ldr	r3, [pc, #500]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800558c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005590:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005598:	4979      	ldr	r1, [pc, #484]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ac:	4b74      	ldr	r3, [pc, #464]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b2:	f023 0203 	bic.w	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	4971      	ldr	r1, [pc, #452]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d4:	f023 020c 	bic.w	r2, r3, #12
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055dc:	4968      	ldr	r1, [pc, #416]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055f0:	4b63      	ldr	r3, [pc, #396]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055fe:	4960      	ldr	r1, [pc, #384]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005612:	4b5b      	ldr	r3, [pc, #364]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005618:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005620:	4957      	ldr	r1, [pc, #348]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005634:	4b52      	ldr	r3, [pc, #328]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005642:	494f      	ldr	r1, [pc, #316]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005656:	4b4a      	ldr	r3, [pc, #296]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005664:	4946      	ldr	r1, [pc, #280]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005678:	4b41      	ldr	r3, [pc, #260]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800567e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005686:	493e      	ldr	r1, [pc, #248]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800569a:	4b39      	ldr	r3, [pc, #228]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a8:	4935      	ldr	r1, [pc, #212]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056bc:	4b30      	ldr	r3, [pc, #192]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ca:	492d      	ldr	r1, [pc, #180]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d011      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056de:	4b28      	ldr	r3, [pc, #160]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056ec:	4924      	ldr	r1, [pc, #144]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056fc:	d101      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056fe:	2301      	movs	r3, #1
 8005700:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0308 	and.w	r3, r3, #8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800570e:	2301      	movs	r3, #1
 8005710:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800571e:	4b18      	ldr	r3, [pc, #96]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005724:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572c:	4914      	ldr	r1, [pc, #80]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00b      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005740:	4b0f      	ldr	r3, [pc, #60]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005746:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005750:	490b      	ldr	r1, [pc, #44]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00f      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005764:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005774:	4902      	ldr	r1, [pc, #8]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800577c:	e002      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005790:	4b8a      	ldr	r3, [pc, #552]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005796:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a0:	4986      	ldr	r1, [pc, #536]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00b      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80057b4:	4b81      	ldr	r3, [pc, #516]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057c4:	497d      	ldr	r1, [pc, #500]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d006      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80d6 	beq.w	800598c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057e0:	4b76      	ldr	r3, [pc, #472]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a75      	ldr	r2, [pc, #468]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ec:	f7fc fdde 	bl	80023ac <HAL_GetTick>
 80057f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057f4:	f7fc fdda 	bl	80023ac <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	@ 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e195      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005806:	4b6d      	ldr	r3, [pc, #436]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d021      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11d      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005826:	4b65      	ldr	r3, [pc, #404]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005834:	4b61      	ldr	r3, [pc, #388]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800583a:	0e1b      	lsrs	r3, r3, #24
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	019a      	lsls	r2, r3, #6
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	061b      	lsls	r3, r3, #24
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	4958      	ldr	r1, [pc, #352]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005880:	2b00      	cmp	r3, #0
 8005882:	d02e      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800588c:	d129      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800588e:	4b4b      	ldr	r3, [pc, #300]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800589c:	4b47      	ldr	r3, [pc, #284]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800589e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058a2:	0f1b      	lsrs	r3, r3, #28
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	019a      	lsls	r2, r3, #6
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	061b      	lsls	r3, r3, #24
 80058bc:	431a      	orrs	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	071b      	lsls	r3, r3, #28
 80058c2:	493e      	ldr	r1, [pc, #248]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058ca:	4b3c      	ldr	r3, [pc, #240]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058d0:	f023 021f 	bic.w	r2, r3, #31
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	3b01      	subs	r3, #1
 80058da:	4938      	ldr	r1, [pc, #224]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01d      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058ee:	4b33      	ldr	r3, [pc, #204]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058f4:	0e1b      	lsrs	r3, r3, #24
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058fc:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005902:	0f1b      	lsrs	r3, r3, #28
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	019a      	lsls	r2, r3, #6
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	431a      	orrs	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	431a      	orrs	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	071b      	lsls	r3, r3, #28
 8005922:	4926      	ldr	r1, [pc, #152]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d011      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	019a      	lsls	r2, r3, #6
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	041b      	lsls	r3, r3, #16
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	061b      	lsls	r3, r3, #24
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	071b      	lsls	r3, r3, #28
 8005952:	491a      	ldr	r1, [pc, #104]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800595a:	4b18      	ldr	r3, [pc, #96]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a17      	ldr	r2, [pc, #92]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005960:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005966:	f7fc fd21 	bl	80023ac <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800596c:	e008      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800596e:	f7fc fd1d 	bl	80023ac <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b64      	cmp	r3, #100	@ 0x64
 800597a:	d901      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e0d8      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005980:	4b0e      	ldr	r3, [pc, #56]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b01      	cmp	r3, #1
 8005990:	f040 80ce 	bne.w	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005994:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a08      	ldr	r2, [pc, #32]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800599a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800599e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a0:	f7fc fd04 	bl	80023ac <HAL_GetTick>
 80059a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059a6:	e00b      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059a8:	f7fc fd00 	bl	80023ac <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	@ 0x64
 80059b4:	d904      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e0bb      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059c0:	4b5e      	ldr	r3, [pc, #376]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059cc:	d0ec      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d02e      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d12a      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059f6:	4b51      	ldr	r3, [pc, #324]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fc:	0c1b      	lsrs	r3, r3, #16
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a04:	4b4d      	ldr	r3, [pc, #308]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	0f1b      	lsrs	r3, r3, #28
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	019a      	lsls	r2, r3, #6
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	071b      	lsls	r3, r3, #28
 8005a2a:	4944      	ldr	r1, [pc, #272]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a32:	4b42      	ldr	r3, [pc, #264]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a38:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	493d      	ldr	r1, [pc, #244]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d022      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a60:	d11d      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a62:	4b36      	ldr	r3, [pc, #216]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a68:	0e1b      	lsrs	r3, r3, #24
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a70:	4b32      	ldr	r3, [pc, #200]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	0f1b      	lsrs	r3, r3, #28
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	019a      	lsls	r2, r3, #6
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	061b      	lsls	r3, r3, #24
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	071b      	lsls	r3, r3, #28
 8005a96:	4929      	ldr	r1, [pc, #164]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d028      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aaa:	4b24      	ldr	r3, [pc, #144]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab0:	0e1b      	lsrs	r3, r3, #24
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ab8:	4b20      	ldr	r3, [pc, #128]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abe:	0c1b      	lsrs	r3, r3, #16
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	019a      	lsls	r2, r3, #6
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	061b      	lsls	r3, r3, #24
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	071b      	lsls	r3, r3, #28
 8005ade:	4917      	ldr	r1, [pc, #92]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ae6:	4b15      	ldr	r3, [pc, #84]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af4:	4911      	ldr	r1, [pc, #68]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005afc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a0e      	ldr	r2, [pc, #56]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b08:	f7fc fc50 	bl	80023ac <HAL_GetTick>
 8005b0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b10:	f7fc fc4c 	bl	80023ac <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	@ 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e007      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b22:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b2e:	d1ef      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40023800 	.word	0x40023800

08005b40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e01c      	b.n	8005b8c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	795b      	ldrb	r3, [r3, #5]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d105      	bne.n	8005b68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fb fe6e 	bl	8001844 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0204 	orr.w	r2, r2, #4
 8005b7c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e09d      	b.n	8005ce2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bb6:	d009      	beq.n	8005bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	61da      	str	r2, [r3, #28]
 8005bbe:	e005      	b.n	8005bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb fe9e 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c0c:	d902      	bls.n	8005c14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e002      	b.n	8005c1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c22:	d007      	beq.n	8005c34 <HAL_SPI_Init+0xa0>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c2c:	d002      	beq.n	8005c34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c76:	ea42 0103 	orr.w	r1, r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	f003 0204 	and.w	r2, r3, #4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005cb0:	ea42 0103 	orr.w	r1, r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b088      	sub	sp, #32
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	603b      	str	r3, [r7, #0]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cfa:	f7fc fb57 	bl	80023ac <HAL_GetTick>
 8005cfe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d001      	beq.n	8005d14 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
 8005d12:	e15c      	b.n	8005fce <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <HAL_SPI_Transmit+0x36>
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e154      	b.n	8005fce <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_SPI_Transmit+0x48>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e14d      	b.n	8005fce <HAL_SPI_Transmit+0x2e4>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	88fa      	ldrh	r2, [r7, #6]
 8005d52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d84:	d10f      	bne.n	8005da6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005da4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db0:	2b40      	cmp	r3, #64	@ 0x40
 8005db2:	d007      	beq.n	8005dc4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dcc:	d952      	bls.n	8005e74 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_SPI_Transmit+0xf2>
 8005dd6:	8b7b      	ldrh	r3, [r7, #26]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d145      	bne.n	8005e68 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	881a      	ldrh	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dec:	1c9a      	adds	r2, r3, #2
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e00:	e032      	b.n	8005e68 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d112      	bne.n	8005e36 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e14:	881a      	ldrh	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	1c9a      	adds	r2, r3, #2
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e34:	e018      	b.n	8005e68 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e36:	f7fc fab9 	bl	80023ac <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d803      	bhi.n	8005e4e <HAL_SPI_Transmit+0x164>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d102      	bne.n	8005e54 <HAL_SPI_Transmit+0x16a>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e0b2      	b.n	8005fce <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1c7      	bne.n	8005e02 <HAL_SPI_Transmit+0x118>
 8005e72:	e083      	b.n	8005f7c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_SPI_Transmit+0x198>
 8005e7c:	8b7b      	ldrh	r3, [r7, #26]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d177      	bne.n	8005f72 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d912      	bls.n	8005eb2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	881a      	ldrh	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	1c9a      	adds	r2, r3, #2
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	3b02      	subs	r3, #2
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eb0:	e05f      	b.n	8005f72 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ed8:	e04b      	b.n	8005f72 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d12b      	bne.n	8005f40 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d912      	bls.n	8005f18 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef6:	881a      	ldrh	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f02:	1c9a      	adds	r2, r3, #2
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b02      	subs	r3, #2
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f16:	e02c      	b.n	8005f72 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	7812      	ldrb	r2, [r2, #0]
 8005f24:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f3e:	e018      	b.n	8005f72 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f40:	f7fc fa34 	bl	80023ac <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d803      	bhi.n	8005f58 <HAL_SPI_Transmit+0x26e>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d102      	bne.n	8005f5e <HAL_SPI_Transmit+0x274>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e02d      	b.n	8005fce <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1ae      	bne.n	8005eda <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f947 	bl	8006214 <SPI_EndRxTxTransaction>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
  }
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fe8:	f7fc f9e0 	bl	80023ac <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ff8:	f7fc f9d8 	bl	80023ac <HAL_GetTick>
 8005ffc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ffe:	4b39      	ldr	r3, [pc, #228]	@ (80060e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	015b      	lsls	r3, r3, #5
 8006004:	0d1b      	lsrs	r3, r3, #20
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	fb02 f303 	mul.w	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800600e:	e055      	b.n	80060bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006016:	d051      	beq.n	80060bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006018:	f7fc f9c8 	bl	80023ac <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	429a      	cmp	r2, r3
 8006026:	d902      	bls.n	800602e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d13d      	bne.n	80060aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800603c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006046:	d111      	bne.n	800606c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006050:	d004      	beq.n	800605c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800605a:	d107      	bne.n	800606c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800606a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006074:	d10f      	bne.n	8006096 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e018      	b.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	e002      	b.n	80060bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4013      	ands	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d19a      	bne.n	8006010 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000000 	.word	0x20000000

080060e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	@ 0x28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060fa:	f7fc f957 	bl	80023ac <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	4413      	add	r3, r2
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800610a:	f7fc f94f 	bl	80023ac <HAL_GetTick>
 800610e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006118:	4b3d      	ldr	r3, [pc, #244]	@ (8006210 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	00da      	lsls	r2, r3, #3
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	0d1b      	lsrs	r3, r3, #20
 8006128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612a:	fb02 f303 	mul.w	r3, r2, r3
 800612e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006130:	e061      	b.n	80061f6 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006138:	d107      	bne.n	800614a <SPI_WaitFifoStateUntilTimeout+0x62>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006148:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006150:	d051      	beq.n	80061f6 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006152:	f7fc f92b 	bl	80023ac <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615e:	429a      	cmp	r2, r3
 8006160:	d902      	bls.n	8006168 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d13d      	bne.n	80061e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006176:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006180:	d111      	bne.n	80061a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800618a:	d004      	beq.n	8006196 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006194:	d107      	bne.n	80061a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ae:	d10f      	bne.n	80061d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e011      	b.n	8006208 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ee:	e002      	b.n	80061f6 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d195      	bne.n	8006132 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3728      	adds	r7, #40	@ 0x28
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000000 	.word	0x20000000

08006214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2200      	movs	r2, #0
 8006228:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff ff5b 	bl	80060e8 <SPI_WaitFifoStateUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e046      	b.n	80062d6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006248:	4b25      	ldr	r3, [pc, #148]	@ (80062e0 <SPI_EndRxTxTransaction+0xcc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a25      	ldr	r2, [pc, #148]	@ (80062e4 <SPI_EndRxTxTransaction+0xd0>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	0d5b      	lsrs	r3, r3, #21
 8006254:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006258:	fb02 f303 	mul.w	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006266:	d112      	bne.n	800628e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	2180      	movs	r1, #128	@ 0x80
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff feb0 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d016      	beq.n	80062ac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e023      	b.n	80062d6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	3b01      	subs	r3, #1
 8006298:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a4:	2b80      	cmp	r3, #128	@ 0x80
 80062a6:	d0f2      	beq.n	800628e <SPI_EndRxTxTransaction+0x7a>
 80062a8:	e000      	b.n	80062ac <SPI_EndRxTxTransaction+0x98>
        break;
 80062aa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f7ff ff15 	bl	80060e8 <SPI_WaitFifoStateUntilTimeout>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d007      	beq.n	80062d4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e000      	b.n	80062d6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000000 	.word	0x20000000
 80062e4:	165e9f81 	.word	0x165e9f81

080062e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e049      	b.n	800638e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f841 	bl	8006396 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f000 f9e8 	bl	80066fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d001      	beq.n	80063c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e054      	b.n	800646e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a26      	ldr	r2, [pc, #152]	@ (800647c <HAL_TIM_Base_Start_IT+0xd0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d022      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ee:	d01d      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a22      	ldr	r2, [pc, #136]	@ (8006480 <HAL_TIM_Base_Start_IT+0xd4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d018      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a21      	ldr	r2, [pc, #132]	@ (8006484 <HAL_TIM_Base_Start_IT+0xd8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1f      	ldr	r2, [pc, #124]	@ (8006488 <HAL_TIM_Base_Start_IT+0xdc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00e      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1e      	ldr	r2, [pc, #120]	@ (800648c <HAL_TIM_Base_Start_IT+0xe0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d009      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1c      	ldr	r2, [pc, #112]	@ (8006490 <HAL_TIM_Base_Start_IT+0xe4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d004      	beq.n	800642c <HAL_TIM_Base_Start_IT+0x80>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1b      	ldr	r2, [pc, #108]	@ (8006494 <HAL_TIM_Base_Start_IT+0xe8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d115      	bne.n	8006458 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	4b19      	ldr	r3, [pc, #100]	@ (8006498 <HAL_TIM_Base_Start_IT+0xec>)
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b06      	cmp	r3, #6
 800643c:	d015      	beq.n	800646a <HAL_TIM_Base_Start_IT+0xbe>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006444:	d011      	beq.n	800646a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0201 	orr.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006456:	e008      	b.n	800646a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	e000      	b.n	800646c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40010000 	.word	0x40010000
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40010400 	.word	0x40010400
 8006490:	40014000 	.word	0x40014000
 8006494:	40001800 	.word	0x40001800
 8006498:	00010007 	.word	0x00010007

0800649c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d020      	beq.n	8006500 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01b      	beq.n	8006500 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0202 	mvn.w	r2, #2
 80064d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f8e9 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 80064ec:	e005      	b.n	80064fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f8db 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f8ec 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d020      	beq.n	800654c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01b      	beq.n	800654c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0204 	mvn.w	r2, #4
 800651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2202      	movs	r2, #2
 8006522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f8c3 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8b5 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f8c6 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d020      	beq.n	8006598 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d01b      	beq.n	8006598 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0208 	mvn.w	r2, #8
 8006568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2204      	movs	r2, #4
 800656e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f89d 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f88f 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f8a0 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 0310 	and.w	r3, r3, #16
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d020      	beq.n	80065e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01b      	beq.n	80065e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0210 	mvn.w	r2, #16
 80065b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2208      	movs	r2, #8
 80065ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f877 	bl	80066be <HAL_TIM_IC_CaptureCallback>
 80065d0:	e005      	b.n	80065de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f869 	bl	80066aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f87a 	bl	80066d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00c      	beq.n	8006608 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0201 	mvn.w	r2, #1
 8006600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fb f8f2 	bl	80017ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00c      	beq.n	8006636 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d007      	beq.n	8006636 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800662e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f913 	bl	800685c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00c      	beq.n	800665a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f90b 	bl	8006870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f834 	bl	80066e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00c      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0220 	mvn.w	r2, #32
 800669a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f8d3 	bl	8006848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066a2:	bf00      	nop
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a43      	ldr	r2, [pc, #268]	@ (800681c <TIM_Base_SetConfig+0x120>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d013      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800671a:	d00f      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a40      	ldr	r2, [pc, #256]	@ (8006820 <TIM_Base_SetConfig+0x124>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00b      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a3f      	ldr	r2, [pc, #252]	@ (8006824 <TIM_Base_SetConfig+0x128>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d007      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a3e      	ldr	r2, [pc, #248]	@ (8006828 <TIM_Base_SetConfig+0x12c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d003      	beq.n	800673c <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a3d      	ldr	r2, [pc, #244]	@ (800682c <TIM_Base_SetConfig+0x130>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d108      	bne.n	800674e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a32      	ldr	r2, [pc, #200]	@ (800681c <TIM_Base_SetConfig+0x120>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d02b      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675c:	d027      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a2f      	ldr	r2, [pc, #188]	@ (8006820 <TIM_Base_SetConfig+0x124>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d023      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a2e      	ldr	r2, [pc, #184]	@ (8006824 <TIM_Base_SetConfig+0x128>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01f      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a2d      	ldr	r2, [pc, #180]	@ (8006828 <TIM_Base_SetConfig+0x12c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d01b      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2c      	ldr	r2, [pc, #176]	@ (800682c <TIM_Base_SetConfig+0x130>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d017      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2b      	ldr	r2, [pc, #172]	@ (8006830 <TIM_Base_SetConfig+0x134>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d013      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a2a      	ldr	r2, [pc, #168]	@ (8006834 <TIM_Base_SetConfig+0x138>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00f      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a29      	ldr	r2, [pc, #164]	@ (8006838 <TIM_Base_SetConfig+0x13c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00b      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a28      	ldr	r2, [pc, #160]	@ (800683c <TIM_Base_SetConfig+0x140>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d007      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a27      	ldr	r2, [pc, #156]	@ (8006840 <TIM_Base_SetConfig+0x144>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a26      	ldr	r2, [pc, #152]	@ (8006844 <TIM_Base_SetConfig+0x148>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d108      	bne.n	80067c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a0e      	ldr	r2, [pc, #56]	@ (800681c <TIM_Base_SetConfig+0x120>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_Base_SetConfig+0xf2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a10      	ldr	r2, [pc, #64]	@ (800682c <TIM_Base_SetConfig+0x130>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d103      	bne.n	80067f6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	691a      	ldr	r2, [r3, #16]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f043 0204 	orr.w	r2, r3, #4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	601a      	str	r2, [r3, #0]
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800
 800683c:	40001800 	.word	0x40001800
 8006840:	40001c00 	.word	0x40001c00
 8006844:	40002000 	.word	0x40002000

08006848 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e040      	b.n	8006918 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fb fa36 	bl	8001d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2224      	movs	r2, #36	@ 0x24
 80068b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0201 	bic.w	r2, r2, #1
 80068c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa8c 	bl	8006de8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f825 	bl	8006920 <UART_SetConfig>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e01b      	b.n	8006918 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fb0b 	bl	8006f2c <UART_CheckIdleState>
 8006916:	4603      	mov	r3, r0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4ba6      	ldr	r3, [pc, #664]	@ (8006be4 <UART_SetConfig+0x2c4>)
 800694c:	4013      	ands	r3, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	430b      	orrs	r3, r1
 8006956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	430a      	orrs	r2, r1
 8006990:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a94      	ldr	r2, [pc, #592]	@ (8006be8 <UART_SetConfig+0x2c8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d120      	bne.n	80069de <UART_SetConfig+0xbe>
 800699c:	4b93      	ldr	r3, [pc, #588]	@ (8006bec <UART_SetConfig+0x2cc>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d816      	bhi.n	80069d8 <UART_SetConfig+0xb8>
 80069aa:	a201      	add	r2, pc, #4	@ (adr r2, 80069b0 <UART_SetConfig+0x90>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069c1 	.word	0x080069c1
 80069b4:	080069cd 	.word	0x080069cd
 80069b8:	080069c7 	.word	0x080069c7
 80069bc:	080069d3 	.word	0x080069d3
 80069c0:	2301      	movs	r3, #1
 80069c2:	77fb      	strb	r3, [r7, #31]
 80069c4:	e150      	b.n	8006c68 <UART_SetConfig+0x348>
 80069c6:	2302      	movs	r3, #2
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e14d      	b.n	8006c68 <UART_SetConfig+0x348>
 80069cc:	2304      	movs	r3, #4
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e14a      	b.n	8006c68 <UART_SetConfig+0x348>
 80069d2:	2308      	movs	r3, #8
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e147      	b.n	8006c68 <UART_SetConfig+0x348>
 80069d8:	2310      	movs	r3, #16
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e144      	b.n	8006c68 <UART_SetConfig+0x348>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a83      	ldr	r2, [pc, #524]	@ (8006bf0 <UART_SetConfig+0x2d0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d132      	bne.n	8006a4e <UART_SetConfig+0x12e>
 80069e8:	4b80      	ldr	r3, [pc, #512]	@ (8006bec <UART_SetConfig+0x2cc>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b0c      	cmp	r3, #12
 80069f4:	d828      	bhi.n	8006a48 <UART_SetConfig+0x128>
 80069f6:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <UART_SetConfig+0xdc>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a31 	.word	0x08006a31
 8006a00:	08006a49 	.word	0x08006a49
 8006a04:	08006a49 	.word	0x08006a49
 8006a08:	08006a49 	.word	0x08006a49
 8006a0c:	08006a3d 	.word	0x08006a3d
 8006a10:	08006a49 	.word	0x08006a49
 8006a14:	08006a49 	.word	0x08006a49
 8006a18:	08006a49 	.word	0x08006a49
 8006a1c:	08006a37 	.word	0x08006a37
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a49 	.word	0x08006a49
 8006a28:	08006a49 	.word	0x08006a49
 8006a2c:	08006a43 	.word	0x08006a43
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e118      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a36:	2302      	movs	r3, #2
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e115      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e112      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a42:	2308      	movs	r3, #8
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e10f      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e10c      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a68      	ldr	r2, [pc, #416]	@ (8006bf4 <UART_SetConfig+0x2d4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d120      	bne.n	8006a9a <UART_SetConfig+0x17a>
 8006a58:	4b64      	ldr	r3, [pc, #400]	@ (8006bec <UART_SetConfig+0x2cc>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a62:	2b30      	cmp	r3, #48	@ 0x30
 8006a64:	d013      	beq.n	8006a8e <UART_SetConfig+0x16e>
 8006a66:	2b30      	cmp	r3, #48	@ 0x30
 8006a68:	d814      	bhi.n	8006a94 <UART_SetConfig+0x174>
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	d009      	beq.n	8006a82 <UART_SetConfig+0x162>
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d810      	bhi.n	8006a94 <UART_SetConfig+0x174>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <UART_SetConfig+0x15c>
 8006a76:	2b10      	cmp	r3, #16
 8006a78:	d006      	beq.n	8006a88 <UART_SetConfig+0x168>
 8006a7a:	e00b      	b.n	8006a94 <UART_SetConfig+0x174>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	77fb      	strb	r3, [r7, #31]
 8006a80:	e0f2      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a82:	2302      	movs	r3, #2
 8006a84:	77fb      	strb	r3, [r7, #31]
 8006a86:	e0ef      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e0ec      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e0e9      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a94:	2310      	movs	r3, #16
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e0e6      	b.n	8006c68 <UART_SetConfig+0x348>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a56      	ldr	r2, [pc, #344]	@ (8006bf8 <UART_SetConfig+0x2d8>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d120      	bne.n	8006ae6 <UART_SetConfig+0x1c6>
 8006aa4:	4b51      	ldr	r3, [pc, #324]	@ (8006bec <UART_SetConfig+0x2cc>)
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006aae:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ab0:	d013      	beq.n	8006ada <UART_SetConfig+0x1ba>
 8006ab2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ab4:	d814      	bhi.n	8006ae0 <UART_SetConfig+0x1c0>
 8006ab6:	2b80      	cmp	r3, #128	@ 0x80
 8006ab8:	d009      	beq.n	8006ace <UART_SetConfig+0x1ae>
 8006aba:	2b80      	cmp	r3, #128	@ 0x80
 8006abc:	d810      	bhi.n	8006ae0 <UART_SetConfig+0x1c0>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <UART_SetConfig+0x1a8>
 8006ac2:	2b40      	cmp	r3, #64	@ 0x40
 8006ac4:	d006      	beq.n	8006ad4 <UART_SetConfig+0x1b4>
 8006ac6:	e00b      	b.n	8006ae0 <UART_SetConfig+0x1c0>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e0cc      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	77fb      	strb	r3, [r7, #31]
 8006ad2:	e0c9      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e0c6      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ada:	2308      	movs	r3, #8
 8006adc:	77fb      	strb	r3, [r7, #31]
 8006ade:	e0c3      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e0c0      	b.n	8006c68 <UART_SetConfig+0x348>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a44      	ldr	r2, [pc, #272]	@ (8006bfc <UART_SetConfig+0x2dc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d125      	bne.n	8006b3c <UART_SetConfig+0x21c>
 8006af0:	4b3e      	ldr	r3, [pc, #248]	@ (8006bec <UART_SetConfig+0x2cc>)
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006afa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afe:	d017      	beq.n	8006b30 <UART_SetConfig+0x210>
 8006b00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b04:	d817      	bhi.n	8006b36 <UART_SetConfig+0x216>
 8006b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b0a:	d00b      	beq.n	8006b24 <UART_SetConfig+0x204>
 8006b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b10:	d811      	bhi.n	8006b36 <UART_SetConfig+0x216>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <UART_SetConfig+0x1fe>
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b1a:	d006      	beq.n	8006b2a <UART_SetConfig+0x20a>
 8006b1c:	e00b      	b.n	8006b36 <UART_SetConfig+0x216>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e0a1      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b24:	2302      	movs	r3, #2
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e09e      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b2a:	2304      	movs	r3, #4
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e09b      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b30:	2308      	movs	r3, #8
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e098      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b36:	2310      	movs	r3, #16
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e095      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2f      	ldr	r2, [pc, #188]	@ (8006c00 <UART_SetConfig+0x2e0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d125      	bne.n	8006b92 <UART_SetConfig+0x272>
 8006b46:	4b29      	ldr	r3, [pc, #164]	@ (8006bec <UART_SetConfig+0x2cc>)
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b54:	d017      	beq.n	8006b86 <UART_SetConfig+0x266>
 8006b56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b5a:	d817      	bhi.n	8006b8c <UART_SetConfig+0x26c>
 8006b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b60:	d00b      	beq.n	8006b7a <UART_SetConfig+0x25a>
 8006b62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b66:	d811      	bhi.n	8006b8c <UART_SetConfig+0x26c>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <UART_SetConfig+0x254>
 8006b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b70:	d006      	beq.n	8006b80 <UART_SetConfig+0x260>
 8006b72:	e00b      	b.n	8006b8c <UART_SetConfig+0x26c>
 8006b74:	2301      	movs	r3, #1
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e076      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e073      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b80:	2304      	movs	r3, #4
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e070      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b86:	2308      	movs	r3, #8
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e06d      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e06a      	b.n	8006c68 <UART_SetConfig+0x348>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1b      	ldr	r2, [pc, #108]	@ (8006c04 <UART_SetConfig+0x2e4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d138      	bne.n	8006c0e <UART_SetConfig+0x2ee>
 8006b9c:	4b13      	ldr	r3, [pc, #76]	@ (8006bec <UART_SetConfig+0x2cc>)
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006ba6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006baa:	d017      	beq.n	8006bdc <UART_SetConfig+0x2bc>
 8006bac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bb0:	d82a      	bhi.n	8006c08 <UART_SetConfig+0x2e8>
 8006bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bb6:	d00b      	beq.n	8006bd0 <UART_SetConfig+0x2b0>
 8006bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bbc:	d824      	bhi.n	8006c08 <UART_SetConfig+0x2e8>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <UART_SetConfig+0x2aa>
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bc6:	d006      	beq.n	8006bd6 <UART_SetConfig+0x2b6>
 8006bc8:	e01e      	b.n	8006c08 <UART_SetConfig+0x2e8>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	77fb      	strb	r3, [r7, #31]
 8006bce:	e04b      	b.n	8006c68 <UART_SetConfig+0x348>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e048      	b.n	8006c68 <UART_SetConfig+0x348>
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	77fb      	strb	r3, [r7, #31]
 8006bda:	e045      	b.n	8006c68 <UART_SetConfig+0x348>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	77fb      	strb	r3, [r7, #31]
 8006be0:	e042      	b.n	8006c68 <UART_SetConfig+0x348>
 8006be2:	bf00      	nop
 8006be4:	efff69f3 	.word	0xefff69f3
 8006be8:	40011000 	.word	0x40011000
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40004400 	.word	0x40004400
 8006bf4:	40004800 	.word	0x40004800
 8006bf8:	40004c00 	.word	0x40004c00
 8006bfc:	40005000 	.word	0x40005000
 8006c00:	40011400 	.word	0x40011400
 8006c04:	40007800 	.word	0x40007800
 8006c08:	2310      	movs	r3, #16
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	e02c      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a72      	ldr	r2, [pc, #456]	@ (8006ddc <UART_SetConfig+0x4bc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d125      	bne.n	8006c64 <UART_SetConfig+0x344>
 8006c18:	4b71      	ldr	r3, [pc, #452]	@ (8006de0 <UART_SetConfig+0x4c0>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006c22:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c26:	d017      	beq.n	8006c58 <UART_SetConfig+0x338>
 8006c28:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006c2c:	d817      	bhi.n	8006c5e <UART_SetConfig+0x33e>
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c32:	d00b      	beq.n	8006c4c <UART_SetConfig+0x32c>
 8006c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c38:	d811      	bhi.n	8006c5e <UART_SetConfig+0x33e>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <UART_SetConfig+0x326>
 8006c3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c42:	d006      	beq.n	8006c52 <UART_SetConfig+0x332>
 8006c44:	e00b      	b.n	8006c5e <UART_SetConfig+0x33e>
 8006c46:	2300      	movs	r3, #0
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e00d      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e00a      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c52:	2304      	movs	r3, #4
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e007      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c58:	2308      	movs	r3, #8
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e004      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e001      	b.n	8006c68 <UART_SetConfig+0x348>
 8006c64:	2310      	movs	r3, #16
 8006c66:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c70:	d15b      	bne.n	8006d2a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c72:	7ffb      	ldrb	r3, [r7, #31]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d828      	bhi.n	8006cca <UART_SetConfig+0x3aa>
 8006c78:	a201      	add	r2, pc, #4	@ (adr r2, 8006c80 <UART_SetConfig+0x360>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006cad 	.word	0x08006cad
 8006c88:	08006cb5 	.word	0x08006cb5
 8006c8c:	08006ccb 	.word	0x08006ccb
 8006c90:	08006cbb 	.word	0x08006cbb
 8006c94:	08006ccb 	.word	0x08006ccb
 8006c98:	08006ccb 	.word	0x08006ccb
 8006c9c:	08006ccb 	.word	0x08006ccb
 8006ca0:	08006cc3 	.word	0x08006cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7fe faca 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8006ca8:	61b8      	str	r0, [r7, #24]
        break;
 8006caa:	e013      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cac:	f7fe fada 	bl	8005264 <HAL_RCC_GetPCLK2Freq>
 8006cb0:	61b8      	str	r0, [r7, #24]
        break;
 8006cb2:	e00f      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8006de4 <UART_SetConfig+0x4c4>)
 8006cb6:	61bb      	str	r3, [r7, #24]
        break;
 8006cb8:	e00c      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cba:	f7fe f9ad 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8006cbe:	61b8      	str	r0, [r7, #24]
        break;
 8006cc0:	e008      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cc6:	61bb      	str	r3, [r7, #24]
        break;
 8006cc8:	e004      	b.n	8006cd4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d074      	beq.n	8006dc4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	005a      	lsls	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	441a      	add	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b0f      	cmp	r3, #15
 8006cf4:	d916      	bls.n	8006d24 <UART_SetConfig+0x404>
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cfc:	d212      	bcs.n	8006d24 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f023 030f 	bic.w	r3, r3, #15
 8006d06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	085b      	lsrs	r3, r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	89fb      	ldrh	r3, [r7, #14]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	89fa      	ldrh	r2, [r7, #14]
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	e04f      	b.n	8006dc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	77bb      	strb	r3, [r7, #30]
 8006d28:	e04c      	b.n	8006dc4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d2a:	7ffb      	ldrb	r3, [r7, #31]
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d828      	bhi.n	8006d82 <UART_SetConfig+0x462>
 8006d30:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <UART_SetConfig+0x418>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d5d 	.word	0x08006d5d
 8006d3c:	08006d65 	.word	0x08006d65
 8006d40:	08006d6d 	.word	0x08006d6d
 8006d44:	08006d83 	.word	0x08006d83
 8006d48:	08006d73 	.word	0x08006d73
 8006d4c:	08006d83 	.word	0x08006d83
 8006d50:	08006d83 	.word	0x08006d83
 8006d54:	08006d83 	.word	0x08006d83
 8006d58:	08006d7b 	.word	0x08006d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d5c:	f7fe fa6e 	bl	800523c <HAL_RCC_GetPCLK1Freq>
 8006d60:	61b8      	str	r0, [r7, #24]
        break;
 8006d62:	e013      	b.n	8006d8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d64:	f7fe fa7e 	bl	8005264 <HAL_RCC_GetPCLK2Freq>
 8006d68:	61b8      	str	r0, [r7, #24]
        break;
 8006d6a:	e00f      	b.n	8006d8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <UART_SetConfig+0x4c4>)
 8006d6e:	61bb      	str	r3, [r7, #24]
        break;
 8006d70:	e00c      	b.n	8006d8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d72:	f7fe f951 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8006d76:	61b8      	str	r0, [r7, #24]
        break;
 8006d78:	e008      	b.n	8006d8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d7e:	61bb      	str	r3, [r7, #24]
        break;
 8006d80:	e004      	b.n	8006d8c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	77bb      	strb	r3, [r7, #30]
        break;
 8006d8a:	bf00      	nop
    }

    if (pclk != 0U)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d018      	beq.n	8006dc4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	085a      	lsrs	r2, r3, #1
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	441a      	add	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b0f      	cmp	r3, #15
 8006daa:	d909      	bls.n	8006dc0 <UART_SetConfig+0x4a0>
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db2:	d205      	bcs.n	8006dc0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60da      	str	r2, [r3, #12]
 8006dbe:	e001      	b.n	8006dc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006dd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40007c00 	.word	0x40007c00
 8006de0:	40023800 	.word	0x40023800
 8006de4:	00f42400 	.word	0x00f42400

08006de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df4:	f003 0308 	and.w	r3, r3, #8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	f003 0310 	and.w	r3, r3, #16
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00a      	beq.n	8006e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01a      	beq.n	8006efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ee6:	d10a      	bne.n	8006efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
  }
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b098      	sub	sp, #96	@ 0x60
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f3c:	f7fb fa36 	bl	80023ac <HAL_GetTick>
 8006f40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d12e      	bne.n	8006fae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f88c 	bl	800707c <UART_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d021      	beq.n	8006fae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e062      	b.n	8007074 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b04      	cmp	r3, #4
 8006fba:	d149      	bne.n	8007050 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f856 	bl	800707c <UART_WaitOnFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d03c      	beq.n	8007050 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	60fb      	str	r3, [r7, #12]
   return(result);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3308      	adds	r3, #8
 8007026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007028:	61fa      	str	r2, [r7, #28]
 800702a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	69b9      	ldr	r1, [r7, #24]
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	617b      	str	r3, [r7, #20]
   return(result);
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2220      	movs	r2, #32
 8007040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e011      	b.n	8007074 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3758      	adds	r7, #88	@ 0x58
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	603b      	str	r3, [r7, #0]
 8007088:	4613      	mov	r3, r2
 800708a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800708c:	e04f      	b.n	800712e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007094:	d04b      	beq.n	800712e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007096:	f7fb f989 	bl	80023ac <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d302      	bcc.n	80070ac <UART_WaitOnFlagUntilTimeout+0x30>
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e04e      	b.n	800714e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d037      	beq.n	800712e <UART_WaitOnFlagUntilTimeout+0xb2>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b80      	cmp	r3, #128	@ 0x80
 80070c2:	d034      	beq.n	800712e <UART_WaitOnFlagUntilTimeout+0xb2>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b40      	cmp	r3, #64	@ 0x40
 80070c8:	d031      	beq.n	800712e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d110      	bne.n	80070fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2208      	movs	r2, #8
 80070de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 f838 	bl	8007156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2208      	movs	r2, #8
 80070ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e029      	b.n	800714e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007108:	d111      	bne.n	800712e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f81e 	bl	8007156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e00f      	b.n	800714e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4013      	ands	r3, r2
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	429a      	cmp	r2, r3
 800713c:	bf0c      	ite	eq
 800713e:	2301      	moveq	r3, #1
 8007140:	2300      	movne	r3, #0
 8007142:	b2db      	uxtb	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	429a      	cmp	r2, r3
 800714a:	d0a0      	beq.n	800708e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007156:	b480      	push	{r7}
 8007158:	b095      	sub	sp, #84	@ 0x54
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007166:	e853 3f00 	ldrex	r3, [r3]
 800716a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800717c:	643b      	str	r3, [r7, #64]	@ 0x40
 800717e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007184:	e841 2300 	strex	r3, r2, [r1]
 8007188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1e6      	bne.n	800715e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3308      	adds	r3, #8
 8007196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e5      	bne.n	8007190 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d118      	bne.n	80071fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f023 0310 	bic.w	r3, r3, #16
 80071e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6979      	ldr	r1, [r7, #20]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	613b      	str	r3, [r7, #16]
   return(result);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e6      	bne.n	80071cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007212:	bf00      	nop
 8007214:	3754      	adds	r7, #84	@ 0x54
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007220:	b084      	sub	sp, #16
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	f107 001c 	add.w	r0, r7, #28
 800722e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007232:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007236:	2b01      	cmp	r3, #1
 8007238:	d121      	bne.n	800727e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	4b21      	ldr	r3, [pc, #132]	@ (80072d0 <USB_CoreInit+0xb0>)
 800724c:	4013      	ands	r3, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800725e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007262:	2b01      	cmp	r3, #1
 8007264:	d105      	bne.n	8007272 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa92 	bl	800779c <USB_CoreReset>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e010      	b.n	80072a0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa86 	bl	800779c <USB_CoreReset>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80072a0:	7fbb      	ldrb	r3, [r7, #30]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d10b      	bne.n	80072be <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f043 0206 	orr.w	r2, r3, #6
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f043 0220 	orr.w	r2, r3, #32
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072ca:	b004      	add	sp, #16
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	ffbdffbf 	.word	0xffbdffbf

080072d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f023 0201 	bic.w	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	460b      	mov	r3, r1
 8007300:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d115      	bne.n	8007344 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007324:	200a      	movs	r0, #10
 8007326:	f7fb f84d 	bl	80023c4 <HAL_Delay>
      ms += 10U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	330a      	adds	r3, #10
 800732e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fa25 	bl	8007780 <USB_GetMode>
 8007336:	4603      	mov	r3, r0
 8007338:	2b01      	cmp	r3, #1
 800733a:	d01e      	beq.n	800737a <USB_SetCurrentMode+0x84>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007340:	d9f0      	bls.n	8007324 <USB_SetCurrentMode+0x2e>
 8007342:	e01a      	b.n	800737a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d115      	bne.n	8007376 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007356:	200a      	movs	r0, #10
 8007358:	f7fb f834 	bl	80023c4 <HAL_Delay>
      ms += 10U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	330a      	adds	r3, #10
 8007360:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa0c 	bl	8007780 <USB_GetMode>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <USB_SetCurrentMode+0x84>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2bc7      	cmp	r3, #199	@ 0xc7
 8007372:	d9f0      	bls.n	8007356 <USB_SetCurrentMode+0x60>
 8007374:	e001      	b.n	800737a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e005      	b.n	8007386 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2bc8      	cmp	r3, #200	@ 0xc8
 800737e:	d101      	bne.n	8007384 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007390:	b084      	sub	sp, #16
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800739e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	e009      	b.n	80073c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3340      	adds	r3, #64	@ 0x40
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3301      	adds	r3, #1
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b0e      	cmp	r3, #14
 80073c8:	d9f2      	bls.n	80073b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d11c      	bne.n	800740c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e0:	f043 0302 	orr.w	r3, r3, #2
 80073e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	e005      	b.n	8007418 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007410:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800741e:	461a      	mov	r2, r3
 8007420:	2300      	movs	r3, #0
 8007422:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007424:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007428:	2b01      	cmp	r3, #1
 800742a:	d10d      	bne.n	8007448 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800742c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007430:	2b00      	cmp	r3, #0
 8007432:	d104      	bne.n	800743e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f968 	bl	800770c <USB_SetDevSpeed>
 800743c:	e008      	b.n	8007450 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800743e:	2101      	movs	r1, #1
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f963 	bl	800770c <USB_SetDevSpeed>
 8007446:	e003      	b.n	8007450 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007448:	2103      	movs	r1, #3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f95e 	bl	800770c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007450:	2110      	movs	r1, #16
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f8fa 	bl	800764c <USB_FlushTxFifo>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f924 	bl	80076b0 <USB_FlushRxFifo>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007478:	461a      	mov	r2, r3
 800747a:	2300      	movs	r3, #0
 800747c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007484:	461a      	mov	r2, r3
 8007486:	2300      	movs	r3, #0
 8007488:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007490:	461a      	mov	r2, r3
 8007492:	2300      	movs	r3, #0
 8007494:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	e043      	b.n	8007524 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b2:	d118      	bne.n	80074e6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c6:	461a      	mov	r2, r3
 80074c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	e013      	b.n	80074f8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074dc:	461a      	mov	r2, r3
 80074de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	e008      	b.n	80074f8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f2:	461a      	mov	r2, r3
 80074f4:	2300      	movs	r3, #0
 80074f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007504:	461a      	mov	r2, r3
 8007506:	2300      	movs	r3, #0
 8007508:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007516:	461a      	mov	r2, r3
 8007518:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800751c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3301      	adds	r3, #1
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007528:	461a      	mov	r2, r3
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	4293      	cmp	r3, r2
 800752e:	d3b5      	bcc.n	800749c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	e043      	b.n	80075be <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4413      	add	r3, r2
 800753e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800754c:	d118      	bne.n	8007580 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007560:	461a      	mov	r2, r3
 8007562:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e013      	b.n	8007592 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007576:	461a      	mov	r2, r3
 8007578:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e008      	b.n	8007592 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800758c:	461a      	mov	r2, r3
 800758e:	2300      	movs	r3, #0
 8007590:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759e:	461a      	mov	r2, r3
 80075a0:	2300      	movs	r3, #0
 80075a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b0:	461a      	mov	r2, r3
 80075b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	3301      	adds	r3, #1
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80075c2:	461a      	mov	r2, r3
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d3b5      	bcc.n	8007536 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80075ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f043 0210 	orr.w	r2, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699a      	ldr	r2, [r3, #24]
 8007604:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <USB_DevInit+0x2b4>)
 8007606:	4313      	orrs	r3, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800760c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	f043 0208 	orr.w	r2, r3, #8
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007620:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007624:	2b01      	cmp	r3, #1
 8007626:	d105      	bne.n	8007634 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699a      	ldr	r2, [r3, #24]
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <USB_DevInit+0x2b8>)
 800762e:	4313      	orrs	r3, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007640:	b004      	add	sp, #16
 8007642:	4770      	bx	lr
 8007644:	803c3800 	.word	0x803c3800
 8007648:	40000004 	.word	0x40000004

0800764c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007666:	d901      	bls.n	800766c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e01b      	b.n	80076a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	daf2      	bge.n	800765a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	019b      	lsls	r3, r3, #6
 800767c:	f043 0220 	orr.w	r2, r3, #32
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	3301      	adds	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007690:	d901      	bls.n	8007696 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e006      	b.n	80076a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d0f0      	beq.n	8007684 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3301      	adds	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076c8:	d901      	bls.n	80076ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e018      	b.n	8007700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	daf2      	bge.n	80076bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2210      	movs	r2, #16
 80076de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076ec:	d901      	bls.n	80076f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e006      	b.n	8007700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d0f0      	beq.n	80076e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	78fb      	ldrb	r3, [r7, #3]
 8007726:	68f9      	ldr	r1, [r7, #12]
 8007728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800772c:	4313      	orrs	r3, r2
 800772e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800773e:	b480      	push	{r7}
 8007740:	b085      	sub	sp, #20
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007758:	f023 0303 	bic.w	r3, r3, #3
 800775c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800776c:	f043 0302 	orr.w	r3, r3, #2
 8007770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	f003 0301 	and.w	r3, r3, #1
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077b4:	d901      	bls.n	80077ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077b6:	2303      	movs	r3, #3
 80077b8:	e022      	b.n	8007800 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	daf2      	bge.n	80077a8 <USB_CoreReset+0xc>

  count = 10U;
 80077c2:	230a      	movs	r3, #10
 80077c4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80077c6:	e002      	b.n	80077ce <USB_CoreReset+0x32>
  {
    count--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1f9      	bne.n	80077c8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	f043 0201 	orr.w	r2, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077ec:	d901      	bls.n	80077f2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e006      	b.n	8007800 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d0f0      	beq.n	80077e0 <USB_CoreReset+0x44>

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800780c:	b580      	push	{r7, lr}
 800780e:	b090      	sub	sp, #64	@ 0x40
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800781a:	2300      	movs	r3, #0
 800781c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8007826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007828:	330e      	adds	r3, #14
 800782a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b01      	cmp	r3, #1
 8007834:	f040 80ee 	bne.w	8007a14 <eARPProcessPacket+0x208>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8007838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783a:	885b      	ldrh	r3, [r3, #2]
 800783c:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 800783e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007842:	f040 80e7 	bne.w	8007a14 <eARPProcessPacket+0x208>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 800784a:	2b06      	cmp	r3, #6
 800784c:	f040 80e2 	bne.w	8007a14 <eARPProcessPacket+0x208>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8007850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007852:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8007854:	2b04      	cmp	r3, #4
 8007856:	f040 80dd 	bne.w	8007a14 <eARPProcessPacket+0x208>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	330e      	adds	r3, #14
 800785e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8007860:	f107 0320 	add.w	r3, r7, #32
 8007864:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8007876:	4b6a      	ldr	r3, [pc, #424]	@ (8007a20 <eARPProcessPacket+0x214>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 800787e:	4969      	ldr	r1, [pc, #420]	@ (8007a24 <eARPProcessPacket+0x218>)
 8007880:	4869      	ldr	r0, [pc, #420]	@ (8007a28 <eARPProcessPacket+0x21c>)
 8007882:	f00d fefd 	bl	8015680 <xTaskCheckForTimeOut>
 8007886:	4603      	mov	r3, r0
 8007888:	2b01      	cmp	r3, #1
 800788a:	d102      	bne.n	8007892 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 800788c:	4b64      	ldr	r3, [pc, #400]	@ (8007a20 <eARPProcessPacket+0x214>)
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	7a1b      	ldrb	r3, [r3, #8]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	f040 80ba 	bne.w	8007a14 <eARPProcessPacket+0x208>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80078a6:	d303      	bcc.n	80078b0 <eARPProcessPacket+0xa4>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 80078a8:	6a3b      	ldr	r3, [r7, #32]
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f280 80b2 	bge.w	8007a14 <eARPProcessPacket+0x208>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d021      	beq.n	80078fa <eARPProcessPacket+0xee>
 80078b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d11c      	bne.n	80078fa <eARPProcessPacket+0xee>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 80078c0:	4b57      	ldr	r3, [pc, #348]	@ (8007a20 <eARPProcessPacket+0x214>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 80a5 	bne.w	8007a14 <eARPProcessPacket+0x208>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 80078ca:	4b55      	ldr	r3, [pc, #340]	@ (8007a20 <eARPProcessPacket+0x214>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3301      	adds	r3, #1
 80078d0:	4a53      	ldr	r2, [pc, #332]	@ (8007a20 <eARPProcessPacket+0x214>)
 80078d2:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80078d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4619      	mov	r1, r3
 80078da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80078dc:	f000 fcd4 	bl	8008288 <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 80078e0:	f00d fbf4 	bl	80150cc <xTaskGetTickCount>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4a51      	ldr	r2, [pc, #324]	@ (8007a2c <eARPProcessPacket+0x220>)
 80078e8:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 80078ea:	484f      	ldr	r0, [pc, #316]	@ (8007a28 <eARPProcessPacket+0x21c>)
 80078ec:	f00d fe88 	bl	8015600 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 80078f0:	4b4c      	ldr	r3, [pc, #304]	@ (8007a24 <eARPProcessPacket+0x218>)
 80078f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80078f6:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 80078f8:	e08c      	b.n	8007a14 <eARPProcessPacket+0x208>
            {
                iptraceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	88db      	ldrh	r3, [r3, #6]
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	88db      	ldrh	r3, [r3, #6]
 8007902:	b29b      	uxth	r3, r3
 8007904:	2b01      	cmp	r3, #1
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8007906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8083 	beq.w	8007a14 <eARPProcessPacket+0x208>
 800790e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007910:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d07a      	beq.n	8007a14 <eARPProcessPacket+0x208>
                {
                    switch( pxARPHeader->usOperation )
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	88db      	ldrh	r3, [r3, #6]
 8007922:	b29b      	uxth	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d002      	beq.n	800792e <eARPProcessPacket+0x122>
 8007928:	2b02      	cmp	r3, #2
 800792a:	d06b      	beq.n	8007a04 <eARPProcessPacket+0x1f8>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 800792c:	e072      	b.n	8007a14 <eARPProcessPacket+0x208>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 800792e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007934:	429a      	cmp	r2, r3
 8007936:	d115      	bne.n	8007964 <eARPProcessPacket+0x158>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8007938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8007942:	2206      	movs	r2, #6
 8007944:	4619      	mov	r1, r3
 8007946:	f00f fe2b 	bl	80175a0 <memcmp>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d060      	beq.n	8007a12 <eARPProcessPacket+0x206>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	461a      	mov	r2, r3
 8007954:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007956:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007958:	f000 f86e 	bl	8007a38 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 800795c:	2302      	movs	r3, #2
 800795e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8007962:	e056      	b.n	8007a12 <eARPProcessPacket+0x206>
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007968:	429a      	cmp	r2, r3
 800796a:	d152      	bne.n	8007a12 <eARPProcessPacket+0x206>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 800796c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	405a      	eors	r2, r3
 8007974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 800797a:	2b00      	cmp	r3, #0
 800797c:	d149      	bne.n	8007a12 <eARPProcessPacket+0x206>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 800797e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a30 <eARPProcessPacket+0x224>)
 8007980:	f107 0318 	add.w	r3, r7, #24
 8007984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007988:	6018      	str	r0, [r3, #0]
 800798a:	3304      	adds	r3, #4
 800798c:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 800798e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007990:	3312      	adds	r3, #18
 8007992:	2206      	movs	r2, #6
 8007994:	4927      	ldr	r1, [pc, #156]	@ (8007a34 <eARPProcessPacket+0x228>)
 8007996:	4618      	mov	r0, r3
 8007998:	f00f fe02 	bl	80175a0 <memcmp>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <eARPProcessPacket+0x1ac>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	3312      	adds	r3, #18
 80079a6:	f107 0118 	add.w	r1, r7, #24
 80079aa:	2206      	movs	r2, #6
 80079ac:	4618      	mov	r0, r3
 80079ae:	f00f fdf7 	bl	80175a0 <memcmp>
 80079b2:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d12c      	bne.n	8007a12 <eARPProcessPacket+0x206>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 80079b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ba:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	3308      	adds	r3, #8
 80079c2:	2206      	movs	r2, #6
 80079c4:	4619      	mov	r1, r3
 80079c6:	f00f fdeb 	bl	80175a0 <memcmp>
 80079ca:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d020      	beq.n	8007a12 <eARPProcessPacket+0x206>
                                    pxCachedEndPoint = NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eResolutionCacheHit )
 80079d4:	f107 020c 	add.w	r2, r7, #12
 80079d8:	f107 0110 	add.w	r1, r7, #16
 80079dc:	f107 0320 	add.w	r3, r7, #32
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 fa87 	bl	8007ef4 <eARPGetCacheEntry>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d112      	bne.n	8007a12 <eARPProcessPacket+0x206>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d10e      	bne.n	8007a12 <eARPProcessPacket+0x206>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	3308      	adds	r3, #8
 80079f8:	6a39      	ldr	r1, [r7, #32]
 80079fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f967 	bl	8007cd0 <vARPRefreshCacheEntry>
                            break;
 8007a02:	e006      	b.n	8007a12 <eARPProcessPacket+0x206>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a0c:	f000 f852 	bl	8007ab4 <vARPProcessPacketReply>
                            break;
 8007a10:	e000      	b.n	8007a14 <eARPProcessPacket+0x208>
                            break;
 8007a12:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8007a14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3740      	adds	r7, #64	@ 0x40
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20001008 	.word	0x20001008
 8007a24:	2000000c 	.word	0x2000000c
 8007a28:	2000100c 	.word	0x2000100c
 8007a2c:	20001004 	.word	0x20001004
 8007a30:	08018780 	.word	0x08018780
 8007a34:	08018904 	.word	0x08018904

08007a38 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	330e      	adds	r3, #14
 8007a48:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f93c 	bl	8007cd0 <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f042 0202 	orr.w	r2, r2, #2
 8007a60:	719a      	strb	r2, [r3, #6]
 8007a62:	2200      	movs	r2, #0
 8007a64:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	3308      	adds	r3, #8
 8007a6a:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	3312      	adds	r3, #18
 8007a70:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007a72:	2206      	movs	r2, #6
 8007a74:	69b9      	ldr	r1, [r7, #24]
 8007a76:	6978      	ldr	r0, [r7, #20]
 8007a78:	f00f fe97 	bl	80177aa <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	3338      	adds	r3, #56	@ 0x38
 8007a86:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8007a8e:	2206      	movs	r2, #6
 8007a90:	69b9      	ldr	r1, [r7, #24]
 8007a92:	6978      	ldr	r0, [r7, #20]
 8007a94:	f00f fe89 	bl	80177aa <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	330e      	adds	r3, #14
 8007aa0:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	601a      	str	r2, [r3, #0]
    }
 8007aac:	bf00      	nop
 8007aae:	3720      	adds	r7, #32
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08c      	sub	sp, #48	@ 0x30
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	330e      	adds	r3, #14
 8007ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d005      	beq.n	8007ae2 <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f844 	bl	8007b64 <xIsIPInARPCache>
 8007adc:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d106      	bne.n	8007af0 <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 f8f0 	bl	8007cd0 <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8007af0:	4b1b      	ldr	r3, [pc, #108]	@ (8007b60 <vARPProcessPacketReply+0xac>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d02e      	beq.n	8007b56 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8007af8:	4b19      	ldr	r3, [pc, #100]	@ (8007b60 <vARPProcessPacketReply+0xac>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f002 fa3b 	bl	8009f78 <uxIPHeaderSizePacket>
 8007b02:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8007b04:	2b14      	cmp	r3, #20
 8007b06:	d126      	bne.n	8007b56 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8007b08:	4b15      	ldr	r3, [pc, #84]	@ (8007b60 <vARPProcessPacketReply+0xac>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0e:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 8007b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b12:	330e      	adds	r3, #14
 8007b14:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d11a      	bne.n	8007b56 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8007b24:	2301      	movs	r3, #1
 8007b26:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8007b28:	4b0d      	ldr	r3, [pc, #52]	@ (8007b60 <vARPProcessPacketReply+0xac>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 8007b2e:	f107 0314 	add.w	r3, r7, #20
 8007b32:	69f9      	ldr	r1, [r7, #28]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f001 fe71 	bl	800981c <xSendEventStructToIPTask>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d004      	beq.n	8007b4a <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8007b40:	4b07      	ldr	r3, [pc, #28]	@ (8007b60 <vARPProcessPacketReply+0xac>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f009 fd1f 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8007b4a:	4b05      	ldr	r3, [pc, #20]	@ (8007b60 <vARPProcessPacketReply+0xac>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 8007b50:	2000      	movs	r0, #0
 8007b52:	f002 fc67 	bl	800a424 <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8007b56:	bf00      	nop
 8007b58:	3730      	adds	r7, #48	@ 0x30
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20001284 	.word	0x20001284

08007b64 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
    BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
    {
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
        BaseType_t x, xReturn = pdFALSE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60bb      	str	r3, [r7, #8]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e017      	b.n	8007ba6 <xIsIPInARPCache+0x42>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007b76:	4a12      	ldr	r2, [pc, #72]	@ (8007bc0 <xIsIPInARPCache+0x5c>)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	4413      	add	r3, r2
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d10c      	bne.n	8007ba0 <xIsIPInARPCache+0x3c>
            {
                xReturn = pdTRUE;
 8007b86:	2301      	movs	r3, #1
 8007b88:	60bb      	str	r3, [r7, #8]

                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007bc0 <xIsIPInARPCache+0x5c>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	4413      	add	r3, r2
 8007b92:	330b      	adds	r3, #11
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d109      	bne.n	8007bae <xIsIPInARPCache+0x4a>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    xReturn = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]
                }

                break;
 8007b9e:	e006      	b.n	8007bae <xIsIPInARPCache+0x4a>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b09      	cmp	r3, #9
 8007baa:	dde4      	ble.n	8007b76 <xIsIPInARPCache+0x12>
 8007bac:	e000      	b.n	8007bb0 <xIsIPInARPCache+0x4c>
                break;
 8007bae:	bf00      	nop
            }
        }

        return xReturn;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
    }
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	20000f64 	.word	0x20000f64

08007bc4 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
    BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
        BaseType_t xNeedsARPResolution = pdFALSE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	61bb      	str	r3, [r7, #24]
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	330e      	adds	r3, #14
 8007bda:	617b      	str	r3, [r7, #20]
        const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be0:	613b      	str	r3, [r7, #16]

        configASSERT( ( pxIPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) || ( pxIPPacket->xEthernetHeader.usFrameType == ipARP_FRAME_TYPE ) );
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	899b      	ldrh	r3, [r3, #12]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bec:	d006      	beq.n	8007bfc <xCheckRequiresARPResolution+0x38>
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	899b      	ldrh	r3, [r3, #12]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	f640 0206 	movw	r2, #2054	@ 0x806
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d101      	bne.n	8007c00 <xCheckRequiresARPResolution+0x3c>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <xCheckRequiresARPResolution+0x3e>
 8007c00:	2300      	movs	r3, #0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10d      	bne.n	8007c22 <xCheckRequiresARPResolution+0x5e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	b672      	cpsid	i
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	b662      	cpsie	i
 8007c1a:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <xCheckRequiresARPResolution+0x5a>

        if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	405a      	eors	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	4013      	ands	r3, r2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d111      	bne.n	8007c5a <xCheckRequiresARPResolution+0x96>
        {
            /* If the IP is on the same subnet and we do not have an ARP entry already,
             * then we should send out ARP for finding the MAC address. */
            if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff ff92 	bl	8007b64 <xIsIPInARPCache>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <xCheckRequiresARPResolution+0x96>
            {
                FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f000 fb19 	bl	8008288 <FreeRTOS_OutputARPRequest_Multi>

                /* This packet needs resolution since this is on the same subnet
                 * but not in the ARP cache. */
                xNeedsARPResolution = pdTRUE;
 8007c56:	2301      	movs	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
            }
        }

        return xNeedsARPResolution;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
    }
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
    void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                                   const uint32_t ulIPAddress )
    {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
        BaseType_t x;

        if( pxMACAddress != NULL )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d026      	beq.n	8007cc2 <vARPRefreshCacheEntryAge+0x5e>
        {
            /* Loop through each entry in the ARP cache. */
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e020      	b.n	8007cbc <vARPRefreshCacheEntryAge+0x58>
            {
                /* Does this line in the cache table hold an entry for the IP
                 * address being queried? */
                if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007c7a:	4a14      	ldr	r2, [pc, #80]	@ (8007ccc <vARPRefreshCacheEntryAge+0x68>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	4413      	add	r3, r2
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d115      	bne.n	8007cb6 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* Does this cache entry have the same MAC address? */
                    if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	011b      	lsls	r3, r3, #4
 8007c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8007ccc <vARPRefreshCacheEntryAge+0x68>)
 8007c90:	4413      	add	r3, r2
 8007c92:	3304      	adds	r3, #4
 8007c94:	6879      	ldr	r1, [r7, #4]
 8007c96:	2206      	movs	r2, #6
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f00f fc81 	bl	80175a0 <memcmp>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d108      	bne.n	8007cb6 <vARPRefreshCacheEntryAge+0x52>
                    {
                        /* The IP address and the MAC matched, update this entry age. */
                        xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007ca4:	4a09      	ldr	r2, [pc, #36]	@ (8007ccc <vARPRefreshCacheEntryAge+0x68>)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	4413      	add	r3, r2
 8007cac:	330a      	adds	r3, #10
 8007cae:	2296      	movs	r2, #150	@ 0x96
 8007cb0:	701a      	strb	r2, [r3, #0]
                        break;
 8007cb2:	bf00      	nop
                    }
                }
            }
        }
    }
 8007cb4:	e005      	b.n	8007cc2 <vARPRefreshCacheEntryAge+0x5e>
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b09      	cmp	r3, #9
 8007cc0:	dddb      	ble.n	8007c7a <vARPRefreshCacheEntryAge+0x16>
    }
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	20000f64 	.word	0x20000f64

08007cd0 <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
    void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                                const uint32_t ulIPAddress,
                                struct xNetworkEndPoint * pxEndPoint )
    {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b088      	sub	sp, #32
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
        #endif
        {
            CacheLocation_t xLocation;
            BaseType_t xReady;

            xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8007cdc:	f107 0310 	add.w	r3, r7, #16
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 f85b 	bl	8007da0 <prvFindCacheEntry>
 8007cea:	61f8      	str	r0, [r7, #28]

            if( xReady == pdFALSE )
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d150      	bne.n	8007d94 <vARPRefreshCacheEntry+0xc4>
            {
                if( xLocation.xMacEntry >= 0 )
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	db0e      	blt.n	8007d16 <vARPRefreshCacheEntry+0x46>
                {
                    xLocation.xUseEntry = xLocation.xMacEntry;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	61bb      	str	r3, [r7, #24]

                    if( xLocation.xIpEntry >= 0 )
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	db0e      	blt.n	8007d20 <vARPRefreshCacheEntry+0x50>
                    {
                        /* Both the MAC address as well as the IP address were found in
                         * different locations: clear the entry which matches the
                         * IP-address */
                        ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	4a25      	ldr	r2, [pc, #148]	@ (8007d9c <vARPRefreshCacheEntry+0xcc>)
 8007d08:	4413      	add	r3, r2
 8007d0a:	2210      	movs	r2, #16
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f00f fc70 	bl	80175f4 <memset>
 8007d14:	e004      	b.n	8007d20 <vARPRefreshCacheEntry+0x50>
                    }
                }
                else if( xLocation.xIpEntry >= 0 )
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	db01      	blt.n	8007d20 <vARPRefreshCacheEntry+0x50>
                {
                    /* An entry containing the IP-address was found, but it had a different MAC address */
                    xLocation.xUseEntry = xLocation.xIpEntry;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	61bb      	str	r3, [r7, #24]
                {
                    /* No matching entry found. */
                }

                /* If the entry was not found, we use the oldest entry and set the IPaddress */
                xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	4a1e      	ldr	r2, [pc, #120]	@ (8007d9c <vARPRefreshCacheEntry+0xcc>)
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	4413      	add	r3, r2
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	601a      	str	r2, [r3, #0]

                if( pxMACAddress != NULL )
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01f      	beq.n	8007d72 <vARPRefreshCacheEntry+0xa2>
                {
                    ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	4a19      	ldr	r2, [pc, #100]	@ (8007d9c <vARPRefreshCacheEntry+0xcc>)
 8007d38:	4413      	add	r3, r2
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	68f9      	ldr	r1, [r7, #12]
 8007d3e:	2206      	movs	r2, #6
 8007d40:	4618      	mov	r0, r3
 8007d42:	f00f fd32 	bl	80177aa <memcpy>

                    iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                    /* And this entry does not need immediate attention */
                    xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	4a14      	ldr	r2, [pc, #80]	@ (8007d9c <vARPRefreshCacheEntry+0xcc>)
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	4413      	add	r3, r2
 8007d4e:	330a      	adds	r3, #10
 8007d50:	2296      	movs	r2, #150	@ 0x96
 8007d52:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	4a11      	ldr	r2, [pc, #68]	@ (8007d9c <vARPRefreshCacheEntry+0xcc>)
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	4413      	add	r3, r2
 8007d5c:	330b      	adds	r3, #11
 8007d5e:	2201      	movs	r2, #1
 8007d60:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	4a0d      	ldr	r2, [pc, #52]	@ (8007d9c <vARPRefreshCacheEntry+0xcc>)
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	4413      	add	r3, r2
 8007d6a:	330c      	adds	r3, #12
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
                {
                    /* Nothing will be stored. */
                }
            }
        }
    }
 8007d70:	e010      	b.n	8007d94 <vARPRefreshCacheEntry+0xc4>
                else if( xLocation.xIpEntry < 0 )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da0d      	bge.n	8007d94 <vARPRefreshCacheEntry+0xc4>
                    xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	4a08      	ldr	r2, [pc, #32]	@ (8007d9c <vARPRefreshCacheEntry+0xcc>)
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	4413      	add	r3, r2
 8007d80:	330a      	adds	r3, #10
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
                    xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	4a04      	ldr	r2, [pc, #16]	@ (8007d9c <vARPRefreshCacheEntry+0xcc>)
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	4413      	add	r3, r2
 8007d8e:	330b      	adds	r3, #11
 8007d90:	2200      	movs	r2, #0
 8007d92:	701a      	strb	r2, [r3, #0]
    }
 8007d94:	bf00      	nop
 8007d96:	3720      	adds	r7, #32
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20000f64 	.word	0x20000f64

08007da0 <prvFindCacheEntry>:
 */
    static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                         const uint32_t ulIPAddress,
                                         struct xNetworkEndPoint * pxEndPoint,
                                         CacheLocation_t * pxLocation )
    {
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08a      	sub	sp, #40	@ 0x28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	603b      	str	r3, [r7, #0]
        BaseType_t x = 0;
 8007dae:	2300      	movs	r3, #0
 8007db0:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucMinAgeFound = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        BaseType_t xReturn = pdFALSE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61fb      	str	r3, [r7, #28]

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007dbc:	68b8      	ldr	r0, [r7, #8]
 8007dbe:	f003 fa0f 	bl	800b1e0 <FreeRTOS_FindEndPointOnNetMask>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bf14      	ite	ne
 8007dc8:	2301      	movne	r3, #1
 8007dca:	2300      	moveq	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	617b      	str	r3, [r7, #20]
        #endif

        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 8007dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        pxLocation->xIpEntry = -1;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8007de0:	601a      	str	r2, [r3, #0]
        pxLocation->xMacEntry = -1;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	f04f 32ff 	mov.w	r2, #4294967295
 8007de8:	605a      	str	r2, [r3, #4]
        pxLocation->xUseEntry = 0;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2200      	movs	r2, #0
 8007dee:	609a      	str	r2, [r3, #8]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007df0:	2300      	movs	r3, #0
 8007df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007df4:	e073      	b.n	8007ede <prvFindCacheEntry+0x13e>
        {
            BaseType_t xMatchingMAC = pdFALSE;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61bb      	str	r3, [r7, #24]

            if( pxMACAddress != NULL )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00e      	beq.n	8007e1e <prvFindCacheEntry+0x7e>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	4a3a      	ldr	r2, [pc, #232]	@ (8007ef0 <prvFindCacheEntry+0x150>)
 8007e06:	4413      	add	r3, r2
 8007e08:	3304      	adds	r3, #4
 8007e0a:	68f9      	ldr	r1, [r7, #12]
 8007e0c:	2206      	movs	r2, #6
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f00f fbc6 	bl	80175a0 <memcmp>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <prvFindCacheEntry+0x7e>
                {
                    xMatchingMAC = pdTRUE;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	61bb      	str	r3, [r7, #24]
                }
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8007e1e:	4a34      	ldr	r2, [pc, #208]	@ (8007ef0 <prvFindCacheEntry+0x150>)
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	011b      	lsls	r3, r3, #4
 8007e24:	4413      	add	r3, r2
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d125      	bne.n	8007e7a <prvFindCacheEntry+0xda>
            {
                if( pxMACAddress == NULL )
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <prvFindCacheEntry+0x9c>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    pxLocation->xIpEntry = x;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e38:	601a      	str	r2, [r3, #0]
                    break;
 8007e3a:	e053      	b.n	8007ee4 <prvFindCacheEntry+0x144>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d017      	beq.n	8007e72 <prvFindCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * This is by far the most common path. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007e42:	4a2b      	ldr	r2, [pc, #172]	@ (8007ef0 <prvFindCacheEntry+0x150>)
 8007e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	4413      	add	r3, r2
 8007e4a:	330a      	adds	r3, #10
 8007e4c:	2296      	movs	r2, #150	@ 0x96
 8007e4e:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8007e50:	4a27      	ldr	r2, [pc, #156]	@ (8007ef0 <prvFindCacheEntry+0x150>)
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	4413      	add	r3, r2
 8007e58:	330b      	adds	r3, #11
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].pxEndPoint = pxEndPoint;
 8007e5e:	4a24      	ldr	r2, [pc, #144]	@ (8007ef0 <prvFindCacheEntry+0x150>)
 8007e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	4413      	add	r3, r2
 8007e66:	330c      	adds	r3, #12
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	601a      	str	r2, [r3, #0]
                    /* Indicate to the caller that the entry is updated. */
                    xReturn = pdTRUE;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	61fb      	str	r3, [r7, #28]
                    break;
 8007e70:	e038      	b.n	8007ee4 <prvFindCacheEntry+0x144>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                pxLocation->xIpEntry = x;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	e02e      	b.n	8007ed8 <prvFindCacheEntry+0x138>
            }
            else if( xMatchingMAC != pdFALSE )
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d016      	beq.n	8007eae <prvFindCacheEntry+0x10e>
                #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
                {
                    /* If ARP stores the MAC address of IP addresses outside the
                     * network, than the MAC address of the gateway should not be
                     * overwritten. */
                    BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007e80:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef0 <prvFindCacheEntry+0x150>)
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	4413      	add	r3, r2
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f003 f9a8 	bl	800b1e0 <FreeRTOS_FindEndPointOnNetMask>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf14      	ite	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	2300      	moveq	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	613b      	str	r3, [r7, #16]

                    if( xAddressIsLocal == xOtherIsLocal )
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d118      	bne.n	8007ed8 <prvFindCacheEntry+0x138>
                    {
                        pxLocation->xMacEntry = x;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eaa:	605a      	str	r2, [r3, #4]
 8007eac:	e014      	b.n	8007ed8 <prvFindCacheEntry+0x138>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8007eae:	4a10      	ldr	r2, [pc, #64]	@ (8007ef0 <prvFindCacheEntry+0x150>)
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	4413      	add	r3, r2
 8007eb6:	330a      	adds	r3, #10
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d90a      	bls.n	8007ed8 <prvFindCacheEntry+0x138>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 8007ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8007ef0 <prvFindCacheEntry+0x150>)
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	4413      	add	r3, r2
 8007eca:	330a      	adds	r3, #10
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pxLocation->xUseEntry = x;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed6:	609a      	str	r2, [r3, #8]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	3301      	adds	r3, #1
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	2b09      	cmp	r3, #9
 8007ee2:	dd88      	ble.n	8007df6 <prvFindCacheEntry+0x56>
            {
                /* Nothing happens to this cache entry for now. */
            }
        } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

        return xReturn;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
    }
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3728      	adds	r7, #40	@ 0x28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000f64 	.word	0x20000f64

08007ef4 <eARPGetCacheEntry>:
 *         eResolutionFailed.
 */
    eResolutionLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                                 MACAddress_t * const pxMACAddress,
                                                 struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	@ 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
        eResolutionLookupResult_t eReturn = eResolutionFailed;
 8007f00:	2302      	movs	r3, #2
 8007f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	623b      	str	r3, [r7, #32]

        configASSERT( pxMACAddress != NULL );
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10d      	bne.n	8007f2c <eARPGetCacheEntry+0x38>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	b672      	cpsid	i
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	b662      	cpsie	i
 8007f24:	61bb      	str	r3, [r7, #24]
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	e7fd      	b.n	8007f28 <eARPGetCacheEntry+0x34>
        configASSERT( pulIPAddress != NULL );
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10d      	bne.n	8007f4e <eARPGetCacheEntry+0x5a>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f36:	b672      	cpsid	i
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	b662      	cpsie	i
 8007f46:	617b      	str	r3, [r7, #20]
}
 8007f48:	bf00      	nop
 8007f4a:	bf00      	nop
 8007f4c:	e7fd      	b.n	8007f4a <eARPGetCacheEntry+0x56>
        configASSERT( ppxEndPoint != NULL );
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10d      	bne.n	8007f70 <eARPGetCacheEntry+0x7c>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	b672      	cpsid	i
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	b662      	cpsie	i
 8007f68:	613b      	str	r3, [r7, #16]
}
 8007f6a:	bf00      	nop
 8007f6c:	bf00      	nop
 8007f6e:	e7fd      	b.n	8007f6c <eARPGetCacheEntry+0x78>

        *( ppxEndPoint ) = NULL;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	61fb      	str	r3, [r7, #28]

        if( xIsIPv4Loopback( ulAddressToLookup ) != 0 )
 8007f7c:	69f8      	ldr	r0, [r7, #28]
 8007f7e:	f002 fe9d 	bl	800acbc <xIsIPv4Loopback>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d014      	beq.n	8007fb2 <eARPGetCacheEntry+0xbe>
        {
            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup );
 8007f88:	69f8      	ldr	r0, [r7, #28]
 8007f8a:	f003 f8ed 	bl	800b168 <FreeRTOS_FindEndPointOnIP_IPv4>
 8007f8e:	6238      	str	r0, [r7, #32]

            if( pxEndPoint != NULL )
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d04d      	beq.n	8008032 <eARPGetCacheEntry+0x13e>
            {
                /* For multi-cast, use the first IPv4 end-point. */
                ( void ) memcpy( pxMACAddress->ucBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8007f96:	68b8      	ldr	r0, [r7, #8]
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	3338      	adds	r3, #56	@ 0x38
 8007f9c:	2206      	movs	r2, #6
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	f00f fc03 	bl	80177aa <memcpy>
                *( ppxEndPoint ) = pxEndPoint;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a3a      	ldr	r2, [r7, #32]
 8007fa8:	601a      	str	r2, [r3, #0]
                eReturn = eResolutionCacheHit;
 8007faa:	2301      	movs	r3, #1
 8007fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007fb0:	e03f      	b.n	8008032 <eARPGetCacheEntry+0x13e>
            }
        }
        else if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8007fb2:	69f8      	ldr	r0, [r7, #28]
 8007fb4:	f002 fe0a 	bl	800abcc <xIsIPv4Multicast>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d020      	beq.n	8008000 <eARPGetCacheEntry+0x10c>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	69f8      	ldr	r0, [r7, #28]
 8007fc2:	f002 ffd9 	bl	800af78 <vSetMultiCastIPv4MacAddress>

            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f003 f934 	bl	800b234 <FreeRTOS_FirstEndPoint>
 8007fcc:	6238      	str	r0, [r7, #32]

            for( ;
 8007fce:	e013      	b.n	8007ff8 <eARPGetCacheEntry+0x104>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <eARPGetCacheEntry+0xfa>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a3a      	ldr	r2, [r7, #32]
 8007fe4:	601a      	str	r2, [r3, #0]
                    eReturn = eResolutionCacheHit;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    break;
 8007fec:	e021      	b.n	8008032 <eARPGetCacheEntry+0x13e>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8007fee:	6a39      	ldr	r1, [r7, #32]
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f003 f967 	bl	800b2c4 <FreeRTOS_NextEndPoint>
 8007ff6:	6238      	str	r0, [r7, #32]
                 pxEndPoint != NULL;
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e8      	bne.n	8007fd0 <eARPGetCacheEntry+0xdc>
 8007ffe:	e018      	b.n	8008032 <eARPGetCacheEntry+0x13e>
                }
            }
        }
        else if( xIsIPv4Broadcast( ulAddressToLookup, ppxEndPoint ) == pdTRUE )
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	69f8      	ldr	r0, [r7, #28]
 8008004:	f002 fdfc 	bl	800ac00 <xIsIPv4Broadcast>
 8008008:	4603      	mov	r3, r0
 800800a:	2b01      	cmp	r3, #1
 800800c:	d109      	bne.n	8008022 <eARPGetCacheEntry+0x12e>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	4a0b      	ldr	r2, [pc, #44]	@ (8008040 <eARPGetCacheEntry+0x14c>)
 8008012:	6811      	ldr	r1, [r2, #0]
 8008014:	6019      	str	r1, [r3, #0]
 8008016:	8892      	ldrh	r2, [r2, #4]
 8008018:	809a      	strh	r2, [r3, #4]
            /* Note that xIsIPv4Broadcast() already filled in ppxEndPoint with the corresponding endpoint
             * or the first IPv4 endpoint in case ulAddressToLookup was FREERTOS_INADDR_BROADCAST.
             * It is also safe to call xIsIPv4Broadcast() with a null pointer so no need to use
             * the intermediary pxEndPoint */

            eReturn = eResolutionCacheHit;
 800801a:	2301      	movs	r3, #1
 800801c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008020:	e007      	b.n	8008032 <eARPGetCacheEntry+0x13e>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f80c 	bl	8008044 <eARPGetCacheEntryGateWay>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        return eReturn;
 8008032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
    }
 8008036:	4618      	mov	r0, r3
 8008038:	3728      	adds	r7, #40	@ 0x28
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	08018904 	.word	0x08018904

08008044 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eResolutionLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                               MACAddress_t * const pxMACAddress,
                                                               struct xNetworkEndPoint ** ppxEndPoint )
    {
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
        eResolutionLookupResult_t eReturn = eResolutionCacheMiss;
 8008050:	2300      	movs	r3, #0
 8008052:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup );
 8008060:	69b8      	ldr	r0, [r7, #24]
 8008062:	f003 f8bd 	bl	800b1e0 <FreeRTOS_FindEndPointOnNetMask>
 8008066:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d11b      	bne.n	80080a6 <eARPGetCacheEntryGateWay+0x62>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	69b8      	ldr	r0, [r7, #24]
 8008074:	f000 f836 	bl	80080e4 <prvCacheLookup>
 8008078:	4603      	mov	r3, r0
 800807a:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eResolutionCacheHit )
 800807c:	7ffb      	ldrb	r3, [r7, #31]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d017      	beq.n	80080b2 <eARPGetCacheEntryGateWay+0x6e>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8008082:	2040      	movs	r0, #64	@ 0x40
 8008084:	f003 f8ba 	bl	800b1fc <FreeRTOS_FindGateWay>
 8008088:	4602      	mov	r2, r0
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d004      	beq.n	80080a0 <eARPGetCacheEntryGateWay+0x5c>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	e008      	b.n	80080b2 <eARPGetCacheEntryGateWay+0x6e>
                }
                else
                {
                    ulAddressToLookup = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61bb      	str	r3, [r7, #24]
 80080a4:	e005      	b.n	80080b2 <eARPGetCacheEntryGateWay+0x6e>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eResolutionCacheMiss )
 80080b2:	7ffb      	ldrb	r3, [r7, #31]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10f      	bne.n	80080d8 <eARPGetCacheEntryGateWay+0x94>
        #endif
        {
            if( ulAddressToLookup == 0U )
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <eARPGetCacheEntryGateWay+0x80>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eResolutionFailed;
 80080be:	2302      	movs	r3, #2
 80080c0:	77fb      	strb	r3, [r7, #31]
 80080c2:	e009      	b.n	80080d8 <eARPGetCacheEntryGateWay+0x94>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	69b8      	ldr	r0, [r7, #24]
 80080ca:	f000 f80b 	bl	80080e4 <prvCacheLookup>
 80080ce:	4603      	mov	r3, r0
 80080d0:	77fb      	strb	r3, [r7, #31]
                                             ( eReturn == eResolutionCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 80080d8:	7ffb      	ldrb	r3, [r7, #31]
    }
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eResolutionFailed.
 */
    static eResolutionLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                                     MACAddress_t * const pxMACAddress,
                                                     NetworkEndPoint_t ** ppxEndPoint )
    {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eResolutionLookupResult_t eReturn = eResolutionCacheMiss;
 80080f0:	2300      	movs	r3, #0
 80080f2:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80080f4:	2300      	movs	r3, #0
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	e02a      	b.n	8008150 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80080fa:	4a19      	ldr	r2, [pc, #100]	@ (8008160 <prvCacheLookup+0x7c>)
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	4413      	add	r3, r2
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	429a      	cmp	r2, r3
 8008108:	d11f      	bne.n	800814a <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800810a:	4a15      	ldr	r2, [pc, #84]	@ (8008160 <prvCacheLookup+0x7c>)
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	4413      	add	r3, r2
 8008112:	330b      	adds	r3, #11
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eResolutionFailed;
 800811a:	2302      	movs	r3, #2
 800811c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eResolutionCacheHit;
                }

                break;
 800811e:	e01a      	b.n	8008156 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	4a0e      	ldr	r2, [pc, #56]	@ (8008160 <prvCacheLookup+0x7c>)
 8008128:	4413      	add	r3, r2
 800812a:	3304      	adds	r3, #4
 800812c:	2206      	movs	r2, #6
 800812e:	4619      	mov	r1, r3
 8008130:	f00f fb3b 	bl	80177aa <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8008134:	4a0a      	ldr	r2, [pc, #40]	@ (8008160 <prvCacheLookup+0x7c>)
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	4413      	add	r3, r2
 800813c:	330c      	adds	r3, #12
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
                    eReturn = eResolutionCacheHit;
 8008144:	2301      	movs	r3, #1
 8008146:	74fb      	strb	r3, [r7, #19]
                break;
 8008148:	e005      	b.n	8008156 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	3301      	adds	r3, #1
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2b09      	cmp	r3, #9
 8008154:	ddd1      	ble.n	80080fa <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8008156:	7cfb      	ldrb	r3, [r7, #19]
    }
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000f64 	.word	0x20000f64

08008164 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800816a:	2300      	movs	r3, #0
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	e048      	b.n	8008202 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8008170:	4a42      	ldr	r2, [pc, #264]	@ (800827c <vARPAgeCache+0x118>)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	4413      	add	r3, r2
 8008178:	330a      	adds	r3, #10
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d03d      	beq.n	80081fc <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8008180:	4a3e      	ldr	r2, [pc, #248]	@ (800827c <vARPAgeCache+0x118>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	011b      	lsls	r3, r3, #4
 8008186:	4413      	add	r3, r2
 8008188:	330a      	adds	r3, #10
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	3b01      	subs	r3, #1
 800818e:	b2d9      	uxtb	r1, r3
 8008190:	4a3a      	ldr	r2, [pc, #232]	@ (800827c <vARPAgeCache+0x118>)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	4413      	add	r3, r2
 8008198:	330a      	adds	r3, #10
 800819a:	460a      	mov	r2, r1
 800819c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800819e:	4a37      	ldr	r2, [pc, #220]	@ (800827c <vARPAgeCache+0x118>)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	4413      	add	r3, r2
 80081a6:	330b      	adds	r3, #11
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80081ae:	4a33      	ldr	r2, [pc, #204]	@ (800827c <vARPAgeCache+0x118>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	4413      	add	r3, r2
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 f8c9 	bl	8008350 <FreeRTOS_OutputARPRequest>
 80081be:	e00f      	b.n	80081e0 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 80081c0:	4a2e      	ldr	r2, [pc, #184]	@ (800827c <vARPAgeCache+0x118>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	4413      	add	r3, r2
 80081c8:	330a      	adds	r3, #10
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d807      	bhi.n	80081e0 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 80081d0:	4a2a      	ldr	r2, [pc, #168]	@ (800827c <vARPAgeCache+0x118>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	4413      	add	r3, r2
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 f8b8 	bl	8008350 <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 80081e0:	4a26      	ldr	r2, [pc, #152]	@ (800827c <vARPAgeCache+0x118>)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	011b      	lsls	r3, r3, #4
 80081e6:	4413      	add	r3, r2
 80081e8:	330a      	adds	r3, #10
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d105      	bne.n	80081fc <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 80081f0:	4a22      	ldr	r2, [pc, #136]	@ (800827c <vARPAgeCache+0x118>)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	4413      	add	r3, r2
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3301      	adds	r3, #1
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b09      	cmp	r3, #9
 8008206:	ddb3      	ble.n	8008170 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8008208:	f00c ff60 	bl	80150cc <xTaskGetTickCount>
 800820c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800820e:	4b1c      	ldr	r3, [pc, #112]	@ (8008280 <vARPAgeCache+0x11c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <vARPAgeCache+0xc2>
 8008216:	4b1a      	ldr	r3, [pc, #104]	@ (8008280 <vARPAgeCache+0x11c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008222:	4293      	cmp	r3, r2
 8008224:	d926      	bls.n	8008274 <vARPAgeCache+0x110>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8008226:	4b17      	ldr	r3, [pc, #92]	@ (8008284 <vARPAgeCache+0x120>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 800822c:	e01c      	b.n	8008268 <vARPAgeCache+0x104>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d011      	beq.n	8008262 <vARPAgeCache+0xfe>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00d      	beq.n	8008262 <vARPAgeCache+0xfe>
                {
                    if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) /* LCOV_EXCL_BR_LINE */
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <vARPAgeCache+0xfe>
                    {
                        FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4619      	mov	r1, r3
 800825c:	68b8      	ldr	r0, [r7, #8]
 800825e:	f000 f813 	bl	8008288 <FreeRTOS_OutputARPRequest_Multi>
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008266:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1df      	bne.n	800822e <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 800826e:	4a04      	ldr	r2, [pc, #16]	@ (8008280 <vARPAgeCache+0x11c>)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6013      	str	r3, [r2, #0]
        }
    }
 8008274:	bf00      	nop
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000f64 	.word	0x20000f64
 8008280:	20001004 	.word	0x20001004
 8008284:	20002604 	.word	0x20002604

08008288 <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008298:	f003 0304 	and.w	r3, r3, #4
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d152      	bne.n	8008348 <FreeRTOS_OutputARPRequest_Multi+0xc0>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d04e      	beq.n	8008348 <FreeRTOS_OutputARPRequest_Multi+0xc0>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 80082aa:	2100      	movs	r1, #0
 80082ac:	202a      	movs	r0, #42	@ 0x2a
 80082ae:	f009 f8bf 	bl	8011430 <pxGetNetworkBufferWithDescriptor>
 80082b2:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d046      	beq.n	8008348 <FreeRTOS_OutputARPRequest_Multi+0xc0>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 80082ce:	6938      	ldr	r0, [r7, #16]
 80082d0:	f000 f852 	bl	8008378 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80082da:	d812      	bhi.n	8008302 <FreeRTOS_OutputARPRequest_Multi+0x7a>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e008      	b.n	80082f6 <FreeRTOS_OutputARPRequest_Multi+0x6e>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	4413      	add	r3, r2
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	3301      	adds	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80082fa:	ddf3      	ble.n	80082e4 <FreeRTOS_OutputARPRequest_Multi+0x5c>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	223c      	movs	r2, #60	@ 0x3c
 8008300:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8008302:	f002 f95e 	bl	800a5c2 <xIsCallingFromIPTask>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <FreeRTOS_OutputARPRequest_Multi+0x9e>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d019      	beq.n	8008348 <FreeRTOS_OutputARPRequest_Multi+0xc0>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800831e:	2201      	movs	r2, #1
 8008320:	6939      	ldr	r1, [r7, #16]
 8008322:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8008324:	e010      	b.n	8008348 <FreeRTOS_OutputARPRequest_Multi+0xc0>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8008326:	2302      	movs	r3, #2
 8008328:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800832e:	f107 0308 	add.w	r3, r7, #8
 8008332:	f04f 31ff 	mov.w	r1, #4294967295
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fa70 	bl	800981c <xSendEventStructToIPTask>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d102      	bne.n	8008348 <FreeRTOS_OutputARPRequest_Multi+0xc0>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008342:	6938      	ldr	r0, [r7, #16]
 8008344:	f009 f920 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
    }
 8008348:	bf00      	nop
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress );
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f002 ff41 	bl	800b1e0 <FreeRTOS_FindEndPointOnNetMask>
 800835e:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <FreeRTOS_OutputARPRequest+0x1e>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff ff8d 	bl	8008288 <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
	...

08008378 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10d      	bne.n	80083a2 <vARPGenerateRequestPacket+0x2a>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838a:	b672      	cpsid	i
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	b662      	cpsie	i
 800839a:	613b      	str	r3, [r7, #16]
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <vARPGenerateRequestPacket+0x26>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a6:	2b29      	cmp	r3, #41	@ 0x29
 80083a8:	d80d      	bhi.n	80083c6 <vARPGenerateRequestPacket+0x4e>
	__asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ae:	b672      	cpsid	i
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	b662      	cpsie	i
 80083be:	60fb      	str	r3, [r7, #12]
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	e7fd      	b.n	80083c2 <vARPGenerateRequestPacket+0x4a>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10d      	bne.n	80083ea <vARPGenerateRequestPacket+0x72>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	b672      	cpsid	i
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	b662      	cpsie	i
 80083e2:	60bb      	str	r3, [r7, #8]
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	e7fd      	b.n	80083e6 <vARPGenerateRequestPacket+0x6e>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ee:	61fb      	str	r3, [r7, #28]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 80083f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008460 <vARPGenerateRequestPacket+0xe8>)
 80083f2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket;
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 80083f8:	2226      	movs	r2, #38	@ 0x26
 80083fa:	69b9      	ldr	r1, [r7, #24]
 80083fc:	6978      	ldr	r0, [r7, #20]
 80083fe:	f00f f9d4 	bl	80177aa <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008406:	3338      	adds	r3, #56	@ 0x38
 8008408:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	3306      	adds	r3, #6
 800840e:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8008410:	2206      	movs	r2, #6
 8008412:	69b9      	ldr	r1, [r7, #24]
 8008414:	6978      	ldr	r0, [r7, #20]
 8008416:	f00f f9c8 	bl	80177aa <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800841e:	3338      	adds	r3, #56	@ 0x38
 8008420:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	3316      	adds	r3, #22
 8008426:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8008428:	2206      	movs	r2, #6
 800842a:	69b9      	ldr	r1, [r7, #24]
 800842c:	6978      	ldr	r0, [r7, #20]
 800842e:	f00f f9bc 	bl	80177aa <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008436:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	331c      	adds	r3, #28
 800843c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	695a      	ldr	r2, [r3, #20]
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	222a      	movs	r2, #42	@ 0x2a
 8008456:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 8008458:	bf00      	nop
 800845a:	3720      	adds	r7, #32
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	080188bc 	.word	0x080188bc

08008464 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
    void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
    {
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
        if( pxEndPoint != NULL )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01b      	beq.n	80084aa <FreeRTOS_ClearARP+0x46>
        {
            BaseType_t x;

            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	e014      	b.n	80084a2 <FreeRTOS_ClearARP+0x3e>
            {
                if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8008478:	4a10      	ldr	r2, [pc, #64]	@ (80084bc <FreeRTOS_ClearARP+0x58>)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	4413      	add	r3, r2
 8008480:	330c      	adds	r3, #12
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d108      	bne.n	800849c <FreeRTOS_ClearARP+0x38>
                {
                    ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	4a0b      	ldr	r2, [pc, #44]	@ (80084bc <FreeRTOS_ClearARP+0x58>)
 8008490:	4413      	add	r3, r2
 8008492:	2210      	movs	r2, #16
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f00f f8ac 	bl	80175f4 <memset>
            for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3301      	adds	r3, #1
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	dde7      	ble.n	8008478 <FreeRTOS_ClearARP+0x14>
        }
        else
        {
            ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
        }
    }
 80084a8:	e004      	b.n	80084b4 <FreeRTOS_ClearARP+0x50>
            ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 80084aa:	22a0      	movs	r2, #160	@ 0xa0
 80084ac:	2100      	movs	r1, #0
 80084ae:	4803      	ldr	r0, [pc, #12]	@ (80084bc <FreeRTOS_ClearARP+0x58>)
 80084b0:	f00f f8a0 	bl	80175f4 <memset>
    }
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	20000f64 	.word	0x20000f64

080084c0 <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 80084c4:	f000 fb84 	bl	8008bd0 <vDNSCallbackInitialise>
        }
 80084c8:	bf00      	nop
 80084ca:	bd80      	pop	{r7, pc}

080084cc <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 80084d8:	2300      	movs	r3, #0
 80084da:	61fb      	str	r3, [r7, #28]
        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        /* 'pcName' might not be used when DNS cache is disabled. */
        ( void ) pcName;

        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 80084dc:	2058      	movs	r0, #88	@ 0x58
 80084de:	f00e fbeb 	bl	8016cb8 <pvPortMalloc>
 80084e2:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d033      	beq.n	8008552 <pxNew_AddrInfo+0x86>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 80084ee:	2258      	movs	r2, #88	@ 0x58
 80084f0:	2100      	movs	r1, #0
 80084f2:	69f8      	ldr	r0, [r7, #28]
 80084f4:	f00f f87e 	bl	80175f4 <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	3338      	adds	r3, #56	@ 0x38
 8008506:	221d      	movs	r2, #29
 8008508:	68f9      	ldr	r1, [r7, #12]
 800850a:	4618      	mov	r0, r3
 800850c:	f00f f87a 	bl	8017604 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f103 0220 	add.w	r2, r3, #32
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b02      	cmp	r3, #2
 8008526:	d10e      	bne.n	8008546 <pxNew_AddrInfo+0x7a>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f002 faa3 	bl	800aa74 <ulChar2u32>
 800852e:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2202      	movs	r2, #2
 800853c:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	2204      	movs	r2, #4
 8008542:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8008544:	e005      	b.n	8008552 <pxNew_AddrInfo+0x86>

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );

                    vPortFree( pvBuffer );
 8008546:	69b8      	ldr	r0, [r7, #24]
 8008548:	f00e fc84 	bl	8016e54 <vPortFree>
                    pxAddrInfo = NULL;
 800854c:	2300      	movs	r3, #0
 800854e:	61fb      	str	r3, [r7, #28]

                    break;
 8008550:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8008552:	69fb      	ldr	r3, [r7, #28]
    }
 8008554:	4618      	mov	r0, r3
 8008556:	3720      	adds	r7, #32
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 800856e:	e007      	b.n	8008580 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f00e fc6c 	bl	8016e54 <vPortFree>
                pxIterator = pxNext;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f4      	bne.n	8008570 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800858e:	b580      	push	{r7, lr}
 8008590:	b088      	sub	sp, #32
 8008592:	af02      	add	r7, sp, #8
 8008594:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fcee 	bl	8009f78 <uxIPHeaderSizePacket>
 800859c:	4603      	mov	r3, r0
 800859e:	3316      	adds	r3, #22
 80085a0:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d81f      	bhi.n	80085ec <ulDNSHandlePacket+0x5e>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b0b      	cmp	r3, #11
 80085ba:	d917      	bls.n	80085ec <ulDNSHandlePacket+0x5e>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 80085bc:	2300      	movs	r3, #0
 80085be:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	4413      	add	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 80085ce:	f107 0208 	add.w	r2, r7, #8
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	2300      	movs	r3, #0
 80085d6:	6939      	ldr	r1, [r7, #16]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fbdf 	bl	8008d9c <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <ulDNSHandlePacket+0x5e>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff ffb8 	bl	800855c <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 80085ec:	2300      	movs	r3, #0
    }
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b086      	sub	sp, #24
 80085fa:	af02      	add	r7, sp, #8
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	2300      	movs	r3, #0
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	68b9      	ldr	r1, [r7, #8]
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 f818 	bl	8008644 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8008614:	2301      	movs	r3, #1
    }
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8008624:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8008628:	2100      	movs	r1, #0
 800862a:	4804      	ldr	r0, [pc, #16]	@ (800863c <FreeRTOS_dnsclear+0x1c>)
 800862c:	f00e ffe2 	bl	80175f4 <memset>
        uxFreeEntry = 0U;
 8008630:	4b03      	ldr	r3, [pc, #12]	@ (8008640 <FreeRTOS_dnsclear+0x20>)
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]
    }
 8008636:	bf00      	nop
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20001014 	.word	0x20001014
 8008640:	2000126c 	.word	0x2000126c

08008644 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008644:	b580      	push	{r7, lr}
 8008646:	b098      	sub	sp, #96	@ 0x60
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8008652:	f00c fd3b 	bl	80150cc <xTaskGetTickCount>
 8008656:	65f8      	str	r0, [r7, #92]	@ 0x5c
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10d      	bne.n	800867a <FreeRTOS_ProcessDNSCache+0x36>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	b672      	cpsid	i
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	b662      	cpsie	i
 8008672:	64fb      	str	r3, [r7, #76]	@ 0x4c
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <FreeRTOS_ProcessDNSCache+0x32>

        if( xLookUp != pdFALSE )
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <FreeRTOS_ProcessDNSCache+0x42>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / configTICK_RATE_HZ ) );
 8008686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008688:	4a26      	ldr	r2, [pc, #152]	@ (8008724 <FreeRTOS_ProcessDNSCache+0xe0>)
 800868a:	fba2 2303 	umull	r2, r3, r2, r3
 800868e:	099b      	lsrs	r3, r3, #6
 8008690:	65bb      	str	r3, [r7, #88]	@ 0x58
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8008692:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008696:	461a      	mov	r2, r3
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 f844 	bl	8008728 <prvFindEntryIndex>
 80086a0:	6578      	str	r0, [r7, #84]	@ 0x54

        if( xResult == pdTRUE )
 80086a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d110      	bne.n	80086ca <FreeRTOS_ProcessDNSCache+0x86>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d106      	bne.n	80086bc <FreeRTOS_ProcessDNSCache+0x78>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 80086ae:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80086b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	f000 f87f 	bl	80087b8 <prvGetCacheIPEntry>
 80086ba:	e013      	b.n	80086e4 <FreeRTOS_ProcessDNSCache+0xa0>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 80086bc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80086be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	f000 f8ca 	bl	800885c <prvUpdateCacheEntry>
 80086c8:	e00c      	b.n	80086e4 <FreeRTOS_ProcessDNSCache+0xa0>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d103      	bne.n	80086d8 <FreeRTOS_ProcessDNSCache+0x94>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e005      	b.n	80086e4 <FreeRTOS_ProcessDNSCache+0xa0>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 80086d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 f8f2 	bl	80088c8 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <FreeRTOS_ProcessDNSCache+0xae>
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d012      	beq.n	8008718 <FreeRTOS_ProcessDNSCache+0xd4>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 80086f2:	2302      	movs	r3, #2
 80086f4:	653b      	str	r3, [r7, #80]	@ 0x50

                switch( pxIP->xIs_IPv6 )
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d103      	bne.n	8008706 <FreeRTOS_ProcessDNSCache+0xc2>
                            break;
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	63bb      	str	r3, [r7, #56]	@ 0x38
                            break;
 8008704:	e000      	b.n	8008708 <FreeRTOS_ProcessDNSCache+0xc4>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
                        break;
 8008706:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8008708:	f107 0210 	add.w	r2, r7, #16
 800870c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8008710:	2328      	movs	r3, #40	@ 0x28
 8008712:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008714:	f003 fdd6 	bl	800c2c4 <FreeRTOS_inet_ntop>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 8008718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    }
 800871a:	4618      	mov	r0, r3
 800871c:	3760      	adds	r7, #96	@ 0x60
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	10624dd3 	.word	0x10624dd3

08008728 <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8008738:	2300      	movs	r3, #0
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	e031      	b.n	80087a2 <prvFindEntryIndex+0x7a>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 800873e:	491d      	ldr	r1, [pc, #116]	@ (80087b4 <prvFindEntryIndex+0x8c>)
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4613      	mov	r3, r2
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	3314      	adds	r3, #20
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d022      	beq.n	800879a <prvFindEntryIndex+0x72>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4613      	mov	r3, r2
 8008758:	011b      	lsls	r3, r3, #4
 800875a:	1a9b      	subs	r3, r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	3310      	adds	r3, #16
 8008760:	4a14      	ldr	r2, [pc, #80]	@ (80087b4 <prvFindEntryIndex+0x8c>)
 8008762:	4413      	add	r3, r2
 8008764:	3304      	adds	r3, #4
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	4618      	mov	r0, r3
 800876a:	f7f7 fd69 	bl	8000240 <strcmp>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d113      	bne.n	800879c <prvFindEntryIndex+0x74>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	6919      	ldr	r1, [r3, #16]
 8008778:	480e      	ldr	r0, [pc, #56]	@ (80087b4 <prvFindEntryIndex+0x8c>)
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	4613      	mov	r3, r2
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4403      	add	r3, r0
 8008786:	3310      	adds	r3, #16
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4299      	cmp	r1, r3
 800878c:	d106      	bne.n	800879c <prvFindEntryIndex+0x74>
                {
                    xReturn = pdTRUE;
 800878e:	2301      	movs	r3, #1
 8008790:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	601a      	str	r2, [r3, #0]
                    break;
 8008798:	e006      	b.n	80087a8 <prvFindEntryIndex+0x80>
                continue;
 800879a:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	3301      	adds	r3, #1
 80087a0:	613b      	str	r3, [r7, #16]
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b09      	cmp	r3, #9
 80087a6:	d9ca      	bls.n	800873e <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 80087a8:	697b      	ldr	r3, [r7, #20]
    }
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20001014 	.word	0x20001014

080087b8 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 80087ca:	4923      	ldr	r1, [pc, #140]	@ (8008858 <prvGetCacheIPEntry+0xa0>)
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4613      	mov	r3, r2
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	3338      	adds	r3, #56	@ 0x38
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 80087e2:	491d      	ldr	r1, [pc, #116]	@ (8008858 <prvGetCacheIPEntry+0xa0>)
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4613      	mov	r3, r2
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	440b      	add	r3, r1
 80087f0:	3334      	adds	r3, #52	@ 0x34
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d21d      	bcs.n	8008836 <prvGetCacheIPEntry+0x7e>
                ulIPAddressIndex = ucIndex;

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	461a      	mov	r2, r3
 80087fe:	0092      	lsls	r2, r2, #2
 8008800:	441a      	add	r2, r3
 8008802:	0093      	lsls	r3, r2, #2
 8008804:	461a      	mov	r2, r3
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	460b      	mov	r3, r1
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	1a5b      	subs	r3, r3, r1
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	4a11      	ldr	r2, [pc, #68]	@ (8008858 <prvGetCacheIPEntry+0xa0>)
 8008814:	4413      	add	r3, r2
 8008816:	2214      	movs	r2, #20
 8008818:	4619      	mov	r1, r3
 800881a:	68b8      	ldr	r0, [r7, #8]
 800881c:	f00e ffc5 	bl	80177aa <memcpy>
            isRead = pdTRUE;
 8008820:	2301      	movs	r3, #1
 8008822:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d011      	beq.n	800884e <prvGetCacheIPEntry+0x96>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f89e 	bl	8008970 <prvReadDNSCache>
 8008834:	e00b      	b.n	800884e <prvGetCacheIPEntry+0x96>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 8008836:	4908      	ldr	r1, [pc, #32]	@ (8008858 <prvGetCacheIPEntry+0xa0>)
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4613      	mov	r3, r2
 800883c:	011b      	lsls	r3, r3, #4
 800883e:	1a9b      	subs	r3, r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	3314      	adds	r3, #20
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 800884a:	2300      	movs	r3, #0
 800884c:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 800884e:	69fb      	ldr	r3, [r7, #28]
    }
 8008850:	4618      	mov	r0, r3
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20001014 	.word	0x20001014

0800885c <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	617b      	str	r3, [r7, #20]
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	461a      	mov	r2, r3
 8008872:	0092      	lsls	r2, r2, #2
 8008874:	441a      	add	r2, r3
 8008876:	0093      	lsls	r3, r2, #2
 8008878:	461a      	mov	r2, r3
 800887a:	68f9      	ldr	r1, [r7, #12]
 800887c:	460b      	mov	r3, r1
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	1a5b      	subs	r3, r3, r1
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	4a0f      	ldr	r2, [pc, #60]	@ (80088c4 <prvUpdateCacheEntry+0x68>)
 8008888:	4413      	add	r3, r2
 800888a:	2214      	movs	r2, #20
 800888c:	6879      	ldr	r1, [r7, #4]
 800888e:	4618      	mov	r0, r3
 8008890:	f00e ff8b 	bl	80177aa <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8008894:	490b      	ldr	r1, [pc, #44]	@ (80088c4 <prvUpdateCacheEntry+0x68>)
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4613      	mov	r3, r2
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	1a9b      	subs	r3, r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	440b      	add	r3, r1
 80088a2:	3334      	adds	r3, #52	@ 0x34
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80088a8:	4906      	ldr	r1, [pc, #24]	@ (80088c4 <prvUpdateCacheEntry+0x68>)
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	4613      	mov	r3, r2
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	3338      	adds	r3, #56	@ 0x38
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	601a      	str	r2, [r3, #0]
    }
 80088bc:	bf00      	nop
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20001014 	.word	0x20001014

080088c8 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7f7 fcbc 	bl	8000254 <strlen>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b1d      	cmp	r3, #29
 80088e0:	d83d      	bhi.n	800895e <prvInsertCacheEntry+0x96>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 80088e2:	4b21      	ldr	r3, [pc, #132]	@ (8008968 <prvInsertCacheEntry+0xa0>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4613      	mov	r3, r2
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	3310      	adds	r3, #16
 80088f0:	4a1e      	ldr	r2, [pc, #120]	@ (800896c <prvInsertCacheEntry+0xa4>)
 80088f2:	4413      	add	r3, r2
 80088f4:	3304      	adds	r3, #4
 80088f6:	221e      	movs	r2, #30
 80088f8:	68f9      	ldr	r1, [r7, #12]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f00e fe82 	bl	8017604 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8008900:	4b19      	ldr	r3, [pc, #100]	@ (8008968 <prvInsertCacheEntry+0xa0>)
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	4613      	mov	r3, r2
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	1a9b      	subs	r3, r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4a17      	ldr	r2, [pc, #92]	@ (800896c <prvInsertCacheEntry+0xa4>)
 800890e:	4413      	add	r3, r2
 8008910:	2214      	movs	r2, #20
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4618      	mov	r0, r3
 8008916:	f00e ff48 	bl	80177aa <memcpy>

            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 800891a:	4b13      	ldr	r3, [pc, #76]	@ (8008968 <prvInsertCacheEntry+0xa0>)
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4913      	ldr	r1, [pc, #76]	@ (800896c <prvInsertCacheEntry+0xa4>)
 8008920:	4613      	mov	r3, r2
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	3334      	adds	r3, #52	@ 0x34
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008930:	4b0d      	ldr	r3, [pc, #52]	@ (8008968 <prvInsertCacheEntry+0xa0>)
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	490d      	ldr	r1, [pc, #52]	@ (800896c <prvInsertCacheEntry+0xa4>)
 8008936:	4613      	mov	r3, r2
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	440b      	add	r3, r1
 8008940:	3338      	adds	r3, #56	@ 0x38
 8008942:	683a      	ldr	r2, [r7, #0]
 8008944:	601a      	str	r2, [r3, #0]
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 8008946:	4b08      	ldr	r3, [pc, #32]	@ (8008968 <prvInsertCacheEntry+0xa0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	4a06      	ldr	r2, [pc, #24]	@ (8008968 <prvInsertCacheEntry+0xa0>)
 800894e:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8008950:	4b05      	ldr	r3, [pc, #20]	@ (8008968 <prvInsertCacheEntry+0xa0>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b0a      	cmp	r3, #10
 8008956:	d102      	bne.n	800895e <prvInsertCacheEntry+0x96>
            {
                uxFreeEntry = 0;
 8008958:	4b03      	ldr	r3, [pc, #12]	@ (8008968 <prvInsertCacheEntry+0xa0>)
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
            }
        }
    }
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	2000126c 	.word	0x2000126c
 800896c:	20001014 	.word	0x20001014

08008970 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 800897a:	2301      	movs	r3, #1
 800897c:	613b      	str	r3, [r7, #16]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	61bb      	str	r3, [r7, #24]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	617b      	str	r3, [r7, #20]
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8008986:	2300      	movs	r3, #0
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	e031      	b.n	80089f0 <prvReadDNSCache+0x80>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	461a      	mov	r2, r3
 8008990:	0092      	lsls	r2, r2, #2
 8008992:	441a      	add	r2, r3
 8008994:	0093      	lsls	r3, r2, #2
 8008996:	461a      	mov	r2, r3
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	1a5b      	subs	r3, r3, r1
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	4a17      	ldr	r2, [pc, #92]	@ (8008a04 <prvReadDNSCache+0x94>)
 80089a6:	4413      	add	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d111      	bne.n	80089d6 <prvReadDNSCache+0x66>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4613      	mov	r3, r2
 80089ba:	011b      	lsls	r3, r3, #4
 80089bc:	1a9b      	subs	r3, r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	3310      	adds	r3, #16
 80089c2:	4a10      	ldr	r2, [pc, #64]	@ (8008a04 <prvReadDNSCache+0x94>)
 80089c4:	4413      	add	r3, r2
 80089c6:	3304      	adds	r3, #4
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	2102      	movs	r1, #2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7ff fd7d 	bl	80084cc <pxNew_AddrInfo>
 80089d2:	61b8      	str	r0, [r7, #24]
                       }
                       break;
 80089d4:	e000      	b.n	80089d8 <prvReadDNSCache+0x68>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 80089d6:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00d      	beq.n	80089fa <prvReadDNSCache+0x8a>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	331c      	adds	r3, #28
 80089e8:	617b      	str	r3, [r7, #20]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	3301      	adds	r3, #1
 80089ee:	61fb      	str	r3, [r7, #28]
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3c9      	bcc.n	800898c <prvReadDNSCache+0x1c>
        }
    }
 80089f8:	e000      	b.n	80089fc <prvReadDNSCache+0x8c>
                break;
 80089fa:	bf00      	nop
    }
 80089fc:	bf00      	nop
 80089fe:	3720      	adds	r7, #32
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20001014 	.word	0x20001014

08008a08 <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	@ 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xCallbackList );
 8008a16:	4b28      	ldr	r3, [pc, #160]	@ (8008ab8 <xDNSDoCallback+0xb0>)
 8008a18:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8008a2c:	f00c faa0 	bl	8014f70 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xCallbackList );
 8008a30:	4b22      	ldr	r3, [pc, #136]	@ (8008abc <xDNSDoCallback+0xb4>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	623b      	str	r3, [r7, #32]
 8008a36:	e029      	b.n	8008a8c <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) pxEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d101      	bne.n	8008a4c <xDNSDoCallback+0x44>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e000      	b.n	8008a4e <xDNSDoCallback+0x46>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d117      	bne.n	8008a86 <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3314      	adds	r3, #20
 8008a66:	4618      	mov	r0, r3
 8008a68:	f00b f891 	bl	8013b8e <uxListRemove>
                    vPortFree( pxCallback );
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f00e f9f1 	bl	8016e54 <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008a72:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <xDNSDoCallback+0xb4>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f001 fcec 	bl	800a458 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8008a84:	e006      	b.n	8008a94 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) pxEnd;
 8008a8c:	6a3a      	ldr	r2, [r7, #32]
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d1d1      	bne.n	8008a38 <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008a94:	f00c fa7a 	bl	8014f8c <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	69b9      	ldr	r1, [r7, #24]
 8008aaa:	4798      	blx	r3
        }

        return xResult;
 8008aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3728      	adds	r7, #40	@ 0x28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20001278 	.word	0x20001278
 8008abc:	20001270 	.word	0x20001270

08008ac0 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08c      	sub	sp, #48	@ 0x30
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xCallbackList );
 8008ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8008bc8 <vDNSCheckCallBack+0x108>)
 8008aca:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8008acc:	f107 030c 	add.w	r3, r7, #12
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f00a ffd2 	bl	8013a7a <vListInitialise>

        vTaskSuspendAll();
 8008ad6:	f00c fa4b 	bl	8014f70 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xCallbackList );
 8008ada:	4b3c      	ldr	r3, [pc, #240]	@ (8008bcc <vDNSCheckCallBack+0x10c>)
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ae0:	e02e      	b.n	8008b40 <vDNSCheckCallBack+0x80>
                 pxIterator != pxEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00d      	beq.n	8008b10 <vDNSCheckCallBack+0x50>
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d108      	bne.n	8008b10 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	3314      	adds	r3, #20
 8008b02:	4618      	mov	r0, r3
 8008b04:	f00b f843 	bl	8013b8e <uxListRemove>
                    vPortFree( pxCallback );
 8008b08:	6a38      	ldr	r0, [r7, #32]
 8008b0a:	f00e f9a3 	bl	8016e54 <vPortFree>
 8008b0e:	e017      	b.n	8008b40 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	3308      	adds	r3, #8
 8008b14:	6a3a      	ldr	r2, [r7, #32]
 8008b16:	4611      	mov	r1, r2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f00c fdb1 	bl	8015680 <xTaskCheckForTimeOut>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00d      	beq.n	8008b40 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	3314      	adds	r3, #20
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f00b f830 	bl	8013b8e <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	f103 0214 	add.w	r2, r3, #20
 8008b34:	f107 030c 	add.w	r3, r7, #12
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f00a ffca 	bl	8013ad4 <vListInsertEnd>
                 pxIterator != pxEnd; )
 8008b40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d1cc      	bne.n	8008ae2 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008b48:	f00c fa20 	bl	8014f8c <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d02f      	beq.n	8008bb2 <vDNSCheckCallBack+0xf2>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            pxEnd = listGET_END_MARKER( &xTempList );
 8008b52:	f107 030c 	add.w	r3, r7, #12
 8008b56:	3308      	adds	r3, #8
 8008b58:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xTempList );
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b5e:	e024      	b.n	8008baa <vDNSCheckCallBack+0xea>
                 pxIterator != pxEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8008b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d009      	beq.n	8008b88 <vDNSCheckCallBack+0xc8>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 8008b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b7a:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b80:	6911      	ldr	r1, [r2, #16]
 8008b82:	2200      	movs	r2, #0
 8008b84:	4798      	blx	r3
 8008b86:	e008      	b.n	8008b9a <vDNSCheckCallBack+0xda>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 8008b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b8e:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b94:	6911      	ldr	r1, [r2, #16]
 8008b96:	2200      	movs	r2, #0
 8008b98:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	3314      	adds	r3, #20
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f00a fff5 	bl	8013b8e <uxListRemove>
                vPortFree( pxCallback );
 8008ba4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ba6:	f00e f955 	bl	8016e54 <vPortFree>
                 pxIterator != pxEnd;
 8008baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d1d6      	bne.n	8008b60 <vDNSCheckCallBack+0xa0>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008bb2:	4b06      	ldr	r3, [pc, #24]	@ (8008bcc <vDNSCheckCallBack+0x10c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <vDNSCheckCallBack+0x100>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8008bba:	2000      	movs	r0, #0
 8008bbc:	f001 fc4c 	bl	800a458 <vIPSetDNSTimerEnableState>
        }
    }
 8008bc0:	bf00      	nop
 8008bc2:	3730      	adds	r7, #48	@ 0x30
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	20001278 	.word	0x20001278
 8008bcc:	20001270 	.word	0x20001270

08008bd0 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 8008bd4:	4802      	ldr	r0, [pc, #8]	@ (8008be0 <vDNSCallbackInitialise+0x10>)
 8008bd6:	f00a ff50 	bl	8013a7a <vListInitialise>
    }
 8008bda:	bf00      	nop
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20001270 	.word	0x20001270

08008be4 <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
        size_t DNS_ReadNameField( ParseSet_t * pxSet,
                                  size_t uxDestLen )
        {
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	@ 0x24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
            size_t uxNameLen = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	61fb      	str	r3, [r7, #28]
            size_t uxIndex = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61bb      	str	r3, [r7, #24]
            size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	613b      	str	r3, [r7, #16]
            const uint8_t * pucByte = pxSet->pucByte;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	60fb      	str	r3, [r7, #12]

            /* uxCount gets the values from pucByte and counts down to 0.
             * No need to have a different type than that of pucByte */
            size_t uxCount;

            if( uxSourceLen == ( size_t ) 0U )
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <DNS_ReadNameField+0x2a>
            {
                /* Return 0 value in case of error. */
                uxIndex = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61bb      	str	r3, [r7, #24]
 8008c0c:	e069      	b.n	8008ce2 <DNS_ReadNameField+0xfe>
            }

            /* Determine if the name is the fully coded name, or an offset to the name
             * elsewhere in the message. */
            else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	4413      	add	r3, r2
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c1c:	d144      	bne.n	8008ca8 <DNS_ReadNameField+0xc4>
            {
                /* Jump over the two byte offset. */
                if( uxSourceLen > sizeof( uint16_t ) )
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d903      	bls.n	8008c2c <DNS_ReadNameField+0x48>
                {
                    uxIndex += sizeof( uint16_t );
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	3302      	adds	r3, #2
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	e05a      	b.n	8008ce2 <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61bb      	str	r3, [r7, #24]
 8008c30:	e057      	b.n	8008ce2 <DNS_ReadNameField+0xfe>
                /* 'uxIndex' points to the full name. Walk over the string. */
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
                {
                    /* If this is not the first time through the loop, then add a
                     * separator in the output. */
                    if( ( uxNameLen > 0U ) )
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d008      	beq.n	8008c4a <DNS_ReadNameField+0x66>
                    {
                        /*
                         * uxNameLen can never be greater than uxDestLen, since there are checks
                         * outside this condition, so the check is removed.
                         */
                        pxSet->pcName[ uxNameLen ] = '.';
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	332c      	adds	r3, #44	@ 0x2c
 8008c40:	222e      	movs	r2, #46	@ 0x2e
 8008c42:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	3301      	adds	r3, #1
 8008c48:	61fb      	str	r3, [r7, #28]
                    }

                    /* Process the first/next sub-string. */
                    uxCount = ( size_t ) pucByte[ uxIndex ];
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	4413      	add	r3, r2
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	617b      	str	r3, [r7, #20]

                    /* uxIndex should point to the first character now, unless uxCount
                     * is an offset field. */
                    uxIndex++;
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	3301      	adds	r3, #1
 8008c58:	61bb      	str	r3, [r7, #24]

                    if( ( uxIndex + uxCount ) > uxSourceLen )
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	4413      	add	r3, r2
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d202      	bcs.n	8008c6c <DNS_ReadNameField+0x88>
                    {
                        uxIndex = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	61bb      	str	r3, [r7, #24]
                        break;
 8008c6a:	e027      	b.n	8008cbc <DNS_ReadNameField+0xd8>
                    }

                    if( ( uxNameLen + uxCount ) >= uxDestLen )
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	4413      	add	r3, r2
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d812      	bhi.n	8008c9e <DNS_ReadNameField+0xba>
                    {
                        uxIndex = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61bb      	str	r3, [r7, #24]
                        break;
 8008c7c:	e01e      	b.n	8008cbc <DNS_ReadNameField+0xd8>
                    {
                        /*
                         * uxNameLen can never be greater than uxDestLen, since there are checks
                         * outside this condition, so the check is removed.
                         */
                        pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	4413      	add	r3, r2
 8008c84:	7819      	ldrb	r1, [r3, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	332c      	adds	r3, #44	@ 0x2c
 8008c8e:	460a      	mov	r2, r1
 8008c90:	701a      	strb	r2, [r3, #0]
                        uxNameLen++;
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	3301      	adds	r3, #1
 8008c96:	61fb      	str	r3, [r7, #28]
                        uxIndex++;
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	61bb      	str	r3, [r7, #24]
                    while( uxCount-- != 0U )
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	1e5a      	subs	r2, r3, #1
 8008ca2:	617a      	str	r2, [r7, #20]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1ea      	bne.n	8008c7e <DNS_ReadNameField+0x9a>
                while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d205      	bcs.n	8008cbc <DNS_ReadNameField+0xd8>
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1ba      	bne.n	8008c32 <DNS_ReadNameField+0x4e>
                    }
                }

                /* Confirm that a fully formed name was found. */
                if( uxIndex > 0U )
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00f      	beq.n	8008ce2 <DNS_ReadNameField+0xfe>
                     * failing above check. Whenever we exit the loop otherwise, either
                     * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                     * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                     * case).
                     */
                    if( uxIndex < uxSourceLen )
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d209      	bcs.n	8008cde <DNS_ReadNameField+0xfa>
                    {
                        pxSet->pcName[ uxNameLen ] = '\0';
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	4413      	add	r3, r2
 8008cd0:	332c      	adds	r3, #44	@ 0x2c
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	701a      	strb	r2, [r3, #0]
                        uxIndex++;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	61bb      	str	r3, [r7, #24]
 8008cdc:	e001      	b.n	8008ce2 <DNS_ReadNameField+0xfe>
                    }
                    else
                    {
                        uxIndex = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61bb      	str	r3, [r7, #24]
                    }
                }
            }

            return uxIndex;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
        }
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3724      	adds	r7, #36	@ 0x24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	e03f      	b.n	8008d8e <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4413      	add	r3, r2
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d1c:	d11f      	bne.n	8008d5e <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d903      	bls.n	8008d2c <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3302      	adds	r3, #2
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	e030      	b.n	8008d8e <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	613b      	str	r3, [r7, #16]
 8008d30:	e02d      	b.n	8008d8e <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	4413      	add	r3, r2
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d908      	bls.n	8008d58 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
 8008d56:	e002      	b.n	8008d5e <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	613b      	str	r3, [r7, #16]
                    break;
 8008d5c:	e008      	b.n	8008d70 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	4413      	add	r3, r2
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <DNS_SkipNameField+0x80>
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d8e0      	bhi.n	8008d32 <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d103      	bne.n	8008d8a <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	3301      	adds	r3, #1
 8008d86:	613b      	str	r3, [r7, #16]
 8008d88:	e001      	b.n	8008d8e <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008d8e:	693b      	ldr	r3, [r7, #16]
    }
 8008d90:	4618      	mov	r0, r3
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b0a0      	sub	sp, #128	@ 0x80
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8008daa:	2301      	movs	r3, #1
 8008dac:	67bb      	str	r3, [r7, #120]	@ 0x78
        uint32_t ulIPAddress = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	677b      	str	r3, [r7, #116]	@ 0x74
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8008db2:	f107 0318 	add.w	r3, r7, #24
 8008db6:	2254      	movs	r2, #84	@ 0x54
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f00e fc1a 	bl	80175f4 <memset>
        xSet.usPortNumber = usPort;
 8008dc0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008dc4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8008dc6:	f107 0318 	add.w	r3, r7, #24
 8008dca:	334c      	adds	r3, #76	@ 0x4c
 8008dcc:	66bb      	str	r3, [r7, #104]	@ 0x68

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2b0b      	cmp	r3, #11
 8008dd6:	d802      	bhi.n	8008dde <DNS_ParseDNSReply+0x42>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ddc:	e08d      	b.n	8008efa <DNS_ParseDNSReply+0x15e>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	62bb      	str	r3, [r7, #40]	@ 0x28
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	61bb      	str	r3, [r7, #24]
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8008dee:	2300      	movs	r3, #0
 8008df0:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	623b      	str	r3, [r7, #32]
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	330c      	adds	r3, #12
 8008dfa:	627b      	str	r3, [r7, #36]	@ 0x24
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8008dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfe:	3b0c      	subs	r3, #12
 8008e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	889b      	ldrh	r3, [r3, #4]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	83bb      	strh	r3, [r7, #28]
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	88db      	ldrh	r3, [r3, #6]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	83fb      	strh	r3, [r7, #30]

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	885b      	ldrh	r3, [r3, #2]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f248 030f 	movw	r3, #32783	@ 0x800f
 8008e1e:	4013      	ands	r3, r2
 8008e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e24:	d112      	bne.n	8008e4c <DNS_ParseDNSReply+0xb0>
                {
                    xIsResponse = pdTRUE;
 8008e26:	2301      	movs	r3, #1
 8008e28:	66fb      	str	r3, [r7, #108]	@ 0x6c

                    if( xSet.usAnswers == 0U )
 8008e2a:	8bfb      	ldrh	r3, [r7, #30]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <DNS_ParseDNSReply+0x9a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8008e30:	2300      	movs	r3, #0
 8008e32:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8008e34:	e061      	b.n	8008efa <DNS_ParseDNSReply+0x15e>
                    }

                    if( xSet.usQuestions == 0U )
 8008e36:	8bbb      	ldrh	r3, [r7, #28]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10d      	bne.n	8008e58 <DNS_ParseDNSReply+0xbc>
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 8008e3c:	f107 0318 	add.w	r3, r7, #24
 8008e40:	211e      	movs	r1, #30
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff fece 	bl	8008be4 <DNS_ReadNameField>
 8008e48:	6738      	str	r0, [r7, #112]	@ 0x70
 8008e4a:	e005      	b.n	8008e58 <DNS_ParseDNSReply+0xbc>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8008e4c:	8bbb      	ldrh	r3, [r7, #28]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d102      	bne.n	8008e58 <DNS_ParseDNSReply+0xbc>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8008e56:	e050      	b.n	8008efa <DNS_ParseDNSReply+0x15e>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8008e5e:	e036      	b.n	8008ece <DNS_ParseDNSReply+0x132>
                        }
                    }
                    #endif

                    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                        if( x == 0U )
 8008e60:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d107      	bne.n	8008e78 <DNS_ParseDNSReply+0xdc>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8008e68:	f107 0318 	add.w	r3, r7, #24
 8008e6c:	211e      	movs	r1, #30
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff feb8 	bl	8008be4 <DNS_ReadNameField>
 8008e74:	6738      	str	r0, [r7, #112]	@ 0x70
 8008e76:	e006      	b.n	8008e86 <DNS_ParseDNSReply+0xea>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS || ipconfigUSE_MDNS || ipconfigUSE_LLMNR */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff ff36 	bl	8008cf0 <DNS_SkipNameField>
 8008e84:	6738      	str	r0, [r7, #112]	@ 0x70
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8008e86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d102      	bne.n	8008e92 <DNS_ParseDNSReply+0xf6>
                    {
                        xReturn = pdFALSE;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8008e90:	e022      	b.n	8008ed8 <DNS_ParseDNSReply+0x13c>
                    }

                    uxBytesRead += uxResult;
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e96:	4413      	add	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e9e:	4413      	add	r3, r2
 8008ea0:	627b      	str	r3, [r7, #36]	@ 0x24
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d906      	bls.n	8008ebe <DNS_ParseDNSReply+0x122>
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	627b      	str	r3, [r7, #36]	@ 0x24
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb8:	3b04      	subs	r3, #4
 8008eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ebc:	e002      	b.n	8008ec4 <DNS_ParseDNSReply+0x128>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
                        break;
 8008ec2:	e009      	b.n	8008ed8 <DNS_ParseDNSReply+0x13c>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008ec4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8008ece:	8bbb      	ldrh	r3, [r7, #28]
 8008ed0:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d3c3      	bcc.n	8008e60 <DNS_ParseDNSReply+0xc4>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8008ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <DNS_ParseDNSReply+0x15c>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d10a      	bne.n	8008efa <DNS_ParseDNSReply+0x15e>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8008ee4:	f107 0214 	add.w	r2, r7, #20
 8008ee8:	f107 0318 	add.w	r3, r7, #24
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 f813 	bl	8008f1a <parseDNSAnswer>
 8008ef4:	6778      	str	r0, [r7, #116]	@ 0x74
 8008ef6:	e000      	b.n	8008efa <DNS_ParseDNSReply+0x15e>
                    break;
 8008ef8:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008efa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d102      	bne.n	8008f06 <DNS_ParseDNSReply+0x16a>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008f00:	2300      	movs	r3, #0
 8008f02:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f04:	e004      	b.n	8008f10 <DNS_ParseDNSReply+0x174>
        }
        else if( xExpected == pdFALSE )
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <DNS_ParseDNSReply+0x174>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	677b      	str	r3, [r7, #116]	@ 0x74
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8008f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
    }
 8008f12:	4618      	mov	r0, r3
 8008f14:	3780      	adds	r7, #128	@ 0x80
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8008f1a:	b590      	push	{r4, r7, lr}
 8008f1c:	b0a7      	sub	sp, #156	@ 0x9c
 8008f1e:	af02      	add	r7, sp, #8
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	60b9      	str	r1, [r7, #8]
 8008f24:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008f26:	2300      	movs	r3, #0
 8008f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008f44:	e16b      	b.n	800921e <parseDNSAnswer+0x304>
        {
            BaseType_t xDoAccept = pdFALSE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008f4e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008f52:	429a      	cmp	r2, r3
 8008f54:	f240 816b 	bls.w	800922e <parseDNSAnswer+0x314>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f7ff fec4 	bl	8008cf0 <DNS_SkipNameField>
 8008f68:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8008f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d103      	bne.n	8008f78 <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008f76:	e15b      	b.n	8009230 <parseDNSAnswer+0x316>
            }

            if( uxBytesRead != NULL )
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f84:	441a      	add	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f90:	441a      	add	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	695a      	ldr	r2, [r3, #20]
 8008f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f9c:	1ad2      	subs	r2, r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d803      	bhi.n	8008fb2 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008fb0:	e13e      	b.n	8009230 <parseDNSAnswer+0x316>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 fd77 	bl	800aaaa <usChar2u16>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8b1b      	ldrh	r3, [r3, #24]
 8008fc8:	2b1c      	cmp	r3, #28
 8008fca:	d10c      	bne.n	8008fe6 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2210      	movs	r2, #16
 8008fd0:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	695a      	ldr	r2, [r3, #20]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	330a      	adds	r3, #10
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d323      	bcc.n	8009028 <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fe4:	e020      	b.n	8009028 <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8b1b      	ldrh	r3, [r3, #24]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d11c      	bne.n	8009028 <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	695a      	ldr	r2, [r3, #20]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	330a      	adds	r3, #10
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d312      	bcc.n	8009028 <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	330a      	adds	r3, #10
 8009008:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800900a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800900e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	461a      	mov	r2, r3
 8009016:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009018:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800901a:	f00e fbc6 	bl	80177aa <memcpy>

                    if( ulTestAddress != 0U )
 800901e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8009024:	2301      	movs	r3, #1
 8009026:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 8009028:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 80bf 	beq.w	80091ae <parseDNSAnswer+0x294>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8009036:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009038:	891b      	ldrh	r3, [r3, #8]
 800903a:	b29a      	uxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8009040:	b29b      	uxth	r3, r3
 8009042:	429a      	cmp	r2, r3
 8009044:	f040 80a1 	bne.w	800918a <parseDNSAnswer+0x270>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	2b10      	cmp	r3, #16
 800904e:	d11c      	bne.n	800908a <parseDNSAnswer+0x170>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 8009056:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	6859      	ldr	r1, [r3, #4]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                            if( ppxAddressInfo != NULL )
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d009      	beq.n	800907e <parseDNSAnswer+0x164>
                            {
                                pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	332c      	adds	r3, #44	@ 0x2c
 800906e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009072:	210a      	movs	r1, #10
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff fa29 	bl	80084cc <pxNew_AddrInfo>
 800907a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                            }
                        #endif

                        xIP_Address.xIs_IPv6 = pdTRUE;
 800907e:	2301      	movs	r3, #1
 8009080:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	61da      	str	r2, [r3, #28]
 8009088:	e021      	b.n	80090ce <parseDNSAnswer+0x1b4>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	330a      	adds	r3, #10
 8009090:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	331c      	adds	r3, #28
 8009096:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	461a      	mov	r2, r3
 800909e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80090a0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80090a2:	f00e fb82 	bl	80177aa <memcpy>

                        #if ( ( ipconfigUSE_DNS_CACHE != 0 ) || ( ipconfigDNS_USE_CALLBACKS != 0 ) || ( ipconfigUSE_MDNS != 0 ) || ( ipconfigUSE_LLMNR != 0 ) )
                            if( ppxAddressInfo != NULL )
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <parseDNSAnswer+0x1aa>
                            {
                                const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	331c      	adds	r3, #28
 80090b0:	65bb      	str	r3, [r7, #88]	@ 0x58

                                pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	332c      	adds	r3, #44	@ 0x2c
 80090b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090b8:	2102      	movs	r1, #2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff fa06 	bl	80084cc <pxNew_AddrInfo>
 80090c0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                            }
                        #endif

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 80090ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d013      	beq.n	80090fe <parseDNSAnswer+0x1e4>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d104      	bne.n	80090e8 <parseDNSAnswer+0x1ce>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	e004      	b.n	80090f2 <parseDNSAnswer+0x1d8>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090f0:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 80090f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090f6:	f103 021c 	add.w	r2, r3, #28
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	651a      	str	r2, [r3, #80]	@ 0x50

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <parseDNSAnswer+0x1f0>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	e000      	b.n	800910c <parseDNSAnswer+0x1f2>
 800910a:	2300      	movs	r3, #0
 800910c:	4619      	mov	r1, r3
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7ff fc7a 	bl	8008a08 <xDNSDoCallback>
 8009114:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 8009116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <parseDNSAnswer+0x208>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2201      	movs	r2, #1
 8009120:	629a      	str	r2, [r3, #40]	@ 0x28
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d011      	beq.n	800914e <parseDNSAnswer+0x234>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8009130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009132:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 8009134:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009138:	2300      	movs	r3, #0
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	2300      	movs	r3, #0
 800913e:	f7ff fa5a 	bl	80085f6 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009146:	3301      	adds	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8b1b      	ldrh	r3, [r3, #24]
 8009152:	2b1c      	cmp	r3, #28
 8009154:	d108      	bne.n	8009168 <parseDNSAnswer+0x24e>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 8009156:	f107 0214 	add.w	r2, r7, #20
 800915a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800915e:	2328      	movs	r3, #40	@ 0x28
 8009160:	200a      	movs	r0, #10
 8009162:	f003 f8af 	bl	800c2c4 <FreeRTOS_inet_ntop>
 8009166:	e008      	b.n	800917a <parseDNSAnswer+0x260>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 800916e:	f107 0214 	add.w	r2, r7, #20
 8009172:	2328      	movs	r3, #40	@ 0x28
 8009174:	2002      	movs	r0, #2
 8009176:	f003 f8a5 	bl	800c2c4 <FreeRTOS_inet_ntop>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 800917a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800917e:	2b00      	cmp	r3, #0
 8009180:	d103      	bne.n	800918a <parseDNSAnswer+0x270>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	330a      	adds	r3, #10
 8009194:	441a      	add	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	695a      	ldr	r2, [r3, #20]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	f1a3 020a 	sub.w	r2, r3, #10
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	615a      	str	r2, [r3, #20]
 80091ac:	e032      	b.n	8009214 <parseDNSAnswer+0x2fa>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	2b09      	cmp	r3, #9
 80091b4:	d92e      	bls.n	8009214 <parseDNSAnswer+0x2fa>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f103 020a 	add.w	r2, r3, #10
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	f1a3 020a 	sub.w	r2, r3, #10
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 80091d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091d6:	7a1a      	ldrb	r2, [r3, #8]
 80091d8:	7a5b      	ldrb	r3, [r3, #9]
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	4313      	orrs	r3, r2
 80091de:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	695a      	ldr	r2, [r3, #20]
 80091e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d30e      	bcc.n	800920c <parseDNSAnswer+0x2f2>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80091f6:	441a      	add	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	695a      	ldr	r2, [r3, #20]
 8009200:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009204:	1ad2      	subs	r2, r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	615a      	str	r2, [r3, #20]
 800920a:	e003      	b.n	8009214 <parseDNSAnswer+0x2fa>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 800920c:	2300      	movs	r3, #0
 800920e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8009212:	e00d      	b.n	8009230 <parseDNSAnswer+0x316>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8009214:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009218:	3301      	adds	r3, #1
 800921a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	88db      	ldrh	r3, [r3, #6]
 8009222:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009226:	429a      	cmp	r2, r3
 8009228:	f4ff ae8d 	bcc.w	8008f46 <parseDNSAnswer+0x2c>
 800922c:	e000      	b.n	8009230 <parseDNSAnswer+0x316>
                break;
 800922e:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 8009230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <parseDNSAnswer+0x324>
 8009238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800923c:	e000      	b.n	8009240 <parseDNSAnswer+0x326>
 800923e:	2300      	movs	r3, #0
    }
 8009240:	4618      	mov	r0, r3
 8009242:	3794      	adds	r7, #148	@ 0x94
 8009244:	46bd      	mov	sp, r7
 8009246:	bd90      	pop	{r4, r7, pc}

08009248 <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009258:	2b29      	cmp	r3, #41	@ 0x29
 800925a:	d80d      	bhi.n	8009278 <ProcessICMPPacket+0x30>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	b672      	cpsid	i
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	b662      	cpsie	i
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	e7fd      	b.n	8009274 <ProcessICMPPacket+0x2c>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927c:	2b29      	cmp	r3, #41	@ 0x29
 800927e:	d915      	bls.n	80092ac <ProcessICMPPacket+0x64>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009284:	613b      	str	r3, [r7, #16]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800928c:	2b00      	cmp	r3, #0
 800928e:	d008      	beq.n	80092a2 <ProcessICMPPacket+0x5a>
 8009290:	2b08      	cmp	r3, #8
 8009292:	d10a      	bne.n	80092aa <ProcessICMPPacket+0x62>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	6938      	ldr	r0, [r7, #16]
 8009298:	f000 f80d 	bl	80092b6 <prvProcessICMPEchoRequest>
 800929c:	4603      	mov	r3, r0
 800929e:	75fb      	strb	r3, [r7, #23]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 80092a0:	e004      	b.n	80092ac <ProcessICMPPacket+0x64>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 80092a2:	6938      	ldr	r0, [r7, #16]
 80092a4:	f000 f833 	bl	800930e <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 80092a8:	e000      	b.n	80092ac <ProcessICMPPacket+0x64>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 80092aa:	bf00      	nop
            }
        }

        return eReturn;
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
    }
 80092ae:	4618      	mov	r0, r3
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80092b6:	b480      	push	{r7}
 80092b8:	b087      	sub	sp, #28
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3322      	adds	r3, #34	@ 0x22
 80092c4:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	330e      	adds	r3, #14
 80092ca:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2240      	movs	r2, #64	@ 0x40
 80092ea:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2200      	movs	r2, #0
 80092f0:	719a      	strb	r2, [r3, #6]
 80092f2:	2200      	movs	r2, #0
 80092f4:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2200      	movs	r2, #0
 80092fa:	709a      	strb	r2, [r3, #2]
 80092fc:	2200      	movs	r2, #0
 80092fe:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8009300:	2302      	movs	r3, #2
    }
 8009302:	4618      	mov	r0, r3
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 800930e:	b580      	push	{r7, lr}
 8009310:	b086      	sub	sp, #24
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 8009316:	2300      	movs	r3, #0
 8009318:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	7c1a      	ldrb	r2, [r3, #16]
 800931e:	7c5b      	ldrb	r3, [r3, #17]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	4313      	orrs	r3, r2
 8009324:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8009326:	89fb      	ldrh	r3, [r7, #14]
 8009328:	3b14      	subs	r3, #20
 800932a:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 800932c:	89fb      	ldrh	r3, [r7, #14]
 800932e:	3b08      	subs	r3, #8
 8009330:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	332a      	adds	r3, #42	@ 0x2a
 800933a:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 800933c:	2300      	movs	r3, #0
 800933e:	82bb      	strh	r3, [r7, #20]
 8009340:	e00c      	b.n	800935c <prvProcessICMPEchoReply+0x4e>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b78      	cmp	r3, #120	@ 0x78
 8009348:	d002      	beq.n	8009350 <prvProcessICMPEchoReply+0x42>
            {
                eStatus = eInvalidData;
 800934a:	2302      	movs	r3, #2
 800934c:	75fb      	strb	r3, [r7, #23]
                break;
 800934e:	e009      	b.n	8009364 <prvProcessICMPEchoReply+0x56>
            }

            pucByte++;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	3301      	adds	r3, #1
 8009354:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009356:	8abb      	ldrh	r3, [r7, #20]
 8009358:	3301      	adds	r3, #1
 800935a:	82bb      	strh	r3, [r7, #20]
 800935c:	8aba      	ldrh	r2, [r7, #20]
 800935e:	89fb      	ldrh	r3, [r7, #14]
 8009360:	429a      	cmp	r2, r3
 8009362:	d3ee      	bcc.n	8009342 <prvProcessICMPEchoReply+0x34>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009368:	b29a      	uxth	r2, r3
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fe36 	bl	8009fe0 <vApplicationPingReplyHook>
    }
 8009374:	bf00      	nop
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8009384:	f000 f8e4 	bl	8009550 <prvIPTask_Initialise>
    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 8009388:	f000 f802 	bl	8009390 <prvProcessIPEventsAndTimers>
 800938c:	e7fc      	b.n	8009388 <prvIPTask+0xc>
	...

08009390 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b08e      	sub	sp, #56	@ 0x38
 8009394:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the Resolution, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 8009396:	f000 fec5 	bl	800a124 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 800939a:	f000 fe67 	bl	800a06c <xCalculateSleepTime>
 800939e:	6378      	str	r0, [r7, #52]	@ 0x34

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80093a0:	4b69      	ldr	r3, [pc, #420]	@ (8009548 <prvProcessIPEventsAndTimers+0x1b8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f107 011c 	add.w	r1, r7, #28
 80093a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00a ff50 	bl	8014250 <xQueueReceive>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 80093b6:	23ff      	movs	r3, #255	@ 0xff
 80093b8:	773b      	strb	r3, [r7, #28]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 80093ba:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80093be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c2:	d00d      	beq.n	80093e0 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 80093c4:	4b60      	ldr	r3, [pc, #384]	@ (8009548 <prvProcessIPEventsAndTimers+0x1b8>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f00b f962 	bl	8014692 <uxQueueSpacesAvailable>
 80093ce:	6338      	str	r0, [r7, #48]	@ 0x30

            if( uxQueueMinimumSpace > uxCount )
 80093d0:	4b5e      	ldr	r3, [pc, #376]	@ (800954c <prvProcessIPEventsAndTimers+0x1bc>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d202      	bcs.n	80093e0 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 80093da:	4a5c      	ldr	r2, [pc, #368]	@ (800954c <prvProcessIPEventsAndTimers+0x1bc>)
 80093dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093de:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 80093e0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80093e4:	3301      	adds	r3, #1
 80093e6:	2b0f      	cmp	r3, #15
 80093e8:	f200 80a4 	bhi.w	8009534 <prvProcessIPEventsAndTimers+0x1a4>
 80093ec:	a201      	add	r2, pc, #4	@ (adr r2, 80093f4 <prvProcessIPEventsAndTimers+0x64>)
 80093ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f2:	bf00      	nop
 80093f4:	08009535 	.word	0x08009535
 80093f8:	08009435 	.word	0x08009435
 80093fc:	0800943f 	.word	0x0800943f
 8009400:	08009449 	.word	0x08009449
 8009404:	08009455 	.word	0x08009455
 8009408:	08009535 	.word	0x08009535
 800940c:	080094bb 	.word	0x080094bb
 8009410:	080094c5 	.word	0x080094c5
 8009414:	080094ed 	.word	0x080094ed
 8009418:	080094f5 	.word	0x080094f5
 800941c:	08009519 	.word	0x08009519
 8009420:	0800945b 	.word	0x0800945b
 8009424:	080094b1 	.word	0x080094b1
 8009428:	080094cf 	.word	0x080094cf
 800942c:	08009535 	.word	0x08009535
 8009430:	0800951f 	.word	0x0800951f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	4618      	mov	r0, r3
 8009438:	f001 f8da 	bl	800a5f0 <prvProcessNetworkDownEvent>
            break;
 800943c:	e07d      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	4618      	mov	r0, r3
 8009442:	f000 f91a 	bl	800967a <prvHandleEthernetPacket>
            break;
 8009446:	e078      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	2101      	movs	r1, #1
 800944c:	4618      	mov	r0, r3
 800944e:	f000 f922 	bl	8009696 <prvForwardTxPacket>
            break;
 8009452:	e072      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>

        case eARPTimerEvent:
            /* The ARP Resolution timer has expired, process the cache. */
            #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                vARPAgeCache();
 8009454:	f7fe fe86 	bl	8008164 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */
            break;
 8009458:	e06f      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	627b      	str	r3, [r7, #36]	@ 0x24
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 800945e:	2318      	movs	r3, #24
 8009460:	713b      	strb	r3, [r7, #4]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	7a1b      	ldrb	r3, [r3, #8]
 8009466:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d108      	bne.n	8009482 <prvProcessIPEventsAndTimers+0xf2>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        xAddress.sin_family = FREERTOS_AF_INET;
 8009470:	2302      	movs	r3, #2
 8009472:	717b      	strb	r3, [r7, #5]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009478:	60fb      	str	r3, [r7, #12]
                        /* 'ulLocalAddress' will be set again by vSocketBind(). */
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	2200      	movs	r2, #0
 800947e:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 8009480:	e000      	b.n	8009484 <prvProcessIPEventsAndTimers+0xf4>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009482:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009488:	80fb      	strh	r3, [r7, #6]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948c:	2200      	movs	r2, #0
 800948e:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009490:	1d39      	adds	r1, r7, #4
 8009492:	2300      	movs	r3, #0
 8009494:	2218      	movs	r2, #24
 8009496:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009498:	f002 f9e8 	bl	800b86c <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f043 0210 	orr.w	r2, r3, #16
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 80094a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094aa:	f002 ff49 	bl	800c340 <vSocketWakeUpUser>
            break;
 80094ae:	e044      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f002 fa54 	bl	800b960 <vSocketClose>
            break;
 80094b8:	e03f      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	4618      	mov	r0, r3
 80094be:	f007 fce3 	bl	8010e88 <vProcessGeneratedUDPPacket>
            break;
 80094c2:	e03a      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f896 	bl	80095f8 <prvCallDHCP_RA_Handler>
            break;
 80094cc:	e035      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>
             * vSocketSelect() will check which sockets actually have an event
             * and update the socket field xSocketBits. */
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            #if ( ipconfigSELECT_USES_NOTIFY != 0 )
                {
                    SocketSelectMessage_t * pxMessage = ( ( SocketSelectMessage_t * ) xReceivedEvent.pvData );
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	62bb      	str	r3, [r7, #40]	@ 0x28
                    vSocketSelect( pxMessage->pxSocketSet );
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f003 fc20 	bl	800cd1c <vSocketSelect>
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
 80094dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	2300      	movs	r3, #0
 80094e2:	2202      	movs	r2, #2
 80094e4:	2100      	movs	r1, #0
 80094e6:	f00c fc3b 	bl	8015d60 <xTaskGenericNotify>
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80094ea:	e026      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 80094ec:	2001      	movs	r0, #1
 80094ee:	f000 ff5f 	bl	800a3b0 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 80094f2:	e022      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 80094f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094fa:	f004 fb49 	bl	800db90 <xTCPCheckNewClient>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d019      	beq.n	8009538 <prvProcessIPEventsAndTimers+0x1a8>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f043 0204 	orr.w	r2, r3, #4
 800950c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8009510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009512:	f002 ff15 	bl	800c340 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8009516:	e00f      	b.n	8009538 <prvProcessIPEventsAndTimers+0x1a8>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8009518:	f003 fb0e 	bl	800cb38 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800951c:	e00d      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	62fb      	str	r3, [r7, #44]	@ 0x2c

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4618      	mov	r0, r3
 8009528:	f00a fa4d 	bl	80139c6 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800952c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800952e:	f00d fc91 	bl	8016e54 <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8009532:	e002      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8009534:	bf00      	nop
 8009536:	e000      	b.n	800953a <prvProcessIPEventsAndTimers+0x1aa>
            break;
 8009538:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 800953a:	f000 f833 	bl	80095a4 <prvIPTask_CheckPendingEvents>
}
 800953e:	bf00      	nop
 8009540:	3738      	adds	r7, #56	@ 0x38
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20001288 	.word	0x20001288
 800954c:	20000010 	.word	0x20000010

08009550 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8009556:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800955a:	f000 fedf 	bl	800a31c <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800955e:	4b0f      	ldr	r3, [pc, #60]	@ (800959c <prvIPTask_Initialise+0x4c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	607b      	str	r3, [r7, #4]
 8009564:	e005      	b.n	8009572 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f8aa 	bl	80096c0 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009570:	607b      	str	r3, [r7, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f6      	bne.n	8009566 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800957c:	f000 feb2 	bl	800a2e4 <vTCPTimerReload>
    }
    #endif

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        /* Mark the ARP timer as inactive since we are not waiting on any resolution as of now. */
        vIPSetARPResolutionTimerEnableState( pdFALSE );
 8009580:	2000      	movs	r0, #0
 8009582:	f000 ff4f 	bl	800a424 <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8009586:	f7fe ff9b 	bl	80084c0 <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 800958a:	f7ff f849 	bl	8008620 <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800958e:	4b04      	ldr	r3, [pc, #16]	@ (80095a0 <prvIPTask_Initialise+0x50>)
 8009590:	2201      	movs	r2, #1
 8009592:	601a      	str	r2, [r3, #0]
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20002608 	.word	0x20002608
 80095a0:	20001298 	.word	0x20001298

080095a4 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 80095aa:	4b12      	ldr	r3, [pc, #72]	@ (80095f4 <prvIPTask_CheckPendingEvents+0x50>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01c      	beq.n	80095ec <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 80095b2:	4b10      	ldr	r3, [pc, #64]	@ (80095f4 <prvIPTask_CheckPendingEvents+0x50>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 80095b8:	f001 fe4a 	bl	800b250 <FreeRTOS_FirstNetworkInterface>
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	e012      	b.n	80095e6 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	7f1b      	ldrb	r3, [r3, #28]
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d007      	beq.n	80095de <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 f80e 	bl	800a5f0 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	7f13      	ldrb	r3, [r2, #28]
 80095d8:	f023 0302 	bic.w	r3, r3, #2
 80095dc:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f001 fe7c 	bl	800b2dc <FreeRTOS_NextNetworkInterface>
 80095e4:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e9      	bne.n	80095c0 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	20001290 	.word	0x20001290

080095f8 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8009600:	2300      	movs	r3, #0
 8009602:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800960a:	f003 0304 	and.w	r3, r3, #4
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8009614:	2301      	movs	r3, #1
 8009616:	60fb      	str	r3, [r7, #12]
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8009618:	bf00      	nop
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8009624:	b480      	push	{r7}
 8009626:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8009628:	4b03      	ldr	r3, [pc, #12]	@ (8009638 <FreeRTOS_GetIPTaskHandle+0x14>)
 800962a:	681b      	ldr	r3, [r3, #0]
}
 800962c:	4618      	mov	r0, r3
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20001294 	.word	0x20001294

0800963c <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800964a:	f043 0310 	orr.w	r3, r3, #16
 800964e:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
        }
    #else
        {
            vApplicationIPNetworkEventHook_Multi( eNetworkUp, pxEndPoint );
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	2000      	movs	r0, #0
 8009656:	f000 fcd1 	bl	8009ffc <vApplicationIPNetworkEventHook_Multi>
        }
    #endif
    #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

    /* Set remaining time to 0 so it will become active immediately. */
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d103      	bne.n	8009672 <vIPNetworkUpCalls+0x36>
        #endif
    }
    else
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
            vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800966a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800966e:	f000 fe47 	bl	800a300 <vARPTimerReload>
        #endif
    }
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f99f 	bl	80099cc <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	6879      	ldr	r1, [r7, #4]
 80096b6:	4798      	blx	r3
    }
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	7f13      	ldrb	r3, [r2, #28]
 80096d0:	f023 0301 	bic.w	r3, r3, #1
 80096d4:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 80096d6:	2300      	movs	r3, #0
 80096d8:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 80096de:	f107 030c 	add.w	r3, r7, #12
 80096e2:	6979      	ldr	r1, [r7, #20]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f899 	bl	800981c <xSendEventStructToIPTask>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d008      	beq.n	8009702 <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	7f13      	ldrb	r3, [r2, #28]
 80096f4:	f043 0302 	orr.w	r3, r3, #2
 80096f8:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 80096fa:	4b06      	ldr	r3, [pc, #24]	@ (8009714 <FreeRTOS_NetworkDown+0x54>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009700:	e004      	b.n	800970c <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	7f13      	ldrb	r3, [r2, #28]
 8009706:	f023 0302 	bic.w	r3, r3, #2
 800970a:	7713      	strb	r3, [r2, #28]
}
 800970c:	bf00      	nop
 800970e:	3718      	adds	r7, #24
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20001290 	.word	0x20001290

08009718 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdFALSE;
 800971e:	2300      	movs	r3, #0
 8009720:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8009722:	f001 fd95 	bl	800b250 <FreeRTOS_FirstNetworkInterface>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10d      	bne.n	8009748 <FreeRTOS_IPInit_Multi+0x30>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009730:	b672      	cpsid	i
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	b662      	cpsie	i
 8009740:	603b      	str	r3, [r7, #0]
}
 8009742:	bf00      	nop
 8009744:	bf00      	nop
 8009746:	e7fd      	b.n	8009744 <FreeRTOS_IPInit_Multi+0x2c>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8009748:	f000 ffdc 	bl	800a704 <vPreCheckConfigs>
    /* Attempt to create the queue used to communicate with the IP task. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        static StaticQueue_t xNetworkEventStaticQueue;
        static uint8_t ucNetworkEventQueueStorageArea[ ipconfigEVENT_QUEUE_LENGTH * sizeof( IPStackEvent_t ) ];
        xNetworkEventQueue = xQueueCreateStatic( ipconfigEVENT_QUEUE_LENGTH,
 800974c:	2300      	movs	r3, #0
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	4b1e      	ldr	r3, [pc, #120]	@ (80097cc <FreeRTOS_IPInit_Multi+0xb4>)
 8009752:	4a1f      	ldr	r2, [pc, #124]	@ (80097d0 <FreeRTOS_IPInit_Multi+0xb8>)
 8009754:	2108      	movs	r1, #8
 8009756:	2041      	movs	r0, #65	@ 0x41
 8009758:	f00a fab0 	bl	8013cbc <xQueueGenericCreateStatic>
 800975c:	4603      	mov	r3, r0
 800975e:	4a1d      	ldr	r2, [pc, #116]	@ (80097d4 <FreeRTOS_IPInit_Multi+0xbc>)
 8009760:	6013      	str	r3, [r2, #0]
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
        configASSERT( xNetworkEventQueue != NULL );
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8009762:	4b1c      	ldr	r3, [pc, #112]	@ (80097d4 <FreeRTOS_IPInit_Multi+0xbc>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d02b      	beq.n	80097c2 <FreeRTOS_IPInit_Multi+0xaa>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800976a:	4b1a      	ldr	r3, [pc, #104]	@ (80097d4 <FreeRTOS_IPInit_Multi+0xbc>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	491a      	ldr	r1, [pc, #104]	@ (80097d8 <FreeRTOS_IPInit_Multi+0xc0>)
 8009770:	4618      	mov	r0, r3
 8009772:	f00b f903 	bl	801497c <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8009776:	f007 fdc3 	bl	8011300 <xNetworkBuffersInitialise>
 800977a:	4603      	mov	r3, r0
 800977c:	2b01      	cmp	r3, #1
 800977e:	d118      	bne.n	80097b2 <FreeRTOS_IPInit_Multi+0x9a>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009780:	f001 fe18 	bl	800b3b4 <vNetworkSocketsInit>
            /* Create the task that processes Ethernet and stack events. */
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                static StaticTask_t xIPTaskBuffer;
                static StackType_t xIPTaskStack[ ipconfigIP_TASK_STACK_SIZE_WORDS ];
                xIPTaskHandle = xTaskCreateStatic( &prvIPTask,
 8009784:	4b15      	ldr	r3, [pc, #84]	@ (80097dc <FreeRTOS_IPInit_Multi+0xc4>)
 8009786:	9302      	str	r3, [sp, #8]
 8009788:	4b15      	ldr	r3, [pc, #84]	@ (80097e0 <FreeRTOS_IPInit_Multi+0xc8>)
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	2336      	movs	r3, #54	@ 0x36
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	2300      	movs	r3, #0
 8009792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009796:	4913      	ldr	r1, [pc, #76]	@ (80097e4 <FreeRTOS_IPInit_Multi+0xcc>)
 8009798:	4813      	ldr	r0, [pc, #76]	@ (80097e8 <FreeRTOS_IPInit_Multi+0xd0>)
 800979a:	f00b f977 	bl	8014a8c <xTaskCreateStatic>
 800979e:	4603      	mov	r3, r0
 80097a0:	4a12      	ldr	r2, [pc, #72]	@ (80097ec <FreeRTOS_IPInit_Multi+0xd4>)
 80097a2:	6013      	str	r3, [r2, #0]
                                                   NULL,
                                                   ipconfigIP_TASK_PRIORITY,
                                                   xIPTaskStack,
                                                   &xIPTaskBuffer );

                if( xIPTaskHandle != NULL )
 80097a4:	4b11      	ldr	r3, [pc, #68]	@ (80097ec <FreeRTOS_IPInit_Multi+0xd4>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00a      	beq.n	80097c2 <FreeRTOS_IPInit_Multi+0xaa>
                {
                    xReturn = pdTRUE;
 80097ac:	2301      	movs	r3, #1
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	e007      	b.n	80097c2 <FreeRTOS_IPInit_Multi+0xaa>
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 80097b2:	4b08      	ldr	r3, [pc, #32]	@ (80097d4 <FreeRTOS_IPInit_Multi+0xbc>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f00a ff91 	bl	80146de <vQueueDelete>
            xNetworkEventQueue = NULL;
 80097bc:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <FreeRTOS_IPInit_Multi+0xbc>)
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
    }

    return xReturn;
 80097c2:	687b      	ldr	r3, [r7, #4]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	200014a4 	.word	0x200014a4
 80097d0:	2000129c 	.word	0x2000129c
 80097d4:	20001288 	.word	0x20001288
 80097d8:	08018788 	.word	0x08018788
 80097dc:	200024f4 	.word	0x200024f4
 80097e0:	200014f4 	.word	0x200014f4
 80097e4:	08018790 	.word	0x08018790
 80097e8:	0800937d 	.word	0x0800937d
 80097ec:	20001294 	.word	0x20001294

080097f0 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009802:	2300      	movs	r3, #0
 8009804:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009806:	f107 030c 	add.w	r3, r7, #12
 800980a:	6979      	ldr	r1, [r7, #20]
 800980c:	4618      	mov	r0, r3
 800980e:	f000 f805 	bl	800981c <xSendEventStructToIPTask>
 8009812:	4603      	mov	r3, r0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800982a:	f000 fb4d 	bl	8009ec8 <xIPIsNetworkTaskReady>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d107      	bne.n	8009844 <xSendEventStructToIPTask+0x28>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f993 3000 	ldrsb.w	r3, [r3]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 800983e:	2300      	movs	r3, #0
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	e02b      	b.n	800989c <xSendEventStructToIPTask+0x80>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009844:	2301      	movs	r3, #1
 8009846:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f993 3000 	ldrsb.w	r3, [r3]
 800984e:	2b07      	cmp	r3, #7
 8009850:	d10c      	bne.n	800986c <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009852:	2001      	movs	r0, #1
 8009854:	f000 fdac 	bl	800a3b0 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009858:	4b13      	ldr	r3, [pc, #76]	@ (80098a8 <xSendEventStructToIPTask+0x8c>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f00a fef7 	bl	8014650 <uxQueueMessagesWaiting>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 8009868:	2300      	movs	r3, #0
 800986a:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d012      	beq.n	8009898 <xSendEventStructToIPTask+0x7c>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009872:	f000 fea6 	bl	800a5c2 <xIsCallingFromIPTask>
 8009876:	4603      	mov	r3, r0
 8009878:	2b01      	cmp	r3, #1
 800987a:	d104      	bne.n	8009886 <xSendEventStructToIPTask+0x6a>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009886:	4b08      	ldr	r3, [pc, #32]	@ (80098a8 <xSendEventStructToIPTask+0x8c>)
 8009888:	6818      	ldr	r0, [r3, #0]
 800988a:	2300      	movs	r3, #0
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	f00a fb30 	bl	8013ef4 <xQueueGenericSend>
 8009894:	6178      	str	r0, [r7, #20]
 8009896:	e001      	b.n	800989c <xSendEventStructToIPTask+0x80>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009898:	2301      	movs	r3, #1
 800989a:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 800989c:	697b      	ldr	r3, [r7, #20]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20001288 	.word	0x20001288

080098ac <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80098b4:	2300      	movs	r3, #0
 80098b6:	75fb      	strb	r3, [r7, #23]

    do
    {
        const EthernetHeader_t * pxEthernetHeader = NULL;
 80098b8:	2300      	movs	r3, #0
 80098ba:	613b      	str	r3, [r7, #16]
        const NetworkEndPoint_t * pxEndPoint = NULL;
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]
        uint16_t usFrameType;

        /* First, check the packet buffer is non-null. */
        if( pucEthernetBuffer == NULL )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d067      	beq.n	8009996 <eConsiderFrameForProcessing+0xea>

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	613b      	str	r3, [r7, #16]
        usFrameType = pxEthernetHeader->usFrameType;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	7b1a      	ldrb	r2, [r3, #12]
 80098ce:	7b5b      	ldrb	r3, [r3, #13]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	4313      	orrs	r3, r2
 80098d4:	817b      	strh	r3, [r7, #10]

        /* Second, filter based on ethernet frame type. */
        /* The frame type field in the Ethernet header must have a value greater than 0x0600. */
        if( ipIS_ETHERNET_FRAME_TYPE_INVALID( FreeRTOS_ntohs( usFrameType ) ) )
 80098d6:	897b      	ldrh	r3, [r7, #10]
 80098d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80098dc:	d95d      	bls.n	800999a <eConsiderFrameForProcessing+0xee>
                break;
            #else
                /* filtering is disabled - continue filter checks. */
            #endif
        }
        else if( usFrameType == ipARP_FRAME_TYPE )
 80098de:	897b      	ldrh	r3, [r7, #10]
 80098e0:	f640 0206 	movw	r2, #2054	@ 0x806
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d008      	beq.n	80098fa <eConsiderFrameForProcessing+0x4e>
                break;
            #else
                /*  IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( usFrameType == ipIPv4_FRAME_TYPE )
 80098e8:	897b      	ldrh	r3, [r7, #10]
 80098ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098ee:	d004      	beq.n	80098fa <eConsiderFrameForProcessing+0x4e>
                break;
            #else
                /* IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( usFrameType == ipIPv6_FRAME_TYPE )
 80098f0:	897b      	ldrh	r3, [r7, #10]
 80098f2:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 80098f6:	4293      	cmp	r3, r2

                /* Processing custom Ethernet frames is enabled. No need for any further testing.
                 * Accept the frame whether it's a unicast, multicast, or broadcast. */
                eReturn = eProcessBuffer;
            #endif
            break;
 80098f8:	e058      	b.n	80099ac <eConsiderFrameForProcessing+0x100>
        }

        /* Third, filter based on destination mac address. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 fc4e 	bl	800b1a0 <FreeRTOS_FindEndPointOnMAC>
 8009904:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d141      	bne.n	8009990 <eConsiderFrameForProcessing+0xe4>
        {
            /* A destination endpoint was found - Continue filter checks. */
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2206      	movs	r2, #6
 8009910:	4619      	mov	r1, r3
 8009912:	4829      	ldr	r0, [pc, #164]	@ (80099b8 <eConsiderFrameForProcessing+0x10c>)
 8009914:	f00d fe44 	bl	80175a0 <memcmp>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d038      	beq.n	8009990 <eConsiderFrameForProcessing+0xe4>
        {
            /* The packet was a broadcast - Continue filter checks. */
        }
        else if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2206      	movs	r2, #6
 8009922:	4619      	mov	r1, r3
 8009924:	4825      	ldr	r0, [pc, #148]	@ (80099bc <eConsiderFrameForProcessing+0x110>)
 8009926:	f00d fe3b 	bl	80175a0 <memcmp>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d036      	beq.n	800999e <eConsiderFrameForProcessing+0xf2>
                break;
            #else
                /* DNS, LLMNR, and IPv4 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xLLMNR_MacAddressIPv6.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	2206      	movs	r2, #6
 8009934:	4619      	mov	r1, r3
 8009936:	4822      	ldr	r0, [pc, #136]	@ (80099c0 <eConsiderFrameForProcessing+0x114>)
 8009938:	f00d fe32 	bl	80175a0 <memcmp>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d02f      	beq.n	80099a2 <eConsiderFrameForProcessing+0xf6>
                break;
            #else
                /* DNS, LLMNR, and IPv6 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xMDNS_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	2206      	movs	r2, #6
 8009946:	4619      	mov	r1, r3
 8009948:	481e      	ldr	r0, [pc, #120]	@ (80099c4 <eConsiderFrameForProcessing+0x118>)
 800994a:	f00d fe29 	bl	80175a0 <memcmp>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d028      	beq.n	80099a6 <eConsiderFrameForProcessing+0xfa>
                break;
            #else
                /* DNS, MDNS, and IPv4 are enabled - Continue filter checks. */
            #endif
        }
        else if( memcmp( xMDNS_MacAddressIPv6.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2206      	movs	r2, #6
 8009958:	4619      	mov	r1, r3
 800995a:	481b      	ldr	r0, [pc, #108]	@ (80099c8 <eConsiderFrameForProcessing+0x11c>)
 800995c:	f00d fe20 	bl	80175a0 <memcmp>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d021      	beq.n	80099aa <eConsiderFrameForProcessing+0xfe>
                break;
            #else
                /* DNS, MDNS, and IPv6 are enabled - Continue filter checks. */
            #endif
        }
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv4_0 ) &&
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d10c      	bne.n	8009988 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv4_1 ) &&
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	785b      	ldrb	r3, [r3, #1]
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv4_0 ) &&
 8009972:	2b00      	cmp	r3, #0
 8009974:	d108      	bne.n	8009988 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 2 ] == ipMULTICAST_MAC_ADDRESS_IPv4_2 ) &&
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	789b      	ldrb	r3, [r3, #2]
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv4_1 ) &&
 800997a:	2b5e      	cmp	r3, #94	@ 0x5e
 800997c:	d104      	bne.n	8009988 <eConsiderFrameForProcessing+0xdc>
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 3 ] <= 0x7fU ) )
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	78db      	ldrb	r3, [r3, #3]
 8009982:	b25b      	sxtb	r3, r3
                 ( pxEthernetHeader->xDestinationAddress.ucBytes[ 2 ] == ipMULTICAST_MAC_ADDRESS_IPv4_2 ) &&
 8009984:	2b00      	cmp	r3, #0
 8009986:	da03      	bge.n	8009990 <eConsiderFrameForProcessing+0xe4>
                break;
            #else
                /* IPv4 is enabled - Continue filter checks. */
            #endif
        }
        else if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b33      	cmp	r3, #51	@ 0x33
 800998e:	e00d      	b.n	80099ac <eConsiderFrameForProcessing+0x100>
            /* The packet was not a broadcast, or for this node - release it */
            break;
        }

        /* All checks have been passed, process the packet. */
        eReturn = eProcessBuffer;
 8009990:	2301      	movs	r3, #1
 8009992:	75fb      	strb	r3, [r7, #23]
 8009994:	e00a      	b.n	80099ac <eConsiderFrameForProcessing+0x100>
            break;
 8009996:	bf00      	nop
 8009998:	e008      	b.n	80099ac <eConsiderFrameForProcessing+0x100>
                break;
 800999a:	bf00      	nop
 800999c:	e006      	b.n	80099ac <eConsiderFrameForProcessing+0x100>
                break;
 800999e:	bf00      	nop
 80099a0:	e004      	b.n	80099ac <eConsiderFrameForProcessing+0x100>
                break;
 80099a2:	bf00      	nop
 80099a4:	e002      	b.n	80099ac <eConsiderFrameForProcessing+0x100>
                break;
 80099a6:	bf00      	nop
 80099a8:	e000      	b.n	80099ac <eConsiderFrameForProcessing+0x100>
                break;
 80099aa:	bf00      	nop
    } while( ipFALSE_BOOL );

    return eReturn;
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	08018904 	.word	0x08018904
 80099bc:	080188e4 	.word	0x080188e4
 80099c0:	080188ec 	.word	0x080188ec
 80099c4:	080188f4 	.word	0x080188f4
 80099c8:	080188fc 	.word	0x080188fc

080099cc <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 80099d4:	2300      	movs	r3, #0
 80099d6:	72fb      	strb	r3, [r7, #11]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d03d      	beq.n	8009a5c <prvProcessEthernetPacket+0x90>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d039      	beq.n	8009a5c <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ec:	2b0d      	cmp	r3, #13
 80099ee:	d934      	bls.n	8009a5a <prvProcessEthernetPacket+0x8e>
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f4:	60fb      	str	r3, [r7, #12]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eConsiderFrameForProcessing( pxNetworkBuffer->pucEthernetBuffer ) == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	899b      	ldrh	r3, [r3, #12]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d017      	beq.n	8009a34 <prvProcessEthernetPacket+0x68>
 8009a04:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	dc23      	bgt.n	8009a54 <prvProcessEthernetPacket+0x88>
 8009a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a10:	d010      	beq.n	8009a34 <prvProcessEthernetPacket+0x68>
 8009a12:	f640 0206 	movw	r2, #2054	@ 0x806
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d11c      	bne.n	8009a54 <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1e:	2b29      	cmp	r3, #41	@ 0x29
 8009a20:	d905      	bls.n	8009a2e <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7fd fef2 	bl	800780c <eARPProcessPacket>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	72fb      	strb	r3, [r7, #11]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8009a2c:	e016      	b.n	8009a5c <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	72fb      	strb	r3, [r7, #11]
                        break;
 8009a32:	e013      	b.n	8009a5c <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a38:	2b21      	cmp	r3, #33	@ 0x21
 8009a3a:	d908      	bls.n	8009a4e <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f8c2 	bl	8009bcc <prvProcessIPPacket>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	72fb      	strb	r3, [r7, #11]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009a4c:	e006      	b.n	8009a5c <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	72fb      	strb	r3, [r7, #11]
                    break;
 8009a52:	e003      	b.n	8009a5c <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 8009a54:	2300      	movs	r3, #0
 8009a56:	72fb      	strb	r3, [r7, #11]
                    #endif
                    break;
 8009a58:	e000      	b.n	8009a5c <prvProcessEthernetPacket+0x90>
            break;
 8009a5a:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d00b      	beq.n	8009a7a <prvProcessEthernetPacket+0xae>
 8009a62:	2b04      	cmp	r3, #4
 8009a64:	dc35      	bgt.n	8009ad2 <prvProcessEthernetPacket+0x106>
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d002      	beq.n	8009a70 <prvProcessEthernetPacket+0xa4>
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d035      	beq.n	8009ada <prvProcessEthernetPacket+0x10e>
 8009a6e:	e030      	b.n	8009ad2 <prvProcessEthernetPacket+0x106>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * a resolution request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009a70:	2101      	movs	r1, #1
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f943 	bl	8009cfe <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009a78:	e030      	b.n	8009adc <prvProcessEthernetPacket+0x110>
             * yet. */
            break;

        case eWaitingResolution:

            if( ( pxEthernetHeader->usFrameType == ipIPv4_FRAME_TYPE ) || ( pxEthernetHeader->usFrameType == ipARP_FRAME_TYPE ) )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	899b      	ldrh	r3, [r3, #12]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a84:	d006      	beq.n	8009a94 <prvProcessEthernetPacket+0xc8>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	899b      	ldrh	r3, [r3, #12]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	f640 0206 	movw	r2, #2054	@ 0x806
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d10f      	bne.n	8009ab4 <prvProcessEthernetPacket+0xe8>
            {
                #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                    if( pxARPWaitingNetworkBuffer == NULL )
 8009a94:	4b13      	ldr	r3, [pc, #76]	@ (8009ae4 <prvProcessEthernetPacket+0x118>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d107      	bne.n	8009aac <prvProcessEthernetPacket+0xe0>
                    {
                        pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8009a9c:	4a11      	ldr	r2, [pc, #68]	@ (8009ae4 <prvProcessEthernetPacket+0x118>)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6013      	str	r3, [r2, #0]
                        vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009aa2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009aa6:	f000 fbff 	bl	800a2a8 <vIPTimerStartARPResolution>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                    iptraceDELAYED_ARP_BUFFER_FULL();
                }

                break;
 8009aaa:	e017      	b.n	8009adc <prvProcessEthernetPacket+0x110>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f007 fd6b 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
                break;
 8009ab2:	e013      	b.n	8009adc <prvProcessEthernetPacket+0x110>
            }
            else if( pxEthernetHeader->usFrameType == ipIPv6_FRAME_TYPE )
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	899b      	ldrh	r3, [r3, #12]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d103      	bne.n	8009aca <prvProcessEthernetPacket+0xfe>
                    }
                    else
                #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) */
                {
                    /* We are already waiting on one resolution. This frame will be dropped. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f007 fd60 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>

                    iptraceDELAYED_ND_BUFFER_FULL();
                }

                break;
 8009ac8:	e008      	b.n	8009adc <prvProcessEthernetPacket+0x110>
            }
            else
            {
                /* Unknown frame type, drop the packet. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f007 fd5c 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
            }

            break;
 8009ad0:	e004      	b.n	8009adc <prvProcessEthernetPacket+0x110>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f007 fd58 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009ad8:	e000      	b.n	8009adc <prvProcessEthernetPacket+0x110>
            break;
 8009ada:	bf00      	nop
    }
}
 8009adc:	bf00      	nop
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	20001284 	.word	0x20001284

08009ae8 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009ae8:	b5b0      	push	{r4, r5, r7, lr}
 8009aea:	b08c      	sub	sp, #48	@ 0x30
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009af0:	2300      	movs	r3, #0
 8009af2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingResolution = pdFALSE;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afe:	62bb      	str	r3, [r7, #40]	@ 0x28
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b02:	3322      	adds	r3, #34	@ 0x22
 8009b04:	627b      	str	r3, [r7, #36]	@ 0x24

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa36 	bl	8009f78 <uxIPHeaderSizePacket>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	3316      	adds	r3, #22
 8009b10:	623b      	str	r3, [r7, #32]
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8009b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b14:	791a      	ldrb	r2, [r3, #4]
 8009b16:	795b      	ldrb	r3, [r3, #5]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	83fb      	strh	r3, [r7, #30]
    uxLength = ( size_t ) usLength;
 8009b1e:	8bfb      	ldrh	r3, [r7, #30]
 8009b20:	61bb      	str	r3, [r7, #24]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b24:	899b      	ldrh	r3, [r3, #12]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b2c:	d10f      	bne.n	8009b4e <prvProcessUDPPacket+0x66>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009b2e:	8bfc      	ldrh	r4, [r7, #30]
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	8a1b      	ldrh	r3, [r3, #16]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	461d      	mov	r5, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa1d 	bl	8009f78 <uxIPHeaderSizePacket>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009b42:	429c      	cmp	r4, r3
 8009b44:	d903      	bls.n	8009b4e <prvProcessUDPPacket+0x66>
        {
            eReturn = eReleaseBuffer;
 8009b46:	2300      	movs	r3, #0
 8009b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b4c:	e038      	b.n	8009bc0 <prvProcessUDPPacket+0xd8>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b52:	6a3a      	ldr	r2, [r7, #32]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d833      	bhi.n	8009bc0 <prvProcessUDPPacket+0xd8>
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b07      	cmp	r3, #7
 8009b5c:	d930      	bls.n	8009bc0 <prvProcessUDPPacket+0xd8>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	617b      	str	r3, [r7, #20]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	3b08      	subs	r3, #8
 8009b6c:	613b      	str	r3, [r7, #16]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d904      	bls.n	8009b80 <prvProcessUDPPacket+0x98>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	441a      	add	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b8c:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	885b      	ldrh	r3, [r3, #2]
 8009b98:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009b9a:	f107 020c 	add.w	r2, r7, #12
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f007 f98a 	bl	8010eba <xProcessReceivedUDPPacket>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d103      	bne.n	8009bb4 <prvProcessUDPPacket+0xcc>
                                       &( xIsWaitingResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8009bac:	2303      	movs	r3, #3
 8009bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009bb2:	e005      	b.n	8009bc0 <prvProcessUDPPacket+0xd8>
        }
        else
        {
            /* Is this packet to be set aside for resolution. */
            if( xIsWaitingResolution == pdTRUE )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d102      	bne.n	8009bc0 <prvProcessUDPPacket+0xd8>
            {
                eReturn = eWaitingResolution;
 8009bba:	2304      	movs	r3, #4
 8009bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8009bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3730      	adds	r7, #48	@ 0x30
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bdb0      	pop	{r4, r5, r7, pc}

08009bcc <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009bd6:	2314      	movs	r3, #20
 8009bd8:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75fb      	strb	r3, [r7, #23]
    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	330e      	adds	r3, #14
 8009be2:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	899b      	ldrh	r3, [r3, #12]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bee:	d124      	bne.n	8009c3a <prvProcessIPPacket+0x6e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	60fb      	str	r3, [r7, #12]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009bfe:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c04:	3b0e      	subs	r3, #14
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d802      	bhi.n	8009c12 <prvProcessIPPacket+0x46>
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	2b13      	cmp	r3, #19
 8009c10:	d802      	bhi.n	8009c18 <prvProcessIPPacket+0x4c>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 8009c12:	2300      	movs	r3, #0
 8009c14:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8009c16:	e013      	b.n	8009c40 <prvProcessIPPacket+0x74>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	7ddb      	ldrb	r3, [r3, #23]
 8009c1c:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009c1e:	69ba      	ldr	r2, [r7, #24]
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 f862 	bl	800acec <prvAllowIPPacketIPv4>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c30:	3b06      	subs	r3, #6
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	7812      	ldrb	r2, [r2, #0]
 8009c36:	701a      	strb	r2, [r3, #0]
                   break;
 8009c38:	e002      	b.n	8009c40 <prvProcessIPPacket+0x74>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
            /* MISRA 16.4 Compliance */
            break;
 8009c3e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009c40:	7ffb      	ldrb	r3, [r7, #31]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d156      	bne.n	8009cf4 <prvProcessIPPacket+0x128>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	899b      	ldrh	r3, [r3, #12]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c50:	d108      	bne.n	8009c64 <prvProcessIPPacket+0x98>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipIPv4_FRAME_TYPE:

                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b14      	cmp	r3, #20
 8009c56:	d907      	bls.n	8009c68 <prvProcessIPPacket+0x9c>
                    {
                        /* The size of the IP-header is larger than 20 bytes.
                         * The extra space is used for IP-options. */
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009c58:	6838      	ldr	r0, [r7, #0]
 8009c5a:	f001 f923 	bl	800aea4 <prvCheckIP4HeaderOptions>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	77fb      	strb	r3, [r7, #31]
                    }
                    break;
 8009c62:	e001      	b.n	8009c68 <prvProcessIPPacket+0x9c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8009c64:	bf00      	nop
 8009c66:	e000      	b.n	8009c6a <prvProcessIPPacket+0x9e>
                    break;
 8009c68:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 8009c6a:	7ffb      	ldrb	r3, [r7, #31]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d041      	beq.n	8009cf4 <prvProcessIPPacket+0x128>
        {
            /* Add the IP and MAC addresses to the cache if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	2b11      	cmp	r3, #17
 8009c74:	d018      	beq.n	8009ca8 <prvProcessIPPacket+0xdc>
            {
                if( xCheckRequiresResolution( pxNetworkBuffer ) == pdTRUE )
 8009c76:	6838      	ldr	r0, [r7, #0]
 8009c78:	f001 fb3b 	bl	800b2f2 <xCheckRequiresResolution>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d102      	bne.n	8009c88 <prvProcessIPPacket+0xbc>
                {
                    eReturn = eWaitingResolution;
 8009c82:	2304      	movs	r3, #4
 8009c84:	77fb      	strb	r3, [r7, #31]
 8009c86:	e00f      	b.n	8009ca8 <prvProcessIPPacket+0xdc>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	899b      	ldrh	r3, [r3, #12]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c92:	d108      	bne.n	8009ca6 <prvProcessIPPacket+0xda>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	1d9a      	adds	r2, r3, #6
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	f7fd ffe0 	bl	8007c64 <vARPRefreshCacheEntryAge>
                                break;
 8009ca4:	e000      	b.n	8009ca8 <prvProcessIPPacket+0xdc>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8009ca6:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingResolution )
 8009ca8:	7ffb      	ldrb	r3, [r7, #31]
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d022      	beq.n	8009cf4 <prvProcessIPPacket+0x128>
            {
                switch( ucProtocol )
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
 8009cb0:	2b11      	cmp	r3, #17
 8009cb2:	d00c      	beq.n	8009cce <prvProcessIPPacket+0x102>
 8009cb4:	2b11      	cmp	r3, #17
 8009cb6:	dc19      	bgt.n	8009cec <prvProcessIPPacket+0x120>
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d002      	beq.n	8009cc2 <prvProcessIPPacket+0xf6>
 8009cbc:	2b06      	cmp	r3, #6
 8009cbe:	d00c      	beq.n	8009cda <prvProcessIPPacket+0x10e>
 8009cc0:	e014      	b.n	8009cec <prvProcessIPPacket+0x120>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 8009cc2:	6838      	ldr	r0, [r7, #0]
 8009cc4:	f7ff fac0 	bl	8009248 <ProcessICMPPacket>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8009ccc:	e012      	b.n	8009cf4 <prvProcessIPPacket+0x128>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8009cce:	6838      	ldr	r0, [r7, #0]
 8009cd0:	f7ff ff0a 	bl	8009ae8 <prvProcessUDPPacket>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	77fb      	strb	r3, [r7, #31]
                        break;
 8009cd8:	e00c      	b.n	8009cf4 <prvProcessIPPacket+0x128>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8009cda:	6838      	ldr	r0, [r7, #0]
 8009cdc:	f003 fdcc 	bl	800d878 <xProcessReceivedTCPPacket>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d105      	bne.n	8009cf2 <prvProcessIPPacket+0x126>
                                {
                                    eReturn = eFrameConsumed;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 8009cea:	e002      	b.n	8009cf2 <prvProcessIPPacket+0x126>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009cec:	2300      	movs	r3, #0
 8009cee:	77fb      	strb	r3, [r7, #31]
                        break;
 8009cf0:	e000      	b.n	8009cf4 <prvProcessIPPacket+0x128>
                                break;
 8009cf2:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3720      	adds	r7, #32
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b090      	sub	sp, #64	@ 0x40
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8009d0e:	d812      	bhi.n	8009d36 <vReturnEthernetFrame+0x38>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d16:	e008      	b.n	8009d2a <vReturnEthernetFrame+0x2c>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d1e:	4413      	add	r3, r2
 8009d20:	2200      	movs	r2, #0
 8009d22:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d26:	3301      	adds	r3, #1
 8009d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d2c:	2b3b      	cmp	r3, #59	@ 0x3b
 8009d2e:	ddf3      	ble.n	8009d18 <vReturnEthernetFrame+0x1a>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	223c      	movs	r2, #60	@ 0x3c
 8009d34:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d111      	bne.n	8009d60 <vReturnEthernetFrame+0x62>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fbb2 	bl	800a4ac <pxDuplicateNetworkBufferWithDescriptor>
 8009d48:	6378      	str	r0, [r7, #52]	@ 0x34

            if( pxNewBuffer != NULL )
 8009d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d005      	beq.n	8009d5c <vReturnEthernetFrame+0x5e>
            {
                xReleaseAfterSend = pdTRUE;
 8009d50:	2301      	movs	r3, #1
 8009d52:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5a:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8009d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5e:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 808e 	beq.w	8009e84 <vReturnEthernetFrame+0x186>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d6c:	633b      	str	r3, [r7, #48]	@ 0x30
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	63bb      	str	r3, [r7, #56]	@ 0x38
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eResolutionLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	617b      	str	r3, [r7, #20]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d111      	bne.n	8009da2 <vReturnEthernetFrame+0xa4>
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d82:	899b      	ldrh	r3, [r3, #12]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d8a:	d109      	bne.n	8009da0 <vReturnEthernetFrame+0xa2>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress );
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f001 fa24 	bl	800b1e0 <FreeRTOS_FindEndPointOnNetMask>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009d9e:	e000      	b.n	8009da2 <vReturnEthernetFrame+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009da0:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d06c      	beq.n	8009e84 <vReturnEthernetFrame+0x186>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	899b      	ldrh	r3, [r3, #12]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dbc:	d11c      	bne.n	8009df8 <vReturnEthernetFrame+0xfa>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009dc4:	617b      	str	r3, [r7, #20]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009dcc:	f107 0118 	add.w	r1, r7, #24
 8009dd0:	f107 0314 	add.w	r3, r7, #20
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fe f88d 	bl	8007ef4 <eARPGetCacheEntry>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                        if( eResult == eResolutionCacheHit )
 8009de0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d103      	bne.n	8009df0 <vReturnEthernetFrame+0xf2>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 8009de8:	f107 0318 	add.w	r3, r7, #24
 8009dec:	63bb      	str	r3, [r7, #56]	@ 0x38
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8009dee:	e007      	b.n	8009e00 <vReturnEthernetFrame+0x102>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df2:	3306      	adds	r3, #6
 8009df4:	63bb      	str	r3, [r7, #56]	@ 0x38
                        break;
 8009df6:	e003      	b.n	8009e00 <vReturnEthernetFrame+0x102>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* Just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	3306      	adds	r3, #6
 8009dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
                    break;
 8009dfe:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8009e04:	2206      	movs	r2, #6
 8009e06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e0a:	f00d fcce 	bl	80177aa <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e12:	3338      	adds	r3, #56	@ 0x38
 8009e14:	63bb      	str	r3, [r7, #56]	@ 0x38
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	3306      	adds	r3, #6
 8009e1a:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009e1c:	2206      	movs	r2, #6
 8009e1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009e22:	f00d fcc2 	bl	80177aa <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8009e26:	f000 fbcc 	bl	800a5c2 <xIsCallingFromIPTask>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d106      	bne.n	8009e3e <vReturnEthernetFrame+0x140>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e3a:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 8009e3c:	e022      	b.n	8009e84 <vReturnEthernetFrame+0x186>
            else if( xReleaseAfterSend != pdFALSE )
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d011      	beq.n	8009e68 <vReturnEthernetFrame+0x16a>
                xSendEvent.eEventType = eNetworkTxEvent;
 8009e44:	2302      	movs	r3, #2
 8009e46:	733b      	strb	r3, [r7, #12]
                xSendEvent.pvData = pxNetworkBuffer;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	613b      	str	r3, [r7, #16]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8009e4c:	f107 030c 	add.w	r3, r7, #12
 8009e50:	f04f 31ff 	mov.w	r1, #4294967295
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fce1 	bl	800981c <xSendEventStructToIPTask>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d111      	bne.n	8009e84 <vReturnEthernetFrame+0x186>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f007 fb91 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
}
 8009e66:	e00d      	b.n	8009e84 <vReturnEthernetFrame+0x186>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6c:	b672      	cpsid	i
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	b662      	cpsie	i
 8009e7c:	623b      	str	r3, [r7, #32]
}
 8009e7e:	bf00      	nop
                configASSERT( pdFALSE );
 8009e80:	bf00      	nop
 8009e82:	e7fd      	b.n	8009e80 <vReturnEthernetFrame+0x182>
}
 8009e84:	bf00      	nop
 8009e86:	3740      	adds	r7, #64	@ 0x40
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <FreeRTOS_GetIPAddress>:
 * @brief Returns the IP address of the NIC.
 *
 * @return The IP address of the NIC.
 */
    uint32_t FreeRTOS_GetIPAddress( void )
    {
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulIPAddress;

        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8009e92:	2000      	movs	r0, #0
 8009e94:	f001 f9ce 	bl	800b234 <FreeRTOS_FirstEndPoint>
 8009e98:	6038      	str	r0, [r7, #0]
                }
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        /* Returns the IP address of the NIC. */
        if( pxEndPoint == NULL )
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d102      	bne.n	8009ea6 <FreeRTOS_GetIPAddress+0x1a>
        {
            ulIPAddress = 0U;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	607b      	str	r3, [r7, #4]
 8009ea4:	e00a      	b.n	8009ebc <FreeRTOS_GetIPAddress+0x30>
        }
        else if( pxEndPoint->ipv4_settings.ulIPAddress != 0U )
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <FreeRTOS_GetIPAddress+0x2a>
        {
            ulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	607b      	str	r3, [r7, #4]
 8009eb4:	e002      	b.n	8009ebc <FreeRTOS_GetIPAddress+0x30>
        }
        else
        {
            ulIPAddress = pxEndPoint->ipv4_defaults.ulIPAddress;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	69db      	ldr	r3, [r3, #28]
 8009eba:	607b      	str	r3, [r7, #4]
        }

        return ulIPAddress;
 8009ebc:	687b      	ldr	r3, [r7, #4]
    }
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8009ecc:	4b03      	ldr	r3, [pc, #12]	@ (8009edc <xIPIsNetworkTaskReady+0x14>)
 8009ece:	681b      	ldr	r3, [r3, #0]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20001298 	.word	0x20001298

08009ee0 <FreeRTOS_IsNetworkUp>:
 * @brief Returns whether all end-points are up.
 *
 * @return pdTRUE if all defined end-points are up.
 */
BaseType_t FreeRTOS_IsNetworkUp( void )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
    /* IsNetworkUp() is kept for backward compatibility. */
    return FreeRTOS_IsEndPointUp( NULL );
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	f000 f803 	bl	8009ef0 <FreeRTOS_IsEndPointUp>
 8009eea:	4603      	mov	r3, r0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <FreeRTOS_IsEndPointUp>:
 * @brief Returns whether a particular end-point is up.
 *
 * @return pdTRUE if a particular end-points is up.
 */
BaseType_t FreeRTOS_IsEndPointUp( const struct xNetworkEndPoint * pxEndPoint )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxEndPoint != NULL )
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d007      	beq.n	8009f0e <FreeRTOS_IsEndPointUp+0x1e>
    {
        /* Is this particular end-point up? */
        xReturn = ( BaseType_t ) pxEndPoint->bits.bEndPointUp;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f04:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	e003      	b.n	8009f16 <FreeRTOS_IsEndPointUp+0x26>
    }
    else
    {
        /* Are all end-points up? */
        xReturn = FreeRTOS_AllEndPointsUp( NULL );
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f000 f806 	bl	8009f20 <FreeRTOS_AllEndPointsUp>
 8009f14:	60f8      	str	r0, [r7, #12]
    }

    return xReturn;
 8009f16:	68fb      	ldr	r3, [r7, #12]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <FreeRTOS_AllEndPointsUp>:
 * @param[in] pxInterface The network interface of interest, or NULL to check all end-points.
 *
 * @return pdTRUE if all end-points are up, otherwise pdFALSE;
 */
BaseType_t FreeRTOS_AllEndPointsUp( const struct xNetworkInterface * pxInterface )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdTRUE;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009f2c:	4b11      	ldr	r3, [pc, #68]	@ (8009f74 <FreeRTOS_AllEndPointsUp+0x54>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60bb      	str	r3, [r7, #8]

    while( pxEndPoint != NULL )
 8009f32:	e015      	b.n	8009f60 <FreeRTOS_AllEndPointsUp+0x40>
    {
        if( ( pxInterface == NULL ) ||
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d004      	beq.n	8009f44 <FreeRTOS_AllEndPointsUp+0x24>
            ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if( ( pxInterface == NULL ) ||
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d10a      	bne.n	8009f5a <FreeRTOS_AllEndPointsUp+0x3a>

        {
            if( pxEndPoint->bits.bEndPointUp == pdFALSE_UNSIGNED )
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d102      	bne.n	8009f5a <FreeRTOS_AllEndPointsUp+0x3a>
            {
                xResult = pdFALSE;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60fb      	str	r3, [r7, #12]
                break;
 8009f58:	e005      	b.n	8009f66 <FreeRTOS_AllEndPointsUp+0x46>
            }
        }

        pxEndPoint = pxEndPoint->pxNext;
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f5e:	60bb      	str	r3, [r7, #8]
    while( pxEndPoint != NULL )
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d1e6      	bne.n	8009f34 <FreeRTOS_AllEndPointsUp+0x14>
    }

    return xResult;
 8009f66:	68fb      	ldr	r3, [r7, #12]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	20002604 	.word	0x20002604

08009f78 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f84:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	899b      	ldrh	r3, [r3, #12]
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d102      	bne.n	8009f9a <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009f94:	2328      	movs	r3, #40	@ 0x28
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	e001      	b.n	8009f9e <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009f9a:	2314      	movs	r3, #20
 8009f9c:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <uxIPHeaderSizeSocket+0x22>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	7a1b      	ldrb	r3, [r3, #8]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009fc8:	2328      	movs	r3, #40	@ 0x28
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	e001      	b.n	8009fd2 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009fce:	2314      	movs	r3, #20
 8009fd0:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <vApplicationPingReplyHook>:

//USER FUNCTIONS

//Hook for when you receive a ping reply
void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, //reply message from system
		uint16_t usIdentifier ){
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	460a      	mov	r2, r1
 8009fea:	71fb      	strb	r3, [r7, #7]
 8009fec:	4613      	mov	r3, r2
 8009fee:	80bb      	strh	r3, [r7, #4]

}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <vApplicationIPNetworkEventHook_Multi>:

//checks the eNetworkUp type to see if it's  UP or DOWN
void vApplicationIPNetworkEventHook_Multi(eIPCallbackEvent_t networkEvent, struct xNetworkEndPoint *pxEndPoint){
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	6039      	str	r1, [r7, #0]
 800a006:	71fb      	strb	r3, [r7, #7]
	switch(networkEvent){
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <vApplicationIPNetworkEventHook_Multi+0x18>
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d008      	beq.n	800a024 <vApplicationIPNetworkEventHook_Multi+0x28>
		break;
	case eNetworkDown:
		SEGGER_RTT_printf(0,"Network Down!");
		break;
	}
}
 800a012:	e00c      	b.n	800a02e <vApplicationIPNetworkEventHook_Multi+0x32>
		SEGGER_RTT_printf(0,"Network UP! IP: %lup\n", FreeRTOS_ntohl(pxEndPoint->ipv4_settings.ulIPAddress));
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	4907      	ldr	r1, [pc, #28]	@ (800a038 <vApplicationIPNetworkEventHook_Multi+0x3c>)
 800a01c:	2000      	movs	r0, #0
 800a01e:	f7f7 f859 	bl	80010d4 <SEGGER_RTT_printf>
		break;
 800a022:	e004      	b.n	800a02e <vApplicationIPNetworkEventHook_Multi+0x32>
		SEGGER_RTT_printf(0,"Network Down!");
 800a024:	4905      	ldr	r1, [pc, #20]	@ (800a03c <vApplicationIPNetworkEventHook_Multi+0x40>)
 800a026:	2000      	movs	r0, #0
 800a028:	f7f7 f854 	bl	80010d4 <SEGGER_RTT_printf>
		break;
 800a02c:	bf00      	nop
}
 800a02e:	bf00      	nop
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	08018798 	.word	0x08018798
 800a03c:	080187b0 	.word	0x080187b0

0800a040 <ulApplicationGetNextSequenceNumber>:
//get a random sequence number for the first packet
uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress,
                                           uint16_t usSourcePort,
                                           uint32_t ulDestinationAddress,
                                           uint16_t usDestinationPort )
{
 800a040:	b590      	push	{r4, r7, lr}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	607a      	str	r2, [r7, #4]
 800a04a:	461a      	mov	r2, r3
 800a04c:	460b      	mov	r3, r1
 800a04e:	817b      	strh	r3, [r7, #10]
 800a050:	4613      	mov	r3, r2
 800a052:	813b      	strh	r3, [r7, #8]
    return (uint32_t) rand() ^ (uint32_t) xTaskGetTickCount();
 800a054:	f00d f826 	bl	80170a4 <rand>
 800a058:	4603      	mov	r3, r0
 800a05a:	461c      	mov	r4, r3
 800a05c:	f00b f836 	bl	80150cc <xTaskGetTickCount>
 800a060:	4603      	mov	r3, r0
 800a062:	4063      	eors	r3, r4
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd90      	pop	{r4, r7, pc}

0800a06c <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800a072:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a076:	607b      	str	r3, [r7, #4]

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800a078:	4b26      	ldr	r3, [pc, #152]	@ (800a114 <xCalculateSleepTime+0xa8>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d007      	beq.n	800a096 <xCalculateSleepTime+0x2a>
        {
            if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a086:	4b23      	ldr	r3, [pc, #140]	@ (800a114 <xCalculateSleepTime+0xa8>)
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d902      	bls.n	800a096 <xCalculateSleepTime+0x2a>
            {
                uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 800a090:	4b20      	ldr	r3, [pc, #128]	@ (800a114 <xCalculateSleepTime+0xa8>)
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	607b      	str	r3, [r7, #4]
        }
    #endif

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a096:	4b20      	ldr	r3, [pc, #128]	@ (800a118 <xCalculateSleepTime+0xac>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 800a09c:	e012      	b.n	800a0c4 <xCalculateSleepTime+0x58>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a0a4:	f003 0301 	and.w	r3, r3, #1
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d007      	beq.n	800a0be <xCalculateSleepTime+0x52>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d902      	bls.n	800a0be <xCalculateSleepTime+0x52>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0bc:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0c2:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1e9      	bne.n	800a09e <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 800a0ca:	4b14      	ldr	r3, [pc, #80]	@ (800a11c <xCalculateSleepTime+0xb0>)
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d007      	beq.n	800a0e8 <xCalculateSleepTime+0x7c>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a0d8:	4b10      	ldr	r3, [pc, #64]	@ (800a11c <xCalculateSleepTime+0xb0>)
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d902      	bls.n	800a0e8 <xCalculateSleepTime+0x7c>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800a0e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a11c <xCalculateSleepTime+0xb0>)
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800a0e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a120 <xCalculateSleepTime+0xb4>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d007      	beq.n	800a106 <xCalculateSleepTime+0x9a>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a120 <xCalculateSleepTime+0xb4>)
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d902      	bls.n	800a106 <xCalculateSleepTime+0x9a>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800a100:	4b07      	ldr	r3, [pc, #28]	@ (800a120 <xCalculateSleepTime+0xb4>)
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800a106:	687b      	ldr	r3, [r7, #4]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	200025b4 	.word	0x200025b4
 800a118:	20002604 	.word	0x20002604
 800a11c:	200025c8 	.word	0x200025c8
 800a120:	200025dc 	.word	0x200025dc

0800a124 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        /* Is it time for ARP processing? */
        if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a12a:	4843      	ldr	r0, [pc, #268]	@ (800a238 <vCheckNetworkTimers+0x114>)
 800a12c:	f000 f904 	bl	800a338 <prvIPTimerCheck>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <vCheckNetworkTimers+0x18>
        {
            ( void ) xSendEventToIPTask( eARPTimerEvent );
 800a136:	2003      	movs	r0, #3
 800a138:	f7ff fb5a 	bl	80097f0 <xSendEventToIPTask>
        }

        /* Is the ARP resolution timer expired? */
        if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800a13c:	483f      	ldr	r0, [pc, #252]	@ (800a23c <vCheckNetworkTimers+0x118>)
 800a13e:	f000 f8fb 	bl	800a338 <prvIPTimerCheck>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00e      	beq.n	800a166 <vCheckNetworkTimers+0x42>
        {
            if( pxARPWaitingNetworkBuffer != NULL )
 800a148:	4b3d      	ldr	r3, [pc, #244]	@ (800a240 <vCheckNetworkTimers+0x11c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00a      	beq.n	800a166 <vCheckNetworkTimers+0x42>
            {
                /* Disable the ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a150:	2000      	movs	r0, #0
 800a152:	f000 f967 	bl	800a424 <vIPSetARPResolutionTimerEnableState>

                /* We have waited long enough for the ARP response. Now, free the network
                 * buffer. */
                vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800a156:	4b3a      	ldr	r3, [pc, #232]	@ (800a240 <vCheckNetworkTimers+0x11c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f007 fa14 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>

                /* Clear the pointer. */
                pxARPWaitingNetworkBuffer = NULL;
 800a160:	4b37      	ldr	r3, [pc, #220]	@ (800a240 <vCheckNetworkTimers+0x11c>)
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) */

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a166:	4b37      	ldr	r3, [pc, #220]	@ (800a244 <vCheckNetworkTimers+0x120>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800a16c:	e007      	b.n	800a17e <vCheckNetworkTimers+0x5a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	3348      	adds	r3, #72	@ 0x48
 800a172:	4618      	mov	r0, r3
 800a174:	f000 f8e0 	bl	800a338 <prvIPTimerCheck>
                        vRAProcess( pdFALSE, pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a17c:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1f4      	bne.n	800a16e <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a184:	4830      	ldr	r0, [pc, #192]	@ (800a248 <vCheckNetworkTimers+0x124>)
 800a186:	f000 f8d7 	bl	800a338 <prvIPTimerCheck>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <vCheckNetworkTimers+0x72>
        {
            vDNSCheckCallBack( NULL );
 800a190:	2000      	movs	r0, #0
 800a192:	f7fe fc95 	bl	8008ac0 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800a196:	4b2d      	ldr	r3, [pc, #180]	@ (800a24c <vCheckNetworkTimers+0x128>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f00a fa58 	bl	8014650 <uxQueueMessagesWaiting>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <vCheckNetworkTimers+0x88>
        {
            xWillSleep = pdTRUE;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	60fb      	str	r3, [r7, #12]
 800a1aa:	e001      	b.n	800a1b0 <vCheckNetworkTimers+0x8c>
        }
        else
        {
            xWillSleep = pdFALSE;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a1b0:	4827      	ldr	r0, [pc, #156]	@ (800a250 <vCheckNetworkTimers+0x12c>)
 800a1b2:	f000 f8c1 	bl	800a338 <prvIPTimerCheck>
 800a1b6:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <vCheckNetworkTimers+0x9e>
        {
            xCheckTCPSockets = pdTRUE;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d007      	beq.n	800a1d8 <vCheckNetworkTimers+0xb4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f002 f979 	bl	800c4c0 <xTCPTimerCheck>
 800a1ce:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	481f      	ldr	r0, [pc, #124]	@ (800a250 <vCheckNetworkTimers+0x12c>)
 800a1d4:	f000 f844 	bl	800a260 <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f003 f813 	bl	800d204 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800a1de:	2000      	movs	r0, #0
 800a1e0:	f003 f82c 	bl	800d23c <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800a1e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a254 <vCheckNetworkTimers+0x130>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d120      	bne.n	800a22e <vCheckNetworkTimers+0x10a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800a1ec:	481a      	ldr	r0, [pc, #104]	@ (800a258 <vCheckNetworkTimers+0x134>)
 800a1ee:	f000 f8a3 	bl	800a338 <prvIPTimerCheck>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01a      	beq.n	800a22e <vCheckNetworkTimers+0x10a>
        {
            BaseType_t xUp = pdTRUE;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a1fc:	4b17      	ldr	r3, [pc, #92]	@ (800a25c <vCheckNetworkTimers+0x138>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	617b      	str	r3, [r7, #20]
 800a202:	e00e      	b.n	800a222 <vCheckNetworkTimers+0xfe>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	7f1b      	ldrb	r3, [r3, #28]
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d104      	bne.n	800a21c <vCheckNetworkTimers+0xf8>
                {
                    xUp = pdFALSE;
 800a212:	2300      	movs	r3, #0
 800a214:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	f7ff fa52 	bl	80096c0 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1ed      	bne.n	800a204 <vCheckNetworkTimers+0xe0>
                }
            }

            vSetAllNetworksUp( xUp );
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f92f 	bl	800a48c <vSetAllNetworksUp>
        }
    }
}
 800a22e:	bf00      	nop
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	200025b4 	.word	0x200025b4
 800a23c:	200025a0 	.word	0x200025a0
 800a240:	20001284 	.word	0x20001284
 800a244:	20002604 	.word	0x20002604
 800a248:	200025dc 	.word	0x200025dc
 800a24c:	20001288 	.word	0x20001288
 800a250:	200025c8 	.word	0x200025c8
 800a254:	2000259c 	.word	0x2000259c
 800a258:	200025f0 	.word	0x200025f0
 800a25c:	20002608 	.word	0x20002608

0800a260 <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3304      	adds	r3, #4
 800a26e:	4618      	mov	r0, r3
 800a270:	f00b f9c6 	bl	8015600 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d105      	bne.n	800a28c <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	7813      	ldrb	r3, [r2, #0]
 800a284:	f043 0302 	orr.w	r3, r3, #2
 800a288:	7013      	strb	r3, [r2, #0]
 800a28a:	e004      	b.n	800a296 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	7813      	ldrb	r3, [r2, #0]
 800a290:	f023 0302 	bic.w	r3, r3, #2
 800a294:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	7813      	ldrb	r3, [r2, #0]
 800a29a:	f043 0301 	orr.w	r3, r3, #1
 800a29e:	7013      	strb	r3, [r2, #0]
}
 800a2a0:	bf00      	nop
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
    void vIPTimerStartARPResolution( TickType_t xTime )
    {
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
        prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a2b0:	6879      	ldr	r1, [r7, #4]
 800a2b2:	4803      	ldr	r0, [pc, #12]	@ (800a2c0 <vIPTimerStartARPResolution+0x18>)
 800a2b4:	f7ff ffd4 	bl	800a260 <prvIPTimerStart>
    }
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	200025a0 	.word	0x200025a0

0800a2c4 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7ff ffc2 	bl	800a260 <prvIPTimerStart>
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	4803      	ldr	r0, [pc, #12]	@ (800a2fc <vTCPTimerReload+0x18>)
 800a2f0:	f7ff ffe8 	bl	800a2c4 <prvIPTimerReload>
    }
 800a2f4:	bf00      	nop
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	200025c8 	.word	0x200025c8

0800a300 <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
    void vARPTimerReload( TickType_t xTime )
    {
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xARPTimer, xTime );
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	4803      	ldr	r0, [pc, #12]	@ (800a318 <vARPTimerReload+0x18>)
 800a30c:	f7ff ffda 	bl	800a2c4 <prvIPTimerReload>
    }
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	200025b4 	.word	0x200025b4

0800a31c <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	4803      	ldr	r0, [pc, #12]	@ (800a334 <vNetworkTimerReload+0x18>)
 800a328:	f7ff ffcc 	bl	800a2c4 <prvIPTimerReload>
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	200025f0 	.word	0x200025f0

0800a338 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	e028      	b.n	800a3a6 <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d10f      	bne.n	800a382 <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	330c      	adds	r3, #12
 800a36a:	4619      	mov	r1, r3
 800a36c:	4610      	mov	r0, r2
 800a36e:	f00b f987 	bl	8015680 <xTaskCheckForTimeOut>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d004      	beq.n	800a382 <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	7813      	ldrb	r3, [r2, #0]
 800a37c:	f043 0302 	orr.w	r3, r3, #2
 800a380:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	f003 0302 	and.w	r3, r3, #2
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d008      	beq.n	800a3a2 <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff ff62 	bl	800a260 <prvIPTimerStart>
            xReturn = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	e001      	b.n	800a3a6 <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a3b8:	4a0c      	ldr	r2, [pc, #48]	@ (800a3ec <vIPSetTCPTimerExpiredState+0x3c>)
 800a3ba:	7813      	ldrb	r3, [r2, #0]
 800a3bc:	f043 0301 	orr.w	r3, r3, #1
 800a3c0:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a3c8:	4a08      	ldr	r2, [pc, #32]	@ (800a3ec <vIPSetTCPTimerExpiredState+0x3c>)
 800a3ca:	7813      	ldrb	r3, [r2, #0]
 800a3cc:	f043 0302 	orr.w	r3, r3, #2
 800a3d0:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a3d2:	e004      	b.n	800a3de <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a3d4:	4a05      	ldr	r2, [pc, #20]	@ (800a3ec <vIPSetTCPTimerExpiredState+0x3c>)
 800a3d6:	7813      	ldrb	r3, [r2, #0]
 800a3d8:	f023 0302 	bic.w	r3, r3, #2
 800a3dc:	7013      	strb	r3, [r2, #0]
    }
 800a3de:	bf00      	nop
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	200025c8 	.word	0x200025c8

0800a3f0 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetARPTimerEnableState( BaseType_t xEnableState )
    {
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
        if( xEnableState != pdFALSE )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d005      	beq.n	800a40a <vIPSetARPTimerEnableState+0x1a>
        {
            xARPTimer.bActive = pdTRUE_UNSIGNED;
 800a3fe:	4a08      	ldr	r2, [pc, #32]	@ (800a420 <vIPSetARPTimerEnableState+0x30>)
 800a400:	7813      	ldrb	r3, [r2, #0]
 800a402:	f043 0301 	orr.w	r3, r3, #1
 800a406:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xARPTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a408:	e004      	b.n	800a414 <vIPSetARPTimerEnableState+0x24>
            xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a40a:	4a05      	ldr	r2, [pc, #20]	@ (800a420 <vIPSetARPTimerEnableState+0x30>)
 800a40c:	7813      	ldrb	r3, [r2, #0]
 800a40e:	f023 0301 	bic.w	r3, r3, #1
 800a412:	7013      	strb	r3, [r2, #0]
    }
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	200025b4 	.word	0x200025b4

0800a424 <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
    {
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
        if( xEnableState != pdFALSE )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d005      	beq.n	800a43e <vIPSetARPResolutionTimerEnableState+0x1a>
        {
            xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800a432:	4a08      	ldr	r2, [pc, #32]	@ (800a454 <vIPSetARPResolutionTimerEnableState+0x30>)
 800a434:	7813      	ldrb	r3, [r2, #0]
 800a436:	f043 0301 	orr.w	r3, r3, #1
 800a43a:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a43c:	e004      	b.n	800a448 <vIPSetARPResolutionTimerEnableState+0x24>
            xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800a43e:	4a05      	ldr	r2, [pc, #20]	@ (800a454 <vIPSetARPResolutionTimerEnableState+0x30>)
 800a440:	7813      	ldrb	r3, [r2, #0]
 800a442:	f023 0301 	bic.w	r3, r3, #1
 800a446:	7013      	strb	r3, [r2, #0]
    }
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	200025a0 	.word	0x200025a0

0800a458 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800a466:	4a08      	ldr	r2, [pc, #32]	@ (800a488 <vIPSetDNSTimerEnableState+0x30>)
 800a468:	7813      	ldrb	r3, [r2, #0]
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a470:	e004      	b.n	800a47c <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800a472:	4a05      	ldr	r2, [pc, #20]	@ (800a488 <vIPSetDNSTimerEnableState+0x30>)
 800a474:	7813      	ldrb	r3, [r2, #0]
 800a476:	f023 0301 	bic.w	r3, r3, #1
 800a47a:	7013      	strb	r3, [r2, #0]
    }
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	200025dc 	.word	0x200025dc

0800a48c <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800a494:	4a04      	ldr	r2, [pc, #16]	@ (800a4a8 <vSetAllNetworksUp+0x1c>)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6013      	str	r3, [r2, #0]
}
 800a49a:	bf00      	nop
 800a49c:	370c      	adds	r7, #12
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	2000259c 	.word	0x2000259c

0800a4ac <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	617b      	str	r3, [r7, #20]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	6838      	ldr	r0, [r7, #0]
 800a4be:	f006 ffb7 	bl	8011430 <pxGetNetworkBufferWithDescriptor>
 800a4c2:	6138      	str	r0, [r7, #16]

    if( pxNewBuffer != NULL )
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d038      	beq.n	800a53c <pxDuplicateNetworkBufferWithDescriptor+0x90>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10d      	bne.n	800a4ee <pxDuplicateNetworkBufferWithDescriptor+0x42>
	__asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d6:	b672      	cpsid	i
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	b662      	cpsie	i
 800a4e6:	60fb      	str	r3, [r7, #12]
}
 800a4e8:	bf00      	nop
 800a4ea:	bf00      	nop
 800a4ec:	e7fd      	b.n	800a4ea <pxDuplicateNetworkBufferWithDescriptor+0x3e>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d902      	bls.n	800a4fe <pxDuplicateNetworkBufferWithDescriptor+0x52>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4fc:	617b      	str	r3, [r7, #20]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	695a      	ldr	r2, [r3, #20]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	4619      	mov	r1, r3
 800a538:	f00d f937 	bl	80177aa <memcpy>
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800a53c:	693b      	ldr	r3, [r7, #16]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d102      	bne.n	800a55c <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800a556:	2300      	movs	r3, #0
 800a558:	60fb      	str	r3, [r7, #12]
 800a55a:	e013      	b.n	800a584 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f816 	bl	800a58e <void_ptr_to_uintptr>
 800a562:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	3b22      	subs	r3, #34	@ 0x22
 800a56c:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d103      	bne.n	800a580 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	e001      	b.n	800a584 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800a584:	68fb      	ldr	r3, [r7, #12]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800a58e:	b480      	push	{r7}
 800a590:	b085      	sub	sp, #20
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800a59a:	68fb      	ldr	r3, [r7, #12]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff ffc7 	bl	800a546 <prvPacketBuffer_to_NetworkBuffer>
 800a5b8:	4603      	mov	r3, r0
    }
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800a5c8:	f00b f9ac 	bl	8015924 <xTaskGetCurrentTaskHandle>
 800a5cc:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800a5ce:	f7ff f829 	bl	8009624 <FreeRTOS_GetIPTaskHandle>
 800a5d2:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d102      	bne.n	800a5e2 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	e001      	b.n	800a5e6 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d10d      	bne.n	800a61a <prvProcessNetworkDownEvent+0x2a>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	b672      	cpsid	i
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	b662      	cpsie	i
 800a612:	613b      	str	r3, [r7, #16]
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	e7fd      	b.n	800a616 <prvProcessNetworkDownEvent+0x26>
    configASSERT( pxInterface->pfInitialise != NULL );
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10d      	bne.n	800a63e <prvProcessNetworkDownEvent+0x4e>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a626:	b672      	cpsid	i
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	b662      	cpsie	i
 800a636:	60fb      	str	r3, [r7, #12]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <prvProcessNetworkDownEvent+0x4a>
    /* Stop the Address Resolution timer while there is no network. */
    #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
        vIPSetARPTimerEnableState( pdFALSE );
 800a63e:	2000      	movs	r0, #0
 800a640:	f7ff fed6 	bl	800a3f0 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fdf5 	bl	800b234 <FreeRTOS_FirstEndPoint>
 800a64a:	6178      	str	r0, [r7, #20]
 800a64c:	e022      	b.n	800a694 <prvProcessNetworkDownEvent+0xa4>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800a654:	f023 0310 	bic.w	r3, r3, #16
 800a658:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a662:	f003 0308 	and.w	r3, r3, #8
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d004      	beq.n	800a676 <prvProcessNetworkDownEvent+0x86>
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
                }
                #else
                {
                    vApplicationIPNetworkEventHook_Multi( eNetworkDown, pxEndPoint );
 800a66c:	6979      	ldr	r1, [r7, #20]
 800a66e:	2001      	movs	r0, #1
 800a670:	f7ff fcc4 	bl	8009ffc <vApplicationIPNetworkEventHook_Multi>
 800a674:	e006      	b.n	800a684 <prvProcessNetworkDownEvent+0x94>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800a67c:	f043 0308 	orr.w	r3, r3, #8
 800a680:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
        #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )

            /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
             * treat network down as a "delivery problem" and flush the ARP cache for this
             * interface. */
            FreeRTOS_ClearARP( pxEndPoint );
 800a684:	6978      	ldr	r0, [r7, #20]
 800a686:	f7fd feed 	bl	8008464 <FreeRTOS_ClearARP>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a68a:	6979      	ldr	r1, [r7, #20]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fe19 	bl	800b2c4 <FreeRTOS_NextEndPoint>
 800a692:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1d9      	bne.n	800a64e <prvProcessNetworkDownEvent+0x5e>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	4798      	blx	r3
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d126      	bne.n	800a6f6 <prvProcessNetworkDownEvent+0x106>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	7f13      	ldrb	r3, [r2, #28]
 800a6ac:	f043 0301 	orr.w	r3, r3, #1
 800a6b0:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fdbe 	bl	800b234 <FreeRTOS_FirstEndPoint>
 800a6b8:	6178      	str	r0, [r7, #20]
 800a6ba:	e018      	b.n	800a6ee <prvProcessNetworkDownEvent+0xfe>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a6c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d107      	bne.n	800a6dc <prvProcessNetworkDownEvent+0xec>
                {
                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE_UNSIGNED:
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800a6cc:	6978      	ldr	r0, [r7, #20]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	331c      	adds	r3, #28
 800a6d2:	221c      	movs	r2, #28
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	f00d f868 	bl	80177aa <memcpy>
                            break;
 800a6da:	e000      	b.n	800a6de <prvProcessNetworkDownEvent+0xee>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800a6dc:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800a6de:	6978      	ldr	r0, [r7, #20]
 800a6e0:	f7fe ffac 	bl	800963c <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a6e4:	6979      	ldr	r1, [r7, #20]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fdec 	bl	800b2c4 <FreeRTOS_NextEndPoint>
 800a6ec:	6178      	str	r0, [r7, #20]
             pxEndPoint != NULL;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e3      	bne.n	800a6bc <prvProcessNetworkDownEvent+0xcc>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800a6f4:	e002      	b.n	800a6fc <prvProcessNetworkDownEvent+0x10c>
        vSetAllNetworksUp( pdFALSE );
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	f7ff fec8 	bl	800a48c <vSetAllNetworksUp>
}
 800a6fc:	bf00      	nop
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08c      	sub	sp, #48	@ 0x30
 800a708:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a70a:	f7ff fbdd 	bl	8009ec8 <xIPIsNetworkTaskReady>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00d      	beq.n	800a730 <vPreCheckConfigs+0x2c>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a718:	b672      	cpsid	i
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	b662      	cpsie	i
 800a728:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a72a:	bf00      	nop
 800a72c:	bf00      	nop
 800a72e:	e7fd      	b.n	800a72c <vPreCheckConfigs+0x28>
    configASSERT( xNetworkEventQueue == NULL );
 800a730:	4b58      	ldr	r3, [pc, #352]	@ (800a894 <vPreCheckConfigs+0x190>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00d      	beq.n	800a754 <vPreCheckConfigs+0x50>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73c:	b672      	cpsid	i
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	b662      	cpsie	i
 800a74c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a74e:	bf00      	nop
 800a750:	bf00      	nop
 800a752:	e7fd      	b.n	800a750 <vPreCheckConfigs+0x4c>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800a754:	f7fe ff66 	bl	8009624 <FreeRTOS_GetIPTaskHandle>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00d      	beq.n	800a77a <vPreCheckConfigs+0x76>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	b672      	cpsid	i
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	b662      	cpsie	i
 800a772:	623b      	str	r3, [r7, #32]
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
 800a778:	e7fd      	b.n	800a776 <vPreCheckConfigs+0x72>
             */
            configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );
        #endif /* if ( ipconfigSUPPRESS_BUFFER_PADDING_CHECK == 0 ) */

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800a77a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a77e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800a780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a782:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a786:	4293      	cmp	r3, r2
 800a788:	d80d      	bhi.n	800a7a6 <vPreCheckConfigs+0xa2>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78e:	b672      	cpsid	i
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	b662      	cpsie	i
 800a79e:	61fb      	str	r3, [r7, #28]
}
 800a7a0:	bf00      	nop
 800a7a2:	bf00      	nop
 800a7a4:	e7fd      	b.n	800a7a2 <vPreCheckConfigs+0x9e>

        uxSize = sizeof( EthernetHeader_t );
 800a7a6:	230e      	movs	r3, #14
 800a7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800a7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ac:	2b0e      	cmp	r3, #14
 800a7ae:	d00d      	beq.n	800a7cc <vPreCheckConfigs+0xc8>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b4:	b672      	cpsid	i
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	b662      	cpsie	i
 800a7c4:	61bb      	str	r3, [r7, #24]
}
 800a7c6:	bf00      	nop
 800a7c8:	bf00      	nop
 800a7ca:	e7fd      	b.n	800a7c8 <vPreCheckConfigs+0xc4>

        uxSize = sizeof( ARPHeader_t );
 800a7cc:	231c      	movs	r3, #28
 800a7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800a7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d2:	2b1c      	cmp	r3, #28
 800a7d4:	d00d      	beq.n	800a7f2 <vPreCheckConfigs+0xee>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	b672      	cpsid	i
 800a7dc:	f383 8811 	msr	BASEPRI, r3
 800a7e0:	f3bf 8f6f 	isb	sy
 800a7e4:	f3bf 8f4f 	dsb	sy
 800a7e8:	b662      	cpsie	i
 800a7ea:	617b      	str	r3, [r7, #20]
}
 800a7ec:	bf00      	nop
 800a7ee:	bf00      	nop
 800a7f0:	e7fd      	b.n	800a7ee <vPreCheckConfigs+0xea>

        uxSize = sizeof( IPHeader_t );
 800a7f2:	2314      	movs	r3, #20
 800a7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800a7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f8:	2b14      	cmp	r3, #20
 800a7fa:	d00d      	beq.n	800a818 <vPreCheckConfigs+0x114>
	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a800:	b672      	cpsid	i
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	b662      	cpsie	i
 800a810:	613b      	str	r3, [r7, #16]
}
 800a812:	bf00      	nop
 800a814:	bf00      	nop
 800a816:	e7fd      	b.n	800a814 <vPreCheckConfigs+0x110>

        uxSize = sizeof( ICMPHeader_t );
 800a818:	2308      	movs	r3, #8
 800a81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800a81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81e:	2b08      	cmp	r3, #8
 800a820:	d00d      	beq.n	800a83e <vPreCheckConfigs+0x13a>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a826:	b672      	cpsid	i
 800a828:	f383 8811 	msr	BASEPRI, r3
 800a82c:	f3bf 8f6f 	isb	sy
 800a830:	f3bf 8f4f 	dsb	sy
 800a834:	b662      	cpsie	i
 800a836:	60fb      	str	r3, [r7, #12]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <vPreCheckConfigs+0x136>

        uxSize = sizeof( UDPHeader_t );
 800a83e:	2308      	movs	r3, #8
 800a840:	62fb      	str	r3, [r7, #44]	@ 0x2c
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800a842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a844:	2b08      	cmp	r3, #8
 800a846:	d00d      	beq.n	800a864 <vPreCheckConfigs+0x160>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84c:	b672      	cpsid	i
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	b662      	cpsie	i
 800a85c:	60bb      	str	r3, [r7, #8]
}
 800a85e:	bf00      	nop
 800a860:	bf00      	nop
 800a862:	e7fd      	b.n	800a860 <vPreCheckConfigs+0x15c>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800a864:	2324      	movs	r3, #36	@ 0x24
 800a866:	62fb      	str	r3, [r7, #44]	@ 0x2c
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800a868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86a:	2b24      	cmp	r3, #36	@ 0x24
 800a86c:	d00d      	beq.n	800a88a <vPreCheckConfigs+0x186>
	__asm volatile
 800a86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a872:	b672      	cpsid	i
 800a874:	f383 8811 	msr	BASEPRI, r3
 800a878:	f3bf 8f6f 	isb	sy
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	b662      	cpsie	i
 800a882:	607b      	str	r3, [r7, #4]
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	e7fd      	b.n	800a886 <vPreCheckConfigs+0x182>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800a88a:	bf00      	nop
 800a88c:	3730      	adds	r7, #48	@ 0x30
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	20001288 	.word	0x20001288

0800a898 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	bf38      	it	cc
 800a8aa:	4613      	movcc	r3, r2
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	bfa8      	it	ge
 800a8ca:	4613      	movge	r3, r2
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	bf28      	it	cs
 800a8ea:	4613      	movcs	r3, r2
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	4293      	cmp	r3, r2
 800a908:	bf28      	it	cs
 800a90a:	4613      	movcs	r3, r2
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <FreeRTOS_add_int32>:
 * @param[in] b the second value.
 * @return The result of a + b if no overflow/underflow occurs, or INT32_MAX/INT32_MIN if overflow/underflow would occur.
 */
int32_t FreeRTOS_add_int32( int32_t a,
                            int32_t b )
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
    int32_t ret;

    if( ( a > 0 ) && ( b > ( ipINT32_MAX_VALUE - a ) ) )
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	dd0a      	ble.n	800a93e <FreeRTOS_add_int32+0x26>
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a92e:	1a9b      	subs	r3, r3, r2
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	429a      	cmp	r2, r3
 800a934:	dd03      	ble.n	800a93e <FreeRTOS_add_int32+0x26>
    {
        ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800a936:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a93a:	60fb      	str	r3, [r7, #12]
 800a93c:	e010      	b.n	800a960 <FreeRTOS_add_int32+0x48>
    }
    else if( ( a < 0 ) && ( b < ( ipINT32_MIN_VALUE - a ) ) )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	da09      	bge.n	800a958 <FreeRTOS_add_int32+0x40>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f1c3 4300 	rsb	r3, r3, #2147483648	@ 0x80000000
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	da03      	bge.n	800a958 <FreeRTOS_add_int32+0x40>
    {
        ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800a950:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a954:	60fb      	str	r3, [r7, #12]
 800a956:	e003      	b.n	800a960 <FreeRTOS_add_int32+0x48>
    }
    else
    {
        ret = a + b;
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	4413      	add	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 800a960:	68fb      	ldr	r3, [r7, #12]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <FreeRTOS_multiply_int32>:
 * @param[in] b the second value.
 * @return The result of a * b if no overflow occurs, or ipINT32_MAX_VALUE if an overflow would occur.
 */
int32_t FreeRTOS_multiply_int32( int32_t a,
                                 int32_t b )
{
 800a96e:	b480      	push	{r7}
 800a970:	b085      	sub	sp, #20
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
    int32_t ret;

    /* Check for overflow/underflow */
    if( a > 0 )
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dd23      	ble.n	800a9c6 <FreeRTOS_multiply_int32+0x58>
    {
        if( ( b > 0 ) && ( a > ( ipINT32_MAX_VALUE / b ) ) )
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	dd0b      	ble.n	800a99c <FreeRTOS_multiply_int32+0x2e>
 800a984:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	429a      	cmp	r2, r3
 800a992:	dd03      	ble.n	800a99c <FreeRTOS_multiply_int32+0x2e>
        {
            ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800a994:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	e037      	b.n	800aa0c <FreeRTOS_multiply_int32+0x9e>
        }
        else if( ( b < 0 ) && ( b < ( ipINT32_MIN_VALUE / a ) ) )
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	da0b      	bge.n	800a9ba <FreeRTOS_multiply_int32+0x4c>
 800a9a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	fb92 f3f3 	sdiv	r3, r2, r3
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	da03      	bge.n	800a9ba <FreeRTOS_multiply_int32+0x4c>
        {
            ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800a9b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e028      	b.n	800aa0c <FreeRTOS_multiply_int32+0x9e>
        }
        else
        {
            ret = a * b;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	fb02 f303 	mul.w	r3, r2, r3
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	e022      	b.n	800aa0c <FreeRTOS_multiply_int32+0x9e>
        }
    }
    else
    {
        if( ( b > 0 ) && ( a < ( ipINT32_MIN_VALUE / b ) ) )
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dd0b      	ble.n	800a9e4 <FreeRTOS_multiply_int32+0x76>
 800a9cc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	fb92 f3f3 	sdiv	r3, r2, r3
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	da03      	bge.n	800a9e4 <FreeRTOS_multiply_int32+0x76>
        {
            ret = ipINT32_MIN_VALUE; /* Negative underflow */
 800a9dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	e013      	b.n	800aa0c <FreeRTOS_multiply_int32+0x9e>
        }
        else if( ( b < 0 ) && ( a < ( ipINT32_MAX_VALUE / b ) ) )
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da0b      	bge.n	800aa02 <FreeRTOS_multiply_int32+0x94>
 800a9ea:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	fb92 f3f3 	sdiv	r3, r2, r3
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	da03      	bge.n	800aa02 <FreeRTOS_multiply_int32+0x94>
        {
            ret = ipINT32_MAX_VALUE; /* Positive overflow */
 800a9fa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	e004      	b.n	800aa0c <FreeRTOS_multiply_int32+0x9e>
        }
        else
        {
            ret = a * b;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	fb02 f303 	mul.w	r3, r2, r3
 800aa0a:	60fb      	str	r3, [r7, #12]
        }
    }

    return ret;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10d      	bne.n	800aa4a <FreeRTOS_round_up+0x30>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa32:	b672      	cpsid	i
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	b662      	cpsie	i
 800aa42:	60bb      	str	r3, [r7, #8]
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	e7fd      	b.n	800aa46 <FreeRTOS_round_up+0x2c>

    if( d != 0U )
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00a      	beq.n	800aa66 <FreeRTOS_round_up+0x4c>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	4413      	add	r3, r2
 800aa56:	1e5a      	subs	r2, r3, #1
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	fb02 f303 	mul.w	r3, r2, r3
 800aa64:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800aa66:	68fb      	ldr	r3, [r7, #12]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3301      	adds	r3, #1
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800aa8a:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	3302      	adds	r3, #2
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800aa94:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	3203      	adds	r2, #3
 800aa9a:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800aa9c:	4313      	orrs	r3, r2
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	021b      	lsls	r3, r3, #8
 800aab8:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	3201      	adds	r2, #1
 800aabe:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800aac0:	4313      	orrs	r3, r2
 800aac2:	b29b      	uxth	r3, r3
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800aad0:	b480      	push	{r7}
 800aad2:	b08b      	sub	sp, #44	@ 0x2c
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800aada:	2300      	movs	r3, #0
 800aadc:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	61fb      	str	r3, [r7, #28]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800aae2:	2300      	movs	r3, #0
 800aae4:	61bb      	str	r3, [r7, #24]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2b21      	cmp	r3, #33	@ 0x21
 800aaea:	d802      	bhi.n	800aaf2 <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800aaec:	2301      	movs	r3, #1
 800aaee:	61bb      	str	r3, [r7, #24]
                break;
 800aaf0:	e065      	b.n	800abbe <xCheckIPv4SizeFields+0xee>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	7b9b      	ldrb	r3, [r3, #14]
 800aaf6:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800aaf8:	8afb      	ldrh	r3, [r7, #22]
 800aafa:	2b44      	cmp	r3, #68	@ 0x44
 800aafc:	d902      	bls.n	800ab04 <xCheckIPv4SizeFields+0x34>
 800aafe:	8afb      	ldrh	r3, [r7, #22]
 800ab00:	2b4f      	cmp	r3, #79	@ 0x4f
 800ab02:	d902      	bls.n	800ab0a <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800ab04:	2302      	movs	r3, #2
 800ab06:	61bb      	str	r3, [r7, #24]
                break;
 800ab08:	e059      	b.n	800abbe <xCheckIPv4SizeFields+0xee>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800ab0a:	8afb      	ldrh	r3, [r7, #22]
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800ab14:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800ab16:	8afb      	ldrh	r3, [r7, #22]
 800ab18:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	330e      	adds	r3, #14
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d202      	bcs.n	800ab2a <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800ab24:	2303      	movs	r3, #3
 800ab26:	61bb      	str	r3, [r7, #24]
                break;
 800ab28:	e049      	b.n	800abbe <xCheckIPv4SizeFields+0xee>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	7c1a      	ldrb	r2, [r3, #16]
 800ab2e:	7c5b      	ldrb	r3, [r3, #17]
 800ab30:	021b      	lsls	r3, r3, #8
 800ab32:	4313      	orrs	r3, r2
 800ab34:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800ab36:	89fb      	ldrh	r3, [r7, #14]
 800ab38:	330e      	adds	r3, #14
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d202      	bcs.n	800ab46 <xCheckIPv4SizeFields+0x76>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800ab40:	2304      	movs	r3, #4
 800ab42:	61bb      	str	r3, [r7, #24]
                break;
 800ab44:	e03b      	b.n	800abbe <xCheckIPv4SizeFields+0xee>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	7ddb      	ldrb	r3, [r3, #23]
 800ab4a:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800ab4c:	7b7b      	ldrb	r3, [r7, #13]
 800ab4e:	2b11      	cmp	r3, #17
 800ab50:	d103      	bne.n	800ab5a <xCheckIPv4SizeFields+0x8a>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	3316      	adds	r3, #22
 800ab56:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab58:	e013      	b.n	800ab82 <xCheckIPv4SizeFields+0xb2>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800ab5a:	7b7b      	ldrb	r3, [r7, #13]
 800ab5c:	2b06      	cmp	r3, #6
 800ab5e:	d103      	bne.n	800ab68 <xCheckIPv4SizeFields+0x98>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3322      	adds	r3, #34	@ 0x22
 800ab64:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab66:	e00c      	b.n	800ab82 <xCheckIPv4SizeFields+0xb2>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800ab68:	7b7b      	ldrb	r3, [r7, #13]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d002      	beq.n	800ab74 <xCheckIPv4SizeFields+0xa4>
 800ab6e:	7b7b      	ldrb	r3, [r7, #13]
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d103      	bne.n	800ab7c <xCheckIPv4SizeFields+0xac>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	3316      	adds	r3, #22
 800ab78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab7a:	e002      	b.n	800ab82 <xCheckIPv4SizeFields+0xb2>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800ab7c:	2305      	movs	r3, #5
 800ab7e:	61bb      	str	r3, [r7, #24]
                break;
 800ab80:	e01d      	b.n	800abbe <xCheckIPv4SizeFields+0xee>
            }

            if( uxBufferLength < uxMinimumLength )
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d202      	bcs.n	800ab90 <xCheckIPv4SizeFields+0xc0>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800ab8a:	2306      	movs	r3, #6
 800ab8c:	61bb      	str	r3, [r7, #24]
                break;
 800ab8e:	e016      	b.n	800abbe <xCheckIPv4SizeFields+0xee>
            }

            uxLength = ( size_t ) usLength;
 800ab90:	89fb      	ldrh	r3, [r7, #14]
 800ab92:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	461a      	mov	r2, r3
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	1a9b      	subs	r3, r3, r2
 800ab9e:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2b07      	cmp	r3, #7
 800aba4:	d906      	bls.n	800abb4 <xCheckIPv4SizeFields+0xe4>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800abac:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d902      	bls.n	800abba <xCheckIPv4SizeFields+0xea>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800abb4:	2307      	movs	r3, #7
 800abb6:	61bb      	str	r3, [r7, #24]
                break;
 800abb8:	e001      	b.n	800abbe <xCheckIPv4SizeFields+0xee>
            }

            xResult = pdPASS;
 800abba:	2301      	movs	r3, #1
 800abbc:	623b      	str	r3, [r7, #32]
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
        }

        return xResult;
 800abbe:	6a3b      	ldr	r3, [r7, #32]
    }
 800abc0:	4618      	mov	r0, r3
 800abc2:	372c      	adds	r7, #44	@ 0x2c
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800abde:	d306      	bcc.n	800abee <xIsIPv4Multicast+0x22>
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800abe6:	d202      	bcs.n	800abee <xIsIPv4Multicast+0x22>
    {
        xReturn = pdTRUE;
 800abe8:	2301      	movs	r3, #1
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	e001      	b.n	800abf2 <xIsIPv4Multicast+0x26>
    }
    else
    {
        xReturn = pdFALSE;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800abf2:	68fb      	ldr	r3, [r7, #12]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <xIsIPv4Broadcast>:
 *
 * @return pdTRUE if the IP address is a broadcast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Broadcast( uint32_t ulIPAddress,
                             struct xNetworkEndPoint ** ppxEndPoint )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
    BaseType_t xIsBroadcast;
    NetworkEndPoint_t * pxEndPoint;

    /* Assign a default answer based on the "global" broadcast.	 This way
     * we can still return the correct result even if there are no endpoints. */
    xIsBroadcast = ( ulIPAddress == FREERTOS_INADDR_BROADCAST ) ? pdTRUE : pdFALSE;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d101      	bne.n	800ac16 <xIsIPv4Broadcast+0x16>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e000      	b.n	800ac18 <xIsIPv4Broadcast+0x18>
 800ac16:	2300      	movs	r3, #0
 800ac18:	60fb      	str	r3, [r7, #12]

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	f000 fb0a 	bl	800b234 <FreeRTOS_FirstEndPoint>
 800ac20:	60b8      	str	r0, [r7, #8]
 800ac22:	e00f      	b.n	800ac44 <xIsIPv4Broadcast+0x44>
            }
        #endif /* ( ipconfigUSE_IPv6 == ipconfigENABLE ) */

        /* If we already know if ulIPAddress is a broadcast,
         * simply return this first matching IPv4 endpoint. */
        if( xIsBroadcast == pdTRUE )
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d010      	beq.n	800ac4c <xIsIPv4Broadcast+0x4c>
        {
            break;
        }
        else if( ulIPAddress == pxEndPoint->ipv4_settings.ulBroadcastAddress )
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d102      	bne.n	800ac3a <xIsIPv4Broadcast+0x3a>
        {
            xIsBroadcast = pdTRUE;
 800ac34:	2301      	movs	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]
            break;
 800ac38:	e009      	b.n	800ac4e <xIsIPv4Broadcast+0x4e>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800ac3a:	68b9      	ldr	r1, [r7, #8]
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	f000 fb41 	bl	800b2c4 <FreeRTOS_NextEndPoint>
 800ac42:	60b8      	str	r0, [r7, #8]
         pxEndPoint != NULL;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1ec      	bne.n	800ac24 <xIsIPv4Broadcast+0x24>
 800ac4a:	e000      	b.n	800ac4e <xIsIPv4Broadcast+0x4e>
            break;
 800ac4c:	bf00      	nop
    /* If the caller wants to know the corresponding endpoint, copy the result.
     * Note that this may be null if ulIPAddress is 255.255.255.255 AND there are
     * no IPv4 endpoints.
     * Also, when ulIPAddress is 255.255.255.255, we will
     * return the first IPv4 endpoint that we run across. */
    if( ( xIsBroadcast == pdTRUE ) && ( ppxEndPoint != NULL ) )
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d105      	bne.n	800ac60 <xIsIPv4Broadcast+0x60>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <xIsIPv4Broadcast+0x60>
    {
        *ppxEndPoint = pxEndPoint;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	601a      	str	r2, [r3, #0]
    }

    return xIsBroadcast;
 800ac60:	68fb      	ldr	r3, [r7, #12]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <xBadIPv4Loopback>:
 *
 * @return Returns pdTRUE if the packet should be stopped, because either the source
 *         or the target address is a loopback address.
 */
BaseType_t xBadIPv4Loopback( const IPHeader_t * const pxIPHeader )
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b086      	sub	sp, #24
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]
    BaseType_t x1 = ( xIsIPv4Loopback( pxIPHeader->ulDestinationIPAddress ) != 0 ) ? pdTRUE : pdFALSE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f81e 	bl	800acbc <xIsIPv4Loopback>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <xBadIPv4Loopback+0x20>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e000      	b.n	800ac8c <xBadIPv4Loopback+0x22>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	613b      	str	r3, [r7, #16]
    BaseType_t x2 = ( xIsIPv4Loopback( pxIPHeader->ulSourceIPAddress ) != 0 ) ? pdTRUE : pdFALSE;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 f812 	bl	800acbc <xIsIPv4Loopback>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <xBadIPv4Loopback+0x38>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <xBadIPv4Loopback+0x3a>
 800aca2:	2300      	movs	r3, #0
 800aca4:	60fb      	str	r3, [r7, #12]

    if( x1 != x2 )
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d001      	beq.n	800acb2 <xBadIPv4Loopback+0x48>
    {
        /* Either the source or the destination address is an IPv4 loopback address. */
        xReturn = pdTRUE;
 800acae:	2301      	movs	r3, #1
 800acb0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800acb2:	697b      	ldr	r3, [r7, #20]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <xIsIPv4Loopback>:
 * @param[in] ulAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv4Loopback( uint32_t ulAddress )
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800acc4:	2300      	movs	r3, #0
 800acc6:	60fb      	str	r3, [r7, #12]
    uint32_t ulIP = FreeRTOS_ntohl( ulAddress );
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_LOOPBACK_IPv4 ) &&
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800acd2:	d304      	bcc.n	800acde <xIsIPv4Loopback+0x22>
        ( ulIP < ipLAST_LOOPBACK_IPv4 ) )
 800acd4:	68bb      	ldr	r3, [r7, #8]
    if( ( ulIP >= ipFIRST_LOOPBACK_IPv4 ) &&
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	db01      	blt.n	800acde <xIsIPv4Loopback+0x22>
    {
        xReturn = pdTRUE;
 800acda:	2301      	movs	r3, #1
 800acdc:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800acde:	68fb      	ldr	r3, [r7, #12]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	@ 0x28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	330e      	adds	r3, #14
 800ad02:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
    {
        /* In systems with a very small amount of RAM, it might be advantageous
         * to have incoming messages checked earlier, by the network card driver.
         * This method may decrease the usage of scarce network buffers. */
        uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	61fb      	str	r3, [r7, #28]
        uint32_t ulSourceIPAddress = pxIPHeader->ulSourceIPAddress;
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	61bb      	str	r3, [r7, #24]
        /* Get a reference to the endpoint that the packet was assigned to during pxEasyFit() */
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad14:	617b      	str	r3, [r7, #20]

        /* Ensure that the incoming packet is not fragmented because the stack
         * doesn't not support IP fragmentation. All but the last fragment coming in will have their
         * "more fragments" flag set and the last fragment will have a non-zero offset.
         * We need to drop the packet in either of those cases. */
        if( ( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U ) || ( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_FLAGS_MORE_FRAGMENTS ) != 0U ) )
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	88db      	ldrh	r3, [r3, #6]
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d106      	bne.n	800ad32 <prvAllowIPPacketIPv4+0x46>
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	88db      	ldrh	r3, [r3, #6]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <prvAllowIPPacketIPv4+0x4e>
        {
            /* Can not handle, fragmented packet. */
            eReturn = eReleaseBuffer;
 800ad32:	2300      	movs	r3, #0
 800ad34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad38:	e09a      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
        }

        /* Test if the length of the IP-header is between 20 and 60 bytes,
         * and if the IP-version is 4. */
        else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b44      	cmp	r3, #68	@ 0x44
 800ad40:	d903      	bls.n	800ad4a <prvAllowIPPacketIPv4+0x5e>
                 ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	781b      	ldrb	r3, [r3, #0]
        else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800ad46:	2b4f      	cmp	r3, #79	@ 0x4f
 800ad48:	d903      	bls.n	800ad52 <prvAllowIPPacketIPv4+0x66>
        {
            /* Can not handle, unknown or invalid header version. */
            eReturn = eReleaseBuffer;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad50:	e08e      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
        }
        else if( ( xIsIPv4Loopback( ulDestinationIPAddress ) == pdTRUE ) ||
 800ad52:	69f8      	ldr	r0, [r7, #28]
 800ad54:	f7ff ffb2 	bl	800acbc <xIsIPv4Loopback>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d005      	beq.n	800ad6a <prvAllowIPPacketIPv4+0x7e>
                 ( xIsIPv4Loopback( ulSourceIPAddress ) == pdTRUE ) )
 800ad5e:	69b8      	ldr	r0, [r7, #24]
 800ad60:	f7ff ffac 	bl	800acbc <xIsIPv4Loopback>
 800ad64:	4603      	mov	r3, r0
        else if( ( xIsIPv4Loopback( ulDestinationIPAddress ) == pdTRUE ) ||
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d10b      	bne.n	800ad82 <prvAllowIPPacketIPv4+0x96>
        {
            /* source OR destination is a loopback address. Make sure they BOTH are. */
            if( xBadIPv4Loopback( &( pxIPPacket->xIPHeader ) ) == pdTRUE )
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	330e      	adds	r3, #14
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff ff7b 	bl	800ac6a <xBadIPv4Loopback>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d17a      	bne.n	800ae70 <prvAllowIPPacketIPv4+0x184>
            {
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                eReturn = eReleaseBuffer;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( xBadIPv4Loopback( &( pxIPPacket->xIPHeader ) ) == pdTRUE )
 800ad80:	e076      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
            }
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes,
                         pxIPPacket->xEthernetHeader.xSourceAddress.ucBytes,
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3306      	adds	r3, #6
        else if( memcmp( xBroadcastMACAddress.ucBytes,
 800ad86:	2206      	movs	r2, #6
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4845      	ldr	r0, [pc, #276]	@ (800aea0 <prvAllowIPPacketIPv4+0x1b4>)
 800ad8c:	f00c fc08 	bl	80175a0 <memcmp>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <prvAllowIPPacketIPv4+0xb2>
                         sizeof( MACAddress_t ) ) == 0 )
        {
            /* Ethernet source is a broadcast address. Drop the packet. */
            eReturn = eReleaseBuffer;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad9c:	e068      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
        }
        else if( xIsIPv4Multicast( ulSourceIPAddress ) == pdTRUE )
 800ad9e:	69b8      	ldr	r0, [r7, #24]
 800ada0:	f7ff ff14 	bl	800abcc <xIsIPv4Multicast>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d103      	bne.n	800adb2 <prvAllowIPPacketIPv4+0xc6>
        {
            /* Source is a multicast IP address. Drop the packet in conformity with RFC 1112 section 7.2. */
            eReturn = eReleaseBuffer;
 800adaa:	2300      	movs	r3, #0
 800adac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800adb0:	e05e      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
        }

        /* Use ipv4_settings for filtering only after the endpoint is up,
         * so that DHCP packets that are exchanged for DHCP (example, DHCP unicast offers)
         * are not dropped/filtered. */
        else if( FreeRTOS_IsEndPointUp( pxEndPoint ) != pdFALSE )
 800adb2:	6978      	ldr	r0, [r7, #20]
 800adb4:	f7ff f89c 	bl	8009ef0 <FreeRTOS_IsEndPointUp>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d03a      	beq.n	800ae34 <prvAllowIPPacketIPv4+0x148>
        {
            if(
                /* Not destined for the assigned endpoint IPv4 address? */
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulIPAddress ) &&
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	681b      	ldr	r3, [r3, #0]
            if(
 800adc2:	69fa      	ldr	r2, [r7, #28]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d012      	beq.n	800adee <prvAllowIPPacketIPv4+0x102>
                /* Also not an IPv4 broadcast address ? */
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) &&
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	695b      	ldr	r3, [r3, #20]
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulIPAddress ) &&
 800adcc:	69fa      	ldr	r2, [r7, #28]
 800adce:	429a      	cmp	r2, r3
 800add0:	d00d      	beq.n	800adee <prvAllowIPPacketIPv4+0x102>
                ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) &&
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add8:	d009      	beq.n	800adee <prvAllowIPPacketIPv4+0x102>
                ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) &&
                /* And not an IPv4 multicast address ? */
                ( xIsIPv4Multicast( ulDestinationIPAddress ) == pdFALSE ) )
 800adda:	69f8      	ldr	r0, [r7, #28]
 800addc:	f7ff fef6 	bl	800abcc <xIsIPv4Multicast>
 800ade0:	4603      	mov	r3, r0
                ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) &&
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d103      	bne.n	800adee <prvAllowIPPacketIPv4+0x102>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 800ade6:	2300      	movs	r3, #0
 800ade8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800adec:	e040      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
            }
            /* Is the source address correct? */
            else if( ( ulSourceIPAddress == pxEndPoint->ipv4_settings.ulBroadcastAddress ) ||
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d003      	beq.n	800ae00 <prvAllowIPPacketIPv4+0x114>
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfe:	d103      	bne.n	800ae08 <prvAllowIPPacketIPv4+0x11c>
                     ( ulSourceIPAddress == FREERTOS_INADDR_BROADCAST ) )
            {
                /* The source address cannot be broadcast address. Replying to this
                 * packet may cause network storms. Drop the packet. */
                eReturn = eReleaseBuffer;
 800ae00:	2300      	movs	r3, #0
 800ae02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae06:	e033      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
            }
            else if( ( memcmp( xBroadcastMACAddress.ucBytes,
                               pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800ae08:	68fb      	ldr	r3, [r7, #12]
            else if( ( memcmp( xBroadcastMACAddress.ucBytes,
 800ae0a:	2206      	movs	r2, #6
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4824      	ldr	r0, [pc, #144]	@ (800aea0 <prvAllowIPPacketIPv4+0x1b4>)
 800ae10:	f00c fbc6 	bl	80175a0 <memcmp>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d12a      	bne.n	800ae70 <prvAllowIPPacketIPv4+0x184>
                               sizeof( MACAddress_t ) ) == 0 ) &&
                     ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) && ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) )
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	695b      	ldr	r3, [r3, #20]
                               sizeof( MACAddress_t ) ) == 0 ) &&
 800ae1e:	69fa      	ldr	r2, [r7, #28]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d025      	beq.n	800ae70 <prvAllowIPPacketIPv4+0x184>
                     ( ulDestinationIPAddress != pxEndPoint->ipv4_settings.ulBroadcastAddress ) && ( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST ) )
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2a:	d021      	beq.n	800ae70 <prvAllowIPPacketIPv4+0x184>
            {
                /* Ethernet address is a broadcast address, but the IP address is not a
                 * broadcast address. */
                eReturn = eReleaseBuffer;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae32:	e01d      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
        {
            /* Endpoint is down */

            /* Check if the destination MAC address is a broadcast MAC address. */
            if( memcmp( xBroadcastMACAddress.ucBytes,
                        pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800ae34:	68fb      	ldr	r3, [r7, #12]
            if( memcmp( xBroadcastMACAddress.ucBytes,
 800ae36:	2206      	movs	r2, #6
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4819      	ldr	r0, [pc, #100]	@ (800aea0 <prvAllowIPPacketIPv4+0x1b4>)
 800ae3c:	f00c fbb0 	bl	80175a0 <memcmp>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d107      	bne.n	800ae56 <prvAllowIPPacketIPv4+0x16a>
                        sizeof( MACAddress_t ) ) == 0 )
            {
                if( ulDestinationIPAddress != FREERTOS_INADDR_BROADCAST )
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4c:	d010      	beq.n	800ae70 <prvAllowIPPacketIPv4+0x184>
                {
                    /* Ethernet address is a broadcast address, but the IP address is not a
                     * broadcast address. */
                    eReturn = eReleaseBuffer;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae54:	e00c      	b.n	800ae70 <prvAllowIPPacketIPv4+0x184>
             * forward to the IP layer any IP packets delivered to the client's
             * hardware address before the IP address is configured; DHCP servers
             * and BOOTP relay agents may not be able to deliver DHCP messages to
             * clients that cannot accept hardware unicast datagrams before the
             * TCP/IP software is configured. */
            else if( ( memcmp( pxEndPoint->xMACAddress.ucBytes,
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	3338      	adds	r3, #56	@ 0x38
                               pxIPPacket->xEthernetHeader.xDestinationAddress.ucBytes,
 800ae5a:	68f9      	ldr	r1, [r7, #12]
            else if( ( memcmp( pxEndPoint->xMACAddress.ucBytes,
 800ae5c:	2206      	movs	r2, #6
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f00c fb9e 	bl	80175a0 <memcmp>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <prvAllowIPPacketIPv4+0x184>
                               sizeof( MACAddress_t ) ) != 0 ) )
            {
                /* The endpoint is not up, and the destination MAC address of the
                 * packet is not matching the endpoint's MAC address nor broadcast
                 * MAC address. Drop the packet. */
                eReturn = eReleaseBuffer;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800ae70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d10d      	bne.n	800ae94 <prvAllowIPPacketIPv4+0x1a8>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae80:	4619      	mov	r1, r3
 800ae82:	4610      	mov	r0, r2
 800ae84:	f7ff fe24 	bl	800aad0 <xCheckIPv4SizeFields>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d002      	beq.n	800ae94 <prvAllowIPPacketIPv4+0x1a8>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800ae94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3728      	adds	r7, #40	@ 0x28
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	08018904 	.word	0x08018904

0800aea4 <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b08a      	sub	sp, #40	@ 0x28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800aeac:	2301      	movs	r3, #1
 800aeae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb6:	330e      	adds	r3, #14
 800aeb8:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800aec8:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	3b14      	subs	r3, #20
 800aece:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	330e      	adds	r3, #14
 800aed8:	4413      	add	r3, r2
 800aeda:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee0:	3322      	adds	r3, #34	@ 0x22
 800aee2:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	3b22      	subs	r3, #34	@ 0x22
 800aeee:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	6939      	ldr	r1, [r7, #16]
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f00c fb63 	bl	80175c0 <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	1ad2      	subs	r2, r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800af06:	6a3b      	ldr	r3, [r7, #32]
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	1ad3      	subs	r3, r2, r3
 800af12:	b29a      	uxth	r2, r3
 800af14:	6a3b      	ldr	r3, [r7, #32]
 800af16:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	f023 030f 	bic.w	r3, r3, #15
 800af20:	b2db      	uxtb	r3, r3
 800af22:	f043 0305 	orr.w	r3, r3, #5
 800af26:	b2da      	uxtb	r2, r3
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800af2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800af30:	4618      	mov	r0, r3
 800af32:	3728      	adds	r7, #40	@ 0x28
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b088      	sub	sp, #32
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b0f      	cmp	r3, #15
 800af48:	d802      	bhi.n	800af50 <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	61fb      	str	r3, [r7, #28]
 800af4e:	e00e      	b.n	800af6e <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800af50:	f107 0314 	add.w	r3, r7, #20
 800af54:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	461a      	mov	r2, r3
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	4618      	mov	r0, r3
 800af66:	f001 f92f 	bl	800c1c8 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800af6e:	69fb      	ldr	r3, [r7, #28]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3720      	adds	r7, #32
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_0;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2201      	movs	r2, #1
 800af8a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_1;
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	2200      	movs	r2, #0
 800af90:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) ipMULTICAST_MAC_ADDRESS_IPv4_2;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	225e      	movs	r2, #94	@ 0x5e
 800af96:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	0c1b      	lsrs	r3, r3, #16
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	0a1b      	lsrs	r3, r3, #8
 800afac:	b2da      	uxtb	r2, r3
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	715a      	strb	r2, [r3, #5]
}
 800afba:	bf00      	nop
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b086      	sub	sp, #24
 800afca:	af00      	add	r7, sp, #0
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	60b9      	str	r1, [r7, #8]
 800afd0:	607a      	str	r2, [r7, #4]
 800afd2:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d074      	beq.n	800b0c4 <FreeRTOS_FillEndPoint+0xfe>
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d071      	beq.n	800b0c4 <FreeRTOS_FillEndPoint+0xfe>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afe4:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800afe6:	2274      	movs	r2, #116	@ 0x74
 800afe8:	2100      	movs	r1, #0
 800afea:	68b8      	ldr	r0, [r7, #8]
 800afec:	f00c fb02 	bl	80175f4 <memset>
            pxEndPoint->pxNext = pxNext;
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	671a      	str	r2, [r3, #112]	@ 0x70

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	061a      	lsls	r2, r3, #24
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3301      	adds	r3, #1
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	041b      	lsls	r3, r3, #16
 800b004:	431a      	orrs	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	3302      	adds	r3, #2
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	021b      	lsls	r3, r3, #8
 800b00e:	4313      	orrs	r3, r2
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	3203      	adds	r2, #3
 800b014:	7812      	ldrb	r2, [r2, #0]
 800b016:	4313      	orrs	r3, r2
 800b018:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	061a      	lsls	r2, r3, #24
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	3301      	adds	r3, #1
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	041b      	lsls	r3, r3, #16
 800b028:	431a      	orrs	r2, r3
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	3302      	adds	r3, #2
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	4313      	orrs	r3, r2
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	3203      	adds	r2, #3
 800b038:	7812      	ldrb	r2, [r2, #0]
 800b03a:	431a      	orrs	r2, r3
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	061a      	lsls	r2, r3, #24
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	3301      	adds	r3, #1
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	041b      	lsls	r3, r3, #16
 800b04e:	431a      	orrs	r2, r3
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	3302      	adds	r3, #2
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	021b      	lsls	r3, r3, #8
 800b058:	4313      	orrs	r3, r2
 800b05a:	6a3a      	ldr	r2, [r7, #32]
 800b05c:	3203      	adds	r2, #3
 800b05e:	7812      	ldrb	r2, [r2, #0]
 800b060:	431a      	orrs	r2, r3
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	061a      	lsls	r2, r3, #24
 800b06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06e:	3301      	adds	r3, #1
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	041b      	lsls	r3, r3, #16
 800b074:	431a      	orrs	r2, r3
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	3302      	adds	r3, #2
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	4313      	orrs	r3, r2
 800b080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b082:	3203      	adds	r2, #3
 800b084:	7812      	ldrb	r2, [r2, #0]
 800b086:	431a      	orrs	r2, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	43da      	mvns	r2, r3
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	431a      	orrs	r2, r3
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	331c      	adds	r3, #28
 800b09e:	68b9      	ldr	r1, [r7, #8]
 800b0a0:	221c      	movs	r2, #28
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f00c fb81 	bl	80177aa <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	3338      	adds	r3, #56	@ 0x38
 800b0b2:	2206      	movs	r2, #6
 800b0b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f00c fb77 	bl	80177aa <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800b0bc:	68b9      	ldr	r1, [r7, #8]
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 f826 	bl	800b110 <FreeRTOS_AddEndPoint>
        }
    }
 800b0c4:	bf00      	nop
 800b0c6:	3718      	adds	r7, #24
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
        configASSERT( pxNetworkInterfaces == NULL );
 800b0d4:	4b0d      	ldr	r3, [pc, #52]	@ (800b10c <FreeRTOS_AddNetworkInterface+0x40>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00d      	beq.n	800b0f8 <FreeRTOS_AddNetworkInterface+0x2c>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e0:	b672      	cpsid	i
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	b662      	cpsie	i
 800b0f0:	60fb      	str	r3, [r7, #12]
}
 800b0f2:	bf00      	nop
 800b0f4:	bf00      	nop
 800b0f6:	e7fd      	b.n	800b0f4 <FreeRTOS_AddNetworkInterface+0x28>
        pxNetworkInterfaces = pxInterface;
 800b0f8:	4a04      	ldr	r2, [pc, #16]	@ (800b10c <FreeRTOS_AddNetworkInterface+0x40>)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6013      	str	r3, [r2, #0]
        return pxInterface;
 800b0fe:	687b      	ldr	r3, [r7, #4]
    }
 800b100:	4618      	mov	r0, r3
 800b102:	3714      	adds	r7, #20
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20002608 	.word	0x20002608

0800b110 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
        /* This code is in backward-compatibility mode.
         * Only one end-point is allowed, make sure that
         * no end-point has been defined yet. */
        configASSERT( pxNetworkEndPoints == NULL );
 800b11a:	4b12      	ldr	r3, [pc, #72]	@ (800b164 <FreeRTOS_AddEndPoint+0x54>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00d      	beq.n	800b13e <FreeRTOS_AddEndPoint+0x2e>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b126:	b672      	cpsid	i
 800b128:	f383 8811 	msr	BASEPRI, r3
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	b662      	cpsie	i
 800b136:	60fb      	str	r3, [r7, #12]
}
 800b138:	bf00      	nop
 800b13a:	bf00      	nop
 800b13c:	e7fd      	b.n	800b13a <FreeRTOS_AddEndPoint+0x2a>

        /* This end point will go to the end of the list, so there is no pxNext
         * yet. */
        pxEndPoint->pxNext = NULL;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2200      	movs	r2, #0
 800b142:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	66da      	str	r2, [r3, #108]	@ 0x6c

        pxInterface->pxEndPoint = pxEndPoint;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	621a      	str	r2, [r3, #32]

        /* No other end points are defined yet - so this is the first in the
         * list. */
        pxNetworkEndPoints = pxEndPoint;
 800b150:	4a04      	ldr	r2, [pc, #16]	@ (800b164 <FreeRTOS_AddEndPoint+0x54>)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	6013      	str	r3, [r2, #0]

        return pxEndPoint;
 800b156:	683b      	ldr	r3, [r7, #0]
    }
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	20002604 	.word	0x20002604

0800b168 <FreeRTOS_FindEndPointOnIP_IPv4>:
 * @param[in] ulIPAddress The IP-address of interest, or 0 if any IPv4 end-point may be returned.
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress )
    {
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxResult = NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]

        ( void ) ulIPAddress;

        if( ( ulIPAddress == 0U ) || ( pxNetworkEndPoints->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d005      	beq.n	800b186 <FreeRTOS_FindEndPointOnIP_IPv4+0x1e>
 800b17a:	4b08      	ldr	r3, [pc, #32]	@ (800b19c <FreeRTOS_FindEndPointOnIP_IPv4+0x34>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	429a      	cmp	r2, r3
 800b184:	d102      	bne.n	800b18c <FreeRTOS_FindEndPointOnIP_IPv4+0x24>
        {
            pxResult = pxNetworkEndPoints;
 800b186:	4b05      	ldr	r3, [pc, #20]	@ (800b19c <FreeRTOS_FindEndPointOnIP_IPv4+0x34>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800b18c:	68fb      	ldr	r3, [r7, #12]
    }
 800b18e:	4618      	mov	r0, r3
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	20002604 	.word	0x20002604

0800b1a0 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	60fb      	str	r3, [r7, #12]

        ( void ) pxMACAddress;
        ( void ) pxInterface;

        if( ( pxMACAddress != NULL ) && ( memcmp( pxNetworkEndPoints->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) )
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00d      	beq.n	800b1d0 <FreeRTOS_FindEndPointOnMAC+0x30>
 800b1b4:	4b09      	ldr	r3, [pc, #36]	@ (800b1dc <FreeRTOS_FindEndPointOnMAC+0x3c>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3338      	adds	r3, #56	@ 0x38
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	2206      	movs	r2, #6
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f00c f9ee 	bl	80175a0 <memcmp>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d102      	bne.n	800b1d0 <FreeRTOS_FindEndPointOnMAC+0x30>
        {
            pxResult = pxNetworkEndPoints;
 800b1ca:	4b04      	ldr	r3, [pc, #16]	@ (800b1dc <FreeRTOS_FindEndPointOnMAC+0x3c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
    }
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20002604 	.word	0x20002604

0800b1e0 <FreeRTOS_FindEndPointOnNetMask>:
 * @param[in] ulIPAddress The IP-address for which an end-point is looked-up.
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress )
    {
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress );
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	f000 f83c 	bl	800b268 <FreeRTOS_InterfaceEndPointOnNetMask>
 800b1f0:	4603      	mov	r3, r0
    }
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxReturn = NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	60fb      	str	r3, [r7, #12]

        ( void ) xIPType;

        if( pxNetworkEndPoints != NULL )
 800b208:	4b09      	ldr	r3, [pc, #36]	@ (800b230 <FreeRTOS_FindGateWay+0x34>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d007      	beq.n	800b220 <FreeRTOS_FindGateWay+0x24>
        {
            if( pxNetworkEndPoints->ipv4_settings.ulGatewayAddress != 0U )
 800b210:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <FreeRTOS_FindGateWay+0x34>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d002      	beq.n	800b220 <FreeRTOS_FindGateWay+0x24>
            {
                pxReturn = pxNetworkEndPoints;
 800b21a:	4b05      	ldr	r3, [pc, #20]	@ (800b230 <FreeRTOS_FindGateWay+0x34>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	60fb      	str	r3, [r7, #12]
            }
        }

        return pxReturn;
 800b220:	68fb      	ldr	r3, [r7, #12]
    }
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	20002604 	.word	0x20002604

0800b234 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
        ( void ) pxInterface;

        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined and this is the simplified version:
         * only one interface and one end-point is defined. */
        return pxNetworkEndPoints;
 800b23c:	4b03      	ldr	r3, [pc, #12]	@ (800b24c <FreeRTOS_FirstEndPoint+0x18>)
 800b23e:	681b      	ldr	r3, [r3, #0]
    }
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	20002604 	.word	0x20002604

0800b250 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined: only one interface and
         * one end-point is defined. */
        return pxNetworkInterfaces;
 800b254:	4b03      	ldr	r3, [pc, #12]	@ (800b264 <FreeRTOS_FirstNetworkInterface+0x14>)
 800b256:	681b      	ldr	r3, [r3, #0]
    }
 800b258:	4618      	mov	r0, r3
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	20002608 	.word	0x20002608

0800b268 <FreeRTOS_InterfaceEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress )
    {
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]

        ( void ) pxInterface;

        if( ( ( ulIPAddress ^ pxNetworkEndPoints->ipv4_settings.ulIPAddress ) & pxNetworkEndPoints->ipv4_settings.ulNetMask ) == 0U )
 800b276:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a0 <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	405a      	eors	r2, r3
 800b280:	4b07      	ldr	r3, [pc, #28]	@ (800b2a0 <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	4013      	ands	r3, r2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <FreeRTOS_InterfaceEndPointOnNetMask+0x2a>
        {
            pxResult = pxNetworkEndPoints;
 800b28c:	4b04      	ldr	r3, [pc, #16]	@ (800b2a0 <FreeRTOS_InterfaceEndPointOnNetMask+0x38>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60fb      	str	r3, [r7, #12]
        }

        return pxResult;
 800b292:	68fb      	ldr	r3, [r7, #12]
    }
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	20002604 	.word	0x20002604

0800b2a4 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
        ( void ) pxNetworkInterface;
        ( void ) pucEthernetBuffer;

        /* ipconfigCOMPATIBLE_WITH_SINGLE is defined: only one interface and
         * one end-point is defined. */
        return pxNetworkEndPoints;
 800b2ae:	4b04      	ldr	r3, [pc, #16]	@ (800b2c0 <FreeRTOS_MatchingEndpoint+0x1c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
    }
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	20002604 	.word	0x20002604

0800b2c4 <FreeRTOS_NextEndPoint>:
 *
 * @return NULL because ipconfigCOMPATIBLE_WITH_SINGLE is defined.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
        ( void ) pxInterface;
        ( void ) pxEndPoint;

        return NULL;
 800b2ce:	2300      	movs	r3, #0
    }
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <FreeRTOS_NextNetworkInterface>:
 * @brief Get the next interface.
 *
 * @return NULL because ipconfigCOMPATIBLE_WITH_SINGLE is defined.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
        ( void ) pxInterface;

        return NULL;
 800b2e4:	2300      	movs	r3, #0
    }
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <xCheckRequiresResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsResolution = pdFALSE;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60fb      	str	r3, [r7, #12]

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7fe fe3a 	bl	8009f78 <uxIPHeaderSizePacket>
 800b304:	4603      	mov	r3, r0
 800b306:	2b14      	cmp	r3, #20
 800b308:	d104      	bne.n	800b314 <xCheckRequiresResolution+0x22>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case ipSIZE_OF_IPv4_HEADER:
                xNeedsResolution = xCheckRequiresARPResolution( pxNetworkBuffer );
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7fc fc5a 	bl	8007bc4 <xCheckRequiresARPResolution>
 800b310:	60f8      	str	r0, [r7, #12]
                break;
 800b312:	e000      	b.n	800b316 <xCheckRequiresResolution+0x24>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 800b314:	bf00      	nop
    }

    return xNeedsResolution;
 800b316:	68fb      	ldr	r3, [r7, #12]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <xApplicationGetRandomNumber>:
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset );

//USER FUNCTIONS
BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber )
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]

    // Example: use your MCU's hardware RNG or a simple PRNG
    static uint32_t seed = 123456789;

    // Simple Linear Congruential Generator example (not cryptographically secure)
    seed = (1103515245 * seed + 12345) & 0x7FFFFFFF;
 800b328:	4b0b      	ldr	r3, [pc, #44]	@ (800b358 <xApplicationGetRandomNumber+0x38>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a0b      	ldr	r2, [pc, #44]	@ (800b35c <xApplicationGetRandomNumber+0x3c>)
 800b32e:	fb03 f202 	mul.w	r2, r3, r2
 800b332:	f243 0339 	movw	r3, #12345	@ 0x3039
 800b336:	4413      	add	r3, r2
 800b338:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b33c:	4a06      	ldr	r2, [pc, #24]	@ (800b358 <xApplicationGetRandomNumber+0x38>)
 800b33e:	6013      	str	r3, [r2, #0]
    *pulNumber = seed;
 800b340:	4b05      	ldr	r3, [pc, #20]	@ (800b358 <xApplicationGetRandomNumber+0x38>)
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	601a      	str	r2, [r3, #0]

    return pdTRUE;
 800b348:	2301      	movs	r3, #1
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	20000014 	.word	0x20000014
 800b35c:	41c64e6d 	.word	0x41c64e6d

0800b360 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f001 fb5f 	bl	800ca30 <xSocketValid>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800b378:	2300      	movs	r3, #0
 800b37a:	617b      	str	r3, [r7, #20]
 800b37c:	e015      	b.n	800b3aa <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d006      	beq.n	800b392 <prvValidSocket+0x32>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	69db      	ldr	r3, [r3, #28]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d102      	bne.n	800b392 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800b38c:	2300      	movs	r3, #0
 800b38e:	617b      	str	r3, [r7, #20]
 800b390:	e00b      	b.n	800b3aa <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d002      	beq.n	800b3a6 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]
 800b3a4:	e001      	b.n	800b3aa <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b3aa:	697b      	ldr	r3, [r7, #20]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3718      	adds	r7, #24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800b3b8:	4803      	ldr	r0, [pc, #12]	@ (800b3c8 <vNetworkSocketsInit+0x14>)
 800b3ba:	f008 fb5e 	bl	8013a7a <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800b3be:	4803      	ldr	r0, [pc, #12]	@ (800b3cc <vNetworkSocketsInit+0x18>)
 800b3c0:	f008 fb5b 	bl	8013a7a <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800b3c4:	bf00      	nop
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	2000260c 	.word	0x2000260c
 800b3cc:	20002620 	.word	0x20002620

0800b3d0 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08c      	sub	sp, #48	@ 0x30
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
 800b3dc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800b3e6:	f7fe fd6f 	bl	8009ec8 <xIPIsNetworkTaskReady>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d102      	bne.n	800b3f6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3f4:	e089      	b.n	800b50a <prvDetermineSocketSize+0x13a>
    else
    {
        /* Only Ethernet is currently supported. */
        #if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) )
        {
            if( xDomain != FREERTOS_AF_INET )
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d001      	beq.n	800b400 <prvDetermineSocketSize+0x30>
            {
                xReturn = pdFAIL;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            configASSERT( xDomain == FREERTOS_AF_INET );
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2b02      	cmp	r3, #2
 800b404:	d00d      	beq.n	800b422 <prvDetermineSocketSize+0x52>
	__asm volatile
 800b406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b40a:	b672      	cpsid	i
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	b662      	cpsie	i
 800b41a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b41c:	bf00      	nop
 800b41e:	bf00      	nop
 800b420:	e7fd      	b.n	800b41e <prvDetermineSocketSize+0x4e>
            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800b422:	4b3c      	ldr	r3, [pc, #240]	@ (800b514 <prvDetermineSocketSize+0x144>)
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b42a:	d00d      	beq.n	800b448 <prvDetermineSocketSize+0x78>
	__asm volatile
 800b42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b430:	b672      	cpsid	i
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	b662      	cpsie	i
 800b440:	623b      	str	r3, [r7, #32]
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <prvDetermineSocketSize+0x74>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800b448:	4b33      	ldr	r3, [pc, #204]	@ (800b518 <prvDetermineSocketSize+0x148>)
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b450:	d00d      	beq.n	800b46e <prvDetermineSocketSize+0x9e>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b456:	b672      	cpsid	i
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	b662      	cpsie	i
 800b466:	61fb      	str	r3, [r7, #28]
}
 800b468:	bf00      	nop
 800b46a:	bf00      	nop
 800b46c:	e7fd      	b.n	800b46a <prvDetermineSocketSize+0x9a>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b11      	cmp	r3, #17
 800b472:	d119      	bne.n	800b4a8 <prvDetermineSocketSize+0xd8>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2b02      	cmp	r3, #2
 800b478:	d012      	beq.n	800b4a0 <prvDetermineSocketSize+0xd0>
            {
                xReturn = pdFAIL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800b47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b480:	2b01      	cmp	r3, #1
 800b482:	d00d      	beq.n	800b4a0 <prvDetermineSocketSize+0xd0>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b488:	b672      	cpsid	i
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	b662      	cpsie	i
 800b498:	61bb      	str	r3, [r7, #24]
}
 800b49a:	bf00      	nop
 800b49c:	bf00      	nop
 800b49e:	e7fd      	b.n	800b49c <prvDetermineSocketSize+0xcc>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2278      	movs	r2, #120	@ 0x78
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	e030      	b.n	800b50a <prvDetermineSocketSize+0x13a>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b06      	cmp	r3, #6
 800b4ac:	d11a      	bne.n	800b4e4 <prvDetermineSocketSize+0x114>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d012      	beq.n	800b4da <prvDetermineSocketSize+0x10a>
                {
                    xReturn = pdFAIL;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800b4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d00d      	beq.n	800b4da <prvDetermineSocketSize+0x10a>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	b672      	cpsid	i
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	b662      	cpsie	i
 800b4d2:	617b      	str	r3, [r7, #20]
}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	e7fd      	b.n	800b4d6 <prvDetermineSocketSize+0x106>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b4e0:	601a      	str	r2, [r3, #0]
 800b4e2:	e012      	b.n	800b50a <prvDetermineSocketSize+0x13a>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800b4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d00d      	beq.n	800b50a <prvDetermineSocketSize+0x13a>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f2:	b672      	cpsid	i
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	b662      	cpsie	i
 800b502:	613b      	str	r3, [r7, #16]
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	e7fd      	b.n	800b506 <prvDetermineSocketSize+0x136>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800b50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3730      	adds	r7, #48	@ 0x30
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	2000260c 	.word	0x2000260c
 800b518:	20002620 	.word	0x20002620

0800b51c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800b52c:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b536:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800b53a:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800b53e:	f241 101c 	movw	r0, #4380	@ 0x111c
 800b542:	f7ff fa6a 	bl	800aa1a <FreeRTOS_round_up>
 800b546:	4602      	mov	r2, r0
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b554:	08db      	lsrs	r3, r3, #3
 800b556:	4a10      	ldr	r2, [pc, #64]	@ (800b598 <prvInitialiseTCPFields+0x7c>)
 800b558:	fba2 2303 	umull	r2, r3, r2, r3
 800b55c:	099b      	lsrs	r3, r3, #6
 800b55e:	4619      	mov	r1, r3
 800b560:	2001      	movs	r0, #1
 800b562:	f7ff f999 	bl	800a898 <FreeRTOS_max_size_t>
 800b566:	4602      	mov	r2, r0
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b574:	08db      	lsrs	r3, r3, #3
 800b576:	4a08      	ldr	r2, [pc, #32]	@ (800b598 <prvInitialiseTCPFields+0x7c>)
 800b578:	fba2 2303 	umull	r2, r3, r2, r3
 800b57c:	099b      	lsrs	r3, r3, #6
 800b57e:	4619      	mov	r1, r3
 800b580:	2001      	movs	r0, #1
 800b582:	f7ff f989 	bl	800a898 <FreeRTOS_max_size_t>
 800b586:	4602      	mov	r2, r0
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	2ce33e6d 	.word	0x2ce33e6d

0800b59c <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	@ 0x28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b0a      	cmp	r3, #10
 800b5b4:	d002      	beq.n	800b5bc <FreeRTOS_socket+0x20>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d101      	bne.n	800b5c0 <FreeRTOS_socket+0x24>
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e000      	b.n	800b5c2 <FreeRTOS_socket+0x26>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d10d      	bne.n	800b5e2 <FreeRTOS_socket+0x46>
	__asm volatile
 800b5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ca:	b672      	cpsid	i
 800b5cc:	f383 8811 	msr	BASEPRI, r3
 800b5d0:	f3bf 8f6f 	isb	sy
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	b662      	cpsie	i
 800b5da:	617b      	str	r3, [r7, #20]
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	e7fd      	b.n	800b5de <FreeRTOS_socket+0x42>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10c      	bne.n	800b602 <FreeRTOS_socket+0x66>
        {
            switch( xType )
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d005      	beq.n	800b5fa <FreeRTOS_socket+0x5e>
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d105      	bne.n	800b600 <FreeRTOS_socket+0x64>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800b5f4:	2311      	movs	r3, #17
 800b5f6:	623b      	str	r3, [r7, #32]
                    break;
 800b5f8:	e003      	b.n	800b602 <FreeRTOS_socket+0x66>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800b5fa:	2306      	movs	r3, #6
 800b5fc:	623b      	str	r3, [r7, #32]
                    break;
 800b5fe:	e000      	b.n	800b602 <FreeRTOS_socket+0x66>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800b600:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800b602:	f107 0310 	add.w	r3, r7, #16
 800b606:	6a3a      	ldr	r2, [r7, #32]
 800b608:	68b9      	ldr	r1, [r7, #8]
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f7ff fee0 	bl	800b3d0 <prvDetermineSocketSize>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d103      	bne.n	800b61e <FreeRTOS_socket+0x82>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800b616:	f04f 33ff 	mov.w	r3, #4294967295
 800b61a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800b61c:	e05a      	b.n	800b6d4 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	4618      	mov	r0, r3
 800b622:	f00b fb49 	bl	8016cb8 <pvPortMalloc>
 800b626:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <FreeRTOS_socket+0x9a>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800b62e:	f04f 33ff 	mov.w	r3, #4294967295
 800b632:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800b634:	e04e      	b.n	800b6d4 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800b636:	f008 f805 	bl	8013644 <xEventGroupCreate>
 800b63a:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <FreeRTOS_socket+0xb4>
        {
            vPortFreeSocket( pxSocket );
 800b642:	69f8      	ldr	r0, [r7, #28]
 800b644:	f00b fc06 	bl	8016e54 <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800b648:	f04f 33ff 	mov.w	r3, #4294967295
 800b64c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b64e:	e041      	b.n	800b6d4 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	461a      	mov	r2, r3
 800b654:	2100      	movs	r1, #0
 800b656:	69f8      	ldr	r0, [r7, #28]
 800b658:	f00b ffcc 	bl	80175f4 <memset>

            pxSocket->xEventGroup = xEventGroup;
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2b02      	cmp	r3, #2
 800b666:	d105      	bne.n	800b674 <FreeRTOS_socket+0xd8>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	7a13      	ldrb	r3, [r2, #8]
 800b66c:	f023 0301 	bic.w	r3, r3, #1
 800b670:	7213      	strb	r3, [r2, #8]
                        break;
 800b672:	e000      	b.n	800b676 <FreeRTOS_socket+0xda>

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800b674:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	2b11      	cmp	r3, #17
 800b67a:	d108      	bne.n	800b68e <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	3358      	adds	r3, #88	@ 0x58
 800b680:	4618      	mov	r0, r3
 800b682:	f008 f9fa 	bl	8013a7a <vListInitialise>

                #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                {
                    pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	220a      	movs	r2, #10
 800b68a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b68c:	e007      	b.n	800b69e <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800b68e:	6a3b      	ldr	r3, [r7, #32]
 800b690:	2b06      	cmp	r3, #6
 800b692:	d104      	bne.n	800b69e <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	4619      	mov	r1, r3
 800b698:	69f8      	ldr	r0, [r7, #28]
 800b69a:	f7ff ff3f 	bl	800b51c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	330c      	adds	r3, #12
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f008 fa09 	bl	8013aba <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6b4:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6bc:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	2202      	movs	r2, #2
 800b6c2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3728      	adds	r7, #40	@ 0x28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b08c      	sub	sp, #48	@ 0x30
 800b6e2:	af02      	add	r7, sp, #8
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800b6f2:	f7fe ff66 	bl	800a5c2 <xIsCallingFromIPTask>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00d      	beq.n	800b718 <FreeRTOS_bind+0x3a>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b700:	b672      	cpsid	i
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	b662      	cpsie	i
 800b710:	61fb      	str	r3, [r7, #28]
}
 800b712:	bf00      	nop
 800b714:	bf00      	nop
 800b716:	e7fd      	b.n	800b714 <FreeRTOS_bind+0x36>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800b718:	6a38      	ldr	r0, [r7, #32]
 800b71a:	f001 f989 	bl	800ca30 <xSocketValid>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d103      	bne.n	800b72c <FreeRTOS_bind+0x4e>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b724:	f06f 0315 	mvn.w	r3, #21
 800b728:	627b      	str	r3, [r7, #36]	@ 0x24
 800b72a:	e04b      	b.n	800b7c4 <FreeRTOS_bind+0xe6>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <FreeRTOS_bind+0x5e>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b734:	f06f 0315 	mvn.w	r3, #21
 800b738:	627b      	str	r3, [r7, #36]	@ 0x24
 800b73a:	e043      	b.n	800b7c4 <FreeRTOS_bind+0xe6>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800b73c:	230a      	movs	r3, #10
 800b73e:	753b      	strb	r3, [r7, #20]
        xBindEvent.pvData = xSocket;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	61bb      	str	r3, [r7, #24]

        if( pxAddress != NULL )
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d013      	beq.n	800b772 <FreeRTOS_bind+0x94>
        {
            switch( pxAddress->sin_family )
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	785b      	ldrb	r3, [r3, #1]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d109      	bne.n	800b766 <FreeRTOS_bind+0x88>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	689a      	ldr	r2, [r3, #8]
 800b756:	6a3b      	ldr	r3, [r7, #32]
 800b758:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800b75a:	6a3a      	ldr	r2, [r7, #32]
 800b75c:	7a13      	ldrb	r3, [r2, #8]
 800b75e:	f023 0301 	bic.w	r3, r3, #1
 800b762:	7213      	strb	r3, [r2, #8]
                        break;
 800b764:	e000      	b.n	800b768 <FreeRTOS_bind+0x8a>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
                    break;
 800b766:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	885a      	ldrh	r2, [r3, #2]
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	871a      	strh	r2, [r3, #56]	@ 0x38
 800b770:	e009      	b.n	800b786 <FreeRTOS_bind+0xa8>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800b772:	6a3b      	ldr	r3, [r7, #32]
 800b774:	2200      	movs	r2, #0
 800b776:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	3328      	adds	r3, #40	@ 0x28
 800b77c:	2210      	movs	r2, #16
 800b77e:	2100      	movs	r1, #0
 800b780:	4618      	mov	r0, r3
 800b782:	f00b ff37 	bl	80175f4 <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800b786:	f107 0314 	add.w	r3, r7, #20
 800b78a:	f04f 31ff 	mov.w	r1, #4294967295
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe f844 	bl	800981c <xSendEventStructToIPTask>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d103      	bne.n	800b7a2 <FreeRTOS_bind+0xc4>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800b79a:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800b79e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7a0:	e010      	b.n	800b7c4 <FreeRTOS_bind+0xe6>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	6858      	ldr	r0, [r3, #4]
 800b7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	2110      	movs	r1, #16
 800b7b2:	f007 ff61 	bl	8013678 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d102      	bne.n	800b7c4 <FreeRTOS_bind+0xe6>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800b7be:	f06f 0315 	mvn.w	r3, #21
 800b7c2:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    return xReturn;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3728      	adds	r7, #40	@ 0x28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b086      	sub	sp, #24
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	60f8      	str	r0, [r7, #12]
 800b7d6:	60b9      	str	r1, [r7, #8]
 800b7d8:	607a      	str	r2, [r7, #4]
 800b7da:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d004      	beq.n	800b7f0 <prvSocketBindAdd+0x22>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b7ec:	2b06      	cmp	r3, #6
 800b7ee:	d00c      	beq.n	800b80a <prvSocketBindAdd+0x3c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	885b      	ldrh	r3, [r3, #2]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fc92 	bl	800c120 <pxListFindListItemWithValue>
 800b7fc:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <prvSocketBindAdd+0x3c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800b802:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	e02b      	b.n	800b862 <prvSocketBindAdd+0x94>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	885b      	ldrh	r3, [r3, #2]
 800b80e:	461a      	mov	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	885a      	ldrh	r2, [r3, #2]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	871a      	strh	r2, [r3, #56]	@ 0x38
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d007      	beq.n	800b834 <prvSocketBindAdd+0x66>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4 );
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	4618      	mov	r0, r3
 800b82a:	f7ff fc9d 	bl	800b168 <FreeRTOS_FindEndPointOnIP_IPv4>
 800b82e:	4602      	mov	r2, r0
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	651a      	str	r2, [r3, #80]	@ 0x50
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d005      	beq.n	800b848 <prvSocketBindAdd+0x7a>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	629a      	str	r2, [r3, #40]	@ 0x28
 800b846:	e006      	b.n	800b856 <prvSocketBindAdd+0x88>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3328      	adds	r3, #40	@ 0x28
 800b84c:	2210      	movs	r2, #16
 800b84e:	2100      	movs	r1, #0
 800b850:	4618      	mov	r0, r3
 800b852:	f00b fecf 	bl	80175f4 <memset>
                vTaskSuspendAll();
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	330c      	adds	r3, #12
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f008 f939 	bl	8013ad4 <vListInsertEnd>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800b862:	697b      	ldr	r3, [r7, #20]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b090      	sub	sp, #64	@ 0x40
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800b87a:	2300      	movs	r3, #0
 800b87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f001 f8d4 	bl	800ca30 <xSocketValid>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d00d      	beq.n	800b8aa <vSocketBind+0x3e>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b892:	b672      	cpsid	i
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	b662      	cpsie	i
 800b8a2:	633b      	str	r3, [r7, #48]	@ 0x30
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	e7fd      	b.n	800b8a6 <vSocketBind+0x3a>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b8b0:	2b06      	cmp	r3, #6
 800b8b2:	d102      	bne.n	800b8ba <vSocketBind+0x4e>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800b8b4:	4b28      	ldr	r3, [pc, #160]	@ (800b958 <vSocketBind+0xec>)
 800b8b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b8b8:	e001      	b.n	800b8be <vSocketBind+0x52>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800b8ba:	4b28      	ldr	r3, [pc, #160]	@ (800b95c <vSocketBind+0xf0>)
 800b8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800b8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d115      	bne.n	800b8f0 <vSocketBind+0x84>
        {
            pxAddress = &xAddress;
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800b8ca:	2218      	movs	r2, #24
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b8d0:	f00b fe90 	bl	80175f4 <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	7a1b      	ldrb	r3, [r3, #8]
 800b8d8:	f003 0301 	and.w	r3, r3, #1
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <vSocketBind+0x7e>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800b8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e4:	220a      	movs	r2, #10
 800b8e6:	705a      	strb	r2, [r3, #1]
 800b8e8:	e002      	b.n	800b8f0 <vSocketBind+0x84>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ec:	2202      	movs	r2, #2
 800b8ee:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800b8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10d      	bne.n	800b912 <vSocketBind+0xa6>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fa:	b672      	cpsid	i
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	b662      	cpsie	i
 800b90a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <vSocketBind+0xa2>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800b912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b914:	885b      	ldrh	r3, [r3, #2]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d111      	bne.n	800b93e <vSocketBind+0xd2>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fbb7 	bl	800c094 <prvGetPrivatePortNumber>
 800b926:	4603      	mov	r3, r0
 800b928:	461a      	mov	r2, r3
 800b92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b92c:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800b92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b930:	885b      	ldrh	r3, [r3, #2]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d103      	bne.n	800b93e <vSocketBind+0xd2>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800b936:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800b93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800b93c:	e006      	b.n	800b94c <vSocketBind+0xe0>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b942:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7ff ff42 	bl	800b7ce <prvSocketBindAdd>
 800b94a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800b94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
} /* Tested */
 800b94e:	4618      	mov	r0, r3
 800b950:	3740      	adds	r7, #64	@ 0x40
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20002620 	.word	0x20002620
 800b95c:	2000260c 	.word	0x2000260c

0800b960 <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b96e:	2b06      	cmp	r3, #6
 800b970:	d129      	bne.n	800b9c6 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d005      	beq.n	800b988 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b982:	4618      	mov	r0, r3
 800b984:	f005 fe00 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800b98e:	4618      	mov	r0, r3
 800b990:	f004 fc8e 	bl	80102b0 <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d005      	beq.n	800b9aa <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f00b fa55 	bl	8016e54 <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d005      	beq.n	800b9c0 <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f00b fa4a 	bl	8016e54 <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 f82f 	bl	800ba24 <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d004      	beq.n	800b9d8 <vSocketClose+0x78>
        {
            vTaskSuspendAll();
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	330c      	adds	r3, #12
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f008 f8db 	bl	8013b8e <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800b9de:	2b11      	cmp	r3, #17
 800b9e0:	d10f      	bne.n	800ba02 <vSocketClose+0xa2>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b9e2:	e00a      	b.n	800b9fa <vSocketClose+0x9a>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f008 f8cd 	bl	8013b8e <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f005 fdc7 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1f0      	bne.n	800b9e4 <vSocketClose+0x84>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d004      	beq.n	800ba14 <vSocketClose+0xb4>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f007 ffd9 	bl	80139c6 <vEventGroupDelete>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f00b fa1d 	bl	8016e54 <vPortFree>

    return NULL;
 800ba1a:	2300      	movs	r3, #0
} /* Tested */
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800ba2c:	4b30      	ldr	r3, [pc, #192]	@ (800baf0 <prvTCPSetSocketCount+0xcc>)
 800ba2e:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ba34:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d12b      	bne.n	800ba98 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ba40:	4b2c      	ldr	r3, [pc, #176]	@ (800baf4 <prvTCPSetSocketCount+0xd0>)
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800ba46:	e022      	b.n	800ba8e <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d017      	beq.n	800ba8e <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800ba62:	89fa      	ldrh	r2, [r7, #14]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d112      	bne.n	800ba8e <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800ba6e:	f003 0304 	and.w	r3, r3, #4
 800ba72:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d107      	bne.n	800ba88 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800ba88:	68b8      	ldr	r0, [r7, #8]
 800ba8a:	f7ff ff69 	bl	800b960 <vSocketClose>
            while( pxIterator != pxEnd )
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d1d8      	bne.n	800ba48 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800ba96:	e026      	b.n	800bae6 <prvTCPSetSocketCount+0xc2>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ba98:	4b16      	ldr	r3, [pc, #88]	@ (800baf4 <prvTCPSetSocketCount+0xd0>)
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	617b      	str	r3, [r7, #20]
 800ba9e:	e01e      	b.n	800bade <prvTCPSetSocketCount+0xba>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800baac:	2b01      	cmp	r3, #1
 800baae:	d113      	bne.n	800bad8 <prvTCPSetSocketCount+0xb4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800bab4:	89fa      	ldrh	r2, [r7, #14]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d10e      	bne.n	800bad8 <prvTCPSetSocketCount+0xb4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d009      	beq.n	800bad8 <prvTCPSetSocketCount+0xb4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800baca:	3b01      	subs	r3, #1
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
                    break;
 800bad4:	bf00      	nop
    }
 800bad6:	e006      	b.n	800bae6 <prvTCPSetSocketCount+0xc2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800bade:	697a      	ldr	r2, [r7, #20]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d1dc      	bne.n	800baa0 <prvTCPSetSocketCount+0x7c>
    }
 800bae6:	bf00      	nop
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20002628 	.word	0x20002628
 800baf4:	20002620 	.word	0x20002620

0800baf8 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( ( FreeRTOS_issocketconnected( pxSocket ) == pdTRUE ) )
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 ff4b 	bl	800c9a0 <FreeRTOS_issocketconnected>
             * us data. If data was already sent, then pxSocket->u.xTCP.rxStream != NULL and this call will fail.
             * Warn the user about this inconsistent behavior. */
            FreeRTOS_printf( ( "Warning: Changing buffer/window properties on a connected socket may fail." ) );
        }

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bb10:	2b06      	cmp	r3, #6
 800bb12:	d003      	beq.n	800bb1c <prvSockopt_so_buffer+0x24>
        {
            FreeRTOS_printf( ( "Set SO_%sBUF: wrong socket type\n",
                               ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bb14:	f06f 0315 	mvn.w	r3, #21
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	e02c      	b.n	800bb76 <prvSockopt_so_buffer+0x7e>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b04      	cmp	r3, #4
 800bb20:	d104      	bne.n	800bb2c <prvSockopt_so_buffer+0x34>
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d107      	bne.n	800bb3c <prvSockopt_so_buffer+0x44>
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b05      	cmp	r3, #5
 800bb30:	d108      	bne.n	800bb44 <prvSockopt_so_buffer+0x4c>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d003      	beq.n	800bb44 <prvSockopt_so_buffer+0x4c>
        {
            FreeRTOS_printf( ( "Set SO_%sBUF: buffer already created\n",
                               ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bb3c:	f06f 0315 	mvn.w	r3, #21
 800bb40:	617b      	str	r3, [r7, #20]
 800bb42:	e018      	b.n	800bb76 <prvSockopt_so_buffer+0x7e>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b04      	cmp	r3, #4
 800bb4e:	d10c      	bne.n	800bb6a <prvSockopt_so_buffer+0x72>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800bb56:	4619      	mov	r1, r3
 800bb58:	6938      	ldr	r0, [r7, #16]
 800bb5a:	f7fe ff5e 	bl	800aa1a <FreeRTOS_round_up>
 800bb5e:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800bb68:	e003      	b.n	800bb72 <prvSockopt_so_buffer+0x7a>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            }

            xReturn = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800bb76:	697b      	ldr	r3, [r7, #20]
    }
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800bb80:	b480      	push	{r7}
 800bb82:	b087      	sub	sp, #28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	2b09      	cmp	r3, #9
 800bb94:	d002      	beq.n	800bb9c <prvSetOptionCallback+0x1c>
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	2b0a      	cmp	r3, #10
 800bb9a:	d102      	bne.n	800bba2 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800bb9c:	2311      	movs	r3, #17
 800bb9e:	613b      	str	r3, [r7, #16]
 800bba0:	e001      	b.n	800bba6 <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800bba2:	2306      	movs	r3, #6
 800bba4:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d002      	beq.n	800bbba <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bbb4:	f06f 0315 	mvn.w	r3, #21
 800bbb8:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d131      	bne.n	800bc24 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	3b06      	subs	r3, #6
 800bbc4:	2b04      	cmp	r3, #4
 800bbc6:	d829      	bhi.n	800bc1c <prvSetOptionCallback+0x9c>
 800bbc8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd0 <prvSetOptionCallback+0x50>)
 800bbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbce:	bf00      	nop
 800bbd0:	0800bbe5 	.word	0x0800bbe5
 800bbd4:	0800bbf1 	.word	0x0800bbf1
 800bbd8:	0800bbfd 	.word	0x0800bbfd
 800bbdc:	0800bc09 	.word	0x0800bc09
 800bbe0:	0800bc13 	.word	0x0800bc13
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                        break;
 800bbee:	e019      	b.n	800bc24 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800bbfa:	e013      	b.n	800bc24 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	689a      	ldr	r2, [r3, #8]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800bc06:	e00d      	b.n	800bc24 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68da      	ldr	r2, [r3, #12]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	671a      	str	r2, [r3, #112]	@ 0x70
                    break;
 800bc10:	e008      	b.n	800bc24 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691a      	ldr	r2, [r3, #16]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 800bc1a:	e003      	b.n	800bc24 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800bc1c:	f06f 0315 	mvn.w	r3, #21
 800bc20:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800bc22:	bf00      	nop
            }
        }

        return xReturn;
 800bc24:	697b      	ldr	r3, [r7, #20]
    }
 800bc26:	4618      	mov	r0, r3
 800bc28:	371c      	adds	r7, #28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop

0800bc34 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bc3e:	f06f 0315 	mvn.w	r3, #21
 800bc42:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3358      	adds	r3, #88	@ 0x58
 800bc48:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bc50:	2b06      	cmp	r3, #6
 800bc52:	d13f      	bne.n	800bcd4 <prvSetOptionTCPWindows+0xa0>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	2104      	movs	r1, #4
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7ff ff4a 	bl	800baf8 <prvSockopt_so_buffer>
 800bc64:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d135      	bne.n	800bcd8 <prvSetOptionTCPWindows+0xa4>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3308      	adds	r3, #8
 800bc70:	461a      	mov	r2, r3
 800bc72:	2105      	movs	r1, #5
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f7ff ff3f 	bl	800baf8 <prvSockopt_so_buffer>
 800bc7a:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d12c      	bne.n	800bcdc <prvSetOptionTCPWindows+0xa8>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	461a      	mov	r2, r3
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	461a      	mov	r2, r3
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d019      	beq.n	800bcde <prvSetOptionTCPWindows+0xaa>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	8bd2      	ldrh	r2, [r2, #30]
 800bcb4:	fb03 f202 	mul.w	r2, r3, r2
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	8bd2      	ldrh	r2, [r2, #30]
 800bcc8:	fb03 f202 	mul.w	r2, r3, r2
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800bcd2:	e004      	b.n	800bcde <prvSetOptionTCPWindows+0xaa>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800bcd4:	bf00      	nop
 800bcd6:	e002      	b.n	800bcde <prvSetOptionTCPWindows+0xaa>
                break; /* will return an error. */
 800bcd8:	bf00      	nop
 800bcda:	e000      	b.n	800bcde <prvSetOptionTCPWindows+0xaa>
                break; /* will return an error. */
 800bcdc:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800bcde:	697b      	ldr	r3, [r7, #20]
    }
 800bce0:	4618      	mov	r0, r3
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bcf2:	f06f 0315 	mvn.w	r3, #21
 800bcf6:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bd02:	2b06      	cmp	r3, #6
 800bd04:	d118      	bne.n	800bd38 <prvSetOptionLowHighWater+0x50>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d212      	bcs.n	800bd38 <prvSetOptionLowHighWater+0x50>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	685a      	ldr	r2, [r3, #4]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d80b      	bhi.n	800bd38 <prvSetOptionLowHighWater+0x50>
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            xReturn = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800bd38:	68fb      	ldr	r3, [r7, #12]
    }
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b084      	sub	sp, #16
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bd50:	f06f 0315 	mvn.w	r3, #21
 800bd54:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bd5c:	2b06      	cmp	r3, #6
 800bd5e:	d126      	bne.n	800bdae <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d007      	beq.n	800bd78 <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	f892 3124 	ldrb.w	r3, [r2, #292]	@ 0x124
 800bd6e:	f043 0302 	orr.w	r3, r3, #2
 800bd72:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124
 800bd76:	e006      	b.n	800bd86 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	f892 3124 	ldrb.w	r3, [r2, #292]	@ 0x124
 800bd7e:	f023 0302 	bic.w	r3, r3, #2
 800bd82:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bd8c:	2b04      	cmp	r3, #4
 800bd8e:	d90c      	bls.n	800bdaa <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fde1 	bl	800c958 <FreeRTOS_tx_size>
 800bd96:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d006      	beq.n	800bdaa <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800bda4:	2007      	movs	r0, #7
 800bda6:	f7fd fd23 	bl	80097f0 <xSendEventToIPTask>
            }

            xReturn = 0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800bdae:	68fb      	ldr	r3, [r7, #12]
    }
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bdc2:	f06f 0315 	mvn.w	r3, #21
 800bdc6:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bdce:	2b06      	cmp	r3, #6
 800bdd0:	d122      	bne.n	800be18 <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d007      	beq.n	800bdea <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800bde0:	f043 0304 	orr.w	r3, r3, #4
 800bde4:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
 800bde8:	e006      	b.n	800bdf8 <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800bdf0:	f023 0304 	bic.w	r3, r3, #4
 800bdf4:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800bdfe:	f043 0301 	orr.w	r3, r3, #1
 800be02:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800be0e:	2007      	movs	r0, #7
 800be10:	f7fd fcee 	bl	80097f0 <xSendEventToIPTask>
            xReturn = 0;
 800be14:	2300      	movs	r3, #0
 800be16:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800be18:	68fb      	ldr	r3, [r7, #12]
    }
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800be22:	b480      	push	{r7}
 800be24:	b087      	sub	sp, #28
 800be26:	af00      	add	r7, sp, #0
 800be28:	60f8      	str	r0, [r7, #12]
 800be2a:	60b9      	str	r1, [r7, #8]
 800be2c:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d10f      	bne.n	800be5a <prvSetOptionTimeout+0x38>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800be40:	2b11      	cmp	r3, #17
 800be42:	d106      	bne.n	800be52 <prvSetOptionTimeout+0x30>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be4a:	d902      	bls.n	800be52 <prvSetOptionTimeout+0x30>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800be4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800be50:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800be58:	e002      	b.n	800be60 <prvSetOptionTimeout+0x3e>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	621a      	str	r2, [r3, #32]
}
 800be60:	bf00      	nop
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800be76:	f06f 0315 	mvn.w	r3, #21
 800be7a:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800be82:	2b06      	cmp	r3, #6
 800be84:	d114      	bne.n	800beb0 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d007      	beq.n	800be9e <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800be94:	f043 0308 	orr.w	r3, r3, #8
 800be98:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800be9c:	e006      	b.n	800beac <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800bea4:	f023 0308 	bic.w	r3, r3, #8
 800bea8:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            xReturn = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800beb0:	68fb      	ldr	r3, [r7, #12]
    }
 800beb2:	4618      	mov	r0, r3
 800beb4:	3714      	adds	r7, #20
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800bebe:	b480      	push	{r7}
 800bec0:	b085      	sub	sp, #20
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bec8:	f06f 0315 	mvn.w	r3, #21
 800becc:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bed4:	2b06      	cmp	r3, #6
 800bed6:	d114      	bne.n	800bf02 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d007      	beq.n	800bef0 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800bee6:	f043 0310 	orr.w	r3, r3, #16
 800beea:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800beee:	e006      	b.n	800befe <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800bef6:	f023 0310 	bic.w	r3, r3, #16
 800befa:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            xReturn = 0;
 800befe:	2300      	movs	r3, #0
 800bf00:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800bf02:	68fb      	ldr	r3, [r7, #12]
    }
 800bf04:	4618      	mov	r0, r3
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800bf1e:	f06f 0315 	mvn.w	r3, #21
 800bf22:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800bf28:	6938      	ldr	r0, [r7, #16]
 800bf2a:	f000 fd81 	bl	800ca30 <xSocketValid>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	f040 80a5 	bne.w	800c080 <FreeRTOS_setsockopt+0x170>
    {
        switch( lOptionName )
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b12      	cmp	r3, #18
 800bf3a:	f200 809d 	bhi.w	800c078 <FreeRTOS_setsockopt+0x168>
 800bf3e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf44 <FreeRTOS_setsockopt+0x34>)
 800bf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf44:	0800bf91 	.word	0x0800bf91
 800bf48:	0800bfa1 	.word	0x0800bfa1
 800bf4c:	0800bfc9 	.word	0x0800bfc9
 800bf50:	0800c009 	.word	0x0800c009
 800bf54:	0800c02f 	.word	0x0800c02f
 800bf58:	0800c02f 	.word	0x0800c02f
 800bf5c:	0800bffb 	.word	0x0800bffb
 800bf60:	0800bffb 	.word	0x0800bffb
 800bf64:	0800bffb 	.word	0x0800bffb
 800bf68:	0800bffb 	.word	0x0800bffb
 800bf6c:	0800bffb 	.word	0x0800bffb
 800bf70:	0800c049 	.word	0x0800c049
 800bf74:	0800c055 	.word	0x0800c055
 800bf78:	0800c03d 	.word	0x0800c03d
 800bf7c:	0800c061 	.word	0x0800c061
 800bf80:	0800c06d 	.word	0x0800c06d
 800bf84:	0800bfb1 	.word	0x0800bfb1
 800bf88:	0800c017 	.word	0x0800c017
 800bf8c:	0800c023 	.word	0x0800c023
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800bf90:	2200      	movs	r2, #0
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6938      	ldr	r0, [r7, #16]
 800bf96:	f7ff ff44 	bl	800be22 <prvSetOptionTimeout>
                xReturn = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	617b      	str	r3, [r7, #20]
                break;
 800bf9e:	e074      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6938      	ldr	r0, [r7, #16]
 800bfa6:	f7ff ff3c 	bl	800be22 <prvSetOptionTimeout>
                xReturn = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	617b      	str	r3, [r7, #20]
                break;
 800bfae:	e06c      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>

                #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                    case FREERTOS_SO_UDP_MAX_RX_PACKETS:

                        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800bfb6:	2b11      	cmp	r3, #17
 800bfb8:	d166      	bne.n	800c088 <FreeRTOS_setsockopt+0x178>
                        {
                            break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                        }

                        pxSocket->u.xUDP.uxMaxPackets = *( ( const UBaseType_t * ) pvOptionValue );
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	66da      	str	r2, [r3, #108]	@ 0x6c
                        xReturn = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	617b      	str	r3, [r7, #20]
                        break;
 800bfc6:	e060      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d109      	bne.n	800bfe2 <FreeRTOS_setsockopt+0xd2>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bfd4:	f023 0302 	bic.w	r3, r3, #2
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800bfe0:	e008      	b.n	800bff4 <FreeRTOS_setsockopt+0xe4>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bfe8:	f043 0302 	orr.w	r3, r3, #2
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	617b      	str	r3, [r7, #20]
                break;
 800bff8:	e047      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	6879      	ldr	r1, [r7, #4]
 800bffe:	6938      	ldr	r0, [r7, #16]
 800c000:	f7ff fdbe 	bl	800bb80 <prvSetOptionCallback>
 800c004:	6178      	str	r0, [r7, #20]
                        break;
 800c006:	e040      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	617b      	str	r3, [r7, #20]
                        break;
 800c014:	e039      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>
                        /* MISRA Ref 11.1.1 [ Conversion between pointer to
                         * a function and another type ] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-111 */
                        /* coverity[misra_c_2012_rule_11_8_violation] */
                        /* coverity[misra_c_2012_rule_11_1_violation] */
                        pxSocket->pxUserWakeCallback = ( SocketWakeupCallback_t ) pvOptionValue;
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	641a      	str	r2, [r3, #64]	@ 0x40
                        ipconfigISO_STRICTNESS_VIOLATION_END;
                        xReturn = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	617b      	str	r3, [r7, #20]
                        break;
 800c020:	e033      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6938      	ldr	r0, [r7, #16]
 800c026:	f7ff fe5f 	bl	800bce8 <prvSetOptionLowHighWater>
 800c02a:	6178      	str	r0, [r7, #20]
                        break;
 800c02c:	e02d      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800c02e:	683a      	ldr	r2, [r7, #0]
 800c030:	6879      	ldr	r1, [r7, #4]
 800c032:	6938      	ldr	r0, [r7, #16]
 800c034:	f7ff fd60 	bl	800baf8 <prvSockopt_so_buffer>
 800c038:	6178      	str	r0, [r7, #20]
                        break;
 800c03a:	e026      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6938      	ldr	r0, [r7, #16]
 800c040:	f7ff fdf8 	bl	800bc34 <prvSetOptionTCPWindows>
 800c044:	6178      	str	r0, [r7, #20]
                        break;
 800c046:	e020      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6938      	ldr	r0, [r7, #16]
 800c04c:	f7ff ff0e 	bl	800be6c <prvSetOptionReuseListenSocket>
 800c050:	6178      	str	r0, [r7, #20]
                        break;
 800c052:	e01a      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6938      	ldr	r0, [r7, #16]
 800c058:	f7ff ff31 	bl	800bebe <prvSetOptionCloseAfterSend>
 800c05c:	6178      	str	r0, [r7, #20]
                        break;
 800c05e:	e014      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6938      	ldr	r0, [r7, #16]
 800c064:	f7ff fe6f 	bl	800bd46 <prvSetOptionSetFullSize>
 800c068:	6178      	str	r0, [r7, #20]
                        break;
 800c06a:	e00e      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	6938      	ldr	r0, [r7, #16]
 800c070:	f7ff fea2 	bl	800bdb8 <prvSetOptionStopRX>
 800c074:	6178      	str	r0, [r7, #20]
                        break;
 800c076:	e008      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800c078:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800c07c:	617b      	str	r3, [r7, #20]
                break;
 800c07e:	e004      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c080:	f06f 0315 	mvn.w	r3, #21
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	e000      	b.n	800c08a <FreeRTOS_setsockopt+0x17a>
                            break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800c088:	bf00      	nop
    }

    return xReturn;
 800c08a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800c08c:	4618      	mov	r0, r3
 800c08e:	3718      	adds	r7, #24
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800c09c:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800c0a0:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800c0a2:	89fb      	ldrh	r3, [r7, #14]
 800c0a4:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b06      	cmp	r3, #6
 800c0b2:	d102      	bne.n	800c0ba <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800c0b4:	4b18      	ldr	r3, [pc, #96]	@ (800c118 <prvGetPrivatePortNumber+0x84>)
 800c0b6:	613b      	str	r3, [r7, #16]
 800c0b8:	e001      	b.n	800c0be <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800c0ba:	4b18      	ldr	r3, [pc, #96]	@ (800c11c <prvGetPrivatePortNumber+0x88>)
 800c0bc:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800c0be:	f107 0308 	add.w	r3, r7, #8
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7ff f92c 	bl	800b320 <xApplicationGetRandomNumber>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d01c      	beq.n	800c108 <prvGetPrivatePortNumber+0x74>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800c0d2:	89fa      	ldrh	r2, [r7, #14]
 800c0d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0d8:	fb01 f202 	mul.w	r2, r1, r2
 800c0dc:	1a9b      	subs	r3, r3, r2
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c0e4:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
 800c0e6:	8abb      	ldrh	r3, [r7, #20]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f000 f818 	bl	800c120 <pxListFindListItemWithValue>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00a      	beq.n	800c10c <prvGetPrivatePortNumber+0x78>
            usResult = FreeRTOS_htons( usResult );
            break;
        }
        else
        {
            usResult = 0;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800c0fa:	8afb      	ldrh	r3, [r7, #22]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800c100:	8afb      	ldrh	r3, [r7, #22]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1db      	bne.n	800c0be <prvGetPrivatePortNumber+0x2a>
 800c106:	e002      	b.n	800c10e <prvGetPrivatePortNumber+0x7a>
            break;
 800c108:	bf00      	nop
 800c10a:	e000      	b.n	800c10e <prvGetPrivatePortNumber+0x7a>
            break;
 800c10c:	bf00      	nop

    return usResult;
 800c10e:	8abb      	ldrh	r3, [r7, #20]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20002620 	.word	0x20002620
 800c11c:	2000260c 	.word	0x2000260c

0800c120 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800c12a:	2300      	movs	r3, #0
 800c12c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800c12e:	f7fd fecb 	bl	8009ec8 <xIPIsNetworkTaskReady>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d018      	beq.n	800c16a <pxListFindListItemWithValue+0x4a>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d015      	beq.n	800c16a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	3308      	adds	r3, #8
 800c142:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_HEAD_ENTRY( pxList );
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	613b      	str	r3, [r7, #16]
 800c14a:	e00a      	b.n	800c162 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	429a      	cmp	r2, r3
 800c154:	d102      	bne.n	800c15c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	617b      	str	r3, [r7, #20]
                break;
 800c15a:	e006      	b.n	800c16a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800c162:	693a      	ldr	r2, [r7, #16]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	429a      	cmp	r2, r3
 800c168:	d1f0      	bne.n	800c14c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800c16a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800c17c:	2300      	movs	r3, #0
 800c17e:	617b      	str	r3, [r7, #20]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800c180:	6879      	ldr	r1, [r7, #4]
 800c182:	4810      	ldr	r0, [pc, #64]	@ (800c1c4 <pxUDPSocketLookup+0x50>)
 800c184:	f7ff ffcc 	bl	800c120 <pxListFindListItemWithValue>
 800c188:	6138      	str	r0, [r7, #16]

    if( pxListItem != NULL )
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d013      	beq.n	800c1b8 <pxUDPSocketLookup+0x44>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	617b      	str	r3, [r7, #20]
        configASSERT( pxSocket != NULL );
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10d      	bne.n	800c1b8 <pxUDPSocketLookup+0x44>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a0:	b672      	cpsid	i
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	b662      	cpsie	i
 800c1b0:	60fb      	str	r3, [r7, #12]
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <pxUDPSocketLookup+0x40>
    }

    return pxSocket;
 800c1b8:	697b      	ldr	r3, [r7, #20]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	2000260c 	.word	0x2000260c

0800c1c8 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b08b      	sub	sp, #44	@ 0x2c
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800c1d6:	1d3b      	adds	r3, r7, #4
 800c1d8:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800c1de:	2300      	movs	r3, #0
 800c1e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1e2:	e062      	b.n	800c2aa <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e8:	4413      	add	r3, r2
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800c1f2:	7ffa      	ldrb	r2, [r7, #31]
 800c1f4:	4b32      	ldr	r3, [pc, #200]	@ (800c2c0 <FreeRTOS_inet_ntoa+0xf8>)
 800c1f6:	fba3 1302 	umull	r1, r3, r3, r2
 800c1fa:	08d9      	lsrs	r1, r3, #3
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	440b      	add	r3, r1
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	b2d9      	uxtb	r1, r3
 800c208:	f107 020c 	add.w	r2, r7, #12
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	4413      	add	r3, r2
 800c210:	460a      	mov	r2, r1
 800c212:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800c214:	7ffb      	ldrb	r3, [r7, #31]
 800c216:	4a2a      	ldr	r2, [pc, #168]	@ (800c2c0 <FreeRTOS_inet_ntoa+0xf8>)
 800c218:	fba2 2303 	umull	r2, r3, r2, r3
 800c21c:	08db      	lsrs	r3, r3, #3
 800c21e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	2b01      	cmp	r3, #1
 800c224:	d003      	beq.n	800c22e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	3b01      	subs	r3, #1
 800c22a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800c22c:	e7e1      	b.n	800c1f2 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800c22e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800c230:	7ffb      	ldrb	r3, [r7, #31]
 800c232:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800c234:	2300      	movs	r3, #0
 800c236:	61bb      	str	r3, [r7, #24]
 800c238:	e009      	b.n	800c24e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800c23a:	f107 020c 	add.w	r2, r7, #12
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	4413      	add	r3, r2
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d106      	bne.n	800c256 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	3301      	adds	r3, #1
 800c24c:	61bb      	str	r3, [r7, #24]
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d9f2      	bls.n	800c23a <FreeRTOS_inet_ntoa+0x72>
 800c254:	e012      	b.n	800c27c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800c256:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800c258:	e010      	b.n	800c27c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800c25a:	f107 020c 	add.w	r2, r7, #12
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	4413      	add	r3, r2
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	440b      	add	r3, r1
 800c26a:	3230      	adds	r2, #48	@ 0x30
 800c26c:	b2d2      	uxtb	r2, r2
 800c26e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	3301      	adds	r3, #1
 800c274:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	3301      	adds	r3, #1
 800c27a:	61bb      	str	r3, [r7, #24]
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d9eb      	bls.n	800c25a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800c282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c284:	2b02      	cmp	r3, #2
 800c286:	d805      	bhi.n	800c294 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	6a3b      	ldr	r3, [r7, #32]
 800c28c:	4413      	add	r3, r2
 800c28e:	222e      	movs	r2, #46	@ 0x2e
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	e004      	b.n	800c29e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800c294:	683a      	ldr	r2, [r7, #0]
 800c296:	6a3b      	ldr	r3, [r7, #32]
 800c298:	4413      	add	r3, r2
 800c29a:	2200      	movs	r2, #0
 800c29c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800c29e:	6a3b      	ldr	r3, [r7, #32]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	2b03      	cmp	r3, #3
 800c2ae:	d999      	bls.n	800c1e4 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800c2b0:	693b      	ldr	r3, [r7, #16]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	372c      	adds	r7, #44	@ 0x2c
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	cccccccd 	.word	0xcccccccd

0800c2c4 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
 800c2d0:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d106      	bne.n	800c2e6 <FreeRTOS_inet_ntop+0x22>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	6879      	ldr	r1, [r7, #4]
 800c2dc:	68b8      	ldr	r0, [r7, #8]
 800c2de:	f7fe fe2b 	bl	800af38 <FreeRTOS_inet_ntop4>
 800c2e2:	6178      	str	r0, [r7, #20]
                break;
 800c2e4:	e002      	b.n	800c2ec <FreeRTOS_inet_ntop+0x28>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	617b      	str	r3, [r7, #20]
            break;
 800c2ea:	bf00      	nop
    }

    return pcResult;
 800c2ec:	697b      	ldr	r3, [r7, #20]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3718      	adds	r7, #24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b085      	sub	sp, #20
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	7a1b      	ldrb	r3, [r3, #8]
 800c308:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10e      	bne.n	800c330 <FreeRTOS_GetLocalAddress+0x3a>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case pdFALSE_UNSIGNED:
                pxAddress->sin_family = FREERTOS_AF_INET;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	2202      	movs	r2, #2
 800c316:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2218      	movs	r2, #24
 800c31c:	701a      	strb	r2, [r3, #0]
                /* IP address of local machine. */
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	609a      	str	r2, [r3, #8]

                /* Local port on this machine. */
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	805a      	strh	r2, [r3, #2]
                break;
 800c32e:	e000      	b.n	800c332 <FreeRTOS_GetLocalAddress+0x3c>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800c330:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800c332:	2318      	movs	r3, #24
}
 800c334:	4618      	mov	r0, r3
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d006      	beq.n	800c35e <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c354:	2300      	movs	r3, #0
 800c356:	2200      	movs	r2, #0
 800c358:	2100      	movs	r1, #0
 800c35a:	f007 fdcb 	bl	8013ef4 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

    #if ( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
    {
        if( pxSocket->pxUserWakeCallback != NULL )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c362:	2b00      	cmp	r3, #0
 800c364:	d003      	beq.n	800c36e <vSocketWakeUpUser+0x2e>
        {
            pxSocket->pxUserWakeCallback( pxSocket );
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	4798      	blx	r3
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c372:	2b00      	cmp	r3, #0
 800c374:	d015      	beq.n	800c3a2 <vSocketWakeUpUser+0x62>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	0a1b      	lsrs	r3, r3, #8
 800c37c:	f003 030f 	and.w	r3, r3, #15
 800c380:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00c      	beq.n	800c3a2 <vSocketWakeUpUser+0x62>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	431a      	orrs	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	64da      	str	r2, [r3, #76]	@ 0x4c
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68f9      	ldr	r1, [r7, #12]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f007 fa82 	bl	80138a6 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00b      	beq.n	800c3ce <vSocketWakeUpUser+0x8e>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d007      	beq.n	800c3ce <vSocketWakeUpUser+0x8e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	f007 fa6c 	bl	80138a6 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	601a      	str	r2, [r3, #0]
}
 800c3d4:	bf00      	nop
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	2106      	movs	r1, #6
 800c3f2:	68b8      	ldr	r0, [r7, #8]
 800c3f4:	f7fe ffb4 	bl	800b360 <prvValidSocket>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d103      	bne.n	800c406 <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800c3fe:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800c402:	60fb      	str	r3, [r7, #12]
 800c404:	e056      	b.n	800c4b4 <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d008      	beq.n	800c422 <FreeRTOS_listen+0x46>
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c416:	2b08      	cmp	r3, #8
 800c418:	d003      	beq.n	800c422 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800c41a:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	e048      	b.n	800c4b4 <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800c428:	f7fe fa46 	bl	800a8b8 <FreeRTOS_min_int32>
 800c42c:	4603      	mov	r3, r0
 800c42e:	b29a      	uxth	r2, r3
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800c43c:	f003 0308 	and.w	r3, r3, #8
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d032      	beq.n	800c4ac <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d005      	beq.n	800c45c <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c456:	4618      	mov	r0, r3
 800c458:	f000 fd65 	bl	800cf26 <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 fd5a 	bl	800cf26 <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	33ae      	adds	r3, #174	@ 0xae
 800c476:	225a      	movs	r2, #90	@ 0x5a
 800c478:	2100      	movs	r1, #0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f00b f8ba 	bl	80175f4 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800c486:	22c0      	movs	r2, #192	@ 0xc0
 800c488:	2100      	movs	r1, #0
 800c48a:	4618      	mov	r0, r3
 800c48c:	f00b f8b2 	bl	80175f4 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	336c      	adds	r3, #108	@ 0x6c
 800c494:	2204      	movs	r2, #4
 800c496:	2100      	movs	r1, #0
 800c498:	4618      	mov	r0, r3
 800c49a:	f00b f8ab 	bl	80175f4 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800c4a4:	f043 0308 	orr.w	r3, r3, #8
 800c4a8:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800c4ac:	2101      	movs	r1, #1
 800c4ae:	68b8      	ldr	r0, [r7, #8]
 800c4b0:	f000 ffae 	bl	800d410 <vTCPStateChange>
        }

        return xResult;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
    }
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3710      	adds	r7, #16
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08a      	sub	sp, #40	@ 0x28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800c4c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c4cc:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800c4ce:	f008 fdfd 	bl	80150cc <xTaskGetTickCount>
 800c4d2:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800c4d4:	4b32      	ldr	r3, [pc, #200]	@ (800c5a0 <xTCPTimerCheck+0xe0>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	69ba      	ldr	r2, [r7, #24]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800c4de:	4b31      	ldr	r3, [pc, #196]	@ (800c5a4 <xTCPTimerCheck+0xe4>)
 800c4e0:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800c4e2:	4b31      	ldr	r3, [pc, #196]	@ (800c5a8 <xTCPTimerCheck+0xe8>)
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800c4e8:	4a2d      	ldr	r2, [pc, #180]	@ (800c5a0 <xTCPTimerCheck+0xe0>)
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d14b      	bne.n	800c58c <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800c4f8:	e048      	b.n	800c58c <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d03a      	beq.n	800c586 <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c516:	461a      	mov	r2, r3
 800c518:	6a3b      	ldr	r3, [r7, #32]
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d20a      	bcs.n	800c534 <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	b29b      	uxth	r3, r3
 800c528:	1ad3      	subs	r3, r2, r3
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 800c532:	e00a      	b.n	800c54a <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	2200      	movs	r2, #0
 800c538:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                xRc = xTCPSocketCheck( pxSocket );
 800c53c:	6938      	ldr	r0, [r7, #16]
 800c53e:	f000 fe9d 	bl	800d27c <xTCPSocketCheck>
 800c542:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	db1f      	blt.n	800c58a <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d008      	beq.n	800c564 <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800c558:	6938      	ldr	r0, [r7, #16]
 800c55a:	f7ff fef1 	bl	800c340 <vSocketWakeUpUser>
 800c55e:	e001      	b.n	800c564 <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800c560:	2300      	movs	r3, #0
 800c562:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00e      	beq.n	800c58c <xTCPTimerCheck+0xcc>
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c574:	461a      	mov	r2, r3
 800c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c578:	4293      	cmp	r3, r2
 800c57a:	d907      	bls.n	800c58c <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800c582:	627b      	str	r3, [r7, #36]	@ 0x24
 800c584:	e002      	b.n	800c58c <xTCPTimerCheck+0xcc>
                continue;
 800c586:	bf00      	nop
 800c588:	e000      	b.n	800c58c <xTCPTimerCheck+0xcc>
                    continue;
 800c58a:	bf00      	nop
        while( pxIterator != pxEnd )
 800c58c:	69fa      	ldr	r2, [r7, #28]
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	429a      	cmp	r2, r3
 800c592:	d1b2      	bne.n	800c4fa <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800c594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800c596:	4618      	mov	r0, r3
 800c598:	3728      	adds	r7, #40	@ 0x28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	20002634 	.word	0x20002634
 800c5a4:	20002628 	.word	0x20002628
 800c5a8:	20002620 	.word	0x20002620

0800c5ac <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	b480      	push	{r7}
 800c5b0:	b089      	sub	sp, #36	@ 0x24
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
 800c5b8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c5bc:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	61bb      	str	r3, [r7, #24]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800c5c8:	4b20      	ldr	r3, [pc, #128]	@ (800c64c <pxTCPSocketLookup+0xa0>)
 800c5ca:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800c5cc:	4b20      	ldr	r3, [pc, #128]	@ (800c650 <pxTCPSocketLookup+0xa4>)
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	61fb      	str	r3, [r7, #28]
 800c5d2:	e027      	b.n	800c624 <pxTCPSocketLookup+0x78>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d11b      	bne.n	800c61e <pxTCPSocketLookup+0x72>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d102      	bne.n	800c5f6 <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	617b      	str	r3, [r7, #20]
 800c5f4:	e013      	b.n	800c61e <pxTCPSocketLookup+0x72>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800c5fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	429a      	cmp	r2, r3
 800c602:	d10c      	bne.n	800c61e <pxTCPSocketLookup+0x72>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800c604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c606:	2b00      	cmp	r3, #0
 800c608:	d106      	bne.n	800c618 <pxTCPSocketLookup+0x6c>
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c610:	429a      	cmp	r2, r3
 800c612:	d101      	bne.n	800c618 <pxTCPSocketLookup+0x6c>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d107      	bne.n	800c62e <pxTCPSocketLookup+0x82>
             pxIterator = listGET_NEXT( pxIterator ) )
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800c624:	69fa      	ldr	r2, [r7, #28]
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d1d3      	bne.n	800c5d4 <pxTCPSocketLookup+0x28>
 800c62c:	e000      	b.n	800c630 <pxTCPSocketLookup+0x84>
                    {
                        break;
 800c62e:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d101      	bne.n	800c63a <pxTCPSocketLookup+0x8e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800c63a:	69bb      	ldr	r3, [r7, #24]
    }
 800c63c:	4618      	mov	r0, r3
 800c63e:	3724      	adds	r7, #36	@ 0x24
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	b002      	add	sp, #8
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	20002628 	.word	0x20002628
 800c650:	20002620 	.word	0x20002620

0800c654 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d048      	beq.n	800c6f6 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800c664:	2314      	movs	r3, #20
 800c666:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800c668:	2350      	movs	r3, #80	@ 0x50
 800c66a:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
 800c678:	fbb3 f3f2 	udiv	r3, r3, r2
 800c67c:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00f      	beq.n	800c6a4 <prvTCPCreateStream+0x50>
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	2b04      	cmp	r3, #4
 800c688:	d80c      	bhi.n	800c6a4 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	3b01      	subs	r3, #1
 800c68e:	4a37      	ldr	r2, [pc, #220]	@ (800c76c <prvTCPCreateStream+0x118>)
 800c690:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c694:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	3b01      	subs	r3, #1
 800c69a:	4a34      	ldr	r2, [pc, #208]	@ (800c76c <prvTCPCreateStream+0x118>)
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	4413      	add	r3, r2
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6aa:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10c      	bne.n	800c6d0 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6bc:	69ba      	ldr	r2, [r7, #24]
 800c6be:	fb02 f303 	mul.w	r3, r2, r3
 800c6c2:	4a2b      	ldr	r2, [pc, #172]	@ (800c770 <prvTCPCreateStream+0x11c>)
 800c6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c8:	095a      	lsrs	r2, r3, #5
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d111      	bne.n	800c6fe <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	fb02 f303 	mul.w	r3, r2, r3
 800c6e6:	4a22      	ldr	r2, [pc, #136]	@ (800c770 <prvTCPCreateStream+0x11c>)
 800c6e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ec:	095a      	lsrs	r2, r3, #5
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800c6f4:	e003      	b.n	800c6fe <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c6fc:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	3304      	adds	r3, #4
 800c702:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	f023 0303 	bic.w	r3, r3, #3
 800c70a:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	3314      	adds	r3, #20
 800c710:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f00a fad0 	bl	8016cb8 <pvPortMalloc>
 800c718:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10b      	bne.n	800c738 <prvTCPCreateStream+0xe4>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800c726:	f043 0308 	orr.w	r3, r3, #8
 800c72a:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800c72e:	2108      	movs	r1, #8
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fe6d 	bl	800d410 <vTCPStateChange>
 800c736:	e013      	b.n	800c760 <prvTCPCreateStream+0x10c>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800c738:	2214      	movs	r2, #20
 800c73a:	2100      	movs	r1, #0
 800c73c:	68b8      	ldr	r0, [r7, #8]
 800c73e:	f00a ff59 	bl	80175f4 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	69fa      	ldr	r2, [r7, #28]
 800c746:	611a      	str	r2, [r3, #16]
            if( xTCPWindowLoggingLevel != 0 )
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
            }

            if( xIsInputStream != 0 )
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d004      	beq.n	800c758 <prvTCPCreateStream+0x104>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c756:	e003      	b.n	800c760 <prvTCPCreateStream+0x10c>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            }
        }

        return pxBuffer;
 800c760:	68bb      	ldr	r3, [r7, #8]
    }
 800c762:	4618      	mov	r0, r3
 800c764:	3720      	adds	r7, #32
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	0801890c 	.word	0x0801890c
 800c770:	51eb851f 	.word	0x51eb851f

0800c774 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800c774:	b580      	push	{r7, lr}
 800c776:	b08a      	sub	sp, #40	@ 0x28
 800c778:	af02      	add	r7, sp, #8
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800c784:	2300      	movs	r3, #0
 800c786:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d006      	beq.n	800c79c <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800c796:	2300      	movs	r3, #0
 800c798:	61fb      	str	r3, [r7, #28]
 800c79a:	e009      	b.n	800c7b0 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7a2:	f107 0214 	add.w	r2, r7, #20
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fc18 	bl	800cfde <uxStreamBufferGetPtr>
 800c7ae:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d011      	beq.n	800c7da <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c7bc:	6979      	ldr	r1, [r7, #20]
 800c7be:	69ba      	ldr	r2, [r7, #24]
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	9300      	str	r3, [sp, #0]
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	f000 fca3 	bl	800d11e <uxStreamBufferGet>
        {
 800c7d8:	e7d4      	b.n	800c784 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800c7da:	bf00      	nop
 800c7dc:	3720      	adds	r7, #32
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800c7f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d121      	bne.n	800c83e <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c800:	4618      	mov	r0, r3
 800c802:	f000 fb5d 	bl	800cec0 <uxStreamBufferFrontSpace>
 800c806:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	429a      	cmp	r2, r3
 800c812:	d814      	bhi.n	800c83e <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800c81a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c81e:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800c828:	f043 0301 	orr.w	r3, r3, #1
 800c82c:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2201      	movs	r2, #1
 800c834:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800c838:	2007      	movs	r0, #7
 800c83a:	f7fc ffd9 	bl	80097f0 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f043 0201 	orr.w	r2, r3, #1
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	d005      	beq.n	800c862 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800c862:	bf00      	nop
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b088      	sub	sp, #32
 800c86e:	af00      	add	r7, sp, #0
 800c870:	60f8      	str	r0, [r7, #12]
 800c872:	60b9      	str	r1, [r7, #8]
 800c874:	607a      	str	r2, [r7, #4]
 800c876:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c87e:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800c884:	2301      	movs	r3, #1
 800c886:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10a      	bne.n	800c8a8 <lTCPAddRxdata+0x3e>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800c892:	2101      	movs	r1, #1
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f7ff fedd 	bl	800c654 <prvTCPCreateStream>
 800c89a:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <lTCPAddRxdata+0x3e>
            {
                xResult = -1;
 800c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	db29      	blt.n	800c902 <lTCPAddRxdata+0x98>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00f      	beq.n	800c8d4 <lTCPAddRxdata+0x6a>
 800c8b4:	69f8      	ldr	r0, [r7, #28]
 800c8b6:	f000 fb14 	bl	800cee2 <uxStreamBufferGetSize>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d109      	bne.n	800c8d4 <lTCPAddRxdata+0x6a>
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <lTCPAddRxdata+0x6a>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d003      	beq.n	800c8d4 <lTCPAddRxdata+0x6a>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	68b9      	ldr	r1, [r7, #8]
 800c8da:	69f8      	ldr	r0, [r7, #28]
 800c8dc:	f000 fb9f 	bl	800d01e <uxStreamBufferAdd>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	61bb      	str	r3, [r7, #24]
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10b      	bne.n	800c902 <lTCPAddRxdata+0x98>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d005      	beq.n	800c8fc <lTCPAddRxdata+0x92>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	6979      	ldr	r1, [r7, #20]
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f7ff ff3d 	bl	800c774 <vTCPAddRxdata_Callback>
 800c8fa:	e002      	b.n	800c902 <lTCPAddRxdata+0x98>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f7ff ff70 	bl	800c7e2 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800c902:	69bb      	ldr	r3, [r7, #24]
    }
 800c904:	4618      	mov	r0, r3
 800c906:	3720      	adds	r7, #32
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c91e:	2b06      	cmp	r3, #6
 800c920:	d003      	beq.n	800c92a <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c922:	f06f 0315 	mvn.w	r3, #21
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	e011      	b.n	800c94e <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c930:	2b00      	cmp	r3, #0
 800c932:	d008      	beq.n	800c946 <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 faaf 	bl	800ce9e <uxStreamBufferGetSpace>
 800c940:	4603      	mov	r3, r0
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e003      	b.n	800c94e <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c94c:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800c94e:	68fb      	ldr	r3, [r7, #12]
    }
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c96a:	2b06      	cmp	r3, #6
 800c96c:	d003      	beq.n	800c976 <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c96e:	f06f 0315 	mvn.w	r3, #21
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	e00f      	b.n	800c996 <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d008      	beq.n	800c992 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c986:	4618      	mov	r0, r3
 800c988:	f000 faab 	bl	800cee2 <uxStreamBufferGetSize>
 800c98c:	4603      	mov	r3, r0
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	e001      	b.n	800c996 <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800c996:	68fb      	ldr	r3, [r7, #12]
    }
 800c998:	4618      	mov	r0, r3
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c9b6:	2b06      	cmp	r3, #6
 800c9b8:	d003      	beq.n	800c9c2 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c9ba:	f06f 0315 	mvn.w	r3, #21
 800c9be:	60fb      	str	r3, [r7, #12]
 800c9c0:	e00b      	b.n	800c9da <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c9c8:	2b04      	cmp	r3, #4
 800c9ca:	d906      	bls.n	800c9da <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c9d2:	2b07      	cmp	r3, #7
 800c9d4:	d801      	bhi.n	800c9da <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800c9da:	68fb      	ldr	r3, [r7, #12]
    }
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800c9fa:	2b06      	cmp	r3, #6
 800c9fc:	d003      	beq.n	800ca06 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800c9fe:	f06f 0315 	mvn.w	r3, #21
 800ca02:	60fb      	str	r3, [r7, #12]
 800ca04:	e00f      	b.n	800ca26 <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d008      	beq.n	800ca22 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 fa63 	bl	800cee2 <uxStreamBufferGetSize>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	60fb      	str	r3, [r7, #12]
 800ca20:	e001      	b.n	800ca26 <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800ca22:	2300      	movs	r3, #0
 800ca24:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ca26:	68fb      	ldr	r3, [r7, #12]
    }
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800ca30:	b480      	push	{r7}
 800ca32:	b085      	sub	sp, #20
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca42:	d004      	beq.n	800ca4e <xSocketValid+0x1e>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3714      	adds	r7, #20
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b098      	sub	sp, #96	@ 0x60
 800ca60:	af02      	add	r7, sp, #8
 800ca62:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800ca64:	2320      	movs	r3, #32
 800ca66:	657b      	str	r3, [r7, #84]	@ 0x54

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800ca68:	f008 fb30 	bl	80150cc <xTaskGetTickCount>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	653b      	str	r3, [r7, #80]	@ 0x50
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800ca78:	f107 030c 	add.w	r3, r7, #12
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]
 800ca80:	605a      	str	r2, [r3, #4]
 800ca82:	609a      	str	r2, [r3, #8]
 800ca84:	60da      	str	r2, [r3, #12]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d131      	bne.n	800caf4 <vTCPNetStat_TCPSocket+0x98>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800ca96:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800ca9e:	f107 000c 	add.w	r0, r7, #12
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	4613      	mov	r3, r2
 800caa6:	4a21      	ldr	r2, [pc, #132]	@ (800cb2c <vTCPNetStat_TCPSocket+0xd0>)
 800caa8:	2110      	movs	r1, #16
 800caaa:	f00a fc6b 	bl	8017384 <sniprintf>
 800caae:	64f8      	str	r0, [r7, #76]	@ 0x4c
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800cab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	da0d      	bge.n	800cad2 <vTCPNetStat_TCPSocket+0x76>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caba:	b672      	cpsid	i
 800cabc:	f383 8811 	msr	BASEPRI, r3
 800cac0:	f3bf 8f6f 	isb	sy
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	b662      	cpsie	i
 800caca:	64bb      	str	r3, [r7, #72]	@ 0x48
}
 800cacc:	bf00      	nop
 800cace:	bf00      	nop
 800cad0:	e7fd      	b.n	800cace <vTCPNetStat_TCPSocket+0x72>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800cad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cad4:	2b0f      	cmp	r3, #15
 800cad6:	dd0d      	ble.n	800caf4 <vTCPNetStat_TCPSocket+0x98>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cadc:	b672      	cpsid	i
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	b662      	cpsie	i
 800caec:	647b      	str	r3, [r7, #68]	@ 0x44
}
 800caee:	bf00      	nop
 800caf0:	bf00      	nop
 800caf2:	e7fd      	b.n	800caf0 <vTCPNetStat_TCPSocket+0x94>
        }

        if( age > 999999U )
 800caf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caf6:	4a0e      	ldr	r2, [pc, #56]	@ (800cb30 <vTCPNetStat_TCPSocket+0xd4>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d901      	bls.n	800cb00 <vTCPNetStat_TCPSocket+0xa4>
        {
            age = 999999U;
 800cafc:	4b0c      	ldr	r3, [pc, #48]	@ (800cb30 <vTCPNetStat_TCPSocket+0xd4>)
 800cafe:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	7a1b      	ldrb	r3, [r3, #8]
 800cb04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d108      	bne.n	800cb20 <vTCPNetStat_TCPSocket+0xc4>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb12:	f107 001c 	add.w	r0, r7, #28
 800cb16:	4a07      	ldr	r2, [pc, #28]	@ (800cb34 <vTCPNetStat_TCPSocket+0xd8>)
 800cb18:	2128      	movs	r1, #40	@ 0x28
 800cb1a:	f00a fc33 	bl	8017384 <sniprintf>
                    break;
 800cb1e:	e000      	b.n	800cb22 <vTCPNetStat_TCPSocket+0xc6>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800cb20:	bf00      	nop
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800cb22:	bf00      	nop
 800cb24:	3758      	adds	r7, #88	@ 0x58
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	080187f0 	.word	0x080187f0
 800cb30:	000f423f 	.word	0x000f423f
 800cb34:	080187f8 	.word	0x080187f8

0800cb38 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af00      	add	r7, sp, #0
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800cb42:	f004 fd63 	bl	801160c <uxGetMinimumFreeNetworkBuffers>
 800cb46:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800cb48:	f004 fd54 	bl	80115f4 <uxGetNumberOfFreeNetworkBuffers>
 800cb4c:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800cb4e:	4b17      	ldr	r3, [pc, #92]	@ (800cbac <vTCPNetStat+0x74>)
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb56:	d125      	bne.n	800cba4 <vTCPNetStat+0x6c>
        }
        else
        {
            /* Casting a "MiniListItem_t" to a "ListItem_t".
             * This is safe because only its address is being accessed, not its fields. */
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800cb58:	4b15      	ldr	r3, [pc, #84]	@ (800cbb0 <vTCPNetStat+0x78>)
 800cb5a:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800cb5c:	4b15      	ldr	r3, [pc, #84]	@ (800cbb4 <vTCPNetStat+0x7c>)
 800cb5e:	60bb      	str	r3, [r7, #8]

            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800cb60:	4b12      	ldr	r3, [pc, #72]	@ (800cbac <vTCPNetStat+0x74>)
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	61fb      	str	r3, [r7, #28]
 800cb66:	e00b      	b.n	800cb80 <vTCPNetStat+0x48>
                 pxIterator != pxEndTCP;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7ff ff74 	bl	800ca5c <vTCPNetStat_TCPSocket>
                count++;
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	3301      	adds	r3, #1
 800cb78:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 800cb80:	69fa      	ldr	r2, [r7, #28]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d1ef      	bne.n	800cb68 <vTCPNetStat+0x30>
            }

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800cb88:	4b0b      	ldr	r3, [pc, #44]	@ (800cbb8 <vTCPNetStat+0x80>)
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	61fb      	str	r3, [r7, #28]
 800cb8e:	e005      	b.n	800cb9c <vTCPNetStat+0x64>
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                /* Local port on this machine */
                FreeRTOS_printf( ( "UDP Port %5u\n",
                                   FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
                count++;
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	3301      	adds	r3, #1
 800cb94:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 800cb9c:	69fa      	ldr	r2, [r7, #28]
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d1f5      	bne.n	800cb90 <vTCPNetStat+0x58>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800cba4:	bf00      	nop
 800cba6:	3720      	adds	r7, #32
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20002620 	.word	0x20002620
 800cbb0:	20002628 	.word	0x20002628
 800cbb4:	20002614 	.word	0x20002614
 800cbb8:	2000260c 	.word	0x2000260c

0800cbbc <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cbd2:	f003 0304 	and.w	r3, r3, #4
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d109      	bne.n	800cbf0 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cbe2:	f003 0302 	and.w	r3, r3, #2
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbf4:	f003 0301 	and.w	r3, r3, #1
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d03a      	beq.n	800cc72 <vSocketSelectTCP+0xb6>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d113      	bne.n	800cc2e <vSocketSelectTCP+0x72>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d030      	beq.n	800cc72 <vSocketSelectTCP+0xb6>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc16:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cc1a:	f003 0302 	and.w	r3, r3, #2
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d026      	beq.n	800cc72 <vSocketSelectTCP+0xb6>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	f043 0301 	orr.w	r3, r3, #1
 800cc2a:	613b      	str	r3, [r7, #16]
 800cc2c:	e021      	b.n	800cc72 <vSocketSelectTCP+0xb6>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cc34:	f003 0308 	and.w	r3, r3, #8
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00c      	beq.n	800cc58 <vSocketSelectTCP+0x9c>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <vSocketSelectTCP+0x9c>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	f043 0301 	orr.w	r3, r3, #1
 800cc54:	613b      	str	r3, [r7, #16]
 800cc56:	e00c      	b.n	800cc72 <vSocketSelectTCP+0xb6>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d009      	beq.n	800cc72 <vSocketSelectTCP+0xb6>
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7ff fec2 	bl	800c9e8 <FreeRTOS_rx_size>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	dd03      	ble.n	800cc72 <vSocketSelectTCP+0xb6>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	f043 0301 	orr.w	r3, r3, #1
 800cc70:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc76:	f003 0304 	and.w	r3, r3, #4
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00d      	beq.n	800cc9a <vSocketSelectTCP+0xde>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cc84:	2b08      	cmp	r3, #8
 800cc86:	d004      	beq.n	800cc92 <vSocketSelectTCP+0xd6>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d103      	bne.n	800cc9a <vSocketSelectTCP+0xde>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	f043 0304 	orr.w	r3, r3, #4
 800cc98:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc9e:	f003 0302 	and.w	r3, r3, #2
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d034      	beq.n	800cd10 <vSocketSelectTCP+0x154>
            {
                BaseType_t bMatch = pdFALSE;
 800cca6:	2300      	movs	r3, #0
 800cca8:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d007      	beq.n	800ccc0 <vSocketSelectTCP+0x104>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f7ff fe2b 	bl	800c90c <FreeRTOS_tx_space>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	dd01      	ble.n	800ccc0 <vSocketSelectTCP+0x104>
                    {
                        bMatch = pdTRUE;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d11d      	bne.n	800cd02 <vSocketSelectTCP+0x146>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800cccc:	f003 0308 	and.w	r3, r3, #8
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d015      	beq.n	800cd02 <vSocketSelectTCP+0x146>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800ccdc:	2b04      	cmp	r3, #4
 800ccde:	d910      	bls.n	800cd02 <vSocketSelectTCP+0x146>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800cce6:	f003 0310 	and.w	r3, r3, #16
 800ccea:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d108      	bne.n	800cd02 <vSocketSelectTCP+0x146>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800ccf6:	f043 0310 	orr.w	r3, r3, #16
 800ccfa:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                        bMatch = pdTRUE;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <vSocketSelectTCP+0x154>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	f043 0302 	orr.w	r3, r3, #2
 800cd0e:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 800cd10:	693b      	ldr	r3, [r7, #16]
        }
 800cd12:	4618      	mov	r0, r3
 800cd14:	3718      	adds	r7, #24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b08c      	sub	sp, #48	@ 0x30
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800cd24:	2301      	movs	r3, #1
 800cd26:	617b      	str	r3, [r7, #20]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	627b      	str	r3, [r7, #36]	@ 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd30:	e047      	b.n	800cdc2 <vSocketSelect+0xa6>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            const List_t * pxList;

            if( xRound == 0 )
 800cd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d104      	bne.n	800cd42 <vSocketSelect+0x26>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 800cd38:	4b36      	ldr	r3, [pc, #216]	@ (800ce14 <vSocketSelect+0xf8>)
 800cd3a:	61fb      	str	r3, [r7, #28]
                pxList = &xBoundUDPSocketsList;
 800cd3c:	4b36      	ldr	r3, [pc, #216]	@ (800ce18 <vSocketSelect+0xfc>)
 800cd3e:	61bb      	str	r3, [r7, #24]
 800cd40:	e003      	b.n	800cd4a <vSocketSelect+0x2e>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800cd42:	4b36      	ldr	r3, [pc, #216]	@ (800ce1c <vSocketSelect+0x100>)
 800cd44:	61fb      	str	r3, [r7, #28]
                    pxList = &xBoundTCPSocketsList;
 800cd46:	4b36      	ldr	r3, [pc, #216]	@ (800ce20 <vSocketSelect+0x104>)
 800cd48:	61bb      	str	r3, [r7, #24]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_HEAD_ENTRY( pxList );
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	623b      	str	r3, [r7, #32]
 800cd50:	e030      	b.n	800cdb4 <vSocketSelect+0x98>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	60fb      	str	r3, [r7, #12]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d124      	bne.n	800cdac <vSocketSelect+0x90>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	62bb      	str	r3, [r7, #40]	@ 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800cd6c:	2b06      	cmp	r3, #6
 800cd6e:	d107      	bne.n	800cd80 <vSocketSelect+0x64>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	f7ff ff23 	bl	800cbbc <vSocketSelectTCP>
 800cd76:	4602      	mov	r2, r0
 800cd78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd7e:	e00d      	b.n	800cd9c <vSocketSelect+0x80>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd84:	f003 0301 	and.w	r3, r3, #1
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d007      	beq.n	800cd9c <vSocketSelect+0x80>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d003      	beq.n	800cd9c <vSocketSelect+0x80>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800cd94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cda0:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800cda2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda6:	4313      	orrs	r3, r2
 800cda8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdaa:	e000      	b.n	800cdae <vSocketSelect+0x92>
                    continue;
 800cdac:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 800cdb4:	6a3a      	ldr	r2, [r7, #32]
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d1ca      	bne.n	800cd52 <vSocketSelect+0x36>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800cdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	ddb3      	ble.n	800cd32 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2100      	movs	r1, #0
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f006 fd2b 	bl	801382c <xEventGroupClearBits>
 800cdd6:	6138      	str	r0, [r7, #16]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdda:	43da      	mvns	r2, r3
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	4013      	ands	r3, r2
 800cde0:	f003 030f 	and.w	r3, r3, #15
 800cde4:	613b      	str	r3, [r7, #16]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d005      	beq.n	800cdf8 <vSocketSelect+0xdc>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6939      	ldr	r1, [r7, #16]
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f006 fd1a 	bl	801382c <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfe:	f043 0310 	orr.w	r3, r3, #16
 800ce02:	4619      	mov	r1, r3
 800ce04:	4610      	mov	r0, r2
 800ce06:	f006 fd4e 	bl	80138a6 <xEventGroupSetBits>
    }
 800ce0a:	bf00      	nop
 800ce0c:	3730      	adds	r7, #48	@ 0x30
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	20002614 	.word	0x20002614
 800ce18:	2000260c 	.word	0x2000260c
 800ce1c:	20002628 	.word	0x20002628
 800ce20:	20002620 	.word	0x20002620

0800ce24 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 800ce24:	b480      	push	{r7}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	441a      	add	r2, r3
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	1ad3      	subs	r3, r2, r3
 800ce40:	3b01      	subs	r3, #1
 800ce42:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800ce44:	697a      	ldr	r2, [r7, #20]
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d303      	bcc.n	800ce54 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800ce54:	697b      	ldr	r3, [r7, #20]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	371c      	adds	r7, #28
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 800ce62:	b480      	push	{r7}
 800ce64:	b087      	sub	sp, #28
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	60f8      	str	r0, [r7, #12]
 800ce6a:	60b9      	str	r1, [r7, #8]
 800ce6c:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 800ce74:	693a      	ldr	r2, [r7, #16]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	441a      	add	r2, r3
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d303      	bcc.n	800ce90 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	1ad3      	subs	r3, r2, r3
 800ce8e:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800ce90:	697b      	ldr	r3, [r7, #20]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	371c      	adds	r7, #28
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6899      	ldr	r1, [r3, #8]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7ff ffb7 	bl	800ce24 <uxStreamBufferSpace>
 800ceb6:	4603      	mov	r3, r0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68d9      	ldr	r1, [r3, #12]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	461a      	mov	r2, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff ffa6 	bl	800ce24 <uxStreamBufferSpace>
 800ced8:	4603      	mov	r3, r0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3708      	adds	r7, #8
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b082      	sub	sp, #8
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6819      	ldr	r1, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	461a      	mov	r2, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff ffb4 	bl	800ce62 <uxStreamBufferDistance>
 800cefa:	4603      	mov	r3, r0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3708      	adds	r7, #8
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6859      	ldr	r1, [r3, #4]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	461a      	mov	r2, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7ff ffa3 	bl	800ce62 <uxStreamBufferDistance>
 800cf1c:	4603      	mov	r3, r0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 800cf26:	b480      	push	{r7}
 800cf28:	b083      	sub	sp, #12
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	605a      	str	r2, [r3, #4]
}
 800cf46:	bf00      	nop
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b086      	sub	sp, #24
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff ffce 	bl	800cf04 <uxStreamBufferMidSpace>
 800cf68:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 800cf74:	693a      	ldr	r2, [r7, #16]
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d901      	bls.n	800cf80 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 800cf80:	697a      	ldr	r2, [r7, #20]
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	4413      	add	r3, r2
 800cf86:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d303      	bcc.n	800cf98 <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 800cf90:	697a      	ldr	r2, [r7, #20]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	605a      	str	r2, [r3, #4]
}
 800cf9e:	bf00      	nop
 800cfa0:	3718      	adds	r7, #24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b087      	sub	sp, #28
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	1ad2      	subs	r2, r2, r3
 800cfc2:	6879      	ldr	r1, [r7, #4]
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	1acb      	subs	r3, r1, r3
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d801      	bhi.n	800cfd0 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800cfd0:	697b      	ldr	r3, [r7, #20]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	371c      	adds	r7, #28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff ff77 	bl	800cee2 <uxStreamBufferGetSize>
 800cff4:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f103 0214 	add.w	r2, r3, #20
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	441a      	add	r2, r3
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	691a      	ldr	r2, [r3, #16]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	4619      	mov	r1, r3
 800d00e:	68b8      	ldr	r0, [r7, #8]
 800d010:	f7fd fc72 	bl	800a8f8 <FreeRTOS_min_size_t>
 800d014:	4603      	mov	r3, r0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b08a      	sub	sp, #40	@ 0x28
 800d022:	af00      	add	r7, sp, #0
 800d024:	60f8      	str	r0, [r7, #12]
 800d026:	60b9      	str	r1, [r7, #8]
 800d028:	607a      	str	r2, [r7, #4]
 800d02a:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f7ff ff36 	bl	800ce9e <uxStreamBufferGetSpace>
 800d032:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800d034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d904      	bls.n	800d046 <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 800d03c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	627b      	str	r3, [r7, #36]	@ 0x24
 800d044:	e001      	b.n	800d04a <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 800d046:	2300      	movs	r3, #0
 800d048:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d04e:	f7fd fc53 	bl	800a8f8 <FreeRTOS_min_size_t>
 800d052:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d05c      	beq.n	800d114 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	691b      	ldr	r3, [r3, #16]
 800d05e:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00b      	beq.n	800d084 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800d06c:	6a3a      	ldr	r2, [r7, #32]
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	4413      	add	r3, r2
 800d072:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 800d074:	6a3a      	ldr	r2, [r7, #32]
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d303      	bcc.n	800d084 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 800d07c:	6a3a      	ldr	r2, [r7, #32]
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d021      	beq.n	800d0ce <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 800d08a:	69ba      	ldr	r2, [r7, #24]
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	69f9      	ldr	r1, [r7, #28]
 800d092:	4618      	mov	r0, r3
 800d094:	f7fd fc30 	bl	800a8f8 <FreeRTOS_min_size_t>
 800d098:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) pvPortMemCpyStreamBuffer( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	3310      	adds	r3, #16
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	6879      	ldr	r1, [r7, #4]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f00a fb7e 	bl	80177aa <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800d0ae:	69fa      	ldr	r2, [r7, #28]
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d90b      	bls.n	800d0ce <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) pvPortMemCpyStreamBuffer( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f103 0014 	add.w	r0, r3, #20
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	18d1      	adds	r1, r2, r3
 800d0c2:	69fa      	ldr	r2, [r7, #28]
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	f00a fb6e 	bl	80177aa <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        taskENTER_CRITICAL();
 800d0ce:	f009 fcc5 	bl	8016a5c <vPortEnterCritical>
        {
            if( uxOffset == 0U )
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10e      	bne.n	800d0f6 <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 800d0d8:	6a3a      	ldr	r2, [r7, #32]
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	4413      	add	r3, r2
 800d0de:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 800d0e0:	6a3a      	ldr	r2, [r7, #32]
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d303      	bcc.n	800d0f0 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 800d0e8:	6a3a      	ldr	r2, [r7, #32]
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	1ad3      	subs	r3, r2, r3
 800d0ee:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6a3a      	ldr	r2, [r7, #32]
 800d0f4:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	6a3a      	ldr	r2, [r7, #32]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f7ff ff51 	bl	800cfa6 <xStreamBufferLessThenEqual>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d002      	beq.n	800d110 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6a3a      	ldr	r2, [r7, #32]
 800d10e:	60da      	str	r2, [r3, #12]
            }
        }
        taskEXIT_CRITICAL();
 800d110:	f009 fcda 	bl	8016ac8 <vPortExitCritical>
    }

    return uxCount;
 800d114:	69fb      	ldr	r3, [r7, #28]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3728      	adds	r7, #40	@ 0x28
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b08a      	sub	sp, #40	@ 0x28
 800d122:	af00      	add	r7, sp, #0
 800d124:	60f8      	str	r0, [r7, #12]
 800d126:	60b9      	str	r1, [r7, #8]
 800d128:	607a      	str	r2, [r7, #4]
 800d12a:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f7ff fed8 	bl	800cee2 <uxStreamBufferGetSize>
 800d132:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 800d134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d904      	bls.n	800d146 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800d13c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	627b      	str	r3, [r7, #36]	@ 0x24
 800d144:	e001      	b.n	800d14a <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800d146:	2300      	movs	r3, #0
 800d148:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d14e:	f7fd fbd3 	bl	800a8f8 <FreeRTOS_min_size_t>
 800d152:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d04e      	beq.n	800d1f8 <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00b      	beq.n	800d184 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 800d16c:	6a3a      	ldr	r2, [r7, #32]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	4413      	add	r3, r2
 800d172:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800d174:	6a3a      	ldr	r2, [r7, #32]
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d303      	bcc.n	800d184 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 800d17c:	6a3a      	ldr	r2, [r7, #32]
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d021      	beq.n	800d1ce <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 800d18a:	69ba      	ldr	r2, [r7, #24]
 800d18c:	6a3b      	ldr	r3, [r7, #32]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	69f9      	ldr	r1, [r7, #28]
 800d192:	4618      	mov	r0, r3
 800d194:	f7fd fbb0 	bl	800a8f8 <FreeRTOS_min_size_t>
 800d198:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) pvPortMemCpyStreamBuffer( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800d19a:	6a3b      	ldr	r3, [r7, #32]
 800d19c:	3310      	adds	r3, #16
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	697a      	ldr	r2, [r7, #20]
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f00a fafe 	bl	80177aa <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800d1ae:	69fa      	ldr	r2, [r7, #28]
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d90b      	bls.n	800d1ce <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) pvPortMemCpyStreamBuffer( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	18d0      	adds	r0, r2, r3
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f103 0114 	add.w	r1, r3, #20
 800d1c2:	69fa      	ldr	r2, [r7, #28]
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	f00a faee 	bl	80177aa <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d111      	bne.n	800d1f8 <uxStreamBufferGet+0xda>
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10e      	bne.n	800d1f8 <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800d1da:	6a3a      	ldr	r2, [r7, #32]
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	4413      	add	r3, r2
 800d1e0:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800d1e2:	6a3a      	ldr	r2, [r7, #32]
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d303      	bcc.n	800d1f2 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 800d1ea:	6a3a      	ldr	r2, [r7, #32]
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6a3a      	ldr	r2, [r7, #32]
 800d1f6:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800d1f8:	69fb      	ldr	r3, [r7, #28]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3728      	adds	r7, #40	@ 0x28
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
	...

0800d204 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 800d20c:	4b0a      	ldr	r3, [pc, #40]	@ (800d238 <vSocketCloseNextTime+0x34>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d009      	beq.n	800d228 <vSocketCloseNextTime+0x24>
 800d214:	4b08      	ldr	r3, [pc, #32]	@ (800d238 <vSocketCloseNextTime+0x34>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d004      	beq.n	800d228 <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 800d21e:	4b06      	ldr	r3, [pc, #24]	@ (800d238 <vSocketCloseNextTime+0x34>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4618      	mov	r0, r3
 800d224:	f7fe fb9c 	bl	800b960 <vSocketClose>
        }

        xSocketToClose = pxSocket;
 800d228:	4a03      	ldr	r2, [pc, #12]	@ (800d238 <vSocketCloseNextTime+0x34>)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6013      	str	r3, [r2, #0]
    }
 800d22e:	bf00      	nop
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20002638 	.word	0x20002638

0800d23c <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 800d244:	4b0c      	ldr	r3, [pc, #48]	@ (800d278 <vSocketListenNextTime+0x3c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00e      	beq.n	800d26a <vSocketListenNextTime+0x2e>
 800d24c:	4b0a      	ldr	r3, [pc, #40]	@ (800d278 <vSocketListenNextTime+0x3c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	429a      	cmp	r2, r3
 800d254:	d009      	beq.n	800d26a <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 800d256:	4b08      	ldr	r3, [pc, #32]	@ (800d278 <vSocketListenNextTime+0x3c>)
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	4b07      	ldr	r3, [pc, #28]	@ (800d278 <vSocketListenNextTime+0x3c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800d262:	4619      	mov	r1, r3
 800d264:	4610      	mov	r0, r2
 800d266:	f7ff f8b9 	bl	800c3dc <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 800d26a:	4a03      	ldr	r2, [pc, #12]	@ (800d278 <vSocketListenNextTime+0x3c>)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6013      	str	r3, [r2, #0]
    }
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	2000263c 	.word	0x2000263c

0800d27c <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800d288:	2300      	movs	r3, #0
 800d28a:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d292:	2b04      	cmp	r3, #4
 800d294:	d907      	bls.n	800d2a6 <xTCPSocketCheck+0x2a>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <xTCPSocketCheck+0x2a>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f002 f97f 	bl	800f5a4 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d035      	beq.n	800d31c <xTCPSocketCheck+0xa0>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d2b6:	f003 0320 	and.w	r3, r3, #32
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d11e      	bne.n	800d2fe <xTCPSocketCheck+0x82>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d011      	beq.n	800d2ee <xTCPSocketCheck+0x72>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7fc fe6b 	bl	8009fac <uxIPHeaderSizeSocket>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	f103 0214 	add.w	r2, r3, #20
 800d2dc:	2301      	movs	r3, #1
 800d2de:	4621      	mov	r1, r4
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f001 fd78 	bl	800edd6 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fa08 	bl	800d704 <prvTCPNextTimeout>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d901      	bls.n	800d2fe <xTCPSocketCheck+0x82>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d304:	2b00      	cmp	r3, #0
 800d306:	d009      	beq.n	800d31c <xTCPSocketCheck+0xa0>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d30e:	4618      	mov	r0, r3
 800d310:	f004 f93a 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d113      	bne.n	800d34a <xTCPSocketCheck+0xce>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d328:	2b04      	cmp	r3, #4
 800d32a:	d804      	bhi.n	800d336 <xTCPSocketCheck+0xba>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800d332:	2b02      	cmp	r3, #2
 800d334:	d102      	bne.n	800d33c <xTCPSocketCheck+0xc0>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f001 fcba 	bl	800ecb0 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 f9e1 	bl	800d704 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 ff1a 	bl	800e17c <prvTCPStatusAgeCheck>
 800d348:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 800d34a:	68fb      	ldr	r3, [r7, #12]
    }
 800d34c:	4618      	mov	r0, r3
 800d34e:	3714      	adds	r7, #20
 800d350:	46bd      	mov	sp, r7
 800d352:	bd90      	pop	{r4, r7, pc}

0800d354 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 800d35c:	f007 feb6 	bl	80150cc <xTaskGetTickCount>
 800d360:	4602      	mov	r2, r0
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800d36e:	f023 0304 	bic.w	r3, r3, #4
 800d372:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800d37c:	f023 0302 	bic.w	r3, r3, #2
 800d380:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800d38c:	f007 fe9e 	bl	80150cc <xTaskGetTickCount>
 800d390:	4602      	mov	r2, r0
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        ( void ) pxSocket;
    }
 800d398:	bf00      	nop
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 800d3a0:	b480      	push	{r7}
 800d3a2:	b087      	sub	sp, #28
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800d3ac:	4b16      	ldr	r3, [pc, #88]	@ (800d408 <vTCPRemoveTCPChild+0x68>)
 800d3ae:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800d3b0:	4b16      	ldr	r3, [pc, #88]	@ (800d40c <vTCPRemoveTCPChild+0x6c>)
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 800d3b6:	e01c      	b.n	800d3f2 <vTCPRemoveTCPChild+0x52>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d012      	beq.n	800d3f2 <vTCPRemoveTCPChild+0x52>
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d10c      	bne.n	800d3f2 <vTCPRemoveTCPChild+0x52>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d106      	bne.n	800d3f2 <vTCPRemoveTCPChild+0x52>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    xReturn = pdTRUE;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	617b      	str	r3, [r7, #20]
                    break;
 800d3f0:	e003      	b.n	800d3fa <vTCPRemoveTCPChild+0x5a>
        while( pxIterator != pxEnd )
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d1de      	bne.n	800d3b8 <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 800d3fa:	697b      	ldr	r3, [r7, #20]
    }
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	371c      	adds	r7, #28
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	20002628 	.word	0x20002628
 800d40c:	20002620 	.word	0x20002620

0800d410 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 800d410:	b580      	push	{r7, lr}
 800d412:	b096      	sub	sp, #88	@ 0x58
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	657b      	str	r3, [r7, #84]	@ 0x54
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d426:	2b04      	cmp	r3, #4
 800d428:	d906      	bls.n	800d438 <vTCPStateChange+0x28>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d430:	2b08      	cmp	r3, #8
 800d432:	d001      	beq.n	800d438 <vTCPStateChange+0x28>
 800d434:	2301      	movs	r3, #1
 800d436:	e000      	b.n	800d43a <vTCPStateChange+0x2a>
 800d438:	2300      	movs	r3, #0
 800d43a:	653b      	str	r3, [r7, #80]	@ 0x50
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 800d43c:	78fb      	ldrb	r3, [r7, #3]
 800d43e:	2b04      	cmp	r3, #4
 800d440:	d904      	bls.n	800d44c <vTCPStateChange+0x3c>
 800d442:	78fb      	ldrb	r3, [r7, #3]
 800d444:	2b08      	cmp	r3, #8
 800d446:	d001      	beq.n	800d44c <vTCPStateChange+0x3c>
 800d448:	2301      	movs	r3, #1
 800d44a:	e000      	b.n	800d44e <vTCPStateChange+0x3e>
 800d44c:	2300      	movs	r3, #0
 800d44e:	64bb      	str	r3, [r7, #72]	@ 0x48

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d456:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 800d45e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d462:	2b02      	cmp	r3, #2
 800d464:	d007      	beq.n	800d476 <vTCPStateChange+0x66>
 800d466:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d46a:	2b03      	cmp	r3, #3
 800d46c:	d003      	beq.n	800d476 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 800d46e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d472:	2b04      	cmp	r3, #4
 800d474:	d104      	bne.n	800d480 <vTCPStateChange+0x70>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 800d476:	78fb      	ldrb	r3, [r7, #3]
 800d478:	2b08      	cmp	r3, #8
 800d47a:	d101      	bne.n	800d480 <vTCPStateChange+0x70>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	653b      	str	r3, [r7, #80]	@ 0x50
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 800d480:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d484:	429a      	cmp	r2, r3
 800d486:	f000 80a2 	beq.w	800d5ce <vTCPStateChange+0x1be>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d490:	f003 0304 	and.w	r3, r3, #4
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d01c      	beq.n	800d4d4 <vTCPStateChange+0xc4>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d4a0:	f003 0308 	and.w	r3, r3, #8
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d114      	bne.n	800d4d4 <vTCPStateChange+0xc4>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4b0:	657b      	str	r3, [r7, #84]	@ 0x54
                    configASSERT( xParent != NULL );
 800d4b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10d      	bne.n	800d4d4 <vTCPStateChange+0xc4>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4bc:	b672      	cpsid	i
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	b662      	cpsie	i
 800d4cc:	63bb      	str	r3, [r7, #56]	@ 0x38
}
 800d4ce:	bf00      	nop
 800d4d0:	bf00      	nop
 800d4d2:	e7fd      	b.n	800d4d0 <vTCPStateChange+0xc0>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 800d4d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d055      	beq.n	800d586 <vTCPStateChange+0x176>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d4e0:	f003 0304 	and.w	r3, r3, #4
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d03a      	beq.n	800d560 <vTCPStateChange+0x150>
                {
                    if( xParent != NULL )
 800d4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d024      	beq.n	800d53a <vTCPStateChange+0x12a>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 800d4f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d103      	bne.n	800d502 <vTCPStateChange+0xf2>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 800d4fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800d502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f043 0204 	orr.w	r2, r3, #4
 800d50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d50c:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 800d50e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	2b00      	cmp	r3, #0
 800d518:	d005      	beq.n	800d526 <vTCPStateChange+0x116>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 800d51a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d524:	601a      	str	r2, [r3, #0]
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 800d526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d528:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 800d52c:	f003 0308 	and.w	r3, r3, #8
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b00      	cmp	r3, #0
 800d534:	d101      	bne.n	800d53a <vTCPStateChange+0x12a>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 800d536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d538:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d548:	f023 0304 	bic.w	r3, r3, #4
 800d54c:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d556:	f043 0302 	orr.w	r3, r3, #2
 800d55a:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
 800d55e:	e024      	b.n	800d5aa <vTCPStateChange+0x19a>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f043 0208 	orr.w	r2, r3, #8
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d570:	f003 0302 	and.w	r3, r3, #2
 800d574:	2b00      	cmp	r3, #0
 800d576:	d018      	beq.n	800d5aa <vTCPStateChange+0x19a>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	601a      	str	r2, [r3, #0]
 800d584:	e011      	b.n	800d5aa <vTCPStateChange+0x19a>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 800d586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f043 0220 	orr.w	r2, r3, #32
 800d58e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d590:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800d592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d596:	f003 0304 	and.w	r3, r3, #4
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d005      	beq.n	800d5aa <vTCPStateChange+0x19a>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 800d59e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800d5a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5a8:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 800d5aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <vTCPStateChange+0x1a4>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 fdb7 	bl	800e12e <prvTCPSocketIsActive>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d103      	bne.n	800d5ce <vTCPStateChange+0x1be>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	78fa      	ldrb	r2, [r7, #3]
 800d5d2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        if( ( eTCPState == eCLOSED ) ||
 800d5d6:	78fb      	ldrb	r3, [r7, #3]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <vTCPStateChange+0x1d2>
 800d5dc:	78fb      	ldrb	r3, [r7, #3]
 800d5de:	2b08      	cmp	r3, #8
 800d5e0:	d161      	bne.n	800d6a6 <vTCPStateChange+0x296>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 800d5ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d108      	bne.n	800d604 <vTCPStateChange+0x1f4>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <vTCPStateChange+0x1f4>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d602:	657b      	str	r3, [r7, #84]	@ 0x54
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 800d604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <vTCPStateChange+0x20e>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 800d60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d101      	bne.n	800d61e <vTCPStateChange+0x20e>
            {
                xMustClear = pdTRUE;
 800d61a:	2301      	movs	r3, #1
 800d61c:	643b      	str	r3, [r7, #64]	@ 0x40
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 800d61e:	f007 fca7 	bl	8014f70 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d628:	f003 0304 	and.w	r3, r3, #4
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d107      	bne.n	800d642 <vTCPStateChange+0x232>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d638:	f003 0302 	and.w	r3, r3, #2
 800d63c:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d02f      	beq.n	800d6a2 <vTCPStateChange+0x292>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d648:	f003 0308 	and.w	r3, r3, #8
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d127      	bne.n	800d6a2 <vTCPStateChange+0x292>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7ff fea4 	bl	800d3a0 <vTCPRemoveTCPChild>
 800d658:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d660:	f023 0304 	bic.w	r3, r3, #4
 800d664:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800d66e:	f023 0302 	bic.w	r3, r3, #2
 800d672:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 800d676:	f7fc ffa4 	bl	800a5c2 <xIsCallingFromIPTask>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10d      	bne.n	800d69c <vTCPStateChange+0x28c>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d684:	b672      	cpsid	i
 800d686:	f383 8811 	msr	BASEPRI, r3
 800d68a:	f3bf 8f6f 	isb	sy
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	b662      	cpsie	i
 800d694:	637b      	str	r3, [r7, #52]	@ 0x34
}
 800d696:	bf00      	nop
 800d698:	bf00      	nop
 800d69a:	e7fd      	b.n	800d698 <vTCPStateChange+0x288>
                        vSocketCloseNextTime( pxSocket );
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff fdb1 	bl	800d204 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 800d6a2:	f007 fc73 	bl	8014f8c <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 800d6a6:	78fb      	ldrb	r3, [r7, #3]
 800d6a8:	2b08      	cmp	r3, #8
 800d6aa:	d115      	bne.n	800d6d8 <vTCPStateChange+0x2c8>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800d6b2:	f003 0308 	and.w	r3, r3, #8
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00d      	beq.n	800d6d8 <vTCPStateChange+0x2c8>
        {
            switch( xPreviousState )
 800d6bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d6c0:	3b03      	subs	r3, #3
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d807      	bhi.n	800d6d6 <vTCPStateChange+0x2c6>
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7ff fdb4 	bl	800d23c <vSocketListenNextTime>
                    break;
 800d6d4:	e000      	b.n	800d6d8 <vTCPStateChange+0x2c8>

                default:
                    /* Nothing to do. */
                    break;
 800d6d6:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fe3b 	bl	800d354 <prvTCPTouchSocket>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 800d6de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d005      	beq.n	800d6f0 <vTCPStateChange+0x2e0>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 800d6e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d6ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d6ec:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d6ee:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 800d6f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d002      	beq.n	800d6fc <vTCPStateChange+0x2ec>
        {
            vSocketWakeUpUser( xParent );
 800d6f6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d6f8:	f7fe fe22 	bl	800c340 <vSocketWakeUpUser>
        }
    }
 800d6fc:	bf00      	nop
 800d6fe:	3758      	adds	r7, #88	@ 0x58
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d70c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800d710:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d13d      	bne.n	800d798 <prvTCPNextTimeout+0x94>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800d722:	f003 0308 	and.w	r3, r3, #8
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d01a      	beq.n	800d762 <prvTCPNextTimeout+0x5e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d732:	2b02      	cmp	r3, #2
 800d734:	d811      	bhi.n	800d75a <prvTCPNextTimeout+0x56>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d102      	bne.n	800d746 <prvTCPNextTimeout+0x42>
                    {
                        ulDelayMs = 0U;
 800d740:	2300      	movs	r3, #0
 800d742:	60bb      	str	r3, [r7, #8]
 800d744:	e010      	b.n	800d768 <prvTCPNextTimeout+0x64>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800d74c:	3b01      	subs	r3, #1
 800d74e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800d752:	fa02 f303 	lsl.w	r3, r2, r3
 800d756:	60bb      	str	r3, [r7, #8]
 800d758:	e006      	b.n	800d768 <prvTCPNextTimeout+0x64>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 800d75a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 800d75e:	60bb      	str	r3, [r7, #8]
 800d760:	e002      	b.n	800d768 <prvTCPNextTimeout+0x64>
                }
            }
            else
            {
                /* Still in the Resolution phase: check every half second. */
                ulDelayMs = 500U;
 800d762:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d766:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d76e:	fb02 f303 	mul.w	r3, r2, r3
 800d772:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d776:	d30a      	bcc.n	800d78e <prvTCPNextTimeout+0x8a>
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d77e:	fb02 f303 	mul.w	r3, r2, r3
 800d782:	4a23      	ldr	r2, [pc, #140]	@ (800d810 <prvTCPNextTimeout+0x10c>)
 800d784:	fba2 2303 	umull	r2, r3, r2, r3
 800d788:	099b      	lsrs	r3, r3, #6
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	e000      	b.n	800d790 <prvTCPNextTimeout+0x8c>
 800d78e:	2201      	movs	r2, #1
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 800d796:	e033      	b.n	800d800 <prvTCPNextTimeout+0xfc>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d12e      	bne.n	800d800 <prvTCPNextTimeout+0xfc>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d7ae:	f107 0208 	add.w	r2, r7, #8
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f003 f8ad 	bl	8010912 <xTCPWindowTxHasData>
 800d7b8:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d108      	bne.n	800d7d2 <prvTCPNextTimeout+0xce>
            {
                if( xResult != ( BaseType_t ) 0 )
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <prvTCPNextTimeout+0xc8>
                {
                    ulDelayMs = 1U;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	60bb      	str	r3, [r7, #8]
 800d7ca:	e002      	b.n	800d7d2 <prvTCPNextTimeout+0xce>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 800d7cc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800d7d0:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d7d8:	fb02 f303 	mul.w	r3, r2, r3
 800d7dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d7e0:	d30a      	bcc.n	800d7f8 <prvTCPNextTimeout+0xf4>
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d7e8:	fb02 f303 	mul.w	r3, r2, r3
 800d7ec:	4a08      	ldr	r2, [pc, #32]	@ (800d810 <prvTCPNextTimeout+0x10c>)
 800d7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f2:	099b      	lsrs	r3, r3, #6
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	e000      	b.n	800d7fa <prvTCPNextTimeout+0xf6>
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
    }
 800d806:	4618      	mov	r0, r3
 800d808:	3710      	adds	r7, #16
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	10624dd3 	.word	0x10624dd3

0800d814 <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 800d814:	b4b0      	push	{r4, r5, r7}
 800d816:	b08b      	sub	sp, #44	@ 0x2c
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800d822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d824:	899b      	ldrh	r3, [r3, #12]
 800d826:	b29b      	uxth	r3, r3
 800d828:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d10e      	bne.n	800d84e <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	330e      	adds	r3, #14
 800d834:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 800d836:	2301      	movs	r3, #1
 800d838:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	3308      	adds	r3, #8
 800d83e:	f107 0408 	add.w	r4, r7, #8
 800d842:	6818      	ldr	r0, [r3, #0]
 800d844:	6859      	ldr	r1, [r3, #4]
 800d846:	689a      	ldr	r2, [r3, #8]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d84c:	e007      	b.n	800d85e <xGetSourceAddrFromBuffer+0x4a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	330e      	adds	r3, #14
 800d852:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 800d854:	2300      	movs	r3, #0
 800d856:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	461d      	mov	r5, r3
 800d862:	f107 0408 	add.w	r4, r7, #8
 800d866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d86a:	6823      	ldr	r3, [r4, #0]
 800d86c:	602b      	str	r3, [r5, #0]
    }
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	372c      	adds	r7, #44	@ 0x2c
 800d872:	46bd      	mov	sp, r7
 800d874:	bcb0      	pop	{r4, r5, r7}
 800d876:	4770      	bx	lr

0800d878 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 800d878:	b5b0      	push	{r4, r5, r7, lr}
 800d87a:	b09a      	sub	sp, #104	@ 0x68
 800d87c:	af04      	add	r7, sp, #16
 800d87e:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 800d880:	2301      	movs	r3, #1
 800d882:	657b      	str	r3, [r7, #84]	@ 0x54
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d10d      	bne.n	800d8a6 <xProcessReceivedTCPPacket+0x2e>
	__asm volatile
 800d88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88e:	b672      	cpsid	i
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	b662      	cpsie	i
 800d89e:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	e7fd      	b.n	800d8a2 <xProcessReceivedTCPPacket+0x2a>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10d      	bne.n	800d8ca <xProcessReceivedTCPPacket+0x52>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b2:	b672      	cpsid	i
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	b662      	cpsie	i
 800d8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8c4:	bf00      	nop
 800d8c6:	bf00      	nop
 800d8c8:	e7fd      	b.n	800d8c6 <xProcessReceivedTCPPacket+0x4e>

        pxNetworkBuffer = pxDescriptor;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	623b      	str	r3, [r7, #32]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 800d8ce:	6a3b      	ldr	r3, [r7, #32]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fc fb51 	bl	8009f78 <uxIPHeaderSizePacket>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	330e      	adds	r3, #14
 800d8da:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 800d8dc:	6a3b      	ldr	r3, [r7, #32]
 800d8de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8e2:	3314      	adds	r3, #20
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d202      	bcs.n	800d8ee <xProcessReceivedTCPPacket+0x76>
        {
            xResult = pdFAIL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8ec:	e14a      	b.n	800db84 <xProcessReceivedTCPPacket+0x30c>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 800d8f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8f4:	4413      	add	r3, r2
 800d8f6:	64bb      	str	r3, [r7, #72]	@ 0x48

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800d8f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8fa:	7b5b      	ldrb	r3, [r3, #13]
 800d8fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 800d900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d902:	789a      	ldrb	r2, [r3, #2]
 800d904:	78db      	ldrb	r3, [r3, #3]
 800d906:	021b      	lsls	r3, r3, #8
 800d908:	4313      	orrs	r3, r2
 800d90a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 800d90e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d910:	781a      	ldrb	r2, [r3, #0]
 800d912:	785b      	ldrb	r3, [r3, #1]
 800d914:	021b      	lsls	r3, r3, #8
 800d916:	4313      	orrs	r3, r2
 800d918:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d920:	f107 030c 	add.w	r3, r7, #12
 800d924:	4611      	mov	r1, r2
 800d926:	4618      	mov	r0, r3
 800d928:	f7ff ff74 	bl	800d814 <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 800d92c:	f8b7 5044 	ldrh.w	r5, [r7, #68]	@ 0x44
 800d930:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d934:	9303      	str	r3, [sp, #12]
 800d936:	466c      	mov	r4, sp
 800d938:	f107 0314 	add.w	r3, r7, #20
 800d93c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d944:	f107 030c 	add.w	r3, r7, #12
 800d948:	cb0c      	ldmia	r3, {r2, r3}
 800d94a:	4629      	mov	r1, r5
 800d94c:	2000      	movs	r0, #0
 800d94e:	f7fe fe2d 	bl	800c5ac <pxTCPSocketLookup>
 800d952:	6538      	str	r0, [r7, #80]	@ 0x50

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 800d954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d956:	2b00      	cmp	r3, #0
 800d958:	d008      	beq.n	800d96c <xProcessReceivedTCPPacket+0xf4>
 800d95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d95c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d960:	4618      	mov	r0, r3
 800d962:	f000 fbe4 	bl	800e12e <prvTCPSocketIsActive>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d112      	bne.n	800d992 <xProcessReceivedTCPPacket+0x11a>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800d96c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d970:	f003 031f 	and.w	r3, r3, #31
 800d974:	2b10      	cmp	r3, #16
 800d976:	d009      	beq.n	800d98c <xProcessReceivedTCPPacket+0x114>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 800d978:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d97c:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 800d980:	2b00      	cmp	r3, #0
 800d982:	d103      	bne.n	800d98c <xProcessReceivedTCPPacket+0x114>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	4618      	mov	r0, r3
 800d988:	f001 ff7a 	bl	800f880 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 800d98c:	2300      	movs	r3, #0
 800d98e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d990:	e09c      	b.n	800dacc <xProcessReceivedTCPPacket+0x254>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 800d992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d994:	2200      	movs	r2, #0
 800d996:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800d99a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d99c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d11e      	bne.n	800d9e2 <xProcessReceivedTCPPacket+0x16a>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 800d9a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d9a8:	f003 031f 	and.w	r3, r3, #31
 800d9ac:	2b02      	cmp	r3, #2
 800d9ae:	d00c      	beq.n	800d9ca <xProcessReceivedTCPPacket+0x152>
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 800d9b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d9b4:	f003 0304 	and.w	r3, r3, #4
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d103      	bne.n	800d9c4 <xProcessReceivedTCPPacket+0x14c>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f001 ff5e 	bl	800f880 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d9c8:	e080      	b.n	800dacc <xProcessReceivedTCPPacket+0x254>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 800d9ca:	6a3b      	ldr	r3, [r7, #32]
 800d9cc:	4619      	mov	r1, r3
 800d9ce:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d9d0:	f000 ffd2 	bl	800e978 <prvHandleListen>
 800d9d4:	6538      	str	r0, [r7, #80]	@ 0x50

                        if( pxSocket == NULL )
 800d9d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d177      	bne.n	800dacc <xProcessReceivedTCPPacket+0x254>
                        {
                            xResult = pdFAIL;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	657b      	str	r3, [r7, #84]	@ 0x54
 800d9e0:	e074      	b.n	800dacc <xProcessReceivedTCPPacket+0x254>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 800d9e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d9e6:	f003 0304 	and.w	r3, r3, #4
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d046      	beq.n	800da7c <xProcessReceivedTCPPacket+0x204>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800d9ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9f0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d10e      	bne.n	800da16 <xProcessReceivedTCPPacket+0x19e>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800d9f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	637b      	str	r3, [r7, #52]	@ 0x34

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 800d9fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da00:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800da04:	3301      	adds	r3, #1
 800da06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da08:	429a      	cmp	r2, r3
 800da0a:	d134      	bne.n	800da76 <xProcessReceivedTCPPacket+0x1fe>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800da0c:	2100      	movs	r1, #0
 800da0e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800da10:	f7ff fcfe 	bl	800d410 <vTCPStateChange>
 800da14:	e02f      	b.n	800da76 <xProcessReceivedTCPPacket+0x1fe>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800da16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	63bb      	str	r3, [r7, #56]	@ 0x38

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 800da1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da1e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800da22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da24:	429a      	cmp	r2, r3
 800da26:	d104      	bne.n	800da32 <xProcessReceivedTCPPacket+0x1ba>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 800da28:	2100      	movs	r1, #0
 800da2a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800da2c:	f7ff fcf0 	bl	800d410 <vTCPStateChange>
 800da30:	e021      	b.n	800da76 <xProcessReceivedTCPPacket+0x1fe>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 800da32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da34:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800da38:	4619      	mov	r1, r3
 800da3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800da3c:	f002 fa11 	bl	800fe62 <xSequenceGreaterThan>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d017      	beq.n	800da76 <xProcessReceivedTCPPacket+0x1fe>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800da46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da48:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 800da4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da4e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 800da52:	4413      	add	r3, r2
 800da54:	4619      	mov	r1, r3
 800da56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800da58:	f002 f9ed 	bl	800fe36 <xSequenceLessThan>
 800da5c:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d009      	beq.n	800da76 <xProcessReceivedTCPPacket+0x1fe>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
 800da62:	6a38      	ldr	r0, [r7, #32]
 800da64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da66:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800da6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da6c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800da70:	461a      	mov	r2, r3
 800da72:	f001 fee7 	bl	800f844 <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 800da76:	2300      	movs	r3, #0
 800da78:	657b      	str	r3, [r7, #84]	@ 0x54
 800da7a:	e027      	b.n	800dacc <xProcessReceivedTCPPacket+0x254>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 800da7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800da80:	f003 031f 	and.w	r3, r3, #31
 800da84:	2b02      	cmp	r3, #2
 800da86:	d107      	bne.n	800da98 <xProcessReceivedTCPPacket+0x220>
 800da88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da8a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800da8e:	2b04      	cmp	r3, #4
 800da90:	d902      	bls.n	800da98 <xProcessReceivedTCPPacket+0x220>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 800da92:	2300      	movs	r3, #0
 800da94:	657b      	str	r3, [r7, #84]	@ 0x54
 800da96:	e019      	b.n	800dacc <xProcessReceivedTCPPacket+0x254>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 800da98:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800da9a:	f7fc fa87 	bl	8009fac <uxIPHeaderSizeSocket>
 800da9e:	4603      	mov	r3, r0
 800daa0:	330e      	adds	r3, #14
 800daa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 800daa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daa6:	33a8      	adds	r3, #168	@ 0xa8
 800daa8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800daaa:	4413      	add	r3, r2
 800daac:	1d98      	adds	r0, r3, #6
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dab4:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 800dab6:	2214      	movs	r2, #20
 800dab8:	4619      	mov	r1, r3
 800daba:	f009 fe76 	bl	80177aa <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 800dabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dac0:	330d      	adds	r3, #13
 800dac2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dac4:	4413      	add	r3, r2
 800dac6:	2210      	movs	r2, #16
 800dac8:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
                    }
                }
            }

            if( xResult != pdFAIL )
 800dacc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d058      	beq.n	800db84 <xProcessReceivedTCPPacket+0x30c>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 800dad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10d      	bne.n	800daf4 <xProcessReceivedTCPPacket+0x27c>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dadc:	b672      	cpsid	i
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	b662      	cpsie	i
 800daec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800daee:	bf00      	nop
 800daf0:	bf00      	nop
 800daf2:	e7fd      	b.n	800daf0 <xProcessReceivedTCPPacket+0x278>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 800daf4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800daf6:	f7ff fc2d 	bl	800d354 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 800dafa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dafc:	7b1b      	ldrb	r3, [r3, #12]
 800dafe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db02:	2b50      	cmp	r3, #80	@ 0x50
 800db04:	d905      	bls.n	800db12 <xProcessReceivedTCPPacket+0x29a>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	4619      	mov	r1, r3
 800db0a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800db0c:	f000 f87e 	bl	800dc0c <prvCheckOptions>
 800db10:	6578      	str	r0, [r7, #84]	@ 0x54
                }

                if( xResult != pdFAIL )
 800db12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db14:	2b00      	cmp	r3, #0
 800db16:	d035      	beq.n	800db84 <xProcessReceivedTCPPacket+0x30c>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800db18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db1a:	7b9a      	ldrb	r2, [r3, #14]
 800db1c:	7bdb      	ldrb	r3, [r3, #15]
 800db1e:	021b      	lsls	r3, r3, #8
 800db20:	4313      	orrs	r3, r2
 800db22:	867b      	strh	r3, [r7, #50]	@ 0x32
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800db24:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800db26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db28:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 800db2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800db30:	f003 0302 	and.w	r3, r3, #2
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10a      	bne.n	800db4e <xProcessReceivedTCPPacket+0x2d6>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800db38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db3a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800db3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db40:	f892 210a 	ldrb.w	r2, [r2, #266]	@ 0x10a
 800db44:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 800db48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db4a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 800db4e:	f107 0320 	add.w	r3, r7, #32
 800db52:	4619      	mov	r1, r3
 800db54:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800db56:	f000 fdf7 	bl	800e748 <prvTCPHandleState>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	dd05      	ble.n	800db6c <xProcessReceivedTCPPacket+0x2f4>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800db60:	f107 0320 	add.w	r3, r7, #32
 800db64:	4619      	mov	r1, r3
 800db66:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800db68:	f001 f905 	bl	800ed76 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 800db6c:	6a3b      	ldr	r3, [r7, #32]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d005      	beq.n	800db7e <xProcessReceivedTCPPacket+0x306>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	4618      	mov	r0, r3
 800db76:	f003 fd07 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 800db7a:	2300      	movs	r3, #0
 800db7c:	623b      	str	r3, [r7, #32]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 800db7e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800db80:	f7ff fdc0 	bl	800d704 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 800db84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    }
 800db86:	4618      	mov	r0, r3
 800db88:	3758      	adds	r7, #88	@ 0x58
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800db90 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 800db90:	b480      	push	{r7}
 800db92:	b089      	sub	sp, #36	@ 0x24
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800db9c:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 800db9e:	2300      	movs	r3, #0
 800dba0:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800dba2:	4b18      	ldr	r3, [pc, #96]	@ (800dc04 <xTCPCheckNewClient+0x74>)
 800dba4:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800dba6:	4b18      	ldr	r3, [pc, #96]	@ (800dc08 <xTCPCheckNewClient+0x78>)
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	61fb      	str	r3, [r7, #28]
 800dbac:	e01e      	b.n	800dbec <xTCPCheckNewClient+0x5c>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d116      	bne.n	800dbe6 <xTCPCheckNewClient+0x56>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dbc4:	2b06      	cmp	r3, #6
 800dbc6:	d10e      	bne.n	800dbe6 <xTCPCheckNewClient+0x56>
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800dbce:	f003 0302 	and.w	r3, r3, #2
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d006      	beq.n	800dbe6 <xTCPCheckNewClient+0x56>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
                    xResult = pdTRUE;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	61bb      	str	r3, [r7, #24]
                    break;
 800dbe4:	e006      	b.n	800dbf4 <xTCPCheckNewClient+0x64>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 800dbec:	69fa      	ldr	r2, [r7, #28]
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d1dc      	bne.n	800dbae <xTCPCheckNewClient+0x1e>
                }
            }
        }

        return xResult;
 800dbf4:	69bb      	ldr	r3, [r7, #24]
    }
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3724      	adds	r7, #36	@ 0x24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	20002628 	.word	0x20002628
 800dc08:	20002620 	.word	0x20002620

0800dc0c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08c      	sub	sp, #48	@ 0x30
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 800dc16:	6838      	ldr	r0, [r7, #0]
 800dc18:	f7fc f9ae 	bl	8009f78 <uxIPHeaderSizePacket>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	330e      	adds	r3, #14
 800dc20:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	4413      	add	r3, r2
 800dc2a:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	3314      	adds	r3, #20
 800dc34:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	3314      	adds	r3, #20
 800dc3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	7b1b      	ldrb	r3, [r3, #12]
 800dc44:	2b50      	cmp	r3, #80	@ 0x50
 800dc46:	d93f      	bls.n	800dcc8 <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	7b1b      	ldrb	r3, [r3, #12]
 800dc4c:	091b      	lsrs	r3, r3, #4
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	3b05      	subs	r3, #5
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
 800dc5a:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc60:	697a      	ldr	r2, [r7, #20]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d230      	bcs.n	800dcc8 <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	6a3a      	ldr	r2, [r7, #32]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d829      	bhi.n	800dcc8 <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	7b5b      	ldrb	r3, [r3, #13]
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 800dc80:	2301      	movs	r3, #1
 800dc82:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc84:	e001      	b.n	800dc8a <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 800dc86:	2300      	movs	r3, #0
 800dc88:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d018      	beq.n	800dcc2 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 800dc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	6a39      	ldr	r1, [r7, #32]
 800dc96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc98:	f000 f81b 	bl	800dcd2 <prvSingleStepTCPHeaderOptions>
 800dc9c:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	da02      	bge.n	800dcaa <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 800dca4:	2300      	movs	r3, #0
 800dca6:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 800dca8:	e00e      	b.n	800dcc8 <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d00a      	beq.n	800dcc6 <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	6a3a      	ldr	r2, [r7, #32]
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcbc:	4413      	add	r3, r2
 800dcbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 800dcc0:	e7e3      	b.n	800dc8a <prvCheckOptions+0x7e>
                            break;
 800dcc2:	bf00      	nop
 800dcc4:	e000      	b.n	800dcc8 <prvCheckOptions+0xbc>
                            break;
 800dcc6:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800dcca:	4618      	mov	r0, r3
 800dccc:	3730      	adds	r7, #48	@ 0x30
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b08a      	sub	sp, #40	@ 0x28
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	60f8      	str	r0, [r7, #12]
 800dcda:	60b9      	str	r1, [r7, #8]
 800dcdc:	607a      	str	r2, [r7, #4]
 800dcde:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800dcee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d102      	bne.n	800dd02 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	61fb      	str	r3, [r7, #28]
 800dd00:	e0cc      	b.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d102      	bne.n	800dd10 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	61fb      	str	r3, [r7, #28]
 800dd0e:	e0c5      	b.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else if( uxRemainingOptionsBytes < 2U )
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d803      	bhi.n	800dd1e <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 800dd16:	f04f 33ff 	mov.w	r3, #4294967295
 800dd1a:	61fb      	str	r3, [r7, #28]
 800dd1c:	e0be      	b.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	2b03      	cmp	r3, #3
 800dd24:	d128      	bne.n	800dd78 <prvSingleStepTCPHeaderOptions+0xa6>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d904      	bls.n	800dd36 <prvSingleStepTCPHeaderOptions+0x64>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d003      	beq.n	800dd3e <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 800dd36:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3a:	61fb      	str	r3, [r7, #28]
 800dd3c:	e0ae      	b.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d016      	beq.n	800dd72 <prvSingleStepTCPHeaderOptions+0xa0>
                    {
                        /* From RFC7323 - section 2.3, we should limit the WSopt not larger than 14. */
                        if( pucPtr[ 2 ] > tcpTCP_OPT_WSOPT_MAXIMUM_VALUE )
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3302      	adds	r3, #2
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b0e      	cmp	r3, #14
 800dd4c:	d904      	bls.n	800dd58 <prvSingleStepTCPHeaderOptions+0x86>
                        {
                            FreeRTOS_debug_printf( ( "The WSopt(%u) from SYN packet is larger than maximum value.", pucPtr[ 2 ] ) );
                            pxSocket->u.xTCP.ucPeerWinScaleFactor = tcpTCP_OPT_WSOPT_MAXIMUM_VALUE;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	220e      	movs	r2, #14
 800dd52:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
 800dd56:	e005      	b.n	800dd64 <prvSingleStepTCPHeaderOptions+0x92>
                        }
                        else
                        {
                            pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3302      	adds	r3, #2
 800dd5c:	781a      	ldrb	r2, [r3, #0]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
                        }

                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800dd6a:	f043 0310 	orr.w	r3, r3, #16
 800dd6e:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 800dd72:	2303      	movs	r3, #3
 800dd74:	61fb      	str	r3, [r7, #28]
 800dd76:	e091      	b.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b02      	cmp	r3, #2
 800dd7e:	d155      	bne.n	800de2c <prvSingleStepTCPHeaderOptions+0x15a>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	2b03      	cmp	r3, #3
 800dd84:	d904      	bls.n	800dd90 <prvSingleStepTCPHeaderOptions+0xbe>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	2b04      	cmp	r3, #4
 800dd8e:	d003      	beq.n	800dd98 <prvSingleStepTCPHeaderOptions+0xc6>
            {
                lIndex = -1;
 800dd90:	f04f 33ff 	mov.w	r3, #4294967295
 800dd94:	61fb      	str	r3, [r7, #28]
 800dd96:	e081      	b.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	3302      	adds	r3, #2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fc fe84 	bl	800aaaa <usChar2u16>
 800dda2:	4603      	mov	r3, r0
 800dda4:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800ddac:	461a      	mov	r2, r3
 800ddae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d007      	beq.n	800ddc4 <prvSingleStepTCPHeaderOptions+0xf2>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d104      	bne.n	800ddc4 <prvSingleStepTCPHeaderOptions+0xf2>
                    {
                        lIndex = -1;
 800ddba:	f04f 33ff 	mov.w	r3, #4294967295
 800ddbe:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	61bb      	str	r3, [r7, #24]
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d168      	bne.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 800ddca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddcc:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ddd0:	d202      	bcs.n	800ddd8 <prvSingleStepTCPHeaderOptions+0x106>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 800ddd2:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800ddd6:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800ddde:	461a      	mov	r2, r3
 800dde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d21f      	bcs.n	800de26 <prvSingleStepTCPHeaderOptions+0x154>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800ddec:	f043 0301 	orr.w	r3, r3, #1
 800ddf0:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de00:	fb03 f202 	mul.w	r2, r3, r2
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 800de08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 800de12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de14:	b29a      	uxth	r2, r3
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1e:	b29a      	uxth	r2, r3
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 800de26:	2304      	movs	r3, #4
 800de28:	61fb      	str	r3, [r7, #28]
 800de2a:	e037      	b.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	3301      	adds	r3, #1
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 800de3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d904      	bls.n	800de4c <prvSingleStepTCPHeaderOptions+0x17a>
 800de42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800de46:	697a      	ldr	r2, [r7, #20]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d203      	bcs.n	800de54 <prvSingleStepTCPHeaderOptions+0x182>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 800de4c:	f04f 33ff 	mov.w	r3, #4294967295
 800de50:	61fb      	str	r3, [r7, #28]
 800de52:	e023      	b.n	800de9c <prvSingleStepTCPHeaderOptions+0x1ca>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b05      	cmp	r3, #5
 800de5a:	d11a      	bne.n	800de92 <prvSingleStepTCPHeaderOptions+0x1c0>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 800de5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800de60:	3b02      	subs	r3, #2
 800de62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	3302      	adds	r3, #2
 800de6a:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 800de6c:	e00d      	b.n	800de8a <prvSingleStepTCPHeaderOptions+0x1b8>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	4619      	mov	r1, r3
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f000 f816 	bl	800dea6 <prvReadSackOption>
                            lIndex += 8;
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	3308      	adds	r3, #8
 800de7e:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 800de80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800de84:	3b08      	subs	r3, #8
 800de86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 800de8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800de8e:	2b07      	cmp	r3, #7
 800de90:	d8ed      	bhi.n	800de6e <prvSingleStepTCPHeaderOptions+0x19c>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 800de92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800de96:	69fa      	ldr	r2, [r7, #28]
 800de98:	4413      	add	r3, r2
 800de9a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 800de9c:	69fb      	ldr	r3, [r7, #28]
    }
 800de9e:	4618      	mov	r0, r3
 800dea0:	3728      	adds	r7, #40	@ 0x28
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 800dea6:	b580      	push	{r7, lr}
 800dea8:	b08a      	sub	sp, #40	@ 0x28
 800deaa:	af02      	add	r7, sp, #8
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	60b9      	str	r1, [r7, #8]
 800deb0:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	4413      	add	r3, r2
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fc fddb 	bl	800aa74 <ulChar2u32>
 800debe:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	3304      	adds	r3, #4
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	4413      	add	r3, r2
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fc fdd3 	bl	800aa74 <ulChar2u32>
 800dece:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ded6:	69ba      	ldr	r2, [r7, #24]
 800ded8:	69f9      	ldr	r1, [r7, #28]
 800deda:	4618      	mov	r0, r3
 800dedc:	f002 ffb2 	bl	8010e44 <ulTCPWindowTxSack>
 800dee0:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d024      	beq.n	800df36 <prvReadSackOption+0x90>
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d021      	beq.n	800df36 <prvReadSackOption+0x90>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800def8:	2300      	movs	r3, #0
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	2200      	movs	r2, #0
 800df00:	2100      	movs	r1, #0
 800df02:	f7ff f90c 	bl	800d11e <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f043 0202 	orr.w	r2, r3, #2
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df16:	f003 0302 	and.w	r3, r3, #2
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d005      	beq.n	800df2a <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	601a      	str	r2, [r3, #0]
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800df30:	6979      	ldr	r1, [r7, #20]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 800df36:	bf00      	nop
 800df38:	3720      	adds	r7, #32
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 800df3e:	b590      	push	{r4, r7, lr}
 800df40:	b08d      	sub	sp, #52	@ 0x34
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7fc f813 	bl	8009f78 <uxIPHeaderSizePacket>
 800df52:	4603      	mov	r3, r0
 800df54:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800df56:	4423      	add	r3, r4
 800df58:	627b      	str	r3, [r7, #36]	@ 0x24
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800df5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df5c:	623b      	str	r3, [r7, #32]
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f7fc f80a 	bl	8009f78 <uxIPHeaderSizePacket>
 800df64:	61f8      	str	r0, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	7b1b      	ldrb	r3, [r3, #12]
 800df6e:	089b      	lsrs	r3, r3, #2
 800df70:	b2db      	uxtb	r3, r3
 800df72:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800df76:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 800df78:	7efb      	ldrb	r3, [r7, #27]
 800df7a:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df80:	6979      	ldr	r1, [r7, #20]
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	440b      	add	r3, r1
 800df86:	330e      	adds	r3, #14
 800df88:	441a      	add	r2, r3
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df92:	62bb      	str	r3, [r7, #40]	@ 0x28
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 800df94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df96:	3b0e      	subs	r3, #14
 800df98:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df9e:	899b      	ldrh	r3, [r3, #12]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dfa6:	d10c      	bne.n	800dfc2 <prvCheckRxData+0x84>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfac:	330e      	adds	r3, #14
 800dfae:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	789a      	ldrb	r2, [r3, #2]
 800dfb4:	78db      	ldrb	r3, [r3, #3]
 800dfb6:	021b      	lsls	r3, r3, #8
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	81fb      	strh	r3, [r7, #14]
                       lLength = ( int32_t ) usLength;
 800dfbc:	89fb      	ldrh	r3, [r7, #14]
 800dfbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   }
                   break;
 800dfc0:	e002      	b.n	800dfc8 <prvCheckRxData+0x8a>
                   break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800dfc6:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 800dfc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	dd01      	ble.n	800dfd4 <prvCheckRxData+0x96>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 800dfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd2:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 800dfd4:	69fa      	ldr	r2, [r7, #28]
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	4413      	add	r3, r2
 800dfda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	dd06      	ble.n	800dfee <prvCheckRxData+0xb0>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 800dfe0:	69fa      	ldr	r2, [r7, #28]
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dfec:	e001      	b.n	800dff2 <prvCheckRxData+0xb4>
        }
        else
        {
            lReceiveLength = 0;
 800dfee:	2300      	movs	r3, #0
 800dff0:	62bb      	str	r3, [r7, #40]	@ 0x28
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 800dff2:	6a3b      	ldr	r3, [r7, #32]
 800dff4:	7b5b      	ldrb	r3, [r3, #13]
 800dff6:	f003 0320 	and.w	r3, r3, #32
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d011      	beq.n	800e022 <prvCheckRxData+0xe4>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 800dffe:	6a3b      	ldr	r3, [r7, #32]
 800e000:	8a5b      	ldrh	r3, [r3, #18]
 800e002:	b29b      	uxth	r3, r3
 800e004:	60bb      	str	r3, [r7, #8]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	441a      	add	r2, r3
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 800e012:	68b9      	ldr	r1, [r7, #8]
 800e014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e016:	f7fc fc4f 	bl	800a8b8 <FreeRTOS_min_int32>
 800e01a:	4602      	mov	r2, r0
 800e01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e01e:	1a9b      	subs	r3, r3, r2
 800e020:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        return ( BaseType_t ) lReceiveLength;
 800e022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800e024:	4618      	mov	r0, r3
 800e026:	3734      	adds	r7, #52	@ 0x34
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd90      	pop	{r4, r7, pc}

0800e02c <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b092      	sub	sp, #72	@ 0x48
 800e030:	af02      	add	r7, sp, #8
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	607a      	str	r2, [r7, #4]
 800e038:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7fb ff9c 	bl	8009f78 <uxIPHeaderSizePacket>
 800e040:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e048:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 800e04a:	4413      	add	r3, r2
 800e04c:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800e04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e050:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e058:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 800e05a:	2300      	movs	r3, #0
 800e05c:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 800e06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d052      	beq.n	800e118 <prvStoreRxData+0xec>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e078:	2b03      	cmp	r3, #3
 800e07a:	d94d      	bls.n	800e118 <prvStoreRxData+0xec>
        {
            uint32_t ulSkipCount = 0;
 800e07c:	2300      	movs	r3, #0
 800e07e:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d007      	beq.n	800e09a <prvStoreRxData+0x6e>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e090:	4618      	mov	r0, r3
 800e092:	f7fe ff04 	bl	800ce9e <uxStreamBufferGetSpace>
 800e096:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e098:	e003      	b.n	800e0a2 <prvStoreRxData+0x76>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 800e0a2:	f107 0310 	add.w	r3, r7, #16
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0ac:	69f9      	ldr	r1, [r7, #28]
 800e0ae:	6a38      	ldr	r0, [r7, #32]
 800e0b0:	f002 faa8 	bl	8010604 <lTCPWindowRxCheck>
 800e0b4:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 800e0b6:	69bb      	ldr	r3, [r7, #24]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	db1b      	blt.n	800e0f4 <prvStoreRxData+0xc8>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d007      	beq.n	800e0d2 <prvStoreRxData+0xa6>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0c6:	1ad3      	subs	r3, r2, r3
 800e0c8:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 800e0d2:	69b9      	ldr	r1, [r7, #24]
 800e0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d8:	68f8      	ldr	r0, [r7, #12]
 800e0da:	f7fe fbc6 	bl	800c86a <lTCPAddRxdata>
 800e0de:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 800e0e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0e2:	697a      	ldr	r2, [r7, #20]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d005      	beq.n	800e0f4 <prvStoreRxData+0xc8>
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f001 fbc9 	bl	800f880 <prvTCPSendReset>
                    xResult = -1;
 800e0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d113      	bne.n	800e122 <prvStoreRxData+0xf6>
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00f      	beq.n	800e122 <prvStoreRxData+0xf6>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 800e102:	6a3b      	ldr	r3, [r7, #32]
 800e104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e106:	2200      	movs	r2, #0
 800e108:	2100      	movs	r1, #0
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7fe fbad 	bl	800c86a <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 800e110:	6a3b      	ldr	r3, [r7, #32]
 800e112:	2200      	movs	r2, #0
 800e114:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 800e116:	e004      	b.n	800e122 <prvStoreRxData+0xf6>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 800e118:	6a3b      	ldr	r3, [r7, #32]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800e120:	e000      	b.n	800e124 <prvStoreRxData+0xf8>
        {
 800e122:	bf00      	nop
        }

        return xResult;
 800e124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 800e126:	4618      	mov	r0, r3
 800e128:	3740      	adds	r7, #64	@ 0x40
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 800e12e:	b480      	push	{r7}
 800e130:	b085      	sub	sp, #20
 800e132:	af00      	add	r7, sp, #0
 800e134:	4603      	mov	r3, r0
 800e136:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 800e138:	79fb      	ldrb	r3, [r7, #7]
 800e13a:	2b0b      	cmp	r3, #11
 800e13c:	bf8c      	ite	hi
 800e13e:	2201      	movhi	r2, #1
 800e140:	2200      	movls	r2, #0
 800e142:	b2d2      	uxtb	r2, r2
 800e144:	2a00      	cmp	r2, #0
 800e146:	d10f      	bne.n	800e168 <prvTCPSocketIsActive+0x3a>
 800e148:	f640 3281 	movw	r2, #2945	@ 0xb81
 800e14c:	fa22 f303 	lsr.w	r3, r2, r3
 800e150:	f003 0301 	and.w	r3, r3, #1
 800e154:	2b00      	cmp	r3, #0
 800e156:	bf14      	ite	ne
 800e158:	2301      	movne	r3, #1
 800e15a:	2300      	moveq	r3, #0
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d002      	beq.n	800e168 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
                break;
 800e166:	e002      	b.n	800e16e <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800e168:	2301      	movs	r3, #1
 800e16a:	60fb      	str	r3, [r7, #12]
                break;
 800e16c:	bf00      	nop
        }

        return xResult;
 800e16e:	68fb      	ldr	r3, [r7, #12]
    }
 800e170:	4618      	mov	r0, r3
 800e172:	3714      	adds	r7, #20
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e18a:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800e18c:	7cfb      	ldrb	r3, [r7, #19]
 800e18e:	2b08      	cmp	r3, #8
 800e190:	d00b      	beq.n	800e1aa <prvTCPStatusAgeCheck+0x2e>
 800e192:	2b08      	cmp	r3, #8
 800e194:	dc0c      	bgt.n	800e1b0 <prvTCPStatusAgeCheck+0x34>
 800e196:	2b01      	cmp	r3, #1
 800e198:	dc02      	bgt.n	800e1a0 <prvTCPStatusAgeCheck+0x24>
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	da05      	bge.n	800e1aa <prvTCPStatusAgeCheck+0x2e>
 800e19e:	e007      	b.n	800e1b0 <prvTCPStatusAgeCheck+0x34>
 800e1a0:	2b05      	cmp	r3, #5
 800e1a2:	d105      	bne.n	800e1b0 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	617b      	str	r3, [r7, #20]
                    break;
 800e1a8:	e005      	b.n	800e1b6 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	617b      	str	r3, [r7, #20]
                    break;
 800e1ae:	e002      	b.n	800e1b6 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	617b      	str	r3, [r7, #20]
                    break;
 800e1b4:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800e1b6:	697b      	ldr	r3, [r7, #20]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d01b      	beq.n	800e1f4 <prvTCPStatusAgeCheck+0x78>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800e1bc:	f006 ff86 	bl	80150cc <xTaskGetTickCount>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e1c8:	1ad3      	subs	r3, r2, r3
 800e1ca:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d90e      	bls.n	800e1f4 <prvTCPStatusAgeCheck+0x78>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e1d6:	2108      	movs	r1, #8
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7ff f919 	bl	800d410 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800e1e4:	f003 0304 	and.w	r3, r3, #4
 800e1e8:	b2db      	uxtb	r3, r3
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d002      	beq.n	800e1f4 <prvTCPStatusAgeCheck+0x78>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 800e1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f2:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800e1f4:	697b      	ldr	r3, [r7, #20]
        }
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3718      	adds	r7, #24
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e1fe:	b590      	push	{r4, r7, lr}
 800e200:	b089      	sub	sp, #36	@ 0x24
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
 800e206:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e20c:	6838      	ldr	r0, [r7, #0]
 800e20e:	f7fb feb3 	bl	8009f78 <uxIPHeaderSizePacket>
 800e212:	4603      	mov	r3, r0
 800e214:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800e216:	4423      	add	r3, r4
 800e218:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e21e:	2300      	movs	r3, #0
 800e220:	74fb      	strb	r3, [r7, #19]
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	7b5b      	ldrb	r3, [r3, #13]
 800e226:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e22e:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 800e230:	2300      	movs	r3, #0
 800e232:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 800e23a:	7cbb      	ldrb	r3, [r7, #18]
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	2b00      	cmp	r3, #0
 800e242:	d004      	beq.n	800e24e <prvTCPHandleFin+0x50>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	695b      	ldr	r3, [r3, #20]
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d10b      	bne.n	800e276 <prvTCPHandleFin+0x78>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6a1a      	ldr	r2, [r3, #32]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e26c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e270:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
 800e274:	e00c      	b.n	800e290 <prvTCPHandleFin+0x92>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e27a:	3301      	adds	r3, #1
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d106      	bne.n	800e290 <prvTCPHandleFin+0x92>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800e288:	f043 0301 	orr.w	r3, r3, #1
 800e28c:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800e296:	f003 0301 	and.w	r3, r3, #1
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10b      	bne.n	800e2b8 <prvTCPHandleFin+0xba>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	2211      	movs	r2, #17
 800e2ac:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 800e2ae:	210a      	movs	r1, #10
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f7ff f8ad 	bl	800d410 <vTCPStateChange>
 800e2b6:	e023      	b.n	800e300 <prvTCPHandleFin+0x102>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2bc:	1c5a      	adds	r2, r3, #1
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e2c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d103      	bne.n	800e2da <prvTCPHandleFin+0xdc>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	735a      	strb	r2, [r3, #13]
 800e2d8:	e012      	b.n	800e300 <prvTCPHandleFin+0x102>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800e2e0:	f003 0302 	and.w	r3, r3, #2
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d103      	bne.n	800e2f2 <prvTCPHandleFin+0xf4>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2210      	movs	r2, #16
 800e2ee:	735a      	strb	r2, [r3, #13]
 800e2f0:	e002      	b.n	800e2f8 <prvTCPHandleFin+0xfa>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e2f8:	2108      	movs	r1, #8
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff f888 	bl	800d410 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6a1a      	ldr	r2, [r3, #32]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	7b5b      	ldrb	r3, [r3, #13]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00d      	beq.n	800e32c <prvTCPHandleFin+0x12e>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7fb fe4b 	bl	8009fac <uxIPHeaderSizeSocket>
 800e316:	4603      	mov	r3, r0
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e320:	4413      	add	r3, r2
 800e322:	b2db      	uxtb	r3, r3
 800e324:	3314      	adds	r3, #20
 800e326:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 800e328:	7cfb      	ldrb	r3, [r7, #19]
 800e32a:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e332:	3314      	adds	r3, #20
 800e334:	b2db      	uxtb	r3, r3
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	731a      	strb	r2, [r3, #12]
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 800e33e:	69fb      	ldr	r3, [r7, #28]
    }
 800e340:	4618      	mov	r0, r3
 800e342:	3724      	adds	r7, #36	@ 0x24
 800e344:	46bd      	mov	sp, r7
 800e346:	bd90      	pop	{r4, r7, pc}

0800e348 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800e348:	b590      	push	{r4, r7, lr}
 800e34a:	b099      	sub	sp, #100	@ 0x64
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
 800e354:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f7fb fe26 	bl	8009fac <uxIPHeaderSizeSocket>
 800e360:	4603      	mov	r3, r0
 800e362:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800e364:	4423      	add	r3, r4
 800e366:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800e368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e36a:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e372:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e376:	7b5b      	ldrb	r3, [r3, #13]
 800e378:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e37c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 800e386:	2300      	movs	r3, #0
 800e388:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 800e38a:	2310      	movs	r3, #16
 800e38c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 800e390:	2317      	movs	r3, #23
 800e392:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d105      	bne.n	800e3ac <prvHandleSynReceived+0x64>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 800e3a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800e3a4:	f043 0302 	orr.w	r3, r3, #2
 800e3a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 800e3ac:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800e3b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e3b4:	4013      	ands	r3, r2
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d024      	beq.n	800e40a <prvHandleSynReceived+0xc2>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800e3c0:	2108      	movs	r1, #8
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f7ff f824 	bl	800d410 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 800e3c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3ca:	689a      	ldr	r2, [r3, #8]
 800e3cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3ce:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e3d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e3d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3d4:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 800e3d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3d8:	7b5b      	ldrb	r3, [r3, #13]
 800e3da:	f043 0304 	orr.w	r3, r3, #4
 800e3de:	b2da      	uxtb	r2, r3
 800e3e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3e2:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f7fb fde1 	bl	8009fac <uxIPHeaderSizeSocket>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	3314      	adds	r3, #20
 800e3f2:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e3f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	3314      	adds	r3, #20
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	b2da      	uxtb	r2, r3
 800e404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e406:	731a      	strb	r2, [r3, #12]
 800e408:	e08c      	b.n	800e524 <prvHandleSynReceived+0x1dc>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800e410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e412:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800e41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e41c:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e426:	2b02      	cmp	r3, #2
 800e428:	d12e      	bne.n	800e488 <prvHandleSynReceived+0x140>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f7fb fdbe 	bl	8009fac <uxIPHeaderSizeSocket>
 800e430:	4603      	mov	r3, r0
 800e432:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 800e434:	33a8      	adds	r3, #168	@ 0xa8
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	4413      	add	r3, r2
 800e43a:	3306      	adds	r3, #6
 800e43c:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800e43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e440:	2210      	movs	r2, #16
 800e442:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 800e444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e446:	2210      	movs	r2, #16
 800e448:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 800e45c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e45e:	f001 ff91 	bl	8010384 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800e462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e464:	1c5a      	adds	r2, r3, #1
 800e466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e468:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800e46a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e470:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 800e472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e474:	6a1b      	ldr	r3, [r3, #32]
 800e476:	1c5a      	adds	r2, r3, #1
 800e478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e47a:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 800e47c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e484:	635a      	str	r2, [r3, #52]	@ 0x34
 800e486:	e005      	b.n	800e494 <prvHandleSynReceived+0x14c>
            }
            else if( ulReceiveLength == 0U )
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d102      	bne.n	800e494 <prvHandleSynReceived+0x14c>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 800e48e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e492:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800e494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e496:	69db      	ldr	r3, [r3, #28]
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e49c:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	7a1b      	ldrb	r3, [r3, #8]
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d001      	beq.n	800e4b0 <prvHandleSynReceived+0x168>
 800e4ac:	200a      	movs	r0, #10
 800e4ae:	e000      	b.n	800e4b2 <prvHandleSynReceived+0x16a>
 800e4b0:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f103 0158 	add.w	r1, r3, #88	@ 0x58
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 800e4b8:	f107 0210 	add.w	r2, r7, #16
 800e4bc:	2328      	movs	r3, #40	@ 0x28
 800e4be:	f7fd ff01 	bl	800c2c4 <FreeRTOS_inet_ntop>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e4c8:	2b02      	cmp	r3, #2
 800e4ca:	d002      	beq.n	800e4d2 <prvHandleSynReceived+0x18a>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d014      	beq.n	800e4fc <prvHandleSynReceived+0x1b4>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800e4d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4d4:	2210      	movs	r2, #16
 800e4d6:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7fb fd67 	bl	8009fac <uxIPHeaderSizeSocket>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	3314      	adds	r3, #20
 800e4e6:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e4e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	3314      	adds	r3, #20
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	b2da      	uxtb	r2, r3
 800e4f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4fa:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800e502:	f003 0310 	and.w	r3, r3, #16
 800e506:	b2db      	uxtb	r3, r3
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d107      	bne.n	800e51c <prvHandleSynReceived+0x1d4>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2200      	movs	r2, #0
 800e518:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 800e51c:	2105      	movs	r1, #5
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f7fe ff76 	bl	800d410 <vTCPStateChange>
        }

        return xSendLength;
 800e524:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 800e526:	4618      	mov	r0, r3
 800e528:	3764      	adds	r7, #100	@ 0x64
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd90      	pop	{r4, r7, pc}

0800e52e <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 800e52e:	b590      	push	{r4, r7, lr}
 800e530:	b097      	sub	sp, #92	@ 0x5c
 800e532:	af02      	add	r7, sp, #8
 800e534:	60f8      	str	r0, [r7, #12]
 800e536:	60b9      	str	r1, [r7, #8]
 800e538:	607a      	str	r2, [r7, #4]
 800e53a:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e542:	68f8      	ldr	r0, [r7, #12]
 800e544:	f7fb fd32 	bl	8009fac <uxIPHeaderSizeSocket>
 800e548:	4603      	mov	r3, r0
 800e54a:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800e54c:	4423      	add	r3, r4
 800e54e:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800e550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e552:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e55c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e55e:	7b5b      	ldrb	r3, [r3, #13]
 800e560:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 800e564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	637b      	str	r3, [r7, #52]	@ 0x34
 800e56a:	2300      	movs	r3, #0
 800e56c:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 800e56e:	2300      	movs	r3, #0
 800e570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e572:	2300      	movs	r3, #0
 800e574:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 800e576:	2300      	movs	r3, #0
 800e578:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 800e57a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e57c:	7b9a      	ldrb	r2, [r3, #14]
 800e57e:	7bdb      	ldrb	r3, [r3, #15]
 800e580:	021b      	lsls	r3, r3, #8
 800e582:	4313      	orrs	r3, r2
 800e584:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 800e586:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	f892 210a 	ldrb.w	r2, [r2, #266]	@ 0x10a
 800e59a:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 800e5a4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e5a8:	f003 0310 	and.w	r3, r3, #16
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 80c6 	beq.w	800e73e <prvHandleEstablished+0x210>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 800e5b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e5ba:	f002 fc26 	bl	8010e0a <ulTCPWindowTxAck>
 800e5be:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d027      	beq.n	800e61a <prvHandleEstablished+0xec>
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d024      	beq.n	800e61a <prvHandleEstablished+0xec>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5dc:	2200      	movs	r2, #0
 800e5de:	2100      	movs	r1, #0
 800e5e0:	f7fe fd9d 	bl	800d11e <uxStreamBufferGet>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d017      	beq.n	800e61a <prvHandleEstablished+0xec>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f043 0202 	orr.w	r2, r3, #2
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d005      	beq.n	800e60e <prvHandleEstablished+0xe0>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	601a      	str	r2, [r3, #0]
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <prvHandleEstablished+0xfc>
            {
                prvTCPAddTxData( pxSocket );
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f000 ffbd 	bl	800f5a4 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800e62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e62c:	6a1a      	ldr	r2, [r3, #32]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e63a:	f003 0320 	and.w	r3, r3, #32
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b00      	cmp	r3, #0
 800e642:	d105      	bne.n	800e650 <prvHandleEstablished+0x122>
 800e644:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e648:	f003 0301 	and.w	r3, r3, #1
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d041      	beq.n	800e6d4 <prvHandleEstablished+0x1a6>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 800e650:	2301      	movs	r3, #1
 800e652:	64bb      	str	r3, [r7, #72]	@ 0x48
                ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800e654:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	441a      	add	r2, r3
 800e65a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e65c:	691b      	ldr	r3, [r3, #16]
 800e65e:	1ad3      	subs	r3, r2, r3
 800e660:	633b      	str	r3, [r7, #48]	@ 0x30
                lDistance = ( int32_t ) ulIntermediateResult;
 800e662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e664:	623b      	str	r3, [r7, #32]

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e66c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e670:	b2db      	uxtb	r3, r3
 800e672:	2b00      	cmp	r3, #0
 800e674:	d11d      	bne.n	800e6b2 <prvHandleEstablished+0x184>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 800e676:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e678:	f001 fd9a 	bl	80101b0 <xTCPWindowRxEmpty>
 800e67c:	61f8      	str	r0, [r7, #28]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 800e67e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e680:	f002 f8ef 	bl	8010862 <xTCPWindowTxDone>
 800e684:	61b8      	str	r0, [r7, #24]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d002      	beq.n	800e692 <prvHandleEstablished+0x164>
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10a      	bne.n	800e6a8 <prvHandleEstablished+0x17a>
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 800e692:	2300      	movs	r3, #0
 800e694:	64bb      	str	r3, [r7, #72]	@ 0x48

                        /* This action is necessary to ensure proper handling of any subsequent packets that
                         * may arrive after the refused FIN packet. Note that we only update it when the sequence
                         * of FIN packet is correct. Otherwise, we wait for re-transmission. */
                        if( lDistance <= 1 )
 800e696:	6a3b      	ldr	r3, [r7, #32]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	dc0a      	bgt.n	800e6b2 <prvHandleEstablished+0x184>
                        {
                            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 800e69c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	1c5a      	adds	r2, r3, #1
 800e6a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6a4:	611a      	str	r2, [r3, #16]
                        if( lDistance <= 1 )
 800e6a6:	e004      	b.n	800e6b2 <prvHandleEstablished+0x184>
                        }
                    }
                    else if( lDistance > 1 )
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	dd01      	ble.n	800e6b2 <prvHandleEstablished+0x184>
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
                                                 ( int ) lDistance,
                                                 ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                        xMayClose = pdFALSE;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 800e6b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00d      	beq.n	800e6d4 <prvHandleEstablished+0x1a6>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 800e6b8:	68fa      	ldr	r2, [r7, #12]
 800e6ba:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e6be:	f043 0320 	orr.w	r3, r3, #32
 800e6c2:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f7ff fd96 	bl	800e1fe <prvTCPHandleFin>
 800e6d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 800e6d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d131      	bne.n	800e73e <prvHandleEstablished+0x210>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 800e6da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e6dc:	2210      	movs	r2, #16
 800e6de:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d01d      	beq.n	800e722 <prvHandleEstablished+0x1f4>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f7fb fc60 	bl	8009fac <uxIPHeaderSizeSocket>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	3314      	adds	r3, #20
 800e6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	3314      	adds	r3, #20
 800e700:	b2db      	uxtb	r3, r3
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	b2da      	uxtb	r2, r3
 800e706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e708:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e714:	b2db      	uxtb	r3, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	d003      	beq.n	800e722 <prvHandleEstablished+0x1f4>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 800e71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e71c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e720:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10a      	bne.n	800e73e <prvHandleEstablished+0x210>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800e728:	683a      	ldr	r2, [r7, #0]
 800e72a:	68b9      	ldr	r1, [r7, #8]
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f000 fdb2 	bl	800f296 <prvTCPPrepareSend>
 800e732:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	dd01      	ble.n	800e73e <prvHandleEstablished+0x210>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 800e73e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800e740:	4618      	mov	r0, r3
 800e742:	3754      	adds	r7, #84	@ 0x54
 800e744:	46bd      	mov	sp, r7
 800e746:	bd90      	pop	{r4, r7, pc}

0800e748 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800e748:	b590      	push	{r4, r7, lr}
 800e74a:	b08f      	sub	sp, #60	@ 0x3c
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fb fc0b 	bl	8009f78 <uxIPHeaderSizePacket>
 800e762:	4603      	mov	r3, r0
 800e764:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800e766:	4423      	add	r3, r4
 800e768:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 800e76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e76c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 800e772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 800e778:	2300      	movs	r3, #0
 800e77a:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 800e77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e77e:	7b5b      	ldrb	r3, [r3, #13]
 800e780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800e78a:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 800e78c:	2300      	movs	r3, #0
 800e78e:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f107 0208 	add.w	r2, r7, #8
 800e798:	4611      	mov	r1, r2
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7ff fbcf 	bl	800df3e <prvCheckRxData>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e7aa:	2b04      	cmp	r3, #4
 800e7ac:	d90c      	bls.n	800e7c8 <prvTCPHandleState+0x80>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	691a      	ldr	r2, [r3, #16]
 800e7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d106      	bne.n	800e7c8 <prvTCPHandleState+0x80>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e7c0:	f043 0301 	orr.w	r3, r3, #1
 800e7c4:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 800e7c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	441a      	add	r2, r3
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	699b      	ldr	r3, [r3, #24]
 800e7d2:	1ad3      	subs	r3, r2, r3
 800e7d4:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	dd04      	ble.n	800e7e6 <prvTCPHandleState+0x9e>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e7dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	441a      	add	r2, r3
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 800e7e6:	68b9      	ldr	r1, [r7, #8]
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7ff fc1c 	bl	800e02c <prvStoreRxData>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	da03      	bge.n	800e802 <prvTCPHandleState+0xba>
        {
            xSendLength = -1;
 800e7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e7fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800e800:	e0ab      	b.n	800e95a <prvTCPHandleState+0x212>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4619      	mov	r1, r3
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fef9 	bl	800f600 <prvSetOptions>
 800e80e:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e816:	2b04      	cmp	r3, #4
 800e818:	d109      	bne.n	800e82e <prvTCPHandleState+0xe6>
 800e81a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e81e:	f003 031f 	and.w	r3, r3, #31
 800e822:	2b02      	cmp	r3, #2
 800e824:	d103      	bne.n	800e82e <prvTCPHandleState+0xe6>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 800e826:	2103      	movs	r1, #3
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f7fe fdf1 	bl	800d410 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 800e82e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e832:	f003 0301 	and.w	r3, r3, #1
 800e836:	2b00      	cmp	r3, #0
 800e838:	d022      	beq.n	800e880 <prvTCPHandleState+0x138>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e840:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d11a      	bne.n	800e880 <prvTCPHandleState+0x138>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 800e84a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	441a      	add	r2, r3
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800e85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e85e:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800e868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d106      	bne.n	800e880 <prvTCPHandleState+0x138>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 800e878:	f043 0302 	orr.w	r3, r3, #2
 800e87c:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800e886:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 800e888:	7bfb      	ldrb	r3, [r7, #15]
 800e88a:	2b0b      	cmp	r3, #11
 800e88c:	d864      	bhi.n	800e958 <prvTCPHandleState+0x210>
 800e88e:	a201      	add	r2, pc, #4	@ (adr r2, 800e894 <prvTCPHandleState+0x14c>)
 800e890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e894:	0800e959 	.word	0x0800e959
 800e898:	0800e959 	.word	0x0800e959
 800e89c:	0800e927 	.word	0x0800e927
 800e8a0:	0800e8c5 	.word	0x0800e8c5
 800e8a4:	0800e927 	.word	0x0800e927
 800e8a8:	0800e939 	.word	0x0800e939
 800e8ac:	0800e949 	.word	0x0800e949
 800e8b0:	0800e949 	.word	0x0800e949
 800e8b4:	0800e959 	.word	0x0800e959
 800e8b8:	0800e959 	.word	0x0800e959
 800e8bc:	0800e949 	.word	0x0800e949
 800e8c0:	0800e959 	.word	0x0800e959
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 800e8c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 fbe4 	bl	800f094 <prvSetSynAckOptions>
 800e8cc:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 800e8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8d0:	2212      	movs	r2, #18
 800e8d2:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7fb fb69 	bl	8009fac <uxIPHeaderSizeSocket>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8de:	4413      	add	r3, r2
 800e8e0:	3314      	adds	r3, #20
 800e8e2:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	3314      	adds	r3, #20
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	b2da      	uxtb	r2, r3
 800e8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8f6:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 800e8f8:	2104      	movs	r1, #4
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7fe fd88 	bl	800d410 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 800e900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 800e908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e90a:	1c5a      	adds	r2, r3, #1
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	69db      	ldr	r3, [r3, #28]
 800e914:	1c5a      	adds	r2, r3, #1
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	69db      	ldr	r3, [r3, #28]
 800e91e:	1c5a      	adds	r2, r3, #1
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	621a      	str	r2, [r3, #32]
                    break;
 800e924:	e019      	b.n	800e95a <prvTCPHandleState+0x212>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	6819      	ldr	r1, [r3, #0]
 800e92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f7ff fd0a 	bl	800e348 <prvHandleSynReceived>
 800e934:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800e936:	e010      	b.n	800e95a <prvTCPHandleState+0x212>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 800e938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e93a:	697a      	ldr	r2, [r7, #20]
 800e93c:	6839      	ldr	r1, [r7, #0]
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f7ff fdf5 	bl	800e52e <prvHandleEstablished>
 800e944:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800e946:	e008      	b.n	800e95a <prvTCPHandleState+0x212>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4619      	mov	r1, r3
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7ff fc55 	bl	800e1fe <prvTCPHandleFin>
 800e954:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 800e956:	e000      	b.n	800e95a <prvTCPHandleState+0x212>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 800e958:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 800e95a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	dd06      	ble.n	800e96e <prvTCPHandleState+0x226>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 800e960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e962:	697a      	ldr	r2, [r7, #20]
 800e964:	6839      	ldr	r1, [r7, #0]
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 feb0 	bl	800f6cc <prvSendData>
 800e96c:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 800e96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800e970:	4618      	mov	r0, r3
 800e972:	373c      	adds	r7, #60	@ 0x3c
 800e974:	46bd      	mov	sp, r7
 800e976:	bd90      	pop	{r4, r7, pc}

0800e978 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 800e982:	2300      	movs	r3, #0
 800e984:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800e986:	6838      	ldr	r0, [r7, #0]
 800e988:	f7fb faf6 	bl	8009f78 <uxIPHeaderSizePacket>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b14      	cmp	r3, #20
 800e990:	d105      	bne.n	800e99e <prvHandleListen+0x26>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipSIZE_OF_IPv4_HEADER:
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 800e992:	6839      	ldr	r1, [r7, #0]
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f000 f89c 	bl	800ead2 <prvHandleListen_IPV4>
 800e99a:	60f8      	str	r0, [r7, #12]
                    break;
 800e99c:	e000      	b.n	800e9a0 <prvHandleListen+0x28>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 800e99e:	bf00      	nop
        }

        return pxNewSocket;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
    }
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b08a      	sub	sp, #40	@ 0x28
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	6a1a      	ldr	r2, [r3, #32]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d009      	beq.n	800ea60 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	645a      	str	r2, [r3, #68]	@ 0x44
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea58:	f043 0205 	orr.w	r2, r3, #5
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	649a      	str	r2, [r3, #72]	@ 0x48
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 800ea60:	f107 030c 	add.w	r3, r7, #12
 800ea64:	4619      	mov	r1, r3
 800ea66:	6838      	ldr	r0, [r7, #0]
 800ea68:	f7fd fc45 	bl	800c2f6 <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800ea72:	f043 0304 	orr.w	r3, r3, #4
 800ea76:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800ea88:	3301      	adds	r3, #1
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d103      	bne.n	800eaa4 <prvTCPSocketCopy+0xfa>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 800eaa4:	f107 010c 	add.w	r1, r7, #12
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	2218      	movs	r2, #24
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f7fc fedd 	bl	800b86c <vSocketBind>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d005      	beq.n	800eac4 <prvTCPSocketCopy+0x11a>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
            ( void ) vSocketClose( pxNewSocket );
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f7fc ff51 	bl	800b960 <vSocketClose>
            xResult = pdFALSE;
 800eabe:	2300      	movs	r3, #0
 800eac0:	627b      	str	r3, [r7, #36]	@ 0x24
 800eac2:	e001      	b.n	800eac8 <prvTCPSocketCopy+0x11e>
        }
        else
        {
            xResult = pdTRUE;
 800eac4:	2301      	movs	r3, #1
 800eac6:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 800eac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800eaca:	4618      	mov	r0, r3
 800eacc:	3728      	adds	r7, #40	@ 0x28
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800ead2:	b590      	push	{r4, r7, lr}
 800ead4:	b08d      	sub	sp, #52	@ 0x34
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
 800eada:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 800eadc:	2300      	movs	r3, #0
 800eade:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 800eae0:	2300      	movs	r3, #0
 800eae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 800eae4:	2300      	movs	r3, #0
 800eae6:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 800eae8:	2300      	movs	r3, #0
 800eaea:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 800eaec:	2300      	movs	r3, #0
 800eaee:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d008      	beq.n	800eb08 <prvHandleListen_IPV4+0x36>
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d005      	beq.n	800eb08 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb06:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 800eb08:	6a3b      	ldr	r3, [r7, #32]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d015      	beq.n	800eb3a <prvHandleListen_IPV4+0x68>
 800eb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb10:	f8d3 201e 	ldr.w	r2, [r3, #30]
 800eb14:	6a3b      	ldr	r3, [r7, #32]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d10e      	bne.n	800eb3a <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 800eb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1e:	f8d3 001e 	ldr.w	r0, [r3, #30]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 800eb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb28:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800eb30:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 800eb32:	f7fb fa85 	bl	800a040 <ulApplicationGetNextSequenceNumber>
 800eb36:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb38:	e001      	b.n	800eb3e <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 800eb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d03f      	beq.n	800ebc4 <prvHandleListen_IPV4+0xf2>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800eb4a:	f003 0308 	and.w	r3, r3, #8
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00d      	beq.n	800eb70 <prvHandleListen_IPV4+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800eb5e:	f043 0304 	orr.w	r3, r3, #4
 800eb62:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800eb6e:	e029      	b.n	800ebc4 <prvHandleListen_IPV4+0xf2>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 800eb70:	2300      	movs	r3, #0
 800eb72:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8b3 2078 	ldrh.w	r2, [r3, #120]	@ 0x78
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d303      	bcc.n	800eb8c <prvHandleListen_IPV4+0xba>
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 800eb84:	6838      	ldr	r0, [r7, #0]
 800eb86:	f000 fe7b 	bl	800f880 <prvTCPSendReset>
 800eb8a:	e01b      	b.n	800ebc4 <prvHandleListen_IPV4+0xf2>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 800eb8c:	2206      	movs	r2, #6
 800eb8e:	2101      	movs	r1, #1
 800eb90:	2002      	movs	r0, #2
 800eb92:	f7fc fd03 	bl	800b59c <FreeRTOS_socket>
 800eb96:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d003      	beq.n	800eba6 <prvHandleListen_IPV4+0xd4>
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba4:	d103      	bne.n	800ebae <prvHandleListen_IPV4+0xdc>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 800eba6:	6838      	ldr	r0, [r7, #0]
 800eba8:	f000 fe6a 	bl	800f880 <prvTCPSendReset>
 800ebac:	e00a      	b.n	800ebc4 <prvHandleListen_IPV4+0xf2>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 800ebae:	6879      	ldr	r1, [r7, #4]
 800ebb0:	6978      	ldr	r0, [r7, #20]
 800ebb2:	f7ff fefa 	bl	800e9aa <prvTCPSocketCopy>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d003      	beq.n	800ebc4 <prvHandleListen_IPV4+0xf2>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d052      	beq.n	800ec70 <prvHandleListen_IPV4+0x19e>
 800ebca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d04f      	beq.n	800ec70 <prvHandleListen_IPV4+0x19e>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ebd4:	6838      	ldr	r0, [r7, #0]
 800ebd6:	f7fb f9cf 	bl	8009f78 <uxIPHeaderSizePacket>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 800ebde:	4423      	add	r3, r4
 800ebe0:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ebe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe8:	651a      	str	r2, [r3, #80]	@ 0x50
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800ebea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebec:	7a13      	ldrb	r3, [r2, #8]
 800ebee:	f023 0301 	bic.w	r3, r3, #1
 800ebf2:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 800ebf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800ebf8:	b29a      	uxth	r2, r3
 800ebfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 800ec00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec02:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800ec06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec08:	659a      	str	r2, [r3, #88]	@ 0x58
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800ec0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec0e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	685a      	ldr	r2, [r3, #4]
 800ec16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec18:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
            prvSocketSetMSS( pxReturn );
 800ec1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec1e:	f001 f8b8 	bl	800fd92 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 800ec22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec24:	f000 f9cf 	bl	800efc6 <prvTCPCreateWindow>
 800ec28:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d008      	beq.n	800ec42 <prvHandleListen_IPV4+0x170>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d102      	bne.n	800ec3c <prvHandleListen_IPV4+0x16a>
                {
                    ( void ) vSocketClose( pxReturn );
 800ec36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec38:	f7fc fe92 	bl	800b960 <vSocketClose>
                }

                pxReturn = NULL;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 800ec40:	e016      	b.n	800ec70 <prvHandleListen_IPV4+0x19e>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 800ec42:	2103      	movs	r1, #3
 800ec44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec46:	f7fe fbe3 	bl	800d410 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec4e:	2b5a      	cmp	r3, #90	@ 0x5a
 800ec50:	d902      	bls.n	800ec58 <prvHandleListen_IPV4+0x186>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 800ec52:	235a      	movs	r3, #90	@ 0x5a
 800ec54:	61bb      	str	r3, [r7, #24]
 800ec56:	e002      	b.n	800ec5e <prvHandleListen_IPV4+0x18c>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec5c:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 800ec5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec60:	f103 00ae 	add.w	r0, r3, #174	@ 0xae
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 800ec68:	69ba      	ldr	r2, [r7, #24]
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	f008 fd9d 	bl	80177aa <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 800ec70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3734      	adds	r7, #52	@ 0x34
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd90      	pop	{r4, r7, pc}

0800ec7a <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	b084      	sub	sp, #16
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 800ec82:	2301      	movs	r3, #1
 800ec84:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800ec8c:	f003 0308 	and.w	r3, r3, #8
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d107      	bne.n	800eca6 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f9c3 	bl	800f022 <prvTCPPrepareConnect>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b01      	cmp	r3, #1
 800eca0:	d001      	beq.n	800eca6 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( resolution ) is not yet ready. */
                xReturn = pdFALSE;
 800eca2:	2300      	movs	r3, #0
 800eca4:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800eca6:	68fb      	ldr	r3, [r7, #12]
    }
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b088      	sub	sp, #32
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ecc6:	2b02      	cmp	r3, #2
 800ecc8:	d010      	beq.n	800ecec <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800ecca:	2300      	movs	r3, #0
 800eccc:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800ecce:	f107 030c 	add.w	r3, r7, #12
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 f84e 	bl	800ed76 <prvTCPSendRepeated>
 800ecda:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d044      	beq.n	800ed6c <prvTCPSendPacket+0xbc>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	4618      	mov	r0, r3
 800ece6:	f002 fc4f 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
 800ecea:	e03f      	b.n	800ed6c <prvTCPSendPacket+0xbc>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	d904      	bls.n	800ed00 <prvTCPSendPacket+0x50>
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800ecf6:	2108      	movs	r1, #8
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7fe fb89 	bl	800d410 <vTCPStateChange>
 800ecfe:	e035      	b.n	800ed6c <prvTCPSendPacket+0xbc>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7ff ffba 	bl	800ec7a <prvTCPMakeSurePrepared>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d12f      	bne.n	800ed6c <prvTCPSendPacket+0xbc>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f7fb f94d 	bl	8009fac <uxIPHeaderSizeSocket>
 800ed12:	4603      	mov	r3, r0
 800ed14:	330e      	adds	r3, #14
 800ed16:	33a8      	adds	r3, #168	@ 0xa8
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	3306      	adds	r3, #6
 800ed1e:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	4619      	mov	r1, r3
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f9b5 	bl	800f094 <prvSetSynAckOptions>
 800ed2a:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7fb f93d 	bl	8009fac <uxIPHeaderSizeSocket>
 800ed32:	4602      	mov	r2, r0
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	4413      	add	r3, r2
 800ed38:	3314      	adds	r3, #20
 800ed3a:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	3314      	adds	r3, #20
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ed56:	3301      	adds	r3, #1
 800ed58:	b2da      	uxtb	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800ed60:	69fa      	ldr	r2, [r7, #28]
 800ed62:	2300      	movs	r3, #0
 800ed64:	2100      	movs	r1, #0
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f835 	bl	800edd6 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800ed6c:	69fb      	ldr	r3, [r7, #28]
    }
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3720      	adds	r7, #32
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b086      	sub	sp, #24
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800ed84:	2300      	movs	r3, #0
 800ed86:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800ed88:	2300      	movs	r3, #0
 800ed8a:	617b      	str	r3, [r7, #20]
 800ed8c:	e019      	b.n	800edc2 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800ed8e:	68fa      	ldr	r2, [r7, #12]
 800ed90:	6839      	ldr	r1, [r7, #0]
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fa7f 	bl	800f296 <prvTCPPrepareSend>
 800ed98:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	dd14      	ble.n	800edca <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	6819      	ldr	r1, [r3, #0]
 800eda4:	68ba      	ldr	r2, [r7, #8]
 800eda6:	2301      	movs	r3, #1
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 f814 	bl	800edd6 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	2200      	movs	r2, #0
 800edb2:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800edb4:	693a      	ldr	r2, [r7, #16]
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	4413      	add	r3, r2
 800edba:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	3301      	adds	r3, #1
 800edc0:	617b      	str	r3, [r7, #20]
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	2b07      	cmp	r3, #7
 800edc6:	d9e2      	bls.n	800ed8e <prvTCPSendRepeated+0x18>
 800edc8:	e000      	b.n	800edcc <prvTCPSendRepeated+0x56>
                break;
 800edca:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800edcc:	693b      	ldr	r3, [r7, #16]
    }
 800edce:	4618      	mov	r0, r3
 800edd0:	3718      	adds	r7, #24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b088      	sub	sp, #32
 800edda:	af00      	add	r7, sp, #0
 800eddc:	60f8      	str	r0, [r7, #12]
 800edde:	60b9      	str	r1, [r7, #8]
 800ede0:	607a      	str	r2, [r7, #4]
 800ede2:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	61fb      	str	r3, [r7, #28]
        BaseType_t xIsIPv6 = pdFALSE;
 800ede8:	2300      	movs	r3, #0
 800edea:	61bb      	str	r3, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d110      	bne.n	800ee14 <prvTCPReturnPacket+0x3e>
                {
                    xIsIPv6 = pdTRUE;
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10d      	bne.n	800ee14 <prvTCPReturnPacket+0x3e>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfc:	b672      	cpsid	i
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	b662      	cpsie	i
 800ee0c:	617b      	str	r3, [r7, #20]
}
 800ee0e:	bf00      	nop
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 800ee10:	bf00      	nop
 800ee12:	e7fd      	b.n	800ee10 <prvTCPReturnPacket+0x3a>
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d105      	bne.n	800ee26 <prvTCPReturnPacket+0x50>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	68b9      	ldr	r1, [r7, #8]
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 fd3b 	bl	800f89c <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 800ee26:	bf00      	nop
 800ee28:	3720      	adds	r7, #32
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b08a      	sub	sp, #40	@ 0x28
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	60b9      	str	r1, [r7, #8]
 800ee38:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ee40:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800ee4a:	4413      	add	r3, r2
 800ee4c:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d007      	beq.n	800ee68 <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fe f82e 	bl	800cec0 <uxStreamBufferFrontSpace>
 800ee64:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee66:	e003      	b.n	800ee70 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ee6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fb fd2e 	bl	800a8d8 <FreeRTOS_min_uint32>
 800ee7c:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800ee84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d107      	bne.n	800ee9e <prvTCPReturn_CheckTCPWindow+0x70>
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800ee94:	f003 0304 	and.w	r3, r3, #4
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800eea8:	461a      	mov	r2, r3
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d20a      	bcs.n	800eec6 <prvTCPReturn_CheckTCPWindow+0x98>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d303      	bcc.n	800eec6 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800eec4:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f893 3109 	ldrb.w	r3, [r3, #265]	@ 0x109
 800eecc:	461a      	mov	r2, r3
 800eece:	6a3b      	ldr	r3, [r7, #32]
 800eed0:	40d3      	lsrs	r3, r2
 800eed2:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d902      	bls.n	800eee4 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 800eede:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800eee2:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800eef2:	f023 0301 	bic.w	r3, r3, #1
 800eef6:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	691a      	ldr	r2, [r3, #16]
 800eefe:	6a3b      	ldr	r3, [r7, #32]
 800ef00:	441a      	add	r2, r3
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	671a      	str	r2, [r3, #112]	@ 0x70
    }
 800ef06:	bf00      	nop
 800ef08:	3728      	adds	r7, #40	@ 0x28
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b088      	sub	sp, #32
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	60f8      	str	r0, [r7, #12]
 800ef16:	60b9      	str	r1, [r7, #8]
 800ef18:	607a      	str	r2, [r7, #4]
 800ef1a:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ef22:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800ef2c:	4413      	add	r3, r2
 800ef2e:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800ef36:	f003 0302 	and.w	r3, r3, #2
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d018      	beq.n	800ef72 <prvTCPReturn_SetSequenceNumber+0x64>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800ef46:	f023 0302 	bic.w	r3, r3, #2
 800ef4a:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800ef54:	f043 0304 	orr.w	r3, r3, #4
 800ef58:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800ef62:	1e5a      	subs	r2, r3, #1
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	685a      	ldr	r2, [r3, #4]
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	605a      	str	r2, [r3, #4]
 800ef70:	e021      	b.n	800efb6 <prvTCPReturn_SetSequenceNumber+0xa8>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	7b5b      	ldrb	r3, [r3, #13]
 800ef80:	f003 0301 	and.w	r3, r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d016      	beq.n	800efb6 <prvTCPReturn_SetSequenceNumber+0xa8>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f7fb f80f 	bl	8009fac <uxIPHeaderSizeSocket>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	1a9b      	subs	r3, r3, r2
 800ef94:	3b14      	subs	r3, #20
 800ef96:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	441a      	add	r2, r3
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d006      	beq.n	800efb6 <prvTCPReturn_SetSequenceNumber+0xa8>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	7b5b      	ldrb	r3, [r3, #13]
 800efac:	f023 0301 	bic.w	r3, r3, #1
 800efb0:	b2da      	uxtb	r2, r3
 800efb2:	69bb      	ldr	r3, [r7, #24]
 800efb4:	735a      	strb	r2, [r3, #13]
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	691a      	ldr	r2, [r3, #16]
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	609a      	str	r2, [r3, #8]
    }
 800efbe:	bf00      	nop
 800efc0:	3720      	adds	r7, #32
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800efc6:	b5b0      	push	{r4, r5, r7, lr}
 800efc8:	b088      	sub	sp, #32
 800efca:	af02      	add	r7, sp, #8
 800efcc:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800efd4:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800efdc:	613b      	str	r3, [r7, #16]
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800efea:	fb02 f103 	mul.w	r1, r2, r3
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800eff4:	fb02 f403 	mul.w	r4, r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 5134 	ldr.w	r5, [r3, #308]	@ 0x134
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
        xReturn = xTCPWindowCreate(
 800f00a:	9201      	str	r2, [sp, #4]
 800f00c:	9300      	str	r3, [sp, #0]
 800f00e:	462b      	mov	r3, r5
 800f010:	4622      	mov	r2, r4
 800f012:	f001 f97b 	bl	801030c <xTCPWindowCreate>
 800f016:	60f8      	str	r0, [r7, #12]

        return xReturn;
 800f018:	68fb      	ldr	r3, [r7, #12]
    }
 800f01a:	4618      	mov	r0, r3
 800f01c:	3718      	adds	r7, #24
 800f01e:	46bd      	mov	sp, r7
 800f020:	bdb0      	pop	{r4, r5, r7, pc}

0800f022 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found through address resolution.
 *       In case the target IP address is not within the netmask, the hardware address
 *       of the gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800f022:	b580      	push	{r7, lr}
 800f024:	b084      	sub	sp, #16
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 800f02a:	2301      	movs	r3, #1
 800f02c:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	7a1b      	ldrb	r3, [r3, #8]
 800f032:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f036:	b2db      	uxtb	r3, r3
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d104      	bne.n	800f046 <prvTCPPrepareConnect+0x24>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 fdfb 	bl	800fc38 <prvTCPPrepareConnect_IPV4>
 800f042:	60f8      	str	r0, [r7, #12]
                    break;
 800f044:	e000      	b.n	800f048 <prvTCPPrepareConnect+0x26>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800f046:	bf00      	nop
        }

        return xReturn;
 800f048:	68fb      	ldr	r3, [r7, #12]
    }
 800f04a:	4618      	mov	r0, r3
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}

0800f052 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 800f052:	b480      	push	{r7}
 800f054:	b085      	sub	sp, #20
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	f8b2 2076 	ldrh.w	r2, [r2, #118]	@ 0x76
 800f066:	fb02 f303 	mul.w	r3, r2, r3
 800f06a:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 800f06c:	2300      	movs	r3, #0
 800f06e:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 800f070:	e005      	b.n	800f07e <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	085b      	lsrs	r3, r3, #1
 800f076:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 800f078:	7afb      	ldrb	r3, [r7, #11]
 800f07a:	3301      	adds	r3, #1
 800f07c:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f084:	d2f5      	bcs.n	800f072 <prvWinScaleFactor+0x20>
            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 800f086:	7afb      	ldrb	r3, [r7, #11]
        }
 800f088:	4618      	mov	r0, r3
 800f08a:	3714      	adds	r7, #20
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f0a4:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	2202      	movs	r2, #2
 800f0aa:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	2204      	movs	r2, #4
 800f0b0:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 800f0b2:	89fb      	ldrh	r3, [r7, #14]
 800f0b4:	0a1b      	lsrs	r3, r3, #8
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 800f0be:	89fb      	ldrh	r3, [r7, #14]
 800f0c0:	b2da      	uxtb	r2, r3
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7ff ffc3 	bl	800f052 <prvWinScaleFactor>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	2201      	movs	r2, #1
 800f0da:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	2203      	movs	r2, #3
 800f0e0:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	2203      	movs	r2, #3
 800f0e6:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 800f0f2:	2308      	movs	r3, #8
 800f0f4:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 800f0f6:	683a      	ldr	r2, [r7, #0]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	4413      	add	r3, r2
 800f0fc:	3314      	adds	r3, #20
 800f0fe:	2201      	movs	r2, #1
 800f100:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	3301      	adds	r3, #1
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	4413      	add	r3, r2
 800f10a:	2201      	movs	r2, #1
 800f10c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	3302      	adds	r3, #2
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	4413      	add	r3, r2
 800f116:	2204      	movs	r2, #4
 800f118:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	3303      	adds	r3, #3
 800f11e:	683a      	ldr	r2, [r7, #0]
 800f120:	4413      	add	r3, r2
 800f122:	2202      	movs	r2, #2
 800f124:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	3304      	adds	r3, #4
 800f12a:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 800f12c:	68bb      	ldr	r3, [r7, #8]
    }
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 800f138:	b580      	push	{r7, lr}
 800f13a:	b088      	sub	sp, #32
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 800f146:	4b3c      	ldr	r3, [pc, #240]	@ (800f238 <prvTCPBufferResize+0x100>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00b      	beq.n	800f166 <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 800f14e:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 800f152:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d102      	bne.n	800f160 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 800f15a:	2301      	movs	r3, #1
 800f15c:	617b      	str	r3, [r7, #20]
 800f15e:	e020      	b.n	800f1a2 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 800f160:	2300      	movs	r3, #0
 800f162:	617b      	str	r3, [r7, #20]
 800f164:	e01d      	b.n	800f1a2 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f7fa ff20 	bl	8009fac <uxIPHeaderSizeSocket>
 800f16c:	4602      	mov	r2, r0
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	4413      	add	r3, r2
 800f172:	3322      	adds	r3, #34	@ 0x22
 800f174:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	69ba      	ldr	r2, [r7, #24]
 800f17a:	4413      	add	r3, r2
 800f17c:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	2b59      	cmp	r3, #89	@ 0x59
 800f182:	d801      	bhi.n	800f188 <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800f184:	235a      	movs	r3, #90	@ 0x5a
 800f186:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d004      	beq.n	800f198 <prvTCPBufferResize+0x60>
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f192:	69ba      	ldr	r2, [r7, #24]
 800f194:	429a      	cmp	r2, r3
 800f196:	d902      	bls.n	800f19e <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 800f198:	2301      	movs	r3, #1
 800f19a:	617b      	str	r3, [r7, #20]
 800f19c:	e001      	b.n	800f1a2 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d023      	beq.n	800f1f0 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	69b8      	ldr	r0, [r7, #24]
 800f1ac:	f002 f940 	bl	8011430 <pxGetNetworkBufferWithDescriptor>
 800f1b0:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d03a      	beq.n	800f22e <prvTCPBufferResize+0xf6>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	69ba      	ldr	r2, [r7, #24]
 800f1bc:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00c      	beq.n	800f1de <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	f008 faea 	bl	80177aa <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f1d6:	68b8      	ldr	r0, [r7, #8]
 800f1d8:	f002 f9d6 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
 800f1dc:	e027      	b.n	800f22e <prvTCPBufferResize+0xf6>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	33ae      	adds	r3, #174	@ 0xae
 800f1e6:	225a      	movs	r2, #90	@ 0x5a
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	f008 fade 	bl	80177aa <memcpy>
 800f1ee:	e01e      	b.n	800f22e <prvTCPBufferResize+0xf6>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d10d      	bne.n	800f212 <prvTCPBufferResize+0xda>
	__asm volatile
 800f1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1fa:	b672      	cpsid	i
 800f1fc:	f383 8811 	msr	BASEPRI, r3
 800f200:	f3bf 8f6f 	isb	sy
 800f204:	f3bf 8f4f 	dsb	sy
 800f208:	b662      	cpsie	i
 800f20a:	613b      	str	r3, [r7, #16]
}
 800f20c:	bf00      	nop
 800f20e:	bf00      	nop
 800f210:	e7fd      	b.n	800f20e <prvTCPBufferResize+0xd6>
            pxReturn = pxNetworkBuffer;
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f7fa fec8 	bl	8009fac <uxIPHeaderSizeSocket>
 800f21c:	4602      	mov	r2, r0
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	441a      	add	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4413      	add	r3, r2
 800f226:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 800f22e:	69fb      	ldr	r3, [r7, #28]
    }
 800f230:	4618      	mov	r0, r3
 800f232:	3720      	adds	r7, #32
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	08018944 	.word	0x08018944

0800f23c <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b086      	sub	sp, #24
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 800f248:	2300      	movs	r3, #0
 800f24a:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d008      	beq.n	800f264 <prvTCPReturn_SetEndPoint+0x28>
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f256:	2b00      	cmp	r3, #0
 800f258:	d004      	beq.n	800f264 <prvTCPReturn_SetEndPoint+0x28>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	631a      	str	r2, [r3, #48]	@ 0x30
 800f262:	e014      	b.n	800f28e <prvTCPReturn_SetEndPoint+0x52>
        }
        else
        {
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );

            switch( uxIPHeaderSize )
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b14      	cmp	r3, #20
 800f268:	d10c      	bne.n	800f284 <prvTCPReturn_SetEndPoint+0x48>
                        /*_RB_ Was FreeRTOS_FindEndPointOnIP_IPv4() but changed to FreeRTOS_FindEndPointOnNetMask()
                         * as it is using the destination address.  I'm confused here as sometimes the addresses are swapped. */
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f26e:	330e      	adds	r3, #14
 800f270:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress );
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	4618      	mov	r0, r3
 800f278:	f7fb ffb2 	bl	800b1e0 <FreeRTOS_FindEndPointOnNetMask>
 800f27c:	4602      	mov	r2, r0
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	631a      	str	r2, [r3, #48]	@ 0x30
                        {
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
                                               ( unsigned int ) FreeRTOS_ntohl( pxIPHeader->ulSourceIPAddress ),
                                               ( unsigned int ) FreeRTOS_ntohl( pxIPHeader->ulDestinationIPAddress ) ) );
                        }
                        break;
 800f282:	e003      	b.n	800f28c <prvTCPReturn_SetEndPoint+0x50>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* Shouldn't reach here */
                    pxNetworkBuffer->pxEndPoint = NULL;
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	2200      	movs	r2, #0
 800f288:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 800f28a:	bf00      	nop
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 800f28c:	bf00      	nop
 800f28e:	bf00      	nop
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 800f296:	b580      	push	{r7, lr}
 800f298:	b096      	sub	sp, #88	@ 0x58
 800f29a:	af02      	add	r7, sp, #8
 800f29c:	60f8      	str	r0, [r7, #12]
 800f29e:	60b9      	str	r1, [r7, #8]
 800f2a0:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d004      	beq.n	800f2b8 <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f2b6:	e002      	b.n	800f2be <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	33ae      	adds	r3, #174	@ 0xae
 800f2bc:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800f2be:	68f8      	ldr	r0, [r7, #12]
 800f2c0:	f7fa fe74 	bl	8009fac <uxIPHeaderSizeSocket>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	330e      	adds	r3, #14
 800f2c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2ca:	4413      	add	r3, r2
 800f2cc:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f2d4:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 800f2de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2e0:	7b5b      	ldrb	r3, [r3, #13]
 800f2e2:	f043 0310 	orr.w	r3, r3, #16
 800f2e6:	b2da      	uxtb	r2, r3
 800f2e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f2ea:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f000 808d 	beq.w	800f412 <prvTCPPrepareSend+0x17c>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d90a      	bls.n	800f318 <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f308:	f107 0210 	add.w	r2, r7, #16
 800f30c:	4619      	mov	r1, r3
 800f30e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f310:	f001 fbdb 	bl	8010aca <ulTCPWindowTxGet>
 800f314:	4603      	mov	r3, r0
 800f316:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 800f318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	dd79      	ble.n	800f412 <prvTCPPrepareSend+0x17c>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	6819      	ldr	r1, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f326:	68f8      	ldr	r0, [r7, #12]
 800f328:	f7ff ff06 	bl	800f138 <prvTCPBufferResize>
 800f32c:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 800f32e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f330:	2b00      	cmp	r3, #0
 800f332:	d06b      	beq.n	800f40c <prvTCPPrepareSend+0x176>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f338:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 800f33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f33e:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	f7fa fe33 	bl	8009fac <uxIPHeaderSizeSocket>
 800f346:	4603      	mov	r3, r0
 800f348:	330e      	adds	r3, #14
 800f34a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f34c:	4413      	add	r3, r2
 800f34e:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	f7fa fe2b 	bl	8009fac <uxIPHeaderSizeSocket>
 800f356:	4602      	mov	r2, r0
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	4413      	add	r3, r2
 800f35c:	3322      	adds	r3, #34	@ 0x22
 800f35e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f360:	4413      	add	r3, r2
 800f362:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	4619      	mov	r1, r3
 800f376:	f7fd fd74 	bl	800ce62 <uxStreamBufferDistance>
 800f37a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800f382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f384:	2201      	movs	r2, #1
 800f386:	9200      	str	r2, [sp, #0]
 800f388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f38a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f38c:	f7fd fec7 	bl	800d11e <uxStreamBufferGet>
 800f390:	62b8      	str	r0, [r7, #40]	@ 0x28
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800f398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d037      	beq.n	800f412 <prvTCPPrepareSend+0x17c>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	f7fd fd54 	bl	800ce62 <uxStreamBufferDistance>
 800f3ba:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 800f3bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d126      	bne.n	800f412 <prvTCPPrepareSend+0x17c>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	61bb      	str	r3, [r7, #24]
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800f3e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3e4:	7b5b      	ldrb	r3, [r3, #13]
 800f3e6:	f043 0301 	orr.w	r3, r3, #1
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3ee:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 800f3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3f6:	441a      	add	r2, r3
 800f3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3fa:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f406:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
 800f40a:	e002      	b.n	800f412 <prvTCPPrepareSend+0x17c>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 800f40c:	f04f 33ff 	mov.w	r3, #4294967295
 800f410:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 800f412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f414:	2b00      	cmp	r3, #0
 800f416:	db7e      	blt.n	800f516 <prvTCPPrepareSend+0x280>
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f41e:	2b05      	cmp	r3, #5
 800f420:	d179      	bne.n	800f516 <prvTCPPrepareSend+0x280>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800f428:	f003 0320 	and.w	r3, r3, #32
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d029      	beq.n	800f486 <prvTCPPrepareSend+0x1f0>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 800f432:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f434:	f001 fa15 	bl	8010862 <xTCPWindowTxDone>
 800f438:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d023      	beq.n	800f486 <prvTCPPrepareSend+0x1f0>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 800f43e:	68fa      	ldr	r2, [r7, #12]
 800f440:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800f444:	f023 0320 	bic.w	r3, r3, #32
 800f448:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 800f44c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f44e:	7b5b      	ldrb	r3, [r3, #13]
 800f450:	f043 0301 	orr.w	r3, r3, #1
 800f454:	b2da      	uxtb	r2, r3
 800f456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f458:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f464:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f46e:	f043 0301 	orr.w	r3, r3, #1
 800f472:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 800f476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f478:	6a1a      	ldr	r2, [r3, #32]
 800f47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f47c:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 800f47e:	2106      	movs	r1, #6
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f7fd ffc5 	bl	800d410 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f48c:	2b03      	cmp	r3, #3
 800f48e:	d906      	bls.n	800f49e <prvTCPPrepareSend+0x208>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f490:	2108      	movs	r1, #8
 800f492:	68f8      	ldr	r0, [r7, #12]
 800f494:	f7fd ffbc 	bl	800d410 <vTCPStateChange>
                    lDataLen = -1;
 800f498:	f04f 33ff 	mov.w	r3, #4294967295
 800f49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 800f49e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d138      	bne.n	800f516 <prvTCPPrepareSend+0x280>
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f4aa:	f003 0301 	and.w	r3, r3, #1
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d130      	bne.n	800f516 <prvTCPPrepareSend+0x280>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800f4b4:	f005 fe0a 	bl	80150cc <xTaskGetTickCount>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4c0:	1ad3      	subs	r3, r2, r3
 800f4c2:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 800f4c4:	f247 5330 	movw	r3, #30000	@ 0x7530
 800f4c8:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d002      	beq.n	800f4da <prvTCPPrepareSend+0x244>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 800f4d4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800f4d8:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d919      	bls.n	800f516 <prvTCPPrepareSend+0x280>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 800f4e2:	f005 fdf3 	bl	80150cc <xTaskGetTickCount>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 800f4ee:	68fa      	ldr	r2, [r7, #12]
 800f4f0:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800f4f4:	f043 0302 	orr.w	r3, r3, #2
 800f4f8:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800f502:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                        pxSocket->u.xTCP.ucKeepRepCount++;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f50c:	3301      	adds	r3, #1
 800f50e:	b2da      	uxtb	r2, r3
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 800f516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f518:	2b00      	cmp	r3, #0
 800f51a:	db3e      	blt.n	800f59a <prvTCPPrepareSend+0x304>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 800f51c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f51e:	2b00      	cmp	r3, #0
 800f520:	dc0f      	bgt.n	800f542 <prvTCPPrepareSend+0x2ac>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f528:	f003 0301 	and.w	r3, r3, #1
 800f52c:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d107      	bne.n	800f542 <prvTCPPrepareSend+0x2ac>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f538:	f003 0302 	and.w	r3, r3, #2
 800f53c:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d02b      	beq.n	800f59a <prvTCPPrepareSend+0x304>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 800f542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f544:	7b5b      	ldrb	r3, [r3, #13]
 800f546:	f023 0308 	bic.w	r3, r3, #8
 800f54a:	b2da      	uxtb	r2, r3
 800f54c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f54e:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	b2db      	uxtb	r3, r3
 800f554:	3314      	adds	r3, #20
 800f556:	b2db      	uxtb	r3, r3
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	b2da      	uxtb	r2, r3
 800f55c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f55e:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 800f560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f562:	7b5b      	ldrb	r3, [r3, #13]
 800f564:	f043 0310 	orr.w	r3, r3, #16
 800f568:	b2da      	uxtb	r2, r3
 800f56a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f56c:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 800f56e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f570:	2b00      	cmp	r3, #0
 800f572:	d006      	beq.n	800f582 <prvTCPPrepareSend+0x2ec>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 800f574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f576:	7b5b      	ldrb	r3, [r3, #13]
 800f578:	f043 0308 	orr.w	r3, r3, #8
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f580:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f7fa fd12 	bl	8009fac <uxIPHeaderSizeSocket>
 800f588:	4602      	mov	r2, r0
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4413      	add	r3, r2
 800f58e:	3314      	adds	r3, #20
 800f590:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 800f592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f596:	4413      	add	r3, r2
 800f598:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 800f59a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800f59c:	4618      	mov	r0, r3
 800f59e:	3750      	adds	r7, #80	@ 0x50
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fd fca6 	bl	800cf04 <uxStreamBufferMidSpace>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	dd1a      	ble.n	800f5f8 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 800f5c8:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f5d0:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800f5d2:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f5da:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 800f5dc:	f001 f8b9 	bl	8010752 <lTCPWindowTxAdd>
 800f5e0:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	dd07      	ble.n	800f5f8 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7fd fcad 	bl	800cf52 <vStreamBufferMoveMid>
            }
        }
    }
 800f5f8:	bf00      	nop
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800f600:	b590      	push	{r4, r7, lr}
 800f602:	b089      	sub	sp, #36	@ 0x24
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f60e:	6838      	ldr	r0, [r7, #0]
 800f610:	f7fa fcb2 	bl	8009f78 <uxIPHeaderSizePacket>
 800f614:	4603      	mov	r3, r0
 800f616:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f618:	4423      	add	r3, r4
 800f61a:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f626:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f62e:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d013      	beq.n	800f65e <prvSetOptions+0x5e>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	3380      	adds	r3, #128	@ 0x80
 800f63a:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	3314      	adds	r3, #20
 800f640:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 800f642:	69fa      	ldr	r2, [r7, #28]
 800f644:	68f9      	ldr	r1, [r7, #12]
 800f646:	68b8      	ldr	r0, [r7, #8]
 800f648:	f008 f8af 	bl	80177aa <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	3314      	adds	r3, #20
 800f652:	b2db      	uxtb	r3, r3
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	b2da      	uxtb	r2, r3
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	731a      	strb	r2, [r3, #12]
 800f65c:	e031      	b.n	800f6c2 <prvSetOptions+0xc2>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800f664:	2b04      	cmp	r3, #4
 800f666:	d92c      	bls.n	800f6c2 <prvSetOptions+0xc2>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800f66e:	f003 0301 	and.w	r3, r3, #1
 800f672:	b2db      	uxtb	r3, r3
 800f674:	2b00      	cmp	r3, #0
 800f676:	d024      	beq.n	800f6c2 <prvSetOptions+0xc2>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 800f678:	687a      	ldr	r2, [r7, #4]
 800f67a:	f892 306c 	ldrb.w	r3, [r2, #108]	@ 0x6c
 800f67e:	f023 0301 	bic.w	r3, r3, #1
 800f682:	f882 306c 	strb.w	r3, [r2, #108]	@ 0x6c
            if( xTCPWindowLoggingLevel >= 0 )
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2202      	movs	r2, #2
 800f68a:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	2204      	movs	r2, #4
 800f690:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f698:	0a1b      	lsrs	r3, r3, #8
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	b2da      	uxtb	r2, r3
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 800f6ae:	2304      	movs	r3, #4
 800f6b0:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	3314      	adds	r3, #20
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 800f6c2:	69fb      	ldr	r3, [r7, #28]
    }
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3724      	adds	r7, #36	@ 0x24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd90      	pop	{r4, r7, pc}

0800f6cc <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 800f6cc:	b590      	push	{r4, r7, lr}
 800f6ce:	b08f      	sub	sp, #60	@ 0x3c
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fa fc47 	bl	8009f78 <uxIPHeaderSizePacket>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f6ee:	4423      	add	r3, r4
 800f6f0:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 800f6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	4618      	mov	r0, r3
 800f708:	f7fa fc36 	bl	8009f78 <uxIPHeaderSizePacket>
 800f70c:	4603      	mov	r3, r0
 800f70e:	3314      	adds	r3, #20
 800f710:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 800f712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f714:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	1ad3      	subs	r3, r2, r3
 800f720:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f72c:	005b      	lsls	r3, r3, #1
 800f72e:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d04f      	beq.n	800f7d6 <prvSendData+0x10a>
 800f736:	69ba      	ldr	r2, [r7, #24]
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	db4b      	blt.n	800f7d6 <prvSendData+0x10a>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800f744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f748:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d143      	bne.n	800f7d6 <prvSendData+0x10a>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 800f74e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f750:	6a3b      	ldr	r3, [r7, #32]
 800f752:	429a      	cmp	r2, r3
 800f754:	d13f      	bne.n	800f7d6 <prvSendData+0x10a>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 800f75c:	2b05      	cmp	r3, #5
 800f75e:	d13a      	bne.n	800f7d6 <prvSendData+0x10a>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 800f760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f762:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 800f764:	2b10      	cmp	r3, #16
 800f766:	d136      	bne.n	800f7d6 <prvSendData+0x10a>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f76e:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d00f      	beq.n	800f79e <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f784:	2b00      	cmp	r3, #0
 800f786:	d005      	beq.n	800f794 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f78e:	4618      	mov	r0, r3
 800f790:	f001 fefa 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 800f79e:	687a      	ldr	r2, [r7, #4]
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d204      	bcs.n	800f7b0 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2202      	movs	r2, #2
 800f7aa:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 800f7ae:	e00c      	b.n	800f7ca <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2214      	movs	r2, #20
 800f7b4:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d103      	bne.n	800f7ca <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 800f7d4:	e015      	b.n	800f802 <prvSendData+0x136>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d010      	beq.n	800f802 <prvSendData+0x136>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d005      	beq.n	800f7fa <prvSendData+0x12e>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f001 fec7 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 800f802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f804:	2b00      	cmp	r3, #0
 800f806:	d009      	beq.n	800f81c <prvSendData+0x150>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	6819      	ldr	r1, [r3, #0]
 800f80c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f80e:	2301      	movs	r3, #1
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f7ff fae0 	bl	800edd6 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	2200      	movs	r2, #0
 800f81a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 800f81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800f81e:	4618      	mov	r0, r3
 800f820:	373c      	adds	r7, #60	@ 0x3c
 800f822:	46bd      	mov	sp, r7
 800f824:	bd90      	pop	{r4, r7, pc}

0800f826 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 800f826:	b480      	push	{r7}
 800f828:	b085      	sub	sp, #20
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
 800f82e:	460b      	mov	r3, r1
 800f830:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 800f832:	2301      	movs	r3, #1
 800f834:	60fb      	str	r3, [r7, #12]
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 800f836:	68fb      	ldr	r3, [r7, #12]
    }
 800f838:	4618      	mov	r0, r3
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <prvTCPSendChallengeAck>:
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       uint32_t ulCurrentSequenceNumber,
                                       uint32_t ulOurSequenceNumber )
    {
 800f844:	b590      	push	{r4, r7, lr}
 800f846:	b087      	sub	sp, #28
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f7fa fb8f 	bl	8009f78 <uxIPHeaderSizePacket>
 800f85a:	4603      	mov	r3, r0
 800f85c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 800f85e:	4423      	add	r3, r4
 800f860:	617b      	str	r3, [r7, #20]
         *  <ACK=RCV.NXT>
         *
         * The prvTCPSendSpecialPacketHelper function uses the sequence number of the packet as the
         * ACK number and the ACK number as the sequence number, therefore the values are set swapped
         * here to match the RFC. */
        pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulCurrentSequenceNumber );
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	605a      	str	r2, [r3, #4]
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( ulOurSequenceNumber );
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	609a      	str	r2, [r3, #8]

        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 800f86e:	2110      	movs	r1, #16
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f7ff ffd8 	bl	800f826 <prvTCPSendSpecialPacketHelper>
 800f876:	4603      	mov	r3, r0
    }
 800f878:	4618      	mov	r0, r3
 800f87a:	371c      	adds	r7, #28
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd90      	pop	{r4, r7, pc}

0800f880 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 800f888:	2114      	movs	r1, #20
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7ff ffcb 	bl	800f826 <prvTCPSendSpecialPacketHelper>
 800f890:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
	...

0800f89c <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b0a8      	sub	sp, #160	@ 0xa0
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	607a      	str	r2, [r7, #4]
 800f8a8:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    IPHeader_t * pxIPHeader = NULL;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    BaseType_t xDoRelease = xReleaseAfterSend;
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    EthernetHeader_t * pxEthernetHeader = NULL;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    void * pvCopyDest = NULL;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800f8d8:	2314      	movs	r3, #20
 800f8da:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t ulDestinationIPAddress;
    eResolutionLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800f8e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d117      	bne.n	800f918 <prvTCPReturnPacket_IPV4+0x7c>
        {
            pxNetworkBuffer = &xTempBuffer;
 800f8e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 800f8f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8f4:	2238      	movs	r2, #56	@ 0x38
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f007 fe7b 	bl	80175f4 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f103 02ae 	add.w	r2, r3, #174	@ 0xae
 800f904:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f908:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800f90a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f90e:	225a      	movs	r2, #90	@ 0x5a
 800f910:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 800f912:	2300      	movs	r3, #0
 800f914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 800f918:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d110      	bne.n	800f942 <prvTCPReturnPacket_IPV4+0xa6>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 800f920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f926:	4619      	mov	r1, r3
 800f928:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800f92c:	f7fa fdbe 	bl	800a4ac <pxDuplicateNetworkBufferWithDescriptor>
 800f930:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

                if( pxNetworkBuffer != NULL )
 800f934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d002      	beq.n	800f942 <prvTCPReturnPacket_IPV4+0xa6>
                {
                    xDoRelease = pdTRUE;
 800f93c:	2301      	movs	r3, #1
 800f93e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 800f942:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f946:	2b00      	cmp	r3, #0
 800f948:	f000 8168 	beq.w	800fc1c <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800f94c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f952:	330e      	adds	r3, #14
 800f954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 800f958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f95e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 800f962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 800f96a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f96e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f972:	330e      	adds	r3, #14
 800f974:	4413      	add	r3, r2
 800f976:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( pxNetworkBuffer->pxEndPoint == NULL )
 800f97a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f97e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f980:	2b00      	cmp	r3, #0
 800f982:	d10b      	bne.n	800f99c <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 800f984:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f986:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	f7ff fc56 	bl	800f23c <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 800f990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f996:	2b00      	cmp	r3, #0
 800f998:	f000 813d 	beq.w	800fc16 <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d019      	beq.n	800f9d6 <prvTCPReturnPacket_IPV4+0x13a>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 800f9a2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f9a4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f7ff fa40 	bl	800ee2e <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f9b2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f7ff faa9 	bl	800ef0e <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f9c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f9c4:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 800f9c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f9d2:	60da      	str	r2, [r3, #12]
 800f9d4:	e01b      	b.n	800fa0e <prvTCPReturnPacket_IPV4+0x172>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 800f9d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	677b      	str	r3, [r7, #116]	@ 0x74
 800f9de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f9e2:	689a      	ldr	r2, [r3, #8]
 800f9e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f9e8:	605a      	str	r2, [r3, #4]
 800f9ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f9ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f9f0:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 800f9f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f9f6:	691b      	ldr	r3, [r3, #16]
 800f9f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800f9fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f9fe:	68da      	ldr	r2, [r3, #12]
 800fa00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa04:	611a      	str	r2, [r3, #16]
 800fa06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa0a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fa0c:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800fa0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa12:	2240      	movs	r2, #64	@ 0x40
 800fa14:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	b29a      	uxth	r2, r3
 800fa1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa1e:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800fa20:	4b84      	ldr	r3, [pc, #528]	@ (800fc34 <prvTCPReturnPacket_IPV4+0x398>)
 800fa22:	881a      	ldrh	r2, [r3, #0]
 800fa24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa28:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800fa2a:	4b82      	ldr	r3, [pc, #520]	@ (800fc34 <prvTCPReturnPacket_IPV4+0x398>)
 800fa2c:	881b      	ldrh	r3, [r3, #0]
 800fa2e:	3301      	adds	r3, #1
 800fa30:	b29a      	uxth	r2, r3
 800fa32:	4b80      	ldr	r3, [pc, #512]	@ (800fc34 <prvTCPReturnPacket_IPV4+0x398>)
 800fa34:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 800fa36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	719a      	strb	r2, [r3, #6]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 800fa42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa46:	781a      	ldrb	r2, [r3, #0]
 800fa48:	785b      	ldrb	r3, [r3, #1]
 800fa4a:	021b      	lsls	r3, r3, #8
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800fa52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa56:	885b      	ldrh	r3, [r3, #2]
 800fa58:	b29a      	uxth	r2, r3
 800fa5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa5e:	801a      	strh	r2, [r3, #0]
 800fa60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa64:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800fa68:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 800fa6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 800fa72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa78:	f103 020e 	add.w	r2, r3, #14
 800fa7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fa80:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 800fa82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fa86:	3306      	adds	r3, #6
 800fa88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800fa8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa90:	691b      	ldr	r3, [r3, #16]
 800fa92:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 800fa94:	f107 0214 	add.w	r2, r7, #20
 800fa98:	f107 011c 	add.w	r1, r7, #28
 800fa9c:	f107 0318 	add.w	r3, r7, #24
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7f8 fa27 	bl	8007ef4 <eARPGetCacheEntry>
 800faa6:	4603      	mov	r3, r0
 800faa8:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

            if( eResult == eResolutionCacheHit )
 800faac:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d108      	bne.n	800fac6 <prvTCPReturnPacket_IPV4+0x22a>
            {
                pvCopySource = &xMACAddress;
 800fab4:	f107 031c 	add.w	r3, r7, #28
 800fab8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800fabc:	697a      	ldr	r2, [r7, #20]
 800fabe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fac2:	631a      	str	r2, [r3, #48]	@ 0x30
 800fac4:	e004      	b.n	800fad0 <prvTCPReturnPacket_IPV4+0x234>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 800fac6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800faca:	3306      	adds	r3, #6
 800facc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 800fad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f000 809f 	beq.w	800fc1a <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 800fadc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fae0:	67fb      	str	r3, [r7, #124]	@ 0x7c
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 800fae2:	2206      	movs	r2, #6
 800fae4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800fae8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800faea:	f007 fe5e 	bl	80177aa <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800faee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800faf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faf4:	3338      	adds	r3, #56	@ 0x38
 800faf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800fafa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fafe:	3306      	adds	r3, #6
 800fb00:	67fb      	str	r3, [r7, #124]	@ 0x7c
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800fb02:	2206      	movs	r2, #6
 800fb04:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800fb08:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800fb0a:	f007 fe4e 	bl	80177aa <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800fb0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb14:	2b3b      	cmp	r3, #59	@ 0x3b
 800fb16:	d81a      	bhi.n	800fb4e <prvTCPReturnPacket_IPV4+0x2b2>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800fb18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fb22:	e00c      	b.n	800fb3e <prvTCPReturnPacket_IPV4+0x2a2>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800fb24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fb2e:	4413      	add	r3, r2
 800fb30:	2200      	movs	r2, #0
 800fb32:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800fb34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fb38:	3301      	adds	r3, #1
 800fb3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800fb3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800fb42:	2b3b      	cmp	r3, #59	@ 0x3b
 800fb44:	ddee      	ble.n	800fb24 <prvTCPReturnPacket_IPV4+0x288>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800fb46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb4a:	223c      	movs	r2, #60	@ 0x3c
 800fb4c:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 800fb4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10d      	bne.n	800fb76 <prvTCPReturnPacket_IPV4+0x2da>
	__asm volatile
 800fb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb5e:	b672      	cpsid	i
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	b662      	cpsie	i
 800fb6e:	663b      	str	r3, [r7, #96]	@ 0x60
}
 800fb70:	bf00      	nop
 800fb72:	bf00      	nop
 800fb74:	e7fd      	b.n	800fb72 <prvTCPReturnPacket_IPV4+0x2d6>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 800fb76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d10d      	bne.n	800fba0 <prvTCPReturnPacket_IPV4+0x304>
	__asm volatile
 800fb84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb88:	b672      	cpsid	i
 800fb8a:	f383 8811 	msr	BASEPRI, r3
 800fb8e:	f3bf 8f6f 	isb	sy
 800fb92:	f3bf 8f4f 	dsb	sy
 800fb96:	b662      	cpsie	i
 800fb98:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
 800fb9a:	bf00      	nop
 800fb9c:	bf00      	nop
 800fb9e:	e7fd      	b.n	800fb9c <prvTCPReturnPacket_IPV4+0x300>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 800fba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fba8:	66bb      	str	r3, [r7, #104]	@ 0x68
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 800fbaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800fbb2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800fbb6:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800fbb8:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 800fbba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d125      	bne.n	800fc0e <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800fbc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbc6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800fbca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800fbce:	021b      	lsls	r3, r3, #8
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800fbd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbe2:	845a      	strh	r2, [r3, #34]	@ 0x22
 800fbe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fbe8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 800fbec:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 800fbee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fbf2:	691a      	ldr	r2, [r3, #16]
 800fbf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fbf8:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800fbfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fbfe:	3306      	adds	r3, #6
 800fc00:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800fc04:	2206      	movs	r2, #6
 800fc06:	4618      	mov	r0, r3
 800fc08:	f007 fdcf 	bl	80177aa <memcpy>
 800fc0c:	e006      	b.n	800fc1c <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800fc14:	e002      	b.n	800fc1c <prvTCPReturnPacket_IPV4+0x380>
                    break;
 800fc16:	bf00      	nop
 800fc18:	e000      	b.n	800fc1c <prvTCPReturnPacket_IPV4+0x380>
                break;
 800fc1a:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 800fc1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d103      	bne.n	800fc2c <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800fc24:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800fc28:	f001 fcae 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
    }
}
 800fc2c:	bf00      	nop
 800fc2e:	37a0      	adds	r7, #160	@ 0xa0
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	2000128c 	.word	0x2000128c

0800fc38 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b08c      	sub	sp, #48	@ 0x30
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eResolutionLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 800fc40:	2301      	movs	r3, #1
 800fc42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 800fc44:	2300      	movs	r3, #0
 800fc46:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800fc48:	f107 030c 	add.w	r3, r7, #12
 800fc4c:	2206      	movs	r2, #6
 800fc4e:	2100      	movs	r1, #0
 800fc50:	4618      	mov	r0, r3
 800fc52:	f007 fccf 	bl	80175f4 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc5a:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800fc62:	f107 010c 	add.w	r1, r7, #12
 800fc66:	f107 0314 	add.w	r3, r7, #20
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7f8 f942 	bl	8007ef4 <eARPGetCacheEntry>
 800fc70:	4603      	mov	r3, r0
 800fc72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 800fc76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d00e      	beq.n	800fc9c <prvTCPPrepareConnect_IPV4+0x64>

        case eResolutionCacheMiss: /* An ARP table lookup did not find a valid entry. */
        case eResolutionFailed:    /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800fc84:	3301      	adds	r3, #1
 800fc86:	b2da      	uxtb	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7f8 fb5d 	bl	8008350 <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 800fc96:	2300      	movs	r3, #0
 800fc98:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800fc9a:	e000      	b.n	800fc9e <prvTCPPrepareConnect_IPV4+0x66>
            break;                 /* We can now prepare the SYN packet. */
 800fc9c:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 800fc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d010      	beq.n	800fcc6 <prvTCPPrepareConnect_IPV4+0x8e>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800fcb6:	f7fa f9c3 	bl	800a040 <ulApplicationGetNextSequenceNumber>
 800fcba:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 800fcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d101      	bne.n	800fcc6 <prvTCPPrepareConnect_IPV4+0x8e>
        {
            xReturn = pdFALSE;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 800fcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d05d      	beq.n	800fd88 <prvTCPPrepareConnect_IPV4+0x150>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	33ae      	adds	r3, #174	@ 0xae
 800fcd0:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 800fcd2:	6a3b      	ldr	r3, [r7, #32]
 800fcd4:	330e      	adds	r3, #14
 800fcd6:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	f892 306d 	ldrb.w	r3, [r2, #109]	@ 0x6d
 800fce6:	f043 0308 	orr.w	r3, r3, #8
 800fcea:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	33ae      	adds	r3, #174	@ 0xae
 800fcf2:	225a      	movs	r2, #90	@ 0x5a
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f007 fc7c 	bl	80175f4 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 800fcfc:	6a3b      	ldr	r3, [r7, #32]
 800fcfe:	3306      	adds	r3, #6
 800fd00:	461a      	mov	r2, r3
 800fd02:	f107 030c 	add.w	r3, r7, #12
 800fd06:	6818      	ldr	r0, [r3, #0]
 800fd08:	6010      	str	r0, [r2, #0]
 800fd0a:	889b      	ldrh	r3, [r3, #4]
 800fd0c:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800fd0e:	6a3b      	ldr	r3, [r7, #32]
 800fd10:	2200      	movs	r2, #0
 800fd12:	731a      	strb	r2, [r3, #12]
 800fd14:	2200      	movs	r2, #0
 800fd16:	f042 0208 	orr.w	r2, r2, #8
 800fd1a:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	2245      	movs	r2, #69	@ 0x45
 800fd20:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 800fd22:	2338      	movs	r3, #56	@ 0x38
 800fd24:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	8b7a      	ldrh	r2, [r7, #26]
 800fd2a:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	2240      	movs	r2, #64	@ 0x40
 800fd30:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 800fd32:	69fb      	ldr	r3, [r7, #28]
 800fd34:	2206      	movs	r2, #6
 800fd36:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800fd4e:	6a3b      	ldr	r3, [r7, #32]
 800fd50:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd5e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 800fd62:	6a3b      	ldr	r3, [r7, #32]
 800fd64:	2250      	movs	r2, #80	@ 0x50
 800fd66:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 800fd6a:	6a3b      	ldr	r3, [r7, #32]
 800fd6c:	2202      	movs	r2, #2
 800fd6e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f000 f80d 	bl	800fd92 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7ff f924 	bl	800efc6 <prvTCPCreateWindow>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d001      	beq.n	800fd88 <prvTCPPrepareConnect_IPV4+0x150>
        {
            xReturn = pdFALSE;
 800fd84:	2300      	movs	r3, #0
 800fd86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 800fd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3730      	adds	r7, #48	@ 0x30
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}

0800fd92 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b082      	sub	sp, #8
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	7a1b      	ldrb	r3, [r3, #8]
 800fd9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d103      	bne.n	800fdb0 <prvSocketSetMSS+0x1e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case pdFALSE_UNSIGNED:
                    prvSocketSetMSS_IPV4( pxSocket );
 800fda8:	6878      	ldr	r0, [r7, #4]
 800fdaa:	f000 f806 	bl	800fdba <prvSocketSetMSS_IPV4>
                    break;
 800fdae:	e000      	b.n	800fdb2 <prvSocketSetMSS+0x20>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800fdb0:	bf00      	nop
        }
    }
 800fdb2:	bf00      	nop
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 800fdba:	b580      	push	{r7, lr}
 800fdbc:	b084      	sub	sp, #16
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 800fdc2:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800fdc6:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdcc:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d012      	beq.n	800fdfa <prvSocketSetMSS_IPV4+0x40>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 800fdd4:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 800fdd8:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	405a      	eors	r2, r3
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	4013      	ands	r3, r2
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d005      	beq.n	800fdfa <prvSocketSetMSS_IPV4+0x40>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 800fdee:	68f9      	ldr	r1, [r7, #12]
 800fdf0:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 800fdf4:	f7fa fd70 	bl	800a8d8 <FreeRTOS_min_uint32>
 800fdf8:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76
}
 800fe04:	bf00      	nop
 800fe06:	3710      	adds	r7, #16
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 800fe0c:	b480      	push	{r7}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 800fe16:	2300      	movs	r3, #0
 800fe18:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 800fe1a:	683a      	ldr	r2, [r7, #0]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	db01      	blt.n	800fe28 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 800fe24:	2301      	movs	r3, #1
 800fe26:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 800fe28:	68fb      	ldr	r3, [r7, #12]
        }
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3714      	adds	r7, #20
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr

0800fe36 <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 800fe36:	b480      	push	{r7}
 800fe38:	b085      	sub	sp, #20
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	6078      	str	r0, [r7, #4]
 800fe3e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 800fe40:	2300      	movs	r3, #0
 800fe42:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	db01      	blt.n	800fe54 <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 800fe50:	2301      	movs	r3, #1
 800fe52:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800fe54:	68fb      	ldr	r3, [r7, #12]
    }
 800fe56:	4618      	mov	r0, r3
 800fe58:	3714      	adds	r7, #20
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe60:	4770      	bx	lr

0800fe62 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 800fe62:	b480      	push	{r7}
 800fe64:	b085      	sub	sp, #20
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	1ad3      	subs	r3, r2, r3
 800fe76:	3b01      	subs	r3, #1
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	db01      	blt.n	800fe80 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 800fe7c:	2301      	movs	r3, #1
 800fe7e:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800fe80:	68fb      	ldr	r3, [r7, #12]
    }
 800fe82:	4618      	mov	r0, r3
 800fe84:	3714      	adds	r7, #20
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr

0800fe8e <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 800fe8e:	b480      	push	{r7}
 800fe90:	b085      	sub	sp, #20
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
 800fe96:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	db01      	blt.n	800feaa <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 800fea6:	2301      	movs	r3, #1
 800fea8:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 800feaa:	68fb      	ldr	r3, [r7, #12]
    }
 800feac:	4618      	mov	r0, r3
 800feae:	3714      	adds	r7, #20
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	3308      	adds	r3, #8
 800fec6:	461a      	mov	r2, r3
 800fec8:	6839      	ldr	r1, [r7, #0]
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f000 f85c 	bl	800ff88 <vListInsertGeneric>
        }
 800fed0:	bf00      	nop
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 800fee0:	f005 f8f4 	bl	80150cc <xTaskGetTickCount>
 800fee4:	4602      	mov	r2, r0
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	601a      	str	r2, [r3, #0]
    }
 800feea:	bf00      	nop
 800feec:	3708      	adds	r7, #8
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 800fef2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fef6:	b084      	sub	sp, #16
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 800fefc:	f005 f8e6 	bl	80150cc <xTaskGetTickCount>
 800ff00:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) pdTICKS_TO_MS( uxDiff );
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	4698      	mov	r8, r3
 800ff12:	4691      	mov	r9, r2
 800ff14:	4642      	mov	r2, r8
 800ff16:	464b      	mov	r3, r9
 800ff18:	f04f 0000 	mov.w	r0, #0
 800ff1c:	f04f 0100 	mov.w	r1, #0
 800ff20:	0159      	lsls	r1, r3, #5
 800ff22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ff26:	0150      	lsls	r0, r2, #5
 800ff28:	4602      	mov	r2, r0
 800ff2a:	460b      	mov	r3, r1
 800ff2c:	ebb2 0408 	subs.w	r4, r2, r8
 800ff30:	eb63 0509 	sbc.w	r5, r3, r9
 800ff34:	f04f 0200 	mov.w	r2, #0
 800ff38:	f04f 0300 	mov.w	r3, #0
 800ff3c:	00ab      	lsls	r3, r5, #2
 800ff3e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800ff42:	00a2      	lsls	r2, r4, #2
 800ff44:	4614      	mov	r4, r2
 800ff46:	461d      	mov	r5, r3
 800ff48:	eb14 0a08 	adds.w	sl, r4, r8
 800ff4c:	eb45 0b09 	adc.w	fp, r5, r9
 800ff50:	f04f 0200 	mov.w	r2, #0
 800ff54:	f04f 0300 	mov.w	r3, #0
 800ff58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ff5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ff60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff64:	4692      	mov	sl, r2
 800ff66:	469b      	mov	fp, r3
 800ff68:	4650      	mov	r0, sl
 800ff6a:	4659      	mov	r1, fp
 800ff6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ff70:	f04f 0300 	mov.w	r3, #0
 800ff74:	f7f0 f9cc 	bl	8000310 <__aeabi_uldivmod>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	460b      	mov	r3, r1
 800ff7c:	4613      	mov	r3, r2
    }
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ff88 <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	689a      	ldr	r2, [r3, #8]
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	68ba      	ldr	r2, [r7, #8]
 800ffa8:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	68ba      	ldr	r2, [r7, #8]
 800ffae:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	68fa      	ldr	r2, [r7, #12]
 800ffb4:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	1c5a      	adds	r2, r3, #1
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	601a      	str	r2, [r3, #0]
        }
 800ffc0:	bf00      	nop
 800ffc2:	3714      	adds	r7, #20
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 800ffd2:	4824      	ldr	r0, [pc, #144]	@ (8010064 <prvCreateSectors+0x98>)
 800ffd4:	f003 fd51 	bl	8013a7a <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 800ffd8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ffdc:	f006 fe6c 	bl	8016cb8 <pvPortMalloc>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	4a21      	ldr	r2, [pc, #132]	@ (8010068 <prvCreateSectors+0x9c>)
 800ffe4:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 800ffe6:	4b20      	ldr	r3, [pc, #128]	@ (8010068 <prvCreateSectors+0x9c>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d102      	bne.n	800fff4 <prvCreateSectors+0x28>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 800ffee:	2300      	movs	r3, #0
 800fff0:	603b      	str	r3, [r7, #0]
 800fff2:	e032      	b.n	801005a <prvCreateSectors+0x8e>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 800fff4:	4b1c      	ldr	r3, [pc, #112]	@ (8010068 <prvCreateSectors+0x9c>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800fffc:	2100      	movs	r1, #0
 800fffe:	4618      	mov	r0, r3
 8010000:	f007 faf8 	bl	80175f4 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8010004:	2300      	movs	r3, #0
 8010006:	607b      	str	r3, [r7, #4]
 8010008:	e022      	b.n	8010050 <prvCreateSectors+0x84>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 801000a:	4b17      	ldr	r3, [pc, #92]	@ (8010068 <prvCreateSectors+0x9c>)
 801000c:	6819      	ldr	r1, [r3, #0]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	019a      	lsls	r2, r3, #6
 8010012:	4b15      	ldr	r3, [pc, #84]	@ (8010068 <prvCreateSectors+0x9c>)
 8010014:	6818      	ldr	r0, [r3, #0]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	019b      	lsls	r3, r3, #6
 801001a:	4403      	add	r3, r0
 801001c:	440a      	add	r2, r1
 801001e:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8010020:	4b11      	ldr	r3, [pc, #68]	@ (8010068 <prvCreateSectors+0x9c>)
 8010022:	6819      	ldr	r1, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	019a      	lsls	r2, r3, #6
 8010028:	4b0f      	ldr	r3, [pc, #60]	@ (8010068 <prvCreateSectors+0x9c>)
 801002a:	6818      	ldr	r0, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	019b      	lsls	r3, r3, #6
 8010030:	4403      	add	r3, r0
 8010032:	440a      	add	r2, r1
 8010034:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8010036:	4b0c      	ldr	r3, [pc, #48]	@ (8010068 <prvCreateSectors+0x9c>)
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	019b      	lsls	r3, r3, #6
 801003e:	4413      	add	r3, r2
 8010040:	332c      	adds	r3, #44	@ 0x2c
 8010042:	4619      	mov	r1, r3
 8010044:	4807      	ldr	r0, [pc, #28]	@ (8010064 <prvCreateSectors+0x98>)
 8010046:	f7ff ff37 	bl	800feb8 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	3301      	adds	r3, #1
 801004e:	607b      	str	r3, [r7, #4]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2b3f      	cmp	r3, #63	@ 0x3f
 8010054:	ddd9      	ble.n	801000a <prvCreateSectors+0x3e>
                }

                xReturn = pdPASS;
 8010056:	2301      	movs	r3, #1
 8010058:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 801005a:	683b      	ldr	r3, [r7, #0]
        }
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	20002644 	.word	0x20002644
 8010068:	20002640 	.word	0x20002640

0801006c <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 801006c:	b480      	push	{r7}
 801006e:	b087      	sub	sp, #28
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8010076:	2300      	movs	r3, #0
 8010078:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	33ac      	adds	r3, #172	@ 0xac
 801007e:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	617b      	str	r3, [r7, #20]
 8010086:	e00d      	b.n	80100a4 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	683a      	ldr	r2, [r7, #0]
 8010094:	429a      	cmp	r2, r3
 8010096:	d102      	bne.n	801009e <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	613b      	str	r3, [r7, #16]
                    break;
 801009c:	e006      	b.n	80100ac <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 80100a4:	697a      	ldr	r2, [r7, #20]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d1ed      	bne.n	8010088 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 80100ac:	693b      	ldr	r3, [r7, #16]
        }
 80100ae:	4618      	mov	r0, r3
 80100b0:	371c      	adds	r7, #28
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
	...

080100bc <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 80100bc:	b580      	push	{r7, lr}
 80100be:	b08a      	sub	sp, #40	@ 0x28
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
 80100c8:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 80100ca:	4b37      	ldr	r3, [pc, #220]	@ (80101a8 <xTCPWindowNew+0xec>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d102      	bne.n	80100d8 <xTCPWindowNew+0x1c>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
                pxSegment = NULL;
 80100d2:	2300      	movs	r3, #0
 80100d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80100d6:	e061      	b.n	801019c <xTCPWindowNew+0xe0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 80100d8:	4b33      	ldr	r3, [pc, #204]	@ (80101a8 <xTCPWindowNew+0xec>)
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 80100de:	6a3b      	ldr	r3, [r7, #32]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	627b      	str	r3, [r7, #36]	@ 0x24

                configASSERT( pxItem != NULL );
 80100e4:	6a3b      	ldr	r3, [r7, #32]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d10d      	bne.n	8010106 <xTCPWindowNew+0x4a>
	__asm volatile
 80100ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ee:	b672      	cpsid	i
 80100f0:	f383 8811 	msr	BASEPRI, r3
 80100f4:	f3bf 8f6f 	isb	sy
 80100f8:	f3bf 8f4f 	dsb	sy
 80100fc:	b662      	cpsie	i
 80100fe:	61bb      	str	r3, [r7, #24]
}
 8010100:	bf00      	nop
 8010102:	bf00      	nop
 8010104:	e7fd      	b.n	8010102 <xTCPWindowNew+0x46>
                configASSERT( pxSegment != NULL );
 8010106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010108:	2b00      	cmp	r3, #0
 801010a:	d10d      	bne.n	8010128 <xTCPWindowNew+0x6c>
	__asm volatile
 801010c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010110:	b672      	cpsid	i
 8010112:	f383 8811 	msr	BASEPRI, r3
 8010116:	f3bf 8f6f 	isb	sy
 801011a:	f3bf 8f4f 	dsb	sy
 801011e:	b662      	cpsie	i
 8010120:	617b      	str	r3, [r7, #20]
}
 8010122:	bf00      	nop
 8010124:	bf00      	nop
 8010126:	e7fd      	b.n	8010124 <xTCPWindowNew+0x68>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8010128:	6a38      	ldr	r0, [r7, #32]
 801012a:	f003 fd30 	bl	8013b8e <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d006      	beq.n	8010142 <xTCPWindowNew+0x86>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	33a4      	adds	r3, #164	@ 0xa4
 8010138:	6a39      	ldr	r1, [r7, #32]
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff febc 	bl	800feb8 <vListInsertFifo>
 8010140:	e005      	b.n	801014e <xTCPWindowNew+0x92>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3390      	adds	r3, #144	@ 0x90
 8010146:	6a39      	ldr	r1, [r7, #32]
 8010148:	4618      	mov	r0, r3
 801014a:	f7ff feb5 	bl	800feb8 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 801014e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010150:	3310      	adds	r3, #16
 8010152:	4618      	mov	r0, r3
 8010154:	f7ff fec0 	bl	800fed8 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8010158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015a:	2200      	movs	r2, #0
 801015c:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <xTCPWindowNew+0xac>
 8010164:	2101      	movs	r1, #1
 8010166:	e000      	b.n	801016a <xTCPWindowNew+0xae>
 8010168:	2100      	movs	r1, #0
 801016a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801016c:	7d93      	ldrb	r3, [r2, #22]
 801016e:	f361 0382 	bfi	r3, r1, #2, #1
 8010172:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8010174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 801017a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8010180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010182:	68ba      	ldr	r2, [r7, #8]
 8010184:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8010186:	4b08      	ldr	r3, [pc, #32]	@ (80101a8 <xTCPWindowNew+0xec>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	61fb      	str	r3, [r7, #28]

                    if( xLowestLength > xLength )
 801018c:	4b07      	ldr	r3, [pc, #28]	@ (80101ac <xTCPWindowNew+0xf0>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	429a      	cmp	r2, r3
 8010194:	d202      	bcs.n	801019c <xTCPWindowNew+0xe0>
                    {
                        xLowestLength = xLength;
 8010196:	4a05      	ldr	r2, [pc, #20]	@ (80101ac <xTCPWindowNew+0xf0>)
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 801019c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801019e:	4618      	mov	r0, r3
 80101a0:	3728      	adds	r7, #40	@ 0x28
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	20002644 	.word	0x20002644
 80101ac:	20000018 	.word	0x20000018

080101b0 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d002      	beq.n	80101c8 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 80101c2:	2300      	movs	r3, #0
 80101c4:	60fb      	str	r3, [r7, #12]
 80101c6:	e010      	b.n	80101ea <xTCPWindowRxEmpty+0x3a>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	691b      	ldr	r3, [r3, #16]
 80101cc:	1c5a      	adds	r2, r3, #1
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	699b      	ldr	r3, [r3, #24]
 80101d2:	4619      	mov	r1, r3
 80101d4:	4610      	mov	r0, r2
 80101d6:	f7ff fe5a 	bl	800fe8e <xSequenceGreaterThanOrEqual>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d002      	beq.n	80101e6 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 80101e0:	2301      	movs	r3, #1
 80101e2:	60fb      	str	r3, [r7, #12]
 80101e4:	e001      	b.n	80101ea <xTCPWindowRxEmpty+0x3a>
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 80101e6:	2300      	movs	r3, #0
 80101e8:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 80101ea:	68fb      	ldr	r3, [r7, #12]
        }
 80101ec:	4618      	mov	r0, r3
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d102      	bne.n	801020a <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8010204:	2300      	movs	r3, #0
 8010206:	60fb      	str	r3, [r7, #12]
 8010208:	e008      	b.n	801021c <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8010216:	68b8      	ldr	r0, [r7, #8]
 8010218:	f003 fcb9 	bl	8013b8e <uxListRemove>
            }

            return pxSegment;
 801021c:	68fb      	ldr	r3, [r7, #12]
        }
 801021e:	4618      	mov	r0, r3
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8010226:	b480      	push	{r7}
 8010228:	b085      	sub	sp, #20
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d102      	bne.n	801023c <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8010236:	2300      	movs	r3, #0
 8010238:	60fb      	str	r3, [r7, #12]
 801023a:	e005      	b.n	8010248 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8010248:	68fb      	ldr	r3, [r7, #12]
        }
 801024a:	4618      	mov	r0, r3
 801024c:	3714      	adds	r7, #20
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr
	...

08010258 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010264:	2b00      	cmp	r3, #0
 8010266:	d004      	beq.n	8010272 <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	3318      	adds	r3, #24
 801026c:	4618      	mov	r0, r3
 801026e:	f003 fc8e 	bl	8013b8e <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2200      	movs	r2, #0
 8010282:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010288:	2b00      	cmp	r3, #0
 801028a:	d004      	beq.n	8010296 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	332c      	adds	r3, #44	@ 0x2c
 8010290:	4618      	mov	r0, r3
 8010292:	f003 fc7c 	bl	8013b8e <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	332c      	adds	r3, #44	@ 0x2c
 801029a:	4619      	mov	r1, r3
 801029c:	4803      	ldr	r0, [pc, #12]	@ (80102ac <vTCPWindowFree+0x54>)
 801029e:	f7ff fe0b 	bl	800feb8 <vListInsertFifo>
        }
 80102a2:	bf00      	nop
 80102a4:	3708      	adds	r7, #8
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	20002644 	.word	0x20002644

080102b0 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 80102b8:	2300      	movs	r3, #0
 80102ba:	613b      	str	r3, [r7, #16]
 80102bc:	e01d      	b.n	80102fa <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d003      	beq.n	80102cc <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	33a4      	adds	r3, #164	@ 0xa4
 80102c8:	617b      	str	r3, [r7, #20]
 80102ca:	e002      	b.n	80102d2 <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	3390      	adds	r3, #144	@ 0x90
 80102d0:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102da:	d10b      	bne.n	80102f4 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80102dc:	e006      	b.n	80102ec <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	68db      	ldr	r3, [r3, #12]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f7ff ffb6 	bl	8010258 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1f4      	bne.n	80102de <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	3301      	adds	r3, #1
 80102f8:	613b      	str	r3, [r7, #16]
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	ddde      	ble.n	80102be <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8010300:	bf00      	nop
 8010302:	bf00      	nop
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
	...

0801030c <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 801030c:	b580      	push	{r7, lr}
 801030e:	b086      	sub	sp, #24
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	607a      	str	r2, [r7, #4]
 8010318:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 801031a:	2301      	movs	r3, #1
 801031c:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 801031e:	4b18      	ldr	r3, [pc, #96]	@ (8010380 <xTCPWindowCreate+0x74>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d102      	bne.n	801032c <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8010326:	f7ff fe51 	bl	800ffcc <prvCreateSectors>
 801032a:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	3390      	adds	r3, #144	@ 0x90
 8010330:	4618      	mov	r0, r3
 8010332:	f003 fba2 	bl	8013a7a <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	33a4      	adds	r3, #164	@ 0xa4
 801033a:	4618      	mov	r0, r3
 801033c:	f003 fb9d 	bl	8013a7a <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	3340      	adds	r3, #64	@ 0x40
 8010344:	4618      	mov	r0, r3
 8010346:	f003 fb98 	bl	8013a7a <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	3354      	adds	r3, #84	@ 0x54
 801034e:	4618      	mov	r0, r3
 8010350:	f003 fb93 	bl	8013a7a <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	3368      	adds	r3, #104	@ 0x68
 8010358:	4618      	mov	r0, r3
 801035a:	f003 fb8e 	bl	8013a7a <vListInitialise>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	68ba      	ldr	r2, [r7, #8]
 8010362:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 801036a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801036c:	6a3a      	ldr	r2, [r7, #32]
 801036e:	6839      	ldr	r1, [r7, #0]
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f000 f807 	bl	8010384 <vTCPWindowInit>

        return xReturn;
 8010376:	697b      	ldr	r3, [r7, #20]
    }
 8010378:	4618      	mov	r0, r3
 801037a:	3718      	adds	r7, #24
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	20002640 	.word	0x20002640

08010384 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 8010384:	b480      	push	{r7}
 8010386:	b087      	sub	sp, #28
 8010388:	af00      	add	r7, sp, #0
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	60b9      	str	r1, [r7, #8]
 801038e:	607a      	str	r2, [r7, #4]
 8010390:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 8010392:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8010396:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 801039e:	68fa      	ldr	r2, [r7, #12]
 80103a0:	7813      	ldrb	r3, [r2, #0]
 80103a2:	f043 0301 	orr.w	r3, r3, #1
 80103a6:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d024      	beq.n	80103f8 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d004      	beq.n	80103c2 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	b29a      	uxth	r2, r3
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80103c8:	461a      	mov	r2, r3
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d304      	bcc.n	80103da <vTCPWindowInit+0x56>
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d10e      	bne.n	80103f8 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	685a      	ldr	r2, [r3, #4]
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80103e4:	683a      	ldr	r2, [r7, #0]
 80103e6:	fb03 f202 	mul.w	r2, r3, r2
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	b29a      	uxth	r2, r3
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	697a      	ldr	r2, [r7, #20]
 80103fc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	68ba      	ldr	r2, [r7, #8]
 8010402:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	68ba      	ldr	r2, [r7, #8]
 8010408:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	68ba      	ldr	r2, [r7, #8]
 801040e:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 801042e:	bf00      	nop
 8010430:	371c      	adds	r7, #28
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr

0801043a <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 801043a:	b580      	push	{r7, lr}
 801043c:	b08a      	sub	sp, #40	@ 0x28
 801043e:	af00      	add	r7, sp, #0
 8010440:	60f8      	str	r0, [r7, #12]
 8010442:	60b9      	str	r1, [r7, #8]
 8010444:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8010446:	2300      	movs	r3, #0
 8010448:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4413      	add	r3, r2
 8010450:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	33ac      	adds	r3, #172	@ 0xac
 8010456:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	623b      	str	r3, [r7, #32]
 801045e:	e027      	b.n	80104b0 <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010460:	6a3b      	ldr	r3, [r7, #32]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68b9      	ldr	r1, [r7, #8]
 801046c:	4618      	mov	r0, r3
 801046e:	f7ff fd0e 	bl	800fe8e <xSequenceGreaterThanOrEqual>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d018      	beq.n	80104aa <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	69f9      	ldr	r1, [r7, #28]
 801047e:	4618      	mov	r0, r3
 8010480:	f7ff fcd9 	bl	800fe36 <xSequenceLessThan>
 8010484:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00f      	beq.n	80104aa <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 801048a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00a      	beq.n	80104a6 <xTCPWindowRxConfirm+0x6c>
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4619      	mov	r1, r3
 801049a:	4610      	mov	r0, r2
 801049c:	f7ff fccb 	bl	800fe36 <xSequenceLessThan>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d001      	beq.n	80104aa <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 80104aa:	6a3b      	ldr	r3, [r7, #32]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 80104b0:	6a3a      	ldr	r2, [r7, #32]
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d1d3      	bne.n	8010460 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 80104b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d003      	beq.n	80104c6 <xTCPWindowRxConfirm+0x8c>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80104be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c0:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	429a      	cmp	r2, r3
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 80104c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80104c8:	4618      	mov	r0, r3
 80104ca:	3728      	adds	r7, #40	@ 0x28
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b086      	sub	sp, #24
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	691b      	ldr	r3, [r3, #16]
 80104de:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 80104e0:	693a      	ldr	r2, [r7, #16]
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	4413      	add	r3, r2
 80104e6:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d02c      	beq.n	801054c <prvTCPWindowRx_ExpectedRX+0x7c>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	6939      	ldr	r1, [r7, #16]
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f7ff ff9d 	bl	801043a <xTCPWindowRxConfirm>
 8010500:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d002      	beq.n	801050e <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8010508:	68b8      	ldr	r0, [r7, #8]
 801050a:	f7ff fea5 	bl	8010258 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d1f0      	bne.n	80104f6 <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8010514:	6979      	ldr	r1, [r7, #20]
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff fda8 	bl	801006c <xTCPWindowRxFind>
 801051c:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d009      	beq.n	8010538 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	461a      	mov	r2, r3
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	4413      	add	r3, r2
 801052e:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8010530:	68b8      	ldr	r0, [r7, #8]
 8010532:	f7ff fe91 	bl	8010258 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8010536:	e7ed      	b.n	8010514 <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8010538:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 801053a:	68fa      	ldr	r2, [r7, #12]
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	429a      	cmp	r2, r3
 8010540:	d004      	beq.n	801054c <prvTCPWindowRx_ExpectedRX+0x7c>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	1ad2      	subs	r2, r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	631a      	str	r2, [r3, #48]	@ 0x30
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	697a      	ldr	r2, [r7, #20]
 8010550:	611a      	str	r2, [r3, #16]
        }
 8010552:	bf00      	nop
 8010554:	3718      	adds	r7, #24
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
	...

0801055c <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 801055c:	b580      	push	{r7, lr}
 801055e:	b08a      	sub	sp, #40	@ 0x28
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 8010568:	f04f 33ff 	mov.w	r3, #4294967295
 801056c:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 801056e:	68ba      	ldr	r2, [r7, #8]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	4413      	add	r3, r2
 8010574:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	691b      	ldr	r3, [r3, #16]
 801057a:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801057c:	6a39      	ldr	r1, [r7, #32]
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f7ff fd74 	bl	801006c <xTCPWindowRxFind>
 8010584:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d006      	beq.n	801059a <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	689b      	ldr	r3, [r3, #8]
 8010590:	461a      	mov	r2, r3
 8010592:	6a3b      	ldr	r3, [r7, #32]
 8010594:	4413      	add	r3, r2
 8010596:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8010598:	e7f0      	b.n	801057c <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 801059a:	bf00      	nop
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	4a18      	ldr	r2, [pc, #96]	@ (8010600 <prvTCPWindowRx_UnexpectedRX+0xa4>)
 80105a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6a3a      	ldr	r2, [r7, #32]
 80105b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	220c      	movs	r2, #12
 80105b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80105bc:	68b9      	ldr	r1, [r7, #8]
 80105be:	68f8      	ldr	r0, [r7, #12]
 80105c0:	f7ff fd54 	bl	801006c <xTCPWindowRxFind>
 80105c4:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d114      	bne.n	80105f6 <prvTCPWindowRx_UnexpectedRX+0x9a>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	2301      	movs	r3, #1
 80105d0:	68b9      	ldr	r1, [r7, #8]
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f7ff fd72 	bl	80100bc <xTCPWindowNew>
 80105d8:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d104      	bne.n	80105ea <prvTCPWindowRx_UnexpectedRX+0x8e>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2200      	movs	r2, #0
 80105e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80105e8:	e005      	b.n	80105f6 <prvTCPWindowRx_UnexpectedRX+0x9a>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 80105ea:	68ba      	ldr	r2, [r7, #8]
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	1ad3      	subs	r3, r2, r3
 80105f0:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 80105f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80105f8:	4618      	mov	r0, r3
 80105fa:	3728      	adds	r7, #40	@ 0x28
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	0101050a 	.word	0x0101050a

08010604 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8010604:	b580      	push	{r7, lr}
 8010606:	b08c      	sub	sp, #48	@ 0x30
 8010608:	af00      	add	r7, sp, #0
 801060a:	60f8      	str	r0, [r7, #12]
 801060c:	60b9      	str	r1, [r7, #8]
 801060e:	607a      	str	r2, [r7, #4]
 8010610:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8010612:	f04f 33ff 	mov.w	r3, #4294967295
 8010616:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8010620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010622:	2200      	movs	r2, #0
 8010624:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	691b      	ldr	r3, [r3, #16]
 801062a:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 801062c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801062e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010630:	4413      	add	r3, r2
 8010632:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8010634:	69fa      	ldr	r2, [r7, #28]
 8010636:	6a3b      	ldr	r3, [r7, #32]
 8010638:	1ad3      	subs	r3, r2, r3
 801063a:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 801063c:	69bb      	ldr	r3, [r7, #24]
 801063e:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8010640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010642:	6a3b      	ldr	r3, [r7, #32]
 8010644:	1ad3      	subs	r3, r2, r3
 8010646:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	2b00      	cmp	r3, #0
 8010650:	da0f      	bge.n	8010672 <lTCPWindowRxCheck+0x6e>
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	2b00      	cmp	r3, #0
 8010656:	dd0c      	ble.n	8010672 <lTCPWindowRxCheck+0x6e>
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010664:	4413      	add	r3, r2
 8010666:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 8010668:	693b      	ldr	r3, [r7, #16]
 801066a:	425b      	negs	r3, r3
 801066c:	461a      	mov	r2, r3
 801066e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010670:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	2200      	movs	r2, #0
 8010676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	2200      	movs	r2, #0
 801067e:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8010680:	6a3a      	ldr	r2, [r7, #32]
 8010682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010684:	429a      	cmp	r2, r3
 8010686:	d10a      	bne.n	801069e <lTCPWindowRxCheck+0x9a>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 8010688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	429a      	cmp	r2, r3
 801068e:	d818      	bhi.n	80106c2 <lTCPWindowRxCheck+0xbe>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8010690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010692:	68f8      	ldr	r0, [r7, #12]
 8010694:	f7ff ff1c 	bl	80104d0 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 8010698:	2300      	movs	r3, #0
 801069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801069c:	e011      	b.n	80106c2 <lTCPWindowRxCheck+0xbe>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 801069e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a0:	3301      	adds	r3, #1
 80106a2:	6a3a      	ldr	r2, [r7, #32]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d00c      	beq.n	80106c2 <lTCPWindowRxCheck+0xbe>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	dd09      	ble.n	80106c2 <lTCPWindowRxCheck+0xbe>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	697a      	ldr	r2, [r7, #20]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	dc05      	bgt.n	80106c2 <lTCPWindowRxCheck+0xbe>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 80106b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106ba:	68f8      	ldr	r0, [r7, #12]
 80106bc:	f7ff ff4e 	bl	801055c <prvTCPWindowRx_UnexpectedRX>
 80106c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 80106c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80106c4:	4618      	mov	r0, r3
 80106c6:	3730      	adds	r7, #48	@ 0x30
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 80106cc:	b480      	push	{r7}
 80106ce:	b087      	sub	sp, #28
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4413      	add	r3, r2
 80106de:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 80106e0:	697a      	ldr	r2, [r7, #20]
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	db03      	blt.n	80106f0 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 80106e8:	697a      	ldr	r2, [r7, #20]
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 80106f0:	697b      	ldr	r3, [r7, #20]
        }
 80106f2:	4618      	mov	r0, r3
 80106f4:	371c      	adds	r7, #28
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 80106fe:	b580      	push	{r7, lr}
 8010700:	b086      	sub	sp, #24
 8010702:	af00      	add	r7, sp, #0
 8010704:	60f8      	str	r0, [r7, #12]
 8010706:	60b9      	str	r1, [r7, #8]
 8010708:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	685a      	ldr	r2, [r3, #4]
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	1ad3      	subs	r3, r2, r3
 8010714:	4619      	mov	r1, r3
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7fa f8ce 	bl	800a8b8 <FreeRTOS_min_int32>
 801071c:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	689a      	ldr	r2, [r3, #8]
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	441a      	add	r2, r3
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	689a      	ldr	r2, [r3, #8]
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	429a      	cmp	r2, r3
 8010734:	db02      	blt.n	801073c <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2200      	movs	r2, #0
 801073a:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	441a      	add	r2, r3
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	635a      	str	r2, [r3, #52]	@ 0x34
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8010748:	697b      	ldr	r3, [r7, #20]
        }
 801074a:	4618      	mov	r0, r3
 801074c:	3718      	adds	r7, #24
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8010752:	b580      	push	{r7, lr}
 8010754:	b08a      	sub	sp, #40	@ 0x28
 8010756:	af00      	add	r7, sp, #0
 8010758:	60f8      	str	r0, [r7, #12]
 801075a:	60b9      	str	r1, [r7, #8]
 801075c:	607a      	str	r2, [r7, #4]
 801075e:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8010764:	2300      	movs	r3, #0
 8010766:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010770:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8010772:	69bb      	ldr	r3, [r7, #24]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d06a      	beq.n	801084e <lTCPWindowTxAdd+0xfc>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	689a      	ldr	r2, [r3, #8]
 801077c:	69bb      	ldr	r3, [r7, #24]
 801077e:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8010780:	429a      	cmp	r2, r3
 8010782:	da64      	bge.n	801084e <lTCPWindowTxAdd+0xfc>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	7d9b      	ldrb	r3, [r3, #22]
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 801078e:	2b00      	cmp	r3, #0
 8010790:	d15d      	bne.n	801084e <lTCPWindowTxAdd+0xfc>
                ( pxSegment->lDataLength != 0 ) )
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8010796:	2b00      	cmp	r3, #0
 8010798:	d059      	beq.n	801084e <lTCPWindowTxAdd+0xfc>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 801079a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801079c:	69b9      	ldr	r1, [r7, #24]
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f7ff ffad 	bl	80106fe <prvTCPWindowTxAdd_FrontSegment>
 80107a4:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 80107a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 80107ae:	6a3a      	ldr	r2, [r7, #32]
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	4413      	add	r3, r2
 80107b4:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80107b6:	697a      	ldr	r2, [r7, #20]
 80107b8:	6839      	ldr	r1, [r7, #0]
 80107ba:	69f8      	ldr	r0, [r7, #28]
 80107bc:	f7ff ff86 	bl	80106cc <lTCPIncrementTxPosition>
 80107c0:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 80107c2:	e044      	b.n	801084e <lTCPWindowTxAdd+0xfc>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80107ce:	461a      	mov	r2, r3
 80107d0:	2300      	movs	r3, #0
 80107d2:	68f8      	ldr	r0, [r7, #12]
 80107d4:	f7ff fc72 	bl	80100bc <xTCPWindowNew>
 80107d8:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 80107da:	69bb      	ldr	r3, [r7, #24]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d03a      	beq.n	8010856 <lTCPWindowTxAdd+0x104>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 80107e0:	69bb      	ldr	r3, [r7, #24]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	4619      	mov	r1, r3
 80107e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80107e8:	f7fa f866 	bl	800a8b8 <FreeRTOS_min_int32>
 80107ec:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	697a      	ldr	r2, [r7, #20]
 80107f2:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	69fa      	ldr	r2, [r7, #28]
 80107f8:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 80107fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8010802:	697a      	ldr	r2, [r7, #20]
 8010804:	6839      	ldr	r1, [r7, #0]
 8010806:	69f8      	ldr	r0, [r7, #28]
 8010808:	f7ff ff60 	bl	80106cc <lTCPIncrementTxPosition>
 801080c:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	441a      	add	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 801081a:	6a3a      	ldr	r2, [r7, #32]
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	4413      	add	r3, r2
 8010820:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8010828:	69bb      	ldr	r3, [r7, #24]
 801082a:	3318      	adds	r3, #24
 801082c:	4619      	mov	r1, r3
 801082e:	4610      	mov	r0, r2
 8010830:	f7ff fb42 	bl	800feb8 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	689a      	ldr	r2, [r3, #8]
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	685b      	ldr	r3, [r3, #4]
 801083c:	429a      	cmp	r2, r3
 801083e:	da03      	bge.n	8010848 <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	69ba      	ldr	r2, [r7, #24]
 8010844:	67da      	str	r2, [r3, #124]	@ 0x7c
 8010846:	e002      	b.n	801084e <lTCPWindowTxAdd+0xfc>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2200      	movs	r2, #0
 801084c:	67da      	str	r2, [r3, #124]	@ 0x7c
            while( lBytesLeft > 0 )
 801084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010850:	2b00      	cmp	r3, #0
 8010852:	dcb7      	bgt.n	80107c4 <lTCPWindowTxAdd+0x72>
 8010854:	e000      	b.n	8010858 <lTCPWindowTxAdd+0x106>
                    if( lDone != 0 )
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
                    }

                    break;
 8010856:	bf00      	nop
                }
            }

            return lDone;
 8010858:	6a3b      	ldr	r3, [r7, #32]
        }
 801085a:	4618      	mov	r0, r3
 801085c:	3728      	adds	r7, #40	@ 0x28
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8010862:	b480      	push	{r7}
 8010864:	b083      	sub	sp, #12
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010870:	2b00      	cmp	r3, #0
 8010872:	d101      	bne.n	8010878 <xTCPWindowTxDone+0x16>
 8010874:	2301      	movs	r3, #1
 8010876:	e000      	b.n	801087a <xTCPWindowTxDone+0x18>
 8010878:	2300      	movs	r3, #0
        }
 801087a:	4618      	mov	r0, r3
 801087c:	370c      	adds	r7, #12
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr

08010886 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8010886:	b580      	push	{r7, lr}
 8010888:	b086      	sub	sp, #24
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
 801088e:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	3354      	adds	r3, #84	@ 0x54
 8010894:	4618      	mov	r0, r3
 8010896:	f7ff fcc6 	bl	8010226 <xTCPWindowPeekHead>
 801089a:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d102      	bne.n	80108a8 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 80108a2:	2300      	movs	r3, #0
 80108a4:	613b      	str	r3, [r7, #16]
 80108a6:	e02f      	b.n	8010908 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6a1b      	ldr	r3, [r3, #32]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d306      	bcc.n	80108c2 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6a1b      	ldr	r3, [r3, #32]
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	617b      	str	r3, [r7, #20]
 80108c0:	e001      	b.n	80108c6 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 80108c2:	2300      	movs	r3, #0
 80108c4:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 80108c6:	6979      	ldr	r1, [r7, #20]
 80108c8:	6838      	ldr	r0, [r7, #0]
 80108ca:	f7fa f805 	bl	800a8d8 <FreeRTOS_min_uint32>
 80108ce:	4602      	mov	r2, r0
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	1a9b      	subs	r3, r3, r2
 80108d4:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	689b      	ldr	r3, [r3, #8]
 80108da:	461a      	mov	r2, r3
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	4293      	cmp	r3, r2
 80108e0:	d302      	bcc.n	80108e8 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 80108e2:	2301      	movs	r3, #1
 80108e4:	613b      	str	r3, [r7, #16]
 80108e6:	e001      	b.n	80108ec <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 80108e8:	2300      	movs	r3, #0
 80108ea:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d00a      	beq.n	8010908 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	689b      	ldr	r3, [r3, #8]
 80108fa:	4619      	mov	r1, r3
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 8010900:	429a      	cmp	r2, r3
 8010902:	d201      	bcs.n	8010908 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8010904:	2300      	movs	r3, #0
 8010906:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8010908:	693b      	ldr	r3, [r7, #16]
        }
 801090a:	4618      	mov	r0, r3
 801090c:	3718      	adds	r7, #24
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8010912:	b580      	push	{r7, lr}
 8010914:	b08a      	sub	sp, #40	@ 0x28
 8010916:	af00      	add	r7, sp, #0
 8010918:	60f8      	str	r0, [r7, #12]
 801091a:	60b9      	str	r1, [r7, #8]
 801091c:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 801092c:	2301      	movs	r3, #1
 801092e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010930:	e050      	b.n	80109d4 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	3368      	adds	r3, #104	@ 0x68
 8010936:	4618      	mov	r0, r3
 8010938:	f7ff fc75 	bl	8010226 <xTCPWindowPeekHead>
 801093c:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 801093e:	6a3b      	ldr	r3, [r7, #32]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d01f      	beq.n	8010984 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010948:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 801094a:	6a3b      	ldr	r3, [r7, #32]
 801094c:	3310      	adds	r3, #16
 801094e:	4618      	mov	r0, r3
 8010950:	f7ff facf 	bl	800fef2 <ulTimerGetAge>
 8010954:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8010956:	6a3b      	ldr	r3, [r7, #32]
 8010958:	7d1b      	ldrb	r3, [r3, #20]
 801095a:	461a      	mov	r2, r3
 801095c:	2301      	movs	r3, #1
 801095e:	4093      	lsls	r3, r2
 8010960:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	69fa      	ldr	r2, [r7, #28]
 8010966:	fb02 f303 	mul.w	r3, r2, r3
 801096a:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 801096c:	697a      	ldr	r2, [r7, #20]
 801096e:	69bb      	ldr	r3, [r7, #24]
 8010970:	429a      	cmp	r2, r3
 8010972:	d904      	bls.n	801097e <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8010974:	697a      	ldr	r2, [r7, #20]
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	1ad2      	subs	r2, r2, r3
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 801097e:	2301      	movs	r3, #1
 8010980:	627b      	str	r3, [r7, #36]	@ 0x24
 8010982:	e027      	b.n	80109d4 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	3354      	adds	r3, #84	@ 0x54
 8010988:	4618      	mov	r0, r3
 801098a:	f7ff fc4c 	bl	8010226 <xTCPWindowPeekHead>
 801098e:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d102      	bne.n	801099c <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8010996:	2300      	movs	r3, #0
 8010998:	627b      	str	r3, [r7, #36]	@ 0x24
 801099a:	e01b      	b.n	80109d4 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801099c:	68b9      	ldr	r1, [r7, #8]
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f7ff ff71 	bl	8010886 <prvTCPWindowTxHasSpace>
 80109a4:	4603      	mov	r3, r0
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d102      	bne.n	80109b0 <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 80109aa:	2300      	movs	r3, #0
 80109ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80109ae:	e011      	b.n	80109d4 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	f003 0302 	and.w	r3, r3, #2
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d008      	beq.n	80109d0 <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 80109be:	6a3b      	ldr	r3, [r7, #32]
 80109c0:	689a      	ldr	r2, [r3, #8]
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80109c6:	429a      	cmp	r2, r3
 80109c8:	da02      	bge.n	80109d0 <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 80109ca:	2300      	movs	r3, #0
 80109cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80109ce:	e001      	b.n	80109d4 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 80109d0:	2301      	movs	r3, #1
 80109d2:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 80109d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80109d6:	4618      	mov	r0, r3
 80109d8:	3728      	adds	r7, #40	@ 0x28
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}

080109de <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 80109de:	b580      	push	{r7, lr}
 80109e0:	b084      	sub	sp, #16
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	3368      	adds	r3, #104	@ 0x68
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7ff fc1b 	bl	8010226 <xTCPWindowPeekHead>
 80109f0:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d021      	beq.n	8010a3c <pxTCPWindowTx_GetWaitQueue+0x5e>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	7d1b      	ldrb	r3, [r3, #20]
 80109fc:	461a      	mov	r2, r3
 80109fe:	2301      	movs	r3, #1
 8010a00:	4093      	lsls	r3, r2
 8010a02:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a08:	461a      	mov	r2, r3
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	fb02 f303 	mul.w	r3, r2, r3
 8010a10:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	3310      	adds	r3, #16
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7ff fa6b 	bl	800fef2 <ulTimerGetAge>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d209      	bcs.n	8010a38 <pxTCPWindowTx_GetWaitQueue+0x5a>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	3368      	adds	r3, #104	@ 0x68
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7ff fbe3 	bl	80101f4 <xTCPWindowGetHead>
 8010a2e:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2200      	movs	r2, #0
 8010a34:	755a      	strb	r2, [r3, #21]
 8010a36:	e001      	b.n	8010a3c <pxTCPWindowTx_GetWaitQueue+0x5e>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
        }
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}

08010a46 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8010a46:	b580      	push	{r7, lr}
 8010a48:	b084      	sub	sp, #16
 8010a4a:	af00      	add	r7, sp, #0
 8010a4c:	6078      	str	r0, [r7, #4]
 8010a4e:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	3354      	adds	r3, #84	@ 0x54
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7ff fbe6 	bl	8010226 <xTCPWindowPeekHead>
 8010a5a:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d02e      	beq.n	8010ac0 <pxTCPWindowTx_GetTXQueue+0x7a>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	f003 0302 	and.w	r3, r3, #2
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d008      	beq.n	8010a82 <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	689a      	ldr	r2, [r3, #8]
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	da02      	bge.n	8010a82 <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	60fb      	str	r3, [r7, #12]
 8010a80:	e01e      	b.n	8010ac0 <pxTCPWindowTx_GetTXQueue+0x7a>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8010a82:	6839      	ldr	r1, [r7, #0]
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7ff fefe 	bl	8010886 <prvTCPWindowTxHasSpace>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d102      	bne.n	8010a96 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 8010a90:	2300      	movs	r3, #0
 8010a92:	60fb      	str	r3, [r7, #12]
 8010a94:	e014      	b.n	8010ac0 <pxTCPWindowTx_GetTXQueue+0x7a>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	3354      	adds	r3, #84	@ 0x54
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7ff fbaa 	bl	80101f4 <xTCPWindowGetHead>
 8010aa0:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010aa6:	68fa      	ldr	r2, [r7, #12]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d102      	bne.n	8010ab2 <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	68fa      	ldr	r2, [r7, #12]
 8010ab8:	6892      	ldr	r2, [r2, #8]
 8010aba:	441a      	add	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	629a      	str	r2, [r3, #40]	@ 0x28
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
        }
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3710      	adds	r7, #16
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}

08010aca <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8010aca:	b580      	push	{r7, lr}
 8010acc:	b088      	sub	sp, #32
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	60f8      	str	r0, [r7, #12]
 8010ad2:	60b9      	str	r1, [r7, #8]
 8010ad4:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	3340      	adds	r3, #64	@ 0x40
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ff fb88 	bl	80101f4 <xTCPWindowGetHead>
 8010ae4:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d10b      	bne.n	8010b0c <ulTCPWindowTxGet+0x42>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8010af4:	68f8      	ldr	r0, [r7, #12]
 8010af6:	f7ff ff72 	bl	80109de <pxTCPWindowTx_GetWaitQueue>
 8010afa:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d104      	bne.n	8010b0c <ulTCPWindowTxGet+0x42>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8010b02:	68b9      	ldr	r1, [r7, #8]
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f7ff ff9e 	bl	8010a46 <pxTCPWindowTx_GetTXQueue>
 8010b0a:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d049      	beq.n	8010ba6 <ulTCPWindowTxGet+0xdc>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d00d      	beq.n	8010b36 <ulTCPWindowTxGet+0x6c>
	__asm volatile
 8010b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b1e:	b672      	cpsid	i
 8010b20:	f383 8811 	msr	BASEPRI, r3
 8010b24:	f3bf 8f6f 	isb	sy
 8010b28:	f3bf 8f4f 	dsb	sy
 8010b2c:	b662      	cpsie	i
 8010b2e:	613b      	str	r3, [r7, #16]
}
 8010b30:	bf00      	nop
 8010b32:	bf00      	nop
 8010b34:	e7fd      	b.n	8010b32 <ulTCPWindowTxGet+0x68>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	3318      	adds	r3, #24
 8010b40:	4619      	mov	r1, r3
 8010b42:	4610      	mov	r0, r2
 8010b44:	f7ff f9b8 	bl	800feb8 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8010b48:	69fa      	ldr	r2, [r7, #28]
 8010b4a:	7d93      	ldrb	r3, [r2, #22]
 8010b4c:	f043 0301 	orr.w	r3, r3, #1
 8010b50:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	7d1b      	ldrb	r3, [r3, #20]
 8010b56:	3301      	adds	r3, #1
 8010b58:	b2da      	uxtb	r2, r3
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	7d1b      	ldrb	r3, [r3, #20]
 8010b62:	2b04      	cmp	r3, #4
 8010b64:	d10f      	bne.n	8010b86 <ulTCPWindowTxGet+0xbc>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	689a      	ldr	r2, [r3, #8]
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8010b70:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d907      	bls.n	8010b86 <ulTCPWindowTxGet+0xbc>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8010b80:	8afa      	ldrh	r2, [r7, #22]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	3310      	adds	r3, #16
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7ff f9a4 	bl	800fed8 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8010b90:	69fb      	ldr	r3, [r7, #28]
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	68da      	ldr	r2, [r3, #12]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8010ba0:	69fb      	ldr	r3, [r7, #28]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8010ba6:	69bb      	ldr	r3, [r7, #24]
        }
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3720      	adds	r7, #32
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	3310      	adds	r3, #16
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7ff f997 	bl	800fef2 <ulTimerGetAge>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	617b      	str	r3, [r7, #20]
            int32_t lSum = 0;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	60bb      	str	r3, [r7, #8]
            int32_t lWeight = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	613b      	str	r3, [r7, #16]
            int32_t lDivisor = 0;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	60fb      	str	r3, [r7, #12]

            mS = ( mS < 0 ) ? ipINT32_MAX_VALUE : mS;
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	db01      	blt.n	8010bde <prvTCPWindowTxCheckAck_CalcSRTT+0x2e>
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	e001      	b.n	8010be2 <prvTCPWindowTxCheckAck_CalcSRTT+0x32>
 8010bde:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010be2:	617b      	str	r3, [r7, #20]

            if( pxWindow->lSRTT >= mS )
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010be8:	697a      	ldr	r2, [r7, #20]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	dc09      	bgt.n	8010c02 <prvTCPWindowTxCheckAck_CalcSRTT+0x52>
            {
                /* RTT becomes smaller: adapt slowly. */
                lWeight = winSRTT_DECREMENT_CURRENT;
 8010bee:	2307      	movs	r3, #7
 8010bf0:	613b      	str	r3, [r7, #16]
                lDivisor = winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT;
 8010bf2:	2308      	movs	r3, #8
 8010bf4:	60fb      	str	r3, [r7, #12]
                mS = FreeRTOS_multiply_int32( mS,
 8010bf6:	2101      	movs	r1, #1
 8010bf8:	6978      	ldr	r0, [r7, #20]
 8010bfa:	f7f9 feb8 	bl	800a96e <FreeRTOS_multiply_int32>
 8010bfe:	6178      	str	r0, [r7, #20]
 8010c00:	e008      	b.n	8010c14 <prvTCPWindowTxCheckAck_CalcSRTT+0x64>
                                              winSRTT_DECREMENT_NEW );
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                lWeight = winSRTT_INCREMENT_CURRENT;
 8010c02:	2306      	movs	r3, #6
 8010c04:	613b      	str	r3, [r7, #16]
                lDivisor = winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT;
 8010c06:	2308      	movs	r3, #8
 8010c08:	60fb      	str	r3, [r7, #12]
                mS = FreeRTOS_multiply_int32( mS,
 8010c0a:	2102      	movs	r1, #2
 8010c0c:	6978      	ldr	r0, [r7, #20]
 8010c0e:	f7f9 feae 	bl	800a96e <FreeRTOS_multiply_int32>
 8010c12:	6178      	str	r0, [r7, #20]
                                              winSRTT_INCREMENT_NEW );
            }

            lSum = FreeRTOS_multiply_int32( pxWindow->lSRTT, lWeight );
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c18:	6939      	ldr	r1, [r7, #16]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7f9 fea7 	bl	800a96e <FreeRTOS_multiply_int32>
 8010c20:	60b8      	str	r0, [r7, #8]
            lSum = FreeRTOS_add_int32( lSum, mS );
 8010c22:	6979      	ldr	r1, [r7, #20]
 8010c24:	68b8      	ldr	r0, [r7, #8]
 8010c26:	f7f9 fe77 	bl	800a918 <FreeRTOS_add_int32>
 8010c2a:	60b8      	str	r0, [r7, #8]
            pxWindow->lSRTT = lSum / lDivisor;
 8010c2c:	68ba      	ldr	r2, [r7, #8]
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	fb92 f2f3 	sdiv	r2, r2, r3
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010c40:	da03      	bge.n	8010c4a <prvTCPWindowTxCheckAck_CalcSRTT+0x9a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010c48:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8010c4a:	bf00      	nop
 8010c4c:	3718      	adds	r7, #24
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b08c      	sub	sp, #48	@ 0x30
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	60f8      	str	r0, [r7, #12]
 8010c5a:	60b9      	str	r1, [r7, #8]
 8010c5c:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	3398      	adds	r3, #152	@ 0x98
 8010c6a:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8010c72:	e06d      	b.n	8010d50 <prvTCPWindowTxCheckAck+0xfe>
            {
                xDoUnlink = pdFALSE;
 8010c74:	2300      	movs	r3, #0
 8010c76:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8010c84:	69bb      	ldr	r3, [r7, #24]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4619      	mov	r1, r3
 8010c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010c8c:	f7ff f8e9 	bl	800fe62 <xSequenceGreaterThan>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d15b      	bne.n	8010d4e <prvTCPWindowTxCheckAck+0xfc>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d163      	bne.n	8010d68 <prvTCPWindowTxCheckAck+0x116>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	689b      	ldr	r3, [r3, #8]
 8010ca4:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	7d9b      	ldrb	r3, [r3, #22]
 8010caa:	f003 0302 	and.w	r3, r3, #2
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d127      	bne.n	8010d04 <prvTCPWindowTxCheckAck+0xb2>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	4413      	add	r3, r2
 8010cbc:	6879      	ldr	r1, [r7, #4]
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7ff f8cf 	bl	800fe62 <xSequenceGreaterThan>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d006      	beq.n	8010cd8 <prvTCPWindowTxCheckAck+0x86>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8010cca:	69bb      	ldr	r3, [r7, #24]
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	69db      	ldr	r3, [r3, #28]
 8010cd2:	1ad3      	subs	r3, r2, r3
 8010cd4:	613b      	str	r3, [r7, #16]
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8010cd6:	e048      	b.n	8010d6a <prvTCPWindowTxCheckAck+0x118>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8010cd8:	69ba      	ldr	r2, [r7, #24]
 8010cda:	7d93      	ldrb	r3, [r2, #22]
 8010cdc:	f043 0302 	orr.w	r3, r3, #2
 8010ce0:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8010ce2:	69bb      	ldr	r3, [r7, #24]
 8010ce4:	7d1b      	ldrb	r3, [r3, #20]
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d10a      	bne.n	8010d00 <prvTCPWindowTxCheckAck+0xae>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8010cea:	69bb      	ldr	r3, [r7, #24]
 8010cec:	681a      	ldr	r2, [r3, #0]
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8010cf2:	687a      	ldr	r2, [r7, #4]
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d103      	bne.n	8010d00 <prvTCPWindowTxCheckAck+0xae>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8010cf8:	69b9      	ldr	r1, [r7, #24]
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f7ff ff58 	bl	8010bb0 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8010d00:	2301      	movs	r3, #1
 8010d02:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6a1b      	ldr	r3, [r3, #32]
 8010d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d10e      	bne.n	8010d2c <prvTCPWindowTxCheckAck+0xda>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	6a1a      	ldr	r2, [r3, #32]
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	441a      	add	r2, r3
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8010d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	4413      	add	r3, r2
 8010d20:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8010d22:	69b8      	ldr	r0, [r7, #24]
 8010d24:	f7ff fa98 	bl	8010258 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8010d2c:	6a3b      	ldr	r3, [r7, #32]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d008      	beq.n	8010d44 <prvTCPWindowTxCheckAck+0xf2>
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d004      	beq.n	8010d44 <prvTCPWindowTxCheckAck+0xf2>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	3318      	adds	r3, #24
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f002 ff25 	bl	8013b8e <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8010d44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	4413      	add	r3, r2
 8010d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d4c:	e000      	b.n	8010d50 <prvTCPWindowTxCheckAck+0xfe>
                    continue;
 8010d4e:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8010d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d008      	beq.n	8010d6a <prvTCPWindowTxCheckAck+0x118>
 8010d58:	6879      	ldr	r1, [r7, #4]
 8010d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d5c:	f7ff f86b 	bl	800fe36 <xSequenceLessThan>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d186      	bne.n	8010c74 <prvTCPWindowTxCheckAck+0x22>
 8010d66:	e000      	b.n	8010d6a <prvTCPWindowTxCheckAck+0x118>
                    break;
 8010d68:	bf00      	nop
            }

            return ulBytesConfirmed;
 8010d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3730      	adds	r7, #48	@ 0x30
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b086      	sub	sp, #24
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	3370      	adds	r3, #112	@ 0x70
 8010d86:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8010d8e:	e033      	b.n	8010df8 <prvTCPWindowFastRetransmit+0x84>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	7d9b      	ldrb	r3, [r3, #22]
 8010da0:	f003 0302 	and.w	r3, r3, #2
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d126      	bne.n	8010df8 <prvTCPWindowFastRetransmit+0x84>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	6839      	ldr	r1, [r7, #0]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff f840 	bl	800fe36 <xSequenceLessThan>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d01d      	beq.n	8010df8 <prvTCPWindowFastRetransmit+0x84>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	7d5b      	ldrb	r3, [r3, #21]
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	b2da      	uxtb	r2, r3
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	7d5b      	ldrb	r3, [r3, #21]
 8010dcc:	2b03      	cmp	r3, #3
 8010dce:	d113      	bne.n	8010df8 <prvTCPWindowFastRetransmit+0x84>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	751a      	strb	r2, [r3, #20]
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	3318      	adds	r3, #24
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f002 fed7 	bl	8013b8e <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	3318      	adds	r3, #24
 8010dea:	4619      	mov	r1, r3
 8010dec:	4610      	mov	r0, r2
 8010dee:	f7ff f863 	bl	800feb8 <vListInsertFifo>
                            ulCount++;
 8010df2:	693b      	ldr	r3, [r7, #16]
 8010df4:	3301      	adds	r3, #1
 8010df6:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d1c7      	bne.n	8010d90 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8010e00:	693b      	ldr	r3, [r7, #16]
        }
 8010e02:	4618      	mov	r0, r3
 8010e04:	3718      	adds	r7, #24
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b084      	sub	sp, #16
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
 8010e12:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6a1b      	ldr	r3, [r3, #32]
 8010e18:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8010e1a:	68b9      	ldr	r1, [r7, #8]
 8010e1c:	6838      	ldr	r0, [r7, #0]
 8010e1e:	f7fe fff5 	bl	800fe0c <xSequenceLessThanOrEqual>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	60fb      	str	r3, [r7, #12]
 8010e2c:	e005      	b.n	8010e3a <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8010e2e:	683a      	ldr	r2, [r7, #0]
 8010e30:	68b9      	ldr	r1, [r7, #8]
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f7ff ff0d 	bl	8010c52 <prvTCPWindowTxCheckAck>
 8010e38:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
        }
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3710      	adds	r7, #16
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b086      	sub	sp, #24
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	60b9      	str	r1, [r7, #8]
 8010e4e:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	6a1b      	ldr	r3, [r3, #32]
 8010e54:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	68b9      	ldr	r1, [r7, #8]
 8010e5a:	68f8      	ldr	r0, [r7, #12]
 8010e5c:	f7ff fef9 	bl	8010c52 <prvTCPWindowTxCheckAck>
 8010e60:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8010e62:	68b9      	ldr	r1, [r7, #8]
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f7ff ff85 	bl	8010d74 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8010e6a:	4b06      	ldr	r3, [pc, #24]	@ (8010e84 <ulTCPWindowTxSack+0x40>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	dd03      	ble.n	8010e7a <ulTCPWindowTxSack+0x36>
 8010e72:	6979      	ldr	r1, [r7, #20]
 8010e74:	68b8      	ldr	r0, [r7, #8]
 8010e76:	f7fe fff4 	bl	800fe62 <xSequenceGreaterThan>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8010e7a:	693b      	ldr	r3, [r7, #16]
        }
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3718      	adds	r7, #24
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	20002658 	.word	0x20002658

08010e88 <vProcessGeneratedUDPPacket>:
 *        packet such as cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d00d      	beq.n	8010eb2 <vProcessGeneratedUDPPacket+0x2a>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e9a:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	899b      	ldrh	r3, [r3, #12]
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ea6:	d103      	bne.n	8010eb0 <vProcessGeneratedUDPPacket+0x28>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                case ipIPv4_FRAME_TYPE:
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f000 f849 	bl	8010f40 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8010eae:	e000      	b.n	8010eb2 <vProcessGeneratedUDPPacket+0x2a>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8010eb0:	bf00      	nop
        }
    }
}
 8010eb2:	bf00      	nop
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}

08010eba <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForResolution )
{
 8010eba:	b580      	push	{r7, lr}
 8010ebc:	b088      	sub	sp, #32
 8010ebe:	af00      	add	r7, sp, #0
 8010ec0:	60f8      	str	r0, [r7, #12]
 8010ec2:	460b      	mov	r3, r1
 8010ec4:	607a      	str	r2, [r7, #4]
 8010ec6:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	61fb      	str	r3, [r7, #28]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d10d      	bne.n	8010eee <xProcessReceivedUDPPacket+0x34>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed6:	b672      	cpsid	i
 8010ed8:	f383 8811 	msr	BASEPRI, r3
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	f3bf 8f4f 	dsb	sy
 8010ee4:	b662      	cpsie	i
 8010ee6:	617b      	str	r3, [r7, #20]
}
 8010ee8:	bf00      	nop
 8010eea:	bf00      	nop
 8010eec:	e7fd      	b.n	8010eea <xProcessReceivedUDPPacket+0x30>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d10d      	bne.n	8010f12 <xProcessReceivedUDPPacket+0x58>
	__asm volatile
 8010ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010efa:	b672      	cpsid	i
 8010efc:	f383 8811 	msr	BASEPRI, r3
 8010f00:	f3bf 8f6f 	isb	sy
 8010f04:	f3bf 8f4f 	dsb	sy
 8010f08:	b662      	cpsie	i
 8010f0a:	613b      	str	r3, [r7, #16]
}
 8010f0c:	bf00      	nop
 8010f0e:	bf00      	nop
 8010f10:	e7fd      	b.n	8010f0e <xProcessReceivedUDPPacket+0x54>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f16:	61bb      	str	r3, [r7, #24]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8010f18:	69bb      	ldr	r3, [r7, #24]
 8010f1a:	899b      	ldrh	r3, [r3, #12]
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010f22:	d107      	bne.n	8010f34 <xProcessReceivedUDPPacket+0x7a>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8010f24:	897b      	ldrh	r3, [r7, #10]
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	4619      	mov	r1, r3
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f000 f902 	bl	8011134 <xProcessReceivedUDPPacket_IPv4>
 8010f30:	61f8      	str	r0, [r7, #28]
                                                          usPort, pxIsWaitingForResolution );
                break;
 8010f32:	e000      	b.n	8010f36 <xProcessReceivedUDPPacket+0x7c>
                                                          usPort, pxIsWaitingForResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8010f34:	bf00      	nop
    }

    return xReturn;
 8010f36:	69fb      	ldr	r3, [r7, #28]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3720      	adds	r7, #32
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b08e      	sub	sp, #56	@ 0x38
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eResolutionLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	695b      	ldr	r3, [r3, #20]
 8010f4c:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f52:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f58:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d104      	bne.n	8010f6c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f66:	3b2a      	subs	r3, #42	@ 0x2a
 8010f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f6a:	e003      	b.n	8010f74 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f70:	3b2a      	subs	r3, #42	@ 0x2a
 8010f72:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8010f74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010f76:	f107 0208 	add.w	r2, r7, #8
 8010f7a:	f107 030c 	add.w	r3, r7, #12
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7f6 ffb8 	bl	8007ef4 <eARPGetCacheEntry>
 8010f84:	4603      	mov	r3, r0
 8010f86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d102      	bne.n	8010f98 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8010f92:	68ba      	ldr	r2, [r7, #8]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eResolutionFailed )
 8010f98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f9c:	2b02      	cmp	r3, #2
 8010f9e:	d07f      	beq.n	80110a0 <vProcessGeneratedUDPPacket_IPv4+0x160>
    {
        if( eReturned == eResolutionCacheHit )
 8010fa0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d158      	bne.n	801105a <vProcessGeneratedUDPPacket_IPv4+0x11a>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8010fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010faa:	330e      	adds	r3, #14
 8010fac:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d01a      	beq.n	8010fec <vProcessGeneratedUDPPacket_IPv4+0xac>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8010fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fb8:	3322      	adds	r3, #34	@ 0x22
 8010fba:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8010fc0:	6a3b      	ldr	r3, [r7, #32]
 8010fc2:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8010fc8:	6a3b      	ldr	r3, [r7, #32]
 8010fca:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8010fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	3308      	adds	r3, #8
 8010fd2:	b29a      	uxth	r2, r3
 8010fd4:	6a3b      	ldr	r3, [r7, #32]
 8010fd6:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8010fd8:	6a3b      	ldr	r3, [r7, #32]
 8010fda:	889b      	ldrh	r3, [r3, #4]
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	6a3b      	ldr	r3, [r7, #32]
 8010fe0:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8010fe2:	6a3b      	ldr	r3, [r7, #32]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	719a      	strb	r2, [r3, #6]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8010fec:	4b50      	ldr	r3, [pc, #320]	@ (8011130 <vProcessGeneratedUDPPacket_IPv4+0x1f0>)
 8010fee:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff4:	3306      	adds	r3, #6
 8010ff6:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8010ff8:	2218      	movs	r2, #24
 8010ffa:	69f9      	ldr	r1, [r7, #28]
 8010ffc:	69b8      	ldr	r0, [r7, #24]
 8010ffe:	f006 fbd4 	bl	80177aa <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8011006:	2b00      	cmp	r3, #0
 8011008:	d109      	bne.n	801101e <vProcessGeneratedUDPPacket_IPv4+0xde>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 801100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801100c:	2201      	movs	r2, #1
 801100e:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8011010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011012:	b29b      	uxth	r3, r3
 8011014:	331c      	adds	r3, #28
 8011016:	b29a      	uxth	r2, r3
 8011018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101a:	805a      	strh	r2, [r3, #2]
 801101c:	e005      	b.n	801102a <vProcessGeneratedUDPPacket_IPv4+0xea>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 801101e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011020:	b29b      	uxth	r3, r3
 8011022:	331c      	adds	r3, #28
 8011024:	b29a      	uxth	r2, r3
 8011026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011028:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 801102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801102c:	885b      	ldrh	r3, [r3, #2]
 801102e:	b29a      	uxth	r2, r3
 8011030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011032:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	695a      	ldr	r2, [r3, #20]
 8011038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103a:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011040:	2b00      	cmp	r3, #0
 8011042:	d004      	beq.n	801104e <vProcessGeneratedUDPPacket_IPv4+0x10e>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011048:	681a      	ldr	r2, [r3, #0]
 801104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104c:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 801104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011050:	2200      	movs	r2, #0
 8011052:	719a      	strb	r2, [r3, #6]
 8011054:	2200      	movs	r2, #0
 8011056:	71da      	strb	r2, [r3, #7]
 8011058:	e022      	b.n	80110a0 <vProcessGeneratedUDPPacket_IPv4+0x160>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eResolutionCacheMiss )
 801105a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801105e:	2b00      	cmp	r3, #0
 8011060:	d11b      	bne.n	801109a <vProcessGeneratedUDPPacket_IPv4+0x15a>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2200      	movs	r2, #0
 8011066:	4619      	mov	r1, r3
 8011068:	2000      	movs	r0, #0
 801106a:	f7f6 fe31 	bl	8007cd0 <vARPRefreshCacheEntry>
            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */
            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress );
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	4618      	mov	r0, r3
 8011072:	f7fa f8b5 	bl	800b1e0 <FreeRTOS_FindEndPointOnNetMask>
 8011076:	4602      	mov	r2, r0
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011080:	2b00      	cmp	r3, #0
 8011082:	d103      	bne.n	801108c <vProcessGeneratedUDPPacket_IPv4+0x14c>
            {
                eReturned = eResolutionFailed;
 8011084:	2302      	movs	r3, #2
 8011086:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801108a:	e009      	b.n	80110a0 <vProcessGeneratedUDPPacket_IPv4+0x160>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801108c:	68fa      	ldr	r2, [r7, #12]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7f7 f970 	bl	8008378 <vARPGenerateRequestPacket>
 8011098:	e002      	b.n	80110a0 <vProcessGeneratedUDPPacket_IPv4+0x160>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eResolutionFailed;
 801109a:	2302      	movs	r3, #2
 801109c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eResolutionFailed )
 80110a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80110a4:	2b02      	cmp	r3, #2
 80110a6:	d03c      	beq.n	8011122 <vProcessGeneratedUDPPacket_IPv4+0x1e2>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d034      	beq.n	801111a <vProcessGeneratedUDPPacket_IPv4+0x1da>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110b6:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110bc:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	1d98      	adds	r0, r3, #6
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80110c6:	3338      	adds	r3, #56	@ 0x38
 80110c8:	2206      	movs	r2, #6
 80110ca:	4619      	mov	r1, r3
 80110cc:	f006 fb6d 	bl	80177aa <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110d4:	2b3b      	cmp	r3, #59	@ 0x3b
 80110d6:	d812      	bhi.n	80110fe <vProcessGeneratedUDPPacket_IPv4+0x1be>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80110de:	e008      	b.n	80110f2 <vProcessGeneratedUDPPacket_IPv4+0x1b2>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e6:	4413      	add	r3, r2
 80110e8:	2200      	movs	r2, #0
 80110ea:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80110ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ee:	3301      	adds	r3, #1
 80110f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80110f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110f4:	2b3b      	cmp	r3, #59	@ 0x3b
 80110f6:	ddf3      	ble.n	80110e0 <vProcessGeneratedUDPPacket_IPv4+0x1a0>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	223c      	movs	r2, #60	@ 0x3c
 80110fc:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d011      	beq.n	8011128 <vProcessGeneratedUDPPacket_IPv4+0x1e8>
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00d      	beq.n	8011128 <vProcessGeneratedUDPPacket_IPv4+0x1e8>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	2201      	movs	r2, #1
 8011112:	6879      	ldr	r1, [r7, #4]
 8011114:	6978      	ldr	r0, [r7, #20]
 8011116:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8011118:	e006      	b.n	8011128 <vProcessGeneratedUDPPacket_IPv4+0x1e8>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 fa34 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
}
 8011120:	e002      	b.n	8011128 <vProcessGeneratedUDPPacket_IPv4+0x1e8>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f000 fa30 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
}
 8011128:	bf00      	nop
 801112a:	3738      	adds	r7, #56	@ 0x38
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}
 8011130:	0801892c 	.word	0x0801892c

08011134 <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8011134:	b590      	push	{r4, r7, lr}
 8011136:	b09b      	sub	sp, #108	@ 0x6c
 8011138:	af02      	add	r7, sp, #8
 801113a:	60f8      	str	r0, [r7, #12]
 801113c:	460b      	mov	r3, r1
 801113e:	607a      	str	r2, [r7, #4]
 8011140:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8011142:	2301      	movs	r3, #1
 8011144:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d10d      	bne.n	8011168 <xProcessReceivedUDPPacket_IPv4+0x34>
	__asm volatile
 801114c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011150:	b672      	cpsid	i
 8011152:	f383 8811 	msr	BASEPRI, r3
 8011156:	f3bf 8f6f 	isb	sy
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	b662      	cpsie	i
 8011160:	647b      	str	r3, [r7, #68]	@ 0x44
}
 8011162:	bf00      	nop
 8011164:	bf00      	nop
 8011166:	e7fd      	b.n	8011164 <xProcessReceivedUDPPacket_IPv4+0x30>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801116c:	2b00      	cmp	r3, #0
 801116e:	d10d      	bne.n	801118c <xProcessReceivedUDPPacket_IPv4+0x58>
	__asm volatile
 8011170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011174:	b672      	cpsid	i
 8011176:	f383 8811 	msr	BASEPRI, r3
 801117a:	f3bf 8f6f 	isb	sy
 801117e:	f3bf 8f4f 	dsb	sy
 8011182:	b662      	cpsie	i
 8011184:	643b      	str	r3, [r7, #64]	@ 0x40
}
 8011186:	bf00      	nop
 8011188:	bf00      	nop
 801118a:	e7fd      	b.n	8011188 <xProcessReceivedUDPPacket_IPv4+0x54>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011190:	65bb      	str	r3, [r7, #88]	@ 0x58
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011196:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8011198:	897b      	ldrh	r3, [r7, #10]
 801119a:	4618      	mov	r0, r3
 801119c:	f7fa ffea 	bl	800c174 <pxUDPSocketLookup>
 80111a0:	6538      	str	r0, [r7, #80]	@ 0x50

    *pxIsWaitingForARPResolution = pdFALSE;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 80111a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 808c 	beq.w	80112c8 <xProcessReceivedUDPPacket_IPv4+0x194>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 80111b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d018      	beq.n	80111e8 <xProcessReceivedUDPPacket_IPv4+0xb4>
 80111b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d014      	beq.n	80111e8 <xProcessReceivedUDPPacket_IPv4+0xb4>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	f7f6 fd00 	bl	8007bc4 <xCheckRequiresARPResolution>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d105      	bne.n	80111d6 <xProcessReceivedUDPPacket_IPv4+0xa2>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2201      	movs	r2, #1
 80111ce:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 80111d0:	2300      	movs	r3, #0
 80111d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    break;
 80111d4:	e08f      	b.n	80112f6 <xProcessReceivedUDPPacket_IPv4+0x1c2>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80111d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111d8:	1d9a      	adds	r2, r3, #6
 80111da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111dc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80111e0:	4619      	mov	r1, r3
 80111e2:	4610      	mov	r0, r2
 80111e4:	f7f6 fd3e 	bl	8007c64 <vARPRefreshCacheEntryAge>
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ec:	332a      	adds	r3, #42	@ 0x2a
 80111ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80111f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111f4:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80111fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	695b      	ldr	r3, [r3, #20]
 8011200:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8011202:	2302      	movs	r3, #2
 8011204:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8011208:	2318      	movs	r3, #24
 801120a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 801120e:	897b      	ldrh	r3, [r7, #10]
 8011210:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 8011212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011214:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8011218:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 801121a:	2302      	movs	r3, #2
 801121c:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 801121e:	2318      	movs	r3, #24
 8011220:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011226:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 801122a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801122e:	f107 0310 	add.w	r3, r7, #16
 8011232:	9300      	str	r3, [sp, #0]
 8011234:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8011236:	460b      	mov	r3, r1
 8011238:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801123a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801123c:	47a0      	blx	r4
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <xProcessReceivedUDPPacket_IPv4+0x114>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8011244:	2300      	movs	r3, #0
 8011246:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
            #endif /* ipconfigUSE_CALLBACKS */

            #if ( ipconfigUDP_MAX_RX_PACKETS > 0U )
            {
                if( xReturn == pdPASS )
 8011248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801124a:	2b01      	cmp	r3, #1
 801124c:	d107      	bne.n	801125e <xProcessReceivedUDPPacket_IPv4+0x12a>
                {
                    if( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) >= pxSocket->u.xUDP.uxMaxPackets )
 801124e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011250:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011256:	429a      	cmp	r2, r3
 8011258:	d301      	bcc.n	801125e <xProcessReceivedUDPPacket_IPv4+0x12a>
                    {
                        FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket: buffer full %ld >= %ld port %u\n",
                                                 listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ),
                                                 pxSocket->u.xUDP.uxMaxPackets, pxSocket->usLocalPort ) );
                        xReturn = pdFAIL; /* we did not consume or release the buffer */
 801125a:	2300      	movs	r3, #0
 801125c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 801125e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011260:	2b01      	cmp	r3, #1
 8011262:	d148      	bne.n	80112f6 <xProcessReceivedUDPPacket_IPv4+0x1c2>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8011264:	f003 fe84 	bl	8014f70 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8011268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801126a:	3358      	adds	r3, #88	@ 0x58
 801126c:	68fa      	ldr	r2, [r7, #12]
 801126e:	4611      	mov	r1, r2
 8011270:	4618      	mov	r0, r3
 8011272:	f002 fc2f 	bl	8013ad4 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8011276:	f003 fe89 	bl	8014f8c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 801127a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d005      	beq.n	801128e <xProcessReceivedUDPPacket_IPv4+0x15a>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8011282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	2101      	movs	r1, #1
 8011288:	4618      	mov	r0, r3
 801128a:	f002 fb0c 	bl	80138a6 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 801128e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011292:	2b00      	cmp	r3, #0
 8011294:	d00c      	beq.n	80112b0 <xProcessReceivedUDPPacket_IPv4+0x17c>
 8011296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801129a:	f003 0301 	and.w	r3, r3, #1
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d006      	beq.n	80112b0 <xProcessReceivedUDPPacket_IPv4+0x17c>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80112a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2101      	movs	r1, #1
 80112aa:	4618      	mov	r0, r3
 80112ac:	f002 fafb 	bl	80138a6 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80112b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d01e      	beq.n	80112f6 <xProcessReceivedUDPPacket_IPv4+0x1c2>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80112b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112ba:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80112bc:	2300      	movs	r3, #0
 80112be:	2200      	movs	r2, #0
 80112c0:	2100      	movs	r1, #0
 80112c2:	f002 fe17 	bl	8013ef4 <xQueueGenericSend>
 80112c6:	e016      	b.n	80112f6 <xProcessReceivedUDPPacket_IPv4+0x1c2>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80112c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112ca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	2b35      	cmp	r3, #53	@ 0x35
 80112d0:	d10f      	bne.n	80112f2 <xProcessReceivedUDPPacket_IPv4+0x1be>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80112d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112d4:	1d98      	adds	r0, r3, #6
 80112d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112d8:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80112e0:	461a      	mov	r2, r3
 80112e2:	f7f6 fcf5 	bl	8007cd0 <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f7f7 f951 	bl	800858e <ulDNSHandlePacket>
 80112ec:	4603      	mov	r3, r0
 80112ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80112f0:	e001      	b.n	80112f6 <xProcessReceivedUDPPacket_IPv4+0x1c2>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 80112f2:	2300      	movs	r3, #0
 80112f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 80112f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3764      	adds	r7, #100	@ 0x64
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd90      	pop	{r4, r7, pc}

08011300 <xNetworkBuffersInitialise>:
static SemaphoreHandle_t xNetworkBufferSemaphore = NULL;

/*-----------------------------------------------------------*/

BaseType_t xNetworkBuffersInitialise( void )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 8011306:	4b3a      	ldr	r3, [pc, #232]	@ (80113f0 <xNetworkBuffersInitialise+0xf0>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d161      	bne.n	80113d2 <xNetworkBuffersInitialise+0xd2>
    {
        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            static StaticSemaphore_t xNetworkBufferSemaphoreBuffer;
            xNetworkBufferSemaphore = xSemaphoreCreateCountingStatic(
 801130e:	4a39      	ldr	r2, [pc, #228]	@ (80113f4 <xNetworkBuffersInitialise+0xf4>)
 8011310:	213c      	movs	r1, #60	@ 0x3c
 8011312:	203c      	movs	r0, #60	@ 0x3c
 8011314:	f002 fdb1 	bl	8013e7a <xQueueCreateCountingSemaphoreStatic>
 8011318:	4603      	mov	r3, r0
 801131a:	4a35      	ldr	r2, [pc, #212]	@ (80113f0 <xNetworkBuffersInitialise+0xf0>)
 801131c:	6013      	str	r3, [r2, #0]
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 801131e:	4b34      	ldr	r3, [pc, #208]	@ (80113f0 <xNetworkBuffersInitialise+0xf0>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d10d      	bne.n	8011342 <xNetworkBuffersInitialise+0x42>
	__asm volatile
 8011326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801132a:	b672      	cpsid	i
 801132c:	f383 8811 	msr	BASEPRI, r3
 8011330:	f3bf 8f6f 	isb	sy
 8011334:	f3bf 8f4f 	dsb	sy
 8011338:	b662      	cpsie	i
 801133a:	607b      	str	r3, [r7, #4]
}
 801133c:	bf00      	nop
 801133e:	bf00      	nop
 8011340:	e7fd      	b.n	801133e <xNetworkBuffersInitialise+0x3e>

        if( xNetworkBufferSemaphore != NULL )
 8011342:	4b2b      	ldr	r3, [pc, #172]	@ (80113f0 <xNetworkBuffersInitialise+0xf0>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d043      	beq.n	80113d2 <xNetworkBuffersInitialise+0xd2>
        {
            #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                vQueueAddToRegistry( xNetworkBufferSemaphore, "NetBufSem" );
 801134a:	4b29      	ldr	r3, [pc, #164]	@ (80113f0 <xNetworkBuffersInitialise+0xf0>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	492a      	ldr	r1, [pc, #168]	@ (80113f8 <xNetworkBuffersInitialise+0xf8>)
 8011350:	4618      	mov	r0, r3
 8011352:	f003 fb13 	bl	801497c <vQueueAddToRegistry>
                vTraceSetQueueName( xNetworkEventQueue, "IPStackEvent" );
                vTraceSetQueueName( xNetworkBufferSemaphore, "NetworkBufferCount" );
            }
            #endif /*  ipconfigINCLUDE_EXAMPLE_FREERTOS_PLUS_TRACE_CALLS == 1 */

            vListInitialise( &xFreeBuffersList );
 8011356:	4829      	ldr	r0, [pc, #164]	@ (80113fc <xNetworkBuffersInitialise+0xfc>)
 8011358:	f002 fb8f 	bl	8013a7a <vListInitialise>

            /* Initialise all the network buffers.  No storage is allocated to
             * the buffers yet. */
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 801135c:	2300      	movs	r3, #0
 801135e:	60bb      	str	r3, [r7, #8]
 8011360:	e031      	b.n	80113c6 <xNetworkBuffersInitialise+0xc6>
            {
                /* Initialise and set the owner of the buffer list items. */
                xNetworkBufferDescriptors[ x ].pucEthernetBuffer = NULL;
 8011362:	4927      	ldr	r1, [pc, #156]	@ (8011400 <xNetworkBuffersInitialise+0x100>)
 8011364:	68ba      	ldr	r2, [r7, #8]
 8011366:	4613      	mov	r3, r2
 8011368:	00db      	lsls	r3, r3, #3
 801136a:	1a9b      	subs	r3, r3, r2
 801136c:	00db      	lsls	r3, r3, #3
 801136e:	440b      	add	r3, r1
 8011370:	3324      	adds	r3, #36	@ 0x24
 8011372:	2200      	movs	r2, #0
 8011374:	601a      	str	r2, [r3, #0]
                vListInitialiseItem( &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 8011376:	68ba      	ldr	r2, [r7, #8]
 8011378:	4613      	mov	r3, r2
 801137a:	00db      	lsls	r3, r3, #3
 801137c:	1a9b      	subs	r3, r3, r2
 801137e:	00db      	lsls	r3, r3, #3
 8011380:	4a1f      	ldr	r2, [pc, #124]	@ (8011400 <xNetworkBuffersInitialise+0x100>)
 8011382:	4413      	add	r3, r2
 8011384:	4618      	mov	r0, r3
 8011386:	f002 fb98 	bl	8013aba <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBufferDescriptors[ x ].xBufferListItem ), &xNetworkBufferDescriptors[ x ] );
 801138a:	68ba      	ldr	r2, [r7, #8]
 801138c:	4613      	mov	r3, r2
 801138e:	00db      	lsls	r3, r3, #3
 8011390:	1a9b      	subs	r3, r3, r2
 8011392:	00db      	lsls	r3, r3, #3
 8011394:	4a1a      	ldr	r2, [pc, #104]	@ (8011400 <xNetworkBuffersInitialise+0x100>)
 8011396:	1899      	adds	r1, r3, r2
 8011398:	4819      	ldr	r0, [pc, #100]	@ (8011400 <xNetworkBuffersInitialise+0x100>)
 801139a:	68ba      	ldr	r2, [r7, #8]
 801139c:	4613      	mov	r3, r2
 801139e:	00db      	lsls	r3, r3, #3
 80113a0:	1a9b      	subs	r3, r3, r2
 80113a2:	00db      	lsls	r3, r3, #3
 80113a4:	4403      	add	r3, r0
 80113a6:	330c      	adds	r3, #12
 80113a8:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBufferDescriptors[ x ].xBufferListItem ) );
 80113aa:	68ba      	ldr	r2, [r7, #8]
 80113ac:	4613      	mov	r3, r2
 80113ae:	00db      	lsls	r3, r3, #3
 80113b0:	1a9b      	subs	r3, r3, r2
 80113b2:	00db      	lsls	r3, r3, #3
 80113b4:	4a12      	ldr	r2, [pc, #72]	@ (8011400 <xNetworkBuffersInitialise+0x100>)
 80113b6:	4413      	add	r3, r2
 80113b8:	4619      	mov	r1, r3
 80113ba:	4810      	ldr	r0, [pc, #64]	@ (80113fc <xNetworkBuffersInitialise+0xfc>)
 80113bc:	f002 fbae 	bl	8013b1c <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	3301      	adds	r3, #1
 80113c4:	60bb      	str	r3, [r7, #8]
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	2b3b      	cmp	r3, #59	@ 0x3b
 80113ca:	d9ca      	bls.n	8011362 <xNetworkBuffersInitialise+0x62>
            }

            uxMinimumFreeNetworkBuffers = ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80113cc:	4b0d      	ldr	r3, [pc, #52]	@ (8011404 <xNetworkBuffersInitialise+0x104>)
 80113ce:	223c      	movs	r2, #60	@ 0x3c
 80113d0:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 80113d2:	4b07      	ldr	r3, [pc, #28]	@ (80113f0 <xNetworkBuffersInitialise+0xf0>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d102      	bne.n	80113e0 <xNetworkBuffersInitialise+0xe0>
    {
        xReturn = pdFAIL;
 80113da:	2300      	movs	r3, #0
 80113dc:	60fb      	str	r3, [r7, #12]
 80113de:	e001      	b.n	80113e4 <xNetworkBuffersInitialise+0xe4>
    }
    else
    {
        xReturn = pdPASS;
 80113e0:	2301      	movs	r3, #1
 80113e2:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80113e4:	68fb      	ldr	r3, [r7, #12]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3710      	adds	r7, #16
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	20002674 	.word	0x20002674
 80113f4:	20002678 	.word	0x20002678
 80113f8:	08018800 	.word	0x08018800
 80113fc:	2000265c 	.word	0x2000265c
 8011400:	200026c8 	.word	0x200026c8
 8011404:	20002670 	.word	0x20002670

08011408 <vReleaseNetworkBuffer>:
    return pucEthernetBuffer;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBuffer( uint8_t * pucEthernetBuffer )
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b084      	sub	sp, #16
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
    uint8_t * pucEthernetBufferCopy = pucEthernetBuffer;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	60fb      	str	r3, [r7, #12]

    /* There is space before the Ethernet buffer in which a pointer to the
     * network buffer that references this Ethernet buffer is stored.  Remove the
     * space before freeing the buffer. */
    if( pucEthernetBufferCopy != NULL )
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d005      	beq.n	8011426 <vReleaseNetworkBuffer+0x1e>
    {
        /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
        /* coverity[misra_c_2012_rule_18_4_violation] */
        pucEthernetBufferCopy -= ipBUFFER_PADDING;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	3b22      	subs	r3, #34	@ 0x22
 801141e:	60fb      	str	r3, [r7, #12]
        vPortFree( ( void * ) pucEthernetBufferCopy );
 8011420:	68f8      	ldr	r0, [r7, #12]
 8011422:	f005 fd17 	bl	8016e54 <vPortFree>
    }
}
 8011426:	bf00      	nop
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
	...

08011430 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b08a      	sub	sp, #40	@ 0x28
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 801143a:	2300      	movs	r3, #0
 801143c:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t uxCount;
    size_t uxMaxAllowedBytes = ( SIZE_MAX >> 1 );
 801143e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011442:	617b      	str	r3, [r7, #20]
    size_t xRequestedSizeBytesCopy = xRequestedSizeBytes;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	623b      	str	r3, [r7, #32]
    size_t xBytesRequiredForAlignment, xAllocatedBytes;
    BaseType_t xIntegerOverflowed = pdFALSE;
 8011448:	2300      	movs	r3, #0
 801144a:	61bb      	str	r3, [r7, #24]

    if( ( xRequestedSizeBytesCopy < ( size_t ) baMINIMAL_BUFFER_SIZE ) )
 801144c:	6a3b      	ldr	r3, [r7, #32]
 801144e:	2b45      	cmp	r3, #69	@ 0x45
 8011450:	d801      	bhi.n	8011456 <pxGetNetworkBufferWithDescriptor+0x26>
    {
        /* ARP packets can replace application packets, so the storage must be
         * at least large enough to hold an ARP. */
        xRequestedSizeBytesCopy = baMINIMAL_BUFFER_SIZE;
 8011452:	2346      	movs	r3, #70	@ 0x46
 8011454:	623b      	str	r3, [r7, #32]
    }

    /* Add 2 bytes to xRequestedSizeBytesCopy and round up xRequestedSizeBytesCopy
     * to the nearest multiple of N bytes, where N equals 'sizeof( size_t )'. */
    if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, 2U ) == pdFAIL )
 8011456:	6a3b      	ldr	r3, [r7, #32]
 8011458:	f113 0f03 	cmn.w	r3, #3
 801145c:	d803      	bhi.n	8011466 <pxGetNetworkBufferWithDescriptor+0x36>
    {
        xRequestedSizeBytesCopy += 2U;
 801145e:	6a3b      	ldr	r3, [r7, #32]
 8011460:	3302      	adds	r3, #2
 8011462:	623b      	str	r3, [r7, #32]
 8011464:	e001      	b.n	801146a <pxGetNetworkBufferWithDescriptor+0x3a>
    }
    else
    {
        xIntegerOverflowed = pdTRUE;
 8011466:	2301      	movs	r3, #1
 8011468:	61bb      	str	r3, [r7, #24]
    }

    if( ( xRequestedSizeBytesCopy & baALIGNMENT_MASK ) != 0U )
 801146a:	6a3b      	ldr	r3, [r7, #32]
 801146c:	f003 0303 	and.w	r3, r3, #3
 8011470:	2b00      	cmp	r3, #0
 8011472:	d011      	beq.n	8011498 <pxGetNetworkBufferWithDescriptor+0x68>
    {
        xBytesRequiredForAlignment = baALIGNMENT_BYTES - ( xRequestedSizeBytesCopy & baALIGNMENT_MASK );
 8011474:	6a3b      	ldr	r3, [r7, #32]
 8011476:	f003 0303 	and.w	r3, r3, #3
 801147a:	f1c3 0304 	rsb	r3, r3, #4
 801147e:	613b      	str	r3, [r7, #16]

        if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, xBytesRequiredForAlignment ) == pdFAIL )
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	43db      	mvns	r3, r3
 8011484:	6a3a      	ldr	r2, [r7, #32]
 8011486:	429a      	cmp	r2, r3
 8011488:	d804      	bhi.n	8011494 <pxGetNetworkBufferWithDescriptor+0x64>
        {
            xRequestedSizeBytesCopy += xBytesRequiredForAlignment;
 801148a:	6a3a      	ldr	r2, [r7, #32]
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	4413      	add	r3, r2
 8011490:	623b      	str	r3, [r7, #32]
 8011492:	e001      	b.n	8011498 <pxGetNetworkBufferWithDescriptor+0x68>
        }
        else
        {
            xIntegerOverflowed = pdTRUE;
 8011494:	2301      	movs	r3, #1
 8011496:	61bb      	str	r3, [r7, #24]
        }
    }

    if( baADD_WILL_OVERFLOW( xRequestedSizeBytesCopy, ipBUFFER_PADDING ) == pdFAIL )
 8011498:	6a3b      	ldr	r3, [r7, #32]
 801149a:	f113 0f23 	cmn.w	r3, #35	@ 0x23
 801149e:	d803      	bhi.n	80114a8 <pxGetNetworkBufferWithDescriptor+0x78>
    {
        xAllocatedBytes = xRequestedSizeBytesCopy + ipBUFFER_PADDING;
 80114a0:	6a3b      	ldr	r3, [r7, #32]
 80114a2:	3322      	adds	r3, #34	@ 0x22
 80114a4:	61fb      	str	r3, [r7, #28]
 80114a6:	e001      	b.n	80114ac <pxGetNetworkBufferWithDescriptor+0x7c>
    }
    else
    {
        xIntegerOverflowed = pdTRUE;
 80114a8:	2301      	movs	r3, #1
 80114aa:	61bb      	str	r3, [r7, #24]
    }

    if( ( xIntegerOverflowed == pdFALSE ) && ( xAllocatedBytes <= uxMaxAllowedBytes ) && ( xNetworkBufferSemaphore != NULL ) )
 80114ac:	69bb      	ldr	r3, [r7, #24]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d15f      	bne.n	8011572 <pxGetNetworkBufferWithDescriptor+0x142>
 80114b2:	69fa      	ldr	r2, [r7, #28]
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d85b      	bhi.n	8011572 <pxGetNetworkBufferWithDescriptor+0x142>
 80114ba:	4b30      	ldr	r3, [pc, #192]	@ (801157c <pxGetNetworkBufferWithDescriptor+0x14c>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d057      	beq.n	8011572 <pxGetNetworkBufferWithDescriptor+0x142>
    {
        /* If there is a semaphore available, there is a network buffer available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 80114c2:	4b2e      	ldr	r3, [pc, #184]	@ (801157c <pxGetNetworkBufferWithDescriptor+0x14c>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	6839      	ldr	r1, [r7, #0]
 80114c8:	4618      	mov	r0, r3
 80114ca:	f002 ffa9 	bl	8014420 <xQueueSemaphoreTake>
 80114ce:	4603      	mov	r3, r0
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d14e      	bne.n	8011572 <pxGetNetworkBufferWithDescriptor+0x142>
        {
            /* Protect the structure as it is accessed from tasks and interrupts. */
            taskENTER_CRITICAL();
 80114d4:	f005 fac2 	bl	8016a5c <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 80114d8:	4b29      	ldr	r3, [pc, #164]	@ (8011580 <pxGetNetworkBufferWithDescriptor+0x150>)
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	627b      	str	r3, [r7, #36]	@ 0x24
                ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 80114e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e2:	4618      	mov	r0, r3
 80114e4:	f002 fb53 	bl	8013b8e <uxListRemove>
            }
            taskEXIT_CRITICAL();
 80114e8:	f005 faee 	bl	8016ac8 <vPortExitCritical>

            /* Reading UBaseType_t, no critical section needed. */
            uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80114ec:	4b24      	ldr	r3, [pc, #144]	@ (8011580 <pxGetNetworkBufferWithDescriptor+0x150>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	60fb      	str	r3, [r7, #12]

            if( uxMinimumFreeNetworkBuffers > uxCount )
 80114f2:	4b24      	ldr	r3, [pc, #144]	@ (8011584 <pxGetNetworkBufferWithDescriptor+0x154>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d202      	bcs.n	8011502 <pxGetNetworkBufferWithDescriptor+0xd2>
            {
                uxMinimumFreeNetworkBuffers = uxCount;
 80114fc:	4a21      	ldr	r2, [pc, #132]	@ (8011584 <pxGetNetworkBufferWithDescriptor+0x154>)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	6013      	str	r3, [r2, #0]
            }

            /* Allocate storage of exactly the requested size to the buffer. */
            configASSERT( pxReturn->pucEthernetBuffer == NULL );
 8011502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011506:	2b00      	cmp	r3, #0
 8011508:	d00d      	beq.n	8011526 <pxGetNetworkBufferWithDescriptor+0xf6>
	__asm volatile
 801150a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801150e:	b672      	cpsid	i
 8011510:	f383 8811 	msr	BASEPRI, r3
 8011514:	f3bf 8f6f 	isb	sy
 8011518:	f3bf 8f4f 	dsb	sy
 801151c:	b662      	cpsie	i
 801151e:	60bb      	str	r3, [r7, #8]
}
 8011520:	bf00      	nop
 8011522:	bf00      	nop
 8011524:	e7fd      	b.n	8011522 <pxGetNetworkBufferWithDescriptor+0xf2>

            if( xRequestedSizeBytesCopy > 0U )
 8011526:	6a3b      	ldr	r3, [r7, #32]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d022      	beq.n	8011572 <pxGetNetworkBufferWithDescriptor+0x142>
            {
                /* Extra space is obtained so a pointer to the network buffer can
                 * be stored at the beginning of the buffer. */
                pxReturn->pucEthernetBuffer = ( uint8_t * ) pvPortMalloc( xAllocatedBytes );
 801152c:	69f8      	ldr	r0, [r7, #28]
 801152e:	f005 fbc3 	bl	8016cb8 <pvPortMalloc>
 8011532:	4602      	mov	r2, r0
 8011534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011536:	625a      	str	r2, [r3, #36]	@ 0x24

                if( pxReturn->pucEthernetBuffer == NULL )
 8011538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801153c:	2b00      	cmp	r3, #0
 801153e:	d105      	bne.n	801154c <pxGetNetworkBufferWithDescriptor+0x11c>
                {
                    /* The attempt to allocate storage for the buffer payload failed,
                     * so the network buffer structure cannot be used and must be
                     * released. */
                    vReleaseNetworkBufferAndDescriptor( pxReturn );
 8011540:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011542:	f000 f821 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
                    pxReturn = NULL;
 8011546:	2300      	movs	r3, #0
 8011548:	627b      	str	r3, [r7, #36]	@ 0x24
 801154a:	e012      	b.n	8011572 <pxGetNetworkBufferWithDescriptor+0x142>
                     * stored pointer so the pointer value is not overwritten by the
                     * application when the buffer is used. */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    *( ( NetworkBufferDescriptor_t ** ) ( pxReturn->pucEthernetBuffer ) ) = pxReturn;
 801154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011552:	601a      	str	r2, [r3, #0]

                    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
                    /* coverity[misra_c_2012_rule_18_4_violation] */
                    pxReturn->pucEthernetBuffer += ipBUFFER_PADDING;
 8011554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011558:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801155e:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Store the actual size of the allocated buffer, which may be
                     * greater than the original requested size. */
                    pxReturn->xDataLength = xRequestedSizeBytesCopy;
 8011560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011562:	6a3a      	ldr	r2, [r7, #32]
 8011564:	629a      	str	r2, [r3, #40]	@ 0x28
                    pxReturn->pxInterface = NULL;
 8011566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011568:	2200      	movs	r2, #0
 801156a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    pxReturn->pxEndPoint = NULL;
 801156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156e:	2200      	movs	r2, #0
 8011570:	631a      	str	r2, [r3, #48]	@ 0x30
    {
        /* No action. */
        iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
    }

    return pxReturn;
 8011572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011574:	4618      	mov	r0, r3
 8011576:	3728      	adds	r7, #40	@ 0x28
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	20002674 	.word	0x20002674
 8011580:	2000265c 	.word	0x2000265c
 8011584:	20002670 	.word	0x20002670

08011588 <vReleaseNetworkBufferAndDescriptor>:
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
    /* Ensure the buffer is returned to the list of free buffers before the
    * counting semaphore is 'given' to say a buffer is available.  Release the
    * storage allocated to the buffer payload.  THIS FILE SHOULD NOT BE USED
    * IF THE PROJECT INCLUDES A MEMORY ALLOCATOR THAT WILL FRAGMENT THE HEAP
    * MEMORY.  For example, heap_2 must not be used, heap_4 can be used. */
    vReleaseNetworkBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011594:	4618      	mov	r0, r3
 8011596:	f7ff ff37 	bl	8011408 <vReleaseNetworkBuffer>
    pxNetworkBuffer->pucEthernetBuffer = NULL;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	625a      	str	r2, [r3, #36]	@ 0x24
    pxNetworkBuffer->xDataLength = 0U;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	629a      	str	r2, [r3, #40]	@ 0x28

    taskENTER_CRITICAL();
 80115a6:	f005 fa59 	bl	8016a5c <vPortEnterCritical>
    {
        xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	4a0f      	ldr	r2, [pc, #60]	@ (80115ec <vReleaseNetworkBufferAndDescriptor+0x64>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d101      	bne.n	80115b8 <vReleaseNetworkBufferAndDescriptor+0x30>
 80115b4:	2301      	movs	r3, #1
 80115b6:	e000      	b.n	80115ba <vReleaseNetworkBufferAndDescriptor+0x32>
 80115b8:	2300      	movs	r3, #0
 80115ba:	60fb      	str	r3, [r7, #12]

        if( xListItemAlreadyInFreeList == pdFALSE )
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d104      	bne.n	80115cc <vReleaseNetworkBufferAndDescriptor+0x44>
        {
            vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4619      	mov	r1, r3
 80115c6:	4809      	ldr	r0, [pc, #36]	@ (80115ec <vReleaseNetworkBufferAndDescriptor+0x64>)
 80115c8:	f002 fa84 	bl	8013ad4 <vListInsertEnd>
        }
    }
    taskEXIT_CRITICAL();
 80115cc:	f005 fa7c 	bl	8016ac8 <vPortExitCritical>

    /*
     * Update the network state machine, unless the program fails to release its 'xNetworkBufferSemaphore'.
     * The program should only try to release its semaphore if 'xListItemAlreadyInFreeList' is false.
     */
    if( xListItemAlreadyInFreeList == pdFALSE )
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d106      	bne.n	80115e4 <vReleaseNetworkBufferAndDescriptor+0x5c>
    {
        if( xSemaphoreGive( xNetworkBufferSemaphore ) == pdTRUE )
 80115d6:	4b06      	ldr	r3, [pc, #24]	@ (80115f0 <vReleaseNetworkBufferAndDescriptor+0x68>)
 80115d8:	6818      	ldr	r0, [r3, #0]
 80115da:	2300      	movs	r3, #0
 80115dc:	2200      	movs	r2, #0
 80115de:	2100      	movs	r1, #0
 80115e0:	f002 fc88 	bl	8013ef4 <xQueueGenericSend>
    else
    {
        /* No action. */
        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 80115e4:	bf00      	nop
 80115e6:	3710      	adds	r7, #16
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	2000265c 	.word	0x2000265c
 80115f0:	20002674 	.word	0x20002674

080115f4 <uxGetNumberOfFreeNetworkBuffers>:

/*
 * Returns the number of free network buffers
 */
UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 80115f4:	b480      	push	{r7}
 80115f6:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80115f8:	4b03      	ldr	r3, [pc, #12]	@ (8011608 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 80115fa:	681b      	ldr	r3, [r3, #0]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop
 8011608:	2000265c 	.word	0x2000265c

0801160c <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 801160c:	b480      	push	{r7}
 801160e:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8011610:	4b03      	ldr	r3, [pc, #12]	@ (8011620 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8011612:	681b      	ldr	r3, [r3, #0]
}
 8011614:	4618      	mov	r0, r3
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	20002670 	.word	0x20002670

08011624 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8011624:	b480      	push	{r7}
 8011626:	b085      	sub	sp, #20
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 801162c:	2300      	movs	r3, #0
 801162e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	4a11      	ldr	r2, [pc, #68]	@ (8011678 <xHas_1F_PHYSPCS+0x54>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d016      	beq.n	8011666 <xHas_1F_PHYSPCS+0x42>
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	4a0f      	ldr	r2, [pc, #60]	@ (8011678 <xHas_1F_PHYSPCS+0x54>)
 801163c:	4293      	cmp	r3, r2
 801163e:	d80f      	bhi.n	8011660 <xHas_1F_PHYSPCS+0x3c>
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	4a0e      	ldr	r2, [pc, #56]	@ (801167c <xHas_1F_PHYSPCS+0x58>)
 8011644:	4293      	cmp	r3, r2
 8011646:	d00e      	beq.n	8011666 <xHas_1F_PHYSPCS+0x42>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	4a0c      	ldr	r2, [pc, #48]	@ (801167c <xHas_1F_PHYSPCS+0x58>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d807      	bhi.n	8011660 <xHas_1F_PHYSPCS+0x3c>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4a0b      	ldr	r2, [pc, #44]	@ (8011680 <xHas_1F_PHYSPCS+0x5c>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d006      	beq.n	8011666 <xHas_1F_PHYSPCS+0x42>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	4a0a      	ldr	r2, [pc, #40]	@ (8011684 <xHas_1F_PHYSPCS+0x60>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d002      	beq.n	8011666 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8011660:	2301      	movs	r3, #1
 8011662:	60fb      	str	r3, [r7, #12]
            break;
 8011664:	e000      	b.n	8011668 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8011666:	bf00      	nop
    }

    return xResult;
 8011668:	68fb      	ldr	r3, [r7, #12]
}
 801166a:	4618      	mov	r0, r3
 801166c:	3714      	adds	r7, #20
 801166e:	46bd      	mov	sp, r7
 8011670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop
 8011678:	ff000710 	.word	0xff000710
 801167c:	2000a250 	.word	0x2000a250
 8011680:	20005c90 	.word	0x20005c90
 8011684:	2000a221 	.word	0x2000a221

08011688 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8011688:	b480      	push	{r7}
 801168a:	b085      	sub	sp, #20
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8011690:	2300      	movs	r3, #0
 8011692:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	4a0d      	ldr	r2, [pc, #52]	@ (80116cc <xHas_19_PHYCR+0x44>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d00b      	beq.n	80116b4 <xHas_19_PHYCR+0x2c>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4a0b      	ldr	r2, [pc, #44]	@ (80116cc <xHas_19_PHYCR+0x44>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d80a      	bhi.n	80116ba <xHas_19_PHYCR+0x32>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	4a0a      	ldr	r2, [pc, #40]	@ (80116d0 <xHas_19_PHYCR+0x48>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d003      	beq.n	80116b4 <xHas_19_PHYCR+0x2c>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	4a09      	ldr	r2, [pc, #36]	@ (80116d4 <xHas_19_PHYCR+0x4c>)
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d102      	bne.n	80116ba <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 80116b4:	2301      	movs	r3, #1
 80116b6:	60fb      	str	r3, [r7, #12]
            break;
 80116b8:	e000      	b.n	80116bc <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 80116ba:	bf00      	nop
    }

    return xResult;
 80116bc:	68fb      	ldr	r3, [r7, #12]
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3714      	adds	r7, #20
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop
 80116cc:	2000a221 	.word	0x2000a221
 80116d0:	0007c130 	.word	0x0007c130
 80116d4:	20005c90 	.word	0x20005c90

080116d8 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 80116e4:	2240      	movs	r2, #64	@ 0x40
 80116e6:	2100      	movs	r1, #0
 80116e8:	68f8      	ldr	r0, [r7, #12]
 80116ea:	f005 ff83 	bl	80175f4 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	68ba      	ldr	r2, [r7, #8]
 80116f2:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	687a      	ldr	r2, [r7, #4]
 80116f8:	605a      	str	r2, [r3, #4]
}
 80116fa:	bf00      	nop
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8011702:	b580      	push	{r7, lr}
 8011704:	b086      	sub	sp, #24
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2200      	movs	r2, #0
 801170e:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8011710:	2300      	movs	r3, #0
 8011712:	617b      	str	r3, [r7, #20]
 8011714:	e03a      	b.n	801178c <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8011716:	2300      	movs	r3, #0
 8011718:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	f107 020c 	add.w	r2, r7, #12
 8011722:	2103      	movs	r1, #3
 8011724:	6978      	ldr	r0, [r7, #20]
 8011726:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801172e:	4293      	cmp	r3, r2
 8011730:	d029      	beq.n	8011786 <xPhyDiscover+0x84>
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d026      	beq.n	8011786 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f107 0208 	add.w	r2, r7, #8
 8011740:	2102      	movs	r1, #2
 8011742:	6978      	ldr	r0, [r7, #20]
 8011744:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	041a      	lsls	r2, r3, #16
 801174a:	68f9      	ldr	r1, [r7, #12]
 801174c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8011750:	400b      	ands	r3, r1
 8011752:	4313      	orrs	r3, r2
 8011754:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	b2d1      	uxtb	r1, r2
 801175e:	687a      	ldr	r2, [r7, #4]
 8011760:	4413      	add	r3, r2
 8011762:	460a      	mov	r2, r1
 8011764:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	3202      	adds	r2, #2
 801176e:	6939      	ldr	r1, [r7, #16]
 8011770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011778:	1c5a      	adds	r2, r3, #1
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011782:	2b04      	cmp	r3, #4
 8011784:	d005      	beq.n	8011792 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	3301      	adds	r3, #1
 801178a:	617b      	str	r3, [r7, #20]
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	2b1f      	cmp	r3, #31
 8011790:	ddc1      	ble.n	8011716 <xPhyDiscover+0x14>
    if( pxPhyObject->xPortCount > 0 )
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
    }

    return pxPhyObject->xPortCount;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b08c      	sub	sp, #48	@ 0x30
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
 80117a6:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 80117a8:	2300      	movs	r3, #0
 80117aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80117ac:	2300      	movs	r3, #0
 80117ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117b0:	e017      	b.n	80117e2 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117b6:	4413      	add	r3, r2
 80117b8:	3318      	adds	r3, #24
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	f107 0218 	add.w	r2, r7, #24
 80117c6:	2100      	movs	r1, #0
 80117c8:	69f8      	ldr	r0, [r7, #28]
 80117ca:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	69ba      	ldr	r2, [r7, #24]
 80117d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80117d6:	2100      	movs	r1, #0
 80117d8:	69f8      	ldr	r0, [r7, #28]
 80117da:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80117dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117de:	3301      	adds	r3, #1
 80117e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117e8:	429a      	cmp	r2, r3
 80117ea:	dbe2      	blt.n	80117b2 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 80117ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80117f0:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 80117f2:	f107 030c 	add.w	r3, r7, #12
 80117f6:	4618      	mov	r0, r3
 80117f8:	f003 ff02 	bl	8015600 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80117fc:	2300      	movs	r3, #0
 80117fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011800:	e01b      	b.n	801183a <xPhyReset+0x9c>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011806:	4413      	add	r3, r2
 8011808:	3318      	adds	r3, #24
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f107 0218 	add.w	r2, r7, #24
 8011816:	2100      	movs	r1, #0
 8011818:	6a38      	ldr	r0, [r7, #32]
 801181a:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 801181c:	69bb      	ldr	r3, [r7, #24]
 801181e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <xPhyReset+0x96>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
                ulDoneMask |= ( 1U << xPhyIndex );
 8011826:	2201      	movs	r2, #1
 8011828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801182a:	fa02 f303 	lsl.w	r3, r2, r3
 801182e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011830:	4313      	orrs	r3, r2
 8011832:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011836:	3301      	adds	r3, #1
 8011838:	62bb      	str	r3, [r7, #40]	@ 0x28
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801183e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011840:	429a      	cmp	r2, r3
 8011842:	dbde      	blt.n	8011802 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8011844:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	429a      	cmp	r2, r3
 801184a:	d00e      	beq.n	801186a <xPhyReset+0xcc>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 801184c:	f107 0214 	add.w	r2, r7, #20
 8011850:	f107 030c 	add.w	r3, r7, #12
 8011854:	4611      	mov	r1, r2
 8011856:	4618      	mov	r0, r3
 8011858:	f003 ff12 	bl	8015680 <xTaskCheckForTimeOut>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d105      	bne.n	801186e <xPhyReset+0xd0>
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
            break;
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8011862:	2032      	movs	r0, #50	@ 0x32
 8011864:	f003 fad8 	bl	8014e18 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011868:	e7c8      	b.n	80117fc <xPhyReset+0x5e>
            break;
 801186a:	bf00      	nop
 801186c:	e000      	b.n	8011870 <xPhyReset+0xd2>
            break;
 801186e:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011870:	2300      	movs	r3, #0
 8011872:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011874:	e01e      	b.n	80118b4 <xPhyReset+0x116>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8011876:	2201      	movs	r2, #1
 8011878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801187a:	409a      	lsls	r2, r3
 801187c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801187e:	4013      	ands	r3, r2
 8011880:	2b00      	cmp	r3, #0
 8011882:	d114      	bne.n	80118ae <xPhyReset+0x110>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011888:	4413      	add	r3, r2
 801188a:	3318      	adds	r3, #24
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	f107 0218 	add.w	r2, r7, #24
 8011898:	2100      	movs	r1, #0
 801189a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801189c:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	69ba      	ldr	r2, [r7, #24]
 80118a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80118a8:	2100      	movs	r1, #0
 80118aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80118ac:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80118ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118b0:	3301      	adds	r3, #1
 80118b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118ba:	429a      	cmp	r2, r3
 80118bc:	dbdb      	blt.n	8011876 <xPhyReset+0xd8>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80118be:	2032      	movs	r0, #50	@ 0x32
 80118c0:	f003 faaa 	bl	8014e18 <vTaskDelay>

    return ulDoneMask;
 80118c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3730      	adds	r7, #48	@ 0x30
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b088      	sub	sp, #32
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118dc:	2b00      	cmp	r3, #0
 80118de:	dc02      	bgt.n	80118e6 <xPhyConfigure+0x18>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
        return -1;
 80118e0:	f04f 33ff 	mov.w	r3, #4294967295
 80118e4:	e0e7      	b.n	8011ab6 <xPhyConfigure+0x1e8>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	2b03      	cmp	r3, #3
 80118ec:	d107      	bne.n	80118fe <xPhyConfigure+0x30>
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	789b      	ldrb	r3, [r3, #2]
 80118f2:	2b03      	cmp	r3, #3
 80118f4:	d103      	bne.n	80118fe <xPhyConfigure+0x30>
    {
        ulAdvertise = phyADVERTISE_ALL;
 80118f6:	f240 13e1 	movw	r3, #481	@ 0x1e1
 80118fa:	61fb      	str	r3, [r7, #28]
 80118fc:	e044      	b.n	8011988 <xPhyConfigure+0xba>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 80118fe:	2301      	movs	r3, #1
 8011900:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	2b03      	cmp	r3, #3
 8011908:	d10d      	bne.n	8011926 <xPhyConfigure+0x58>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	789b      	ldrb	r3, [r3, #2]
 801190e:	2b02      	cmp	r3, #2
 8011910:	d104      	bne.n	801191c <xPhyConfigure+0x4e>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8011918:	61fb      	str	r3, [r7, #28]
 801191a:	e035      	b.n	8011988 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8011922:	61fb      	str	r3, [r7, #28]
 8011924:	e030      	b.n	8011988 <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	789b      	ldrb	r3, [r3, #2]
 801192a:	2b03      	cmp	r3, #3
 801192c:	d10d      	bne.n	801194a <xPhyConfigure+0x7c>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	2b01      	cmp	r3, #1
 8011934:	d104      	bne.n	8011940 <xPhyConfigure+0x72>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801193c:	61fb      	str	r3, [r7, #28]
 801193e:	e023      	b.n	8011988 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8011946:	61fb      	str	r3, [r7, #28]
 8011948:	e01e      	b.n	8011988 <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	2b02      	cmp	r3, #2
 8011950:	d10d      	bne.n	801196e <xPhyConfigure+0xa0>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	789b      	ldrb	r3, [r3, #2]
 8011956:	2b02      	cmp	r3, #2
 8011958:	d104      	bne.n	8011964 <xPhyConfigure+0x96>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011960:	61fb      	str	r3, [r7, #28]
 8011962:	e011      	b.n	8011988 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801196a:	61fb      	str	r3, [r7, #28]
 801196c:	e00c      	b.n	8011988 <xPhyConfigure+0xba>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	789b      	ldrb	r3, [r3, #2]
 8011972:	2b02      	cmp	r3, #2
 8011974:	d104      	bne.n	8011980 <xPhyConfigure+0xb2>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8011976:	69fb      	ldr	r3, [r7, #28]
 8011978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801197c:	61fb      	str	r3, [r7, #28]
 801197e:	e003      	b.n	8011988 <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	f043 0320 	orr.w	r3, r3, #32
 8011986:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801198c:	2201      	movs	r2, #1
 801198e:	fa02 f303 	lsl.w	r3, r2, r3
 8011992:	3b01      	subs	r3, #1
 8011994:	4619      	mov	r1, r3
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f7ff ff01 	bl	801179e <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 801199c:	2300      	movs	r3, #0
 801199e:	61bb      	str	r3, [r7, #24]
 80119a0:	e07a      	b.n	8011a98 <xPhyConfigure+0x1ca>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	69bb      	ldr	r3, [r7, #24]
 80119a6:	4413      	add	r3, r2
 80119a8:	3318      	adds	r3, #24
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	69ba      	ldr	r2, [r7, #24]
 80119b2:	3202      	adds	r2, #2
 80119b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119b8:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	69fa      	ldr	r2, [r7, #28]
 80119c0:	2104      	movs	r1, #4
 80119c2:	6978      	ldr	r0, [r7, #20]
 80119c4:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	f107 020c 	add.w	r2, r7, #12
 80119ce:	2100      	movs	r1, #0
 80119d0:	6978      	ldr	r0, [r7, #20]
 80119d2:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 80119da:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80119e2:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	2b02      	cmp	r3, #2
 80119ea:	d003      	beq.n	80119f4 <xPhyConfigure+0x126>
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	2b03      	cmp	r3, #3
 80119f2:	d104      	bne.n	80119fe <xPhyConfigure+0x130>
        {
            ulConfig |= phyBMCR_SPEED_100;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80119fa:	60fb      	str	r3, [r7, #12]
 80119fc:	e007      	b.n	8011a0e <xPhyConfigure+0x140>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d103      	bne.n	8011a0e <xPhyConfigure+0x140>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011a0c:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	789b      	ldrb	r3, [r3, #2]
 8011a12:	2b02      	cmp	r3, #2
 8011a14:	d003      	beq.n	8011a1e <xPhyConfigure+0x150>
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	789b      	ldrb	r3, [r3, #2]
 8011a1a:	2b03      	cmp	r3, #3
 8011a1c:	d104      	bne.n	8011a28 <xPhyConfigure+0x15a>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011a24:	60fb      	str	r3, [r7, #12]
 8011a26:	e007      	b.n	8011a38 <xPhyConfigure+0x16a>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	789b      	ldrb	r3, [r3, #2]
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d103      	bne.n	8011a38 <xPhyConfigure+0x16a>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011a36:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8011a38:	6938      	ldr	r0, [r7, #16]
 8011a3a:	f7ff fe25 	bl	8011688 <xHas_19_PHYCR>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d026      	beq.n	8011a92 <xPhyConfigure+0x1c4>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	f107 0208 	add.w	r2, r7, #8
 8011a4c:	2119      	movs	r1, #25
 8011a4e:	6978      	ldr	r0, [r7, #20]
 8011a50:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8011a58:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	785b      	ldrb	r3, [r3, #1]
 8011a5e:	2b03      	cmp	r3, #3
 8011a60:	d104      	bne.n	8011a6c <xPhyConfigure+0x19e>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a68:	60bb      	str	r3, [r7, #8]
 8011a6a:	e00c      	b.n	8011a86 <xPhyConfigure+0x1b8>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	785b      	ldrb	r3, [r3, #1]
 8011a70:	2b02      	cmp	r3, #2
 8011a72:	d104      	bne.n	8011a7e <xPhyConfigure+0x1b0>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a7a:	60bb      	str	r3, [r7, #8]
 8011a7c:	e003      	b.n	8011a86 <xPhyConfigure+0x1b8>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011a84:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	68ba      	ldr	r2, [r7, #8]
 8011a8c:	2119      	movs	r1, #25
 8011a8e:	6978      	ldr	r0, [r7, #20]
 8011a90:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8011a92:	69bb      	ldr	r3, [r7, #24]
 8011a94:	3301      	adds	r3, #1
 8011a96:	61bb      	str	r3, [r7, #24]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a9c:	69ba      	ldr	r2, [r7, #24]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	f6ff af7f 	blt.w	80119a2 <xPhyConfigure+0xd4>

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	69fa      	ldr	r2, [r7, #28]
 8011ab2:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8011ab4:	2300      	movs	r3, #0
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3720      	adds	r7, #32
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
	...

08011ac0 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b092      	sub	sp, #72	@ 0x48
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d101      	bne.n	8011ad4 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	e169      	b.n	8011da8 <xPhyStartAutoNegotiation+0x2e8>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ad8:	e020      	b.n	8011b1c <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8011ada:	683a      	ldr	r2, [r7, #0]
 8011adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ade:	fa22 f303 	lsr.w	r3, r2, r3
 8011ae2:	f003 0301 	and.w	r3, r3, #1
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d015      	beq.n	8011b16 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011aee:	4413      	add	r3, r2
 8011af0:	3318      	adds	r3, #24
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011afe:	2104      	movs	r1, #4
 8011b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b02:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011b0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b10:	2100      	movs	r1, #0
 8011b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b14:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8011b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b18:	3301      	adds	r3, #1
 8011b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b20:	461a      	mov	r2, r3
 8011b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b24:	4293      	cmp	r3, r2
 8011b26:	d3d8      	bcc.n	8011ada <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8011b28:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8011b2c:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8011b2e:	f107 0318 	add.w	r3, r7, #24
 8011b32:	4618      	mov	r0, r3
 8011b34:	f003 fd64 	bl	8015600 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011b40:	2300      	movs	r3, #0
 8011b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b44:	e025      	b.n	8011b92 <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8011b46:	683a      	ldr	r2, [r7, #0]
 8011b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d01a      	beq.n	8011b86 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8011b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b54:	4013      	ands	r3, r2
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d115      	bne.n	8011b86 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b5e:	4413      	add	r3, r2
 8011b60:	3318      	adds	r3, #24
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011b6e:	2101      	movs	r1, #1
 8011b70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b72:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8011b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b76:	f003 0320 	and.w	r3, r3, #32
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d003      	beq.n	8011b86 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8011b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b82:	4313      	orrs	r3, r2
 8011b84:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b88:	3301      	adds	r3, #1
 8011b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b8e:	005b      	lsls	r3, r3, #1
 8011b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b96:	461a      	mov	r2, r3
 8011b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	d3d3      	bcc.n	8011b46 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8011b9e:	683a      	ldr	r2, [r7, #0]
 8011ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d00e      	beq.n	8011bc4 <xPhyStartAutoNegotiation+0x104>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8011ba6:	f107 0220 	add.w	r2, r7, #32
 8011baa:	f107 0318 	add.w	r3, r7, #24
 8011bae:	4611      	mov	r1, r2
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f003 fd65 	bl	8015680 <xTaskCheckForTimeOut>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d105      	bne.n	8011bc8 <xPhyStartAutoNegotiation+0x108>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
            break;
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8011bbc:	2032      	movs	r0, #50	@ 0x32
 8011bbe:	f003 f92b 	bl	8014e18 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8011bc2:	e7bb      	b.n	8011b3c <xPhyStartAutoNegotiation+0x7c>
            break;
 8011bc4:	bf00      	nop
 8011bc6:	e000      	b.n	8011bca <xPhyStartAutoNegotiation+0x10a>
            break;
 8011bc8:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8011bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f000 80ea 	beq.w	8011da6 <xPhyStartAutoNegotiation+0x2e6>
    {
        ulBitMask = ( uint32_t ) 1U;
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bdc:	43db      	mvns	r3, r3
 8011bde:	401a      	ands	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011be4:	2300      	movs	r3, #0
 8011be6:	647b      	str	r3, [r7, #68]	@ 0x44
 8011be8:	e0d6      	b.n	8011d98 <xPhyStartAutoNegotiation+0x2d8>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bee:	4413      	add	r3, r2
 8011bf0:	3318      	adds	r3, #24
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011bfa:	3202      	adds	r2, #2
 8011bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c00:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8011c02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c06:	4013      	ands	r3, r2
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f000 80be 	beq.w	8011d8a <xPhyStartAutoNegotiation+0x2ca>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011c16:	2100      	movs	r1, #0
 8011c18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011c1a:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011c24:	2101      	movs	r1, #1
 8011c26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011c28:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8011c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c2c:	f003 0304 	and.w	r3, r3, #4
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d005      	beq.n	8011c40 <xPhyStartAutoNegotiation+0x180>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c3a:	431a      	orrs	r2, r3
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8011c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c42:	4a5b      	ldr	r2, [pc, #364]	@ (8011db0 <xPhyStartAutoNegotiation+0x2f0>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d12f      	bne.n	8011ca8 <xPhyStartAutoNegotiation+0x1e8>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f107 0214 	add.w	r2, r7, #20
 8011c50:	211e      	movs	r1, #30
 8011c52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011c54:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	f003 0307 	and.w	r3, r3, #7
 8011c5c:	3b01      	subs	r3, #1
 8011c5e:	2b05      	cmp	r3, #5
 8011c60:	d813      	bhi.n	8011c8a <xPhyStartAutoNegotiation+0x1ca>
 8011c62:	a201      	add	r2, pc, #4	@ (adr r2, 8011c68 <xPhyStartAutoNegotiation+0x1a8>)
 8011c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c68:	08011c81 	.word	0x08011c81
 8011c6c:	08011c8b 	.word	0x08011c8b
 8011c70:	08011c8b 	.word	0x08011c8b
 8011c74:	08011c8b 	.word	0x08011c8b
 8011c78:	08011c81 	.word	0x08011c81
 8011c7c:	08011c8b 	.word	0x08011c8b
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8011c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c82:	f043 0302 	orr.w	r3, r3, #2
 8011c86:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8011c88:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	f003 0307 	and.w	r3, r3, #7
 8011c90:	2b02      	cmp	r3, #2
 8011c92:	d801      	bhi.n	8011c98 <xPhyStartAutoNegotiation+0x1d8>
 8011c94:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8011c96:	e05b      	b.n	8011d50 <xPhyStartAutoNegotiation+0x290>
 8011c98:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d858      	bhi.n	8011d50 <xPhyStartAutoNegotiation+0x290>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8011c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca0:	f043 0304 	orr.w	r3, r3, #4
 8011ca4:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8011ca6:	e053      	b.n	8011d50 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8011ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011caa:	4a42      	ldr	r2, [pc, #264]	@ (8011db4 <xPhyStartAutoNegotiation+0x2f4>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	d126      	bne.n	8011cfe <xPhyStartAutoNegotiation+0x23e>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	f107 0210 	add.w	r2, r7, #16
 8011cc0:	211f      	movs	r1, #31
 8011cc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011cc4:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	0a1b      	lsrs	r3, r3, #8
 8011cca:	f003 0307 	and.w	r3, r3, #7
 8011cce:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8011cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cd6:	2b02      	cmp	r3, #2
 8011cd8:	d002      	beq.n	8011ce0 <xPhyStartAutoNegotiation+0x220>
 8011cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cdc:	2b05      	cmp	r3, #5
 8011cde:	d103      	bne.n	8011ce8 <xPhyStartAutoNegotiation+0x228>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce2:	f043 0302 	orr.w	r3, r3, #2
 8011ce6:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 8011ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cea:	2b05      	cmp	r3, #5
 8011cec:	d002      	beq.n	8011cf4 <xPhyStartAutoNegotiation+0x234>
 8011cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cf0:	2b06      	cmp	r3, #6
 8011cf2:	d12d      	bne.n	8011d50 <xPhyStartAutoNegotiation+0x290>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf6:	f043 0304 	orr.w	r3, r3, #4
 8011cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8011cfc:	e028      	b.n	8011d50 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8011cfe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011d00:	f7ff fc90 	bl	8011624 <xHas_1F_PHYSPCS>
 8011d04:	4603      	mov	r3, r0
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d01b      	beq.n	8011d42 <xPhyStartAutoNegotiation+0x282>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	f107 020c 	add.w	r2, r7, #12
 8011d12:	211f      	movs	r1, #31
 8011d14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011d16:	4798      	blx	r3
                ulRegValue = 0;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f003 0310 	and.w	r3, r3, #16
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d003      	beq.n	8011d2e <xPhyStartAutoNegotiation+0x26e>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8011d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d28:	f043 0304 	orr.w	r3, r3, #4
 8011d2c:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	f003 030c 	and.w	r3, r3, #12
 8011d34:	2b04      	cmp	r3, #4
 8011d36:	d10b      	bne.n	8011d50 <xPhyStartAutoNegotiation+0x290>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8011d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d3a:	f043 0302 	orr.w	r3, r3, #2
 8011d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d40:	e006      	b.n	8011d50 <xPhyStartAutoNegotiation+0x290>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011d4a:	2110      	movs	r1, #16
 8011d4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011d4e:	4798      	blx	r3
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8011d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d52:	f003 0304 	and.w	r3, r3, #4
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d004      	beq.n	8011d64 <xPhyStartAutoNegotiation+0x2a4>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2202      	movs	r2, #2
 8011d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8011d62:	e003      	b.n	8011d6c <xPhyStartAutoNegotiation+0x2ac>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2201      	movs	r2, #1
 8011d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8011d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d6e:	f003 0302 	and.w	r3, r3, #2
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d004      	beq.n	8011d80 <xPhyStartAutoNegotiation+0x2c0>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011d7e:	e005      	b.n	8011d8c <xPhyStartAutoNegotiation+0x2cc>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2202      	movs	r2, #2
 8011d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011d88:	e000      	b.n	8011d8c <xPhyStartAutoNegotiation+0x2cc>
                continue;
 8011d8a:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d8e:	3301      	adds	r3, #1
 8011d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d94:	005b      	lsls	r3, r3, #1
 8011d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011da0:	4293      	cmp	r3, r2
 8011da2:	f4ff af22 	bcc.w	8011bea <xPhyStartAutoNegotiation+0x12a>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8011da6:	2300      	movs	r3, #0
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3748      	adds	r7, #72	@ 0x48
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}
 8011db0:	00221560 	.word	0x00221560
 8011db4:	00221550 	.word	0x00221550

08011db8 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b088      	sub	sp, #32
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	dd25      	ble.n	8011e1c <xPhyCheckLinkStatus+0x64>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	331c      	adds	r3, #28
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f003 fc13 	bl	8015600 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8011de0:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011de2:	2300      	movs	r3, #0
 8011de4:	61bb      	str	r3, [r7, #24]
 8011de6:	e013      	b.n	8011e10 <xPhyCheckLinkStatus+0x58>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	4013      	ands	r3, r2
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d107      	bne.n	8011e04 <xPhyCheckLinkStatus+0x4c>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	431a      	orrs	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
                xNeedCheck = pdTRUE;
 8011e00:	2301      	movs	r3, #1
 8011e02:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011e04:	69bb      	ldr	r3, [r7, #24]
 8011e06:	3301      	adds	r3, #1
 8011e08:	61bb      	str	r3, [r7, #24]
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	005b      	lsls	r3, r3, #1
 8011e0e:	61fb      	str	r3, [r7, #28]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e14:	69ba      	ldr	r2, [r7, #24]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	dbe6      	blt.n	8011de8 <xPhyCheckLinkStatus+0x30>
 8011e1a:	e068      	b.n	8011eee <xPhyCheckLinkStatus+0x136>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f103 021c 	add.w	r2, r3, #28
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	3324      	adds	r3, #36	@ 0x24
 8011e26:	4619      	mov	r1, r3
 8011e28:	4610      	mov	r0, r2
 8011e2a:	f003 fc29 	bl	8015680 <xTaskCheckForTimeOut>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d05c      	beq.n	8011eee <xPhyCheckLinkStatus+0x136>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011e34:	2300      	movs	r3, #0
 8011e36:	61bb      	str	r3, [r7, #24]
 8011e38:	e03f      	b.n	8011eba <xPhyCheckLinkStatus+0x102>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	69bb      	ldr	r3, [r7, #24]
 8011e3e:	4413      	add	r3, r2
 8011e40:	3318      	adds	r3, #24
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f107 020c 	add.w	r2, r7, #12
 8011e4e:	2101      	movs	r1, #1
 8011e50:	6938      	ldr	r0, [r7, #16]
 8011e52:	4798      	blx	r3
 8011e54:	4603      	mov	r3, r0
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d129      	bne.n	8011eae <xPhyCheckLinkStatus+0xf6>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	4013      	ands	r3, r2
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	bf14      	ite	ne
 8011e66:	2301      	movne	r3, #1
 8011e68:	2300      	moveq	r3, #0
 8011e6a:	b2da      	uxtb	r2, r3
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f003 0304 	and.w	r3, r3, #4
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	bf14      	ite	ne
 8011e76:	2301      	movne	r3, #1
 8011e78:	2300      	moveq	r3, #0
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	4053      	eors	r3, r2
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d014      	beq.n	8011eae <xPhyCheckLinkStatus+0xf6>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f003 0304 	and.w	r3, r3, #4
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d006      	beq.n	8011e9c <xPhyCheckLinkStatus+0xe4>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	431a      	orrs	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8011e9a:	e006      	b.n	8011eaa <xPhyCheckLinkStatus+0xf2>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ea0:	69fb      	ldr	r3, [r7, #28]
 8011ea2:	43db      	mvns	r3, r3
 8011ea4:	401a      	ands	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
                    xNeedCheck = pdTRUE;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8011eae:	69bb      	ldr	r3, [r7, #24]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	61bb      	str	r3, [r7, #24]
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	005b      	lsls	r3, r3, #1
 8011eb8:	61fb      	str	r3, [r7, #28]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ebe:	69ba      	ldr	r2, [r7, #24]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	dbba      	blt.n	8011e3a <xPhyCheckLinkStatus+0x82>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	331c      	adds	r3, #28
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f003 fb99 	bl	8015600 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	085b      	lsrs	r3, r3, #1
 8011ed6:	4013      	ands	r3, r2
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d004      	beq.n	8011ee6 <xPhyCheckLinkStatus+0x12e>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8011ee2:	625a      	str	r2, [r3, #36]	@ 0x24
 8011ee4:	e003      	b.n	8011eee <xPhyCheckLinkStatus+0x136>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011eec:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8011eee:	697b      	ldr	r3, [r7, #20]
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	3720      	adds	r7, #32
 8011ef4:	46bd      	mov	sp, r7
 8011ef6:	bd80      	pop	{r7, pc}

08011ef8 <__NVIC_GetEnableIRQ>:
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	4603      	mov	r3, r0
 8011f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	db0d      	blt.n	8011f26 <__NVIC_GetEnableIRQ+0x2e>
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8011f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8011f34 <__NVIC_GetEnableIRQ+0x3c>)
 8011f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f10:	095b      	lsrs	r3, r3, #5
 8011f12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011f16:	79fb      	ldrb	r3, [r7, #7]
 8011f18:	f003 031f 	and.w	r3, r3, #31
 8011f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8011f20:	f003 0301 	and.w	r3, r3, #1
 8011f24:	e000      	b.n	8011f28 <__NVIC_GetEnableIRQ+0x30>
    return(0U);
 8011f26:	2300      	movs	r3, #0
}
 8011f28:	4618      	mov	r0, r3
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr
 8011f34:	e000e100 	.word	0xe000e100

08011f38 <__NVIC_SetPriority>:
{
 8011f38:	b480      	push	{r7}
 8011f3a:	b083      	sub	sp, #12
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	4603      	mov	r3, r0
 8011f40:	6039      	str	r1, [r7, #0]
 8011f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	db0a      	blt.n	8011f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	b2da      	uxtb	r2, r3
 8011f50:	490c      	ldr	r1, [pc, #48]	@ (8011f84 <__NVIC_SetPriority+0x4c>)
 8011f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f56:	0112      	lsls	r2, r2, #4
 8011f58:	b2d2      	uxtb	r2, r2
 8011f5a:	440b      	add	r3, r1
 8011f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011f60:	e00a      	b.n	8011f78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	b2da      	uxtb	r2, r3
 8011f66:	4908      	ldr	r1, [pc, #32]	@ (8011f88 <__NVIC_SetPriority+0x50>)
 8011f68:	79fb      	ldrb	r3, [r7, #7]
 8011f6a:	f003 030f 	and.w	r3, r3, #15
 8011f6e:	3b04      	subs	r3, #4
 8011f70:	0112      	lsls	r2, r2, #4
 8011f72:	b2d2      	uxtb	r2, r2
 8011f74:	440b      	add	r3, r1
 8011f76:	761a      	strb	r2, [r3, #24]
}
 8011f78:	bf00      	nop
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	e000e100 	.word	0xe000e100
 8011f88:	e000ed00 	.word	0xe000ed00

08011f8c <__NVIC_GetPriority>:
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b083      	sub	sp, #12
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	4603      	mov	r3, r0
 8011f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	db09      	blt.n	8011fb2 <__NVIC_GetPriority+0x26>
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
 8011f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8011fd4 <__NVIC_GetPriority+0x48>)
 8011fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	091b      	lsrs	r3, r3, #4
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	e009      	b.n	8011fc6 <__NVIC_GetPriority+0x3a>
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8011fb2:	4a09      	ldr	r2, [pc, #36]	@ (8011fd8 <__NVIC_GetPriority+0x4c>)
 8011fb4:	79fb      	ldrb	r3, [r7, #7]
 8011fb6:	f003 030f 	and.w	r3, r3, #15
 8011fba:	3b04      	subs	r3, #4
 8011fbc:	4413      	add	r3, r2
 8011fbe:	7e1b      	ldrb	r3, [r3, #24]
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	091b      	lsrs	r3, r3, #4
 8011fc4:	b2db      	uxtb	r3, r3
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	370c      	adds	r7, #12
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr
 8011fd2:	bf00      	nop
 8011fd4:	e000e100 	.word	0xe000e100
 8011fd8:	e000ed00 	.word	0xe000ed00

08011fdc <prvPhyReadReg>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyReadReg( BaseType_t xAddress,
                                 BaseType_t xRegister,
                                 uint32_t * pulValue )
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b086      	sub	sp, #24
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	60f8      	str	r0, [r7, #12]
 8011fe4:	60b9      	str	r1, [r7, #8]
 8011fe6:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = 0;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &xEthHandle, ( uint32_t ) xAddress, ( uint32_t ) xRegister, pulValue ) != HAL_OK )
 8011fec:	68f9      	ldr	r1, [r7, #12]
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	4807      	ldr	r0, [pc, #28]	@ (8012010 <prvPhyReadReg+0x34>)
 8011ff4:	f7f0 ffca 	bl	8002f8c <HAL_ETH_ReadPHYRegister>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d002      	beq.n	8012004 <prvPhyReadReg+0x28>
    {
        xResult = -1;
 8011ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8012002:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8012004:	697b      	ldr	r3, [r7, #20]
}
 8012006:	4618      	mov	r0, r3
 8012008:	3718      	adds	r7, #24
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	200033e8 	.word	0x200033e8

08012014 <prvPhyWriteReg>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyWriteReg( BaseType_t xAddress,
                                  BaseType_t xRegister,
                                  uint32_t ulValue )
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b086      	sub	sp, #24
 8012018:	af00      	add	r7, sp, #0
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = 0;
 8012020:	2300      	movs	r3, #0
 8012022:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &xEthHandle, ( uint32_t ) xAddress, ( uint32_t ) xRegister, ulValue ) != HAL_OK )
 8012024:	68f9      	ldr	r1, [r7, #12]
 8012026:	68ba      	ldr	r2, [r7, #8]
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	4807      	ldr	r0, [pc, #28]	@ (8012048 <prvPhyWriteReg+0x34>)
 801202c:	f7f0 fff9 	bl	8003022 <HAL_ETH_WritePHYRegister>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d002      	beq.n	801203c <prvPhyWriteReg+0x28>
    {
        xResult = -1;
 8012036:	f04f 33ff 	mov.w	r3, #4294967295
 801203a:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 801203c:	697b      	ldr	r3, [r7, #20]
}
 801203e:	4618      	mov	r0, r3
 8012040:	3718      	adds	r7, #24
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	200033e8 	.word	0x200033e8

0801204c <prvGetPhyLinkStatus>:
/*                      Network Interface Access Hooks                       */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvGetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 801204c:	b480      	push	{r7}
 801204e:	b085      	sub	sp, #20
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
    ( void ) pxInterface;

    BaseType_t xReturn = pdFALSE;
 8012054:	2300      	movs	r3, #0
 8012056:	60fb      	str	r3, [r7, #12]

    /* const EMACData_t xEMACData = *( ( EMACData_t * ) pxInterface->pvArgument ); */

    if( xPhyObject.ulLinkStatusMask != 0U )
 8012058:	4b06      	ldr	r3, [pc, #24]	@ (8012074 <prvGetPhyLinkStatus+0x28>)
 801205a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801205c:	2b00      	cmp	r3, #0
 801205e:	d001      	beq.n	8012064 <prvGetPhyLinkStatus+0x18>
    {
        xReturn = pdTRUE;
 8012060:	2301      	movs	r3, #1
 8012062:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8012064:	68fb      	ldr	r3, [r7, #12]
}
 8012066:	4618      	mov	r0, r3
 8012068:	3714      	adds	r7, #20
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop
 8012074:	20003498 	.word	0x20003498

08012078 <prvNetworkInterfaceInitialise>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b086      	sub	sp, #24
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
    BaseType_t xInitResult = pdFAIL;
 8012080:	2300      	movs	r3, #0
 8012082:	617b      	str	r3, [r7, #20]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8012084:	4b39      	ldr	r3, [pc, #228]	@ (801216c <prvNetworkInterfaceInitialise+0xf4>)
 8012086:	613b      	str	r3, [r7, #16]
    EthernetPhy_t * pxPhyObject = &xPhyObject;
 8012088:	4b39      	ldr	r3, [pc, #228]	@ (8012170 <prvNetworkInterfaceInitialise+0xf8>)
 801208a:	60fb      	str	r3, [r7, #12]

    switch( xMacInitStatus )
 801208c:	4b39      	ldr	r3, [pc, #228]	@ (8012174 <prvNetworkInterfaceInitialise+0xfc>)
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	2b05      	cmp	r3, #5
 8012092:	d80f      	bhi.n	80120b4 <prvNetworkInterfaceInitialise+0x3c>
 8012094:	a201      	add	r2, pc, #4	@ (adr r2, 801209c <prvNetworkInterfaceInitialise+0x24>)
 8012096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801209a:	bf00      	nop
 801209c:	080120d1 	.word	0x080120d1
 80120a0:	080120e5 	.word	0x080120e5
 80120a4:	080120f7 	.word	0x080120f7
 80120a8:	0801210d 	.word	0x0801210d
 80120ac:	0801211f 	.word	0x0801211f
 80120b0:	0801213b 	.word	0x0801213b
	__asm volatile
 80120b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120b8:	b672      	cpsid	i
 80120ba:	f383 8811 	msr	BASEPRI, r3
 80120be:	f3bf 8f6f 	isb	sy
 80120c2:	f3bf 8f4f 	dsb	sy
 80120c6:	b662      	cpsie	i
 80120c8:	60bb      	str	r3, [r7, #8]
}
 80120ca:	bf00      	nop
    {
        default:
            configASSERT( pdFALSE );
 80120cc:	bf00      	nop
 80120ce:	e7fd      	b.n	80120cc <prvNetworkInterfaceInitialise+0x54>
            break;

        case eMacEthInit:

            if( prvEthConfigInit( pxEthHandle, pxInterface ) == pdFALSE )
 80120d0:	6879      	ldr	r1, [r7, #4]
 80120d2:	6938      	ldr	r0, [r7, #16]
 80120d4:	f000 fb02 	bl	80126dc <prvEthConfigInit>
 80120d8:	4603      	mov	r3, r0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d036      	beq.n	801214c <prvNetworkInterfaceInitialise+0xd4>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacEthInit failed\n" ) );
                break;
            }

            xMacInitStatus = eMacPhyInit;
 80120de:	4b25      	ldr	r3, [pc, #148]	@ (8012174 <prvNetworkInterfaceInitialise+0xfc>)
 80120e0:	2201      	movs	r2, #1
 80120e2:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacPhyInit:

            if( prvPhyInit( pxPhyObject ) == pdFALSE )
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f000 fc49 	bl	801297c <prvPhyInit>
 80120ea:	4603      	mov	r3, r0
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d02f      	beq.n	8012150 <prvNetworkInterfaceInitialise+0xd8>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacPhyInit failed\n" ) );
                break;
            }

            xMacInitStatus = eMacPhyStart;
 80120f0:	4b20      	ldr	r3, [pc, #128]	@ (8012174 <prvNetworkInterfaceInitialise+0xfc>)
 80120f2:	2202      	movs	r2, #2
 80120f4:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacPhyStart:

            if( prvPhyStart( pxEthHandle, pxInterface, pxPhyObject ) == pdFALSE )
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	6879      	ldr	r1, [r7, #4]
 80120fa:	6938      	ldr	r0, [r7, #16]
 80120fc:	f000 fc5a 	bl	80129b4 <prvPhyStart>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d026      	beq.n	8012154 <prvNetworkInterfaceInitialise+0xdc>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacPhyStart failed\n" ) );
                break;
            }

            xMacInitStatus = eMacTaskStart;
 8012106:	4b1b      	ldr	r3, [pc, #108]	@ (8012174 <prvNetworkInterfaceInitialise+0xfc>)
 8012108:	2203      	movs	r2, #3
 801210a:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacTaskStart:

            if( prvEMACTaskStart( pxInterface ) == pdFALSE )
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 fa5b 	bl	80125c8 <prvEMACTaskStart>
 8012112:	4603      	mov	r3, r0
 8012114:	2b00      	cmp	r3, #0
 8012116:	d01f      	beq.n	8012158 <prvNetworkInterfaceInitialise+0xe0>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacTaskStart failed\n" ) );
                break;
            }

            xMacInitStatus = eMacEthStart;
 8012118:	4b16      	ldr	r3, [pc, #88]	@ (8012174 <prvNetworkInterfaceInitialise+0xfc>)
 801211a:	2204      	movs	r2, #4
 801211c:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacEthStart:

            if( pxEthHandle->gState != HAL_ETH_STATE_STARTED )
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012124:	2b40      	cmp	r3, #64	@ 0x40
 8012126:	d005      	beq.n	8012134 <prvNetworkInterfaceInitialise+0xbc>
            {
                if( HAL_ETH_Start_IT( pxEthHandle ) != HAL_OK )
 8012128:	6938      	ldr	r0, [r7, #16]
 801212a:	f7f0 fb63 	bl	80027f4 <HAL_ETH_Start_IT>
 801212e:	4603      	mov	r3, r0
 8012130:	2b00      	cmp	r3, #0
 8012132:	d113      	bne.n	801215c <prvNetworkInterfaceInitialise+0xe4>
                    FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacEthStart failed\n" ) );
                    break;
                }
            }

            xMacInitStatus = eMacInitComplete;
 8012134:	4b0f      	ldr	r3, [pc, #60]	@ (8012174 <prvNetworkInterfaceInitialise+0xfc>)
 8012136:	2205      	movs	r2, #5
 8012138:	701a      	strb	r2, [r3, #0]
        /* fallthrough */

        case eMacInitComplete:

            if( prvGetPhyLinkStatus( pxInterface ) != pdTRUE )
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f7ff ff86 	bl	801204c <prvGetPhyLinkStatus>
 8012140:	4603      	mov	r3, r0
 8012142:	2b01      	cmp	r3, #1
 8012144:	d10c      	bne.n	8012160 <prvNetworkInterfaceInitialise+0xe8>
            {
                FreeRTOS_debug_printf( ( "prvNetworkInterfaceInitialise: eMacInitComplete failed\n" ) );
                break;
            }

            xInitResult = pdPASS;
 8012146:	2301      	movs	r3, #1
 8012148:	617b      	str	r3, [r7, #20]
 801214a:	e00a      	b.n	8012162 <prvNetworkInterfaceInitialise+0xea>
                break;
 801214c:	bf00      	nop
 801214e:	e008      	b.n	8012162 <prvNetworkInterfaceInitialise+0xea>
                break;
 8012150:	bf00      	nop
 8012152:	e006      	b.n	8012162 <prvNetworkInterfaceInitialise+0xea>
                break;
 8012154:	bf00      	nop
 8012156:	e004      	b.n	8012162 <prvNetworkInterfaceInitialise+0xea>
                break;
 8012158:	bf00      	nop
 801215a:	e002      	b.n	8012162 <prvNetworkInterfaceInitialise+0xea>
                    break;
 801215c:	bf00      	nop
 801215e:	e000      	b.n	8012162 <prvNetworkInterfaceInitialise+0xea>
                break;
 8012160:	bf00      	nop
    }

    return xInitResult;
 8012162:	697b      	ldr	r3, [r7, #20]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3718      	adds	r7, #24
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	200033e8 	.word	0x200033e8
 8012170:	20003498 	.word	0x20003498
 8012174:	200034e8 	.word	0x200034e8

08012178 <prvNetworkInterfaceOutput>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                             NetworkBufferDescriptor_t * const pxDescriptor,
                                             BaseType_t xReleaseAfterSend )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b09e      	sub	sp, #120	@ 0x78
 801217c:	af00      	add	r7, sp, #0
 801217e:	60f8      	str	r0, [r7, #12]
 8012180:	60b9      	str	r1, [r7, #8]
 8012182:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8012184:	2300      	movs	r3, #0
 8012186:	677b      	str	r3, [r7, #116]	@ 0x74

    /* Zero-Copy Only */
    configASSERT( xReleaseAfterSend == pdTRUE );
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2b01      	cmp	r3, #1
 801218c:	d00d      	beq.n	80121aa <prvNetworkInterfaceOutput+0x32>
	__asm volatile
 801218e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012192:	b672      	cpsid	i
 8012194:	f383 8811 	msr	BASEPRI, r3
 8012198:	f3bf 8f6f 	isb	sy
 801219c:	f3bf 8f4f 	dsb	sy
 80121a0:	b662      	cpsie	i
 80121a2:	663b      	str	r3, [r7, #96]	@ 0x60
}
 80121a4:	bf00      	nop
 80121a6:	bf00      	nop
 80121a8:	e7fd      	b.n	80121a6 <prvNetworkInterfaceOutput+0x2e>

    do
    {
        ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80121aa:	4b66      	ldr	r3, [pc, #408]	@ (8012344 <prvNetworkInterfaceOutput+0x1cc>)
 80121ac:	673b      	str	r3, [r7, #112]	@ 0x70

        if( ( pxDescriptor == NULL ) || ( pxDescriptor->pucEthernetBuffer == NULL ) || ( pxDescriptor->xDataLength > niEMAC_DATA_BUFFER_SIZE ) )
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	f000 80b5 	beq.w	8012320 <prvNetworkInterfaceOutput+0x1a8>
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f000 80b0 	beq.w	8012320 <prvNetworkInterfaceOutput+0x1a8>
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121c4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80121c8:	f200 80aa 	bhi.w	8012320 <prvNetworkInterfaceOutput+0x1a8>
            /* TODO: if xDataLength is greater than niEMAC_DATA_BUFFER_SIZE, you can link buffers */
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Invalid Descriptor\n" ) );
            break;
        }

        if( prvGetPhyLinkStatus( pxInterface ) == pdFALSE )
 80121cc:	68f8      	ldr	r0, [r7, #12]
 80121ce:	f7ff ff3d 	bl	801204c <prvGetPhyLinkStatus>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	f000 80a5 	beq.w	8012324 <prvNetworkInterfaceOutput+0x1ac>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Link Down\n" ) );
            break;
        }

        if( ( xMacInitStatus != eMacInitComplete ) || ( pxEthHandle->gState != HAL_ETH_STATE_STARTED ) )
 80121da:	4b5b      	ldr	r3, [pc, #364]	@ (8012348 <prvNetworkInterfaceOutput+0x1d0>)
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	2b05      	cmp	r3, #5
 80121e0:	f040 80a2 	bne.w	8012328 <prvNetworkInterfaceOutput+0x1b0>
 80121e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80121e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80121ea:	2b40      	cmp	r3, #64	@ 0x40
 80121ec:	f040 809c 	bne.w	8012328 <prvNetworkInterfaceOutput+0x1b0>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Interface Not Started\n" ) );
            break;
        }

        ETH_TxPacketConfigTypeDef xTxConfig =
 80121f0:	f107 0314 	add.w	r3, r7, #20
 80121f4:	2238      	movs	r2, #56	@ 0x38
 80121f6:	2100      	movs	r1, #0
 80121f8:	4618      	mov	r0, r3
 80121fa:	f005 f9fb 	bl	80175f4 <memset>
 80121fe:	2320      	movs	r3, #32
 8012200:	617b      	str	r3, [r7, #20]
            .CRCPadCtrl = ETH_CRC_PAD_INSERT,
            .Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD,
        };

        #if ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM )
            xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8012202:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8012206:	62bb      	str	r3, [r7, #40]	@ 0x28
            xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	f043 0301 	orr.w	r3, r3, #1
 801220e:	617b      	str	r3, [r7, #20]
        #else
            xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
        #endif

        const EthernetHeader_t * const pxEthHeader = ( const EthernetHeader_t * const ) pxDescriptor->pucEthernetBuffer;
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012214:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if( pxEthHeader->usFrameType == ipIPv4_FRAME_TYPE )
 8012216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012218:	899b      	ldrh	r3, [r3, #12]
 801221a:	b29b      	uxth	r3, r3
 801221c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012220:	d110      	bne.n	8012244 <prvNetworkInterfaceOutput+0xcc>
        {
            #if ipconfigIS_ENABLED( ipconfigUSE_IPv4 )
                const IPPacket_t * const pxIPPacket = ( const IPPacket_t * const ) pxDescriptor->pucEthernetBuffer;
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012226:	66bb      	str	r3, [r7, #104]	@ 0x68

                if( pxIPPacket->xIPHeader.ucProtocol == ipPROTOCOL_ICMP )
 8012228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801222a:	7ddb      	ldrb	r3, [r3, #23]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d109      	bne.n	8012244 <prvNetworkInterfaceOutput+0xcc>
                {
                    #if ipconfigIS_ENABLED( ipconfigREPLY_TO_INCOMING_PINGS ) || ipconfigIS_ENABLED( ipconfigSUPPORT_OUTGOING_PINGS )
                        ICMPPacket_t * const pxICMPPacket = ( ICMPPacket_t * const ) pxDescriptor->pucEthernetBuffer;
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012234:	667b      	str	r3, [r7, #100]	@ 0x64
                        #if ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM )
                            pxICMPPacket->xICMPHeader.usChecksum = 0U;
 8012236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012238:	2200      	movs	r2, #0
 801223a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 801223e:	2200      	movs	r2, #0
 8012240:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
            #endif /* if ipconfigIS_ENABLED( ipconfigUSE_IPv4 ) */
        }

        ETH_BufferTypeDef xTxBuffer =
        {
            .buffer = pxDescriptor->pucEthernetBuffer,
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        ETH_BufferTypeDef xTxBuffer =
 8012248:	64fb      	str	r3, [r7, #76]	@ 0x4c
            .len    = pxDescriptor->xDataLength,
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTxBuffer =
 801224e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012250:	2300      	movs	r3, #0
 8012252:	657b      	str	r3, [r7, #84]	@ 0x54
            .next   = NULL
        };

        xTxConfig.pData = pxDescriptor;
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	64bb      	str	r3, [r7, #72]	@ 0x48
        xTxConfig.TxBuffer = &xTxBuffer;
 8012258:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801225c:	61fb      	str	r3, [r7, #28]
        xTxConfig.Length = xTxBuffer.len;
 801225e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012260:	61bb      	str	r3, [r7, #24]
        /* if( xQueueSendToBack( xTxQueue, pxDescriptor, 0 ) != pdPASS )
         * {
         *  xReleaseAfterSend = pdFALSE;
         * } */

        if( xSemaphoreTake( xTxDescSem, pdMS_TO_TICKS( niEMAC_DESCRIPTOR_WAIT_TIME_MS ) ) == pdFALSE )
 8012262:	4b3a      	ldr	r3, [pc, #232]	@ (801234c <prvNetworkInterfaceOutput+0x1d4>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	2114      	movs	r1, #20
 8012268:	4618      	mov	r0, r3
 801226a:	f002 f8d9 	bl	8014420 <xQueueSemaphoreTake>
 801226e:	4603      	mov	r3, r0
 8012270:	2b00      	cmp	r3, #0
 8012272:	d05b      	beq.n	801232c <prvNetworkInterfaceOutput+0x1b4>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: No Descriptors Available\n" ) );
            break;
        }

        if( xSemaphoreTake( xTxMutex, pdMS_TO_TICKS( niEMAC_TX_MAX_BLOCK_TIME_MS ) ) == pdFALSE )
 8012274:	4b36      	ldr	r3, [pc, #216]	@ (8012350 <prvNetworkInterfaceOutput+0x1d8>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2114      	movs	r1, #20
 801227a:	4618      	mov	r0, r3
 801227c:	f002 f8d0 	bl	8014420 <xQueueSemaphoreTake>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d107      	bne.n	8012296 <prvNetworkInterfaceOutput+0x11e>
        {
            FreeRTOS_debug_printf( ( "xNetworkInterfaceOutput: Process Busy\n" ) );
            ( void ) xSemaphoreGive( xTxDescSem );
 8012286:	4b31      	ldr	r3, [pc, #196]	@ (801234c <prvNetworkInterfaceOutput+0x1d4>)
 8012288:	6818      	ldr	r0, [r3, #0]
 801228a:	2300      	movs	r3, #0
 801228c:	2200      	movs	r2, #0
 801228e:	2100      	movs	r1, #0
 8012290:	f001 fe30 	bl	8013ef4 <xQueueGenericSend>
            break;
 8012294:	e04b      	b.n	801232e <prvNetworkInterfaceOutput+0x1b6>
                const size_t uxLength = xTxBuffer.len + uxDataOffset;
                SCB_CleanDCache_by_Addr( ( uint32_t * ) uxLineStart, uxLength );
            }
        #endif

        if( HAL_ETH_Transmit_IT( pxEthHandle, &xTxConfig ) == HAL_OK )
 8012296:	f107 0314 	add.w	r3, r7, #20
 801229a:	4619      	mov	r1, r3
 801229c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 801229e:	f7f0 fb99 	bl	80029d4 <HAL_ETH_Transmit_IT>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d104      	bne.n	80122b2 <prvNetworkInterfaceOutput+0x13a>
        {
            /* Released later in deferred task by calling HAL_ETH_ReleaseTxPacket */
            xReleaseAfterSend = pdFALSE;
 80122a8:	2300      	movs	r3, #0
 80122aa:	607b      	str	r3, [r7, #4]
            xResult = pdPASS;
 80122ac:	2301      	movs	r3, #1
 80122ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80122b0:	e02e      	b.n	8012310 <prvNetworkInterfaceOutput+0x198>
        }
        else
        {
            ( void ) xSemaphoreGive( xTxDescSem );
 80122b2:	4b26      	ldr	r3, [pc, #152]	@ (801234c <prvNetworkInterfaceOutput+0x1d4>)
 80122b4:	6818      	ldr	r0, [r3, #0]
 80122b6:	2300      	movs	r3, #0
 80122b8:	2200      	movs	r2, #0
 80122ba:	2100      	movs	r1, #0
 80122bc:	f001 fe1a 	bl	8013ef4 <xQueueGenericSend>
            configASSERT( pxEthHandle->gState == HAL_ETH_STATE_STARTED );
 80122c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80122c6:	2b40      	cmp	r3, #64	@ 0x40
 80122c8:	d00d      	beq.n	80122e6 <prvNetworkInterfaceOutput+0x16e>
	__asm volatile
 80122ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ce:	b672      	cpsid	i
 80122d0:	f383 8811 	msr	BASEPRI, r3
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	b662      	cpsie	i
 80122de:	65fb      	str	r3, [r7, #92]	@ 0x5c
}
 80122e0:	bf00      	nop
 80122e2:	bf00      	nop
 80122e4:	e7fd      	b.n	80122e2 <prvNetworkInterfaceOutput+0x16a>
            /* Should be impossible if semaphores are correctly implemented */
            configASSERT( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_BUSY ) == 0 );
 80122e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80122ec:	f003 0302 	and.w	r3, r3, #2
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d00d      	beq.n	8012310 <prvNetworkInterfaceOutput+0x198>
	__asm volatile
 80122f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f8:	b672      	cpsid	i
 80122fa:	f383 8811 	msr	BASEPRI, r3
 80122fe:	f3bf 8f6f 	isb	sy
 8012302:	f3bf 8f4f 	dsb	sy
 8012306:	b662      	cpsie	i
 8012308:	65bb      	str	r3, [r7, #88]	@ 0x58
}
 801230a:	bf00      	nop
 801230c:	bf00      	nop
 801230e:	e7fd      	b.n	801230c <prvNetworkInterfaceOutput+0x194>
        }

        ( void ) xSemaphoreGive( xTxMutex );
 8012310:	4b0f      	ldr	r3, [pc, #60]	@ (8012350 <prvNetworkInterfaceOutput+0x1d8>)
 8012312:	6818      	ldr	r0, [r3, #0]
 8012314:	2300      	movs	r3, #0
 8012316:	2200      	movs	r2, #0
 8012318:	2100      	movs	r1, #0
 801231a:	f001 fdeb 	bl	8013ef4 <xQueueGenericSend>
 801231e:	e006      	b.n	801232e <prvNetworkInterfaceOutput+0x1b6>
            break;
 8012320:	bf00      	nop
 8012322:	e004      	b.n	801232e <prvNetworkInterfaceOutput+0x1b6>
            break;
 8012324:	bf00      	nop
 8012326:	e002      	b.n	801232e <prvNetworkInterfaceOutput+0x1b6>
            break;
 8012328:	bf00      	nop
 801232a:	e000      	b.n	801232e <prvNetworkInterfaceOutput+0x1b6>
            break;
 801232c:	bf00      	nop
    } while( pdFALSE );

    if( xReleaseAfterSend == pdTRUE )
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2b01      	cmp	r3, #1
 8012332:	d102      	bne.n	801233a <prvNetworkInterfaceOutput+0x1c2>
    {
        prvReleaseNetworkBufferDescriptor( pxDescriptor );
 8012334:	68b8      	ldr	r0, [r7, #8]
 8012336:	f000 fe22 	bl	8012f7e <prvReleaseNetworkBufferDescriptor>
    }

    return xResult;
 801233a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 801233c:	4618      	mov	r0, r3
 801233e:	3778      	adds	r7, #120	@ 0x78
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	200033e8 	.word	0x200033e8
 8012348:	200034e8 	.word	0x200034e8
 801234c:	200034e0 	.word	0x200034e0
 8012350:	200034dc 	.word	0x200034dc

08012354 <prvAddAllowedMACAddress>:

/*---------------------------------------------------------------------------*/

static void prvAddAllowedMACAddress( NetworkInterface_t * pxInterface,
                                     const uint8_t * pucMacAddress )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 801235e:	4b12      	ldr	r3, [pc, #72]	@ (80123a8 <prvAddAllowedMACAddress+0x54>)
 8012360:	617b      	str	r3, [r7, #20]

    /* TODO: group address filtering with Mask Byte Control */
    BaseType_t xResult = prvAddDestMACAddrMatch( pxEthHandle->Instance, pucMacAddress );
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	6839      	ldr	r1, [r7, #0]
 8012368:	4618      	mov	r0, r3
 801236a:	f000 fc23 	bl	8012bb4 <prvAddDestMACAddrMatch>
 801236e:	6138      	str	r0, [r7, #16]

    if( xResult == pdFALSE )
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d114      	bne.n	80123a0 <prvAddAllowedMACAddress+0x4c>
    {
        const uint8_t ucHashIndex = prvGetMacHashIndex( pucMacAddress );
 8012376:	6838      	ldr	r0, [r7, #0]
 8012378:	f000 fb8c 	bl	8012a94 <prvGetMacHashIndex>
 801237c:	4603      	mov	r3, r0
 801237e:	73fb      	strb	r3, [r7, #15]

        xResult = prvSetNewDestMACAddrMatch( pxEthHandle->Instance, ucHashIndex, pucMacAddress );
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	7bf9      	ldrb	r1, [r7, #15]
 8012386:	683a      	ldr	r2, [r7, #0]
 8012388:	4618      	mov	r0, r3
 801238a:	f000 fce1 	bl	8012d50 <prvSetNewDestMACAddrMatch>
 801238e:	6138      	str	r0, [r7, #16]

        if( xResult == pdFALSE )
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d104      	bne.n	80123a0 <prvAddAllowedMACAddress+0x4c>
        {
            prvAddDestMACAddrHash( pxEthHandle, ucHashIndex );
 8012396:	7bfb      	ldrb	r3, [r7, #15]
 8012398:	4619      	mov	r1, r3
 801239a:	6978      	ldr	r0, [r7, #20]
 801239c:	f000 fd08 	bl	8012db0 <prvAddDestMACAddrHash>
        }
    }
}
 80123a0:	bf00      	nop
 80123a2:	3718      	adds	r7, #24
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	200033e8 	.word	0x200033e8

080123ac <prvRemoveAllowedMACAddress>:

/*---------------------------------------------------------------------------*/

static void prvRemoveAllowedMACAddress( NetworkInterface_t * pxInterface,
                                        const uint8_t * pucMacAddress )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80123b6:	4b0a      	ldr	r3, [pc, #40]	@ (80123e0 <prvRemoveAllowedMACAddress+0x34>)
 80123b8:	60fb      	str	r3, [r7, #12]

    const BaseType_t xResult = prvRemoveDestMACAddrMatch( pxEthHandle->Instance, pucMacAddress );
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	6839      	ldr	r1, [r7, #0]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f000 fc5f 	bl	8012c84 <prvRemoveDestMACAddrMatch>
 80123c6:	60b8      	str	r0, [r7, #8]

    if( xResult == pdFALSE )
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d103      	bne.n	80123d6 <prvRemoveAllowedMACAddress+0x2a>
    {
        prvRemoveDestMACAddrHash( pxEthHandle, pucMacAddress );
 80123ce:	6839      	ldr	r1, [r7, #0]
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f000 fd2b 	bl	8012e2c <prvRemoveDestMACAddrHash>
    }
}
 80123d6:	bf00      	nop
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	200033e8 	.word	0x200033e8

080123e4 <prvNetworkInterfaceInput>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( ETH_HandleTypeDef * pxEthHandle,
                                            NetworkInterface_t * pxInterface )
{
 80123e4:	b590      	push	{r4, r7, lr}
 80123e6:	b087      	sub	sp, #28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 80123ee:	2300      	movs	r3, #0
 80123f0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxCount = 0;
 80123f2:	2300      	movs	r3, #0
 80123f4:	613b      	str	r3, [r7, #16]

    #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
        NetworkBufferDescriptor_t * pxStartDescriptor = NULL;
        NetworkBufferDescriptor_t * pxEndDescriptor = NULL;
    #endif
    NetworkBufferDescriptor_t * pxCurDescriptor = NULL;
 80123f6:	2300      	movs	r3, #0
 80123f8:	60bb      	str	r3, [r7, #8]

    if( ( xMacInitStatus == eMacInitComplete ) && ( pxEthHandle->gState == HAL_ETH_STATE_STARTED ) )
 80123fa:	4b25      	ldr	r3, [pc, #148]	@ (8012490 <prvNetworkInterfaceInput+0xac>)
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	2b05      	cmp	r3, #5
 8012400:	d13b      	bne.n	801247a <prvNetworkInterfaceInput+0x96>
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012408:	2b40      	cmp	r3, #64	@ 0x40
 801240a:	d136      	bne.n	801247a <prvNetworkInterfaceInput+0x96>
    {
        while( HAL_ETH_ReadData( pxEthHandle, ( void ** ) &pxCurDescriptor ) == HAL_OK )
 801240c:	e02c      	b.n	8012468 <prvNetworkInterfaceInput+0x84>
        {
            ++uxCount;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	3301      	adds	r3, #1
 8012412:	613b      	str	r3, [r7, #16]

            if( pxCurDescriptor == NULL )
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d025      	beq.n	8012466 <prvNetworkInterfaceInput+0x82>
            {
                /* Buffer was dropped, ignore packet */
                continue;
            }

            configASSERT( pxCurDescriptor->xDataLength <= niEMAC_DATA_BUFFER_SIZE );
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801241e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8012422:	d90d      	bls.n	8012440 <prvNetworkInterfaceInput+0x5c>
	__asm volatile
 8012424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012428:	b672      	cpsid	i
 801242a:	f383 8811 	msr	BASEPRI, r3
 801242e:	f3bf 8f6f 	isb	sy
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	b662      	cpsie	i
 8012438:	60fb      	str	r3, [r7, #12]
}
 801243a:	bf00      	nop
 801243c:	bf00      	nop
 801243e:	e7fd      	b.n	801243c <prvNetworkInterfaceInput+0x58>

            pxCurDescriptor->pxInterface = pxInterface;
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	683a      	ldr	r2, [r7, #0]
 8012444:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxCurDescriptor->pxEndPoint = FreeRTOS_MatchingEndpoint( pxCurDescriptor->pxInterface, pxCurDescriptor->pucEthernetBuffer );
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801244e:	68bc      	ldr	r4, [r7, #8]
 8012450:	4619      	mov	r1, r3
 8012452:	4610      	mov	r0, r2
 8012454:	f7f8 ff26 	bl	800b2a4 <FreeRTOS_MatchingEndpoint>
 8012458:	4603      	mov	r3, r0
 801245a:	6323      	str	r3, [r4, #48]	@ 0x30
                    pxEndDescriptor->pxNextBuffer = pxCurDescriptor;
                }

                pxEndDescriptor = pxCurDescriptor;
            #else /* if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES ) */
                prvSendRxEvent( pxCurDescriptor );
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	4618      	mov	r0, r3
 8012460:	f000 fda3 	bl	8012faa <prvSendRxEvent>
 8012464:	e000      	b.n	8012468 <prvNetworkInterfaceInput+0x84>
                continue;
 8012466:	bf00      	nop
        while( HAL_ETH_ReadData( pxEthHandle, ( void ** ) &pxCurDescriptor ) == HAL_OK )
 8012468:	f107 0308 	add.w	r3, r7, #8
 801246c:	4619      	mov	r1, r3
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7f0 fb0c 	bl	8002a8c <HAL_ETH_ReadData>
 8012474:	4603      	mov	r3, r0
 8012476:	2b00      	cmp	r3, #0
 8012478:	d0c9      	beq.n	801240e <prvNetworkInterfaceInput+0x2a>
            #endif /* if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES ) */
        }
    }

    if( uxCount > 0 )
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d001      	beq.n	8012484 <prvNetworkInterfaceInput+0xa0>
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            prvSendRxEvent( pxStartDescriptor );
        #endif
        xResult = pdTRUE;
 8012480:	2301      	movs	r3, #1
 8012482:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8012484:	697b      	ldr	r3, [r7, #20]
}
 8012486:	4618      	mov	r0, r3
 8012488:	371c      	adds	r7, #28
 801248a:	46bd      	mov	sp, r7
 801248c:	bd90      	pop	{r4, r7, pc}
 801248e:	bf00      	nop
 8012490:	200034e8 	.word	0x200034e8

08012494 <prvEMACHandlerTask>:

/*---------------------------------------------------------------------------*/

static portTASK_FUNCTION( prvEMACHandlerTask, pvParameters )
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b088      	sub	sp, #32
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
    NetworkInterface_t * pxInterface = ( NetworkInterface_t * ) pvParameters;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	61bb      	str	r3, [r7, #24]
    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 80124a0:	4b47      	ldr	r3, [pc, #284]	@ (80125c0 <prvEMACHandlerTask+0x12c>)
 80124a2:	617b      	str	r3, [r7, #20]
    EthernetPhy_t * pxPhyObject = &xPhyObject;
 80124a4:	4b47      	ldr	r3, [pc, #284]	@ (80125c4 <prvEMACHandlerTask+0x130>)
 80124a6:	613b      	str	r3, [r7, #16]

    /* iptraceEMAC_TASK_STARTING(); */

    for( ; ; )
    {
        BaseType_t xResult = pdFALSE;
 80124a8:	2300      	movs	r3, #0
 80124aa:	61fb      	str	r3, [r7, #28]
        uint32_t ulISREvents = 0U;
 80124ac:	2300      	movs	r3, #0
 80124ae:	60bb      	str	r3, [r7, #8]

        if( xTaskNotifyWait( 0U, eMacEventAll, &ulISREvents, pdMS_TO_TICKS( niEMAC_TASK_MAX_BLOCK_TIME_MS ) ) == pdTRUE )
 80124b0:	f107 0208 	add.w	r2, r7, #8
 80124b4:	2364      	movs	r3, #100	@ 0x64
 80124b6:	217f      	movs	r1, #127	@ 0x7f
 80124b8:	2000      	movs	r0, #0
 80124ba:	f003 fbf1 	bl	8015ca0 <xTaskNotifyWait>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d14d      	bne.n	8012560 <prvEMACHandlerTask+0xcc>
        {
            if( ( ulISREvents & eMacEventRx ) != 0 )
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	f003 0301 	and.w	r3, r3, #1
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d004      	beq.n	80124d8 <prvEMACHandlerTask+0x44>
            {
                xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 80124ce:	69b9      	ldr	r1, [r7, #24]
 80124d0:	6978      	ldr	r0, [r7, #20]
 80124d2:	f7ff ff87 	bl	80123e4 <prvNetworkInterfaceInput>
 80124d6:	61f8      	str	r0, [r7, #28]
            }

            if( ( ulISREvents & eMacEventTx ) != 0 )
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	f003 0302 	and.w	r3, r3, #2
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d002      	beq.n	80124e8 <prvEMACHandlerTask+0x54>
            {
                prvReleaseTxPacket( pxEthHandle );
 80124e2:	6978      	ldr	r0, [r7, #20]
 80124e4:	f000 fcea 	bl	8012ebc <prvReleaseTxPacket>
            }

            if( ( ulISREvents & eMacEventErrRx ) != 0 )
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	f003 0304 	and.w	r3, r3, #4
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d004      	beq.n	80124fc <prvEMACHandlerTask+0x68>
            {
                xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 80124f2:	69b9      	ldr	r1, [r7, #24]
 80124f4:	6978      	ldr	r0, [r7, #20]
 80124f6:	f7ff ff75 	bl	80123e4 <prvNetworkInterfaceInput>
 80124fa:	61f8      	str	r0, [r7, #28]
            }

            if( ( ulISREvents & eMacEventErrTx ) != 0 )
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	f003 0308 	and.w	r3, r3, #8
 8012502:	2b00      	cmp	r3, #0
 8012504:	d002      	beq.n	801250c <prvEMACHandlerTask+0x78>
            {
                prvReleaseTxPacket( pxEthHandle );
 8012506:	6978      	ldr	r0, [r7, #20]
 8012508:	f000 fcd8 	bl	8012ebc <prvReleaseTxPacket>
            }

            if( ( ulISREvents & eMacEventErrEth ) != 0 )
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	f003 0320 	and.w	r3, r3, #32
 8012512:	2b00      	cmp	r3, #0
 8012514:	d024      	beq.n	8012560 <prvEMACHandlerTask+0xcc>
            {
                configASSERT( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_PARAM ) == 0 );
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801251c:	f003 0301 	and.w	r3, r3, #1
 8012520:	2b00      	cmp	r3, #0
 8012522:	d00d      	beq.n	8012540 <prvEMACHandlerTask+0xac>
	__asm volatile
 8012524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012528:	b672      	cpsid	i
 801252a:	f383 8811 	msr	BASEPRI, r3
 801252e:	f3bf 8f6f 	isb	sy
 8012532:	f3bf 8f4f 	dsb	sy
 8012536:	b662      	cpsie	i
 8012538:	60fb      	str	r3, [r7, #12]
}
 801253a:	bf00      	nop
 801253c:	bf00      	nop
 801253e:	e7fd      	b.n	801253c <prvEMACHandlerTask+0xa8>

                if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012546:	2be0      	cmp	r3, #224	@ 0xe0
 8012548:	d10a      	bne.n	8012560 <prvEMACHandlerTask+0xcc>
                {
                    /* Recover from critical error */
                    ( void ) HAL_ETH_Init( pxEthHandle );
 801254a:	6978      	ldr	r0, [r7, #20]
 801254c:	f7f0 f8b8 	bl	80026c0 <HAL_ETH_Init>
                    ( void ) HAL_ETH_Start_IT( pxEthHandle );
 8012550:	6978      	ldr	r0, [r7, #20]
 8012552:	f7f0 f94f 	bl	80027f4 <HAL_ETH_Start_IT>
                    xResult = prvNetworkInterfaceInput( pxEthHandle, pxInterface );
 8012556:	69b9      	ldr	r1, [r7, #24]
 8012558:	6978      	ldr	r0, [r7, #20]
 801255a:	f7ff ff43 	bl	80123e4 <prvNetworkInterfaceInput>
 801255e:	61f8      	str	r0, [r7, #28]

            /* if( ( ulISREvents & eMacEventErrMac ) != 0 ) */
            /* if( ( ulISREvents & eMacEventErrDma ) != 0 ) */
        }

        if( xPhyCheckLinkStatus( pxPhyObject, xResult ) != pdFALSE )
 8012560:	69f9      	ldr	r1, [r7, #28]
 8012562:	6938      	ldr	r0, [r7, #16]
 8012564:	f7ff fc28 	bl	8011db8 <xPhyCheckLinkStatus>
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d09c      	beq.n	80124a8 <prvEMACHandlerTask+0x14>
        {
            if( prvGetPhyLinkStatus( pxInterface ) != pdFALSE )
 801256e:	69b8      	ldr	r0, [r7, #24]
 8012570:	f7ff fd6c 	bl	801204c <prvGetPhyLinkStatus>
 8012574:	4603      	mov	r3, r0
 8012576:	2b00      	cmp	r3, #0
 8012578:	d017      	beq.n	80125aa <prvEMACHandlerTask+0x116>
            {
                if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012580:	2be0      	cmp	r3, #224	@ 0xe0
 8012582:	d102      	bne.n	801258a <prvEMACHandlerTask+0xf6>
                {
                    /* Recover from critical error */
                    ( void ) HAL_ETH_Init( pxEthHandle );
 8012584:	6978      	ldr	r0, [r7, #20]
 8012586:	f7f0 f89b 	bl	80026c0 <HAL_ETH_Init>
                }

                if( pxEthHandle->gState == HAL_ETH_STATE_READY )
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012590:	2b10      	cmp	r3, #16
 8012592:	d189      	bne.n	80124a8 <prvEMACHandlerTask+0x14>
                {
                    /* Link was down or critical error occurred */
                    if( prvMacUpdateConfig( pxEthHandle, pxPhyObject ) != pdFALSE )
 8012594:	6939      	ldr	r1, [r7, #16]
 8012596:	6978      	ldr	r0, [r7, #20]
 8012598:	f000 fcae 	bl	8012ef8 <prvMacUpdateConfig>
 801259c:	4603      	mov	r3, r0
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d082      	beq.n	80124a8 <prvEMACHandlerTask+0x14>
                    {
                        ( void ) HAL_ETH_Start_IT( pxEthHandle );
 80125a2:	6978      	ldr	r0, [r7, #20]
 80125a4:	f7f0 f926 	bl	80027f4 <HAL_ETH_Start_IT>
 80125a8:	e77e      	b.n	80124a8 <prvEMACHandlerTask+0x14>
                    }
                }
            }
            else
            {
                ( void ) HAL_ETH_Stop_IT( pxEthHandle );
 80125aa:	6978      	ldr	r0, [r7, #20]
 80125ac:	f7f0 f992 	bl	80028d4 <HAL_ETH_Stop_IT>
                prvReleaseTxPacket( pxEthHandle );
 80125b0:	6978      	ldr	r0, [r7, #20]
 80125b2:	f000 fc83 	bl	8012ebc <prvReleaseTxPacket>
                #if ( ipconfigIS_ENABLED( ipconfigSUPPORT_NETWORK_DOWN_EVENT ) )
                    FreeRTOS_NetworkDown( pxInterface );
 80125b6:	69b8      	ldr	r0, [r7, #24]
 80125b8:	f7f7 f882 	bl	80096c0 <FreeRTOS_NetworkDown>
    {
 80125bc:	e774      	b.n	80124a8 <prvEMACHandlerTask+0x14>
 80125be:	bf00      	nop
 80125c0:	200033e8 	.word	0x200033e8
 80125c4:	20003498 	.word	0x20003498

080125c8 <prvEMACTaskStart>:
}

/*---------------------------------------------------------------------------*/

static BaseType_t prvEMACTaskStart( NetworkInterface_t * pxInterface )
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08a      	sub	sp, #40	@ 0x28
 80125cc:	af04      	add	r7, sp, #16
 80125ce:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80125d0:	2300      	movs	r3, #0
 80125d2:	617b      	str	r3, [r7, #20]

    if( xTxMutex == NULL )
 80125d4:	4b36      	ldr	r3, [pc, #216]	@ (80126b0 <prvEMACTaskStart+0xe8>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d11e      	bne.n	801261a <prvEMACTaskStart+0x52>
    {
        #if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION )
            static StaticSemaphore_t xTxMutexBuf;
            xTxMutex = xSemaphoreCreateMutexStatic( &xTxMutexBuf );
 80125dc:	4935      	ldr	r1, [pc, #212]	@ (80126b4 <prvEMACTaskStart+0xec>)
 80125de:	2001      	movs	r0, #1
 80125e0:	f001 fc30 	bl	8013e44 <xQueueCreateMutexStatic>
 80125e4:	4603      	mov	r3, r0
 80125e6:	4a32      	ldr	r2, [pc, #200]	@ (80126b0 <prvEMACTaskStart+0xe8>)
 80125e8:	6013      	str	r3, [r2, #0]
        #else
            xTxMutex = xSemaphoreCreateMutex();
        #endif
        configASSERT( xTxMutex != NULL );
 80125ea:	4b31      	ldr	r3, [pc, #196]	@ (80126b0 <prvEMACTaskStart+0xe8>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d10d      	bne.n	801260e <prvEMACTaskStart+0x46>
	__asm volatile
 80125f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125f6:	b672      	cpsid	i
 80125f8:	f383 8811 	msr	BASEPRI, r3
 80125fc:	f3bf 8f6f 	isb	sy
 8012600:	f3bf 8f4f 	dsb	sy
 8012604:	b662      	cpsie	i
 8012606:	613b      	str	r3, [r7, #16]
}
 8012608:	bf00      	nop
 801260a:	bf00      	nop
 801260c:	e7fd      	b.n	801260a <prvEMACTaskStart+0x42>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            vQueueAddToRegistry( xTxMutex, niEMAC_TX_MUTEX_NAME );
 801260e:	4b28      	ldr	r3, [pc, #160]	@ (80126b0 <prvEMACTaskStart+0xe8>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4929      	ldr	r1, [pc, #164]	@ (80126b8 <prvEMACTaskStart+0xf0>)
 8012614:	4618      	mov	r0, r3
 8012616:	f002 f9b1 	bl	801497c <vQueueAddToRegistry>
        #endif
    }

    if( xTxDescSem == NULL )
 801261a:	4b28      	ldr	r3, [pc, #160]	@ (80126bc <prvEMACTaskStart+0xf4>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d11f      	bne.n	8012662 <prvEMACTaskStart+0x9a>
    {
        #if ( ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) )
            static StaticSemaphore_t xTxDescSemBuf;
            xTxDescSem = xSemaphoreCreateCountingStatic(
 8012622:	4a27      	ldr	r2, [pc, #156]	@ (80126c0 <prvEMACTaskStart+0xf8>)
 8012624:	2104      	movs	r1, #4
 8012626:	2004      	movs	r0, #4
 8012628:	f001 fc27 	bl	8013e7a <xQueueCreateCountingSemaphoreStatic>
 801262c:	4603      	mov	r3, r0
 801262e:	4a23      	ldr	r2, [pc, #140]	@ (80126bc <prvEMACTaskStart+0xf4>)
 8012630:	6013      	str	r3, [r2, #0]
            xTxDescSem = xSemaphoreCreateCounting(
                ( UBaseType_t ) ETH_TX_DESC_CNT,
                ( UBaseType_t ) ETH_TX_DESC_CNT
                );
        #endif /* if ( ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) ) */
        configASSERT( xTxDescSem != NULL );
 8012632:	4b22      	ldr	r3, [pc, #136]	@ (80126bc <prvEMACTaskStart+0xf4>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d10d      	bne.n	8012656 <prvEMACTaskStart+0x8e>
	__asm volatile
 801263a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801263e:	b672      	cpsid	i
 8012640:	f383 8811 	msr	BASEPRI, r3
 8012644:	f3bf 8f6f 	isb	sy
 8012648:	f3bf 8f4f 	dsb	sy
 801264c:	b662      	cpsie	i
 801264e:	60fb      	str	r3, [r7, #12]
}
 8012650:	bf00      	nop
 8012652:	bf00      	nop
 8012654:	e7fd      	b.n	8012652 <prvEMACTaskStart+0x8a>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            vQueueAddToRegistry( xTxDescSem, niEMAC_TX_DESC_SEM_NAME );
 8012656:	4b19      	ldr	r3, [pc, #100]	@ (80126bc <prvEMACTaskStart+0xf4>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	491a      	ldr	r1, [pc, #104]	@ (80126c4 <prvEMACTaskStart+0xfc>)
 801265c:	4618      	mov	r0, r3
 801265e:	f002 f98d 	bl	801497c <vQueueAddToRegistry>
        #endif
    }

    if( ( xEMACTaskHandle == NULL ) && ( xTxMutex != NULL ) && ( xTxDescSem != NULL ) )
 8012662:	4b19      	ldr	r3, [pc, #100]	@ (80126c8 <prvEMACTaskStart+0x100>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d117      	bne.n	801269a <prvEMACTaskStart+0xd2>
 801266a:	4b11      	ldr	r3, [pc, #68]	@ (80126b0 <prvEMACTaskStart+0xe8>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d013      	beq.n	801269a <prvEMACTaskStart+0xd2>
 8012672:	4b12      	ldr	r3, [pc, #72]	@ (80126bc <prvEMACTaskStart+0xf4>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00f      	beq.n	801269a <prvEMACTaskStart+0xd2>
    {
        #if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION )
            static StackType_t uxEMACTaskStack[ niEMAC_TASK_STACK_SIZE ];
            static StaticTask_t xEMACTaskTCB;
            xEMACTaskHandle = xTaskCreateStatic(
 801267a:	4b14      	ldr	r3, [pc, #80]	@ (80126cc <prvEMACTaskStart+0x104>)
 801267c:	9302      	str	r3, [sp, #8]
 801267e:	4b14      	ldr	r3, [pc, #80]	@ (80126d0 <prvEMACTaskStart+0x108>)
 8012680:	9301      	str	r3, [sp, #4]
 8012682:	2337      	movs	r3, #55	@ 0x37
 8012684:	9300      	str	r3, [sp, #0]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801268c:	4911      	ldr	r1, [pc, #68]	@ (80126d4 <prvEMACTaskStart+0x10c>)
 801268e:	4812      	ldr	r0, [pc, #72]	@ (80126d8 <prvEMACTaskStart+0x110>)
 8012690:	f002 f9fc 	bl	8014a8c <xTaskCreateStatic>
 8012694:	4603      	mov	r3, r0
 8012696:	4a0c      	ldr	r2, [pc, #48]	@ (80126c8 <prvEMACTaskStart+0x100>)
 8012698:	6013      	str	r3, [r2, #0]
                &xEMACTaskHandle
                );
        #endif /* if ipconfigIS_ENABLED( configSUPPORT_STATIC_ALLOCATION ) */
    }

    if( xEMACTaskHandle != NULL )
 801269a:	4b0b      	ldr	r3, [pc, #44]	@ (80126c8 <prvEMACTaskStart+0x100>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d001      	beq.n	80126a6 <prvEMACTaskStart+0xde>
    {
        xResult = pdTRUE;
 80126a2:	2301      	movs	r3, #1
 80126a4:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 80126a6:	697b      	ldr	r3, [r7, #20]
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3718      	adds	r7, #24
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}
 80126b0:	200034dc 	.word	0x200034dc
 80126b4:	20003538 	.word	0x20003538
 80126b8:	0801880c 	.word	0x0801880c
 80126bc:	200034e0 	.word	0x200034e0
 80126c0:	20003588 	.word	0x20003588
 80126c4:	0801881c 	.word	0x0801881c
 80126c8:	200034d8 	.word	0x200034d8
 80126cc:	200045d8 	.word	0x200045d8
 80126d0:	200035d8 	.word	0x200035d8
 80126d4:	0801882c 	.word	0x0801882c
 80126d8:	08012495 	.word	0x08012495

080126dc <prvEthConfigInit>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static BaseType_t prvEthConfigInit( ETH_HandleTypeDef * pxEthHandle,
                                    NetworkInterface_t * pxInterface )
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b0ae      	sub	sp, #184	@ 0xb8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 80126e6:	2300      	movs	r3, #0
 80126e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    pxEthHandle->Instance = ETH;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4a7d      	ldr	r2, [pc, #500]	@ (80128e4 <prvEthConfigInit+0x208>)
 80126f0:	601a      	str	r2, [r3, #0]
    pxEthHandle->Init.MediaInterface = ipconfigIS_ENABLED( niEMAC_USE_RMII ) ? HAL_ETH_RMII_MODE : HAL_ETH_MII_MODE;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80126f8:	609a      	str	r2, [r3, #8]
    pxEthHandle->Init.RxBuffLen = niEMAC_DATA_BUFFER_SIZE;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8012700:	615a      	str	r2, [r3, #20]
    /* configASSERT( pxEthHandle->Init.RxBuffLen <= ETH_MAX_PACKET_SIZE ); */
    configASSERT( pxEthHandle->Init.RxBuffLen % 4U == 0 );
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	695b      	ldr	r3, [r3, #20]
 8012706:	f003 0303 	and.w	r3, r3, #3
 801270a:	2b00      	cmp	r3, #0
 801270c:	d00e      	beq.n	801272c <prvEthConfigInit+0x50>
	__asm volatile
 801270e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012712:	b672      	cpsid	i
 8012714:	f383 8811 	msr	BASEPRI, r3
 8012718:	f3bf 8f6f 	isb	sy
 801271c:	f3bf 8f4f 	dsb	sy
 8012720:	b662      	cpsie	i
 8012722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
}
 8012726:	bf00      	nop
 8012728:	bf00      	nop
 801272a:	e7fd      	b.n	8012728 <prvEthConfigInit+0x4c>
    #if ( defined( niEMAC_STM32FX ) && defined( ETH_RX_BUF_SIZE ) )
        configASSERT( pxEthHandle->Init.RxBuffLen == ETH_RX_BUF_SIZE );
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	695b      	ldr	r3, [r3, #20]
 8012730:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8012734:	d00e      	beq.n	8012754 <prvEthConfigInit+0x78>
	__asm volatile
 8012736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801273a:	b672      	cpsid	i
 801273c:	f383 8811 	msr	BASEPRI, r3
 8012740:	f3bf 8f6f 	isb	sy
 8012744:	f3bf 8f4f 	dsb	sy
 8012748:	b662      	cpsie	i
 801274a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
}
 801274e:	bf00      	nop
 8012750:	bf00      	nop
 8012752:	e7fd      	b.n	8012750 <prvEthConfigInit+0x74>
    #endif

    static ETH_DMADescTypeDef xDMADescTx[ ETH_TX_DESC_CNT ] __ALIGNED( portBYTE_ALIGNMENT ) __attribute__( ( section( niEMAC_TX_DESC_SECTION ) ) );
    static ETH_DMADescTypeDef xDMADescRx[ ETH_RX_DESC_CNT ] __ALIGNED( portBYTE_ALIGNMENT ) __attribute__( ( section( niEMAC_RX_DESC_SECTION ) ) );
    pxEthHandle->Init.TxDesc = xDMADescTx;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	4a64      	ldr	r2, [pc, #400]	@ (80128e8 <prvEthConfigInit+0x20c>)
 8012758:	60da      	str	r2, [r3, #12]
    pxEthHandle->Init.RxDesc = xDMADescRx;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	4a63      	ldr	r2, [pc, #396]	@ (80128ec <prvEthConfigInit+0x210>)
 801275e:	611a      	str	r2, [r3, #16]
    ( void ) memset( &xDMADescTx, 0, sizeof( xDMADescTx ) );
 8012760:	22a0      	movs	r2, #160	@ 0xa0
 8012762:	2100      	movs	r1, #0
 8012764:	4860      	ldr	r0, [pc, #384]	@ (80128e8 <prvEthConfigInit+0x20c>)
 8012766:	f004 ff45 	bl	80175f4 <memset>
    ( void ) memset( &xDMADescRx, 0, sizeof( xDMADescRx ) );
 801276a:	22a0      	movs	r2, #160	@ 0xa0
 801276c:	2100      	movs	r1, #0
 801276e:	485f      	ldr	r0, [pc, #380]	@ (80128ec <prvEthConfigInit+0x210>)
 8012770:	f004 ff40 	bl	80175f4 <memset>

    const NetworkEndPoint_t * const pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8012774:	6838      	ldr	r0, [r7, #0]
 8012776:	f7f8 fd5d 	bl	800b234 <FreeRTOS_FirstEndPoint>
 801277a:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

    if( pxEndPoint != NULL )
 801277e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012782:	2b00      	cmp	r3, #0
 8012784:	d03c      	beq.n	8012800 <prvEthConfigInit+0x124>
    {
        pxEthHandle->Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8012786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801278a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	605a      	str	r2, [r3, #4]

        if( HAL_ETH_Init( pxEthHandle ) == HAL_OK )
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f7ef ff94 	bl	80026c0 <HAL_ETH_Init>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d130      	bne.n	8012800 <prvEthConfigInit+0x124>
        {
            #if defined( niEMAC_STM32FX )
                /* This function doesn't get called in Fxx driver */
                HAL_ETH_SetMDIOClockRange( pxEthHandle );
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f7f0 fe92 	bl	80034c8 <HAL_ETH_SetMDIOClockRange>
            #endif
            ETH_MACConfigTypeDef xMACConfig;
            ( void ) HAL_ETH_GetMACConfig( pxEthHandle, &xMACConfig );
 80127a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80127a8:	4619      	mov	r1, r3
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f7f0 fc82 	bl	80030b4 <HAL_ETH_GetMACConfig>
            xMACConfig.ChecksumOffload = ( FunctionalState ) ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM );
 80127b0:	2301      	movs	r3, #1
 80127b2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            xMACConfig.CRCStripTypePacket = DISABLE;
 80127b6:	2300      	movs	r3, #0
 80127b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
            xMACConfig.AutomaticPadCRCStrip = ENABLE;
 80127bc:	2301      	movs	r3, #1
 80127be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            xMACConfig.RetryTransmission = ENABLE;
 80127c2:	2301      	movs	r3, #1
 80127c4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            ( void ) HAL_ETH_SetMACConfig( pxEthHandle, &xMACConfig );
 80127c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80127cc:	4619      	mov	r1, r3
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f7f0 fe46 	bl	8003460 <HAL_ETH_SetMACConfig>

            ETH_DMAConfigTypeDef xDMAConfig;
            ( void ) HAL_ETH_GetDMAConfig( pxEthHandle, &xDMAConfig );
 80127d4:	f107 0308 	add.w	r3, r7, #8
 80127d8:	4619      	mov	r1, r3
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7f0 fd62 	bl	80032a4 <HAL_ETH_GetDMAConfig>
            #if defined( niEMAC_STM32FX )
                xDMAConfig.EnhancedDescriptorFormat = ( FunctionalState ) ( ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM ) || ipconfigIS_ENABLED( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM ) );
 80127e0:	2301      	movs	r3, #1
 80127e2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                /* #if ipconfigIS_ENABLED( ipconfigUSE_TCP ) && ipconfigIS_ENABLED( niEMAC_TCP_SEGMENTATION )
                 *  xDMAConfig.TCPSegmentation = ENABLE;
                 *  xDMAConfig.MaximumSegmentSize = ipconfigTCP_MSS;
                 #endif */
            #endif
            ( void ) HAL_ETH_SetDMAConfig( pxEthHandle, &xDMAConfig );
 80127e6:	f107 0308 	add.w	r3, r7, #8
 80127ea:	4619      	mov	r1, r3
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7f0 fe51 	bl	8003494 <HAL_ETH_SetDMAConfig>
                /* HAL_ETHEx_DisableARPOffload( pxEthHandle );
                 * HAL_ETHEx_SetARPAddressMatch( pxEthHandle, ulSourceIPAddress );
                 * HAL_ETHEx_EnableARPOffload( pxEthHandle ); */
            #endif

            prvInitMacAddresses( pxEthHandle, pxInterface );
 80127f2:	6839      	ldr	r1, [r7, #0]
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f000 f881 	bl	80128fc <prvInitMacAddresses>

            xResult = pdTRUE;
 80127fa:	2301      	movs	r3, #1
 80127fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        }
    }

    if( xResult == pdTRUE )
 8012800:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012804:	2b01      	cmp	r3, #1
 8012806:	d167      	bne.n	80128d8 <prvEthConfigInit+0x1fc>
    {
        #ifdef niEMAC_CACHEABLE
            if( niEMAC_CACHE_ENABLED )
 8012808:	4b39      	ldr	r3, [pc, #228]	@ (80128f0 <prvEthConfigInit+0x214>)
 801280a:	695b      	ldr	r3, [r3, #20]
 801280c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012810:	2b00      	cmp	r3, #0
 8012812:	d014      	beq.n	801283e <prvEthConfigInit+0x162>
            {
                #ifdef niEMAC_MPU
                    configASSERT( niEMAC_MPU_ENABLED != 0 );
 8012814:	4b37      	ldr	r3, [pc, #220]	@ (80128f4 <prvEthConfigInit+0x218>)
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	f003 0301 	and.w	r3, r3, #1
 801281c:	2b00      	cmp	r3, #0
 801281e:	d10e      	bne.n	801283e <prvEthConfigInit+0x162>
	__asm volatile
 8012820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012824:	b672      	cpsid	i
 8012826:	f383 8811 	msr	BASEPRI, r3
 801282a:	f3bf 8f6f 	isb	sy
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	b662      	cpsie	i
 8012834:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
}
 8012838:	bf00      	nop
 801283a:	bf00      	nop
 801283c:	e7fd      	b.n	801283a <prvEthConfigInit+0x15e>
                /* _FLD2VAL( SCB_CCSIDR_LINESIZE, SCB->CCSIDR ) */
            }
        #endif

        #ifdef configPRIO_BITS
            const uint32_t ulPrioBits = configPRIO_BITS;
 801283e:	2304      	movs	r3, #4
 8012840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        #else
            const uint32_t ulPrioBits = __NVIC_PRIO_BITS;
        #endif
        const uint32_t ulPriority = NVIC_GetPriority( ETH_IRQn ) << ( 8U - ulPrioBits );
 8012844:	203d      	movs	r0, #61	@ 0x3d
 8012846:	f7ff fba1 	bl	8011f8c <__NVIC_GetPriority>
 801284a:	4602      	mov	r2, r0
 801284c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012850:	f1c3 0308 	rsb	r3, r3, #8
 8012854:	fa02 f303 	lsl.w	r3, r2, r3
 8012858:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

        if( ulPriority < configMAX_SYSCALL_INTERRUPT_PRIORITY )
 801285c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012860:	2b4f      	cmp	r3, #79	@ 0x4f
 8012862:	d80a      	bhi.n	801287a <prvEthConfigInit+0x19e>
        {
            FreeRTOS_debug_printf( ( "prvEthConfigInit: Incorrectly set ETH_IRQn priority\n" ) );
            NVIC_SetPriority( ETH_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY >> ( 8U - ulPrioBits ) );
 8012864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012868:	f1c3 0308 	rsb	r3, r3, #8
 801286c:	2250      	movs	r2, #80	@ 0x50
 801286e:	fa42 f303 	asr.w	r3, r2, r3
 8012872:	4619      	mov	r1, r3
 8012874:	203d      	movs	r0, #61	@ 0x3d
 8012876:	f7ff fb5f 	bl	8011f38 <__NVIC_SetPriority>
        }

        if( NVIC_GetEnableIRQ( ETH_IRQn ) == 0 )
 801287a:	203d      	movs	r0, #61	@ 0x3d
 801287c:	f7ff fb3c 	bl	8011ef8 <__NVIC_GetEnableIRQ>
 8012880:	4603      	mov	r3, r0
 8012882:	2b00      	cmp	r3, #0
 8012884:	d102      	bne.n	801288c <prvEthConfigInit+0x1b0>
        {
            FreeRTOS_debug_printf( ( "prvEthConfigInit: ETH_IRQn was not enabled by application\n" ) );
            HAL_NVIC_EnableIRQ( ETH_IRQn );
 8012886:	203d      	movs	r0, #61	@ 0x3d
 8012888:	f7ef fe94 	bl	80025b4 <HAL_NVIC_EnableIRQ>
        }

        #ifdef niEMAC_STM32FX
            configASSERT( __HAL_RCC_ETH_IS_CLK_ENABLED() != 0 );
 801288c:	4b1a      	ldr	r3, [pc, #104]	@ (80128f8 <prvEthConfigInit+0x21c>)
 801288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00d      	beq.n	80128b4 <prvEthConfigInit+0x1d8>
 8012898:	4b17      	ldr	r3, [pc, #92]	@ (80128f8 <prvEthConfigInit+0x21c>)
 801289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801289c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d007      	beq.n	80128b4 <prvEthConfigInit+0x1d8>
 80128a4:	4b14      	ldr	r3, [pc, #80]	@ (80128f8 <prvEthConfigInit+0x21c>)
 80128a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d001      	beq.n	80128b4 <prvEthConfigInit+0x1d8>
 80128b0:	2301      	movs	r3, #1
 80128b2:	e000      	b.n	80128b6 <prvEthConfigInit+0x1da>
 80128b4:	2300      	movs	r3, #0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d10e      	bne.n	80128d8 <prvEthConfigInit+0x1fc>
	__asm volatile
 80128ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128be:	b672      	cpsid	i
 80128c0:	f383 8811 	msr	BASEPRI, r3
 80128c4:	f3bf 8f6f 	isb	sy
 80128c8:	f3bf 8f4f 	dsb	sy
 80128cc:	b662      	cpsie	i
 80128ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
}
 80128d2:	bf00      	nop
 80128d4:	bf00      	nop
 80128d6:	e7fd      	b.n	80128d4 <prvEthConfigInit+0x1f8>
            configASSERT( __HAL_RCC_ETH1TX_IS_CLK_ENABLED() != 0 );
            configASSERT( __HAL_RCC_ETH1RX_IS_CLK_ENABLED() != 0 );
        #endif
    }

    return xResult;
 80128d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
}
 80128dc:	4618      	mov	r0, r3
 80128de:	37b8      	adds	r7, #184	@ 0xb8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	40028000 	.word	0x40028000
 80128e8:	200001c0 	.word	0x200001c0
 80128ec:	20000260 	.word	0x20000260
 80128f0:	e000ed00 	.word	0xe000ed00
 80128f4:	e000ed90 	.word	0xe000ed90
 80128f8:	40023800 	.word	0x40023800

080128fc <prvInitMacAddresses>:

/*---------------------------------------------------------------------------*/

static void prvInitMacAddresses( ETH_HandleTypeDef * pxEthHandle,
                                 NetworkInterface_t * pxInterface )
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b088      	sub	sp, #32
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
    ETH_MACFilterConfigTypeDef xFilterConfig;

    ( void ) HAL_ETH_GetMACFilterConfig( pxEthHandle, &xFilterConfig );
 8012906:	f107 030c 	add.w	r3, r7, #12
 801290a:	4619      	mov	r1, r3
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7f0 fe73 	bl	80035f8 <HAL_ETH_GetMACFilterConfig>
    xFilterConfig.ReceiveAllMode = DISABLE;
 8012912:	2300      	movs	r3, #0
 8012914:	737b      	strb	r3, [r7, #13]
    xFilterConfig.HachOrPerfectFilter = ENABLE;
 8012916:	2301      	movs	r3, #1
 8012918:	73bb      	strb	r3, [r7, #14]
    xFilterConfig.SrcAddrFiltering = DISABLE;
 801291a:	2300      	movs	r3, #0
 801291c:	74bb      	strb	r3, [r7, #18]
    xFilterConfig.SrcAddrInverseFiltering = DISABLE;
 801291e:	2300      	movs	r3, #0
 8012920:	74fb      	strb	r3, [r7, #19]
    xFilterConfig.ControlPacketsFilter = ETH_CTRLPACKETS_BLOCK_ALL;
 8012922:	2340      	movs	r3, #64	@ 0x40
 8012924:	61bb      	str	r3, [r7, #24]
    xFilterConfig.BroadcastFilter = ENABLE;
 8012926:	2301      	movs	r3, #1
 8012928:	757b      	strb	r3, [r7, #21]
    xFilterConfig.PassAllMulticast = DISABLE;
 801292a:	2300      	movs	r3, #0
 801292c:	747b      	strb	r3, [r7, #17]
    xFilterConfig.DestAddrInverseFiltering = DISABLE;
 801292e:	2300      	movs	r3, #0
 8012930:	753b      	strb	r3, [r7, #20]
    xFilterConfig.HashMulticast = ENABLE;
 8012932:	2301      	movs	r3, #1
 8012934:	743b      	strb	r3, [r7, #16]
    xFilterConfig.HashUnicast = ENABLE;
 8012936:	2301      	movs	r3, #1
 8012938:	73fb      	strb	r3, [r7, #15]
    xFilterConfig.PromiscuousMode = DISABLE;
 801293a:	2300      	movs	r3, #0
 801293c:	733b      	strb	r3, [r7, #12]
    ( void ) HAL_ETH_SetMACFilterConfig( pxEthHandle, &xFilterConfig );
 801293e:	f107 030c 	add.w	r3, r7, #12
 8012942:	4619      	mov	r1, r3
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f7f0 fe01 	bl	800354c <HAL_ETH_SetMACFilterConfig>

    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface ); pxEndPoint != NULL; pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 801294a:	6838      	ldr	r0, [r7, #0]
 801294c:	f7f8 fc72 	bl	800b234 <FreeRTOS_FirstEndPoint>
 8012950:	61f8      	str	r0, [r7, #28]
 8012952:	e00a      	b.n	801296a <prvInitMacAddresses+0x6e>
    {
        prvAddAllowedMACAddress( pxInterface, pxEndPoint->xMACAddress.ucBytes );
 8012954:	69fb      	ldr	r3, [r7, #28]
 8012956:	3338      	adds	r3, #56	@ 0x38
 8012958:	4619      	mov	r1, r3
 801295a:	6838      	ldr	r0, [r7, #0]
 801295c:	f7ff fcfa 	bl	8012354 <prvAddAllowedMACAddress>
    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface ); pxEndPoint != NULL; pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8012960:	69f9      	ldr	r1, [r7, #28]
 8012962:	6838      	ldr	r0, [r7, #0]
 8012964:	f7f8 fcae 	bl	800b2c4 <FreeRTOS_NextEndPoint>
 8012968:	61f8      	str	r0, [r7, #28]
 801296a:	69fb      	ldr	r3, [r7, #28]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d1f1      	bne.n	8012954 <prvInitMacAddresses+0x58>
        #endif
        #if ipconfigIS_ENABLED( ipconfigUSE_LLMNR )
            prvAddAllowedMACAddress( pxInterface, xLLMNR_MacAddressIPv6.ucBytes );
        #endif
    #endif
}
 8012970:	bf00      	nop
 8012972:	bf00      	nop
 8012974:	3720      	adds	r7, #32
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
	...

0801297c <prvPhyInit>:
#endif /* ifdef niEMAC_STM32HX */

/*---------------------------------------------------------------------------*/

static BaseType_t prvPhyInit( EthernetPhy_t * pxPhyObject )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8012984:	2300      	movs	r3, #0
 8012986:	60fb      	str	r3, [r7, #12]

    vPhyInitialise( pxPhyObject, ( xApplicationPhyReadHook_t ) prvPhyReadReg, ( xApplicationPhyWriteHook_t ) prvPhyWriteReg );
 8012988:	4a08      	ldr	r2, [pc, #32]	@ (80129ac <prvPhyInit+0x30>)
 801298a:	4909      	ldr	r1, [pc, #36]	@ (80129b0 <prvPhyInit+0x34>)
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f7fe fea3 	bl	80116d8 <vPhyInitialise>

    if( xPhyDiscover( pxPhyObject ) != 0 )
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7fe feb5 	bl	8011702 <xPhyDiscover>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <prvPhyInit+0x26>
    {
        xResult = pdPASS;
 801299e:	2301      	movs	r3, #1
 80129a0:	60fb      	str	r3, [r7, #12]
    }

    return xResult;
 80129a2:	68fb      	ldr	r3, [r7, #12]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3710      	adds	r7, #16
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}
 80129ac:	08012015 	.word	0x08012015
 80129b0:	08011fdd 	.word	0x08011fdd

080129b4 <prvPhyStart>:

static BaseType_t prvPhyStart( ETH_HandleTypeDef * pxEthHandle,
                               NetworkInterface_t * pxInterface,
                               EthernetPhy_t * pxPhyObject )
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b086      	sub	sp, #24
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80129c0:	2300      	movs	r3, #0
 80129c2:	617b      	str	r3, [r7, #20]

    if( prvGetPhyLinkStatus( pxInterface ) == pdFALSE )
 80129c4:	68b8      	ldr	r0, [r7, #8]
 80129c6:	f7ff fb41 	bl	801204c <prvGetPhyLinkStatus>
 80129ca:	4603      	mov	r3, r0
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d11a      	bne.n	8012a06 <prvPhyStart+0x52>
    {
        const PhyProperties_t xPhyProperties =
 80129d0:	2300      	movs	r3, #0
 80129d2:	613b      	str	r3, [r7, #16]
 80129d4:	2303      	movs	r3, #3
 80129d6:	743b      	strb	r3, [r7, #16]
 80129d8:	2303      	movs	r3, #3
 80129da:	747b      	strb	r3, [r7, #17]
 80129dc:	2303      	movs	r3, #3
 80129de:	74bb      	strb	r3, [r7, #18]
        #if ipconfigIS_DISABLED( niEMAC_AUTO_NEGOTIATION )
            pxPhyObject->xPhyPreferences.ucSpeed = xPhyProperties.ucSpeed;
            pxPhyObject->xPhyPreferences.ucDuplex = xPhyProperties.ucDuplex;
        #endif

        if( xPhyConfigure( pxPhyObject, &xPhyProperties ) == 0 )
 80129e0:	f107 0310 	add.w	r3, r7, #16
 80129e4:	4619      	mov	r1, r3
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7fe ff71 	bl	80118ce <xPhyConfigure>
 80129ec:	4603      	mov	r3, r0
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d10b      	bne.n	8012a0a <prvPhyStart+0x56>
        {
            if( prvMacUpdateConfig( pxEthHandle, pxPhyObject ) != pdFALSE )
 80129f2:	6879      	ldr	r1, [r7, #4]
 80129f4:	68f8      	ldr	r0, [r7, #12]
 80129f6:	f000 fa7f 	bl	8012ef8 <prvMacUpdateConfig>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d004      	beq.n	8012a0a <prvPhyStart+0x56>
            {
                xResult = pdTRUE;
 8012a00:	2301      	movs	r3, #1
 8012a02:	617b      	str	r3, [r7, #20]
 8012a04:	e001      	b.n	8012a0a <prvPhyStart+0x56>
            }
        }
    }
    else
    {
        xResult = pdTRUE;
 8012a06:	2301      	movs	r3, #1
 8012a08:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8012a0a:	697b      	ldr	r3, [r7, #20]
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3718      	adds	r7, #24
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <prvCalcCrc32>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvCalcCrc32( const uint8_t * const pucMACAddr )
{
 8012a14:	b480      	push	{r7}
 8012a16:	b089      	sub	sp, #36	@ 0x24
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32 = 0xFFFFFFFFU;
 8012a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a20:	61fb      	str	r3, [r7, #28]

    uint32_t ucIndex;

    for( ucIndex = ipMAC_ADDRESS_LENGTH_BYTES; ucIndex > 0; --ucIndex )
 8012a22:	2306      	movs	r3, #6
 8012a24:	61bb      	str	r3, [r7, #24]
 8012a26:	e028      	b.n	8012a7a <prvCalcCrc32+0x66>
    {
        ulCRC32 ^= __RBIT( pucMACAddr[ ipMAC_ADDRESS_LENGTH_BYTES - ucIndex ] );
 8012a28:	69bb      	ldr	r3, [r7, #24]
 8012a2a:	f1c3 0306 	rsb	r3, r3, #6
 8012a2e:	687a      	ldr	r2, [r7, #4]
 8012a30:	4413      	add	r3, r2
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	fa93 f3a3 	rbit	r3, r3
 8012a3c:	60fb      	str	r3, [r7, #12]
  return result;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	69fa      	ldr	r2, [r7, #28]
 8012a42:	4053      	eors	r3, r2
 8012a44:	61fb      	str	r3, [r7, #28]

        uint8_t ucJndex;

        for( ucJndex = 8; ucJndex > 0; --ucJndex )
 8012a46:	2308      	movs	r3, #8
 8012a48:	75fb      	strb	r3, [r7, #23]
 8012a4a:	e010      	b.n	8012a6e <prvCalcCrc32+0x5a>
        {
            if( ulCRC32 & 0x80000000U )
 8012a4c:	69fb      	ldr	r3, [r7, #28]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	da07      	bge.n	8012a62 <prvCalcCrc32+0x4e>
            {
                ulCRC32 <<= 1;
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	005b      	lsls	r3, r3, #1
 8012a56:	61fb      	str	r3, [r7, #28]
                ulCRC32 ^= niEMAC_CRC_POLY;
 8012a58:	69fa      	ldr	r2, [r7, #28]
 8012a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8012a90 <prvCalcCrc32+0x7c>)
 8012a5c:	4053      	eors	r3, r2
 8012a5e:	61fb      	str	r3, [r7, #28]
 8012a60:	e002      	b.n	8012a68 <prvCalcCrc32+0x54>
            }
            else
            {
                ulCRC32 <<= 1;
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	005b      	lsls	r3, r3, #1
 8012a66:	61fb      	str	r3, [r7, #28]
        for( ucJndex = 8; ucJndex > 0; --ucJndex )
 8012a68:	7dfb      	ldrb	r3, [r7, #23]
 8012a6a:	3b01      	subs	r3, #1
 8012a6c:	75fb      	strb	r3, [r7, #23]
 8012a6e:	7dfb      	ldrb	r3, [r7, #23]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d1eb      	bne.n	8012a4c <prvCalcCrc32+0x38>
    for( ucIndex = ipMAC_ADDRESS_LENGTH_BYTES; ucIndex > 0; --ucIndex )
 8012a74:	69bb      	ldr	r3, [r7, #24]
 8012a76:	3b01      	subs	r3, #1
 8012a78:	61bb      	str	r3, [r7, #24]
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d1d3      	bne.n	8012a28 <prvCalcCrc32+0x14>
            }
        }
    }

    return ~ulCRC32;
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	43db      	mvns	r3, r3
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3724      	adds	r7, #36	@ 0x24
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr
 8012a90:	04c11db7 	.word	0x04c11db7

08012a94 <prvGetMacHashIndex>:

/*---------------------------------------------------------------------------*/

static uint8_t prvGetMacHashIndex( const uint8_t * const pucMACAddr )
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
    const uint32_t ulHash = prvCalcCrc32( pucMACAddr );
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7ff ffb9 	bl	8012a14 <prvCalcCrc32>
 8012aa2:	60f8      	str	r0, [r7, #12]
    const uint8_t ucHashIndex = ( ulHash >> 26 ) & 0x3FU;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	0e9b      	lsrs	r3, r3, #26
 8012aa8:	72fb      	strb	r3, [r7, #11]

    return ucHashIndex;
 8012aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8012aac:	4618      	mov	r0, r3
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <prvHAL_ETH_SetDestMACAddrMatch>:

/* Needed since HAL Driver only provides source matching */
static void prvHAL_ETH_SetDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                            uint8_t ucIndex,
                                            const uint8_t * const pucMACAddr )
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b08b      	sub	sp, #44	@ 0x2c
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	460b      	mov	r3, r1
 8012abe:	607a      	str	r2, [r7, #4]
 8012ac0:	72fb      	strb	r3, [r7, #11]
    configASSERT( ucIndex < niEMAC_MAC_SRC_MATCH_COUNT );
 8012ac2:	7afb      	ldrb	r3, [r7, #11]
 8012ac4:	2b02      	cmp	r3, #2
 8012ac6:	d90d      	bls.n	8012ae4 <prvHAL_ETH_SetDestMACAddrMatch+0x30>
	__asm volatile
 8012ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012acc:	b672      	cpsid	i
 8012ace:	f383 8811 	msr	BASEPRI, r3
 8012ad2:	f3bf 8f6f 	isb	sy
 8012ad6:	f3bf 8f4f 	dsb	sy
 8012ada:	b662      	cpsie	i
 8012adc:	617b      	str	r3, [r7, #20]
}
 8012ade:	bf00      	nop
 8012ae0:	bf00      	nop
 8012ae2:	e7fd      	b.n	8012ae0 <prvHAL_ETH_SetDestMACAddrMatch+0x2c>
    const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	3305      	adds	r3, #5
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	021b      	lsls	r3, r3, #8
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	3204      	adds	r2, #4
 8012af0:	7812      	ldrb	r2, [r2, #0]
 8012af2:	4313      	orrs	r3, r2
 8012af4:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	3303      	adds	r3, #3
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	061a      	lsls	r2, r3, #24
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	3302      	adds	r3, #2
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	041b      	lsls	r3, r3, #16
 8012b06:	431a      	orrs	r2, r3
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	021b      	lsls	r3, r3, #8
 8012b10:	4313      	orrs	r3, r2
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	7812      	ldrb	r2, [r2, #0]
 8012b16:	4313      	orrs	r3, r2
 8012b18:	623b      	str	r3, [r7, #32]

    /* MACA0HR/MACA0LR reserved for the primary MAC-address. */
    const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	3348      	adds	r3, #72	@ 0x48
 8012b1e:	461a      	mov	r2, r3
 8012b20:	7afb      	ldrb	r3, [r7, #11]
 8012b22:	00db      	lsls	r3, r3, #3
 8012b24:	4413      	add	r3, r2
 8012b26:	61fb      	str	r3, [r7, #28]
    const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	334c      	adds	r3, #76	@ 0x4c
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	7afb      	ldrb	r3, [r7, #11]
 8012b30:	00db      	lsls	r3, r3, #3
 8012b32:	4413      	add	r3, r2
 8012b34:	61bb      	str	r3, [r7, #24]
    ( *( __IO uint32_t * ) ulMacRegHigh ) = ETH_MACA1HR_AE | ulMacAddrHigh;
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b3a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012b3e:	601a      	str	r2, [r3, #0]
    ( *( __IO uint32_t * ) ulMacRegLow ) = ulMacAddrLow;
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	6a3a      	ldr	r2, [r7, #32]
 8012b44:	601a      	str	r2, [r3, #0]
}
 8012b46:	bf00      	nop
 8012b48:	372c      	adds	r7, #44	@ 0x2c
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr

08012b52 <prvHAL_ETH_ClearDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static void prvHAL_ETH_ClearDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                              uint8_t ucIndex )
{
 8012b52:	b480      	push	{r7}
 8012b54:	b087      	sub	sp, #28
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	70fb      	strb	r3, [r7, #3]
    configASSERT( ucIndex < niEMAC_MAC_SRC_MATCH_COUNT );
 8012b5e:	78fb      	ldrb	r3, [r7, #3]
 8012b60:	2b02      	cmp	r3, #2
 8012b62:	d90d      	bls.n	8012b80 <prvHAL_ETH_ClearDestMACAddrMatch+0x2e>
	__asm volatile
 8012b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b68:	b672      	cpsid	i
 8012b6a:	f383 8811 	msr	BASEPRI, r3
 8012b6e:	f3bf 8f6f 	isb	sy
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	b662      	cpsie	i
 8012b78:	60fb      	str	r3, [r7, #12]
}
 8012b7a:	bf00      	nop
 8012b7c:	bf00      	nop
 8012b7e:	e7fd      	b.n	8012b7c <prvHAL_ETH_ClearDestMACAddrMatch+0x2a>
    const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	3348      	adds	r3, #72	@ 0x48
 8012b84:	461a      	mov	r2, r3
 8012b86:	78fb      	ldrb	r3, [r7, #3]
 8012b88:	00db      	lsls	r3, r3, #3
 8012b8a:	4413      	add	r3, r2
 8012b8c:	617b      	str	r3, [r7, #20]
    const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	334c      	adds	r3, #76	@ 0x4c
 8012b92:	461a      	mov	r2, r3
 8012b94:	78fb      	ldrb	r3, [r7, #3]
 8012b96:	00db      	lsls	r3, r3, #3
 8012b98:	4413      	add	r3, r2
 8012b9a:	613b      	str	r3, [r7, #16]
    ( *( __IO uint32_t * ) ulMacRegHigh ) = 0U;
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	601a      	str	r2, [r3, #0]
    ( *( __IO uint32_t * ) ulMacRegLow ) = 0U;
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	601a      	str	r2, [r3, #0]
}
 8012ba8:	bf00      	nop
 8012baa:	371c      	adds	r7, #28
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr

08012bb4 <prvAddDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvAddDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                          const uint8_t * const pucMACAddr )
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	b089      	sub	sp, #36	@ 0x24
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	61fb      	str	r3, [r7, #28]

    uint8_t ucIndex;

    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	76fb      	strb	r3, [r7, #27]
 8012bc6:	e04e      	b.n	8012c66 <prvAddDestMACAddrMatch+0xb2>
    {
        if( ucSrcMatchCounters[ ucIndex ] > 0U )
 8012bc8:	7efb      	ldrb	r3, [r7, #27]
 8012bca:	4a2c      	ldr	r2, [pc, #176]	@ (8012c7c <prvAddDestMACAddrMatch+0xc8>)
 8012bcc:	5cd3      	ldrb	r3, [r2, r3]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d03f      	beq.n	8012c52 <prvAddDestMACAddrMatch+0x9e>
        {
            /* ETH_MACA1HR_MBC - Group Address Filtering */
            const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	3348      	adds	r3, #72	@ 0x48
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	7efb      	ldrb	r3, [r7, #27]
 8012bda:	00db      	lsls	r3, r3, #3
 8012bdc:	4413      	add	r3, r2
 8012bde:	617b      	str	r3, [r7, #20]
            const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	334c      	adds	r3, #76	@ 0x4c
 8012be4:	461a      	mov	r2, r3
 8012be6:	7efb      	ldrb	r3, [r7, #27]
 8012be8:	00db      	lsls	r3, r3, #3
 8012bea:	4413      	add	r3, r2
 8012bec:	613b      	str	r3, [r7, #16]

            const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	3305      	adds	r3, #5
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	021b      	lsls	r3, r3, #8
 8012bf6:	683a      	ldr	r2, [r7, #0]
 8012bf8:	3204      	adds	r2, #4
 8012bfa:	7812      	ldrb	r2, [r2, #0]
 8012bfc:	4313      	orrs	r3, r2
 8012bfe:	60fb      	str	r3, [r7, #12]
            const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	3303      	adds	r3, #3
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	061a      	lsls	r2, r3, #24
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	3302      	adds	r3, #2
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	041b      	lsls	r3, r3, #16
 8012c10:	431a      	orrs	r2, r3
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	3301      	adds	r3, #1
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	021b      	lsls	r3, r3, #8
 8012c1a:	4313      	orrs	r3, r2
 8012c1c:	683a      	ldr	r2, [r7, #0]
 8012c1e:	7812      	ldrb	r2, [r2, #0]
 8012c20:	4313      	orrs	r3, r2
 8012c22:	60bb      	str	r3, [r7, #8]

            if( ( ulMacRegHigh == ulMacAddrHigh ) && ( ulMacRegLow == ulMacAddrLow ) )
 8012c24:	697a      	ldr	r2, [r7, #20]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d119      	bne.n	8012c60 <prvAddDestMACAddrMatch+0xac>
 8012c2c:	693a      	ldr	r2, [r7, #16]
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d115      	bne.n	8012c60 <prvAddDestMACAddrMatch+0xac>
            {
                if( ucSrcMatchCounters[ ucIndex ] < UINT8_MAX )
 8012c34:	7efb      	ldrb	r3, [r7, #27]
 8012c36:	4a11      	ldr	r2, [pc, #68]	@ (8012c7c <prvAddDestMACAddrMatch+0xc8>)
 8012c38:	5cd3      	ldrb	r3, [r2, r3]
 8012c3a:	2bff      	cmp	r3, #255	@ 0xff
 8012c3c:	d006      	beq.n	8012c4c <prvAddDestMACAddrMatch+0x98>
                {
                    ++( ucSrcMatchCounters[ ucIndex ] );
 8012c3e:	7efb      	ldrb	r3, [r7, #27]
 8012c40:	4a0e      	ldr	r2, [pc, #56]	@ (8012c7c <prvAddDestMACAddrMatch+0xc8>)
 8012c42:	5cd2      	ldrb	r2, [r2, r3]
 8012c44:	3201      	adds	r2, #1
 8012c46:	b2d1      	uxtb	r1, r2
 8012c48:	4a0c      	ldr	r2, [pc, #48]	@ (8012c7c <prvAddDestMACAddrMatch+0xc8>)
 8012c4a:	54d1      	strb	r1, [r2, r3]
                }

                xResult = pdTRUE;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	61fb      	str	r3, [r7, #28]
                break;
 8012c50:	e00c      	b.n	8012c6c <prvAddDestMACAddrMatch+0xb8>
            }
        }
        else if( uxMACEntryIndex > niEMAC_MAC_SRC_MATCH_COUNT )
 8012c52:	4b0b      	ldr	r3, [pc, #44]	@ (8012c80 <prvAddDestMACAddrMatch+0xcc>)
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	2b03      	cmp	r3, #3
 8012c58:	d902      	bls.n	8012c60 <prvAddDestMACAddrMatch+0xac>
        {
            uxMACEntryIndex = niEMAC_MAC_SRC_MATCH_COUNT;
 8012c5a:	4b09      	ldr	r3, [pc, #36]	@ (8012c80 <prvAddDestMACAddrMatch+0xcc>)
 8012c5c:	2203      	movs	r2, #3
 8012c5e:	701a      	strb	r2, [r3, #0]
    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8012c60:	7efb      	ldrb	r3, [r7, #27]
 8012c62:	3301      	adds	r3, #1
 8012c64:	76fb      	strb	r3, [r7, #27]
 8012c66:	7efb      	ldrb	r3, [r7, #27]
 8012c68:	2b02      	cmp	r3, #2
 8012c6a:	d9ad      	bls.n	8012bc8 <prvAddDestMACAddrMatch+0x14>
        }
    }

    return xResult;
 8012c6c:	69fb      	ldr	r3, [r7, #28]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3724      	adds	r7, #36	@ 0x24
 8012c72:	46bd      	mov	sp, r7
 8012c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c78:	4770      	bx	lr
 8012c7a:	bf00      	nop
 8012c7c:	200034ec 	.word	0x200034ec
 8012c80:	200034ef 	.word	0x200034ef

08012c84 <prvRemoveDestMACAddrMatch>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvRemoveDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                             const uint8_t * const pucMACAddr )
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b088      	sub	sp, #32
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	61fb      	str	r3, [r7, #28]

    uint8_t ucIndex;

    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8012c92:	2300      	movs	r3, #0
 8012c94:	76fb      	strb	r3, [r7, #27]
 8012c96:	e050      	b.n	8012d3a <prvRemoveDestMACAddrMatch+0xb6>
    {
        if( ucSrcMatchCounters[ ucIndex ] > 0U )
 8012c98:	7efb      	ldrb	r3, [r7, #27]
 8012c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8012d4c <prvRemoveDestMACAddrMatch+0xc8>)
 8012c9c:	5cd3      	ldrb	r3, [r2, r3]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d048      	beq.n	8012d34 <prvRemoveDestMACAddrMatch+0xb0>
        {
            /* ETH_MACA1HR_MBC - Group Address Filtering */
            const uint32_t ulMacRegHigh = ( ( uint32_t ) &( pxEthInstance->MACA1HR ) + ( 8 * ucIndex ) );
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	3348      	adds	r3, #72	@ 0x48
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	7efb      	ldrb	r3, [r7, #27]
 8012caa:	00db      	lsls	r3, r3, #3
 8012cac:	4413      	add	r3, r2
 8012cae:	617b      	str	r3, [r7, #20]
            const uint32_t ulMacRegLow = ( ( uint32_t ) &( pxEthInstance->MACA1LR ) + ( 8 * ucIndex ) );
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	334c      	adds	r3, #76	@ 0x4c
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	7efb      	ldrb	r3, [r7, #27]
 8012cb8:	00db      	lsls	r3, r3, #3
 8012cba:	4413      	add	r3, r2
 8012cbc:	613b      	str	r3, [r7, #16]

            const uint32_t ulMacAddrHigh = ( pucMACAddr[ 5 ] << 8 ) | ( pucMACAddr[ 4 ] );
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	3305      	adds	r3, #5
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	021b      	lsls	r3, r3, #8
 8012cc6:	683a      	ldr	r2, [r7, #0]
 8012cc8:	3204      	adds	r2, #4
 8012cca:	7812      	ldrb	r2, [r2, #0]
 8012ccc:	4313      	orrs	r3, r2
 8012cce:	60fb      	str	r3, [r7, #12]
            const uint32_t ulMacAddrLow = ( pucMACAddr[ 3 ] << 24 ) | ( pucMACAddr[ 2 ] << 16 ) | ( pucMACAddr[ 1 ] << 8 ) | ( pucMACAddr[ 0 ] );
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	3303      	adds	r3, #3
 8012cd4:	781b      	ldrb	r3, [r3, #0]
 8012cd6:	061a      	lsls	r2, r3, #24
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	3302      	adds	r3, #2
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	041b      	lsls	r3, r3, #16
 8012ce0:	431a      	orrs	r2, r3
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	021b      	lsls	r3, r3, #8
 8012cea:	4313      	orrs	r3, r2
 8012cec:	683a      	ldr	r2, [r7, #0]
 8012cee:	7812      	ldrb	r2, [r2, #0]
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	60bb      	str	r3, [r7, #8]

            if( ( ulMacRegHigh == ulMacAddrHigh ) && ( ulMacRegLow == ulMacAddrLow ) )
 8012cf4:	697a      	ldr	r2, [r7, #20]
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d11b      	bne.n	8012d34 <prvRemoveDestMACAddrMatch+0xb0>
 8012cfc:	693a      	ldr	r2, [r7, #16]
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d117      	bne.n	8012d34 <prvRemoveDestMACAddrMatch+0xb0>
            {
                if( ucSrcMatchCounters[ ucIndex ] < UINT8_MAX )
 8012d04:	7efb      	ldrb	r3, [r7, #27]
 8012d06:	4a11      	ldr	r2, [pc, #68]	@ (8012d4c <prvRemoveDestMACAddrMatch+0xc8>)
 8012d08:	5cd3      	ldrb	r3, [r2, r3]
 8012d0a:	2bff      	cmp	r3, #255	@ 0xff
 8012d0c:	d00f      	beq.n	8012d2e <prvRemoveDestMACAddrMatch+0xaa>
                {
                    if( --( ucSrcMatchCounters[ ucIndex ] ) == 0 )
 8012d0e:	7efb      	ldrb	r3, [r7, #27]
 8012d10:	4a0e      	ldr	r2, [pc, #56]	@ (8012d4c <prvRemoveDestMACAddrMatch+0xc8>)
 8012d12:	5cd2      	ldrb	r2, [r2, r3]
 8012d14:	3a01      	subs	r2, #1
 8012d16:	b2d1      	uxtb	r1, r2
 8012d18:	4a0c      	ldr	r2, [pc, #48]	@ (8012d4c <prvRemoveDestMACAddrMatch+0xc8>)
 8012d1a:	54d1      	strb	r1, [r2, r3]
 8012d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8012d4c <prvRemoveDestMACAddrMatch+0xc8>)
 8012d1e:	5cd3      	ldrb	r3, [r2, r3]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d104      	bne.n	8012d2e <prvRemoveDestMACAddrMatch+0xaa>
                    {
                        prvHAL_ETH_ClearDestMACAddrMatch( pxEthInstance, ucIndex );
 8012d24:	7efb      	ldrb	r3, [r7, #27]
 8012d26:	4619      	mov	r1, r3
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff ff12 	bl	8012b52 <prvHAL_ETH_ClearDestMACAddrMatch>
                    }
                }

                xResult = pdTRUE;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	61fb      	str	r3, [r7, #28]
                break;
 8012d32:	e005      	b.n	8012d40 <prvRemoveDestMACAddrMatch+0xbc>
    for( ucIndex = 0; ucIndex < niEMAC_MAC_SRC_MATCH_COUNT; ++ucIndex )
 8012d34:	7efb      	ldrb	r3, [r7, #27]
 8012d36:	3301      	adds	r3, #1
 8012d38:	76fb      	strb	r3, [r7, #27]
 8012d3a:	7efb      	ldrb	r3, [r7, #27]
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d9ab      	bls.n	8012c98 <prvRemoveDestMACAddrMatch+0x14>
            }
        }
    }

    return xResult;
 8012d40:	69fb      	ldr	r3, [r7, #28]
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3720      	adds	r7, #32
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	200034ec 	.word	0x200034ec

08012d50 <prvSetNewDestMACAddrMatch>:
/*---------------------------------------------------------------------------*/

static BaseType_t prvSetNewDestMACAddrMatch( ETH_TypeDef * const pxEthInstance,
                                             uint8_t ucHashIndex,
                                             const uint8_t * const pucMACAddr )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b086      	sub	sp, #24
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	460b      	mov	r3, r1
 8012d5a:	607a      	str	r2, [r7, #4]
 8012d5c:	72fb      	strb	r3, [r7, #11]
    BaseType_t xResult = pdFALSE;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	617b      	str	r3, [r7, #20]

    if( uxMACEntryIndex < niEMAC_MAC_SRC_MATCH_COUNT )
 8012d62:	4b10      	ldr	r3, [pc, #64]	@ (8012da4 <prvSetNewDestMACAddrMatch+0x54>)
 8012d64:	781b      	ldrb	r3, [r3, #0]
 8012d66:	2b02      	cmp	r3, #2
 8012d68:	d817      	bhi.n	8012d9a <prvSetNewDestMACAddrMatch+0x4a>
    {
        if( ucAddrHashCounters[ ucHashIndex ] == 0U )
 8012d6a:	7afb      	ldrb	r3, [r7, #11]
 8012d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8012da8 <prvSetNewDestMACAddrMatch+0x58>)
 8012d6e:	5cd3      	ldrb	r3, [r2, r3]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d112      	bne.n	8012d9a <prvSetNewDestMACAddrMatch+0x4a>
        {
            prvHAL_ETH_SetDestMACAddrMatch( pxEthInstance, uxMACEntryIndex, pucMACAddr );
 8012d74:	4b0b      	ldr	r3, [pc, #44]	@ (8012da4 <prvSetNewDestMACAddrMatch+0x54>)
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	4619      	mov	r1, r3
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f7ff fe99 	bl	8012ab4 <prvHAL_ETH_SetDestMACAddrMatch>
            ucSrcMatchCounters[ uxMACEntryIndex++ ] = 1U;
 8012d82:	4b08      	ldr	r3, [pc, #32]	@ (8012da4 <prvSetNewDestMACAddrMatch+0x54>)
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	b2d1      	uxtb	r1, r2
 8012d8a:	4a06      	ldr	r2, [pc, #24]	@ (8012da4 <prvSetNewDestMACAddrMatch+0x54>)
 8012d8c:	7011      	strb	r1, [r2, #0]
 8012d8e:	461a      	mov	r2, r3
 8012d90:	4b06      	ldr	r3, [pc, #24]	@ (8012dac <prvSetNewDestMACAddrMatch+0x5c>)
 8012d92:	2101      	movs	r1, #1
 8012d94:	5499      	strb	r1, [r3, r2]
            xResult = pdTRUE;
 8012d96:	2301      	movs	r3, #1
 8012d98:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 8012d9a:	697b      	ldr	r3, [r7, #20]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3718      	adds	r7, #24
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	200034ef 	.word	0x200034ef
 8012da8:	200034f8 	.word	0x200034f8
 8012dac:	200034ec 	.word	0x200034ec

08012db0 <prvAddDestMACAddrHash>:

/*---------------------------------------------------------------------------*/

static void prvAddDestMACAddrHash( ETH_HandleTypeDef * pxEthHandle,
                                   uint8_t ucHashIndex )
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b082      	sub	sp, #8
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	460b      	mov	r3, r1
 8012dba:	70fb      	strb	r3, [r7, #3]
    if( ucAddrHashCounters[ ucHashIndex ] == 0 )
 8012dbc:	78fb      	ldrb	r3, [r7, #3]
 8012dbe:	4a19      	ldr	r2, [pc, #100]	@ (8012e24 <prvAddDestMACAddrHash+0x74>)
 8012dc0:	5cd3      	ldrb	r3, [r2, r3]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d11d      	bne.n	8012e02 <prvAddDestMACAddrHash+0x52>
    {
        if( ucHashIndex & 0x20U )
 8012dc6:	78fb      	ldrb	r3, [r7, #3]
 8012dc8:	f003 0320 	and.w	r3, r3, #32
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d00b      	beq.n	8012de8 <prvAddDestMACAddrHash+0x38>
        {
            ulHashTable[ 1 ] |= ( 1U << ( ucHashIndex & 0x1FU ) );
 8012dd0:	4b15      	ldr	r3, [pc, #84]	@ (8012e28 <prvAddDestMACAddrHash+0x78>)
 8012dd2:	685a      	ldr	r2, [r3, #4]
 8012dd4:	78fb      	ldrb	r3, [r7, #3]
 8012dd6:	f003 031f 	and.w	r3, r3, #31
 8012dda:	2101      	movs	r1, #1
 8012ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8012de0:	4313      	orrs	r3, r2
 8012de2:	4a11      	ldr	r2, [pc, #68]	@ (8012e28 <prvAddDestMACAddrHash+0x78>)
 8012de4:	6053      	str	r3, [r2, #4]
 8012de6:	e008      	b.n	8012dfa <prvAddDestMACAddrHash+0x4a>
        }
        else
        {
            ulHashTable[ 0 ] |= ( 1U << ucHashIndex );
 8012de8:	4b0f      	ldr	r3, [pc, #60]	@ (8012e28 <prvAddDestMACAddrHash+0x78>)
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	78fb      	ldrb	r3, [r7, #3]
 8012dee:	2101      	movs	r1, #1
 8012df0:	fa01 f303 	lsl.w	r3, r1, r3
 8012df4:	4313      	orrs	r3, r2
 8012df6:	4a0c      	ldr	r2, [pc, #48]	@ (8012e28 <prvAddDestMACAddrHash+0x78>)
 8012df8:	6013      	str	r3, [r2, #0]
        }

        HAL_ETH_SetHashTable( pxEthHandle, ulHashTable );
 8012dfa:	490b      	ldr	r1, [pc, #44]	@ (8012e28 <prvAddDestMACAddrHash+0x78>)
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7f0 fc90 	bl	8003722 <HAL_ETH_SetHashTable>
    }

    if( ucAddrHashCounters[ ucHashIndex ] < UINT8_MAX )
 8012e02:	78fb      	ldrb	r3, [r7, #3]
 8012e04:	4a07      	ldr	r2, [pc, #28]	@ (8012e24 <prvAddDestMACAddrHash+0x74>)
 8012e06:	5cd3      	ldrb	r3, [r2, r3]
 8012e08:	2bff      	cmp	r3, #255	@ 0xff
 8012e0a:	d006      	beq.n	8012e1a <prvAddDestMACAddrHash+0x6a>
    {
        ++( ucAddrHashCounters[ ucHashIndex ] );
 8012e0c:	78fb      	ldrb	r3, [r7, #3]
 8012e0e:	4a05      	ldr	r2, [pc, #20]	@ (8012e24 <prvAddDestMACAddrHash+0x74>)
 8012e10:	5cd2      	ldrb	r2, [r2, r3]
 8012e12:	3201      	adds	r2, #1
 8012e14:	b2d1      	uxtb	r1, r2
 8012e16:	4a03      	ldr	r2, [pc, #12]	@ (8012e24 <prvAddDestMACAddrHash+0x74>)
 8012e18:	54d1      	strb	r1, [r2, r3]
    }
}
 8012e1a:	bf00      	nop
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	200034f8 	.word	0x200034f8
 8012e28:	200034f0 	.word	0x200034f0

08012e2c <prvRemoveDestMACAddrHash>:

/*---------------------------------------------------------------------------*/

static void prvRemoveDestMACAddrHash( ETH_HandleTypeDef * pxEthHandle,
                                      const uint8_t * const pucMACAddr )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
    const uint8_t ucHashIndex = prvGetMacHashIndex( pucMACAddr );
 8012e36:	6838      	ldr	r0, [r7, #0]
 8012e38:	f7ff fe2c 	bl	8012a94 <prvGetMacHashIndex>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	73fb      	strb	r3, [r7, #15]

    if( ucAddrHashCounters[ ucHashIndex ] > 0U )
 8012e40:	7bfb      	ldrb	r3, [r7, #15]
 8012e42:	4a1c      	ldr	r2, [pc, #112]	@ (8012eb4 <prvRemoveDestMACAddrHash+0x88>)
 8012e44:	5cd3      	ldrb	r3, [r2, r3]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d02f      	beq.n	8012eaa <prvRemoveDestMACAddrHash+0x7e>
    {
        if( ucAddrHashCounters[ ucHashIndex ] < UINT8_MAX )
 8012e4a:	7bfb      	ldrb	r3, [r7, #15]
 8012e4c:	4a19      	ldr	r2, [pc, #100]	@ (8012eb4 <prvRemoveDestMACAddrHash+0x88>)
 8012e4e:	5cd3      	ldrb	r3, [r2, r3]
 8012e50:	2bff      	cmp	r3, #255	@ 0xff
 8012e52:	d02a      	beq.n	8012eaa <prvRemoveDestMACAddrHash+0x7e>
        {
            if( --( ucAddrHashCounters[ ucHashIndex ] ) == 0 )
 8012e54:	7bfb      	ldrb	r3, [r7, #15]
 8012e56:	4a17      	ldr	r2, [pc, #92]	@ (8012eb4 <prvRemoveDestMACAddrHash+0x88>)
 8012e58:	5cd2      	ldrb	r2, [r2, r3]
 8012e5a:	3a01      	subs	r2, #1
 8012e5c:	b2d1      	uxtb	r1, r2
 8012e5e:	4a15      	ldr	r2, [pc, #84]	@ (8012eb4 <prvRemoveDestMACAddrHash+0x88>)
 8012e60:	54d1      	strb	r1, [r2, r3]
 8012e62:	4a14      	ldr	r2, [pc, #80]	@ (8012eb4 <prvRemoveDestMACAddrHash+0x88>)
 8012e64:	5cd3      	ldrb	r3, [r2, r3]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d11f      	bne.n	8012eaa <prvRemoveDestMACAddrHash+0x7e>
            {
                if( ucHashIndex & 0x20U )
 8012e6a:	7bfb      	ldrb	r3, [r7, #15]
 8012e6c:	f003 0320 	and.w	r3, r3, #32
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00c      	beq.n	8012e8e <prvRemoveDestMACAddrHash+0x62>
                {
                    ulHashTable[ 1 ] &= ~( 1U << ( ucHashIndex & 0x1FU ) );
 8012e74:	4b10      	ldr	r3, [pc, #64]	@ (8012eb8 <prvRemoveDestMACAddrHash+0x8c>)
 8012e76:	685a      	ldr	r2, [r3, #4]
 8012e78:	7bfb      	ldrb	r3, [r7, #15]
 8012e7a:	f003 031f 	and.w	r3, r3, #31
 8012e7e:	2101      	movs	r1, #1
 8012e80:	fa01 f303 	lsl.w	r3, r1, r3
 8012e84:	43db      	mvns	r3, r3
 8012e86:	4013      	ands	r3, r2
 8012e88:	4a0b      	ldr	r2, [pc, #44]	@ (8012eb8 <prvRemoveDestMACAddrHash+0x8c>)
 8012e8a:	6053      	str	r3, [r2, #4]
 8012e8c:	e009      	b.n	8012ea2 <prvRemoveDestMACAddrHash+0x76>
                }
                else
                {
                    ulHashTable[ 0 ] &= ~( 1U << ucHashIndex );
 8012e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8012eb8 <prvRemoveDestMACAddrHash+0x8c>)
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	7bfb      	ldrb	r3, [r7, #15]
 8012e94:	2101      	movs	r1, #1
 8012e96:	fa01 f303 	lsl.w	r3, r1, r3
 8012e9a:	43db      	mvns	r3, r3
 8012e9c:	4013      	ands	r3, r2
 8012e9e:	4a06      	ldr	r2, [pc, #24]	@ (8012eb8 <prvRemoveDestMACAddrHash+0x8c>)
 8012ea0:	6013      	str	r3, [r2, #0]
                }

                HAL_ETH_SetHashTable( pxEthHandle, ulHashTable );
 8012ea2:	4905      	ldr	r1, [pc, #20]	@ (8012eb8 <prvRemoveDestMACAddrHash+0x8c>)
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7f0 fc3c 	bl	8003722 <HAL_ETH_SetHashTable>
            }
        }
    }
}
 8012eaa:	bf00      	nop
 8012eac:	3710      	adds	r7, #16
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	200034f8 	.word	0x200034f8
 8012eb8:	200034f0 	.word	0x200034f0

08012ebc <prvReleaseTxPacket>:
/*                              EMAC Helpers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

static void prvReleaseTxPacket( ETH_HandleTypeDef * pxEthHandle )
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
    if( xSemaphoreTake( xTxMutex, pdMS_TO_TICKS( niEMAC_TX_MAX_BLOCK_TIME_MS ) ) != pdFALSE )
 8012ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8012ef4 <prvReleaseTxPacket+0x38>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	2114      	movs	r1, #20
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f001 faa8 	bl	8014420 <xQueueSemaphoreTake>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d009      	beq.n	8012eea <prvReleaseTxPacket+0x2e>
    {
        ( void ) HAL_ETH_ReleaseTxPacket( pxEthHandle );
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7ef ff2f 	bl	8002d3a <HAL_ETH_ReleaseTxPacket>
        ( void ) xSemaphoreGive( xTxMutex );
 8012edc:	4b05      	ldr	r3, [pc, #20]	@ (8012ef4 <prvReleaseTxPacket+0x38>)
 8012ede:	6818      	ldr	r0, [r3, #0]
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	2100      	movs	r1, #0
 8012ee6:	f001 f805 	bl	8013ef4 <xQueueGenericSend>

    /* while( ETH_TX_DESC_CNT - uxQueueMessagesWaiting( ( QueueHandle_t ) xTxDescSem ) > pxEthHandle->TxDescList.BuffersInUse )
     * {
     *  ( void ) xSemaphoreGive( xTxDescSem );
     * } */
}
 8012eea:	bf00      	nop
 8012eec:	3708      	adds	r7, #8
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	200034dc 	.word	0x200034dc

08012ef8 <prvMacUpdateConfig>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvMacUpdateConfig( ETH_HandleTypeDef * pxEthHandle,
                                      EthernetPhy_t * pxPhyObject )
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b09c      	sub	sp, #112	@ 0x70
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
    BaseType_t xResult = pdFALSE;
 8012f02:	2300      	movs	r3, #0
 8012f04:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if( pxEthHandle->gState == HAL_ETH_STATE_STARTED )
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f0c:	2b40      	cmp	r3, #64	@ 0x40
 8012f0e:	d102      	bne.n	8012f16 <prvMacUpdateConfig+0x1e>
    {
        ( void ) HAL_ETH_Stop_IT( pxEthHandle );
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f7ef fcdf 	bl	80028d4 <HAL_ETH_Stop_IT>
    }

    ETH_MACConfigTypeDef xMACConfig;
    ( void ) HAL_ETH_GetMACConfig( pxEthHandle, &xMACConfig );
 8012f16:	f107 0308 	add.w	r3, r7, #8
 8012f1a:	4619      	mov	r1, r3
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f7f0 f8c9 	bl	80030b4 <HAL_ETH_GetMACConfig>

    #if ipconfigIS_ENABLED( niEMAC_AUTO_NEGOTIATION )
        ( void ) xPhyStartAutoNegotiation( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f26:	2201      	movs	r2, #1
 8012f28:	fa02 f303 	lsl.w	r3, r2, r3
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	4619      	mov	r1, r3
 8012f30:	6838      	ldr	r0, [r7, #0]
 8012f32:	f7fe fdc5 	bl	8011ac0 <xPhyStartAutoNegotiation>
    #else
        ( void ) xPhyFixedValue( pxPhyObject, xPhyGetMask( pxPhyObject ) );
    #endif
    xMACConfig.DuplexMode = ( pxPhyObject->xPhyProperties.ucDuplex == PHY_DUPLEX_FULL ) ? ETH_FULLDUPLEX_MODE : ETH_HALFDUPLEX_MODE;
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8012f3c:	2b02      	cmp	r3, #2
 8012f3e:	d102      	bne.n	8012f46 <prvMacUpdateConfig+0x4e>
 8012f40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012f44:	e000      	b.n	8012f48 <prvMacUpdateConfig+0x50>
 8012f46:	2300      	movs	r3, #0
 8012f48:	623b      	str	r3, [r7, #32]
    xMACConfig.Speed = ( pxPhyObject->xPhyProperties.ucSpeed == PHY_SPEED_10 ) ? ETH_SPEED_10M : ETH_SPEED_100M;
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012f50:	2b01      	cmp	r3, #1
 8012f52:	d101      	bne.n	8012f58 <prvMacUpdateConfig+0x60>
 8012f54:	2300      	movs	r3, #0
 8012f56:	e001      	b.n	8012f5c <prvMacUpdateConfig+0x64>
 8012f58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012f5c:	61fb      	str	r3, [r7, #28]

    if( HAL_ETH_SetMACConfig( pxEthHandle, &xMACConfig ) == HAL_OK )
 8012f5e:	f107 0308 	add.w	r3, r7, #8
 8012f62:	4619      	mov	r1, r3
 8012f64:	6878      	ldr	r0, [r7, #4]
 8012f66:	f7f0 fa7b 	bl	8003460 <HAL_ETH_SetMACConfig>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d101      	bne.n	8012f74 <prvMacUpdateConfig+0x7c>
    {
        xResult = pdTRUE;
 8012f70:	2301      	movs	r3, #1
 8012f72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

    return xResult;
 8012f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3770      	adds	r7, #112	@ 0x70
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <prvReleaseNetworkBufferDescriptor>:

/*---------------------------------------------------------------------------*/

static void prvReleaseNetworkBufferDescriptor( NetworkBufferDescriptor_t * const pxDescriptor )
{
 8012f7e:	b580      	push	{r7, lr}
 8012f80:	b084      	sub	sp, #16
 8012f82:	af00      	add	r7, sp, #0
 8012f84:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxDescriptorToClear = pxDescriptor;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	60fb      	str	r3, [r7, #12]

    while( pxDescriptorToClear != NULL )
 8012f8a:	e006      	b.n	8012f9a <prvReleaseNetworkBufferDescriptor+0x1c>
    {
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            NetworkBufferDescriptor_t * const pxNext = pxDescriptorToClear->pxNextBuffer;
        #else
            NetworkBufferDescriptor_t * const pxNext = NULL;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	60bb      	str	r3, [r7, #8]
        #endif
        vReleaseNetworkBufferAndDescriptor( pxDescriptorToClear );
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f7fe faf9 	bl	8011588 <vReleaseNetworkBufferAndDescriptor>
        pxDescriptorToClear = pxNext;
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	60fb      	str	r3, [r7, #12]
    while( pxDescriptorToClear != NULL )
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d1f5      	bne.n	8012f8c <prvReleaseNetworkBufferDescriptor+0xe>
    }
}
 8012fa0:	bf00      	nop
 8012fa2:	bf00      	nop
 8012fa4:	3710      	adds	r7, #16
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <prvSendRxEvent>:

/*---------------------------------------------------------------------------*/

static void prvSendRxEvent( NetworkBufferDescriptor_t * const pxDescriptor )
{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b084      	sub	sp, #16
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
    const IPStackEvent_t xRxEvent =
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	723b      	strb	r3, [r7, #8]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	60fb      	str	r3, [r7, #12]
    {
        .eEventType = eNetworkRxEvent,
        .pvData     = ( void * ) pxDescriptor
    };

    if( xSendEventStructToIPTask( &xRxEvent, pdMS_TO_TICKS( niEMAC_RX_MAX_BLOCK_TIME_MS ) ) != pdPASS )
 8012fba:	f107 0308 	add.w	r3, r7, #8
 8012fbe:	2114      	movs	r1, #20
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f6 fc2b 	bl	800981c <xSendEventStructToIPTask>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	d002      	beq.n	8012fd2 <prvSendRxEvent+0x28>
    {
        iptraceETHERNET_RX_EVENT_LOST();
        FreeRTOS_debug_printf( ( "prvSendRxEvent: xSendEventStructToIPTask failed\n" ) );
        prvReleaseNetworkBufferDescriptor( pxDescriptor );
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f7ff ffd6 	bl	8012f7e <prvReleaseNetworkBufferDescriptor>
    }
}
 8012fd2:	bf00      	nop
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
	...

08012fdc <prvAcceptPacket>:

/*---------------------------------------------------------------------------*/

static BaseType_t prvAcceptPacket( const NetworkBufferDescriptor_t * const pxDescriptor,
                                   uint16_t usLength )
{
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b086      	sub	sp, #24
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	807b      	strh	r3, [r7, #2]
    BaseType_t xResult = pdFALSE;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	617b      	str	r3, [r7, #20]

    do
    {
        if( pxDescriptor == NULL )
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d01c      	beq.n	801302c <prvAcceptPacket+0x50>
            iptraceETHERNET_RX_EVENT_LOST();
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Null Descriptor\n" ) );
            break;
        }

        if( usLength > pxDescriptor->xDataLength )
 8012ff2:	887a      	ldrh	r2, [r7, #2]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d819      	bhi.n	8013030 <prvAcceptPacket+0x54>
            iptraceETHERNET_RX_EVENT_LOST();
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Packet size overflow\n" ) );
            break;
        }

        ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 8012ffc:	4b11      	ldr	r3, [pc, #68]	@ (8013044 <prvAcceptPacket+0x68>)
 8012ffe:	613b      	str	r3, [r7, #16]
        uint32_t ulErrorCode = 0;
 8013000:	2300      	movs	r3, #0
 8013002:	60fb      	str	r3, [r7, #12]
        ( void ) HAL_ETH_GetRxDataErrorCode( pxEthHandle, &ulErrorCode );
 8013004:	f107 030c 	add.w	r3, r7, #12
 8013008:	4619      	mov	r1, r3
 801300a:	6938      	ldr	r0, [r7, #16]
 801300c:	f7ef fe82 	bl	8002d14 <HAL_ETH_GetRxDataErrorCode>

        if( ulErrorCode != 0 )
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d10e      	bne.n	8013034 <prvAcceptPacket+0x58>
            FreeRTOS_debug_printf( ( "prvAcceptPacket: Rx Data Error\n" ) );
            break;
        }

        #if ipconfigIS_ENABLED( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES )
            if( eConsiderFrameForProcessing( pxDescriptor->pucEthernetBuffer ) != eProcessBuffer )
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801301a:	4618      	mov	r0, r3
 801301c:	f7f6 fc46 	bl	80098ac <eConsiderFrameForProcessing>
 8013020:	4603      	mov	r3, r0
 8013022:	2b01      	cmp	r3, #1
 8013024:	d108      	bne.n	8013038 <prvAcceptPacket+0x5c>
                break;
            }
        }
        #endif /* if ipconfigIS_ENABLED( ipconfigETHERNET_DRIVER_FILTERS_PACKETS ) */

        xResult = pdTRUE;
 8013026:	2301      	movs	r3, #1
 8013028:	617b      	str	r3, [r7, #20]
 801302a:	e006      	b.n	801303a <prvAcceptPacket+0x5e>
            break;
 801302c:	bf00      	nop
 801302e:	e004      	b.n	801303a <prvAcceptPacket+0x5e>
            break;
 8013030:	bf00      	nop
 8013032:	e002      	b.n	801303a <prvAcceptPacket+0x5e>
            break;
 8013034:	bf00      	nop
 8013036:	e000      	b.n	801303a <prvAcceptPacket+0x5e>
                break;
 8013038:	bf00      	nop
    } while( pdFALSE );

    return xResult;
 801303a:	697b      	ldr	r3, [r7, #20]
}
 801303c:	4618      	mov	r0, r3
 801303e:	3718      	adds	r7, #24
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	200033e8 	.word	0x200033e8

08013048 <ETH_IRQHandler>:
/*                              IRQ Handlers                                 */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	af00      	add	r7, sp, #0
    traceISR_ENTER();

    ETH_HandleTypeDef * pxEthHandle = &xEthHandle;
 801304e:	4b0c      	ldr	r3, [pc, #48]	@ (8013080 <ETH_IRQHandler+0x38>)
 8013050:	607b      	str	r3, [r7, #4]

    xSwitchRequired = pdFALSE;
 8013052:	4b0c      	ldr	r3, [pc, #48]	@ (8013084 <ETH_IRQHandler+0x3c>)
 8013054:	2200      	movs	r2, #0
 8013056:	601a      	str	r2, [r3, #0]
    HAL_ETH_IRQHandler( pxEthHandle );
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f7ef fed1 	bl	8002e00 <HAL_ETH_IRQHandler>

    portYIELD_FROM_ISR( xSwitchRequired );
 801305e:	4b09      	ldr	r3, [pc, #36]	@ (8013084 <ETH_IRQHandler+0x3c>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d007      	beq.n	8013076 <ETH_IRQHandler+0x2e>
 8013066:	4b08      	ldr	r3, [pc, #32]	@ (8013088 <ETH_IRQHandler+0x40>)
 8013068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801306c:	601a      	str	r2, [r3, #0]
 801306e:	f3bf 8f4f 	dsb	sy
 8013072:	f3bf 8f6f 	isb	sy
}
 8013076:	bf00      	nop
 8013078:	3708      	adds	r7, #8
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	200033e8 	.word	0x200033e8
 8013084:	200034e4 	.word	0x200034e4
 8013088:	e000ed04 	.word	0xe000ed04

0801308c <HAL_ETH_ErrorCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_ErrorCallback( ETH_HandleTypeDef * pxEthHandle )
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b088      	sub	sp, #32
 8013090:	af02      	add	r7, sp, #8
 8013092:	6078      	str	r0, [r7, #4]
    eMAC_IF_EVENT eErrorEvents = eMacEventNone;
 8013094:	2300      	movs	r3, #0
 8013096:	75fb      	strb	r3, [r7, #23]

    if( pxEthHandle->gState == HAL_ETH_STATE_ERROR )
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801309e:	2be0      	cmp	r3, #224	@ 0xe0
 80130a0:	d103      	bne.n	80130aa <HAL_ETH_ErrorCallback+0x1e>
    {
        /* Fatal bus error occurred */
        eErrorEvents |= eMacEventErrEth;
 80130a2:	7dfb      	ldrb	r3, [r7, #23]
 80130a4:	f043 0320 	orr.w	r3, r3, #32
 80130a8:	75fb      	strb	r3, [r7, #23]
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_DMA ) != 0 )
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80130b0:	f003 0308 	and.w	r3, r3, #8
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d019      	beq.n	80130ec <HAL_ETH_ErrorCallback+0x60>
    {
        eErrorEvents |= eMacEventErrDma;
 80130b8:	7dfb      	ldrb	r3, [r7, #23]
 80130ba:	f043 0310 	orr.w	r3, r3, #16
 80130be:	75fb      	strb	r3, [r7, #23]
        const uint32_t ulDmaError = pxEthHandle->DMAErrorCode;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80130c6:	613b      	str	r3, [r7, #16]

        if( ( ulDmaError & ETH_DMA_TX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	f003 0304 	and.w	r3, r3, #4
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d003      	beq.n	80130da <HAL_ETH_ErrorCallback+0x4e>
        {
            eErrorEvents |= eMacEventErrTx;
 80130d2:	7dfb      	ldrb	r3, [r7, #23]
 80130d4:	f043 0308 	orr.w	r3, r3, #8
 80130d8:	75fb      	strb	r3, [r7, #23]
        }

        if( ( ulDmaError & ETH_DMA_RX_BUFFER_UNAVAILABLE_FLAG ) != 0 )
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d003      	beq.n	80130ec <HAL_ETH_ErrorCallback+0x60>
        {
            eErrorEvents |= eMacEventErrRx;
 80130e4:	7dfb      	ldrb	r3, [r7, #23]
 80130e6:	f043 0304 	orr.w	r3, r3, #4
 80130ea:	75fb      	strb	r3, [r7, #23]
        }
    }

    if( ( pxEthHandle->ErrorCode & HAL_ETH_ERROR_MAC ) != 0 )
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80130f2:	f003 0310 	and.w	r3, r3, #16
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d003      	beq.n	8013102 <HAL_ETH_ErrorCallback+0x76>
    {
        eErrorEvents |= eMacEventErrMac;
 80130fa:	7dfb      	ldrb	r3, [r7, #23]
 80130fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013100:	75fb      	strb	r3, [r7, #23]
    }

    if( ( xEMACTaskHandle != NULL ) && ( eErrorEvents != eMacEventNone ) )
 8013102:	4b0e      	ldr	r3, [pc, #56]	@ (801313c <HAL_ETH_ErrorCallback+0xb0>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d014      	beq.n	8013134 <HAL_ETH_ErrorCallback+0xa8>
 801310a:	7dfb      	ldrb	r3, [r7, #23]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d011      	beq.n	8013134 <HAL_ETH_ErrorCallback+0xa8>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8013110:	2300      	movs	r3, #0
 8013112:	60fb      	str	r3, [r7, #12]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eErrorEvents, eSetBits, &xHigherPriorityTaskWoken );
 8013114:	4b09      	ldr	r3, [pc, #36]	@ (801313c <HAL_ETH_ErrorCallback+0xb0>)
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	7df9      	ldrb	r1, [r7, #23]
 801311a:	f107 030c 	add.w	r3, r7, #12
 801311e:	9300      	str	r3, [sp, #0]
 8013120:	2300      	movs	r3, #0
 8013122:	2201      	movs	r2, #1
 8013124:	f002 fee4 	bl	8015ef0 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8013128:	4b05      	ldr	r3, [pc, #20]	@ (8013140 <HAL_ETH_ErrorCallback+0xb4>)
 801312a:	681a      	ldr	r2, [r3, #0]
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	4313      	orrs	r3, r2
 8013130:	4a03      	ldr	r2, [pc, #12]	@ (8013140 <HAL_ETH_ErrorCallback+0xb4>)
 8013132:	6013      	str	r3, [r2, #0]
    }
}
 8013134:	bf00      	nop
 8013136:	3718      	adds	r7, #24
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}
 801313c:	200034d8 	.word	0x200034d8
 8013140:	200034e4 	.word	0x200034e4

08013144 <HAL_ETH_RxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b086      	sub	sp, #24
 8013148:	af02      	add	r7, sp, #8
 801314a:	6078      	str	r0, [r7, #4]
    static size_t uxMostRXDescsUsed = 0U;

    const size_t uxRxUsed = pxEthHandle->RxDescList.RxDescCnt;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013150:	60fb      	str	r3, [r7, #12]

    if( uxMostRXDescsUsed < uxRxUsed )
 8013152:	4b11      	ldr	r3, [pc, #68]	@ (8013198 <HAL_ETH_RxCpltCallback+0x54>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	429a      	cmp	r2, r3
 801315a:	d902      	bls.n	8013162 <HAL_ETH_RxCpltCallback+0x1e>
    {
        uxMostRXDescsUsed = uxRxUsed;
 801315c:	4a0e      	ldr	r2, [pc, #56]	@ (8013198 <HAL_ETH_RxCpltCallback+0x54>)
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_RECEIVE();

    if( xEMACTaskHandle != NULL )
 8013162:	4b0e      	ldr	r3, [pc, #56]	@ (801319c <HAL_ETH_RxCpltCallback+0x58>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d011      	beq.n	801318e <HAL_ETH_RxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801316a:	2300      	movs	r3, #0
 801316c:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventRx, eSetBits, &xHigherPriorityTaskWoken );
 801316e:	4b0b      	ldr	r3, [pc, #44]	@ (801319c <HAL_ETH_RxCpltCallback+0x58>)
 8013170:	6818      	ldr	r0, [r3, #0]
 8013172:	f107 0308 	add.w	r3, r7, #8
 8013176:	9300      	str	r3, [sp, #0]
 8013178:	2300      	movs	r3, #0
 801317a:	2201      	movs	r2, #1
 801317c:	2101      	movs	r1, #1
 801317e:	f002 feb7 	bl	8015ef0 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 8013182:	4b07      	ldr	r3, [pc, #28]	@ (80131a0 <HAL_ETH_RxCpltCallback+0x5c>)
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	4313      	orrs	r3, r2
 801318a:	4a05      	ldr	r2, [pc, #20]	@ (80131a0 <HAL_ETH_RxCpltCallback+0x5c>)
 801318c:	6013      	str	r3, [r2, #0]
    }
}
 801318e:	bf00      	nop
 8013190:	3710      	adds	r7, #16
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	20004680 	.word	0x20004680
 801319c:	200034d8 	.word	0x200034d8
 80131a0:	200034e4 	.word	0x200034e4

080131a4 <HAL_ETH_TxCpltCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * pxEthHandle )
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b086      	sub	sp, #24
 80131a8:	af02      	add	r7, sp, #8
 80131aa:	6078      	str	r0, [r7, #4]
    static size_t uxMostTXDescsUsed = 0U;

    const size_t uxTxUsed = pxEthHandle->TxDescList.BuffersInUse;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80131b0:	60fb      	str	r3, [r7, #12]

    if( uxMostTXDescsUsed < uxTxUsed )
 80131b2:	4b11      	ldr	r3, [pc, #68]	@ (80131f8 <HAL_ETH_TxCpltCallback+0x54>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	68fa      	ldr	r2, [r7, #12]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d902      	bls.n	80131c2 <HAL_ETH_TxCpltCallback+0x1e>
    {
        uxMostTXDescsUsed = uxTxUsed;
 80131bc:	4a0e      	ldr	r2, [pc, #56]	@ (80131f8 <HAL_ETH_TxCpltCallback+0x54>)
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	6013      	str	r3, [r2, #0]
    }

    iptraceNETWORK_INTERFACE_TRANSMIT();

    if( xEMACTaskHandle != NULL )
 80131c2:	4b0e      	ldr	r3, [pc, #56]	@ (80131fc <HAL_ETH_TxCpltCallback+0x58>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d011      	beq.n	80131ee <HAL_ETH_TxCpltCallback+0x4a>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80131ca:	2300      	movs	r3, #0
 80131cc:	60bb      	str	r3, [r7, #8]
        ( void ) xTaskNotifyFromISR( xEMACTaskHandle, eMacEventTx, eSetBits, &xHigherPriorityTaskWoken );
 80131ce:	4b0b      	ldr	r3, [pc, #44]	@ (80131fc <HAL_ETH_TxCpltCallback+0x58>)
 80131d0:	6818      	ldr	r0, [r3, #0]
 80131d2:	f107 0308 	add.w	r3, r7, #8
 80131d6:	9300      	str	r3, [sp, #0]
 80131d8:	2300      	movs	r3, #0
 80131da:	2201      	movs	r2, #1
 80131dc:	2102      	movs	r1, #2
 80131de:	f002 fe87 	bl	8015ef0 <xTaskGenericNotifyFromISR>
        xSwitchRequired |= xHigherPriorityTaskWoken;
 80131e2:	4b07      	ldr	r3, [pc, #28]	@ (8013200 <HAL_ETH_TxCpltCallback+0x5c>)
 80131e4:	681a      	ldr	r2, [r3, #0]
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	4313      	orrs	r3, r2
 80131ea:	4a05      	ldr	r2, [pc, #20]	@ (8013200 <HAL_ETH_TxCpltCallback+0x5c>)
 80131ec:	6013      	str	r3, [r2, #0]
    }
}
 80131ee:	bf00      	nop
 80131f0:	3710      	adds	r7, #16
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}
 80131f6:	bf00      	nop
 80131f8:	20004684 	.word	0x20004684
 80131fc:	200034d8 	.word	0x200034d8
 8013200:	200034e4 	.word	0x200034e4

08013204 <HAL_ETH_RxAllocateCallback>:
/*                            HAL Tx/Rx Callbacks                            */
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

void HAL_ETH_RxAllocateCallback( uint8_t ** ppucBuff )
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
    const NetworkBufferDescriptor_t * pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( niEMAC_DATA_BUFFER_SIZE, pdMS_TO_TICKS( niEMAC_DESCRIPTOR_WAIT_TIME_MS ) );
 801320c:	2114      	movs	r1, #20
 801320e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8013212:	f7fe f90d 	bl	8011430 <pxGetNetworkBufferWithDescriptor>
 8013216:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d003      	beq.n	8013226 <HAL_ETH_RxAllocateCallback+0x22>
            if( niEMAC_CACHE_MAINTENANCE != 0 )
            {
                SCB_InvalidateDCache_by_Addr( ( uint32_t * ) pxBufferDescriptor->pucEthernetBuffer, pxBufferDescriptor->xDataLength );
            }
        #endif
        *ppucBuff = pxBufferDescriptor->pucEthernetBuffer;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	601a      	str	r2, [r3, #0]
    }
    else
    {
        FreeRTOS_debug_printf( ( "HAL_ETH_RxAllocateCallback: failed\n" ) );
    }
}
 8013226:	bf00      	nop
 8013228:	3710      	adds	r7, #16
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}

0801322e <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback( void ** ppvStart,
                             void ** ppvEnd,
                             uint8_t * pucBuff,
                             uint16_t usLength )
{
 801322e:	b580      	push	{r7, lr}
 8013230:	b088      	sub	sp, #32
 8013232:	af00      	add	r7, sp, #0
 8013234:	60f8      	str	r0, [r7, #12]
 8013236:	60b9      	str	r1, [r7, #8]
 8013238:	607a      	str	r2, [r7, #4]
 801323a:	807b      	strh	r3, [r7, #2]
    NetworkBufferDescriptor_t ** const ppxStartDescriptor = ( NetworkBufferDescriptor_t ** ) ppvStart;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	61fb      	str	r3, [r7, #28]
    NetworkBufferDescriptor_t ** const ppxEndDescriptor = ( NetworkBufferDescriptor_t ** ) ppvEnd;
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	61bb      	str	r3, [r7, #24]
    NetworkBufferDescriptor_t * const pxCurDescriptor = pxPacketBuffer_to_NetworkBuffer( ( const void * ) pucBuff );
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7f7 f9af 	bl	800a5a8 <pxPacketBuffer_to_NetworkBuffer>
 801324a:	6178      	str	r0, [r7, #20]

    if( prvAcceptPacket( pxCurDescriptor, usLength ) == pdTRUE )
 801324c:	887b      	ldrh	r3, [r7, #2]
 801324e:	4619      	mov	r1, r3
 8013250:	6978      	ldr	r0, [r7, #20]
 8013252:	f7ff fec3 	bl	8012fdc <prvAcceptPacket>
 8013256:	4603      	mov	r3, r0
 8013258:	2b01      	cmp	r3, #1
 801325a:	d120      	bne.n	801329e <HAL_ETH_RxLinkCallback+0x70>
    {
        pxCurDescriptor->xDataLength = usLength;
 801325c:	887a      	ldrh	r2, [r7, #2]
 801325e:	697b      	ldr	r3, [r7, #20]
 8013260:	629a      	str	r2, [r3, #40]	@ 0x28
        #if ipconfigIS_ENABLED( ipconfigUSE_LINKED_RX_MESSAGES )
            pxCurDescriptor->pxNextBuffer = NULL;
        #endif

        if( *ppxStartDescriptor == NULL )
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d102      	bne.n	8013270 <HAL_ETH_RxLinkCallback+0x42>
        {
            *ppxStartDescriptor = pxCurDescriptor;
 801326a:	69fb      	ldr	r3, [r7, #28]
 801326c:	697a      	ldr	r2, [r7, #20]
 801326e:	601a      	str	r2, [r3, #0]
            else if( ppxEndDescriptor != NULL )
            {
                ( *ppxEndDescriptor )->pxNextBuffer = pxCurDescriptor;
            }
        #endif
        *ppxEndDescriptor = pxCurDescriptor;
 8013270:	69bb      	ldr	r3, [r7, #24]
 8013272:	697a      	ldr	r2, [r7, #20]
 8013274:	601a      	str	r2, [r3, #0]
        /* Only single buffer packets are supported */
        configASSERT( *ppxStartDescriptor == *ppxEndDescriptor );
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	681a      	ldr	r2, [r3, #0]
 801327a:	69bb      	ldr	r3, [r7, #24]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	429a      	cmp	r2, r3
 8013280:	d010      	beq.n	80132a4 <HAL_ETH_RxLinkCallback+0x76>
	__asm volatile
 8013282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013286:	b672      	cpsid	i
 8013288:	f383 8811 	msr	BASEPRI, r3
 801328c:	f3bf 8f6f 	isb	sy
 8013290:	f3bf 8f4f 	dsb	sy
 8013294:	b662      	cpsie	i
 8013296:	613b      	str	r3, [r7, #16]
}
 8013298:	bf00      	nop
 801329a:	bf00      	nop
 801329c:	e7fd      	b.n	801329a <HAL_ETH_RxLinkCallback+0x6c>
        #endif
    }
    else
    {
        FreeRTOS_debug_printf( ( "HAL_ETH_RxLinkCallback: Buffer Dropped\n" ) );
        prvReleaseNetworkBufferDescriptor( pxCurDescriptor );
 801329e:	6978      	ldr	r0, [r7, #20]
 80132a0:	f7ff fe6d 	bl	8012f7e <prvReleaseNetworkBufferDescriptor>
    }
}
 80132a4:	bf00      	nop
 80132a6:	3720      	adds	r7, #32
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <HAL_ETH_TxFreeCallback>:

/*---------------------------------------------------------------------------*/

void HAL_ETH_TxFreeCallback( uint32_t * pulBuff )
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b084      	sub	sp, #16
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * const pxNetworkBuffer = ( NetworkBufferDescriptor_t * ) pulBuff;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	60fb      	str	r3, [r7, #12]

    prvReleaseNetworkBufferDescriptor( pxNetworkBuffer );
 80132b8:	68f8      	ldr	r0, [r7, #12]
 80132ba:	f7ff fe60 	bl	8012f7e <prvReleaseNetworkBufferDescriptor>
    ( void ) xSemaphoreGive( xTxDescSem );
 80132be:	4b05      	ldr	r3, [pc, #20]	@ (80132d4 <HAL_ETH_TxFreeCallback+0x28>)
 80132c0:	6818      	ldr	r0, [r3, #0]
 80132c2:	2300      	movs	r3, #0
 80132c4:	2200      	movs	r2, #0
 80132c6:	2100      	movs	r1, #0
 80132c8:	f000 fe14 	bl	8013ef4 <xQueueGenericSend>
}
 80132cc:	bf00      	nop
 80132ce:	3710      	adds	r7, #16
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	200034e0 	.word	0x200034e0

080132d8 <pxSTM32_FillInterfaceDescriptor>:
/*===========================================================================*/
/*---------------------------------------------------------------------------*/

NetworkInterface_t * pxSTM32_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                      NetworkInterface_t * pxInterface )
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
    static char pcName[ 17 ];

    ( void ) snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	4a13      	ldr	r2, [pc, #76]	@ (8013334 <pxSTM32_FillInterfaceDescriptor+0x5c>)
 80132e6:	2111      	movs	r1, #17
 80132e8:	4813      	ldr	r0, [pc, #76]	@ (8013338 <pxSTM32_FillInterfaceDescriptor+0x60>)
 80132ea:	f004 f84b 	bl	8017384 <sniprintf>

    ( void ) memset( pxInterface, '\0', sizeof( *pxInterface ) );
 80132ee:	2228      	movs	r2, #40	@ 0x28
 80132f0:	2100      	movs	r1, #0
 80132f2:	6838      	ldr	r0, [r7, #0]
 80132f4:	f004 f97e 	bl	80175f4 <memset>
    pxInterface->pcName = pcName;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	4a0f      	ldr	r2, [pc, #60]	@ (8013338 <pxSTM32_FillInterfaceDescriptor+0x60>)
 80132fc:	601a      	str	r2, [r3, #0]
    /* TODO: use pvArgument to get xEMACData? */
    /* xEMACData.xEMACIndex = xEMACIndex; */
    /* pxInterface->pvArgument = ( void * ) &xEMACData; */
    /* pxInterface->pvArgument = pvPortMalloc( sizeof( EMACData_t ) ); */
    pxInterface->pvArgument = ( void * ) xEMACIndex;
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = prvNetworkInterfaceInitialise;
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	4a0d      	ldr	r2, [pc, #52]	@ (801333c <pxSTM32_FillInterfaceDescriptor+0x64>)
 8013308:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = prvNetworkInterfaceOutput;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	4a0c      	ldr	r2, [pc, #48]	@ (8013340 <pxSTM32_FillInterfaceDescriptor+0x68>)
 801330e:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = prvGetPhyLinkStatus;
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	4a0c      	ldr	r2, [pc, #48]	@ (8013344 <pxSTM32_FillInterfaceDescriptor+0x6c>)
 8013314:	611a      	str	r2, [r3, #16]

    pxInterface->pfAddAllowedMAC = prvAddAllowedMACAddress;
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	4a0b      	ldr	r2, [pc, #44]	@ (8013348 <pxSTM32_FillInterfaceDescriptor+0x70>)
 801331a:	615a      	str	r2, [r3, #20]
    pxInterface->pfRemoveAllowedMAC = prvRemoveAllowedMACAddress;
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	4a0b      	ldr	r2, [pc, #44]	@ (801334c <pxSTM32_FillInterfaceDescriptor+0x74>)
 8013320:	619a      	str	r2, [r3, #24]

    return FreeRTOS_AddNetworkInterface( pxInterface );
 8013322:	6838      	ldr	r0, [r7, #0]
 8013324:	f7f7 fed2 	bl	800b0cc <FreeRTOS_AddNetworkInterface>
 8013328:	4603      	mov	r3, r0
}
 801332a:	4618      	mov	r0, r3
 801332c:	3708      	adds	r7, #8
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
 8013332:	bf00      	nop
 8013334:	08018838 	.word	0x08018838
 8013338:	20004688 	.word	0x20004688
 801333c:	08012079 	.word	0x08012079
 8013340:	08012179 	.word	0x08012179
 8013344:	0801204d 	.word	0x0801204d
 8013348:	08012355 	.word	0x08012355
 801334c:	080123ad 	.word	0x080123ad

08013350 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013350:	b480      	push	{r7}
 8013352:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8013354:	bf00      	nop
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
	...

08013360 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013360:	b480      	push	{r7}
 8013362:	b085      	sub	sp, #20
 8013364:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013366:	f3ef 8305 	mrs	r3, IPSR
 801336a:	60bb      	str	r3, [r7, #8]
  return(result);
 801336c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801336e:	2b00      	cmp	r3, #0
 8013370:	d10f      	bne.n	8013392 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013372:	f3ef 8310 	mrs	r3, PRIMASK
 8013376:	607b      	str	r3, [r7, #4]
  return(result);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d105      	bne.n	801338a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801337e:	f3ef 8311 	mrs	r3, BASEPRI
 8013382:	603b      	str	r3, [r7, #0]
  return(result);
 8013384:	683b      	ldr	r3, [r7, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d007      	beq.n	801339a <osKernelInitialize+0x3a>
 801338a:	4b0e      	ldr	r3, [pc, #56]	@ (80133c4 <osKernelInitialize+0x64>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	2b02      	cmp	r3, #2
 8013390:	d103      	bne.n	801339a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8013392:	f06f 0305 	mvn.w	r3, #5
 8013396:	60fb      	str	r3, [r7, #12]
 8013398:	e00c      	b.n	80133b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801339a:	4b0a      	ldr	r3, [pc, #40]	@ (80133c4 <osKernelInitialize+0x64>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d105      	bne.n	80133ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80133a2:	4b08      	ldr	r3, [pc, #32]	@ (80133c4 <osKernelInitialize+0x64>)
 80133a4:	2201      	movs	r2, #1
 80133a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80133a8:	2300      	movs	r3, #0
 80133aa:	60fb      	str	r3, [r7, #12]
 80133ac:	e002      	b.n	80133b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80133ae:	f04f 33ff 	mov.w	r3, #4294967295
 80133b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80133b4:	68fb      	ldr	r3, [r7, #12]
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3714      	adds	r7, #20
 80133ba:	46bd      	mov	sp, r7
 80133bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop
 80133c4:	2000469c 	.word	0x2000469c

080133c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133ce:	f3ef 8305 	mrs	r3, IPSR
 80133d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80133d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d10f      	bne.n	80133fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133da:	f3ef 8310 	mrs	r3, PRIMASK
 80133de:	607b      	str	r3, [r7, #4]
  return(result);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d105      	bne.n	80133f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80133e6:	f3ef 8311 	mrs	r3, BASEPRI
 80133ea:	603b      	str	r3, [r7, #0]
  return(result);
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d007      	beq.n	8013402 <osKernelStart+0x3a>
 80133f2:	4b0f      	ldr	r3, [pc, #60]	@ (8013430 <osKernelStart+0x68>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2b02      	cmp	r3, #2
 80133f8:	d103      	bne.n	8013402 <osKernelStart+0x3a>
    stat = osErrorISR;
 80133fa:	f06f 0305 	mvn.w	r3, #5
 80133fe:	60fb      	str	r3, [r7, #12]
 8013400:	e010      	b.n	8013424 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013402:	4b0b      	ldr	r3, [pc, #44]	@ (8013430 <osKernelStart+0x68>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	2b01      	cmp	r3, #1
 8013408:	d109      	bne.n	801341e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801340a:	f7ff ffa1 	bl	8013350 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801340e:	4b08      	ldr	r3, [pc, #32]	@ (8013430 <osKernelStart+0x68>)
 8013410:	2202      	movs	r2, #2
 8013412:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013414:	f001 fd38 	bl	8014e88 <vTaskStartScheduler>
      stat = osOK;
 8013418:	2300      	movs	r3, #0
 801341a:	60fb      	str	r3, [r7, #12]
 801341c:	e002      	b.n	8013424 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801341e:	f04f 33ff 	mov.w	r3, #4294967295
 8013422:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013424:	68fb      	ldr	r3, [r7, #12]
}
 8013426:	4618      	mov	r0, r3
 8013428:	3710      	adds	r7, #16
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	bf00      	nop
 8013430:	2000469c 	.word	0x2000469c

08013434 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013434:	b580      	push	{r7, lr}
 8013436:	b090      	sub	sp, #64	@ 0x40
 8013438:	af04      	add	r7, sp, #16
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013440:	2300      	movs	r3, #0
 8013442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013444:	f3ef 8305 	mrs	r3, IPSR
 8013448:	61fb      	str	r3, [r7, #28]
  return(result);
 801344a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801344c:	2b00      	cmp	r3, #0
 801344e:	f040 8090 	bne.w	8013572 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013452:	f3ef 8310 	mrs	r3, PRIMASK
 8013456:	61bb      	str	r3, [r7, #24]
  return(result);
 8013458:	69bb      	ldr	r3, [r7, #24]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d105      	bne.n	801346a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801345e:	f3ef 8311 	mrs	r3, BASEPRI
 8013462:	617b      	str	r3, [r7, #20]
  return(result);
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d003      	beq.n	8013472 <osThreadNew+0x3e>
 801346a:	4b44      	ldr	r3, [pc, #272]	@ (801357c <osThreadNew+0x148>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	2b02      	cmp	r3, #2
 8013470:	d07f      	beq.n	8013572 <osThreadNew+0x13e>
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d07c      	beq.n	8013572 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8013478:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801347c:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801347e:	2318      	movs	r3, #24
 8013480:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8013482:	2300      	movs	r3, #0
 8013484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8013486:	f04f 33ff 	mov.w	r3, #4294967295
 801348a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d045      	beq.n	801351e <osThreadNew+0xea>
      if (attr->name != NULL) {
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d002      	beq.n	80134a0 <osThreadNew+0x6c>
        name = attr->name;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	699b      	ldr	r3, [r3, #24]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d002      	beq.n	80134ae <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	699b      	ldr	r3, [r3, #24]
 80134ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80134ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d008      	beq.n	80134c6 <osThreadNew+0x92>
 80134b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b6:	2b38      	cmp	r3, #56	@ 0x38
 80134b8:	d805      	bhi.n	80134c6 <osThreadNew+0x92>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	f003 0301 	and.w	r3, r3, #1
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d001      	beq.n	80134ca <osThreadNew+0x96>
        return (NULL);
 80134c6:	2300      	movs	r3, #0
 80134c8:	e054      	b.n	8013574 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	695b      	ldr	r3, [r3, #20]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d003      	beq.n	80134da <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	695b      	ldr	r3, [r3, #20]
 80134d6:	089b      	lsrs	r3, r3, #2
 80134d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	689b      	ldr	r3, [r3, #8]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d00e      	beq.n	8013500 <osThreadNew+0xcc>
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	68db      	ldr	r3, [r3, #12]
 80134e6:	2ba7      	cmp	r3, #167	@ 0xa7
 80134e8:	d90a      	bls.n	8013500 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d006      	beq.n	8013500 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	695b      	ldr	r3, [r3, #20]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d002      	beq.n	8013500 <osThreadNew+0xcc>
        mem = 1;
 80134fa:	2301      	movs	r3, #1
 80134fc:	623b      	str	r3, [r7, #32]
 80134fe:	e010      	b.n	8013522 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d10c      	bne.n	8013522 <osThreadNew+0xee>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	68db      	ldr	r3, [r3, #12]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d108      	bne.n	8013522 <osThreadNew+0xee>
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	691b      	ldr	r3, [r3, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d104      	bne.n	8013522 <osThreadNew+0xee>
          mem = 0;
 8013518:	2300      	movs	r3, #0
 801351a:	623b      	str	r3, [r7, #32]
 801351c:	e001      	b.n	8013522 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 801351e:	2300      	movs	r3, #0
 8013520:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013522:	6a3b      	ldr	r3, [r7, #32]
 8013524:	2b01      	cmp	r3, #1
 8013526:	d110      	bne.n	801354a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013530:	9202      	str	r2, [sp, #8]
 8013532:	9301      	str	r3, [sp, #4]
 8013534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801353c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801353e:	68f8      	ldr	r0, [r7, #12]
 8013540:	f001 faa4 	bl	8014a8c <xTaskCreateStatic>
 8013544:	4603      	mov	r3, r0
 8013546:	613b      	str	r3, [r7, #16]
 8013548:	e013      	b.n	8013572 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 801354a:	6a3b      	ldr	r3, [r7, #32]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d110      	bne.n	8013572 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013552:	b29a      	uxth	r2, r3
 8013554:	f107 0310 	add.w	r3, r7, #16
 8013558:	9301      	str	r3, [sp, #4]
 801355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801355c:	9300      	str	r3, [sp, #0]
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f001 faf8 	bl	8014b58 <xTaskCreate>
 8013568:	4603      	mov	r3, r0
 801356a:	2b01      	cmp	r3, #1
 801356c:	d001      	beq.n	8013572 <osThreadNew+0x13e>
          hTask = NULL;
 801356e:	2300      	movs	r3, #0
 8013570:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013572:	693b      	ldr	r3, [r7, #16]
}
 8013574:	4618      	mov	r0, r3
 8013576:	3730      	adds	r7, #48	@ 0x30
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}
 801357c:	2000469c 	.word	0x2000469c

08013580 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8013580:	b580      	push	{r7, lr}
 8013582:	b086      	sub	sp, #24
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013588:	f3ef 8305 	mrs	r3, IPSR
 801358c:	613b      	str	r3, [r7, #16]
  return(result);
 801358e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013590:	2b00      	cmp	r3, #0
 8013592:	d10f      	bne.n	80135b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013594:	f3ef 8310 	mrs	r3, PRIMASK
 8013598:	60fb      	str	r3, [r7, #12]
  return(result);
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d105      	bne.n	80135ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80135a0:	f3ef 8311 	mrs	r3, BASEPRI
 80135a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d007      	beq.n	80135bc <osDelay+0x3c>
 80135ac:	4b0a      	ldr	r3, [pc, #40]	@ (80135d8 <osDelay+0x58>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2b02      	cmp	r3, #2
 80135b2:	d103      	bne.n	80135bc <osDelay+0x3c>
    stat = osErrorISR;
 80135b4:	f06f 0305 	mvn.w	r3, #5
 80135b8:	617b      	str	r3, [r7, #20]
 80135ba:	e007      	b.n	80135cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80135bc:	2300      	movs	r3, #0
 80135be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d002      	beq.n	80135cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f001 fc26 	bl	8014e18 <vTaskDelay>
    }
  }

  return (stat);
 80135cc:	697b      	ldr	r3, [r7, #20]
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3718      	adds	r7, #24
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	2000469c 	.word	0x2000469c

080135dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80135dc:	b480      	push	{r7}
 80135de:	b085      	sub	sp, #20
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	4a07      	ldr	r2, [pc, #28]	@ (8013608 <vApplicationGetIdleTaskMemory+0x2c>)
 80135ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	4a06      	ldr	r2, [pc, #24]	@ (801360c <vApplicationGetIdleTaskMemory+0x30>)
 80135f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80135fa:	601a      	str	r2, [r3, #0]
}
 80135fc:	bf00      	nop
 80135fe:	3714      	adds	r7, #20
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr
 8013608:	200046a0 	.word	0x200046a0
 801360c:	20004748 	.word	0x20004748

08013610 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013610:	b480      	push	{r7}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	4a07      	ldr	r2, [pc, #28]	@ (801363c <vApplicationGetTimerTaskMemory+0x2c>)
 8013620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	4a06      	ldr	r2, [pc, #24]	@ (8013640 <vApplicationGetTimerTaskMemory+0x30>)
 8013626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801362e:	601a      	str	r2, [r3, #0]
}
 8013630:	bf00      	nop
 8013632:	3714      	adds	r7, #20
 8013634:	46bd      	mov	sp, r7
 8013636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363a:	4770      	bx	lr
 801363c:	20004b48 	.word	0x20004b48
 8013640:	20004bf0 	.word	0x20004bf0

08013644 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801364a:	2020      	movs	r0, #32
 801364c:	f003 fb34 	bl	8016cb8 <pvPortMalloc>
 8013650:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d00a      	beq.n	801366e <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2200      	movs	r2, #0
 801365c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	3304      	adds	r3, #4
 8013662:	4618      	mov	r0, r3
 8013664:	f000 fa09 	bl	8013a7a <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2200      	movs	r2, #0
 801366c:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801366e:	687b      	ldr	r3, [r7, #4]
	}
 8013670:	4618      	mov	r0, r3
 8013672:	3708      	adds	r7, #8
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b090      	sub	sp, #64	@ 0x40
 801367c:	af00      	add	r7, sp, #0
 801367e:	60f8      	str	r0, [r7, #12]
 8013680:	60b9      	str	r1, [r7, #8]
 8013682:	607a      	str	r2, [r7, #4]
 8013684:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801368a:	2300      	movs	r3, #0
 801368c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801368e:	2300      	movs	r3, #0
 8013690:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d10d      	bne.n	80136b4 <xEventGroupWaitBits+0x3c>
	__asm volatile
 8013698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801369c:	b672      	cpsid	i
 801369e:	f383 8811 	msr	BASEPRI, r3
 80136a2:	f3bf 8f6f 	isb	sy
 80136a6:	f3bf 8f4f 	dsb	sy
 80136aa:	b662      	cpsie	i
 80136ac:	623b      	str	r3, [r7, #32]
}
 80136ae:	bf00      	nop
 80136b0:	bf00      	nop
 80136b2:	e7fd      	b.n	80136b0 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80136ba:	d30d      	bcc.n	80136d8 <xEventGroupWaitBits+0x60>
	__asm volatile
 80136bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136c0:	b672      	cpsid	i
 80136c2:	f383 8811 	msr	BASEPRI, r3
 80136c6:	f3bf 8f6f 	isb	sy
 80136ca:	f3bf 8f4f 	dsb	sy
 80136ce:	b662      	cpsie	i
 80136d0:	61fb      	str	r3, [r7, #28]
}
 80136d2:	bf00      	nop
 80136d4:	bf00      	nop
 80136d6:	e7fd      	b.n	80136d4 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d10d      	bne.n	80136fa <xEventGroupWaitBits+0x82>
	__asm volatile
 80136de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136e2:	b672      	cpsid	i
 80136e4:	f383 8811 	msr	BASEPRI, r3
 80136e8:	f3bf 8f6f 	isb	sy
 80136ec:	f3bf 8f4f 	dsb	sy
 80136f0:	b662      	cpsie	i
 80136f2:	61bb      	str	r3, [r7, #24]
}
 80136f4:	bf00      	nop
 80136f6:	bf00      	nop
 80136f8:	e7fd      	b.n	80136f6 <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80136fa:	f002 f923 	bl	8015944 <xTaskGetSchedulerState>
 80136fe:	4603      	mov	r3, r0
 8013700:	2b00      	cmp	r3, #0
 8013702:	d102      	bne.n	801370a <xEventGroupWaitBits+0x92>
 8013704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013706:	2b00      	cmp	r3, #0
 8013708:	d101      	bne.n	801370e <xEventGroupWaitBits+0x96>
 801370a:	2301      	movs	r3, #1
 801370c:	e000      	b.n	8013710 <xEventGroupWaitBits+0x98>
 801370e:	2300      	movs	r3, #0
 8013710:	2b00      	cmp	r3, #0
 8013712:	d10d      	bne.n	8013730 <xEventGroupWaitBits+0xb8>
	__asm volatile
 8013714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013718:	b672      	cpsid	i
 801371a:	f383 8811 	msr	BASEPRI, r3
 801371e:	f3bf 8f6f 	isb	sy
 8013722:	f3bf 8f4f 	dsb	sy
 8013726:	b662      	cpsie	i
 8013728:	617b      	str	r3, [r7, #20]
}
 801372a:	bf00      	nop
 801372c:	bf00      	nop
 801372e:	e7fd      	b.n	801372c <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 8013730:	f001 fc1e 	bl	8014f70 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801373a:	683a      	ldr	r2, [r7, #0]
 801373c:	68b9      	ldr	r1, [r7, #8]
 801373e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013740:	f000 f979 	bl	8013a36 <prvTestWaitCondition>
 8013744:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8013746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013748:	2b00      	cmp	r3, #0
 801374a:	d00e      	beq.n	801376a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013750:	2300      	movs	r3, #0
 8013752:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d028      	beq.n	80137ac <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801375a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	43db      	mvns	r3, r3
 8013762:	401a      	ands	r2, r3
 8013764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013766:	601a      	str	r2, [r3, #0]
 8013768:	e020      	b.n	80137ac <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801376a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801376c:	2b00      	cmp	r3, #0
 801376e:	d104      	bne.n	801377a <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013772:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8013774:	2301      	movs	r3, #1
 8013776:	633b      	str	r3, [r7, #48]	@ 0x30
 8013778:	e018      	b.n	80137ac <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d003      	beq.n	8013788 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013786:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d003      	beq.n	8013796 <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013790:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013794:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013798:	1d18      	adds	r0, r3, #4
 801379a:	68ba      	ldr	r2, [r7, #8]
 801379c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379e:	4313      	orrs	r3, r2
 80137a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80137a2:	4619      	mov	r1, r3
 80137a4:	f001 fdee 	bl	8015384 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80137a8:	2300      	movs	r3, #0
 80137aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80137ac:	f001 fbee 	bl	8014f8c <xTaskResumeAll>
 80137b0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80137b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d031      	beq.n	801381c <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 80137b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d107      	bne.n	80137ce <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 80137be:	4b1a      	ldr	r3, [pc, #104]	@ (8013828 <xEventGroupWaitBits+0x1b0>)
 80137c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80137c4:	601a      	str	r2, [r3, #0]
 80137c6:	f3bf 8f4f 	dsb	sy
 80137ca:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80137ce:	f002 fa3b 	bl	8015c48 <uxTaskResetEventItemValue>
 80137d2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80137d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d11a      	bne.n	8013814 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 80137de:	f003 f93d 	bl	8016a5c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80137e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80137e8:	683a      	ldr	r2, [r7, #0]
 80137ea:	68b9      	ldr	r1, [r7, #8]
 80137ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80137ee:	f000 f922 	bl	8013a36 <prvTestWaitCondition>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d009      	beq.n	801380c <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d006      	beq.n	801380c <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80137fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	43db      	mvns	r3, r3
 8013806:	401a      	ands	r2, r3
 8013808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801380a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801380c:	2301      	movs	r3, #1
 801380e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8013810:	f003 f95a 	bl	8016ac8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013816:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801381c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801381e:	4618      	mov	r0, r3
 8013820:	3740      	adds	r7, #64	@ 0x40
 8013822:	46bd      	mov	sp, r7
 8013824:	bd80      	pop	{r7, pc}
 8013826:	bf00      	nop
 8013828:	e000ed04 	.word	0xe000ed04

0801382c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d10d      	bne.n	801385c <xEventGroupClearBits+0x30>
	__asm volatile
 8013840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013844:	b672      	cpsid	i
 8013846:	f383 8811 	msr	BASEPRI, r3
 801384a:	f3bf 8f6f 	isb	sy
 801384e:	f3bf 8f4f 	dsb	sy
 8013852:	b662      	cpsie	i
 8013854:	60fb      	str	r3, [r7, #12]
}
 8013856:	bf00      	nop
 8013858:	bf00      	nop
 801385a:	e7fd      	b.n	8013858 <xEventGroupClearBits+0x2c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013862:	d30d      	bcc.n	8013880 <xEventGroupClearBits+0x54>
	__asm volatile
 8013864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013868:	b672      	cpsid	i
 801386a:	f383 8811 	msr	BASEPRI, r3
 801386e:	f3bf 8f6f 	isb	sy
 8013872:	f3bf 8f4f 	dsb	sy
 8013876:	b662      	cpsie	i
 8013878:	60bb      	str	r3, [r7, #8]
}
 801387a:	bf00      	nop
 801387c:	bf00      	nop
 801387e:	e7fd      	b.n	801387c <xEventGroupClearBits+0x50>

	taskENTER_CRITICAL();
 8013880:	f003 f8ec 	bl	8016a5c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	681a      	ldr	r2, [r3, #0]
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	43db      	mvns	r3, r3
 8013892:	401a      	ands	r2, r3
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013898:	f003 f916 	bl	8016ac8 <vPortExitCritical>

	return uxReturn;
 801389c:	693b      	ldr	r3, [r7, #16]
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3718      	adds	r7, #24
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}

080138a6 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80138a6:	b580      	push	{r7, lr}
 80138a8:	b08e      	sub	sp, #56	@ 0x38
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	6078      	str	r0, [r7, #4]
 80138ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80138b0:	2300      	movs	r3, #0
 80138b2:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 80138b8:	2300      	movs	r3, #0
 80138ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d10d      	bne.n	80138de <xEventGroupSetBits+0x38>
	__asm volatile
 80138c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138c6:	b672      	cpsid	i
 80138c8:	f383 8811 	msr	BASEPRI, r3
 80138cc:	f3bf 8f6f 	isb	sy
 80138d0:	f3bf 8f4f 	dsb	sy
 80138d4:	b662      	cpsie	i
 80138d6:	613b      	str	r3, [r7, #16]
}
 80138d8:	bf00      	nop
 80138da:	bf00      	nop
 80138dc:	e7fd      	b.n	80138da <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80138e4:	d30d      	bcc.n	8013902 <xEventGroupSetBits+0x5c>
	__asm volatile
 80138e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ea:	b672      	cpsid	i
 80138ec:	f383 8811 	msr	BASEPRI, r3
 80138f0:	f3bf 8f6f 	isb	sy
 80138f4:	f3bf 8f4f 	dsb	sy
 80138f8:	b662      	cpsie	i
 80138fa:	60fb      	str	r3, [r7, #12]
}
 80138fc:	bf00      	nop
 80138fe:	bf00      	nop
 8013900:	e7fd      	b.n	80138fe <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013904:	3304      	adds	r3, #4
 8013906:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801390a:	3308      	adds	r3, #8
 801390c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801390e:	f001 fb2f 	bl	8014f70 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013914:	68db      	ldr	r3, [r3, #12]
 8013916:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801391a:	681a      	ldr	r2, [r3, #0]
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	431a      	orrs	r2, r3
 8013920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013922:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013924:	e03c      	b.n	80139a0 <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801392c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013932:	2300      	movs	r3, #0
 8013934:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013936:	69bb      	ldr	r3, [r7, #24]
 8013938:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 801393c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801393e:	69bb      	ldr	r3, [r7, #24]
 8013940:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013944:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801394c:	2b00      	cmp	r3, #0
 801394e:	d108      	bne.n	8013962 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013952:	681a      	ldr	r2, [r3, #0]
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	4013      	ands	r3, r2
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00b      	beq.n	8013974 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 801395c:	2301      	movs	r3, #1
 801395e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013960:	e008      	b.n	8013974 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	4013      	ands	r3, r2
 801396a:	69ba      	ldr	r2, [r7, #24]
 801396c:	429a      	cmp	r2, r3
 801396e:	d101      	bne.n	8013974 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013970:	2301      	movs	r3, #1
 8013972:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013976:	2b00      	cmp	r3, #0
 8013978:	d010      	beq.n	801399c <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801397a:	697b      	ldr	r3, [r7, #20]
 801397c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8013980:	2b00      	cmp	r3, #0
 8013982:	d003      	beq.n	801398c <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013986:	69bb      	ldr	r3, [r7, #24]
 8013988:	4313      	orrs	r3, r2
 801398a:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8013994:	4619      	mov	r1, r3
 8013996:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013998:	f001 fdca 	bl	8015530 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80139a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80139a2:	6a3b      	ldr	r3, [r7, #32]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d1be      	bne.n	8013926 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80139a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ae:	43db      	mvns	r3, r3
 80139b0:	401a      	ands	r2, r3
 80139b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80139b6:	f001 fae9 	bl	8014f8c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80139ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139bc:	681b      	ldr	r3, [r3, #0]
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3738      	adds	r7, #56	@ 0x38
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}

080139c6 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80139c6:	b580      	push	{r7, lr}
 80139c8:	b086      	sub	sp, #24
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	3304      	adds	r3, #4
 80139d6:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 80139d8:	f001 faca 	bl	8014f70 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80139dc:	e01a      	b.n	8013a14 <vEventGroupDelete+0x4e>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	68da      	ldr	r2, [r3, #12]
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	3308      	adds	r3, #8
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d10d      	bne.n	8013a06 <vEventGroupDelete+0x40>
	__asm volatile
 80139ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139ee:	b672      	cpsid	i
 80139f0:	f383 8811 	msr	BASEPRI, r3
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	b662      	cpsie	i
 80139fe:	60fb      	str	r3, [r7, #12]
}
 8013a00:	bf00      	nop
 8013a02:	bf00      	nop
 8013a04:	e7fd      	b.n	8013a02 <vEventGroupDelete+0x3c>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	68db      	ldr	r3, [r3, #12]
 8013a0a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f001 fd8e 	bl	8015530 <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d1e0      	bne.n	80139de <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	7f1b      	ldrb	r3, [r3, #28]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d102      	bne.n	8013a2a <vEventGroupDelete+0x64>
			{
				vPortFree( pxEventBits );
 8013a24:	6978      	ldr	r0, [r7, #20]
 8013a26:	f003 fa15 	bl	8016e54 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8013a2a:	f001 faaf 	bl	8014f8c <xTaskResumeAll>
}
 8013a2e:	bf00      	nop
 8013a30:	3718      	adds	r7, #24
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013a36:	b480      	push	{r7}
 8013a38:	b087      	sub	sp, #28
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	60f8      	str	r0, [r7, #12]
 8013a3e:	60b9      	str	r1, [r7, #8]
 8013a40:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013a42:	2300      	movs	r3, #0
 8013a44:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d107      	bne.n	8013a5c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013a4c:	68fa      	ldr	r2, [r7, #12]
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	4013      	ands	r3, r2
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d00a      	beq.n	8013a6c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013a56:	2301      	movs	r3, #1
 8013a58:	617b      	str	r3, [r7, #20]
 8013a5a:	e007      	b.n	8013a6c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013a5c:	68fa      	ldr	r2, [r7, #12]
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	4013      	ands	r3, r2
 8013a62:	68ba      	ldr	r2, [r7, #8]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d101      	bne.n	8013a6c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013a68:	2301      	movs	r3, #1
 8013a6a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013a6c:	697b      	ldr	r3, [r7, #20]
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	371c      	adds	r7, #28
 8013a72:	46bd      	mov	sp, r7
 8013a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a78:	4770      	bx	lr

08013a7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013a7a:	b480      	push	{r7}
 8013a7c:	b083      	sub	sp, #12
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f103 0208 	add.w	r2, r3, #8
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f103 0208 	add.w	r2, r3, #8
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f103 0208 	add.w	r2, r3, #8
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013aae:	bf00      	nop
 8013ab0:	370c      	adds	r7, #12
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab8:	4770      	bx	lr

08013aba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013aba:	b480      	push	{r7}
 8013abc:	b083      	sub	sp, #12
 8013abe:	af00      	add	r7, sp, #0
 8013ac0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013ac8:	bf00      	nop
 8013aca:	370c      	adds	r7, #12
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr

08013ad4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b085      	sub	sp, #20
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	68fa      	ldr	r2, [r7, #12]
 8013ae8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	689a      	ldr	r2, [r3, #8]
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	689b      	ldr	r3, [r3, #8]
 8013af6:	683a      	ldr	r2, [r7, #0]
 8013af8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	683a      	ldr	r2, [r7, #0]
 8013afe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	1c5a      	adds	r2, r3, #1
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	601a      	str	r2, [r3, #0]
}
 8013b10:	bf00      	nop
 8013b12:	3714      	adds	r7, #20
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b085      	sub	sp, #20
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b32:	d103      	bne.n	8013b3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	691b      	ldr	r3, [r3, #16]
 8013b38:	60fb      	str	r3, [r7, #12]
 8013b3a:	e00c      	b.n	8013b56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	3308      	adds	r3, #8
 8013b40:	60fb      	str	r3, [r7, #12]
 8013b42:	e002      	b.n	8013b4a <vListInsert+0x2e>
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	60fb      	str	r3, [r7, #12]
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	68ba      	ldr	r2, [r7, #8]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d2f6      	bcs.n	8013b44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	685a      	ldr	r2, [r3, #4]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	685b      	ldr	r3, [r3, #4]
 8013b62:	683a      	ldr	r2, [r7, #0]
 8013b64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	683a      	ldr	r2, [r7, #0]
 8013b70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	687a      	ldr	r2, [r7, #4]
 8013b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	1c5a      	adds	r2, r3, #1
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	601a      	str	r2, [r3, #0]
}
 8013b82:	bf00      	nop
 8013b84:	3714      	adds	r7, #20
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr

08013b8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013b8e:	b480      	push	{r7}
 8013b90:	b085      	sub	sp, #20
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	691b      	ldr	r3, [r3, #16]
 8013b9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	687a      	ldr	r2, [r7, #4]
 8013ba2:	6892      	ldr	r2, [r2, #8]
 8013ba4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	689b      	ldr	r3, [r3, #8]
 8013baa:	687a      	ldr	r2, [r7, #4]
 8013bac:	6852      	ldr	r2, [r2, #4]
 8013bae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d103      	bne.n	8013bc2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	689a      	ldr	r2, [r3, #8]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	1e5a      	subs	r2, r3, #1
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3714      	adds	r7, #20
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be0:	4770      	bx	lr
	...

08013be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b084      	sub	sp, #16
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10d      	bne.n	8013c14 <xQueueGenericReset+0x30>
	__asm volatile
 8013bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bfc:	b672      	cpsid	i
 8013bfe:	f383 8811 	msr	BASEPRI, r3
 8013c02:	f3bf 8f6f 	isb	sy
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	b662      	cpsie	i
 8013c0c:	60bb      	str	r3, [r7, #8]
}
 8013c0e:	bf00      	nop
 8013c10:	bf00      	nop
 8013c12:	e7fd      	b.n	8013c10 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8013c14:	f002 ff22 	bl	8016a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c20:	68f9      	ldr	r1, [r7, #12]
 8013c22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013c24:	fb01 f303 	mul.w	r3, r1, r3
 8013c28:	441a      	add	r2, r3
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2200      	movs	r2, #0
 8013c32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013c44:	3b01      	subs	r3, #1
 8013c46:	68f9      	ldr	r1, [r7, #12]
 8013c48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013c4a:	fb01 f303 	mul.w	r3, r1, r3
 8013c4e:	441a      	add	r2, r3
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	22ff      	movs	r2, #255	@ 0xff
 8013c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	22ff      	movs	r2, #255	@ 0xff
 8013c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d114      	bne.n	8013c94 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	691b      	ldr	r3, [r3, #16]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d01a      	beq.n	8013ca8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	3310      	adds	r3, #16
 8013c76:	4618      	mov	r0, r3
 8013c78:	f001 fbf4 	bl	8015464 <xTaskRemoveFromEventList>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d012      	beq.n	8013ca8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013c82:	4b0d      	ldr	r3, [pc, #52]	@ (8013cb8 <xQueueGenericReset+0xd4>)
 8013c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013c88:	601a      	str	r2, [r3, #0]
 8013c8a:	f3bf 8f4f 	dsb	sy
 8013c8e:	f3bf 8f6f 	isb	sy
 8013c92:	e009      	b.n	8013ca8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	3310      	adds	r3, #16
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7ff feee 	bl	8013a7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	3324      	adds	r3, #36	@ 0x24
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7ff fee9 	bl	8013a7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013ca8:	f002 ff0e 	bl	8016ac8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013cac:	2301      	movs	r3, #1
}
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3710      	adds	r7, #16
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	e000ed04 	.word	0xe000ed04

08013cbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b08e      	sub	sp, #56	@ 0x38
 8013cc0:	af02      	add	r7, sp, #8
 8013cc2:	60f8      	str	r0, [r7, #12]
 8013cc4:	60b9      	str	r1, [r7, #8]
 8013cc6:	607a      	str	r2, [r7, #4]
 8013cc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d10d      	bne.n	8013cec <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8013cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cd4:	b672      	cpsid	i
 8013cd6:	f383 8811 	msr	BASEPRI, r3
 8013cda:	f3bf 8f6f 	isb	sy
 8013cde:	f3bf 8f4f 	dsb	sy
 8013ce2:	b662      	cpsie	i
 8013ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013ce6:	bf00      	nop
 8013ce8:	bf00      	nop
 8013cea:	e7fd      	b.n	8013ce8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d10d      	bne.n	8013d0e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8013cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cf6:	b672      	cpsid	i
 8013cf8:	f383 8811 	msr	BASEPRI, r3
 8013cfc:	f3bf 8f6f 	isb	sy
 8013d00:	f3bf 8f4f 	dsb	sy
 8013d04:	b662      	cpsie	i
 8013d06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013d08:	bf00      	nop
 8013d0a:	bf00      	nop
 8013d0c:	e7fd      	b.n	8013d0a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d002      	beq.n	8013d1a <xQueueGenericCreateStatic+0x5e>
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d001      	beq.n	8013d1e <xQueueGenericCreateStatic+0x62>
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	e000      	b.n	8013d20 <xQueueGenericCreateStatic+0x64>
 8013d1e:	2300      	movs	r3, #0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d10d      	bne.n	8013d40 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8013d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d28:	b672      	cpsid	i
 8013d2a:	f383 8811 	msr	BASEPRI, r3
 8013d2e:	f3bf 8f6f 	isb	sy
 8013d32:	f3bf 8f4f 	dsb	sy
 8013d36:	b662      	cpsie	i
 8013d38:	623b      	str	r3, [r7, #32]
}
 8013d3a:	bf00      	nop
 8013d3c:	bf00      	nop
 8013d3e:	e7fd      	b.n	8013d3c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d102      	bne.n	8013d4c <xQueueGenericCreateStatic+0x90>
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d101      	bne.n	8013d50 <xQueueGenericCreateStatic+0x94>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	e000      	b.n	8013d52 <xQueueGenericCreateStatic+0x96>
 8013d50:	2300      	movs	r3, #0
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d10d      	bne.n	8013d72 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8013d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d5a:	b672      	cpsid	i
 8013d5c:	f383 8811 	msr	BASEPRI, r3
 8013d60:	f3bf 8f6f 	isb	sy
 8013d64:	f3bf 8f4f 	dsb	sy
 8013d68:	b662      	cpsie	i
 8013d6a:	61fb      	str	r3, [r7, #28]
}
 8013d6c:	bf00      	nop
 8013d6e:	bf00      	nop
 8013d70:	e7fd      	b.n	8013d6e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013d72:	2350      	movs	r3, #80	@ 0x50
 8013d74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	2b50      	cmp	r3, #80	@ 0x50
 8013d7a:	d00d      	beq.n	8013d98 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8013d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d80:	b672      	cpsid	i
 8013d82:	f383 8811 	msr	BASEPRI, r3
 8013d86:	f3bf 8f6f 	isb	sy
 8013d8a:	f3bf 8f4f 	dsb	sy
 8013d8e:	b662      	cpsie	i
 8013d90:	61bb      	str	r3, [r7, #24]
}
 8013d92:	bf00      	nop
 8013d94:	bf00      	nop
 8013d96:	e7fd      	b.n	8013d94 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013d98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d00d      	beq.n	8013dc0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013da6:	2201      	movs	r2, #1
 8013da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013dac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013db2:	9300      	str	r3, [sp, #0]
 8013db4:	4613      	mov	r3, r2
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	68b9      	ldr	r1, [r7, #8]
 8013dba:	68f8      	ldr	r0, [r7, #12]
 8013dbc:	f000 f805 	bl	8013dca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3730      	adds	r7, #48	@ 0x30
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}

08013dca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013dca:	b580      	push	{r7, lr}
 8013dcc:	b084      	sub	sp, #16
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	60f8      	str	r0, [r7, #12]
 8013dd2:	60b9      	str	r1, [r7, #8]
 8013dd4:	607a      	str	r2, [r7, #4]
 8013dd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d103      	bne.n	8013de6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013dde:	69bb      	ldr	r3, [r7, #24]
 8013de0:	69ba      	ldr	r2, [r7, #24]
 8013de2:	601a      	str	r2, [r3, #0]
 8013de4:	e002      	b.n	8013dec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013de6:	69bb      	ldr	r3, [r7, #24]
 8013de8:	687a      	ldr	r2, [r7, #4]
 8013dea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013dec:	69bb      	ldr	r3, [r7, #24]
 8013dee:	68fa      	ldr	r2, [r7, #12]
 8013df0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013df2:	69bb      	ldr	r3, [r7, #24]
 8013df4:	68ba      	ldr	r2, [r7, #8]
 8013df6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013df8:	2101      	movs	r1, #1
 8013dfa:	69b8      	ldr	r0, [r7, #24]
 8013dfc:	f7ff fef2 	bl	8013be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013e00:	69bb      	ldr	r3, [r7, #24]
 8013e02:	78fa      	ldrb	r2, [r7, #3]
 8013e04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013e08:	bf00      	nop
 8013e0a:	3710      	adds	r7, #16
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d00e      	beq.n	8013e3c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2200      	movs	r2, #0
 8013e28:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013e30:	2300      	movs	r3, #0
 8013e32:	2200      	movs	r2, #0
 8013e34:	2100      	movs	r1, #0
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f000 f85c 	bl	8013ef4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013e3c:	bf00      	nop
 8013e3e:	3708      	adds	r7, #8
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b088      	sub	sp, #32
 8013e48:	af02      	add	r7, sp, #8
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	6039      	str	r1, [r7, #0]
 8013e4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013e50:	2301      	movs	r3, #1
 8013e52:	617b      	str	r3, [r7, #20]
 8013e54:	2300      	movs	r3, #0
 8013e56:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013e58:	79fb      	ldrb	r3, [r7, #7]
 8013e5a:	9300      	str	r3, [sp, #0]
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	6939      	ldr	r1, [r7, #16]
 8013e62:	6978      	ldr	r0, [r7, #20]
 8013e64:	f7ff ff2a 	bl	8013cbc <xQueueGenericCreateStatic>
 8013e68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013e6a:	68f8      	ldr	r0, [r7, #12]
 8013e6c:	f7ff ffd0 	bl	8013e10 <prvInitialiseMutex>

		return xNewQueue;
 8013e70:	68fb      	ldr	r3, [r7, #12]
	}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3718      	adds	r7, #24
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}

08013e7a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013e7a:	b580      	push	{r7, lr}
 8013e7c:	b08a      	sub	sp, #40	@ 0x28
 8013e7e:	af02      	add	r7, sp, #8
 8013e80:	60f8      	str	r0, [r7, #12]
 8013e82:	60b9      	str	r1, [r7, #8]
 8013e84:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d10d      	bne.n	8013ea8 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8013e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e90:	b672      	cpsid	i
 8013e92:	f383 8811 	msr	BASEPRI, r3
 8013e96:	f3bf 8f6f 	isb	sy
 8013e9a:	f3bf 8f4f 	dsb	sy
 8013e9e:	b662      	cpsie	i
 8013ea0:	61bb      	str	r3, [r7, #24]
}
 8013ea2:	bf00      	nop
 8013ea4:	bf00      	nop
 8013ea6:	e7fd      	b.n	8013ea4 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013ea8:	68ba      	ldr	r2, [r7, #8]
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d90d      	bls.n	8013ecc <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8013eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eb4:	b672      	cpsid	i
 8013eb6:	f383 8811 	msr	BASEPRI, r3
 8013eba:	f3bf 8f6f 	isb	sy
 8013ebe:	f3bf 8f4f 	dsb	sy
 8013ec2:	b662      	cpsie	i
 8013ec4:	617b      	str	r3, [r7, #20]
}
 8013ec6:	bf00      	nop
 8013ec8:	bf00      	nop
 8013eca:	e7fd      	b.n	8013ec8 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013ecc:	2302      	movs	r3, #2
 8013ece:	9300      	str	r3, [sp, #0]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	2100      	movs	r1, #0
 8013ed6:	68f8      	ldr	r0, [r7, #12]
 8013ed8:	f7ff fef0 	bl	8013cbc <xQueueGenericCreateStatic>
 8013edc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8013ede:	69fb      	ldr	r3, [r7, #28]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d002      	beq.n	8013eea <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013ee4:	69fb      	ldr	r3, [r7, #28]
 8013ee6:	68ba      	ldr	r2, [r7, #8]
 8013ee8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013eea:	69fb      	ldr	r3, [r7, #28]
	}
 8013eec:	4618      	mov	r0, r3
 8013eee:	3720      	adds	r7, #32
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}

08013ef4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b08e      	sub	sp, #56	@ 0x38
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	60f8      	str	r0, [r7, #12]
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	607a      	str	r2, [r7, #4]
 8013f00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013f02:	2300      	movs	r3, #0
 8013f04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d10d      	bne.n	8013f2c <xQueueGenericSend+0x38>
	__asm volatile
 8013f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f14:	b672      	cpsid	i
 8013f16:	f383 8811 	msr	BASEPRI, r3
 8013f1a:	f3bf 8f6f 	isb	sy
 8013f1e:	f3bf 8f4f 	dsb	sy
 8013f22:	b662      	cpsie	i
 8013f24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013f26:	bf00      	nop
 8013f28:	bf00      	nop
 8013f2a:	e7fd      	b.n	8013f28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d103      	bne.n	8013f3a <xQueueGenericSend+0x46>
 8013f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d101      	bne.n	8013f3e <xQueueGenericSend+0x4a>
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	e000      	b.n	8013f40 <xQueueGenericSend+0x4c>
 8013f3e:	2300      	movs	r3, #0
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d10d      	bne.n	8013f60 <xQueueGenericSend+0x6c>
	__asm volatile
 8013f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f48:	b672      	cpsid	i
 8013f4a:	f383 8811 	msr	BASEPRI, r3
 8013f4e:	f3bf 8f6f 	isb	sy
 8013f52:	f3bf 8f4f 	dsb	sy
 8013f56:	b662      	cpsie	i
 8013f58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013f5a:	bf00      	nop
 8013f5c:	bf00      	nop
 8013f5e:	e7fd      	b.n	8013f5c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	2b02      	cmp	r3, #2
 8013f64:	d103      	bne.n	8013f6e <xQueueGenericSend+0x7a>
 8013f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d101      	bne.n	8013f72 <xQueueGenericSend+0x7e>
 8013f6e:	2301      	movs	r3, #1
 8013f70:	e000      	b.n	8013f74 <xQueueGenericSend+0x80>
 8013f72:	2300      	movs	r3, #0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d10d      	bne.n	8013f94 <xQueueGenericSend+0xa0>
	__asm volatile
 8013f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f7c:	b672      	cpsid	i
 8013f7e:	f383 8811 	msr	BASEPRI, r3
 8013f82:	f3bf 8f6f 	isb	sy
 8013f86:	f3bf 8f4f 	dsb	sy
 8013f8a:	b662      	cpsie	i
 8013f8c:	623b      	str	r3, [r7, #32]
}
 8013f8e:	bf00      	nop
 8013f90:	bf00      	nop
 8013f92:	e7fd      	b.n	8013f90 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013f94:	f001 fcd6 	bl	8015944 <xTaskGetSchedulerState>
 8013f98:	4603      	mov	r3, r0
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d102      	bne.n	8013fa4 <xQueueGenericSend+0xb0>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d101      	bne.n	8013fa8 <xQueueGenericSend+0xb4>
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e000      	b.n	8013faa <xQueueGenericSend+0xb6>
 8013fa8:	2300      	movs	r3, #0
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d10d      	bne.n	8013fca <xQueueGenericSend+0xd6>
	__asm volatile
 8013fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb2:	b672      	cpsid	i
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	b662      	cpsie	i
 8013fc2:	61fb      	str	r3, [r7, #28]
}
 8013fc4:	bf00      	nop
 8013fc6:	bf00      	nop
 8013fc8:	e7fd      	b.n	8013fc6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013fca:	f002 fd47 	bl	8016a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d302      	bcc.n	8013fe0 <xQueueGenericSend+0xec>
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	2b02      	cmp	r3, #2
 8013fde:	d129      	bne.n	8014034 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013fe0:	683a      	ldr	r2, [r7, #0]
 8013fe2:	68b9      	ldr	r1, [r7, #8]
 8013fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013fe6:	f000 fbb8 	bl	801475a <prvCopyDataToQueue>
 8013fea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d010      	beq.n	8014016 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ff6:	3324      	adds	r3, #36	@ 0x24
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f001 fa33 	bl	8015464 <xTaskRemoveFromEventList>
 8013ffe:	4603      	mov	r3, r0
 8014000:	2b00      	cmp	r3, #0
 8014002:	d013      	beq.n	801402c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014004:	4b3f      	ldr	r3, [pc, #252]	@ (8014104 <xQueueGenericSend+0x210>)
 8014006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801400a:	601a      	str	r2, [r3, #0]
 801400c:	f3bf 8f4f 	dsb	sy
 8014010:	f3bf 8f6f 	isb	sy
 8014014:	e00a      	b.n	801402c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014018:	2b00      	cmp	r3, #0
 801401a:	d007      	beq.n	801402c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801401c:	4b39      	ldr	r3, [pc, #228]	@ (8014104 <xQueueGenericSend+0x210>)
 801401e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014022:	601a      	str	r2, [r3, #0]
 8014024:	f3bf 8f4f 	dsb	sy
 8014028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801402c:	f002 fd4c 	bl	8016ac8 <vPortExitCritical>
				return pdPASS;
 8014030:	2301      	movs	r3, #1
 8014032:	e063      	b.n	80140fc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d103      	bne.n	8014042 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801403a:	f002 fd45 	bl	8016ac8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801403e:	2300      	movs	r3, #0
 8014040:	e05c      	b.n	80140fc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014044:	2b00      	cmp	r3, #0
 8014046:	d106      	bne.n	8014056 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014048:	f107 0314 	add.w	r3, r7, #20
 801404c:	4618      	mov	r0, r3
 801404e:	f001 fb01 	bl	8015654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014052:	2301      	movs	r3, #1
 8014054:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014056:	f002 fd37 	bl	8016ac8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801405a:	f000 ff89 	bl	8014f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801405e:	f002 fcfd 	bl	8016a5c <vPortEnterCritical>
 8014062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014068:	b25b      	sxtb	r3, r3
 801406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406e:	d103      	bne.n	8014078 <xQueueGenericSend+0x184>
 8014070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014072:	2200      	movs	r2, #0
 8014074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801407a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801407e:	b25b      	sxtb	r3, r3
 8014080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014084:	d103      	bne.n	801408e <xQueueGenericSend+0x19a>
 8014086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014088:	2200      	movs	r2, #0
 801408a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801408e:	f002 fd1b 	bl	8016ac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014092:	1d3a      	adds	r2, r7, #4
 8014094:	f107 0314 	add.w	r3, r7, #20
 8014098:	4611      	mov	r1, r2
 801409a:	4618      	mov	r0, r3
 801409c:	f001 faf0 	bl	8015680 <xTaskCheckForTimeOut>
 80140a0:	4603      	mov	r3, r0
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d124      	bne.n	80140f0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80140a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140a8:	f000 fc4f 	bl	801494a <prvIsQueueFull>
 80140ac:	4603      	mov	r3, r0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d018      	beq.n	80140e4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80140b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140b4:	3310      	adds	r3, #16
 80140b6:	687a      	ldr	r2, [r7, #4]
 80140b8:	4611      	mov	r1, r2
 80140ba:	4618      	mov	r0, r3
 80140bc:	f001 f93a 	bl	8015334 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80140c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140c2:	f000 fbda 	bl	801487a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80140c6:	f000 ff61 	bl	8014f8c <xTaskResumeAll>
 80140ca:	4603      	mov	r3, r0
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f47f af7c 	bne.w	8013fca <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80140d2:	4b0c      	ldr	r3, [pc, #48]	@ (8014104 <xQueueGenericSend+0x210>)
 80140d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80140d8:	601a      	str	r2, [r3, #0]
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	f3bf 8f6f 	isb	sy
 80140e2:	e772      	b.n	8013fca <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80140e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140e6:	f000 fbc8 	bl	801487a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80140ea:	f000 ff4f 	bl	8014f8c <xTaskResumeAll>
 80140ee:	e76c      	b.n	8013fca <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80140f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80140f2:	f000 fbc2 	bl	801487a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140f6:	f000 ff49 	bl	8014f8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80140fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3738      	adds	r7, #56	@ 0x38
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}
 8014104:	e000ed04 	.word	0xe000ed04

08014108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b08e      	sub	sp, #56	@ 0x38
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	607a      	str	r2, [r7, #4]
 8014114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801411c:	2b00      	cmp	r3, #0
 801411e:	d10d      	bne.n	801413c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8014120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014124:	b672      	cpsid	i
 8014126:	f383 8811 	msr	BASEPRI, r3
 801412a:	f3bf 8f6f 	isb	sy
 801412e:	f3bf 8f4f 	dsb	sy
 8014132:	b662      	cpsie	i
 8014134:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014136:	bf00      	nop
 8014138:	bf00      	nop
 801413a:	e7fd      	b.n	8014138 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d103      	bne.n	801414a <xQueueGenericSendFromISR+0x42>
 8014142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014146:	2b00      	cmp	r3, #0
 8014148:	d101      	bne.n	801414e <xQueueGenericSendFromISR+0x46>
 801414a:	2301      	movs	r3, #1
 801414c:	e000      	b.n	8014150 <xQueueGenericSendFromISR+0x48>
 801414e:	2300      	movs	r3, #0
 8014150:	2b00      	cmp	r3, #0
 8014152:	d10d      	bne.n	8014170 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8014154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014158:	b672      	cpsid	i
 801415a:	f383 8811 	msr	BASEPRI, r3
 801415e:	f3bf 8f6f 	isb	sy
 8014162:	f3bf 8f4f 	dsb	sy
 8014166:	b662      	cpsie	i
 8014168:	623b      	str	r3, [r7, #32]
}
 801416a:	bf00      	nop
 801416c:	bf00      	nop
 801416e:	e7fd      	b.n	801416c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	2b02      	cmp	r3, #2
 8014174:	d103      	bne.n	801417e <xQueueGenericSendFromISR+0x76>
 8014176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801417a:	2b01      	cmp	r3, #1
 801417c:	d101      	bne.n	8014182 <xQueueGenericSendFromISR+0x7a>
 801417e:	2301      	movs	r3, #1
 8014180:	e000      	b.n	8014184 <xQueueGenericSendFromISR+0x7c>
 8014182:	2300      	movs	r3, #0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d10d      	bne.n	80141a4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8014188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801418c:	b672      	cpsid	i
 801418e:	f383 8811 	msr	BASEPRI, r3
 8014192:	f3bf 8f6f 	isb	sy
 8014196:	f3bf 8f4f 	dsb	sy
 801419a:	b662      	cpsie	i
 801419c:	61fb      	str	r3, [r7, #28]
}
 801419e:	bf00      	nop
 80141a0:	bf00      	nop
 80141a2:	e7fd      	b.n	80141a0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80141a4:	f002 fd42 	bl	8016c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80141a8:	f3ef 8211 	mrs	r2, BASEPRI
 80141ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141b0:	b672      	cpsid	i
 80141b2:	f383 8811 	msr	BASEPRI, r3
 80141b6:	f3bf 8f6f 	isb	sy
 80141ba:	f3bf 8f4f 	dsb	sy
 80141be:	b662      	cpsie	i
 80141c0:	61ba      	str	r2, [r7, #24]
 80141c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80141c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80141c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80141c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80141cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d302      	bcc.n	80141da <xQueueGenericSendFromISR+0xd2>
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	2b02      	cmp	r3, #2
 80141d8:	d12c      	bne.n	8014234 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80141da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80141e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	68b9      	ldr	r1, [r7, #8]
 80141e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80141ea:	f000 fab6 	bl	801475a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80141ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80141f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141f6:	d112      	bne.n	801421e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d016      	beq.n	801422e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014202:	3324      	adds	r3, #36	@ 0x24
 8014204:	4618      	mov	r0, r3
 8014206:	f001 f92d 	bl	8015464 <xTaskRemoveFromEventList>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d00e      	beq.n	801422e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d00b      	beq.n	801422e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2201      	movs	r2, #1
 801421a:	601a      	str	r2, [r3, #0]
 801421c:	e007      	b.n	801422e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801421e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014222:	3301      	adds	r3, #1
 8014224:	b2db      	uxtb	r3, r3
 8014226:	b25a      	sxtb	r2, r3
 8014228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801422e:	2301      	movs	r3, #1
 8014230:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8014232:	e001      	b.n	8014238 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014234:	2300      	movs	r3, #0
 8014236:	637b      	str	r3, [r7, #52]	@ 0x34
 8014238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801423a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014242:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014246:	4618      	mov	r0, r3
 8014248:	3738      	adds	r7, #56	@ 0x38
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
	...

08014250 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b08c      	sub	sp, #48	@ 0x30
 8014254:	af00      	add	r7, sp, #0
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	60b9      	str	r1, [r7, #8]
 801425a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801425c:	2300      	movs	r3, #0
 801425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014266:	2b00      	cmp	r3, #0
 8014268:	d10d      	bne.n	8014286 <xQueueReceive+0x36>
	__asm volatile
 801426a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801426e:	b672      	cpsid	i
 8014270:	f383 8811 	msr	BASEPRI, r3
 8014274:	f3bf 8f6f 	isb	sy
 8014278:	f3bf 8f4f 	dsb	sy
 801427c:	b662      	cpsie	i
 801427e:	623b      	str	r3, [r7, #32]
}
 8014280:	bf00      	nop
 8014282:	bf00      	nop
 8014284:	e7fd      	b.n	8014282 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d103      	bne.n	8014294 <xQueueReceive+0x44>
 801428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014290:	2b00      	cmp	r3, #0
 8014292:	d101      	bne.n	8014298 <xQueueReceive+0x48>
 8014294:	2301      	movs	r3, #1
 8014296:	e000      	b.n	801429a <xQueueReceive+0x4a>
 8014298:	2300      	movs	r3, #0
 801429a:	2b00      	cmp	r3, #0
 801429c:	d10d      	bne.n	80142ba <xQueueReceive+0x6a>
	__asm volatile
 801429e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142a2:	b672      	cpsid	i
 80142a4:	f383 8811 	msr	BASEPRI, r3
 80142a8:	f3bf 8f6f 	isb	sy
 80142ac:	f3bf 8f4f 	dsb	sy
 80142b0:	b662      	cpsie	i
 80142b2:	61fb      	str	r3, [r7, #28]
}
 80142b4:	bf00      	nop
 80142b6:	bf00      	nop
 80142b8:	e7fd      	b.n	80142b6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80142ba:	f001 fb43 	bl	8015944 <xTaskGetSchedulerState>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d102      	bne.n	80142ca <xQueueReceive+0x7a>
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d101      	bne.n	80142ce <xQueueReceive+0x7e>
 80142ca:	2301      	movs	r3, #1
 80142cc:	e000      	b.n	80142d0 <xQueueReceive+0x80>
 80142ce:	2300      	movs	r3, #0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d10d      	bne.n	80142f0 <xQueueReceive+0xa0>
	__asm volatile
 80142d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142d8:	b672      	cpsid	i
 80142da:	f383 8811 	msr	BASEPRI, r3
 80142de:	f3bf 8f6f 	isb	sy
 80142e2:	f3bf 8f4f 	dsb	sy
 80142e6:	b662      	cpsie	i
 80142e8:	61bb      	str	r3, [r7, #24]
}
 80142ea:	bf00      	nop
 80142ec:	bf00      	nop
 80142ee:	e7fd      	b.n	80142ec <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80142f0:	f002 fbb4 	bl	8016a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80142f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80142fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d01f      	beq.n	8014340 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014300:	68b9      	ldr	r1, [r7, #8]
 8014302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014304:	f000 fa93 	bl	801482e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801430a:	1e5a      	subs	r2, r3, #1
 801430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801430e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014312:	691b      	ldr	r3, [r3, #16]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00f      	beq.n	8014338 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801431a:	3310      	adds	r3, #16
 801431c:	4618      	mov	r0, r3
 801431e:	f001 f8a1 	bl	8015464 <xTaskRemoveFromEventList>
 8014322:	4603      	mov	r3, r0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d007      	beq.n	8014338 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014328:	4b3c      	ldr	r3, [pc, #240]	@ (801441c <xQueueReceive+0x1cc>)
 801432a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801432e:	601a      	str	r2, [r3, #0]
 8014330:	f3bf 8f4f 	dsb	sy
 8014334:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014338:	f002 fbc6 	bl	8016ac8 <vPortExitCritical>
				return pdPASS;
 801433c:	2301      	movs	r3, #1
 801433e:	e069      	b.n	8014414 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d103      	bne.n	801434e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014346:	f002 fbbf 	bl	8016ac8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801434a:	2300      	movs	r3, #0
 801434c:	e062      	b.n	8014414 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014350:	2b00      	cmp	r3, #0
 8014352:	d106      	bne.n	8014362 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014354:	f107 0310 	add.w	r3, r7, #16
 8014358:	4618      	mov	r0, r3
 801435a:	f001 f97b 	bl	8015654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801435e:	2301      	movs	r3, #1
 8014360:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014362:	f002 fbb1 	bl	8016ac8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014366:	f000 fe03 	bl	8014f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801436a:	f002 fb77 	bl	8016a5c <vPortEnterCritical>
 801436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014374:	b25b      	sxtb	r3, r3
 8014376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801437a:	d103      	bne.n	8014384 <xQueueReceive+0x134>
 801437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801437e:	2200      	movs	r2, #0
 8014380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801438a:	b25b      	sxtb	r3, r3
 801438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014390:	d103      	bne.n	801439a <xQueueReceive+0x14a>
 8014392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014394:	2200      	movs	r2, #0
 8014396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801439a:	f002 fb95 	bl	8016ac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801439e:	1d3a      	adds	r2, r7, #4
 80143a0:	f107 0310 	add.w	r3, r7, #16
 80143a4:	4611      	mov	r1, r2
 80143a6:	4618      	mov	r0, r3
 80143a8:	f001 f96a 	bl	8015680 <xTaskCheckForTimeOut>
 80143ac:	4603      	mov	r3, r0
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d123      	bne.n	80143fa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80143b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80143b4:	f000 fab3 	bl	801491e <prvIsQueueEmpty>
 80143b8:	4603      	mov	r3, r0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d017      	beq.n	80143ee <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80143be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143c0:	3324      	adds	r3, #36	@ 0x24
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	4611      	mov	r1, r2
 80143c6:	4618      	mov	r0, r3
 80143c8:	f000 ffb4 	bl	8015334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80143cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80143ce:	f000 fa54 	bl	801487a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80143d2:	f000 fddb 	bl	8014f8c <xTaskResumeAll>
 80143d6:	4603      	mov	r3, r0
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d189      	bne.n	80142f0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80143dc:	4b0f      	ldr	r3, [pc, #60]	@ (801441c <xQueueReceive+0x1cc>)
 80143de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80143e2:	601a      	str	r2, [r3, #0]
 80143e4:	f3bf 8f4f 	dsb	sy
 80143e8:	f3bf 8f6f 	isb	sy
 80143ec:	e780      	b.n	80142f0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80143ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80143f0:	f000 fa43 	bl	801487a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80143f4:	f000 fdca 	bl	8014f8c <xTaskResumeAll>
 80143f8:	e77a      	b.n	80142f0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80143fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80143fc:	f000 fa3d 	bl	801487a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014400:	f000 fdc4 	bl	8014f8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014406:	f000 fa8a 	bl	801491e <prvIsQueueEmpty>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	f43f af6f 	beq.w	80142f0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014412:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014414:	4618      	mov	r0, r3
 8014416:	3730      	adds	r7, #48	@ 0x30
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}
 801441c:	e000ed04 	.word	0xe000ed04

08014420 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b08e      	sub	sp, #56	@ 0x38
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801442a:	2300      	movs	r3, #0
 801442c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014432:	2300      	movs	r3, #0
 8014434:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014438:	2b00      	cmp	r3, #0
 801443a:	d10d      	bne.n	8014458 <xQueueSemaphoreTake+0x38>
	__asm volatile
 801443c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014440:	b672      	cpsid	i
 8014442:	f383 8811 	msr	BASEPRI, r3
 8014446:	f3bf 8f6f 	isb	sy
 801444a:	f3bf 8f4f 	dsb	sy
 801444e:	b662      	cpsie	i
 8014450:	623b      	str	r3, [r7, #32]
}
 8014452:	bf00      	nop
 8014454:	bf00      	nop
 8014456:	e7fd      	b.n	8014454 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801445a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801445c:	2b00      	cmp	r3, #0
 801445e:	d00d      	beq.n	801447c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8014460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014464:	b672      	cpsid	i
 8014466:	f383 8811 	msr	BASEPRI, r3
 801446a:	f3bf 8f6f 	isb	sy
 801446e:	f3bf 8f4f 	dsb	sy
 8014472:	b662      	cpsie	i
 8014474:	61fb      	str	r3, [r7, #28]
}
 8014476:	bf00      	nop
 8014478:	bf00      	nop
 801447a:	e7fd      	b.n	8014478 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801447c:	f001 fa62 	bl	8015944 <xTaskGetSchedulerState>
 8014480:	4603      	mov	r3, r0
 8014482:	2b00      	cmp	r3, #0
 8014484:	d102      	bne.n	801448c <xQueueSemaphoreTake+0x6c>
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d101      	bne.n	8014490 <xQueueSemaphoreTake+0x70>
 801448c:	2301      	movs	r3, #1
 801448e:	e000      	b.n	8014492 <xQueueSemaphoreTake+0x72>
 8014490:	2300      	movs	r3, #0
 8014492:	2b00      	cmp	r3, #0
 8014494:	d10d      	bne.n	80144b2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8014496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801449a:	b672      	cpsid	i
 801449c:	f383 8811 	msr	BASEPRI, r3
 80144a0:	f3bf 8f6f 	isb	sy
 80144a4:	f3bf 8f4f 	dsb	sy
 80144a8:	b662      	cpsie	i
 80144aa:	61bb      	str	r3, [r7, #24]
}
 80144ac:	bf00      	nop
 80144ae:	bf00      	nop
 80144b0:	e7fd      	b.n	80144ae <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80144b2:	f002 fad3 	bl	8016a5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80144b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80144bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d024      	beq.n	801450c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80144c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144c4:	1e5a      	subs	r2, r3, #1
 80144c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80144ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d104      	bne.n	80144dc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80144d2:	f001 fbd1 	bl	8015c78 <pvTaskIncrementMutexHeldCount>
 80144d6:	4602      	mov	r2, r0
 80144d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144de:	691b      	ldr	r3, [r3, #16]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d00f      	beq.n	8014504 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e6:	3310      	adds	r3, #16
 80144e8:	4618      	mov	r0, r3
 80144ea:	f000 ffbb 	bl	8015464 <xTaskRemoveFromEventList>
 80144ee:	4603      	mov	r3, r0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d007      	beq.n	8014504 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80144f4:	4b55      	ldr	r3, [pc, #340]	@ (801464c <xQueueSemaphoreTake+0x22c>)
 80144f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144fa:	601a      	str	r2, [r3, #0]
 80144fc:	f3bf 8f4f 	dsb	sy
 8014500:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014504:	f002 fae0 	bl	8016ac8 <vPortExitCritical>
				return pdPASS;
 8014508:	2301      	movs	r3, #1
 801450a:	e09a      	b.n	8014642 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d114      	bne.n	801453c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014514:	2b00      	cmp	r3, #0
 8014516:	d00d      	beq.n	8014534 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8014518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801451c:	b672      	cpsid	i
 801451e:	f383 8811 	msr	BASEPRI, r3
 8014522:	f3bf 8f6f 	isb	sy
 8014526:	f3bf 8f4f 	dsb	sy
 801452a:	b662      	cpsie	i
 801452c:	617b      	str	r3, [r7, #20]
}
 801452e:	bf00      	nop
 8014530:	bf00      	nop
 8014532:	e7fd      	b.n	8014530 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014534:	f002 fac8 	bl	8016ac8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014538:	2300      	movs	r3, #0
 801453a:	e082      	b.n	8014642 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 801453c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801453e:	2b00      	cmp	r3, #0
 8014540:	d106      	bne.n	8014550 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014542:	f107 030c 	add.w	r3, r7, #12
 8014546:	4618      	mov	r0, r3
 8014548:	f001 f884 	bl	8015654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801454c:	2301      	movs	r3, #1
 801454e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014550:	f002 faba 	bl	8016ac8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014554:	f000 fd0c 	bl	8014f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014558:	f002 fa80 	bl	8016a5c <vPortEnterCritical>
 801455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801455e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014562:	b25b      	sxtb	r3, r3
 8014564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014568:	d103      	bne.n	8014572 <xQueueSemaphoreTake+0x152>
 801456a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801456c:	2200      	movs	r2, #0
 801456e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014574:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014578:	b25b      	sxtb	r3, r3
 801457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801457e:	d103      	bne.n	8014588 <xQueueSemaphoreTake+0x168>
 8014580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014582:	2200      	movs	r2, #0
 8014584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014588:	f002 fa9e 	bl	8016ac8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801458c:	463a      	mov	r2, r7
 801458e:	f107 030c 	add.w	r3, r7, #12
 8014592:	4611      	mov	r1, r2
 8014594:	4618      	mov	r0, r3
 8014596:	f001 f873 	bl	8015680 <xTaskCheckForTimeOut>
 801459a:	4603      	mov	r3, r0
 801459c:	2b00      	cmp	r3, #0
 801459e:	d132      	bne.n	8014606 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145a2:	f000 f9bc 	bl	801491e <prvIsQueueEmpty>
 80145a6:	4603      	mov	r3, r0
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d026      	beq.n	80145fa <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80145ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d109      	bne.n	80145c8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80145b4:	f002 fa52 	bl	8016a5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80145b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ba:	689b      	ldr	r3, [r3, #8]
 80145bc:	4618      	mov	r0, r3
 80145be:	f001 f9df 	bl	8015980 <xTaskPriorityInherit>
 80145c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80145c4:	f002 fa80 	bl	8016ac8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80145c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ca:	3324      	adds	r3, #36	@ 0x24
 80145cc:	683a      	ldr	r2, [r7, #0]
 80145ce:	4611      	mov	r1, r2
 80145d0:	4618      	mov	r0, r3
 80145d2:	f000 feaf 	bl	8015334 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80145d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145d8:	f000 f94f 	bl	801487a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80145dc:	f000 fcd6 	bl	8014f8c <xTaskResumeAll>
 80145e0:	4603      	mov	r3, r0
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	f47f af65 	bne.w	80144b2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80145e8:	4b18      	ldr	r3, [pc, #96]	@ (801464c <xQueueSemaphoreTake+0x22c>)
 80145ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145ee:	601a      	str	r2, [r3, #0]
 80145f0:	f3bf 8f4f 	dsb	sy
 80145f4:	f3bf 8f6f 	isb	sy
 80145f8:	e75b      	b.n	80144b2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80145fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145fc:	f000 f93d 	bl	801487a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014600:	f000 fcc4 	bl	8014f8c <xTaskResumeAll>
 8014604:	e755      	b.n	80144b2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014606:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014608:	f000 f937 	bl	801487a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801460c:	f000 fcbe 	bl	8014f8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014610:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014612:	f000 f984 	bl	801491e <prvIsQueueEmpty>
 8014616:	4603      	mov	r3, r0
 8014618:	2b00      	cmp	r3, #0
 801461a:	f43f af4a 	beq.w	80144b2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014620:	2b00      	cmp	r3, #0
 8014622:	d00d      	beq.n	8014640 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8014624:	f002 fa1a 	bl	8016a5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014628:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801462a:	f000 f87e 	bl	801472a <prvGetDisinheritPriorityAfterTimeout>
 801462e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014632:	689b      	ldr	r3, [r3, #8]
 8014634:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014636:	4618      	mov	r0, r3
 8014638:	f001 fa7e 	bl	8015b38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801463c:	f002 fa44 	bl	8016ac8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014640:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014642:	4618      	mov	r0, r3
 8014644:	3738      	adds	r7, #56	@ 0x38
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}
 801464a:	bf00      	nop
 801464c:	e000ed04 	.word	0xe000ed04

08014650 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d10d      	bne.n	801467a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 801465e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014662:	b672      	cpsid	i
 8014664:	f383 8811 	msr	BASEPRI, r3
 8014668:	f3bf 8f6f 	isb	sy
 801466c:	f3bf 8f4f 	dsb	sy
 8014670:	b662      	cpsie	i
 8014672:	60bb      	str	r3, [r7, #8]
}
 8014674:	bf00      	nop
 8014676:	bf00      	nop
 8014678:	e7fd      	b.n	8014676 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 801467a:	f002 f9ef 	bl	8016a5c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014682:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014684:	f002 fa20 	bl	8016ac8 <vPortExitCritical>

	return uxReturn;
 8014688:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801468a:	4618      	mov	r0, r3
 801468c:	3710      	adds	r7, #16
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}

08014692 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8014692:	b580      	push	{r7, lr}
 8014694:	b086      	sub	sp, #24
 8014696:	af00      	add	r7, sp, #0
 8014698:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d10d      	bne.n	80146c0 <uxQueueSpacesAvailable+0x2e>
	__asm volatile
 80146a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146a8:	b672      	cpsid	i
 80146aa:	f383 8811 	msr	BASEPRI, r3
 80146ae:	f3bf 8f6f 	isb	sy
 80146b2:	f3bf 8f4f 	dsb	sy
 80146b6:	b662      	cpsie	i
 80146b8:	60fb      	str	r3, [r7, #12]
}
 80146ba:	bf00      	nop
 80146bc:	bf00      	nop
 80146be:	e7fd      	b.n	80146bc <uxQueueSpacesAvailable+0x2a>

	taskENTER_CRITICAL();
 80146c0:	f002 f9cc 	bl	8016a5c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80146cc:	1ad3      	subs	r3, r2, r3
 80146ce:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80146d0:	f002 f9fa 	bl	8016ac8 <vPortExitCritical>

	return uxReturn;
 80146d4:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80146d6:	4618      	mov	r0, r3
 80146d8:	3718      	adds	r7, #24
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}

080146de <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	b084      	sub	sp, #16
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d10d      	bne.n	801470c <vQueueDelete+0x2e>
	__asm volatile
 80146f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146f4:	b672      	cpsid	i
 80146f6:	f383 8811 	msr	BASEPRI, r3
 80146fa:	f3bf 8f6f 	isb	sy
 80146fe:	f3bf 8f4f 	dsb	sy
 8014702:	b662      	cpsie	i
 8014704:	60bb      	str	r3, [r7, #8]
}
 8014706:	bf00      	nop
 8014708:	bf00      	nop
 801470a:	e7fd      	b.n	8014708 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801470c:	68f8      	ldr	r0, [r7, #12]
 801470e:	f000 f95f 	bl	80149d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8014718:	2b00      	cmp	r3, #0
 801471a:	d102      	bne.n	8014722 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f002 fb99 	bl	8016e54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014722:	bf00      	nop
 8014724:	3710      	adds	r7, #16
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}

0801472a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801472a:	b480      	push	{r7}
 801472c:	b085      	sub	sp, #20
 801472e:	af00      	add	r7, sp, #0
 8014730:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014736:	2b00      	cmp	r3, #0
 8014738:	d006      	beq.n	8014748 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8014744:	60fb      	str	r3, [r7, #12]
 8014746:	e001      	b.n	801474c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014748:	2300      	movs	r3, #0
 801474a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801474c:	68fb      	ldr	r3, [r7, #12]
	}
 801474e:	4618      	mov	r0, r3
 8014750:	3714      	adds	r7, #20
 8014752:	46bd      	mov	sp, r7
 8014754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014758:	4770      	bx	lr

0801475a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801475a:	b580      	push	{r7, lr}
 801475c:	b086      	sub	sp, #24
 801475e:	af00      	add	r7, sp, #0
 8014760:	60f8      	str	r0, [r7, #12]
 8014762:	60b9      	str	r1, [r7, #8]
 8014764:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014766:	2300      	movs	r3, #0
 8014768:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801476e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014774:	2b00      	cmp	r3, #0
 8014776:	d10d      	bne.n	8014794 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d14d      	bne.n	801481c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	689b      	ldr	r3, [r3, #8]
 8014784:	4618      	mov	r0, r3
 8014786:	f001 f963 	bl	8015a50 <xTaskPriorityDisinherit>
 801478a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	2200      	movs	r2, #0
 8014790:	609a      	str	r2, [r3, #8]
 8014792:	e043      	b.n	801481c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d119      	bne.n	80147ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	6858      	ldr	r0, [r3, #4]
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147a2:	461a      	mov	r2, r3
 80147a4:	68b9      	ldr	r1, [r7, #8]
 80147a6:	f003 f800 	bl	80177aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	685a      	ldr	r2, [r3, #4]
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147b2:	441a      	add	r2, r3
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	685a      	ldr	r2, [r3, #4]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	689b      	ldr	r3, [r3, #8]
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d32b      	bcc.n	801481c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	605a      	str	r2, [r3, #4]
 80147cc:	e026      	b.n	801481c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	68d8      	ldr	r0, [r3, #12]
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147d6:	461a      	mov	r2, r3
 80147d8:	68b9      	ldr	r1, [r7, #8]
 80147da:	f002 ffe6 	bl	80177aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	68da      	ldr	r2, [r3, #12]
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147e6:	425b      	negs	r3, r3
 80147e8:	441a      	add	r2, r3
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	68da      	ldr	r2, [r3, #12]
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d207      	bcs.n	801480a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	689a      	ldr	r2, [r3, #8]
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014802:	425b      	negs	r3, r3
 8014804:	441a      	add	r2, r3
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2b02      	cmp	r3, #2
 801480e:	d105      	bne.n	801481c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d002      	beq.n	801481c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	3b01      	subs	r3, #1
 801481a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	1c5a      	adds	r2, r3, #1
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014824:	697b      	ldr	r3, [r7, #20]
}
 8014826:	4618      	mov	r0, r3
 8014828:	3718      	adds	r7, #24
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}

0801482e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801482e:	b580      	push	{r7, lr}
 8014830:	b082      	sub	sp, #8
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
 8014836:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801483c:	2b00      	cmp	r3, #0
 801483e:	d018      	beq.n	8014872 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	68da      	ldr	r2, [r3, #12]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014848:	441a      	add	r2, r3
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	68da      	ldr	r2, [r3, #12]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	689b      	ldr	r3, [r3, #8]
 8014856:	429a      	cmp	r2, r3
 8014858:	d303      	bcc.n	8014862 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681a      	ldr	r2, [r3, #0]
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	68d9      	ldr	r1, [r3, #12]
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801486a:	461a      	mov	r2, r3
 801486c:	6838      	ldr	r0, [r7, #0]
 801486e:	f002 ff9c 	bl	80177aa <memcpy>
	}
}
 8014872:	bf00      	nop
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}

0801487a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801487a:	b580      	push	{r7, lr}
 801487c:	b084      	sub	sp, #16
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014882:	f002 f8eb 	bl	8016a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801488c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801488e:	e011      	b.n	80148b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014894:	2b00      	cmp	r3, #0
 8014896:	d012      	beq.n	80148be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	3324      	adds	r3, #36	@ 0x24
 801489c:	4618      	mov	r0, r3
 801489e:	f000 fde1 	bl	8015464 <xTaskRemoveFromEventList>
 80148a2:	4603      	mov	r3, r0
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d001      	beq.n	80148ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80148a8:	f000 ff52 	bl	8015750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80148ac:	7bfb      	ldrb	r3, [r7, #15]
 80148ae:	3b01      	subs	r3, #1
 80148b0:	b2db      	uxtb	r3, r3
 80148b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	dce9      	bgt.n	8014890 <prvUnlockQueue+0x16>
 80148bc:	e000      	b.n	80148c0 <prvUnlockQueue+0x46>
					break;
 80148be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	22ff      	movs	r2, #255	@ 0xff
 80148c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80148c8:	f002 f8fe 	bl	8016ac8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80148cc:	f002 f8c6 	bl	8016a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80148d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148d8:	e011      	b.n	80148fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	691b      	ldr	r3, [r3, #16]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d012      	beq.n	8014908 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	3310      	adds	r3, #16
 80148e6:	4618      	mov	r0, r3
 80148e8:	f000 fdbc 	bl	8015464 <xTaskRemoveFromEventList>
 80148ec:	4603      	mov	r3, r0
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d001      	beq.n	80148f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80148f2:	f000 ff2d 	bl	8015750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80148f6:	7bbb      	ldrb	r3, [r7, #14]
 80148f8:	3b01      	subs	r3, #1
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014902:	2b00      	cmp	r3, #0
 8014904:	dce9      	bgt.n	80148da <prvUnlockQueue+0x60>
 8014906:	e000      	b.n	801490a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014908:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	22ff      	movs	r2, #255	@ 0xff
 801490e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014912:	f002 f8d9 	bl	8016ac8 <vPortExitCritical>
}
 8014916:	bf00      	nop
 8014918:	3710      	adds	r7, #16
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}

0801491e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801491e:	b580      	push	{r7, lr}
 8014920:	b084      	sub	sp, #16
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014926:	f002 f899 	bl	8016a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801492e:	2b00      	cmp	r3, #0
 8014930:	d102      	bne.n	8014938 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014932:	2301      	movs	r3, #1
 8014934:	60fb      	str	r3, [r7, #12]
 8014936:	e001      	b.n	801493c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014938:	2300      	movs	r3, #0
 801493a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801493c:	f002 f8c4 	bl	8016ac8 <vPortExitCritical>

	return xReturn;
 8014940:	68fb      	ldr	r3, [r7, #12]
}
 8014942:	4618      	mov	r0, r3
 8014944:	3710      	adds	r7, #16
 8014946:	46bd      	mov	sp, r7
 8014948:	bd80      	pop	{r7, pc}

0801494a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801494a:	b580      	push	{r7, lr}
 801494c:	b084      	sub	sp, #16
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014952:	f002 f883 	bl	8016a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801495e:	429a      	cmp	r2, r3
 8014960:	d102      	bne.n	8014968 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014962:	2301      	movs	r3, #1
 8014964:	60fb      	str	r3, [r7, #12]
 8014966:	e001      	b.n	801496c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014968:	2300      	movs	r3, #0
 801496a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801496c:	f002 f8ac 	bl	8016ac8 <vPortExitCritical>

	return xReturn;
 8014970:	68fb      	ldr	r3, [r7, #12]
}
 8014972:	4618      	mov	r0, r3
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
	...

0801497c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801497c:	b480      	push	{r7}
 801497e:	b085      	sub	sp, #20
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014986:	2300      	movs	r3, #0
 8014988:	60fb      	str	r3, [r7, #12]
 801498a:	e014      	b.n	80149b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801498c:	4a0f      	ldr	r2, [pc, #60]	@ (80149cc <vQueueAddToRegistry+0x50>)
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d10b      	bne.n	80149b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014998:	490c      	ldr	r1, [pc, #48]	@ (80149cc <vQueueAddToRegistry+0x50>)
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	683a      	ldr	r2, [r7, #0]
 801499e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80149a2:	4a0a      	ldr	r2, [pc, #40]	@ (80149cc <vQueueAddToRegistry+0x50>)
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	00db      	lsls	r3, r3, #3
 80149a8:	4413      	add	r3, r2
 80149aa:	687a      	ldr	r2, [r7, #4]
 80149ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80149ae:	e006      	b.n	80149be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	3301      	adds	r3, #1
 80149b4:	60fb      	str	r3, [r7, #12]
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2b07      	cmp	r3, #7
 80149ba:	d9e7      	bls.n	801498c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80149bc:	bf00      	nop
 80149be:	bf00      	nop
 80149c0:	3714      	adds	r7, #20
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop
 80149cc:	200053f0 	.word	0x200053f0

080149d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80149d0:	b480      	push	{r7}
 80149d2:	b085      	sub	sp, #20
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149d8:	2300      	movs	r3, #0
 80149da:	60fb      	str	r3, [r7, #12]
 80149dc:	e016      	b.n	8014a0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80149de:	4a10      	ldr	r2, [pc, #64]	@ (8014a20 <vQueueUnregisterQueue+0x50>)
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	00db      	lsls	r3, r3, #3
 80149e4:	4413      	add	r3, r2
 80149e6:	685b      	ldr	r3, [r3, #4]
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	429a      	cmp	r2, r3
 80149ec:	d10b      	bne.n	8014a06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80149ee:	4a0c      	ldr	r2, [pc, #48]	@ (8014a20 <vQueueUnregisterQueue+0x50>)
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2100      	movs	r1, #0
 80149f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80149f8:	4a09      	ldr	r2, [pc, #36]	@ (8014a20 <vQueueUnregisterQueue+0x50>)
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	00db      	lsls	r3, r3, #3
 80149fe:	4413      	add	r3, r2
 8014a00:	2200      	movs	r2, #0
 8014a02:	605a      	str	r2, [r3, #4]
				break;
 8014a04:	e006      	b.n	8014a14 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	60fb      	str	r3, [r7, #12]
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	2b07      	cmp	r3, #7
 8014a10:	d9e5      	bls.n	80149de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8014a12:	bf00      	nop
 8014a14:	bf00      	nop
 8014a16:	3714      	adds	r7, #20
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1e:	4770      	bx	lr
 8014a20:	200053f0 	.word	0x200053f0

08014a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b086      	sub	sp, #24
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	60f8      	str	r0, [r7, #12]
 8014a2c:	60b9      	str	r1, [r7, #8]
 8014a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014a34:	f002 f812 	bl	8016a5c <vPortEnterCritical>
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014a3e:	b25b      	sxtb	r3, r3
 8014a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a44:	d103      	bne.n	8014a4e <vQueueWaitForMessageRestricted+0x2a>
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014a54:	b25b      	sxtb	r3, r3
 8014a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a5a:	d103      	bne.n	8014a64 <vQueueWaitForMessageRestricted+0x40>
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	2200      	movs	r2, #0
 8014a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014a64:	f002 f830 	bl	8016ac8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014a68:	697b      	ldr	r3, [r7, #20]
 8014a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d106      	bne.n	8014a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	3324      	adds	r3, #36	@ 0x24
 8014a74:	687a      	ldr	r2, [r7, #4]
 8014a76:	68b9      	ldr	r1, [r7, #8]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f000 fcc5 	bl	8015408 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014a7e:	6978      	ldr	r0, [r7, #20]
 8014a80:	f7ff fefb 	bl	801487a <prvUnlockQueue>
	}
 8014a84:	bf00      	nop
 8014a86:	3718      	adds	r7, #24
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b08e      	sub	sp, #56	@ 0x38
 8014a90:	af04      	add	r7, sp, #16
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	60b9      	str	r1, [r7, #8]
 8014a96:	607a      	str	r2, [r7, #4]
 8014a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d10d      	bne.n	8014abc <xTaskCreateStatic+0x30>
	__asm volatile
 8014aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa4:	b672      	cpsid	i
 8014aa6:	f383 8811 	msr	BASEPRI, r3
 8014aaa:	f3bf 8f6f 	isb	sy
 8014aae:	f3bf 8f4f 	dsb	sy
 8014ab2:	b662      	cpsie	i
 8014ab4:	623b      	str	r3, [r7, #32]
}
 8014ab6:	bf00      	nop
 8014ab8:	bf00      	nop
 8014aba:	e7fd      	b.n	8014ab8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8014abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d10d      	bne.n	8014ade <xTaskCreateStatic+0x52>
	__asm volatile
 8014ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ac6:	b672      	cpsid	i
 8014ac8:	f383 8811 	msr	BASEPRI, r3
 8014acc:	f3bf 8f6f 	isb	sy
 8014ad0:	f3bf 8f4f 	dsb	sy
 8014ad4:	b662      	cpsie	i
 8014ad6:	61fb      	str	r3, [r7, #28]
}
 8014ad8:	bf00      	nop
 8014ada:	bf00      	nop
 8014adc:	e7fd      	b.n	8014ada <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014ade:	23a8      	movs	r3, #168	@ 0xa8
 8014ae0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014ae2:	693b      	ldr	r3, [r7, #16]
 8014ae4:	2ba8      	cmp	r3, #168	@ 0xa8
 8014ae6:	d00d      	beq.n	8014b04 <xTaskCreateStatic+0x78>
	__asm volatile
 8014ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aec:	b672      	cpsid	i
 8014aee:	f383 8811 	msr	BASEPRI, r3
 8014af2:	f3bf 8f6f 	isb	sy
 8014af6:	f3bf 8f4f 	dsb	sy
 8014afa:	b662      	cpsie	i
 8014afc:	61bb      	str	r3, [r7, #24]
}
 8014afe:	bf00      	nop
 8014b00:	bf00      	nop
 8014b02:	e7fd      	b.n	8014b00 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014b04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d01e      	beq.n	8014b4a <xTaskCreateStatic+0xbe>
 8014b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d01b      	beq.n	8014b4a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b1e:	2202      	movs	r2, #2
 8014b20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014b24:	2300      	movs	r3, #0
 8014b26:	9303      	str	r3, [sp, #12]
 8014b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b2a:	9302      	str	r3, [sp, #8]
 8014b2c:	f107 0314 	add.w	r3, r7, #20
 8014b30:	9301      	str	r3, [sp, #4]
 8014b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b34:	9300      	str	r3, [sp, #0]
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	68b9      	ldr	r1, [r7, #8]
 8014b3c:	68f8      	ldr	r0, [r7, #12]
 8014b3e:	f000 f851 	bl	8014be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b44:	f000 f8f8 	bl	8014d38 <prvAddNewTaskToReadyList>
 8014b48:	e001      	b.n	8014b4e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014b4e:	697b      	ldr	r3, [r7, #20]
	}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3728      	adds	r7, #40	@ 0x28
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}

08014b58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b08c      	sub	sp, #48	@ 0x30
 8014b5c:	af04      	add	r7, sp, #16
 8014b5e:	60f8      	str	r0, [r7, #12]
 8014b60:	60b9      	str	r1, [r7, #8]
 8014b62:	603b      	str	r3, [r7, #0]
 8014b64:	4613      	mov	r3, r2
 8014b66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014b68:	88fb      	ldrh	r3, [r7, #6]
 8014b6a:	009b      	lsls	r3, r3, #2
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f002 f8a3 	bl	8016cb8 <pvPortMalloc>
 8014b72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d00e      	beq.n	8014b98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014b7a:	20a8      	movs	r0, #168	@ 0xa8
 8014b7c:	f002 f89c 	bl	8016cb8 <pvPortMalloc>
 8014b80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014b82:	69fb      	ldr	r3, [r7, #28]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d003      	beq.n	8014b90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014b88:	69fb      	ldr	r3, [r7, #28]
 8014b8a:	697a      	ldr	r2, [r7, #20]
 8014b8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8014b8e:	e005      	b.n	8014b9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014b90:	6978      	ldr	r0, [r7, #20]
 8014b92:	f002 f95f 	bl	8016e54 <vPortFree>
 8014b96:	e001      	b.n	8014b9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d017      	beq.n	8014bd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014ba2:	69fb      	ldr	r3, [r7, #28]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014baa:	88fa      	ldrh	r2, [r7, #6]
 8014bac:	2300      	movs	r3, #0
 8014bae:	9303      	str	r3, [sp, #12]
 8014bb0:	69fb      	ldr	r3, [r7, #28]
 8014bb2:	9302      	str	r3, [sp, #8]
 8014bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bb6:	9301      	str	r3, [sp, #4]
 8014bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bba:	9300      	str	r3, [sp, #0]
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	68b9      	ldr	r1, [r7, #8]
 8014bc0:	68f8      	ldr	r0, [r7, #12]
 8014bc2:	f000 f80f 	bl	8014be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014bc6:	69f8      	ldr	r0, [r7, #28]
 8014bc8:	f000 f8b6 	bl	8014d38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014bcc:	2301      	movs	r3, #1
 8014bce:	61bb      	str	r3, [r7, #24]
 8014bd0:	e002      	b.n	8014bd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014bd8:	69bb      	ldr	r3, [r7, #24]
	}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	3720      	adds	r7, #32
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}
	...

08014be4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b088      	sub	sp, #32
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	60b9      	str	r1, [r7, #8]
 8014bee:	607a      	str	r2, [r7, #4]
 8014bf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	009b      	lsls	r3, r3, #2
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	21a5      	movs	r1, #165	@ 0xa5
 8014bfe:	f002 fcf9 	bl	80175f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014c06:	6879      	ldr	r1, [r7, #4]
 8014c08:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014c0c:	440b      	add	r3, r1
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	4413      	add	r3, r2
 8014c12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	f023 0307 	bic.w	r3, r3, #7
 8014c1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014c1c:	69bb      	ldr	r3, [r7, #24]
 8014c1e:	f003 0307 	and.w	r3, r3, #7
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d00d      	beq.n	8014c42 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8014c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c2a:	b672      	cpsid	i
 8014c2c:	f383 8811 	msr	BASEPRI, r3
 8014c30:	f3bf 8f6f 	isb	sy
 8014c34:	f3bf 8f4f 	dsb	sy
 8014c38:	b662      	cpsie	i
 8014c3a:	617b      	str	r3, [r7, #20]
}
 8014c3c:	bf00      	nop
 8014c3e:	bf00      	nop
 8014c40:	e7fd      	b.n	8014c3e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d01f      	beq.n	8014c88 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014c48:	2300      	movs	r3, #0
 8014c4a:	61fb      	str	r3, [r7, #28]
 8014c4c:	e012      	b.n	8014c74 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014c4e:	68ba      	ldr	r2, [r7, #8]
 8014c50:	69fb      	ldr	r3, [r7, #28]
 8014c52:	4413      	add	r3, r2
 8014c54:	7819      	ldrb	r1, [r3, #0]
 8014c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c58:	69fb      	ldr	r3, [r7, #28]
 8014c5a:	4413      	add	r3, r2
 8014c5c:	3334      	adds	r3, #52	@ 0x34
 8014c5e:	460a      	mov	r2, r1
 8014c60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014c62:	68ba      	ldr	r2, [r7, #8]
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	4413      	add	r3, r2
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d006      	beq.n	8014c7c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014c6e:	69fb      	ldr	r3, [r7, #28]
 8014c70:	3301      	adds	r3, #1
 8014c72:	61fb      	str	r3, [r7, #28]
 8014c74:	69fb      	ldr	r3, [r7, #28]
 8014c76:	2b0f      	cmp	r3, #15
 8014c78:	d9e9      	bls.n	8014c4e <prvInitialiseNewTask+0x6a>
 8014c7a:	e000      	b.n	8014c7e <prvInitialiseNewTask+0x9a>
			{
				break;
 8014c7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c80:	2200      	movs	r2, #0
 8014c82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014c86:	e003      	b.n	8014c90 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c92:	2b37      	cmp	r3, #55	@ 0x37
 8014c94:	d901      	bls.n	8014c9a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014c96:	2337      	movs	r3, #55	@ 0x37
 8014c98:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ca8:	2200      	movs	r2, #0
 8014caa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cae:	3304      	adds	r3, #4
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fe ff02 	bl	8013aba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb8:	3318      	adds	r3, #24
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fe fefd 	bl	8013aba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014cc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014cd4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cd8:	2200      	movs	r2, #0
 8014cda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce8:	3354      	adds	r3, #84	@ 0x54
 8014cea:	224c      	movs	r2, #76	@ 0x4c
 8014cec:	2100      	movs	r1, #0
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f002 fc80 	bl	80175f4 <memset>
 8014cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8014d2c <prvInitialiseNewTask+0x148>)
 8014cf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8014cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8014d30 <prvInitialiseNewTask+0x14c>)
 8014cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d02:	4a0c      	ldr	r2, [pc, #48]	@ (8014d34 <prvInitialiseNewTask+0x150>)
 8014d04:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014d06:	683a      	ldr	r2, [r7, #0]
 8014d08:	68f9      	ldr	r1, [r7, #12]
 8014d0a:	69b8      	ldr	r0, [r7, #24]
 8014d0c:	f001 fd9a 	bl	8016844 <pxPortInitialiseStack>
 8014d10:	4602      	mov	r2, r0
 8014d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d002      	beq.n	8014d22 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014d22:	bf00      	nop
 8014d24:	3720      	adds	r7, #32
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	2000967c 	.word	0x2000967c
 8014d30:	200096e4 	.word	0x200096e4
 8014d34:	2000974c 	.word	0x2000974c

08014d38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014d40:	f001 fe8c 	bl	8016a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014d44:	4b2d      	ldr	r3, [pc, #180]	@ (8014dfc <prvAddNewTaskToReadyList+0xc4>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	3301      	adds	r3, #1
 8014d4a:	4a2c      	ldr	r2, [pc, #176]	@ (8014dfc <prvAddNewTaskToReadyList+0xc4>)
 8014d4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8014e00 <prvAddNewTaskToReadyList+0xc8>)
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d109      	bne.n	8014d6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014d56:	4a2a      	ldr	r2, [pc, #168]	@ (8014e00 <prvAddNewTaskToReadyList+0xc8>)
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014d5c:	4b27      	ldr	r3, [pc, #156]	@ (8014dfc <prvAddNewTaskToReadyList+0xc4>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d110      	bne.n	8014d86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014d64:	f000 fd18 	bl	8015798 <prvInitialiseTaskLists>
 8014d68:	e00d      	b.n	8014d86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014d6a:	4b26      	ldr	r3, [pc, #152]	@ (8014e04 <prvAddNewTaskToReadyList+0xcc>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d109      	bne.n	8014d86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014d72:	4b23      	ldr	r3, [pc, #140]	@ (8014e00 <prvAddNewTaskToReadyList+0xc8>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d802      	bhi.n	8014d86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014d80:	4a1f      	ldr	r2, [pc, #124]	@ (8014e00 <prvAddNewTaskToReadyList+0xc8>)
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014d86:	4b20      	ldr	r3, [pc, #128]	@ (8014e08 <prvAddNewTaskToReadyList+0xd0>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	3301      	adds	r3, #1
 8014d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8014e08 <prvAddNewTaskToReadyList+0xd0>)
 8014d8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014d90:	4b1d      	ldr	r3, [pc, #116]	@ (8014e08 <prvAddNewTaskToReadyList+0xd0>)
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8014e0c <prvAddNewTaskToReadyList+0xd4>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d903      	bls.n	8014dac <prvAddNewTaskToReadyList+0x74>
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014da8:	4a18      	ldr	r2, [pc, #96]	@ (8014e0c <prvAddNewTaskToReadyList+0xd4>)
 8014daa:	6013      	str	r3, [r2, #0]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014db0:	4613      	mov	r3, r2
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	4413      	add	r3, r2
 8014db6:	009b      	lsls	r3, r3, #2
 8014db8:	4a15      	ldr	r2, [pc, #84]	@ (8014e10 <prvAddNewTaskToReadyList+0xd8>)
 8014dba:	441a      	add	r2, r3
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	3304      	adds	r3, #4
 8014dc0:	4619      	mov	r1, r3
 8014dc2:	4610      	mov	r0, r2
 8014dc4:	f7fe fe86 	bl	8013ad4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014dc8:	f001 fe7e 	bl	8016ac8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8014e04 <prvAddNewTaskToReadyList+0xcc>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d00e      	beq.n	8014df2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8014e00 <prvAddNewTaskToReadyList+0xc8>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d207      	bcs.n	8014df2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014de2:	4b0c      	ldr	r3, [pc, #48]	@ (8014e14 <prvAddNewTaskToReadyList+0xdc>)
 8014de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014de8:	601a      	str	r2, [r3, #0]
 8014dea:	f3bf 8f4f 	dsb	sy
 8014dee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014df2:	bf00      	nop
 8014df4:	3708      	adds	r7, #8
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	20005904 	.word	0x20005904
 8014e00:	20005430 	.word	0x20005430
 8014e04:	20005910 	.word	0x20005910
 8014e08:	20005920 	.word	0x20005920
 8014e0c:	2000590c 	.word	0x2000590c
 8014e10:	20005434 	.word	0x20005434
 8014e14:	e000ed04 	.word	0xe000ed04

08014e18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b084      	sub	sp, #16
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014e20:	2300      	movs	r3, #0
 8014e22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d01a      	beq.n	8014e60 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014e2a:	4b15      	ldr	r3, [pc, #84]	@ (8014e80 <vTaskDelay+0x68>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d00d      	beq.n	8014e4e <vTaskDelay+0x36>
	__asm volatile
 8014e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e36:	b672      	cpsid	i
 8014e38:	f383 8811 	msr	BASEPRI, r3
 8014e3c:	f3bf 8f6f 	isb	sy
 8014e40:	f3bf 8f4f 	dsb	sy
 8014e44:	b662      	cpsie	i
 8014e46:	60bb      	str	r3, [r7, #8]
}
 8014e48:	bf00      	nop
 8014e4a:	bf00      	nop
 8014e4c:	e7fd      	b.n	8014e4a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8014e4e:	f000 f88f 	bl	8014f70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014e52:	2100      	movs	r1, #0
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f001 f939 	bl	80160cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014e5a:	f000 f897 	bl	8014f8c <xTaskResumeAll>
 8014e5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d107      	bne.n	8014e76 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8014e66:	4b07      	ldr	r3, [pc, #28]	@ (8014e84 <vTaskDelay+0x6c>)
 8014e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e6c:	601a      	str	r2, [r3, #0]
 8014e6e:	f3bf 8f4f 	dsb	sy
 8014e72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014e76:	bf00      	nop
 8014e78:	3710      	adds	r7, #16
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	2000592c 	.word	0x2000592c
 8014e84:	e000ed04 	.word	0xe000ed04

08014e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b08a      	sub	sp, #40	@ 0x28
 8014e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014e92:	2300      	movs	r3, #0
 8014e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014e96:	463a      	mov	r2, r7
 8014e98:	1d39      	adds	r1, r7, #4
 8014e9a:	f107 0308 	add.w	r3, r7, #8
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7fe fb9c 	bl	80135dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014ea4:	6839      	ldr	r1, [r7, #0]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	68ba      	ldr	r2, [r7, #8]
 8014eaa:	9202      	str	r2, [sp, #8]
 8014eac:	9301      	str	r3, [sp, #4]
 8014eae:	2300      	movs	r3, #0
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	460a      	mov	r2, r1
 8014eb6:	4926      	ldr	r1, [pc, #152]	@ (8014f50 <vTaskStartScheduler+0xc8>)
 8014eb8:	4826      	ldr	r0, [pc, #152]	@ (8014f54 <vTaskStartScheduler+0xcc>)
 8014eba:	f7ff fde7 	bl	8014a8c <xTaskCreateStatic>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	4a25      	ldr	r2, [pc, #148]	@ (8014f58 <vTaskStartScheduler+0xd0>)
 8014ec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014ec4:	4b24      	ldr	r3, [pc, #144]	@ (8014f58 <vTaskStartScheduler+0xd0>)
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d002      	beq.n	8014ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014ecc:	2301      	movs	r3, #1
 8014ece:	617b      	str	r3, [r7, #20]
 8014ed0:	e001      	b.n	8014ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	d102      	bne.n	8014ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014edc:	f001 f94a 	bl	8016174 <xTimerCreateTimerTask>
 8014ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	2b01      	cmp	r3, #1
 8014ee6:	d11d      	bne.n	8014f24 <vTaskStartScheduler+0x9c>
	__asm volatile
 8014ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014eec:	b672      	cpsid	i
 8014eee:	f383 8811 	msr	BASEPRI, r3
 8014ef2:	f3bf 8f6f 	isb	sy
 8014ef6:	f3bf 8f4f 	dsb	sy
 8014efa:	b662      	cpsie	i
 8014efc:	613b      	str	r3, [r7, #16]
}
 8014efe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014f00:	4b16      	ldr	r3, [pc, #88]	@ (8014f5c <vTaskStartScheduler+0xd4>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	3354      	adds	r3, #84	@ 0x54
 8014f06:	4a16      	ldr	r2, [pc, #88]	@ (8014f60 <vTaskStartScheduler+0xd8>)
 8014f08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014f0a:	4b16      	ldr	r3, [pc, #88]	@ (8014f64 <vTaskStartScheduler+0xdc>)
 8014f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8014f10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014f12:	4b15      	ldr	r3, [pc, #84]	@ (8014f68 <vTaskStartScheduler+0xe0>)
 8014f14:	2201      	movs	r2, #1
 8014f16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014f18:	4b14      	ldr	r3, [pc, #80]	@ (8014f6c <vTaskStartScheduler+0xe4>)
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014f1e:	f001 fd1f 	bl	8016960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014f22:	e011      	b.n	8014f48 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f2a:	d10d      	bne.n	8014f48 <vTaskStartScheduler+0xc0>
	__asm volatile
 8014f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f30:	b672      	cpsid	i
 8014f32:	f383 8811 	msr	BASEPRI, r3
 8014f36:	f3bf 8f6f 	isb	sy
 8014f3a:	f3bf 8f4f 	dsb	sy
 8014f3e:	b662      	cpsie	i
 8014f40:	60fb      	str	r3, [r7, #12]
}
 8014f42:	bf00      	nop
 8014f44:	bf00      	nop
 8014f46:	e7fd      	b.n	8014f44 <vTaskStartScheduler+0xbc>
}
 8014f48:	bf00      	nop
 8014f4a:	3718      	adds	r7, #24
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	08018840 	.word	0x08018840
 8014f54:	08015769 	.word	0x08015769
 8014f58:	20005928 	.word	0x20005928
 8014f5c:	20005430 	.word	0x20005430
 8014f60:	2000002c 	.word	0x2000002c
 8014f64:	20005924 	.word	0x20005924
 8014f68:	20005910 	.word	0x20005910
 8014f6c:	20005908 	.word	0x20005908

08014f70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014f70:	b480      	push	{r7}
 8014f72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8014f74:	4b04      	ldr	r3, [pc, #16]	@ (8014f88 <vTaskSuspendAll+0x18>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	4a03      	ldr	r2, [pc, #12]	@ (8014f88 <vTaskSuspendAll+0x18>)
 8014f7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8014f7e:	bf00      	nop
 8014f80:	46bd      	mov	sp, r7
 8014f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f86:	4770      	bx	lr
 8014f88:	2000592c 	.word	0x2000592c

08014f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b084      	sub	sp, #16
 8014f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014f92:	2300      	movs	r3, #0
 8014f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014f96:	2300      	movs	r3, #0
 8014f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014f9a:	4b43      	ldr	r3, [pc, #268]	@ (80150a8 <xTaskResumeAll+0x11c>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d10d      	bne.n	8014fbe <xTaskResumeAll+0x32>
	__asm volatile
 8014fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fa6:	b672      	cpsid	i
 8014fa8:	f383 8811 	msr	BASEPRI, r3
 8014fac:	f3bf 8f6f 	isb	sy
 8014fb0:	f3bf 8f4f 	dsb	sy
 8014fb4:	b662      	cpsie	i
 8014fb6:	603b      	str	r3, [r7, #0]
}
 8014fb8:	bf00      	nop
 8014fba:	bf00      	nop
 8014fbc:	e7fd      	b.n	8014fba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014fbe:	f001 fd4d 	bl	8016a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014fc2:	4b39      	ldr	r3, [pc, #228]	@ (80150a8 <xTaskResumeAll+0x11c>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	3b01      	subs	r3, #1
 8014fc8:	4a37      	ldr	r2, [pc, #220]	@ (80150a8 <xTaskResumeAll+0x11c>)
 8014fca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014fcc:	4b36      	ldr	r3, [pc, #216]	@ (80150a8 <xTaskResumeAll+0x11c>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d162      	bne.n	801509a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014fd4:	4b35      	ldr	r3, [pc, #212]	@ (80150ac <xTaskResumeAll+0x120>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d05e      	beq.n	801509a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014fdc:	e02f      	b.n	801503e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fde:	4b34      	ldr	r3, [pc, #208]	@ (80150b0 <xTaskResumeAll+0x124>)
 8014fe0:	68db      	ldr	r3, [r3, #12]
 8014fe2:	68db      	ldr	r3, [r3, #12]
 8014fe4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	3318      	adds	r3, #24
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7fe fdcf 	bl	8013b8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	3304      	adds	r3, #4
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7fe fdca 	bl	8013b8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80150b4 <xTaskResumeAll+0x128>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	429a      	cmp	r2, r3
 8015004:	d903      	bls.n	801500e <xTaskResumeAll+0x82>
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801500a:	4a2a      	ldr	r2, [pc, #168]	@ (80150b4 <xTaskResumeAll+0x128>)
 801500c:	6013      	str	r3, [r2, #0]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015012:	4613      	mov	r3, r2
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	4413      	add	r3, r2
 8015018:	009b      	lsls	r3, r3, #2
 801501a:	4a27      	ldr	r2, [pc, #156]	@ (80150b8 <xTaskResumeAll+0x12c>)
 801501c:	441a      	add	r2, r3
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	3304      	adds	r3, #4
 8015022:	4619      	mov	r1, r3
 8015024:	4610      	mov	r0, r2
 8015026:	f7fe fd55 	bl	8013ad4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801502e:	4b23      	ldr	r3, [pc, #140]	@ (80150bc <xTaskResumeAll+0x130>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015034:	429a      	cmp	r2, r3
 8015036:	d302      	bcc.n	801503e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8015038:	4b21      	ldr	r3, [pc, #132]	@ (80150c0 <xTaskResumeAll+0x134>)
 801503a:	2201      	movs	r2, #1
 801503c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801503e:	4b1c      	ldr	r3, [pc, #112]	@ (80150b0 <xTaskResumeAll+0x124>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d1cb      	bne.n	8014fde <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d001      	beq.n	8015050 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801504c:	f000 fc4a 	bl	80158e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015050:	4b1c      	ldr	r3, [pc, #112]	@ (80150c4 <xTaskResumeAll+0x138>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d010      	beq.n	801507e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801505c:	f000 f846 	bl	80150ec <xTaskIncrementTick>
 8015060:	4603      	mov	r3, r0
 8015062:	2b00      	cmp	r3, #0
 8015064:	d002      	beq.n	801506c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8015066:	4b16      	ldr	r3, [pc, #88]	@ (80150c0 <xTaskResumeAll+0x134>)
 8015068:	2201      	movs	r2, #1
 801506a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	3b01      	subs	r3, #1
 8015070:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d1f1      	bne.n	801505c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8015078:	4b12      	ldr	r3, [pc, #72]	@ (80150c4 <xTaskResumeAll+0x138>)
 801507a:	2200      	movs	r2, #0
 801507c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801507e:	4b10      	ldr	r3, [pc, #64]	@ (80150c0 <xTaskResumeAll+0x134>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d009      	beq.n	801509a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015086:	2301      	movs	r3, #1
 8015088:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801508a:	4b0f      	ldr	r3, [pc, #60]	@ (80150c8 <xTaskResumeAll+0x13c>)
 801508c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015090:	601a      	str	r2, [r3, #0]
 8015092:	f3bf 8f4f 	dsb	sy
 8015096:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801509a:	f001 fd15 	bl	8016ac8 <vPortExitCritical>

	return xAlreadyYielded;
 801509e:	68bb      	ldr	r3, [r7, #8]
}
 80150a0:	4618      	mov	r0, r3
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	2000592c 	.word	0x2000592c
 80150ac:	20005904 	.word	0x20005904
 80150b0:	200058c4 	.word	0x200058c4
 80150b4:	2000590c 	.word	0x2000590c
 80150b8:	20005434 	.word	0x20005434
 80150bc:	20005430 	.word	0x20005430
 80150c0:	20005918 	.word	0x20005918
 80150c4:	20005914 	.word	0x20005914
 80150c8:	e000ed04 	.word	0xe000ed04

080150cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80150cc:	b480      	push	{r7}
 80150ce:	b083      	sub	sp, #12
 80150d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80150d2:	4b05      	ldr	r3, [pc, #20]	@ (80150e8 <xTaskGetTickCount+0x1c>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80150d8:	687b      	ldr	r3, [r7, #4]
}
 80150da:	4618      	mov	r0, r3
 80150dc:	370c      	adds	r7, #12
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	20005908 	.word	0x20005908

080150ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b086      	sub	sp, #24
 80150f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80150f2:	2300      	movs	r3, #0
 80150f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150f6:	4b50      	ldr	r3, [pc, #320]	@ (8015238 <xTaskIncrementTick+0x14c>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	f040 808c 	bne.w	8015218 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015100:	4b4e      	ldr	r3, [pc, #312]	@ (801523c <xTaskIncrementTick+0x150>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	3301      	adds	r3, #1
 8015106:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015108:	4a4c      	ldr	r2, [pc, #304]	@ (801523c <xTaskIncrementTick+0x150>)
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d123      	bne.n	801515c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8015114:	4b4a      	ldr	r3, [pc, #296]	@ (8015240 <xTaskIncrementTick+0x154>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d00d      	beq.n	801513a <xTaskIncrementTick+0x4e>
	__asm volatile
 801511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015122:	b672      	cpsid	i
 8015124:	f383 8811 	msr	BASEPRI, r3
 8015128:	f3bf 8f6f 	isb	sy
 801512c:	f3bf 8f4f 	dsb	sy
 8015130:	b662      	cpsie	i
 8015132:	603b      	str	r3, [r7, #0]
}
 8015134:	bf00      	nop
 8015136:	bf00      	nop
 8015138:	e7fd      	b.n	8015136 <xTaskIncrementTick+0x4a>
 801513a:	4b41      	ldr	r3, [pc, #260]	@ (8015240 <xTaskIncrementTick+0x154>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	60fb      	str	r3, [r7, #12]
 8015140:	4b40      	ldr	r3, [pc, #256]	@ (8015244 <xTaskIncrementTick+0x158>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	4a3e      	ldr	r2, [pc, #248]	@ (8015240 <xTaskIncrementTick+0x154>)
 8015146:	6013      	str	r3, [r2, #0]
 8015148:	4a3e      	ldr	r2, [pc, #248]	@ (8015244 <xTaskIncrementTick+0x158>)
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6013      	str	r3, [r2, #0]
 801514e:	4b3e      	ldr	r3, [pc, #248]	@ (8015248 <xTaskIncrementTick+0x15c>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	3301      	adds	r3, #1
 8015154:	4a3c      	ldr	r2, [pc, #240]	@ (8015248 <xTaskIncrementTick+0x15c>)
 8015156:	6013      	str	r3, [r2, #0]
 8015158:	f000 fbc4 	bl	80158e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801515c:	4b3b      	ldr	r3, [pc, #236]	@ (801524c <xTaskIncrementTick+0x160>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	693a      	ldr	r2, [r7, #16]
 8015162:	429a      	cmp	r2, r3
 8015164:	d349      	bcc.n	80151fa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015166:	4b36      	ldr	r3, [pc, #216]	@ (8015240 <xTaskIncrementTick+0x154>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d104      	bne.n	801517a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015170:	4b36      	ldr	r3, [pc, #216]	@ (801524c <xTaskIncrementTick+0x160>)
 8015172:	f04f 32ff 	mov.w	r2, #4294967295
 8015176:	601a      	str	r2, [r3, #0]
					break;
 8015178:	e03f      	b.n	80151fa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801517a:	4b31      	ldr	r3, [pc, #196]	@ (8015240 <xTaskIncrementTick+0x154>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	68db      	ldr	r3, [r3, #12]
 8015180:	68db      	ldr	r3, [r3, #12]
 8015182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015184:	68bb      	ldr	r3, [r7, #8]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801518a:	693a      	ldr	r2, [r7, #16]
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	429a      	cmp	r2, r3
 8015190:	d203      	bcs.n	801519a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015192:	4a2e      	ldr	r2, [pc, #184]	@ (801524c <xTaskIncrementTick+0x160>)
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015198:	e02f      	b.n	80151fa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	3304      	adds	r3, #4
 801519e:	4618      	mov	r0, r3
 80151a0:	f7fe fcf5 	bl	8013b8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d004      	beq.n	80151b6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	3318      	adds	r3, #24
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7fe fcec 	bl	8013b8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151ba:	4b25      	ldr	r3, [pc, #148]	@ (8015250 <xTaskIncrementTick+0x164>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d903      	bls.n	80151ca <xTaskIncrementTick+0xde>
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151c6:	4a22      	ldr	r2, [pc, #136]	@ (8015250 <xTaskIncrementTick+0x164>)
 80151c8:	6013      	str	r3, [r2, #0]
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151ce:	4613      	mov	r3, r2
 80151d0:	009b      	lsls	r3, r3, #2
 80151d2:	4413      	add	r3, r2
 80151d4:	009b      	lsls	r3, r3, #2
 80151d6:	4a1f      	ldr	r2, [pc, #124]	@ (8015254 <xTaskIncrementTick+0x168>)
 80151d8:	441a      	add	r2, r3
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	3304      	adds	r3, #4
 80151de:	4619      	mov	r1, r3
 80151e0:	4610      	mov	r0, r2
 80151e2:	f7fe fc77 	bl	8013ad4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151ea:	4b1b      	ldr	r3, [pc, #108]	@ (8015258 <xTaskIncrementTick+0x16c>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d3b8      	bcc.n	8015166 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80151f4:	2301      	movs	r3, #1
 80151f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80151f8:	e7b5      	b.n	8015166 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80151fa:	4b17      	ldr	r3, [pc, #92]	@ (8015258 <xTaskIncrementTick+0x16c>)
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015200:	4914      	ldr	r1, [pc, #80]	@ (8015254 <xTaskIncrementTick+0x168>)
 8015202:	4613      	mov	r3, r2
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	4413      	add	r3, r2
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	440b      	add	r3, r1
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	2b01      	cmp	r3, #1
 8015210:	d907      	bls.n	8015222 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8015212:	2301      	movs	r3, #1
 8015214:	617b      	str	r3, [r7, #20]
 8015216:	e004      	b.n	8015222 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015218:	4b10      	ldr	r3, [pc, #64]	@ (801525c <xTaskIncrementTick+0x170>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	3301      	adds	r3, #1
 801521e:	4a0f      	ldr	r2, [pc, #60]	@ (801525c <xTaskIncrementTick+0x170>)
 8015220:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015222:	4b0f      	ldr	r3, [pc, #60]	@ (8015260 <xTaskIncrementTick+0x174>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d001      	beq.n	801522e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 801522a:	2301      	movs	r3, #1
 801522c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801522e:	697b      	ldr	r3, [r7, #20]
}
 8015230:	4618      	mov	r0, r3
 8015232:	3718      	adds	r7, #24
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	2000592c 	.word	0x2000592c
 801523c:	20005908 	.word	0x20005908
 8015240:	200058bc 	.word	0x200058bc
 8015244:	200058c0 	.word	0x200058c0
 8015248:	2000591c 	.word	0x2000591c
 801524c:	20005924 	.word	0x20005924
 8015250:	2000590c 	.word	0x2000590c
 8015254:	20005434 	.word	0x20005434
 8015258:	20005430 	.word	0x20005430
 801525c:	20005914 	.word	0x20005914
 8015260:	20005918 	.word	0x20005918

08015264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015264:	b480      	push	{r7}
 8015266:	b085      	sub	sp, #20
 8015268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801526a:	4b2c      	ldr	r3, [pc, #176]	@ (801531c <vTaskSwitchContext+0xb8>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d003      	beq.n	801527a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015272:	4b2b      	ldr	r3, [pc, #172]	@ (8015320 <vTaskSwitchContext+0xbc>)
 8015274:	2201      	movs	r2, #1
 8015276:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015278:	e049      	b.n	801530e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 801527a:	4b29      	ldr	r3, [pc, #164]	@ (8015320 <vTaskSwitchContext+0xbc>)
 801527c:	2200      	movs	r2, #0
 801527e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015280:	4b28      	ldr	r3, [pc, #160]	@ (8015324 <vTaskSwitchContext+0xc0>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	60fb      	str	r3, [r7, #12]
 8015286:	e013      	b.n	80152b0 <vTaskSwitchContext+0x4c>
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d10d      	bne.n	80152aa <vTaskSwitchContext+0x46>
	__asm volatile
 801528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015292:	b672      	cpsid	i
 8015294:	f383 8811 	msr	BASEPRI, r3
 8015298:	f3bf 8f6f 	isb	sy
 801529c:	f3bf 8f4f 	dsb	sy
 80152a0:	b662      	cpsie	i
 80152a2:	607b      	str	r3, [r7, #4]
}
 80152a4:	bf00      	nop
 80152a6:	bf00      	nop
 80152a8:	e7fd      	b.n	80152a6 <vTaskSwitchContext+0x42>
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	3b01      	subs	r3, #1
 80152ae:	60fb      	str	r3, [r7, #12]
 80152b0:	491d      	ldr	r1, [pc, #116]	@ (8015328 <vTaskSwitchContext+0xc4>)
 80152b2:	68fa      	ldr	r2, [r7, #12]
 80152b4:	4613      	mov	r3, r2
 80152b6:	009b      	lsls	r3, r3, #2
 80152b8:	4413      	add	r3, r2
 80152ba:	009b      	lsls	r3, r3, #2
 80152bc:	440b      	add	r3, r1
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d0e1      	beq.n	8015288 <vTaskSwitchContext+0x24>
 80152c4:	68fa      	ldr	r2, [r7, #12]
 80152c6:	4613      	mov	r3, r2
 80152c8:	009b      	lsls	r3, r3, #2
 80152ca:	4413      	add	r3, r2
 80152cc:	009b      	lsls	r3, r3, #2
 80152ce:	4a16      	ldr	r2, [pc, #88]	@ (8015328 <vTaskSwitchContext+0xc4>)
 80152d0:	4413      	add	r3, r2
 80152d2:	60bb      	str	r3, [r7, #8]
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	685a      	ldr	r2, [r3, #4]
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	605a      	str	r2, [r3, #4]
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	685a      	ldr	r2, [r3, #4]
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	3308      	adds	r3, #8
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d104      	bne.n	80152f4 <vTaskSwitchContext+0x90>
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	685a      	ldr	r2, [r3, #4]
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	605a      	str	r2, [r3, #4]
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	685b      	ldr	r3, [r3, #4]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	4a0c      	ldr	r2, [pc, #48]	@ (801532c <vTaskSwitchContext+0xc8>)
 80152fc:	6013      	str	r3, [r2, #0]
 80152fe:	4a09      	ldr	r2, [pc, #36]	@ (8015324 <vTaskSwitchContext+0xc0>)
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015304:	4b09      	ldr	r3, [pc, #36]	@ (801532c <vTaskSwitchContext+0xc8>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	3354      	adds	r3, #84	@ 0x54
 801530a:	4a09      	ldr	r2, [pc, #36]	@ (8015330 <vTaskSwitchContext+0xcc>)
 801530c:	6013      	str	r3, [r2, #0]
}
 801530e:	bf00      	nop
 8015310:	3714      	adds	r7, #20
 8015312:	46bd      	mov	sp, r7
 8015314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	2000592c 	.word	0x2000592c
 8015320:	20005918 	.word	0x20005918
 8015324:	2000590c 	.word	0x2000590c
 8015328:	20005434 	.word	0x20005434
 801532c:	20005430 	.word	0x20005430
 8015330:	2000002c 	.word	0x2000002c

08015334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b084      	sub	sp, #16
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d10d      	bne.n	8015360 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8015344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015348:	b672      	cpsid	i
 801534a:	f383 8811 	msr	BASEPRI, r3
 801534e:	f3bf 8f6f 	isb	sy
 8015352:	f3bf 8f4f 	dsb	sy
 8015356:	b662      	cpsie	i
 8015358:	60fb      	str	r3, [r7, #12]
}
 801535a:	bf00      	nop
 801535c:	bf00      	nop
 801535e:	e7fd      	b.n	801535c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015360:	4b07      	ldr	r3, [pc, #28]	@ (8015380 <vTaskPlaceOnEventList+0x4c>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	3318      	adds	r3, #24
 8015366:	4619      	mov	r1, r3
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	f7fe fbd7 	bl	8013b1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801536e:	2101      	movs	r1, #1
 8015370:	6838      	ldr	r0, [r7, #0]
 8015372:	f000 feab 	bl	80160cc <prvAddCurrentTaskToDelayedList>
}
 8015376:	bf00      	nop
 8015378:	3710      	adds	r7, #16
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
 801537e:	bf00      	nop
 8015380:	20005430 	.word	0x20005430

08015384 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015384:	b580      	push	{r7, lr}
 8015386:	b086      	sub	sp, #24
 8015388:	af00      	add	r7, sp, #0
 801538a:	60f8      	str	r0, [r7, #12]
 801538c:	60b9      	str	r1, [r7, #8]
 801538e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d10d      	bne.n	80153b2 <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 8015396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801539a:	b672      	cpsid	i
 801539c:	f383 8811 	msr	BASEPRI, r3
 80153a0:	f3bf 8f6f 	isb	sy
 80153a4:	f3bf 8f4f 	dsb	sy
 80153a8:	b662      	cpsie	i
 80153aa:	617b      	str	r3, [r7, #20]
}
 80153ac:	bf00      	nop
 80153ae:	bf00      	nop
 80153b0:	e7fd      	b.n	80153ae <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80153b2:	4b13      	ldr	r3, [pc, #76]	@ (8015400 <vTaskPlaceOnUnorderedEventList+0x7c>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d10d      	bne.n	80153d6 <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 80153ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153be:	b672      	cpsid	i
 80153c0:	f383 8811 	msr	BASEPRI, r3
 80153c4:	f3bf 8f6f 	isb	sy
 80153c8:	f3bf 8f4f 	dsb	sy
 80153cc:	b662      	cpsie	i
 80153ce:	613b      	str	r3, [r7, #16]
}
 80153d0:	bf00      	nop
 80153d2:	bf00      	nop
 80153d4:	e7fd      	b.n	80153d2 <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80153d6:	4b0b      	ldr	r3, [pc, #44]	@ (8015404 <vTaskPlaceOnUnorderedEventList+0x80>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	68ba      	ldr	r2, [r7, #8]
 80153dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80153e0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80153e2:	4b08      	ldr	r3, [pc, #32]	@ (8015404 <vTaskPlaceOnUnorderedEventList+0x80>)
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	3318      	adds	r3, #24
 80153e8:	4619      	mov	r1, r3
 80153ea:	68f8      	ldr	r0, [r7, #12]
 80153ec:	f7fe fb72 	bl	8013ad4 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80153f0:	2101      	movs	r1, #1
 80153f2:	6878      	ldr	r0, [r7, #4]
 80153f4:	f000 fe6a 	bl	80160cc <prvAddCurrentTaskToDelayedList>
}
 80153f8:	bf00      	nop
 80153fa:	3718      	adds	r7, #24
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}
 8015400:	2000592c 	.word	0x2000592c
 8015404:	20005430 	.word	0x20005430

08015408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015408:	b580      	push	{r7, lr}
 801540a:	b086      	sub	sp, #24
 801540c:	af00      	add	r7, sp, #0
 801540e:	60f8      	str	r0, [r7, #12]
 8015410:	60b9      	str	r1, [r7, #8]
 8015412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10d      	bne.n	8015436 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 801541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801541e:	b672      	cpsid	i
 8015420:	f383 8811 	msr	BASEPRI, r3
 8015424:	f3bf 8f6f 	isb	sy
 8015428:	f3bf 8f4f 	dsb	sy
 801542c:	b662      	cpsie	i
 801542e:	617b      	str	r3, [r7, #20]
}
 8015430:	bf00      	nop
 8015432:	bf00      	nop
 8015434:	e7fd      	b.n	8015432 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015436:	4b0a      	ldr	r3, [pc, #40]	@ (8015460 <vTaskPlaceOnEventListRestricted+0x58>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	3318      	adds	r3, #24
 801543c:	4619      	mov	r1, r3
 801543e:	68f8      	ldr	r0, [r7, #12]
 8015440:	f7fe fb48 	bl	8013ad4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d002      	beq.n	8015450 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 801544a:	f04f 33ff 	mov.w	r3, #4294967295
 801544e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015450:	6879      	ldr	r1, [r7, #4]
 8015452:	68b8      	ldr	r0, [r7, #8]
 8015454:	f000 fe3a 	bl	80160cc <prvAddCurrentTaskToDelayedList>
	}
 8015458:	bf00      	nop
 801545a:	3718      	adds	r7, #24
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	20005430 	.word	0x20005430

08015464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b086      	sub	sp, #24
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	68db      	ldr	r3, [r3, #12]
 8015470:	68db      	ldr	r3, [r3, #12]
 8015472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015474:	693b      	ldr	r3, [r7, #16]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d10d      	bne.n	8015496 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801547a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801547e:	b672      	cpsid	i
 8015480:	f383 8811 	msr	BASEPRI, r3
 8015484:	f3bf 8f6f 	isb	sy
 8015488:	f3bf 8f4f 	dsb	sy
 801548c:	b662      	cpsie	i
 801548e:	60fb      	str	r3, [r7, #12]
}
 8015490:	bf00      	nop
 8015492:	bf00      	nop
 8015494:	e7fd      	b.n	8015492 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	3318      	adds	r3, #24
 801549a:	4618      	mov	r0, r3
 801549c:	f7fe fb77 	bl	8013b8e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80154a0:	4b1d      	ldr	r3, [pc, #116]	@ (8015518 <xTaskRemoveFromEventList+0xb4>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d11d      	bne.n	80154e4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	3304      	adds	r3, #4
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7fe fb6e 	bl	8013b8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80154b2:	693b      	ldr	r3, [r7, #16]
 80154b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154b6:	4b19      	ldr	r3, [pc, #100]	@ (801551c <xTaskRemoveFromEventList+0xb8>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d903      	bls.n	80154c6 <xTaskRemoveFromEventList+0x62>
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154c2:	4a16      	ldr	r2, [pc, #88]	@ (801551c <xTaskRemoveFromEventList+0xb8>)
 80154c4:	6013      	str	r3, [r2, #0]
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154ca:	4613      	mov	r3, r2
 80154cc:	009b      	lsls	r3, r3, #2
 80154ce:	4413      	add	r3, r2
 80154d0:	009b      	lsls	r3, r3, #2
 80154d2:	4a13      	ldr	r2, [pc, #76]	@ (8015520 <xTaskRemoveFromEventList+0xbc>)
 80154d4:	441a      	add	r2, r3
 80154d6:	693b      	ldr	r3, [r7, #16]
 80154d8:	3304      	adds	r3, #4
 80154da:	4619      	mov	r1, r3
 80154dc:	4610      	mov	r0, r2
 80154de:	f7fe faf9 	bl	8013ad4 <vListInsertEnd>
 80154e2:	e005      	b.n	80154f0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	3318      	adds	r3, #24
 80154e8:	4619      	mov	r1, r3
 80154ea:	480e      	ldr	r0, [pc, #56]	@ (8015524 <xTaskRemoveFromEventList+0xc0>)
 80154ec:	f7fe faf2 	bl	8013ad4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80154f0:	693b      	ldr	r3, [r7, #16]
 80154f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154f4:	4b0c      	ldr	r3, [pc, #48]	@ (8015528 <xTaskRemoveFromEventList+0xc4>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d905      	bls.n	801550a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80154fe:	2301      	movs	r3, #1
 8015500:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015502:	4b0a      	ldr	r3, [pc, #40]	@ (801552c <xTaskRemoveFromEventList+0xc8>)
 8015504:	2201      	movs	r2, #1
 8015506:	601a      	str	r2, [r3, #0]
 8015508:	e001      	b.n	801550e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 801550a:	2300      	movs	r3, #0
 801550c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801550e:	697b      	ldr	r3, [r7, #20]
}
 8015510:	4618      	mov	r0, r3
 8015512:	3718      	adds	r7, #24
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}
 8015518:	2000592c 	.word	0x2000592c
 801551c:	2000590c 	.word	0x2000590c
 8015520:	20005434 	.word	0x20005434
 8015524:	200058c4 	.word	0x200058c4
 8015528:	20005430 	.word	0x20005430
 801552c:	20005918 	.word	0x20005918

08015530 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b086      	sub	sp, #24
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801553a:	4b2c      	ldr	r3, [pc, #176]	@ (80155ec <vTaskRemoveFromUnorderedEventList+0xbc>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d10d      	bne.n	801555e <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 8015542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015546:	b672      	cpsid	i
 8015548:	f383 8811 	msr	BASEPRI, r3
 801554c:	f3bf 8f6f 	isb	sy
 8015550:	f3bf 8f4f 	dsb	sy
 8015554:	b662      	cpsie	i
 8015556:	613b      	str	r3, [r7, #16]
}
 8015558:	bf00      	nop
 801555a:	bf00      	nop
 801555c:	e7fd      	b.n	801555a <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	68db      	ldr	r3, [r3, #12]
 801556c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d10d      	bne.n	8015590 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 8015574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015578:	b672      	cpsid	i
 801557a:	f383 8811 	msr	BASEPRI, r3
 801557e:	f3bf 8f6f 	isb	sy
 8015582:	f3bf 8f4f 	dsb	sy
 8015586:	b662      	cpsie	i
 8015588:	60fb      	str	r3, [r7, #12]
}
 801558a:	bf00      	nop
 801558c:	bf00      	nop
 801558e:	e7fd      	b.n	801558c <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f7fe fafc 	bl	8013b8e <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	3304      	adds	r3, #4
 801559a:	4618      	mov	r0, r3
 801559c:	f7fe faf7 	bl	8013b8e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155a4:	4b12      	ldr	r3, [pc, #72]	@ (80155f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d903      	bls.n	80155b4 <vTaskRemoveFromUnorderedEventList+0x84>
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155b0:	4a0f      	ldr	r2, [pc, #60]	@ (80155f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80155b2:	6013      	str	r3, [r2, #0]
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155b8:	4613      	mov	r3, r2
 80155ba:	009b      	lsls	r3, r3, #2
 80155bc:	4413      	add	r3, r2
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	4a0c      	ldr	r2, [pc, #48]	@ (80155f4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80155c2:	441a      	add	r2, r3
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	3304      	adds	r3, #4
 80155c8:	4619      	mov	r1, r3
 80155ca:	4610      	mov	r0, r2
 80155cc:	f7fe fa82 	bl	8013ad4 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155d4:	4b08      	ldr	r3, [pc, #32]	@ (80155f8 <vTaskRemoveFromUnorderedEventList+0xc8>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155da:	429a      	cmp	r2, r3
 80155dc:	d902      	bls.n	80155e4 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80155de:	4b07      	ldr	r3, [pc, #28]	@ (80155fc <vTaskRemoveFromUnorderedEventList+0xcc>)
 80155e0:	2201      	movs	r2, #1
 80155e2:	601a      	str	r2, [r3, #0]
	}
}
 80155e4:	bf00      	nop
 80155e6:	3718      	adds	r7, #24
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}
 80155ec:	2000592c 	.word	0x2000592c
 80155f0:	2000590c 	.word	0x2000590c
 80155f4:	20005434 	.word	0x20005434
 80155f8:	20005430 	.word	0x20005430
 80155fc:	20005918 	.word	0x20005918

08015600 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b084      	sub	sp, #16
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d10d      	bne.n	801562a <vTaskSetTimeOutState+0x2a>
	__asm volatile
 801560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015612:	b672      	cpsid	i
 8015614:	f383 8811 	msr	BASEPRI, r3
 8015618:	f3bf 8f6f 	isb	sy
 801561c:	f3bf 8f4f 	dsb	sy
 8015620:	b662      	cpsie	i
 8015622:	60fb      	str	r3, [r7, #12]
}
 8015624:	bf00      	nop
 8015626:	bf00      	nop
 8015628:	e7fd      	b.n	8015626 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 801562a:	f001 fa17 	bl	8016a5c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 801562e:	4b07      	ldr	r3, [pc, #28]	@ (801564c <vTaskSetTimeOutState+0x4c>)
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8015636:	4b06      	ldr	r3, [pc, #24]	@ (8015650 <vTaskSetTimeOutState+0x50>)
 8015638:	681a      	ldr	r2, [r3, #0]
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 801563e:	f001 fa43 	bl	8016ac8 <vPortExitCritical>
}
 8015642:	bf00      	nop
 8015644:	3710      	adds	r7, #16
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
 801564a:	bf00      	nop
 801564c:	2000591c 	.word	0x2000591c
 8015650:	20005908 	.word	0x20005908

08015654 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015654:	b480      	push	{r7}
 8015656:	b083      	sub	sp, #12
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801565c:	4b06      	ldr	r3, [pc, #24]	@ (8015678 <vTaskInternalSetTimeOutState+0x24>)
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015664:	4b05      	ldr	r3, [pc, #20]	@ (801567c <vTaskInternalSetTimeOutState+0x28>)
 8015666:	681a      	ldr	r2, [r3, #0]
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	605a      	str	r2, [r3, #4]
}
 801566c:	bf00      	nop
 801566e:	370c      	adds	r7, #12
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr
 8015678:	2000591c 	.word	0x2000591c
 801567c:	20005908 	.word	0x20005908

08015680 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b088      	sub	sp, #32
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d10d      	bne.n	80156ac <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8015690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015694:	b672      	cpsid	i
 8015696:	f383 8811 	msr	BASEPRI, r3
 801569a:	f3bf 8f6f 	isb	sy
 801569e:	f3bf 8f4f 	dsb	sy
 80156a2:	b662      	cpsie	i
 80156a4:	613b      	str	r3, [r7, #16]
}
 80156a6:	bf00      	nop
 80156a8:	bf00      	nop
 80156aa:	e7fd      	b.n	80156a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d10d      	bne.n	80156ce <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80156b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156b6:	b672      	cpsid	i
 80156b8:	f383 8811 	msr	BASEPRI, r3
 80156bc:	f3bf 8f6f 	isb	sy
 80156c0:	f3bf 8f4f 	dsb	sy
 80156c4:	b662      	cpsie	i
 80156c6:	60fb      	str	r3, [r7, #12]
}
 80156c8:	bf00      	nop
 80156ca:	bf00      	nop
 80156cc:	e7fd      	b.n	80156ca <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80156ce:	f001 f9c5 	bl	8016a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80156d2:	4b1d      	ldr	r3, [pc, #116]	@ (8015748 <xTaskCheckForTimeOut+0xc8>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	69ba      	ldr	r2, [r7, #24]
 80156de:	1ad3      	subs	r3, r2, r3
 80156e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156ea:	d102      	bne.n	80156f2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80156ec:	2300      	movs	r3, #0
 80156ee:	61fb      	str	r3, [r7, #28]
 80156f0:	e023      	b.n	801573a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681a      	ldr	r2, [r3, #0]
 80156f6:	4b15      	ldr	r3, [pc, #84]	@ (801574c <xTaskCheckForTimeOut+0xcc>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d007      	beq.n	801570e <xTaskCheckForTimeOut+0x8e>
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	69ba      	ldr	r2, [r7, #24]
 8015704:	429a      	cmp	r2, r3
 8015706:	d302      	bcc.n	801570e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015708:	2301      	movs	r3, #1
 801570a:	61fb      	str	r3, [r7, #28]
 801570c:	e015      	b.n	801573a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801570e:	683b      	ldr	r3, [r7, #0]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	697a      	ldr	r2, [r7, #20]
 8015714:	429a      	cmp	r2, r3
 8015716:	d20b      	bcs.n	8015730 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	697b      	ldr	r3, [r7, #20]
 801571e:	1ad2      	subs	r2, r2, r3
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f7ff ff95 	bl	8015654 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801572a:	2300      	movs	r3, #0
 801572c:	61fb      	str	r3, [r7, #28]
 801572e:	e004      	b.n	801573a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	2200      	movs	r2, #0
 8015734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015736:	2301      	movs	r3, #1
 8015738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801573a:	f001 f9c5 	bl	8016ac8 <vPortExitCritical>

	return xReturn;
 801573e:	69fb      	ldr	r3, [r7, #28]
}
 8015740:	4618      	mov	r0, r3
 8015742:	3720      	adds	r7, #32
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	20005908 	.word	0x20005908
 801574c:	2000591c 	.word	0x2000591c

08015750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015750:	b480      	push	{r7}
 8015752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015754:	4b03      	ldr	r3, [pc, #12]	@ (8015764 <vTaskMissedYield+0x14>)
 8015756:	2201      	movs	r2, #1
 8015758:	601a      	str	r2, [r3, #0]
}
 801575a:	bf00      	nop
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr
 8015764:	20005918 	.word	0x20005918

08015768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015770:	f000 f852 	bl	8015818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015774:	4b06      	ldr	r3, [pc, #24]	@ (8015790 <prvIdleTask+0x28>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2b01      	cmp	r3, #1
 801577a:	d9f9      	bls.n	8015770 <prvIdleTask+0x8>
			{
				taskYIELD();
 801577c:	4b05      	ldr	r3, [pc, #20]	@ (8015794 <prvIdleTask+0x2c>)
 801577e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015782:	601a      	str	r2, [r3, #0]
 8015784:	f3bf 8f4f 	dsb	sy
 8015788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801578c:	e7f0      	b.n	8015770 <prvIdleTask+0x8>
 801578e:	bf00      	nop
 8015790:	20005434 	.word	0x20005434
 8015794:	e000ed04 	.word	0xe000ed04

08015798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801579e:	2300      	movs	r3, #0
 80157a0:	607b      	str	r3, [r7, #4]
 80157a2:	e00c      	b.n	80157be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	4613      	mov	r3, r2
 80157a8:	009b      	lsls	r3, r3, #2
 80157aa:	4413      	add	r3, r2
 80157ac:	009b      	lsls	r3, r3, #2
 80157ae:	4a12      	ldr	r2, [pc, #72]	@ (80157f8 <prvInitialiseTaskLists+0x60>)
 80157b0:	4413      	add	r3, r2
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7fe f961 	bl	8013a7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	3301      	adds	r3, #1
 80157bc:	607b      	str	r3, [r7, #4]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2b37      	cmp	r3, #55	@ 0x37
 80157c2:	d9ef      	bls.n	80157a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80157c4:	480d      	ldr	r0, [pc, #52]	@ (80157fc <prvInitialiseTaskLists+0x64>)
 80157c6:	f7fe f958 	bl	8013a7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80157ca:	480d      	ldr	r0, [pc, #52]	@ (8015800 <prvInitialiseTaskLists+0x68>)
 80157cc:	f7fe f955 	bl	8013a7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80157d0:	480c      	ldr	r0, [pc, #48]	@ (8015804 <prvInitialiseTaskLists+0x6c>)
 80157d2:	f7fe f952 	bl	8013a7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80157d6:	480c      	ldr	r0, [pc, #48]	@ (8015808 <prvInitialiseTaskLists+0x70>)
 80157d8:	f7fe f94f 	bl	8013a7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80157dc:	480b      	ldr	r0, [pc, #44]	@ (801580c <prvInitialiseTaskLists+0x74>)
 80157de:	f7fe f94c 	bl	8013a7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80157e2:	4b0b      	ldr	r3, [pc, #44]	@ (8015810 <prvInitialiseTaskLists+0x78>)
 80157e4:	4a05      	ldr	r2, [pc, #20]	@ (80157fc <prvInitialiseTaskLists+0x64>)
 80157e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80157e8:	4b0a      	ldr	r3, [pc, #40]	@ (8015814 <prvInitialiseTaskLists+0x7c>)
 80157ea:	4a05      	ldr	r2, [pc, #20]	@ (8015800 <prvInitialiseTaskLists+0x68>)
 80157ec:	601a      	str	r2, [r3, #0]
}
 80157ee:	bf00      	nop
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}
 80157f6:	bf00      	nop
 80157f8:	20005434 	.word	0x20005434
 80157fc:	20005894 	.word	0x20005894
 8015800:	200058a8 	.word	0x200058a8
 8015804:	200058c4 	.word	0x200058c4
 8015808:	200058d8 	.word	0x200058d8
 801580c:	200058f0 	.word	0x200058f0
 8015810:	200058bc 	.word	0x200058bc
 8015814:	200058c0 	.word	0x200058c0

08015818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801581e:	e019      	b.n	8015854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015820:	f001 f91c 	bl	8016a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015824:	4b10      	ldr	r3, [pc, #64]	@ (8015868 <prvCheckTasksWaitingTermination+0x50>)
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	68db      	ldr	r3, [r3, #12]
 801582a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	3304      	adds	r3, #4
 8015830:	4618      	mov	r0, r3
 8015832:	f7fe f9ac 	bl	8013b8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015836:	4b0d      	ldr	r3, [pc, #52]	@ (801586c <prvCheckTasksWaitingTermination+0x54>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	3b01      	subs	r3, #1
 801583c:	4a0b      	ldr	r2, [pc, #44]	@ (801586c <prvCheckTasksWaitingTermination+0x54>)
 801583e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015840:	4b0b      	ldr	r3, [pc, #44]	@ (8015870 <prvCheckTasksWaitingTermination+0x58>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	3b01      	subs	r3, #1
 8015846:	4a0a      	ldr	r2, [pc, #40]	@ (8015870 <prvCheckTasksWaitingTermination+0x58>)
 8015848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801584a:	f001 f93d 	bl	8016ac8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801584e:	6878      	ldr	r0, [r7, #4]
 8015850:	f000 f810 	bl	8015874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015854:	4b06      	ldr	r3, [pc, #24]	@ (8015870 <prvCheckTasksWaitingTermination+0x58>)
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d1e1      	bne.n	8015820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801585c:	bf00      	nop
 801585e:	bf00      	nop
 8015860:	3708      	adds	r7, #8
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}
 8015866:	bf00      	nop
 8015868:	200058d8 	.word	0x200058d8
 801586c:	20005904 	.word	0x20005904
 8015870:	200058ec 	.word	0x200058ec

08015874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	3354      	adds	r3, #84	@ 0x54
 8015880:	4618      	mov	r0, r3
 8015882:	f001 fee3 	bl	801764c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801588c:	2b00      	cmp	r3, #0
 801588e:	d108      	bne.n	80158a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015894:	4618      	mov	r0, r3
 8015896:	f001 fadd 	bl	8016e54 <vPortFree>
				vPortFree( pxTCB );
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f001 fada 	bl	8016e54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80158a0:	e01b      	b.n	80158da <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80158a8:	2b01      	cmp	r3, #1
 80158aa:	d103      	bne.n	80158b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f001 fad1 	bl	8016e54 <vPortFree>
	}
 80158b2:	e012      	b.n	80158da <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80158ba:	2b02      	cmp	r3, #2
 80158bc:	d00d      	beq.n	80158da <prvDeleteTCB+0x66>
	__asm volatile
 80158be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158c2:	b672      	cpsid	i
 80158c4:	f383 8811 	msr	BASEPRI, r3
 80158c8:	f3bf 8f6f 	isb	sy
 80158cc:	f3bf 8f4f 	dsb	sy
 80158d0:	b662      	cpsie	i
 80158d2:	60fb      	str	r3, [r7, #12]
}
 80158d4:	bf00      	nop
 80158d6:	bf00      	nop
 80158d8:	e7fd      	b.n	80158d6 <prvDeleteTCB+0x62>
	}
 80158da:	bf00      	nop
 80158dc:	3710      	adds	r7, #16
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
	...

080158e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80158e4:	b480      	push	{r7}
 80158e6:	b083      	sub	sp, #12
 80158e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80158ea:	4b0c      	ldr	r3, [pc, #48]	@ (801591c <prvResetNextTaskUnblockTime+0x38>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d104      	bne.n	80158fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80158f4:	4b0a      	ldr	r3, [pc, #40]	@ (8015920 <prvResetNextTaskUnblockTime+0x3c>)
 80158f6:	f04f 32ff 	mov.w	r2, #4294967295
 80158fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80158fc:	e008      	b.n	8015910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158fe:	4b07      	ldr	r3, [pc, #28]	@ (801591c <prvResetNextTaskUnblockTime+0x38>)
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	68db      	ldr	r3, [r3, #12]
 8015904:	68db      	ldr	r3, [r3, #12]
 8015906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	4a04      	ldr	r2, [pc, #16]	@ (8015920 <prvResetNextTaskUnblockTime+0x3c>)
 801590e:	6013      	str	r3, [r2, #0]
}
 8015910:	bf00      	nop
 8015912:	370c      	adds	r7, #12
 8015914:	46bd      	mov	sp, r7
 8015916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591a:	4770      	bx	lr
 801591c:	200058bc 	.word	0x200058bc
 8015920:	20005924 	.word	0x20005924

08015924 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015924:	b480      	push	{r7}
 8015926:	b083      	sub	sp, #12
 8015928:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801592a:	4b05      	ldr	r3, [pc, #20]	@ (8015940 <xTaskGetCurrentTaskHandle+0x1c>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015930:	687b      	ldr	r3, [r7, #4]
	}
 8015932:	4618      	mov	r0, r3
 8015934:	370c      	adds	r7, #12
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr
 801593e:	bf00      	nop
 8015940:	20005430 	.word	0x20005430

08015944 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801594a:	4b0b      	ldr	r3, [pc, #44]	@ (8015978 <xTaskGetSchedulerState+0x34>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d102      	bne.n	8015958 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015952:	2301      	movs	r3, #1
 8015954:	607b      	str	r3, [r7, #4]
 8015956:	e008      	b.n	801596a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015958:	4b08      	ldr	r3, [pc, #32]	@ (801597c <xTaskGetSchedulerState+0x38>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d102      	bne.n	8015966 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015960:	2302      	movs	r3, #2
 8015962:	607b      	str	r3, [r7, #4]
 8015964:	e001      	b.n	801596a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015966:	2300      	movs	r3, #0
 8015968:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801596a:	687b      	ldr	r3, [r7, #4]
	}
 801596c:	4618      	mov	r0, r3
 801596e:	370c      	adds	r7, #12
 8015970:	46bd      	mov	sp, r7
 8015972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015976:	4770      	bx	lr
 8015978:	20005910 	.word	0x20005910
 801597c:	2000592c 	.word	0x2000592c

08015980 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015980:	b580      	push	{r7, lr}
 8015982:	b084      	sub	sp, #16
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801598c:	2300      	movs	r3, #0
 801598e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d051      	beq.n	8015a3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801599a:	4b2a      	ldr	r3, [pc, #168]	@ (8015a44 <xTaskPriorityInherit+0xc4>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d241      	bcs.n	8015a28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	699b      	ldr	r3, [r3, #24]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	db06      	blt.n	80159ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159ac:	4b25      	ldr	r3, [pc, #148]	@ (8015a44 <xTaskPriorityInherit+0xc4>)
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	6959      	ldr	r1, [r3, #20]
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159c2:	4613      	mov	r3, r2
 80159c4:	009b      	lsls	r3, r3, #2
 80159c6:	4413      	add	r3, r2
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	4a1f      	ldr	r2, [pc, #124]	@ (8015a48 <xTaskPriorityInherit+0xc8>)
 80159cc:	4413      	add	r3, r2
 80159ce:	4299      	cmp	r1, r3
 80159d0:	d122      	bne.n	8015a18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	3304      	adds	r3, #4
 80159d6:	4618      	mov	r0, r3
 80159d8:	f7fe f8d9 	bl	8013b8e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80159dc:	4b19      	ldr	r3, [pc, #100]	@ (8015a44 <xTaskPriorityInherit+0xc4>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80159e6:	68bb      	ldr	r3, [r7, #8]
 80159e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159ea:	4b18      	ldr	r3, [pc, #96]	@ (8015a4c <xTaskPriorityInherit+0xcc>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d903      	bls.n	80159fa <xTaskPriorityInherit+0x7a>
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159f6:	4a15      	ldr	r2, [pc, #84]	@ (8015a4c <xTaskPriorityInherit+0xcc>)
 80159f8:	6013      	str	r3, [r2, #0]
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159fe:	4613      	mov	r3, r2
 8015a00:	009b      	lsls	r3, r3, #2
 8015a02:	4413      	add	r3, r2
 8015a04:	009b      	lsls	r3, r3, #2
 8015a06:	4a10      	ldr	r2, [pc, #64]	@ (8015a48 <xTaskPriorityInherit+0xc8>)
 8015a08:	441a      	add	r2, r3
 8015a0a:	68bb      	ldr	r3, [r7, #8]
 8015a0c:	3304      	adds	r3, #4
 8015a0e:	4619      	mov	r1, r3
 8015a10:	4610      	mov	r0, r2
 8015a12:	f7fe f85f 	bl	8013ad4 <vListInsertEnd>
 8015a16:	e004      	b.n	8015a22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015a18:	4b0a      	ldr	r3, [pc, #40]	@ (8015a44 <xTaskPriorityInherit+0xc4>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015a22:	2301      	movs	r3, #1
 8015a24:	60fb      	str	r3, [r7, #12]
 8015a26:	e008      	b.n	8015a3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015a2c:	4b05      	ldr	r3, [pc, #20]	@ (8015a44 <xTaskPriorityInherit+0xc4>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d201      	bcs.n	8015a3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015a36:	2301      	movs	r3, #1
 8015a38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
	}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3710      	adds	r7, #16
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	20005430 	.word	0x20005430
 8015a48:	20005434 	.word	0x20005434
 8015a4c:	2000590c 	.word	0x2000590c

08015a50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b086      	sub	sp, #24
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d05c      	beq.n	8015b20 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015a66:	4b31      	ldr	r3, [pc, #196]	@ (8015b2c <xTaskPriorityDisinherit+0xdc>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	693a      	ldr	r2, [r7, #16]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d00d      	beq.n	8015a8c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8015a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a74:	b672      	cpsid	i
 8015a76:	f383 8811 	msr	BASEPRI, r3
 8015a7a:	f3bf 8f6f 	isb	sy
 8015a7e:	f3bf 8f4f 	dsb	sy
 8015a82:	b662      	cpsie	i
 8015a84:	60fb      	str	r3, [r7, #12]
}
 8015a86:	bf00      	nop
 8015a88:	bf00      	nop
 8015a8a:	e7fd      	b.n	8015a88 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8015a8c:	693b      	ldr	r3, [r7, #16]
 8015a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d10d      	bne.n	8015ab0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8015a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a98:	b672      	cpsid	i
 8015a9a:	f383 8811 	msr	BASEPRI, r3
 8015a9e:	f3bf 8f6f 	isb	sy
 8015aa2:	f3bf 8f4f 	dsb	sy
 8015aa6:	b662      	cpsie	i
 8015aa8:	60bb      	str	r3, [r7, #8]
}
 8015aaa:	bf00      	nop
 8015aac:	bf00      	nop
 8015aae:	e7fd      	b.n	8015aac <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015ab4:	1e5a      	subs	r2, r3, #1
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d02c      	beq.n	8015b20 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d128      	bne.n	8015b20 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	3304      	adds	r3, #4
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7fe f85b 	bl	8013b8e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ae0:	693b      	ldr	r3, [r7, #16]
 8015ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ae4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015ae8:	693b      	ldr	r3, [r7, #16]
 8015aea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015af0:	4b0f      	ldr	r3, [pc, #60]	@ (8015b30 <xTaskPriorityDisinherit+0xe0>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d903      	bls.n	8015b00 <xTaskPriorityDisinherit+0xb0>
 8015af8:	693b      	ldr	r3, [r7, #16]
 8015afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015afc:	4a0c      	ldr	r2, [pc, #48]	@ (8015b30 <xTaskPriorityDisinherit+0xe0>)
 8015afe:	6013      	str	r3, [r2, #0]
 8015b00:	693b      	ldr	r3, [r7, #16]
 8015b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b04:	4613      	mov	r3, r2
 8015b06:	009b      	lsls	r3, r3, #2
 8015b08:	4413      	add	r3, r2
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	4a09      	ldr	r2, [pc, #36]	@ (8015b34 <xTaskPriorityDisinherit+0xe4>)
 8015b0e:	441a      	add	r2, r3
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	3304      	adds	r3, #4
 8015b14:	4619      	mov	r1, r3
 8015b16:	4610      	mov	r0, r2
 8015b18:	f7fd ffdc 	bl	8013ad4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015b20:	697b      	ldr	r3, [r7, #20]
	}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3718      	adds	r7, #24
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	20005430 	.word	0x20005430
 8015b30:	2000590c 	.word	0x2000590c
 8015b34:	20005434 	.word	0x20005434

08015b38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b088      	sub	sp, #32
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
 8015b40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015b46:	2301      	movs	r3, #1
 8015b48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d070      	beq.n	8015c32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015b50:	69bb      	ldr	r3, [r7, #24]
 8015b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d10d      	bne.n	8015b74 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8015b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b5c:	b672      	cpsid	i
 8015b5e:	f383 8811 	msr	BASEPRI, r3
 8015b62:	f3bf 8f6f 	isb	sy
 8015b66:	f3bf 8f4f 	dsb	sy
 8015b6a:	b662      	cpsie	i
 8015b6c:	60fb      	str	r3, [r7, #12]
}
 8015b6e:	bf00      	nop
 8015b70:	bf00      	nop
 8015b72:	e7fd      	b.n	8015b70 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015b74:	69bb      	ldr	r3, [r7, #24]
 8015b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015b78:	683a      	ldr	r2, [r7, #0]
 8015b7a:	429a      	cmp	r2, r3
 8015b7c:	d902      	bls.n	8015b84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	61fb      	str	r3, [r7, #28]
 8015b82:	e002      	b.n	8015b8a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015b84:	69bb      	ldr	r3, [r7, #24]
 8015b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015b88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015b8a:	69bb      	ldr	r3, [r7, #24]
 8015b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b8e:	69fa      	ldr	r2, [r7, #28]
 8015b90:	429a      	cmp	r2, r3
 8015b92:	d04e      	beq.n	8015c32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015b94:	69bb      	ldr	r3, [r7, #24]
 8015b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b98:	697a      	ldr	r2, [r7, #20]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d149      	bne.n	8015c32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015b9e:	4b27      	ldr	r3, [pc, #156]	@ (8015c3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	69ba      	ldr	r2, [r7, #24]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d10d      	bne.n	8015bc4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8015ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bac:	b672      	cpsid	i
 8015bae:	f383 8811 	msr	BASEPRI, r3
 8015bb2:	f3bf 8f6f 	isb	sy
 8015bb6:	f3bf 8f4f 	dsb	sy
 8015bba:	b662      	cpsie	i
 8015bbc:	60bb      	str	r3, [r7, #8]
}
 8015bbe:	bf00      	nop
 8015bc0:	bf00      	nop
 8015bc2:	e7fd      	b.n	8015bc0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015bc4:	69bb      	ldr	r3, [r7, #24]
 8015bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bc8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015bca:	69bb      	ldr	r3, [r7, #24]
 8015bcc:	69fa      	ldr	r2, [r7, #28]
 8015bce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015bd0:	69bb      	ldr	r3, [r7, #24]
 8015bd2:	699b      	ldr	r3, [r3, #24]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	db04      	blt.n	8015be2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015bd8:	69fb      	ldr	r3, [r7, #28]
 8015bda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015bde:	69bb      	ldr	r3, [r7, #24]
 8015be0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015be2:	69bb      	ldr	r3, [r7, #24]
 8015be4:	6959      	ldr	r1, [r3, #20]
 8015be6:	693a      	ldr	r2, [r7, #16]
 8015be8:	4613      	mov	r3, r2
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	4413      	add	r3, r2
 8015bee:	009b      	lsls	r3, r3, #2
 8015bf0:	4a13      	ldr	r2, [pc, #76]	@ (8015c40 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8015bf2:	4413      	add	r3, r2
 8015bf4:	4299      	cmp	r1, r3
 8015bf6:	d11c      	bne.n	8015c32 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	3304      	adds	r3, #4
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f7fd ffc6 	bl	8013b8e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015c02:	69bb      	ldr	r3, [r7, #24]
 8015c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c06:	4b0f      	ldr	r3, [pc, #60]	@ (8015c44 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d903      	bls.n	8015c16 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c12:	4a0c      	ldr	r2, [pc, #48]	@ (8015c44 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8015c14:	6013      	str	r3, [r2, #0]
 8015c16:	69bb      	ldr	r3, [r7, #24]
 8015c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	009b      	lsls	r3, r3, #2
 8015c1e:	4413      	add	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	4a07      	ldr	r2, [pc, #28]	@ (8015c40 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8015c24:	441a      	add	r2, r3
 8015c26:	69bb      	ldr	r3, [r7, #24]
 8015c28:	3304      	adds	r3, #4
 8015c2a:	4619      	mov	r1, r3
 8015c2c:	4610      	mov	r0, r2
 8015c2e:	f7fd ff51 	bl	8013ad4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015c32:	bf00      	nop
 8015c34:	3720      	adds	r7, #32
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	20005430 	.word	0x20005430
 8015c40:	20005434 	.word	0x20005434
 8015c44:	2000590c 	.word	0x2000590c

08015c48 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015c48:	b480      	push	{r7}
 8015c4a:	b083      	sub	sp, #12
 8015c4c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015c4e:	4b09      	ldr	r3, [pc, #36]	@ (8015c74 <uxTaskResetEventItemValue+0x2c>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	699b      	ldr	r3, [r3, #24]
 8015c54:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c56:	4b07      	ldr	r3, [pc, #28]	@ (8015c74 <uxTaskResetEventItemValue+0x2c>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c5c:	4b05      	ldr	r3, [pc, #20]	@ (8015c74 <uxTaskResetEventItemValue+0x2c>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8015c64:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015c66:	687b      	ldr	r3, [r7, #4]
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	370c      	adds	r7, #12
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c72:	4770      	bx	lr
 8015c74:	20005430 	.word	0x20005430

08015c78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015c78:	b480      	push	{r7}
 8015c7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015c7c:	4b07      	ldr	r3, [pc, #28]	@ (8015c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d004      	beq.n	8015c8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015c84:	4b05      	ldr	r3, [pc, #20]	@ (8015c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c8a:	3201      	adds	r2, #1
 8015c8c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015c8e:	4b03      	ldr	r3, [pc, #12]	@ (8015c9c <pvTaskIncrementMutexHeldCount+0x24>)
 8015c90:	681b      	ldr	r3, [r3, #0]
	}
 8015c92:	4618      	mov	r0, r3
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr
 8015c9c:	20005430 	.word	0x20005430

08015ca0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b086      	sub	sp, #24
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	60f8      	str	r0, [r7, #12]
 8015ca8:	60b9      	str	r1, [r7, #8]
 8015caa:	607a      	str	r2, [r7, #4]
 8015cac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8015cae:	f000 fed5 	bl	8016a5c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8015cb2:	4b29      	ldr	r3, [pc, #164]	@ (8015d58 <xTaskNotifyWait+0xb8>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	2b02      	cmp	r3, #2
 8015cbe:	d01c      	beq.n	8015cfa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8015cc0:	4b25      	ldr	r3, [pc, #148]	@ (8015d58 <xTaskNotifyWait+0xb8>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8015cc8:	68fa      	ldr	r2, [r7, #12]
 8015cca:	43d2      	mvns	r2, r2
 8015ccc:	400a      	ands	r2, r1
 8015cce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015cd2:	4b21      	ldr	r3, [pc, #132]	@ (8015d58 <xTaskNotifyWait+0xb8>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	2201      	movs	r2, #1
 8015cd8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d00b      	beq.n	8015cfa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015ce2:	2101      	movs	r1, #1
 8015ce4:	6838      	ldr	r0, [r7, #0]
 8015ce6:	f000 f9f1 	bl	80160cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8015cea:	4b1c      	ldr	r3, [pc, #112]	@ (8015d5c <xTaskNotifyWait+0xbc>)
 8015cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015cf0:	601a      	str	r2, [r3, #0]
 8015cf2:	f3bf 8f4f 	dsb	sy
 8015cf6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015cfa:	f000 fee5 	bl	8016ac8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8015cfe:	f000 fead 	bl	8016a5c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d005      	beq.n	8015d14 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8015d08:	4b13      	ldr	r3, [pc, #76]	@ (8015d58 <xTaskNotifyWait+0xb8>)
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8015d14:	4b10      	ldr	r3, [pc, #64]	@ (8015d58 <xTaskNotifyWait+0xb8>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	2b02      	cmp	r3, #2
 8015d20:	d002      	beq.n	8015d28 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8015d22:	2300      	movs	r3, #0
 8015d24:	617b      	str	r3, [r7, #20]
 8015d26:	e00a      	b.n	8015d3e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8015d28:	4b0b      	ldr	r3, [pc, #44]	@ (8015d58 <xTaskNotifyWait+0xb8>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8015d30:	68ba      	ldr	r2, [r7, #8]
 8015d32:	43d2      	mvns	r2, r2
 8015d34:	400a      	ands	r2, r1
 8015d36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8015d3a:	2301      	movs	r3, #1
 8015d3c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015d3e:	4b06      	ldr	r3, [pc, #24]	@ (8015d58 <xTaskNotifyWait+0xb8>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	2200      	movs	r2, #0
 8015d44:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8015d48:	f000 febe 	bl	8016ac8 <vPortExitCritical>

		return xReturn;
 8015d4c:	697b      	ldr	r3, [r7, #20]
	}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3718      	adds	r7, #24
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	20005430 	.word	0x20005430
 8015d5c:	e000ed04 	.word	0xe000ed04

08015d60 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b08a      	sub	sp, #40	@ 0x28
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	60f8      	str	r0, [r7, #12]
 8015d68:	60b9      	str	r1, [r7, #8]
 8015d6a:	603b      	str	r3, [r7, #0]
 8015d6c:	4613      	mov	r3, r2
 8015d6e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8015d70:	2301      	movs	r3, #1
 8015d72:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d10d      	bne.n	8015d96 <xTaskGenericNotify+0x36>
	__asm volatile
 8015d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d7e:	b672      	cpsid	i
 8015d80:	f383 8811 	msr	BASEPRI, r3
 8015d84:	f3bf 8f6f 	isb	sy
 8015d88:	f3bf 8f4f 	dsb	sy
 8015d8c:	b662      	cpsie	i
 8015d8e:	61bb      	str	r3, [r7, #24]
}
 8015d90:	bf00      	nop
 8015d92:	bf00      	nop
 8015d94:	e7fd      	b.n	8015d92 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8015d9a:	f000 fe5f 	bl	8016a5c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d004      	beq.n	8015dae <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015da4:	6a3b      	ldr	r3, [r7, #32]
 8015da6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015daa:	683b      	ldr	r3, [r7, #0]
 8015dac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015dae:	6a3b      	ldr	r3, [r7, #32]
 8015db0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015db4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015db6:	6a3b      	ldr	r3, [r7, #32]
 8015db8:	2202      	movs	r2, #2
 8015dba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8015dbe:	79fb      	ldrb	r3, [r7, #7]
 8015dc0:	2b04      	cmp	r3, #4
 8015dc2:	d82e      	bhi.n	8015e22 <xTaskGenericNotify+0xc2>
 8015dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8015dcc <xTaskGenericNotify+0x6c>)
 8015dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dca:	bf00      	nop
 8015dcc:	08015e4b 	.word	0x08015e4b
 8015dd0:	08015de1 	.word	0x08015de1
 8015dd4:	08015df3 	.word	0x08015df3
 8015dd8:	08015e03 	.word	0x08015e03
 8015ddc:	08015e0d 	.word	0x08015e0d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8015de0:	6a3b      	ldr	r3, [r7, #32]
 8015de2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015de6:	68bb      	ldr	r3, [r7, #8]
 8015de8:	431a      	orrs	r2, r3
 8015dea:	6a3b      	ldr	r3, [r7, #32]
 8015dec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015df0:	e02e      	b.n	8015e50 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8015df2:	6a3b      	ldr	r3, [r7, #32]
 8015df4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015df8:	1c5a      	adds	r2, r3, #1
 8015dfa:	6a3b      	ldr	r3, [r7, #32]
 8015dfc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015e00:	e026      	b.n	8015e50 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8015e02:	6a3b      	ldr	r3, [r7, #32]
 8015e04:	68ba      	ldr	r2, [r7, #8]
 8015e06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015e0a:	e021      	b.n	8015e50 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015e0c:	7ffb      	ldrb	r3, [r7, #31]
 8015e0e:	2b02      	cmp	r3, #2
 8015e10:	d004      	beq.n	8015e1c <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8015e12:	6a3b      	ldr	r3, [r7, #32]
 8015e14:	68ba      	ldr	r2, [r7, #8]
 8015e16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015e1a:	e019      	b.n	8015e50 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8015e20:	e016      	b.n	8015e50 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8015e22:	6a3b      	ldr	r3, [r7, #32]
 8015e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e2c:	d00f      	beq.n	8015e4e <xTaskGenericNotify+0xee>
	__asm volatile
 8015e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e32:	b672      	cpsid	i
 8015e34:	f383 8811 	msr	BASEPRI, r3
 8015e38:	f3bf 8f6f 	isb	sy
 8015e3c:	f3bf 8f4f 	dsb	sy
 8015e40:	b662      	cpsie	i
 8015e42:	617b      	str	r3, [r7, #20]
}
 8015e44:	bf00      	nop
 8015e46:	bf00      	nop
 8015e48:	e7fd      	b.n	8015e46 <xTaskGenericNotify+0xe6>
					break;
 8015e4a:	bf00      	nop
 8015e4c:	e000      	b.n	8015e50 <xTaskGenericNotify+0xf0>

					break;
 8015e4e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015e50:	7ffb      	ldrb	r3, [r7, #31]
 8015e52:	2b01      	cmp	r3, #1
 8015e54:	d13d      	bne.n	8015ed2 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015e56:	6a3b      	ldr	r3, [r7, #32]
 8015e58:	3304      	adds	r3, #4
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7fd fe97 	bl	8013b8e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8015e60:	6a3b      	ldr	r3, [r7, #32]
 8015e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e64:	4b1e      	ldr	r3, [pc, #120]	@ (8015ee0 <xTaskGenericNotify+0x180>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	d903      	bls.n	8015e74 <xTaskGenericNotify+0x114>
 8015e6c:	6a3b      	ldr	r3, [r7, #32]
 8015e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e70:	4a1b      	ldr	r2, [pc, #108]	@ (8015ee0 <xTaskGenericNotify+0x180>)
 8015e72:	6013      	str	r3, [r2, #0]
 8015e74:	6a3b      	ldr	r3, [r7, #32]
 8015e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e78:	4613      	mov	r3, r2
 8015e7a:	009b      	lsls	r3, r3, #2
 8015e7c:	4413      	add	r3, r2
 8015e7e:	009b      	lsls	r3, r3, #2
 8015e80:	4a18      	ldr	r2, [pc, #96]	@ (8015ee4 <xTaskGenericNotify+0x184>)
 8015e82:	441a      	add	r2, r3
 8015e84:	6a3b      	ldr	r3, [r7, #32]
 8015e86:	3304      	adds	r3, #4
 8015e88:	4619      	mov	r1, r3
 8015e8a:	4610      	mov	r0, r2
 8015e8c:	f7fd fe22 	bl	8013ad4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015e90:	6a3b      	ldr	r3, [r7, #32]
 8015e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d00d      	beq.n	8015eb4 <xTaskGenericNotify+0x154>
	__asm volatile
 8015e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e9c:	b672      	cpsid	i
 8015e9e:	f383 8811 	msr	BASEPRI, r3
 8015ea2:	f3bf 8f6f 	isb	sy
 8015ea6:	f3bf 8f4f 	dsb	sy
 8015eaa:	b662      	cpsie	i
 8015eac:	613b      	str	r3, [r7, #16]
}
 8015eae:	bf00      	nop
 8015eb0:	bf00      	nop
 8015eb2:	e7fd      	b.n	8015eb0 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015eb4:	6a3b      	ldr	r3, [r7, #32]
 8015eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8015ee8 <xTaskGenericNotify+0x188>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d907      	bls.n	8015ed2 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8015ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8015eec <xTaskGenericNotify+0x18c>)
 8015ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ec8:	601a      	str	r2, [r3, #0]
 8015eca:	f3bf 8f4f 	dsb	sy
 8015ece:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015ed2:	f000 fdf9 	bl	8016ac8 <vPortExitCritical>

		return xReturn;
 8015ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3728      	adds	r7, #40	@ 0x28
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}
 8015ee0:	2000590c 	.word	0x2000590c
 8015ee4:	20005434 	.word	0x20005434
 8015ee8:	20005430 	.word	0x20005430
 8015eec:	e000ed04 	.word	0xe000ed04

08015ef0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b08e      	sub	sp, #56	@ 0x38
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	60f8      	str	r0, [r7, #12]
 8015ef8:	60b9      	str	r1, [r7, #8]
 8015efa:	603b      	str	r3, [r7, #0]
 8015efc:	4613      	mov	r3, r2
 8015efe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8015f00:	2301      	movs	r3, #1
 8015f02:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d10d      	bne.n	8015f26 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8015f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f0e:	b672      	cpsid	i
 8015f10:	f383 8811 	msr	BASEPRI, r3
 8015f14:	f3bf 8f6f 	isb	sy
 8015f18:	f3bf 8f4f 	dsb	sy
 8015f1c:	b662      	cpsie	i
 8015f1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015f20:	bf00      	nop
 8015f22:	bf00      	nop
 8015f24:	e7fd      	b.n	8015f22 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015f26:	f000 fe81 	bl	8016c2c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8015f2e:	f3ef 8211 	mrs	r2, BASEPRI
 8015f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f36:	b672      	cpsid	i
 8015f38:	f383 8811 	msr	BASEPRI, r3
 8015f3c:	f3bf 8f6f 	isb	sy
 8015f40:	f3bf 8f4f 	dsb	sy
 8015f44:	b662      	cpsie	i
 8015f46:	623a      	str	r2, [r7, #32]
 8015f48:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8015f4a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d004      	beq.n	8015f5e <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8015f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f56:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f60:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f6a:	2202      	movs	r2, #2
 8015f6c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8015f70:	79fb      	ldrb	r3, [r7, #7]
 8015f72:	2b04      	cmp	r3, #4
 8015f74:	d82e      	bhi.n	8015fd4 <xTaskGenericNotifyFromISR+0xe4>
 8015f76:	a201      	add	r2, pc, #4	@ (adr r2, 8015f7c <xTaskGenericNotifyFromISR+0x8c>)
 8015f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f7c:	08015ffd 	.word	0x08015ffd
 8015f80:	08015f91 	.word	0x08015f91
 8015f84:	08015fa3 	.word	0x08015fa3
 8015f88:	08015fb3 	.word	0x08015fb3
 8015f8c:	08015fbd 	.word	0x08015fbd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8015f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f92:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8015f96:	68bb      	ldr	r3, [r7, #8]
 8015f98:	431a      	orrs	r2, r3
 8015f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015fa0:	e02f      	b.n	8016002 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8015fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015fa8:	1c5a      	adds	r2, r3, #1
 8015faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015fb0:	e027      	b.n	8016002 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8015fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fb4:	68ba      	ldr	r2, [r7, #8]
 8015fb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8015fba:	e022      	b.n	8016002 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8015fbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015fc0:	2b02      	cmp	r3, #2
 8015fc2:	d004      	beq.n	8015fce <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8015fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fc6:	68ba      	ldr	r2, [r7, #8]
 8015fc8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8015fcc:	e019      	b.n	8016002 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8015fd2:	e016      	b.n	8016002 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8015fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fde:	d00f      	beq.n	8016000 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8015fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fe4:	b672      	cpsid	i
 8015fe6:	f383 8811 	msr	BASEPRI, r3
 8015fea:	f3bf 8f6f 	isb	sy
 8015fee:	f3bf 8f4f 	dsb	sy
 8015ff2:	b662      	cpsie	i
 8015ff4:	61bb      	str	r3, [r7, #24]
}
 8015ff6:	bf00      	nop
 8015ff8:	bf00      	nop
 8015ffa:	e7fd      	b.n	8015ff8 <xTaskGenericNotifyFromISR+0x108>
					break;
 8015ffc:	bf00      	nop
 8015ffe:	e000      	b.n	8016002 <xTaskGenericNotifyFromISR+0x112>
					break;
 8016000:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016002:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016006:	2b01      	cmp	r3, #1
 8016008:	d149      	bne.n	801609e <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801600a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801600e:	2b00      	cmp	r3, #0
 8016010:	d00d      	beq.n	801602e <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8016012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016016:	b672      	cpsid	i
 8016018:	f383 8811 	msr	BASEPRI, r3
 801601c:	f3bf 8f6f 	isb	sy
 8016020:	f3bf 8f4f 	dsb	sy
 8016024:	b662      	cpsie	i
 8016026:	617b      	str	r3, [r7, #20]
}
 8016028:	bf00      	nop
 801602a:	bf00      	nop
 801602c:	e7fd      	b.n	801602a <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801602e:	4b21      	ldr	r3, [pc, #132]	@ (80160b4 <xTaskGenericNotifyFromISR+0x1c4>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d11d      	bne.n	8016072 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016038:	3304      	adds	r3, #4
 801603a:	4618      	mov	r0, r3
 801603c:	f7fd fda7 	bl	8013b8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016044:	4b1c      	ldr	r3, [pc, #112]	@ (80160b8 <xTaskGenericNotifyFromISR+0x1c8>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	429a      	cmp	r2, r3
 801604a:	d903      	bls.n	8016054 <xTaskGenericNotifyFromISR+0x164>
 801604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016050:	4a19      	ldr	r2, [pc, #100]	@ (80160b8 <xTaskGenericNotifyFromISR+0x1c8>)
 8016052:	6013      	str	r3, [r2, #0]
 8016054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016058:	4613      	mov	r3, r2
 801605a:	009b      	lsls	r3, r3, #2
 801605c:	4413      	add	r3, r2
 801605e:	009b      	lsls	r3, r3, #2
 8016060:	4a16      	ldr	r2, [pc, #88]	@ (80160bc <xTaskGenericNotifyFromISR+0x1cc>)
 8016062:	441a      	add	r2, r3
 8016064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016066:	3304      	adds	r3, #4
 8016068:	4619      	mov	r1, r3
 801606a:	4610      	mov	r0, r2
 801606c:	f7fd fd32 	bl	8013ad4 <vListInsertEnd>
 8016070:	e005      	b.n	801607e <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016074:	3318      	adds	r3, #24
 8016076:	4619      	mov	r1, r3
 8016078:	4811      	ldr	r0, [pc, #68]	@ (80160c0 <xTaskGenericNotifyFromISR+0x1d0>)
 801607a:	f7fd fd2b 	bl	8013ad4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016082:	4b10      	ldr	r3, [pc, #64]	@ (80160c4 <xTaskGenericNotifyFromISR+0x1d4>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016088:	429a      	cmp	r2, r3
 801608a:	d908      	bls.n	801609e <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801608c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801608e:	2b00      	cmp	r3, #0
 8016090:	d002      	beq.n	8016098 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016094:	2201      	movs	r2, #1
 8016096:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8016098:	4b0b      	ldr	r3, [pc, #44]	@ (80160c8 <xTaskGenericNotifyFromISR+0x1d8>)
 801609a:	2201      	movs	r2, #1
 801609c:	601a      	str	r2, [r3, #0]
 801609e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	f383 8811 	msr	BASEPRI, r3
}
 80160a8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80160aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80160ac:	4618      	mov	r0, r3
 80160ae:	3738      	adds	r7, #56	@ 0x38
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bd80      	pop	{r7, pc}
 80160b4:	2000592c 	.word	0x2000592c
 80160b8:	2000590c 	.word	0x2000590c
 80160bc:	20005434 	.word	0x20005434
 80160c0:	200058c4 	.word	0x200058c4
 80160c4:	20005430 	.word	0x20005430
 80160c8:	20005918 	.word	0x20005918

080160cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80160d6:	4b21      	ldr	r3, [pc, #132]	@ (801615c <prvAddCurrentTaskToDelayedList+0x90>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80160dc:	4b20      	ldr	r3, [pc, #128]	@ (8016160 <prvAddCurrentTaskToDelayedList+0x94>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	3304      	adds	r3, #4
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7fd fd53 	bl	8013b8e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ee:	d10a      	bne.n	8016106 <prvAddCurrentTaskToDelayedList+0x3a>
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d007      	beq.n	8016106 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80160f6:	4b1a      	ldr	r3, [pc, #104]	@ (8016160 <prvAddCurrentTaskToDelayedList+0x94>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	3304      	adds	r3, #4
 80160fc:	4619      	mov	r1, r3
 80160fe:	4819      	ldr	r0, [pc, #100]	@ (8016164 <prvAddCurrentTaskToDelayedList+0x98>)
 8016100:	f7fd fce8 	bl	8013ad4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016104:	e026      	b.n	8016154 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016106:	68fa      	ldr	r2, [r7, #12]
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	4413      	add	r3, r2
 801610c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801610e:	4b14      	ldr	r3, [pc, #80]	@ (8016160 <prvAddCurrentTaskToDelayedList+0x94>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	68ba      	ldr	r2, [r7, #8]
 8016114:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016116:	68ba      	ldr	r2, [r7, #8]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	429a      	cmp	r2, r3
 801611c:	d209      	bcs.n	8016132 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801611e:	4b12      	ldr	r3, [pc, #72]	@ (8016168 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016120:	681a      	ldr	r2, [r3, #0]
 8016122:	4b0f      	ldr	r3, [pc, #60]	@ (8016160 <prvAddCurrentTaskToDelayedList+0x94>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	3304      	adds	r3, #4
 8016128:	4619      	mov	r1, r3
 801612a:	4610      	mov	r0, r2
 801612c:	f7fd fcf6 	bl	8013b1c <vListInsert>
}
 8016130:	e010      	b.n	8016154 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016132:	4b0e      	ldr	r3, [pc, #56]	@ (801616c <prvAddCurrentTaskToDelayedList+0xa0>)
 8016134:	681a      	ldr	r2, [r3, #0]
 8016136:	4b0a      	ldr	r3, [pc, #40]	@ (8016160 <prvAddCurrentTaskToDelayedList+0x94>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	3304      	adds	r3, #4
 801613c:	4619      	mov	r1, r3
 801613e:	4610      	mov	r0, r2
 8016140:	f7fd fcec 	bl	8013b1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016144:	4b0a      	ldr	r3, [pc, #40]	@ (8016170 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	68ba      	ldr	r2, [r7, #8]
 801614a:	429a      	cmp	r2, r3
 801614c:	d202      	bcs.n	8016154 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801614e:	4a08      	ldr	r2, [pc, #32]	@ (8016170 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016150:	68bb      	ldr	r3, [r7, #8]
 8016152:	6013      	str	r3, [r2, #0]
}
 8016154:	bf00      	nop
 8016156:	3710      	adds	r7, #16
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	20005908 	.word	0x20005908
 8016160:	20005430 	.word	0x20005430
 8016164:	200058f0 	.word	0x200058f0
 8016168:	200058c0 	.word	0x200058c0
 801616c:	200058bc 	.word	0x200058bc
 8016170:	20005924 	.word	0x20005924

08016174 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b08a      	sub	sp, #40	@ 0x28
 8016178:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801617a:	2300      	movs	r3, #0
 801617c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801617e:	f000 fb21 	bl	80167c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016182:	4b1e      	ldr	r3, [pc, #120]	@ (80161fc <xTimerCreateTimerTask+0x88>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d021      	beq.n	80161ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801618a:	2300      	movs	r3, #0
 801618c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801618e:	2300      	movs	r3, #0
 8016190:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016192:	1d3a      	adds	r2, r7, #4
 8016194:	f107 0108 	add.w	r1, r7, #8
 8016198:	f107 030c 	add.w	r3, r7, #12
 801619c:	4618      	mov	r0, r3
 801619e:	f7fd fa37 	bl	8013610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80161a2:	6879      	ldr	r1, [r7, #4]
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	68fa      	ldr	r2, [r7, #12]
 80161a8:	9202      	str	r2, [sp, #8]
 80161aa:	9301      	str	r3, [sp, #4]
 80161ac:	2302      	movs	r3, #2
 80161ae:	9300      	str	r3, [sp, #0]
 80161b0:	2300      	movs	r3, #0
 80161b2:	460a      	mov	r2, r1
 80161b4:	4912      	ldr	r1, [pc, #72]	@ (8016200 <xTimerCreateTimerTask+0x8c>)
 80161b6:	4813      	ldr	r0, [pc, #76]	@ (8016204 <xTimerCreateTimerTask+0x90>)
 80161b8:	f7fe fc68 	bl	8014a8c <xTaskCreateStatic>
 80161bc:	4603      	mov	r3, r0
 80161be:	4a12      	ldr	r2, [pc, #72]	@ (8016208 <xTimerCreateTimerTask+0x94>)
 80161c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80161c2:	4b11      	ldr	r3, [pc, #68]	@ (8016208 <xTimerCreateTimerTask+0x94>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d001      	beq.n	80161ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80161ca:	2301      	movs	r3, #1
 80161cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d10d      	bne.n	80161f0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80161d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161d8:	b672      	cpsid	i
 80161da:	f383 8811 	msr	BASEPRI, r3
 80161de:	f3bf 8f6f 	isb	sy
 80161e2:	f3bf 8f4f 	dsb	sy
 80161e6:	b662      	cpsie	i
 80161e8:	613b      	str	r3, [r7, #16]
}
 80161ea:	bf00      	nop
 80161ec:	bf00      	nop
 80161ee:	e7fd      	b.n	80161ec <xTimerCreateTimerTask+0x78>
	return xReturn;
 80161f0:	697b      	ldr	r3, [r7, #20]
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	3718      	adds	r7, #24
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
 80161fa:	bf00      	nop
 80161fc:	20005960 	.word	0x20005960
 8016200:	08018848 	.word	0x08018848
 8016204:	0801634d 	.word	0x0801634d
 8016208:	20005964 	.word	0x20005964

0801620c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b08a      	sub	sp, #40	@ 0x28
 8016210:	af00      	add	r7, sp, #0
 8016212:	60f8      	str	r0, [r7, #12]
 8016214:	60b9      	str	r1, [r7, #8]
 8016216:	607a      	str	r2, [r7, #4]
 8016218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801621a:	2300      	movs	r3, #0
 801621c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d10d      	bne.n	8016240 <xTimerGenericCommand+0x34>
	__asm volatile
 8016224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016228:	b672      	cpsid	i
 801622a:	f383 8811 	msr	BASEPRI, r3
 801622e:	f3bf 8f6f 	isb	sy
 8016232:	f3bf 8f4f 	dsb	sy
 8016236:	b662      	cpsie	i
 8016238:	623b      	str	r3, [r7, #32]
}
 801623a:	bf00      	nop
 801623c:	bf00      	nop
 801623e:	e7fd      	b.n	801623c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016240:	4b19      	ldr	r3, [pc, #100]	@ (80162a8 <xTimerGenericCommand+0x9c>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d02a      	beq.n	801629e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	2b05      	cmp	r3, #5
 8016258:	dc18      	bgt.n	801628c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801625a:	f7ff fb73 	bl	8015944 <xTaskGetSchedulerState>
 801625e:	4603      	mov	r3, r0
 8016260:	2b02      	cmp	r3, #2
 8016262:	d109      	bne.n	8016278 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016264:	4b10      	ldr	r3, [pc, #64]	@ (80162a8 <xTimerGenericCommand+0x9c>)
 8016266:	6818      	ldr	r0, [r3, #0]
 8016268:	f107 0110 	add.w	r1, r7, #16
 801626c:	2300      	movs	r3, #0
 801626e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016270:	f7fd fe40 	bl	8013ef4 <xQueueGenericSend>
 8016274:	6278      	str	r0, [r7, #36]	@ 0x24
 8016276:	e012      	b.n	801629e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016278:	4b0b      	ldr	r3, [pc, #44]	@ (80162a8 <xTimerGenericCommand+0x9c>)
 801627a:	6818      	ldr	r0, [r3, #0]
 801627c:	f107 0110 	add.w	r1, r7, #16
 8016280:	2300      	movs	r3, #0
 8016282:	2200      	movs	r2, #0
 8016284:	f7fd fe36 	bl	8013ef4 <xQueueGenericSend>
 8016288:	6278      	str	r0, [r7, #36]	@ 0x24
 801628a:	e008      	b.n	801629e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801628c:	4b06      	ldr	r3, [pc, #24]	@ (80162a8 <xTimerGenericCommand+0x9c>)
 801628e:	6818      	ldr	r0, [r3, #0]
 8016290:	f107 0110 	add.w	r1, r7, #16
 8016294:	2300      	movs	r3, #0
 8016296:	683a      	ldr	r2, [r7, #0]
 8016298:	f7fd ff36 	bl	8014108 <xQueueGenericSendFromISR>
 801629c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3728      	adds	r7, #40	@ 0x28
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	20005960 	.word	0x20005960

080162ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b088      	sub	sp, #32
 80162b0:	af02      	add	r7, sp, #8
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162b6:	4b24      	ldr	r3, [pc, #144]	@ (8016348 <prvProcessExpiredTimer+0x9c>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	68db      	ldr	r3, [r3, #12]
 80162be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	3304      	adds	r3, #4
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7fd fc62 	bl	8013b8e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80162d0:	f003 0304 	and.w	r3, r3, #4
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d025      	beq.n	8016324 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80162d8:	697b      	ldr	r3, [r7, #20]
 80162da:	699a      	ldr	r2, [r3, #24]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	18d1      	adds	r1, r2, r3
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	683a      	ldr	r2, [r7, #0]
 80162e4:	6978      	ldr	r0, [r7, #20]
 80162e6:	f000 f8d7 	bl	8016498 <prvInsertTimerInActiveList>
 80162ea:	4603      	mov	r3, r0
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d022      	beq.n	8016336 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80162f0:	2300      	movs	r3, #0
 80162f2:	9300      	str	r3, [sp, #0]
 80162f4:	2300      	movs	r3, #0
 80162f6:	687a      	ldr	r2, [r7, #4]
 80162f8:	2100      	movs	r1, #0
 80162fa:	6978      	ldr	r0, [r7, #20]
 80162fc:	f7ff ff86 	bl	801620c <xTimerGenericCommand>
 8016300:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016302:	693b      	ldr	r3, [r7, #16]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d116      	bne.n	8016336 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8016308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801630c:	b672      	cpsid	i
 801630e:	f383 8811 	msr	BASEPRI, r3
 8016312:	f3bf 8f6f 	isb	sy
 8016316:	f3bf 8f4f 	dsb	sy
 801631a:	b662      	cpsie	i
 801631c:	60fb      	str	r3, [r7, #12]
}
 801631e:	bf00      	nop
 8016320:	bf00      	nop
 8016322:	e7fd      	b.n	8016320 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801632a:	f023 0301 	bic.w	r3, r3, #1
 801632e:	b2da      	uxtb	r2, r3
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016336:	697b      	ldr	r3, [r7, #20]
 8016338:	6a1b      	ldr	r3, [r3, #32]
 801633a:	6978      	ldr	r0, [r7, #20]
 801633c:	4798      	blx	r3
}
 801633e:	bf00      	nop
 8016340:	3718      	adds	r7, #24
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	20005958 	.word	0x20005958

0801634c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016354:	f107 0308 	add.w	r3, r7, #8
 8016358:	4618      	mov	r0, r3
 801635a:	f000 f859 	bl	8016410 <prvGetNextExpireTime>
 801635e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	4619      	mov	r1, r3
 8016364:	68f8      	ldr	r0, [r7, #12]
 8016366:	f000 f805 	bl	8016374 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801636a:	f000 f8d7 	bl	801651c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801636e:	bf00      	nop
 8016370:	e7f0      	b.n	8016354 <prvTimerTask+0x8>
	...

08016374 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b084      	sub	sp, #16
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
 801637c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801637e:	f7fe fdf7 	bl	8014f70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016382:	f107 0308 	add.w	r3, r7, #8
 8016386:	4618      	mov	r0, r3
 8016388:	f000 f866 	bl	8016458 <prvSampleTimeNow>
 801638c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801638e:	68bb      	ldr	r3, [r7, #8]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d130      	bne.n	80163f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d10a      	bne.n	80163b0 <prvProcessTimerOrBlockTask+0x3c>
 801639a:	687a      	ldr	r2, [r7, #4]
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	429a      	cmp	r2, r3
 80163a0:	d806      	bhi.n	80163b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80163a2:	f7fe fdf3 	bl	8014f8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80163a6:	68f9      	ldr	r1, [r7, #12]
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f7ff ff7f 	bl	80162ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80163ae:	e024      	b.n	80163fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d008      	beq.n	80163c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80163b6:	4b13      	ldr	r3, [pc, #76]	@ (8016404 <prvProcessTimerOrBlockTask+0x90>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d101      	bne.n	80163c4 <prvProcessTimerOrBlockTask+0x50>
 80163c0:	2301      	movs	r3, #1
 80163c2:	e000      	b.n	80163c6 <prvProcessTimerOrBlockTask+0x52>
 80163c4:	2300      	movs	r3, #0
 80163c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80163c8:	4b0f      	ldr	r3, [pc, #60]	@ (8016408 <prvProcessTimerOrBlockTask+0x94>)
 80163ca:	6818      	ldr	r0, [r3, #0]
 80163cc:	687a      	ldr	r2, [r7, #4]
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	1ad3      	subs	r3, r2, r3
 80163d2:	683a      	ldr	r2, [r7, #0]
 80163d4:	4619      	mov	r1, r3
 80163d6:	f7fe fb25 	bl	8014a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80163da:	f7fe fdd7 	bl	8014f8c <xTaskResumeAll>
 80163de:	4603      	mov	r3, r0
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d10a      	bne.n	80163fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80163e4:	4b09      	ldr	r3, [pc, #36]	@ (801640c <prvProcessTimerOrBlockTask+0x98>)
 80163e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80163ea:	601a      	str	r2, [r3, #0]
 80163ec:	f3bf 8f4f 	dsb	sy
 80163f0:	f3bf 8f6f 	isb	sy
}
 80163f4:	e001      	b.n	80163fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80163f6:	f7fe fdc9 	bl	8014f8c <xTaskResumeAll>
}
 80163fa:	bf00      	nop
 80163fc:	3710      	adds	r7, #16
 80163fe:	46bd      	mov	sp, r7
 8016400:	bd80      	pop	{r7, pc}
 8016402:	bf00      	nop
 8016404:	2000595c 	.word	0x2000595c
 8016408:	20005960 	.word	0x20005960
 801640c:	e000ed04 	.word	0xe000ed04

08016410 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016410:	b480      	push	{r7}
 8016412:	b085      	sub	sp, #20
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016418:	4b0e      	ldr	r3, [pc, #56]	@ (8016454 <prvGetNextExpireTime+0x44>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d101      	bne.n	8016426 <prvGetNextExpireTime+0x16>
 8016422:	2201      	movs	r2, #1
 8016424:	e000      	b.n	8016428 <prvGetNextExpireTime+0x18>
 8016426:	2200      	movs	r2, #0
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d105      	bne.n	8016440 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016434:	4b07      	ldr	r3, [pc, #28]	@ (8016454 <prvGetNextExpireTime+0x44>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	68db      	ldr	r3, [r3, #12]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	60fb      	str	r3, [r7, #12]
 801643e:	e001      	b.n	8016444 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016440:	2300      	movs	r3, #0
 8016442:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016444:	68fb      	ldr	r3, [r7, #12]
}
 8016446:	4618      	mov	r0, r3
 8016448:	3714      	adds	r7, #20
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr
 8016452:	bf00      	nop
 8016454:	20005958 	.word	0x20005958

08016458 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b084      	sub	sp, #16
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016460:	f7fe fe34 	bl	80150cc <xTaskGetTickCount>
 8016464:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016466:	4b0b      	ldr	r3, [pc, #44]	@ (8016494 <prvSampleTimeNow+0x3c>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	68fa      	ldr	r2, [r7, #12]
 801646c:	429a      	cmp	r2, r3
 801646e:	d205      	bcs.n	801647c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016470:	f000 f940 	bl	80166f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2201      	movs	r2, #1
 8016478:	601a      	str	r2, [r3, #0]
 801647a:	e002      	b.n	8016482 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2200      	movs	r2, #0
 8016480:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016482:	4a04      	ldr	r2, [pc, #16]	@ (8016494 <prvSampleTimeNow+0x3c>)
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016488:	68fb      	ldr	r3, [r7, #12]
}
 801648a:	4618      	mov	r0, r3
 801648c:	3710      	adds	r7, #16
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
 8016492:	bf00      	nop
 8016494:	20005968 	.word	0x20005968

08016498 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b086      	sub	sp, #24
 801649c:	af00      	add	r7, sp, #0
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	60b9      	str	r1, [r7, #8]
 80164a2:	607a      	str	r2, [r7, #4]
 80164a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80164a6:	2300      	movs	r3, #0
 80164a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	68ba      	ldr	r2, [r7, #8]
 80164ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	68fa      	ldr	r2, [r7, #12]
 80164b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80164b6:	68ba      	ldr	r2, [r7, #8]
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d812      	bhi.n	80164e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	683b      	ldr	r3, [r7, #0]
 80164c2:	1ad2      	subs	r2, r2, r3
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	699b      	ldr	r3, [r3, #24]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d302      	bcc.n	80164d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80164cc:	2301      	movs	r3, #1
 80164ce:	617b      	str	r3, [r7, #20]
 80164d0:	e01b      	b.n	801650a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80164d2:	4b10      	ldr	r3, [pc, #64]	@ (8016514 <prvInsertTimerInActiveList+0x7c>)
 80164d4:	681a      	ldr	r2, [r3, #0]
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	3304      	adds	r3, #4
 80164da:	4619      	mov	r1, r3
 80164dc:	4610      	mov	r0, r2
 80164de:	f7fd fb1d 	bl	8013b1c <vListInsert>
 80164e2:	e012      	b.n	801650a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d206      	bcs.n	80164fa <prvInsertTimerInActiveList+0x62>
 80164ec:	68ba      	ldr	r2, [r7, #8]
 80164ee:	683b      	ldr	r3, [r7, #0]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d302      	bcc.n	80164fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80164f4:	2301      	movs	r3, #1
 80164f6:	617b      	str	r3, [r7, #20]
 80164f8:	e007      	b.n	801650a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80164fa:	4b07      	ldr	r3, [pc, #28]	@ (8016518 <prvInsertTimerInActiveList+0x80>)
 80164fc:	681a      	ldr	r2, [r3, #0]
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	3304      	adds	r3, #4
 8016502:	4619      	mov	r1, r3
 8016504:	4610      	mov	r0, r2
 8016506:	f7fd fb09 	bl	8013b1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 801650a:	697b      	ldr	r3, [r7, #20]
}
 801650c:	4618      	mov	r0, r3
 801650e:	3718      	adds	r7, #24
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}
 8016514:	2000595c 	.word	0x2000595c
 8016518:	20005958 	.word	0x20005958

0801651c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801651c:	b580      	push	{r7, lr}
 801651e:	b08e      	sub	sp, #56	@ 0x38
 8016520:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016522:	e0d4      	b.n	80166ce <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	2b00      	cmp	r3, #0
 8016528:	da1b      	bge.n	8016562 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801652a:	1d3b      	adds	r3, r7, #4
 801652c:	3304      	adds	r3, #4
 801652e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016532:	2b00      	cmp	r3, #0
 8016534:	d10d      	bne.n	8016552 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8016536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801653a:	b672      	cpsid	i
 801653c:	f383 8811 	msr	BASEPRI, r3
 8016540:	f3bf 8f6f 	isb	sy
 8016544:	f3bf 8f4f 	dsb	sy
 8016548:	b662      	cpsie	i
 801654a:	61fb      	str	r3, [r7, #28]
}
 801654c:	bf00      	nop
 801654e:	bf00      	nop
 8016550:	e7fd      	b.n	801654e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016558:	6850      	ldr	r0, [r2, #4]
 801655a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801655c:	6892      	ldr	r2, [r2, #8]
 801655e:	4611      	mov	r1, r2
 8016560:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2b00      	cmp	r3, #0
 8016566:	f2c0 80b2 	blt.w	80166ce <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016570:	695b      	ldr	r3, [r3, #20]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d004      	beq.n	8016580 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016578:	3304      	adds	r3, #4
 801657a:	4618      	mov	r0, r3
 801657c:	f7fd fb07 	bl	8013b8e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016580:	463b      	mov	r3, r7
 8016582:	4618      	mov	r0, r3
 8016584:	f7ff ff68 	bl	8016458 <prvSampleTimeNow>
 8016588:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2b09      	cmp	r3, #9
 801658e:	f200 809b 	bhi.w	80166c8 <prvProcessReceivedCommands+0x1ac>
 8016592:	a201      	add	r2, pc, #4	@ (adr r2, 8016598 <prvProcessReceivedCommands+0x7c>)
 8016594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016598:	080165c1 	.word	0x080165c1
 801659c:	080165c1 	.word	0x080165c1
 80165a0:	080165c1 	.word	0x080165c1
 80165a4:	0801663b 	.word	0x0801663b
 80165a8:	0801664f 	.word	0x0801664f
 80165ac:	0801669f 	.word	0x0801669f
 80165b0:	080165c1 	.word	0x080165c1
 80165b4:	080165c1 	.word	0x080165c1
 80165b8:	0801663b 	.word	0x0801663b
 80165bc:	0801664f 	.word	0x0801664f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80165c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80165c6:	f043 0301 	orr.w	r3, r3, #1
 80165ca:	b2da      	uxtb	r2, r3
 80165cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80165d2:	68ba      	ldr	r2, [r7, #8]
 80165d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165d6:	699b      	ldr	r3, [r3, #24]
 80165d8:	18d1      	adds	r1, r2, r3
 80165da:	68bb      	ldr	r3, [r7, #8]
 80165dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80165e0:	f7ff ff5a 	bl	8016498 <prvInsertTimerInActiveList>
 80165e4:	4603      	mov	r3, r0
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d070      	beq.n	80166cc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80165ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165ec:	6a1b      	ldr	r3, [r3, #32]
 80165ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80165f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80165f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80165f8:	f003 0304 	and.w	r3, r3, #4
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d065      	beq.n	80166cc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016600:	68ba      	ldr	r2, [r7, #8]
 8016602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016604:	699b      	ldr	r3, [r3, #24]
 8016606:	441a      	add	r2, r3
 8016608:	2300      	movs	r3, #0
 801660a:	9300      	str	r3, [sp, #0]
 801660c:	2300      	movs	r3, #0
 801660e:	2100      	movs	r1, #0
 8016610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016612:	f7ff fdfb 	bl	801620c <xTimerGenericCommand>
 8016616:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016618:	6a3b      	ldr	r3, [r7, #32]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d156      	bne.n	80166cc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016622:	b672      	cpsid	i
 8016624:	f383 8811 	msr	BASEPRI, r3
 8016628:	f3bf 8f6f 	isb	sy
 801662c:	f3bf 8f4f 	dsb	sy
 8016630:	b662      	cpsie	i
 8016632:	61bb      	str	r3, [r7, #24]
}
 8016634:	bf00      	nop
 8016636:	bf00      	nop
 8016638:	e7fd      	b.n	8016636 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801663c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016640:	f023 0301 	bic.w	r3, r3, #1
 8016644:	b2da      	uxtb	r2, r3
 8016646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016648:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801664c:	e03f      	b.n	80166ce <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016654:	f043 0301 	orr.w	r3, r3, #1
 8016658:	b2da      	uxtb	r2, r3
 801665a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801665c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016660:	68ba      	ldr	r2, [r7, #8]
 8016662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016664:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016668:	699b      	ldr	r3, [r3, #24]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d10d      	bne.n	801668a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 801666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016672:	b672      	cpsid	i
 8016674:	f383 8811 	msr	BASEPRI, r3
 8016678:	f3bf 8f6f 	isb	sy
 801667c:	f3bf 8f4f 	dsb	sy
 8016680:	b662      	cpsie	i
 8016682:	617b      	str	r3, [r7, #20]
}
 8016684:	bf00      	nop
 8016686:	bf00      	nop
 8016688:	e7fd      	b.n	8016686 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801668c:	699a      	ldr	r2, [r3, #24]
 801668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016690:	18d1      	adds	r1, r2, r3
 8016692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016698:	f7ff fefe 	bl	8016498 <prvInsertTimerInActiveList>
					break;
 801669c:	e017      	b.n	80166ce <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80166a4:	f003 0302 	and.w	r3, r3, #2
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d103      	bne.n	80166b4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80166ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80166ae:	f000 fbd1 	bl	8016e54 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80166b2:	e00c      	b.n	80166ce <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80166b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80166ba:	f023 0301 	bic.w	r3, r3, #1
 80166be:	b2da      	uxtb	r2, r3
 80166c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80166c6:	e002      	b.n	80166ce <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80166c8:	bf00      	nop
 80166ca:	e000      	b.n	80166ce <prvProcessReceivedCommands+0x1b2>
					break;
 80166cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80166ce:	4b08      	ldr	r3, [pc, #32]	@ (80166f0 <prvProcessReceivedCommands+0x1d4>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	1d39      	adds	r1, r7, #4
 80166d4:	2200      	movs	r2, #0
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7fd fdba 	bl	8014250 <xQueueReceive>
 80166dc:	4603      	mov	r3, r0
 80166de:	2b00      	cmp	r3, #0
 80166e0:	f47f af20 	bne.w	8016524 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80166e4:	bf00      	nop
 80166e6:	bf00      	nop
 80166e8:	3730      	adds	r7, #48	@ 0x30
 80166ea:	46bd      	mov	sp, r7
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	bf00      	nop
 80166f0:	20005960 	.word	0x20005960

080166f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b088      	sub	sp, #32
 80166f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80166fa:	e04b      	b.n	8016794 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80166fc:	4b2f      	ldr	r3, [pc, #188]	@ (80167bc <prvSwitchTimerLists+0xc8>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016706:	4b2d      	ldr	r3, [pc, #180]	@ (80167bc <prvSwitchTimerLists+0xc8>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	68db      	ldr	r3, [r3, #12]
 801670c:	68db      	ldr	r3, [r3, #12]
 801670e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	3304      	adds	r3, #4
 8016714:	4618      	mov	r0, r3
 8016716:	f7fd fa3a 	bl	8013b8e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	6a1b      	ldr	r3, [r3, #32]
 801671e:	68f8      	ldr	r0, [r7, #12]
 8016720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016728:	f003 0304 	and.w	r3, r3, #4
 801672c:	2b00      	cmp	r3, #0
 801672e:	d031      	beq.n	8016794 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	699b      	ldr	r3, [r3, #24]
 8016734:	693a      	ldr	r2, [r7, #16]
 8016736:	4413      	add	r3, r2
 8016738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801673a:	68ba      	ldr	r2, [r7, #8]
 801673c:	693b      	ldr	r3, [r7, #16]
 801673e:	429a      	cmp	r2, r3
 8016740:	d90e      	bls.n	8016760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	68ba      	ldr	r2, [r7, #8]
 8016746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	68fa      	ldr	r2, [r7, #12]
 801674c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801674e:	4b1b      	ldr	r3, [pc, #108]	@ (80167bc <prvSwitchTimerLists+0xc8>)
 8016750:	681a      	ldr	r2, [r3, #0]
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	3304      	adds	r3, #4
 8016756:	4619      	mov	r1, r3
 8016758:	4610      	mov	r0, r2
 801675a:	f7fd f9df 	bl	8013b1c <vListInsert>
 801675e:	e019      	b.n	8016794 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016760:	2300      	movs	r3, #0
 8016762:	9300      	str	r3, [sp, #0]
 8016764:	2300      	movs	r3, #0
 8016766:	693a      	ldr	r2, [r7, #16]
 8016768:	2100      	movs	r1, #0
 801676a:	68f8      	ldr	r0, [r7, #12]
 801676c:	f7ff fd4e 	bl	801620c <xTimerGenericCommand>
 8016770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d10d      	bne.n	8016794 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8016778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801677c:	b672      	cpsid	i
 801677e:	f383 8811 	msr	BASEPRI, r3
 8016782:	f3bf 8f6f 	isb	sy
 8016786:	f3bf 8f4f 	dsb	sy
 801678a:	b662      	cpsie	i
 801678c:	603b      	str	r3, [r7, #0]
}
 801678e:	bf00      	nop
 8016790:	bf00      	nop
 8016792:	e7fd      	b.n	8016790 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016794:	4b09      	ldr	r3, [pc, #36]	@ (80167bc <prvSwitchTimerLists+0xc8>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d1ae      	bne.n	80166fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801679e:	4b07      	ldr	r3, [pc, #28]	@ (80167bc <prvSwitchTimerLists+0xc8>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80167a4:	4b06      	ldr	r3, [pc, #24]	@ (80167c0 <prvSwitchTimerLists+0xcc>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4a04      	ldr	r2, [pc, #16]	@ (80167bc <prvSwitchTimerLists+0xc8>)
 80167aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80167ac:	4a04      	ldr	r2, [pc, #16]	@ (80167c0 <prvSwitchTimerLists+0xcc>)
 80167ae:	697b      	ldr	r3, [r7, #20]
 80167b0:	6013      	str	r3, [r2, #0]
}
 80167b2:	bf00      	nop
 80167b4:	3718      	adds	r7, #24
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}
 80167ba:	bf00      	nop
 80167bc:	20005958 	.word	0x20005958
 80167c0:	2000595c 	.word	0x2000595c

080167c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b082      	sub	sp, #8
 80167c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80167ca:	f000 f947 	bl	8016a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80167ce:	4b15      	ldr	r3, [pc, #84]	@ (8016824 <prvCheckForValidListAndQueue+0x60>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d120      	bne.n	8016818 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80167d6:	4814      	ldr	r0, [pc, #80]	@ (8016828 <prvCheckForValidListAndQueue+0x64>)
 80167d8:	f7fd f94f 	bl	8013a7a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80167dc:	4813      	ldr	r0, [pc, #76]	@ (801682c <prvCheckForValidListAndQueue+0x68>)
 80167de:	f7fd f94c 	bl	8013a7a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80167e2:	4b13      	ldr	r3, [pc, #76]	@ (8016830 <prvCheckForValidListAndQueue+0x6c>)
 80167e4:	4a10      	ldr	r2, [pc, #64]	@ (8016828 <prvCheckForValidListAndQueue+0x64>)
 80167e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80167e8:	4b12      	ldr	r3, [pc, #72]	@ (8016834 <prvCheckForValidListAndQueue+0x70>)
 80167ea:	4a10      	ldr	r2, [pc, #64]	@ (801682c <prvCheckForValidListAndQueue+0x68>)
 80167ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80167ee:	2300      	movs	r3, #0
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	4b11      	ldr	r3, [pc, #68]	@ (8016838 <prvCheckForValidListAndQueue+0x74>)
 80167f4:	4a11      	ldr	r2, [pc, #68]	@ (801683c <prvCheckForValidListAndQueue+0x78>)
 80167f6:	2110      	movs	r1, #16
 80167f8:	200a      	movs	r0, #10
 80167fa:	f7fd fa5f 	bl	8013cbc <xQueueGenericCreateStatic>
 80167fe:	4603      	mov	r3, r0
 8016800:	4a08      	ldr	r2, [pc, #32]	@ (8016824 <prvCheckForValidListAndQueue+0x60>)
 8016802:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016804:	4b07      	ldr	r3, [pc, #28]	@ (8016824 <prvCheckForValidListAndQueue+0x60>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d005      	beq.n	8016818 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801680c:	4b05      	ldr	r3, [pc, #20]	@ (8016824 <prvCheckForValidListAndQueue+0x60>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	490b      	ldr	r1, [pc, #44]	@ (8016840 <prvCheckForValidListAndQueue+0x7c>)
 8016812:	4618      	mov	r0, r3
 8016814:	f7fe f8b2 	bl	801497c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016818:	f000 f956 	bl	8016ac8 <vPortExitCritical>
}
 801681c:	bf00      	nop
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	20005960 	.word	0x20005960
 8016828:	20005930 	.word	0x20005930
 801682c:	20005944 	.word	0x20005944
 8016830:	20005958 	.word	0x20005958
 8016834:	2000595c 	.word	0x2000595c
 8016838:	20005a0c 	.word	0x20005a0c
 801683c:	2000596c 	.word	0x2000596c
 8016840:	08018850 	.word	0x08018850

08016844 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016844:	b480      	push	{r7}
 8016846:	b085      	sub	sp, #20
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	3b04      	subs	r3, #4
 8016854:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801685c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	3b04      	subs	r3, #4
 8016862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	f023 0201 	bic.w	r2, r3, #1
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	3b04      	subs	r3, #4
 8016872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016874:	4a0c      	ldr	r2, [pc, #48]	@ (80168a8 <pxPortInitialiseStack+0x64>)
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	3b14      	subs	r3, #20
 801687e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016880:	687a      	ldr	r2, [r7, #4]
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	3b04      	subs	r3, #4
 801688a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	f06f 0202 	mvn.w	r2, #2
 8016892:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	3b20      	subs	r3, #32
 8016898:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801689a:	68fb      	ldr	r3, [r7, #12]
}
 801689c:	4618      	mov	r0, r3
 801689e:	3714      	adds	r7, #20
 80168a0:	46bd      	mov	sp, r7
 80168a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a6:	4770      	bx	lr
 80168a8:	080168ad 	.word	0x080168ad

080168ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80168ac:	b480      	push	{r7}
 80168ae:	b085      	sub	sp, #20
 80168b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80168b2:	2300      	movs	r3, #0
 80168b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80168b6:	4b15      	ldr	r3, [pc, #84]	@ (801690c <prvTaskExitError+0x60>)
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168be:	d00d      	beq.n	80168dc <prvTaskExitError+0x30>
	__asm volatile
 80168c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168c4:	b672      	cpsid	i
 80168c6:	f383 8811 	msr	BASEPRI, r3
 80168ca:	f3bf 8f6f 	isb	sy
 80168ce:	f3bf 8f4f 	dsb	sy
 80168d2:	b662      	cpsie	i
 80168d4:	60fb      	str	r3, [r7, #12]
}
 80168d6:	bf00      	nop
 80168d8:	bf00      	nop
 80168da:	e7fd      	b.n	80168d8 <prvTaskExitError+0x2c>
	__asm volatile
 80168dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168e0:	b672      	cpsid	i
 80168e2:	f383 8811 	msr	BASEPRI, r3
 80168e6:	f3bf 8f6f 	isb	sy
 80168ea:	f3bf 8f4f 	dsb	sy
 80168ee:	b662      	cpsie	i
 80168f0:	60bb      	str	r3, [r7, #8]
}
 80168f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80168f4:	bf00      	nop
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d0fc      	beq.n	80168f6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80168fc:	bf00      	nop
 80168fe:	bf00      	nop
 8016900:	3714      	adds	r7, #20
 8016902:	46bd      	mov	sp, r7
 8016904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016908:	4770      	bx	lr
 801690a:	bf00      	nop
 801690c:	2000001c 	.word	0x2000001c

08016910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016910:	4b07      	ldr	r3, [pc, #28]	@ (8016930 <pxCurrentTCBConst2>)
 8016912:	6819      	ldr	r1, [r3, #0]
 8016914:	6808      	ldr	r0, [r1, #0]
 8016916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801691a:	f380 8809 	msr	PSP, r0
 801691e:	f3bf 8f6f 	isb	sy
 8016922:	f04f 0000 	mov.w	r0, #0
 8016926:	f380 8811 	msr	BASEPRI, r0
 801692a:	4770      	bx	lr
 801692c:	f3af 8000 	nop.w

08016930 <pxCurrentTCBConst2>:
 8016930:	20005430 	.word	0x20005430
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016934:	bf00      	nop
 8016936:	bf00      	nop

08016938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016938:	4808      	ldr	r0, [pc, #32]	@ (801695c <prvPortStartFirstTask+0x24>)
 801693a:	6800      	ldr	r0, [r0, #0]
 801693c:	6800      	ldr	r0, [r0, #0]
 801693e:	f380 8808 	msr	MSP, r0
 8016942:	f04f 0000 	mov.w	r0, #0
 8016946:	f380 8814 	msr	CONTROL, r0
 801694a:	b662      	cpsie	i
 801694c:	b661      	cpsie	f
 801694e:	f3bf 8f4f 	dsb	sy
 8016952:	f3bf 8f6f 	isb	sy
 8016956:	df00      	svc	0
 8016958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801695a:	bf00      	nop
 801695c:	e000ed08 	.word	0xe000ed08

08016960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b084      	sub	sp, #16
 8016964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016966:	4b37      	ldr	r3, [pc, #220]	@ (8016a44 <xPortStartScheduler+0xe4>)
 8016968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	b2db      	uxtb	r3, r3
 8016970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	22ff      	movs	r2, #255	@ 0xff
 8016976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	b2db      	uxtb	r3, r3
 801697e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016980:	78fb      	ldrb	r3, [r7, #3]
 8016982:	b2db      	uxtb	r3, r3
 8016984:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016988:	b2da      	uxtb	r2, r3
 801698a:	4b2f      	ldr	r3, [pc, #188]	@ (8016a48 <xPortStartScheduler+0xe8>)
 801698c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801698e:	4b2f      	ldr	r3, [pc, #188]	@ (8016a4c <xPortStartScheduler+0xec>)
 8016990:	2207      	movs	r2, #7
 8016992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016994:	e009      	b.n	80169aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016996:	4b2d      	ldr	r3, [pc, #180]	@ (8016a4c <xPortStartScheduler+0xec>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	3b01      	subs	r3, #1
 801699c:	4a2b      	ldr	r2, [pc, #172]	@ (8016a4c <xPortStartScheduler+0xec>)
 801699e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80169a0:	78fb      	ldrb	r3, [r7, #3]
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	005b      	lsls	r3, r3, #1
 80169a6:	b2db      	uxtb	r3, r3
 80169a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169aa:	78fb      	ldrb	r3, [r7, #3]
 80169ac:	b2db      	uxtb	r3, r3
 80169ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80169b2:	2b80      	cmp	r3, #128	@ 0x80
 80169b4:	d0ef      	beq.n	8016996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80169b6:	4b25      	ldr	r3, [pc, #148]	@ (8016a4c <xPortStartScheduler+0xec>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	f1c3 0307 	rsb	r3, r3, #7
 80169be:	2b04      	cmp	r3, #4
 80169c0:	d00d      	beq.n	80169de <xPortStartScheduler+0x7e>
	__asm volatile
 80169c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169c6:	b672      	cpsid	i
 80169c8:	f383 8811 	msr	BASEPRI, r3
 80169cc:	f3bf 8f6f 	isb	sy
 80169d0:	f3bf 8f4f 	dsb	sy
 80169d4:	b662      	cpsie	i
 80169d6:	60bb      	str	r3, [r7, #8]
}
 80169d8:	bf00      	nop
 80169da:	bf00      	nop
 80169dc:	e7fd      	b.n	80169da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80169de:	4b1b      	ldr	r3, [pc, #108]	@ (8016a4c <xPortStartScheduler+0xec>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	021b      	lsls	r3, r3, #8
 80169e4:	4a19      	ldr	r2, [pc, #100]	@ (8016a4c <xPortStartScheduler+0xec>)
 80169e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80169e8:	4b18      	ldr	r3, [pc, #96]	@ (8016a4c <xPortStartScheduler+0xec>)
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80169f0:	4a16      	ldr	r2, [pc, #88]	@ (8016a4c <xPortStartScheduler+0xec>)
 80169f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	b2da      	uxtb	r2, r3
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80169fc:	4b14      	ldr	r3, [pc, #80]	@ (8016a50 <xPortStartScheduler+0xf0>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	4a13      	ldr	r2, [pc, #76]	@ (8016a50 <xPortStartScheduler+0xf0>)
 8016a02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016a06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016a08:	4b11      	ldr	r3, [pc, #68]	@ (8016a50 <xPortStartScheduler+0xf0>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	4a10      	ldr	r2, [pc, #64]	@ (8016a50 <xPortStartScheduler+0xf0>)
 8016a0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016a12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016a14:	f000 f8dc 	bl	8016bd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016a18:	4b0e      	ldr	r3, [pc, #56]	@ (8016a54 <xPortStartScheduler+0xf4>)
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016a1e:	f000 f8fb 	bl	8016c18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016a22:	4b0d      	ldr	r3, [pc, #52]	@ (8016a58 <xPortStartScheduler+0xf8>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	4a0c      	ldr	r2, [pc, #48]	@ (8016a58 <xPortStartScheduler+0xf8>)
 8016a28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016a2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016a2e:	f7ff ff83 	bl	8016938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a32:	f7fe fc17 	bl	8015264 <vTaskSwitchContext>
	prvTaskExitError();
 8016a36:	f7ff ff39 	bl	80168ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a3a:	2300      	movs	r3, #0
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3710      	adds	r7, #16
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}
 8016a44:	e000e400 	.word	0xe000e400
 8016a48:	20005a5c 	.word	0x20005a5c
 8016a4c:	20005a60 	.word	0x20005a60
 8016a50:	e000ed20 	.word	0xe000ed20
 8016a54:	2000001c 	.word	0x2000001c
 8016a58:	e000ef34 	.word	0xe000ef34

08016a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b083      	sub	sp, #12
 8016a60:	af00      	add	r7, sp, #0
	__asm volatile
 8016a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a66:	b672      	cpsid	i
 8016a68:	f383 8811 	msr	BASEPRI, r3
 8016a6c:	f3bf 8f6f 	isb	sy
 8016a70:	f3bf 8f4f 	dsb	sy
 8016a74:	b662      	cpsie	i
 8016a76:	607b      	str	r3, [r7, #4]
}
 8016a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016a7a:	4b11      	ldr	r3, [pc, #68]	@ (8016ac0 <vPortEnterCritical+0x64>)
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	3301      	adds	r3, #1
 8016a80:	4a0f      	ldr	r2, [pc, #60]	@ (8016ac0 <vPortEnterCritical+0x64>)
 8016a82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016a84:	4b0e      	ldr	r3, [pc, #56]	@ (8016ac0 <vPortEnterCritical+0x64>)
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	2b01      	cmp	r3, #1
 8016a8a:	d112      	bne.n	8016ab2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8016ac4 <vPortEnterCritical+0x68>)
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d00d      	beq.n	8016ab2 <vPortEnterCritical+0x56>
	__asm volatile
 8016a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a9a:	b672      	cpsid	i
 8016a9c:	f383 8811 	msr	BASEPRI, r3
 8016aa0:	f3bf 8f6f 	isb	sy
 8016aa4:	f3bf 8f4f 	dsb	sy
 8016aa8:	b662      	cpsie	i
 8016aaa:	603b      	str	r3, [r7, #0]
}
 8016aac:	bf00      	nop
 8016aae:	bf00      	nop
 8016ab0:	e7fd      	b.n	8016aae <vPortEnterCritical+0x52>
	}
}
 8016ab2:	bf00      	nop
 8016ab4:	370c      	adds	r7, #12
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016abc:	4770      	bx	lr
 8016abe:	bf00      	nop
 8016ac0:	2000001c 	.word	0x2000001c
 8016ac4:	e000ed04 	.word	0xe000ed04

08016ac8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b083      	sub	sp, #12
 8016acc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016ace:	4b13      	ldr	r3, [pc, #76]	@ (8016b1c <vPortExitCritical+0x54>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d10d      	bne.n	8016af2 <vPortExitCritical+0x2a>
	__asm volatile
 8016ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ada:	b672      	cpsid	i
 8016adc:	f383 8811 	msr	BASEPRI, r3
 8016ae0:	f3bf 8f6f 	isb	sy
 8016ae4:	f3bf 8f4f 	dsb	sy
 8016ae8:	b662      	cpsie	i
 8016aea:	607b      	str	r3, [r7, #4]
}
 8016aec:	bf00      	nop
 8016aee:	bf00      	nop
 8016af0:	e7fd      	b.n	8016aee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016af2:	4b0a      	ldr	r3, [pc, #40]	@ (8016b1c <vPortExitCritical+0x54>)
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	3b01      	subs	r3, #1
 8016af8:	4a08      	ldr	r2, [pc, #32]	@ (8016b1c <vPortExitCritical+0x54>)
 8016afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016afc:	4b07      	ldr	r3, [pc, #28]	@ (8016b1c <vPortExitCritical+0x54>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d105      	bne.n	8016b10 <vPortExitCritical+0x48>
 8016b04:	2300      	movs	r3, #0
 8016b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	f383 8811 	msr	BASEPRI, r3
}
 8016b0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016b10:	bf00      	nop
 8016b12:	370c      	adds	r7, #12
 8016b14:	46bd      	mov	sp, r7
 8016b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1a:	4770      	bx	lr
 8016b1c:	2000001c 	.word	0x2000001c

08016b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016b20:	f3ef 8009 	mrs	r0, PSP
 8016b24:	f3bf 8f6f 	isb	sy
 8016b28:	4b15      	ldr	r3, [pc, #84]	@ (8016b80 <pxCurrentTCBConst>)
 8016b2a:	681a      	ldr	r2, [r3, #0]
 8016b2c:	f01e 0f10 	tst.w	lr, #16
 8016b30:	bf08      	it	eq
 8016b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b3a:	6010      	str	r0, [r2, #0]
 8016b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016b44:	b672      	cpsid	i
 8016b46:	f380 8811 	msr	BASEPRI, r0
 8016b4a:	f3bf 8f4f 	dsb	sy
 8016b4e:	f3bf 8f6f 	isb	sy
 8016b52:	b662      	cpsie	i
 8016b54:	f7fe fb86 	bl	8015264 <vTaskSwitchContext>
 8016b58:	f04f 0000 	mov.w	r0, #0
 8016b5c:	f380 8811 	msr	BASEPRI, r0
 8016b60:	bc09      	pop	{r0, r3}
 8016b62:	6819      	ldr	r1, [r3, #0]
 8016b64:	6808      	ldr	r0, [r1, #0]
 8016b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b6a:	f01e 0f10 	tst.w	lr, #16
 8016b6e:	bf08      	it	eq
 8016b70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016b74:	f380 8809 	msr	PSP, r0
 8016b78:	f3bf 8f6f 	isb	sy
 8016b7c:	4770      	bx	lr
 8016b7e:	bf00      	nop

08016b80 <pxCurrentTCBConst>:
 8016b80:	20005430 	.word	0x20005430
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016b84:	bf00      	nop
 8016b86:	bf00      	nop

08016b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8016b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b92:	b672      	cpsid	i
 8016b94:	f383 8811 	msr	BASEPRI, r3
 8016b98:	f3bf 8f6f 	isb	sy
 8016b9c:	f3bf 8f4f 	dsb	sy
 8016ba0:	b662      	cpsie	i
 8016ba2:	607b      	str	r3, [r7, #4]
}
 8016ba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016ba6:	f7fe faa1 	bl	80150ec <xTaskIncrementTick>
 8016baa:	4603      	mov	r3, r0
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d003      	beq.n	8016bb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016bb0:	4b06      	ldr	r3, [pc, #24]	@ (8016bcc <SysTick_Handler+0x44>)
 8016bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016bb6:	601a      	str	r2, [r3, #0]
 8016bb8:	2300      	movs	r3, #0
 8016bba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016bbc:	683b      	ldr	r3, [r7, #0]
 8016bbe:	f383 8811 	msr	BASEPRI, r3
}
 8016bc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016bc4:	bf00      	nop
 8016bc6:	3708      	adds	r7, #8
 8016bc8:	46bd      	mov	sp, r7
 8016bca:	bd80      	pop	{r7, pc}
 8016bcc:	e000ed04 	.word	0xe000ed04

08016bd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016bd0:	b480      	push	{r7}
 8016bd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8016c04 <vPortSetupTimerInterrupt+0x34>)
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016bda:	4b0b      	ldr	r3, [pc, #44]	@ (8016c08 <vPortSetupTimerInterrupt+0x38>)
 8016bdc:	2200      	movs	r2, #0
 8016bde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016be0:	4b0a      	ldr	r3, [pc, #40]	@ (8016c0c <vPortSetupTimerInterrupt+0x3c>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	4a0a      	ldr	r2, [pc, #40]	@ (8016c10 <vPortSetupTimerInterrupt+0x40>)
 8016be6:	fba2 2303 	umull	r2, r3, r2, r3
 8016bea:	099b      	lsrs	r3, r3, #6
 8016bec:	4a09      	ldr	r2, [pc, #36]	@ (8016c14 <vPortSetupTimerInterrupt+0x44>)
 8016bee:	3b01      	subs	r3, #1
 8016bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016bf2:	4b04      	ldr	r3, [pc, #16]	@ (8016c04 <vPortSetupTimerInterrupt+0x34>)
 8016bf4:	2207      	movs	r2, #7
 8016bf6:	601a      	str	r2, [r3, #0]
}
 8016bf8:	bf00      	nop
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c00:	4770      	bx	lr
 8016c02:	bf00      	nop
 8016c04:	e000e010 	.word	0xe000e010
 8016c08:	e000e018 	.word	0xe000e018
 8016c0c:	20000000 	.word	0x20000000
 8016c10:	10624dd3 	.word	0x10624dd3
 8016c14:	e000e014 	.word	0xe000e014

08016c18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016c18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016c28 <vPortEnableVFP+0x10>
 8016c1c:	6801      	ldr	r1, [r0, #0]
 8016c1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016c22:	6001      	str	r1, [r0, #0]
 8016c24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016c26:	bf00      	nop
 8016c28:	e000ed88 	.word	0xe000ed88

08016c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016c2c:	b480      	push	{r7}
 8016c2e:	b085      	sub	sp, #20
 8016c30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016c32:	f3ef 8305 	mrs	r3, IPSR
 8016c36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	2b0f      	cmp	r3, #15
 8016c3c:	d917      	bls.n	8016c6e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8016ca8 <vPortValidateInterruptPriority+0x7c>)
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	4413      	add	r3, r2
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016c48:	4b18      	ldr	r3, [pc, #96]	@ (8016cac <vPortValidateInterruptPriority+0x80>)
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	7afa      	ldrb	r2, [r7, #11]
 8016c4e:	429a      	cmp	r2, r3
 8016c50:	d20d      	bcs.n	8016c6e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8016c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c56:	b672      	cpsid	i
 8016c58:	f383 8811 	msr	BASEPRI, r3
 8016c5c:	f3bf 8f6f 	isb	sy
 8016c60:	f3bf 8f4f 	dsb	sy
 8016c64:	b662      	cpsie	i
 8016c66:	607b      	str	r3, [r7, #4]
}
 8016c68:	bf00      	nop
 8016c6a:	bf00      	nop
 8016c6c:	e7fd      	b.n	8016c6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016c6e:	4b10      	ldr	r3, [pc, #64]	@ (8016cb0 <vPortValidateInterruptPriority+0x84>)
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016c76:	4b0f      	ldr	r3, [pc, #60]	@ (8016cb4 <vPortValidateInterruptPriority+0x88>)
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	429a      	cmp	r2, r3
 8016c7c:	d90d      	bls.n	8016c9a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8016c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c82:	b672      	cpsid	i
 8016c84:	f383 8811 	msr	BASEPRI, r3
 8016c88:	f3bf 8f6f 	isb	sy
 8016c8c:	f3bf 8f4f 	dsb	sy
 8016c90:	b662      	cpsie	i
 8016c92:	603b      	str	r3, [r7, #0]
}
 8016c94:	bf00      	nop
 8016c96:	bf00      	nop
 8016c98:	e7fd      	b.n	8016c96 <vPortValidateInterruptPriority+0x6a>
	}
 8016c9a:	bf00      	nop
 8016c9c:	3714      	adds	r7, #20
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca4:	4770      	bx	lr
 8016ca6:	bf00      	nop
 8016ca8:	e000e3f0 	.word	0xe000e3f0
 8016cac:	20005a5c 	.word	0x20005a5c
 8016cb0:	e000ed0c 	.word	0xe000ed0c
 8016cb4:	20005a60 	.word	0x20005a60

08016cb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b08a      	sub	sp, #40	@ 0x28
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016cc4:	f7fe f954 	bl	8014f70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8016e40 <pvPortMalloc+0x188>)
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d101      	bne.n	8016cd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016cd0:	f000 f92c 	bl	8016f2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8016e44 <pvPortMalloc+0x18c>)
 8016cd6:	681a      	ldr	r2, [r3, #0]
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	4013      	ands	r3, r2
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	f040 8094 	bne.w	8016e0a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d020      	beq.n	8016d2a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8016ce8:	2208      	movs	r2, #8
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	4413      	add	r3, r2
 8016cee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	f003 0307 	and.w	r3, r3, #7
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d017      	beq.n	8016d2a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f023 0307 	bic.w	r3, r3, #7
 8016d00:	3308      	adds	r3, #8
 8016d02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	f003 0307 	and.w	r3, r3, #7
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d00d      	beq.n	8016d2a <pvPortMalloc+0x72>
	__asm volatile
 8016d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d12:	b672      	cpsid	i
 8016d14:	f383 8811 	msr	BASEPRI, r3
 8016d18:	f3bf 8f6f 	isb	sy
 8016d1c:	f3bf 8f4f 	dsb	sy
 8016d20:	b662      	cpsie	i
 8016d22:	617b      	str	r3, [r7, #20]
}
 8016d24:	bf00      	nop
 8016d26:	bf00      	nop
 8016d28:	e7fd      	b.n	8016d26 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d06c      	beq.n	8016e0a <pvPortMalloc+0x152>
 8016d30:	4b45      	ldr	r3, [pc, #276]	@ (8016e48 <pvPortMalloc+0x190>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d867      	bhi.n	8016e0a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016d3a:	4b44      	ldr	r3, [pc, #272]	@ (8016e4c <pvPortMalloc+0x194>)
 8016d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016d3e:	4b43      	ldr	r3, [pc, #268]	@ (8016e4c <pvPortMalloc+0x194>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d44:	e004      	b.n	8016d50 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8016d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d52:	685b      	ldr	r3, [r3, #4]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d903      	bls.n	8016d62 <pvPortMalloc+0xaa>
 8016d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d1f1      	bne.n	8016d46 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016d62:	4b37      	ldr	r3, [pc, #220]	@ (8016e40 <pvPortMalloc+0x188>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d04e      	beq.n	8016e0a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016d6c:	6a3b      	ldr	r3, [r7, #32]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	2208      	movs	r2, #8
 8016d72:	4413      	add	r3, r2
 8016d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d78:	681a      	ldr	r2, [r3, #0]
 8016d7a:	6a3b      	ldr	r3, [r7, #32]
 8016d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d80:	685a      	ldr	r2, [r3, #4]
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	1ad2      	subs	r2, r2, r3
 8016d86:	2308      	movs	r3, #8
 8016d88:	005b      	lsls	r3, r3, #1
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d922      	bls.n	8016dd4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	4413      	add	r3, r2
 8016d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	f003 0307 	and.w	r3, r3, #7
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d00d      	beq.n	8016dbc <pvPortMalloc+0x104>
	__asm volatile
 8016da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016da4:	b672      	cpsid	i
 8016da6:	f383 8811 	msr	BASEPRI, r3
 8016daa:	f3bf 8f6f 	isb	sy
 8016dae:	f3bf 8f4f 	dsb	sy
 8016db2:	b662      	cpsie	i
 8016db4:	613b      	str	r3, [r7, #16]
}
 8016db6:	bf00      	nop
 8016db8:	bf00      	nop
 8016dba:	e7fd      	b.n	8016db8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dbe:	685a      	ldr	r2, [r3, #4]
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	1ad2      	subs	r2, r2, r3
 8016dc4:	69bb      	ldr	r3, [r7, #24]
 8016dc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dca:	687a      	ldr	r2, [r7, #4]
 8016dcc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016dce:	69b8      	ldr	r0, [r7, #24]
 8016dd0:	f000 f90e 	bl	8016ff0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8016e48 <pvPortMalloc+0x190>)
 8016dd6:	681a      	ldr	r2, [r3, #0]
 8016dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	1ad3      	subs	r3, r2, r3
 8016dde:	4a1a      	ldr	r2, [pc, #104]	@ (8016e48 <pvPortMalloc+0x190>)
 8016de0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016de2:	4b19      	ldr	r3, [pc, #100]	@ (8016e48 <pvPortMalloc+0x190>)
 8016de4:	681a      	ldr	r2, [r3, #0]
 8016de6:	4b1a      	ldr	r3, [pc, #104]	@ (8016e50 <pvPortMalloc+0x198>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	429a      	cmp	r2, r3
 8016dec:	d203      	bcs.n	8016df6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016dee:	4b16      	ldr	r3, [pc, #88]	@ (8016e48 <pvPortMalloc+0x190>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	4a17      	ldr	r2, [pc, #92]	@ (8016e50 <pvPortMalloc+0x198>)
 8016df4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df8:	685a      	ldr	r2, [r3, #4]
 8016dfa:	4b12      	ldr	r3, [pc, #72]	@ (8016e44 <pvPortMalloc+0x18c>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	431a      	orrs	r2, r3
 8016e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e06:	2200      	movs	r2, #0
 8016e08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016e0a:	f7fe f8bf 	bl	8014f8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e0e:	69fb      	ldr	r3, [r7, #28]
 8016e10:	f003 0307 	and.w	r3, r3, #7
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d00d      	beq.n	8016e34 <pvPortMalloc+0x17c>
	__asm volatile
 8016e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e1c:	b672      	cpsid	i
 8016e1e:	f383 8811 	msr	BASEPRI, r3
 8016e22:	f3bf 8f6f 	isb	sy
 8016e26:	f3bf 8f4f 	dsb	sy
 8016e2a:	b662      	cpsie	i
 8016e2c:	60fb      	str	r3, [r7, #12]
}
 8016e2e:	bf00      	nop
 8016e30:	bf00      	nop
 8016e32:	e7fd      	b.n	8016e30 <pvPortMalloc+0x178>
	return pvReturn;
 8016e34:	69fb      	ldr	r3, [r7, #28]
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3728      	adds	r7, #40	@ 0x28
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	2000966c 	.word	0x2000966c
 8016e44:	20009678 	.word	0x20009678
 8016e48:	20009670 	.word	0x20009670
 8016e4c:	20009664 	.word	0x20009664
 8016e50:	20009674 	.word	0x20009674

08016e54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b086      	sub	sp, #24
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d04e      	beq.n	8016f04 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016e66:	2308      	movs	r3, #8
 8016e68:	425b      	negs	r3, r3
 8016e6a:	697a      	ldr	r2, [r7, #20]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	685a      	ldr	r2, [r3, #4]
 8016e78:	4b24      	ldr	r3, [pc, #144]	@ (8016f0c <vPortFree+0xb8>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	4013      	ands	r3, r2
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d10d      	bne.n	8016e9e <vPortFree+0x4a>
	__asm volatile
 8016e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e86:	b672      	cpsid	i
 8016e88:	f383 8811 	msr	BASEPRI, r3
 8016e8c:	f3bf 8f6f 	isb	sy
 8016e90:	f3bf 8f4f 	dsb	sy
 8016e94:	b662      	cpsie	i
 8016e96:	60fb      	str	r3, [r7, #12]
}
 8016e98:	bf00      	nop
 8016e9a:	bf00      	nop
 8016e9c:	e7fd      	b.n	8016e9a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d00d      	beq.n	8016ec2 <vPortFree+0x6e>
	__asm volatile
 8016ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016eaa:	b672      	cpsid	i
 8016eac:	f383 8811 	msr	BASEPRI, r3
 8016eb0:	f3bf 8f6f 	isb	sy
 8016eb4:	f3bf 8f4f 	dsb	sy
 8016eb8:	b662      	cpsie	i
 8016eba:	60bb      	str	r3, [r7, #8]
}
 8016ebc:	bf00      	nop
 8016ebe:	bf00      	nop
 8016ec0:	e7fd      	b.n	8016ebe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ec2:	693b      	ldr	r3, [r7, #16]
 8016ec4:	685a      	ldr	r2, [r3, #4]
 8016ec6:	4b11      	ldr	r3, [pc, #68]	@ (8016f0c <vPortFree+0xb8>)
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	4013      	ands	r3, r2
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d019      	beq.n	8016f04 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d115      	bne.n	8016f04 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	685a      	ldr	r2, [r3, #4]
 8016edc:	4b0b      	ldr	r3, [pc, #44]	@ (8016f0c <vPortFree+0xb8>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	43db      	mvns	r3, r3
 8016ee2:	401a      	ands	r2, r3
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016ee8:	f7fe f842 	bl	8014f70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016eec:	693b      	ldr	r3, [r7, #16]
 8016eee:	685a      	ldr	r2, [r3, #4]
 8016ef0:	4b07      	ldr	r3, [pc, #28]	@ (8016f10 <vPortFree+0xbc>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	4413      	add	r3, r2
 8016ef6:	4a06      	ldr	r2, [pc, #24]	@ (8016f10 <vPortFree+0xbc>)
 8016ef8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016efa:	6938      	ldr	r0, [r7, #16]
 8016efc:	f000 f878 	bl	8016ff0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016f00:	f7fe f844 	bl	8014f8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016f04:	bf00      	nop
 8016f06:	3718      	adds	r7, #24
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	20009678 	.word	0x20009678
 8016f10:	20009670 	.word	0x20009670

08016f14 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8016f14:	b480      	push	{r7}
 8016f16:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8016f18:	4b03      	ldr	r3, [pc, #12]	@ (8016f28 <xPortGetFreeHeapSize+0x14>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f24:	4770      	bx	lr
 8016f26:	bf00      	nop
 8016f28:	20009670 	.word	0x20009670

08016f2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016f2c:	b480      	push	{r7}
 8016f2e:	b085      	sub	sp, #20
 8016f30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016f32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016f36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016f38:	4b27      	ldr	r3, [pc, #156]	@ (8016fd8 <prvHeapInit+0xac>)
 8016f3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	f003 0307 	and.w	r3, r3, #7
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d00c      	beq.n	8016f60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	3307      	adds	r3, #7
 8016f4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	f023 0307 	bic.w	r3, r3, #7
 8016f52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016f54:	68ba      	ldr	r2, [r7, #8]
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	1ad3      	subs	r3, r2, r3
 8016f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8016fd8 <prvHeapInit+0xac>)
 8016f5c:	4413      	add	r3, r2
 8016f5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016f64:	4a1d      	ldr	r2, [pc, #116]	@ (8016fdc <prvHeapInit+0xb0>)
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8016fdc <prvHeapInit+0xb0>)
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	68ba      	ldr	r2, [r7, #8]
 8016f74:	4413      	add	r3, r2
 8016f76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016f78:	2208      	movs	r2, #8
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	1a9b      	subs	r3, r3, r2
 8016f7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	f023 0307 	bic.w	r3, r3, #7
 8016f86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	4a15      	ldr	r2, [pc, #84]	@ (8016fe0 <prvHeapInit+0xb4>)
 8016f8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016f8e:	4b14      	ldr	r3, [pc, #80]	@ (8016fe0 <prvHeapInit+0xb4>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	2200      	movs	r2, #0
 8016f94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016f96:	4b12      	ldr	r3, [pc, #72]	@ (8016fe0 <prvHeapInit+0xb4>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	68fa      	ldr	r2, [r7, #12]
 8016fa6:	1ad2      	subs	r2, r2, r3
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016fac:	4b0c      	ldr	r3, [pc, #48]	@ (8016fe0 <prvHeapInit+0xb4>)
 8016fae:	681a      	ldr	r2, [r3, #0]
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	685b      	ldr	r3, [r3, #4]
 8016fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8016fe4 <prvHeapInit+0xb8>)
 8016fba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	4a09      	ldr	r2, [pc, #36]	@ (8016fe8 <prvHeapInit+0xbc>)
 8016fc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016fc4:	4b09      	ldr	r3, [pc, #36]	@ (8016fec <prvHeapInit+0xc0>)
 8016fc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016fca:	601a      	str	r2, [r3, #0]
}
 8016fcc:	bf00      	nop
 8016fce:	3714      	adds	r7, #20
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd6:	4770      	bx	lr
 8016fd8:	20005a64 	.word	0x20005a64
 8016fdc:	20009664 	.word	0x20009664
 8016fe0:	2000966c 	.word	0x2000966c
 8016fe4:	20009674 	.word	0x20009674
 8016fe8:	20009670 	.word	0x20009670
 8016fec:	20009678 	.word	0x20009678

08016ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016ff0:	b480      	push	{r7}
 8016ff2:	b085      	sub	sp, #20
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016ff8:	4b28      	ldr	r3, [pc, #160]	@ (801709c <prvInsertBlockIntoFreeList+0xac>)
 8016ffa:	60fb      	str	r3, [r7, #12]
 8016ffc:	e002      	b.n	8017004 <prvInsertBlockIntoFreeList+0x14>
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	60fb      	str	r3, [r7, #12]
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	687a      	ldr	r2, [r7, #4]
 801700a:	429a      	cmp	r2, r3
 801700c:	d8f7      	bhi.n	8016ffe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	685b      	ldr	r3, [r3, #4]
 8017016:	68ba      	ldr	r2, [r7, #8]
 8017018:	4413      	add	r3, r2
 801701a:	687a      	ldr	r2, [r7, #4]
 801701c:	429a      	cmp	r2, r3
 801701e:	d108      	bne.n	8017032 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	685a      	ldr	r2, [r3, #4]
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	441a      	add	r2, r3
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	685b      	ldr	r3, [r3, #4]
 801703a:	68ba      	ldr	r2, [r7, #8]
 801703c:	441a      	add	r2, r3
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	429a      	cmp	r2, r3
 8017044:	d118      	bne.n	8017078 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	681a      	ldr	r2, [r3, #0]
 801704a:	4b15      	ldr	r3, [pc, #84]	@ (80170a0 <prvInsertBlockIntoFreeList+0xb0>)
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	429a      	cmp	r2, r3
 8017050:	d00d      	beq.n	801706e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	685a      	ldr	r2, [r3, #4]
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	441a      	add	r2, r3
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	681a      	ldr	r2, [r3, #0]
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	601a      	str	r2, [r3, #0]
 801706c:	e008      	b.n	8017080 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801706e:	4b0c      	ldr	r3, [pc, #48]	@ (80170a0 <prvInsertBlockIntoFreeList+0xb0>)
 8017070:	681a      	ldr	r2, [r3, #0]
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	601a      	str	r2, [r3, #0]
 8017076:	e003      	b.n	8017080 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	681a      	ldr	r2, [r3, #0]
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017080:	68fa      	ldr	r2, [r7, #12]
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	429a      	cmp	r2, r3
 8017086:	d002      	beq.n	801708e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	687a      	ldr	r2, [r7, #4]
 801708c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801708e:	bf00      	nop
 8017090:	3714      	adds	r7, #20
 8017092:	46bd      	mov	sp, r7
 8017094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017098:	4770      	bx	lr
 801709a:	bf00      	nop
 801709c:	20009664 	.word	0x20009664
 80170a0:	2000966c 	.word	0x2000966c

080170a4 <rand>:
 80170a4:	4b16      	ldr	r3, [pc, #88]	@ (8017100 <rand+0x5c>)
 80170a6:	b510      	push	{r4, lr}
 80170a8:	681c      	ldr	r4, [r3, #0]
 80170aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80170ac:	b9b3      	cbnz	r3, 80170dc <rand+0x38>
 80170ae:	2018      	movs	r0, #24
 80170b0:	f000 fbf2 	bl	8017898 <malloc>
 80170b4:	4602      	mov	r2, r0
 80170b6:	6320      	str	r0, [r4, #48]	@ 0x30
 80170b8:	b920      	cbnz	r0, 80170c4 <rand+0x20>
 80170ba:	4b12      	ldr	r3, [pc, #72]	@ (8017104 <rand+0x60>)
 80170bc:	4812      	ldr	r0, [pc, #72]	@ (8017108 <rand+0x64>)
 80170be:	2152      	movs	r1, #82	@ 0x52
 80170c0:	f000 fb82 	bl	80177c8 <__assert_func>
 80170c4:	4911      	ldr	r1, [pc, #68]	@ (801710c <rand+0x68>)
 80170c6:	4b12      	ldr	r3, [pc, #72]	@ (8017110 <rand+0x6c>)
 80170c8:	e9c0 1300 	strd	r1, r3, [r0]
 80170cc:	4b11      	ldr	r3, [pc, #68]	@ (8017114 <rand+0x70>)
 80170ce:	6083      	str	r3, [r0, #8]
 80170d0:	230b      	movs	r3, #11
 80170d2:	8183      	strh	r3, [r0, #12]
 80170d4:	2100      	movs	r1, #0
 80170d6:	2001      	movs	r0, #1
 80170d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80170dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80170de:	480e      	ldr	r0, [pc, #56]	@ (8017118 <rand+0x74>)
 80170e0:	690b      	ldr	r3, [r1, #16]
 80170e2:	694c      	ldr	r4, [r1, #20]
 80170e4:	4a0d      	ldr	r2, [pc, #52]	@ (801711c <rand+0x78>)
 80170e6:	4358      	muls	r0, r3
 80170e8:	fb02 0004 	mla	r0, r2, r4, r0
 80170ec:	fba3 3202 	umull	r3, r2, r3, r2
 80170f0:	3301      	adds	r3, #1
 80170f2:	eb40 0002 	adc.w	r0, r0, r2
 80170f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80170fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80170fe:	bd10      	pop	{r4, pc}
 8017100:	2000002c 	.word	0x2000002c
 8017104:	08018948 	.word	0x08018948
 8017108:	0801895f 	.word	0x0801895f
 801710c:	abcd330e 	.word	0xabcd330e
 8017110:	e66d1234 	.word	0xe66d1234
 8017114:	0005deec 	.word	0x0005deec
 8017118:	5851f42d 	.word	0x5851f42d
 801711c:	4c957f2d 	.word	0x4c957f2d

08017120 <std>:
 8017120:	2300      	movs	r3, #0
 8017122:	b510      	push	{r4, lr}
 8017124:	4604      	mov	r4, r0
 8017126:	e9c0 3300 	strd	r3, r3, [r0]
 801712a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801712e:	6083      	str	r3, [r0, #8]
 8017130:	8181      	strh	r1, [r0, #12]
 8017132:	6643      	str	r3, [r0, #100]	@ 0x64
 8017134:	81c2      	strh	r2, [r0, #14]
 8017136:	6183      	str	r3, [r0, #24]
 8017138:	4619      	mov	r1, r3
 801713a:	2208      	movs	r2, #8
 801713c:	305c      	adds	r0, #92	@ 0x5c
 801713e:	f000 fa59 	bl	80175f4 <memset>
 8017142:	4b0d      	ldr	r3, [pc, #52]	@ (8017178 <std+0x58>)
 8017144:	6263      	str	r3, [r4, #36]	@ 0x24
 8017146:	4b0d      	ldr	r3, [pc, #52]	@ (801717c <std+0x5c>)
 8017148:	62a3      	str	r3, [r4, #40]	@ 0x28
 801714a:	4b0d      	ldr	r3, [pc, #52]	@ (8017180 <std+0x60>)
 801714c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801714e:	4b0d      	ldr	r3, [pc, #52]	@ (8017184 <std+0x64>)
 8017150:	6323      	str	r3, [r4, #48]	@ 0x30
 8017152:	4b0d      	ldr	r3, [pc, #52]	@ (8017188 <std+0x68>)
 8017154:	6224      	str	r4, [r4, #32]
 8017156:	429c      	cmp	r4, r3
 8017158:	d006      	beq.n	8017168 <std+0x48>
 801715a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801715e:	4294      	cmp	r4, r2
 8017160:	d002      	beq.n	8017168 <std+0x48>
 8017162:	33d0      	adds	r3, #208	@ 0xd0
 8017164:	429c      	cmp	r4, r3
 8017166:	d105      	bne.n	8017174 <std+0x54>
 8017168:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801716c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017170:	f000 bb18 	b.w	80177a4 <__retarget_lock_init_recursive>
 8017174:	bd10      	pop	{r4, pc}
 8017176:	bf00      	nop
 8017178:	080173f1 	.word	0x080173f1
 801717c:	08017413 	.word	0x08017413
 8017180:	0801744b 	.word	0x0801744b
 8017184:	0801746f 	.word	0x0801746f
 8017188:	2000967c 	.word	0x2000967c

0801718c <stdio_exit_handler>:
 801718c:	4a02      	ldr	r2, [pc, #8]	@ (8017198 <stdio_exit_handler+0xc>)
 801718e:	4903      	ldr	r1, [pc, #12]	@ (801719c <stdio_exit_handler+0x10>)
 8017190:	4803      	ldr	r0, [pc, #12]	@ (80171a0 <stdio_exit_handler+0x14>)
 8017192:	f000 b869 	b.w	8017268 <_fwalk_sglue>
 8017196:	bf00      	nop
 8017198:	20000020 	.word	0x20000020
 801719c:	08018359 	.word	0x08018359
 80171a0:	20000030 	.word	0x20000030

080171a4 <cleanup_stdio>:
 80171a4:	6841      	ldr	r1, [r0, #4]
 80171a6:	4b0c      	ldr	r3, [pc, #48]	@ (80171d8 <cleanup_stdio+0x34>)
 80171a8:	4299      	cmp	r1, r3
 80171aa:	b510      	push	{r4, lr}
 80171ac:	4604      	mov	r4, r0
 80171ae:	d001      	beq.n	80171b4 <cleanup_stdio+0x10>
 80171b0:	f001 f8d2 	bl	8018358 <_fflush_r>
 80171b4:	68a1      	ldr	r1, [r4, #8]
 80171b6:	4b09      	ldr	r3, [pc, #36]	@ (80171dc <cleanup_stdio+0x38>)
 80171b8:	4299      	cmp	r1, r3
 80171ba:	d002      	beq.n	80171c2 <cleanup_stdio+0x1e>
 80171bc:	4620      	mov	r0, r4
 80171be:	f001 f8cb 	bl	8018358 <_fflush_r>
 80171c2:	68e1      	ldr	r1, [r4, #12]
 80171c4:	4b06      	ldr	r3, [pc, #24]	@ (80171e0 <cleanup_stdio+0x3c>)
 80171c6:	4299      	cmp	r1, r3
 80171c8:	d004      	beq.n	80171d4 <cleanup_stdio+0x30>
 80171ca:	4620      	mov	r0, r4
 80171cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171d0:	f001 b8c2 	b.w	8018358 <_fflush_r>
 80171d4:	bd10      	pop	{r4, pc}
 80171d6:	bf00      	nop
 80171d8:	2000967c 	.word	0x2000967c
 80171dc:	200096e4 	.word	0x200096e4
 80171e0:	2000974c 	.word	0x2000974c

080171e4 <global_stdio_init.part.0>:
 80171e4:	b510      	push	{r4, lr}
 80171e6:	4b0b      	ldr	r3, [pc, #44]	@ (8017214 <global_stdio_init.part.0+0x30>)
 80171e8:	4c0b      	ldr	r4, [pc, #44]	@ (8017218 <global_stdio_init.part.0+0x34>)
 80171ea:	4a0c      	ldr	r2, [pc, #48]	@ (801721c <global_stdio_init.part.0+0x38>)
 80171ec:	601a      	str	r2, [r3, #0]
 80171ee:	4620      	mov	r0, r4
 80171f0:	2200      	movs	r2, #0
 80171f2:	2104      	movs	r1, #4
 80171f4:	f7ff ff94 	bl	8017120 <std>
 80171f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80171fc:	2201      	movs	r2, #1
 80171fe:	2109      	movs	r1, #9
 8017200:	f7ff ff8e 	bl	8017120 <std>
 8017204:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017208:	2202      	movs	r2, #2
 801720a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801720e:	2112      	movs	r1, #18
 8017210:	f7ff bf86 	b.w	8017120 <std>
 8017214:	200097b4 	.word	0x200097b4
 8017218:	2000967c 	.word	0x2000967c
 801721c:	0801718d 	.word	0x0801718d

08017220 <__sfp_lock_acquire>:
 8017220:	4801      	ldr	r0, [pc, #4]	@ (8017228 <__sfp_lock_acquire+0x8>)
 8017222:	f000 bac0 	b.w	80177a6 <__retarget_lock_acquire_recursive>
 8017226:	bf00      	nop
 8017228:	200097bd 	.word	0x200097bd

0801722c <__sfp_lock_release>:
 801722c:	4801      	ldr	r0, [pc, #4]	@ (8017234 <__sfp_lock_release+0x8>)
 801722e:	f000 babb 	b.w	80177a8 <__retarget_lock_release_recursive>
 8017232:	bf00      	nop
 8017234:	200097bd 	.word	0x200097bd

08017238 <__sinit>:
 8017238:	b510      	push	{r4, lr}
 801723a:	4604      	mov	r4, r0
 801723c:	f7ff fff0 	bl	8017220 <__sfp_lock_acquire>
 8017240:	6a23      	ldr	r3, [r4, #32]
 8017242:	b11b      	cbz	r3, 801724c <__sinit+0x14>
 8017244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017248:	f7ff bff0 	b.w	801722c <__sfp_lock_release>
 801724c:	4b04      	ldr	r3, [pc, #16]	@ (8017260 <__sinit+0x28>)
 801724e:	6223      	str	r3, [r4, #32]
 8017250:	4b04      	ldr	r3, [pc, #16]	@ (8017264 <__sinit+0x2c>)
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d1f5      	bne.n	8017244 <__sinit+0xc>
 8017258:	f7ff ffc4 	bl	80171e4 <global_stdio_init.part.0>
 801725c:	e7f2      	b.n	8017244 <__sinit+0xc>
 801725e:	bf00      	nop
 8017260:	080171a5 	.word	0x080171a5
 8017264:	200097b4 	.word	0x200097b4

08017268 <_fwalk_sglue>:
 8017268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801726c:	4607      	mov	r7, r0
 801726e:	4688      	mov	r8, r1
 8017270:	4614      	mov	r4, r2
 8017272:	2600      	movs	r6, #0
 8017274:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017278:	f1b9 0901 	subs.w	r9, r9, #1
 801727c:	d505      	bpl.n	801728a <_fwalk_sglue+0x22>
 801727e:	6824      	ldr	r4, [r4, #0]
 8017280:	2c00      	cmp	r4, #0
 8017282:	d1f7      	bne.n	8017274 <_fwalk_sglue+0xc>
 8017284:	4630      	mov	r0, r6
 8017286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801728a:	89ab      	ldrh	r3, [r5, #12]
 801728c:	2b01      	cmp	r3, #1
 801728e:	d907      	bls.n	80172a0 <_fwalk_sglue+0x38>
 8017290:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017294:	3301      	adds	r3, #1
 8017296:	d003      	beq.n	80172a0 <_fwalk_sglue+0x38>
 8017298:	4629      	mov	r1, r5
 801729a:	4638      	mov	r0, r7
 801729c:	47c0      	blx	r8
 801729e:	4306      	orrs	r6, r0
 80172a0:	3568      	adds	r5, #104	@ 0x68
 80172a2:	e7e9      	b.n	8017278 <_fwalk_sglue+0x10>

080172a4 <iprintf>:
 80172a4:	b40f      	push	{r0, r1, r2, r3}
 80172a6:	b507      	push	{r0, r1, r2, lr}
 80172a8:	4906      	ldr	r1, [pc, #24]	@ (80172c4 <iprintf+0x20>)
 80172aa:	ab04      	add	r3, sp, #16
 80172ac:	6808      	ldr	r0, [r1, #0]
 80172ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80172b2:	6881      	ldr	r1, [r0, #8]
 80172b4:	9301      	str	r3, [sp, #4]
 80172b6:	f000 fd27 	bl	8017d08 <_vfiprintf_r>
 80172ba:	b003      	add	sp, #12
 80172bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80172c0:	b004      	add	sp, #16
 80172c2:	4770      	bx	lr
 80172c4:	2000002c 	.word	0x2000002c

080172c8 <_puts_r>:
 80172c8:	6a03      	ldr	r3, [r0, #32]
 80172ca:	b570      	push	{r4, r5, r6, lr}
 80172cc:	6884      	ldr	r4, [r0, #8]
 80172ce:	4605      	mov	r5, r0
 80172d0:	460e      	mov	r6, r1
 80172d2:	b90b      	cbnz	r3, 80172d8 <_puts_r+0x10>
 80172d4:	f7ff ffb0 	bl	8017238 <__sinit>
 80172d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80172da:	07db      	lsls	r3, r3, #31
 80172dc:	d405      	bmi.n	80172ea <_puts_r+0x22>
 80172de:	89a3      	ldrh	r3, [r4, #12]
 80172e0:	0598      	lsls	r0, r3, #22
 80172e2:	d402      	bmi.n	80172ea <_puts_r+0x22>
 80172e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80172e6:	f000 fa5e 	bl	80177a6 <__retarget_lock_acquire_recursive>
 80172ea:	89a3      	ldrh	r3, [r4, #12]
 80172ec:	0719      	lsls	r1, r3, #28
 80172ee:	d502      	bpl.n	80172f6 <_puts_r+0x2e>
 80172f0:	6923      	ldr	r3, [r4, #16]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d135      	bne.n	8017362 <_puts_r+0x9a>
 80172f6:	4621      	mov	r1, r4
 80172f8:	4628      	mov	r0, r5
 80172fa:	f000 f8fb 	bl	80174f4 <__swsetup_r>
 80172fe:	b380      	cbz	r0, 8017362 <_puts_r+0x9a>
 8017300:	f04f 35ff 	mov.w	r5, #4294967295
 8017304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017306:	07da      	lsls	r2, r3, #31
 8017308:	d405      	bmi.n	8017316 <_puts_r+0x4e>
 801730a:	89a3      	ldrh	r3, [r4, #12]
 801730c:	059b      	lsls	r3, r3, #22
 801730e:	d402      	bmi.n	8017316 <_puts_r+0x4e>
 8017310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017312:	f000 fa49 	bl	80177a8 <__retarget_lock_release_recursive>
 8017316:	4628      	mov	r0, r5
 8017318:	bd70      	pop	{r4, r5, r6, pc}
 801731a:	2b00      	cmp	r3, #0
 801731c:	da04      	bge.n	8017328 <_puts_r+0x60>
 801731e:	69a2      	ldr	r2, [r4, #24]
 8017320:	429a      	cmp	r2, r3
 8017322:	dc17      	bgt.n	8017354 <_puts_r+0x8c>
 8017324:	290a      	cmp	r1, #10
 8017326:	d015      	beq.n	8017354 <_puts_r+0x8c>
 8017328:	6823      	ldr	r3, [r4, #0]
 801732a:	1c5a      	adds	r2, r3, #1
 801732c:	6022      	str	r2, [r4, #0]
 801732e:	7019      	strb	r1, [r3, #0]
 8017330:	68a3      	ldr	r3, [r4, #8]
 8017332:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017336:	3b01      	subs	r3, #1
 8017338:	60a3      	str	r3, [r4, #8]
 801733a:	2900      	cmp	r1, #0
 801733c:	d1ed      	bne.n	801731a <_puts_r+0x52>
 801733e:	2b00      	cmp	r3, #0
 8017340:	da11      	bge.n	8017366 <_puts_r+0x9e>
 8017342:	4622      	mov	r2, r4
 8017344:	210a      	movs	r1, #10
 8017346:	4628      	mov	r0, r5
 8017348:	f000 f895 	bl	8017476 <__swbuf_r>
 801734c:	3001      	adds	r0, #1
 801734e:	d0d7      	beq.n	8017300 <_puts_r+0x38>
 8017350:	250a      	movs	r5, #10
 8017352:	e7d7      	b.n	8017304 <_puts_r+0x3c>
 8017354:	4622      	mov	r2, r4
 8017356:	4628      	mov	r0, r5
 8017358:	f000 f88d 	bl	8017476 <__swbuf_r>
 801735c:	3001      	adds	r0, #1
 801735e:	d1e7      	bne.n	8017330 <_puts_r+0x68>
 8017360:	e7ce      	b.n	8017300 <_puts_r+0x38>
 8017362:	3e01      	subs	r6, #1
 8017364:	e7e4      	b.n	8017330 <_puts_r+0x68>
 8017366:	6823      	ldr	r3, [r4, #0]
 8017368:	1c5a      	adds	r2, r3, #1
 801736a:	6022      	str	r2, [r4, #0]
 801736c:	220a      	movs	r2, #10
 801736e:	701a      	strb	r2, [r3, #0]
 8017370:	e7ee      	b.n	8017350 <_puts_r+0x88>
	...

08017374 <puts>:
 8017374:	4b02      	ldr	r3, [pc, #8]	@ (8017380 <puts+0xc>)
 8017376:	4601      	mov	r1, r0
 8017378:	6818      	ldr	r0, [r3, #0]
 801737a:	f7ff bfa5 	b.w	80172c8 <_puts_r>
 801737e:	bf00      	nop
 8017380:	2000002c 	.word	0x2000002c

08017384 <sniprintf>:
 8017384:	b40c      	push	{r2, r3}
 8017386:	b530      	push	{r4, r5, lr}
 8017388:	4b18      	ldr	r3, [pc, #96]	@ (80173ec <sniprintf+0x68>)
 801738a:	1e0c      	subs	r4, r1, #0
 801738c:	681d      	ldr	r5, [r3, #0]
 801738e:	b09d      	sub	sp, #116	@ 0x74
 8017390:	da08      	bge.n	80173a4 <sniprintf+0x20>
 8017392:	238b      	movs	r3, #139	@ 0x8b
 8017394:	602b      	str	r3, [r5, #0]
 8017396:	f04f 30ff 	mov.w	r0, #4294967295
 801739a:	b01d      	add	sp, #116	@ 0x74
 801739c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173a0:	b002      	add	sp, #8
 80173a2:	4770      	bx	lr
 80173a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80173a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80173ac:	f04f 0300 	mov.w	r3, #0
 80173b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80173b2:	bf14      	ite	ne
 80173b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80173b8:	4623      	moveq	r3, r4
 80173ba:	9304      	str	r3, [sp, #16]
 80173bc:	9307      	str	r3, [sp, #28]
 80173be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80173c2:	9002      	str	r0, [sp, #8]
 80173c4:	9006      	str	r0, [sp, #24]
 80173c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80173ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80173cc:	ab21      	add	r3, sp, #132	@ 0x84
 80173ce:	a902      	add	r1, sp, #8
 80173d0:	4628      	mov	r0, r5
 80173d2:	9301      	str	r3, [sp, #4]
 80173d4:	f000 fb72 	bl	8017abc <_svfiprintf_r>
 80173d8:	1c43      	adds	r3, r0, #1
 80173da:	bfbc      	itt	lt
 80173dc:	238b      	movlt	r3, #139	@ 0x8b
 80173de:	602b      	strlt	r3, [r5, #0]
 80173e0:	2c00      	cmp	r4, #0
 80173e2:	d0da      	beq.n	801739a <sniprintf+0x16>
 80173e4:	9b02      	ldr	r3, [sp, #8]
 80173e6:	2200      	movs	r2, #0
 80173e8:	701a      	strb	r2, [r3, #0]
 80173ea:	e7d6      	b.n	801739a <sniprintf+0x16>
 80173ec:	2000002c 	.word	0x2000002c

080173f0 <__sread>:
 80173f0:	b510      	push	{r4, lr}
 80173f2:	460c      	mov	r4, r1
 80173f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173f8:	f000 f998 	bl	801772c <_read_r>
 80173fc:	2800      	cmp	r0, #0
 80173fe:	bfab      	itete	ge
 8017400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017402:	89a3      	ldrhlt	r3, [r4, #12]
 8017404:	181b      	addge	r3, r3, r0
 8017406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801740a:	bfac      	ite	ge
 801740c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801740e:	81a3      	strhlt	r3, [r4, #12]
 8017410:	bd10      	pop	{r4, pc}

08017412 <__swrite>:
 8017412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017416:	461f      	mov	r7, r3
 8017418:	898b      	ldrh	r3, [r1, #12]
 801741a:	05db      	lsls	r3, r3, #23
 801741c:	4605      	mov	r5, r0
 801741e:	460c      	mov	r4, r1
 8017420:	4616      	mov	r6, r2
 8017422:	d505      	bpl.n	8017430 <__swrite+0x1e>
 8017424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017428:	2302      	movs	r3, #2
 801742a:	2200      	movs	r2, #0
 801742c:	f000 f96c 	bl	8017708 <_lseek_r>
 8017430:	89a3      	ldrh	r3, [r4, #12]
 8017432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801743a:	81a3      	strh	r3, [r4, #12]
 801743c:	4632      	mov	r2, r6
 801743e:	463b      	mov	r3, r7
 8017440:	4628      	mov	r0, r5
 8017442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017446:	f7e9 ba91 	b.w	800096c <_write_r>

0801744a <__sseek>:
 801744a:	b510      	push	{r4, lr}
 801744c:	460c      	mov	r4, r1
 801744e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017452:	f000 f959 	bl	8017708 <_lseek_r>
 8017456:	1c43      	adds	r3, r0, #1
 8017458:	89a3      	ldrh	r3, [r4, #12]
 801745a:	bf15      	itete	ne
 801745c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801745e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017462:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017466:	81a3      	strheq	r3, [r4, #12]
 8017468:	bf18      	it	ne
 801746a:	81a3      	strhne	r3, [r4, #12]
 801746c:	bd10      	pop	{r4, pc}

0801746e <__sclose>:
 801746e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017472:	f000 b8db 	b.w	801762c <_close_r>

08017476 <__swbuf_r>:
 8017476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017478:	460e      	mov	r6, r1
 801747a:	4614      	mov	r4, r2
 801747c:	4605      	mov	r5, r0
 801747e:	b118      	cbz	r0, 8017488 <__swbuf_r+0x12>
 8017480:	6a03      	ldr	r3, [r0, #32]
 8017482:	b90b      	cbnz	r3, 8017488 <__swbuf_r+0x12>
 8017484:	f7ff fed8 	bl	8017238 <__sinit>
 8017488:	69a3      	ldr	r3, [r4, #24]
 801748a:	60a3      	str	r3, [r4, #8]
 801748c:	89a3      	ldrh	r3, [r4, #12]
 801748e:	071a      	lsls	r2, r3, #28
 8017490:	d501      	bpl.n	8017496 <__swbuf_r+0x20>
 8017492:	6923      	ldr	r3, [r4, #16]
 8017494:	b943      	cbnz	r3, 80174a8 <__swbuf_r+0x32>
 8017496:	4621      	mov	r1, r4
 8017498:	4628      	mov	r0, r5
 801749a:	f000 f82b 	bl	80174f4 <__swsetup_r>
 801749e:	b118      	cbz	r0, 80174a8 <__swbuf_r+0x32>
 80174a0:	f04f 37ff 	mov.w	r7, #4294967295
 80174a4:	4638      	mov	r0, r7
 80174a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174a8:	6823      	ldr	r3, [r4, #0]
 80174aa:	6922      	ldr	r2, [r4, #16]
 80174ac:	1a98      	subs	r0, r3, r2
 80174ae:	6963      	ldr	r3, [r4, #20]
 80174b0:	b2f6      	uxtb	r6, r6
 80174b2:	4283      	cmp	r3, r0
 80174b4:	4637      	mov	r7, r6
 80174b6:	dc05      	bgt.n	80174c4 <__swbuf_r+0x4e>
 80174b8:	4621      	mov	r1, r4
 80174ba:	4628      	mov	r0, r5
 80174bc:	f000 ff4c 	bl	8018358 <_fflush_r>
 80174c0:	2800      	cmp	r0, #0
 80174c2:	d1ed      	bne.n	80174a0 <__swbuf_r+0x2a>
 80174c4:	68a3      	ldr	r3, [r4, #8]
 80174c6:	3b01      	subs	r3, #1
 80174c8:	60a3      	str	r3, [r4, #8]
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	1c5a      	adds	r2, r3, #1
 80174ce:	6022      	str	r2, [r4, #0]
 80174d0:	701e      	strb	r6, [r3, #0]
 80174d2:	6962      	ldr	r2, [r4, #20]
 80174d4:	1c43      	adds	r3, r0, #1
 80174d6:	429a      	cmp	r2, r3
 80174d8:	d004      	beq.n	80174e4 <__swbuf_r+0x6e>
 80174da:	89a3      	ldrh	r3, [r4, #12]
 80174dc:	07db      	lsls	r3, r3, #31
 80174de:	d5e1      	bpl.n	80174a4 <__swbuf_r+0x2e>
 80174e0:	2e0a      	cmp	r6, #10
 80174e2:	d1df      	bne.n	80174a4 <__swbuf_r+0x2e>
 80174e4:	4621      	mov	r1, r4
 80174e6:	4628      	mov	r0, r5
 80174e8:	f000 ff36 	bl	8018358 <_fflush_r>
 80174ec:	2800      	cmp	r0, #0
 80174ee:	d0d9      	beq.n	80174a4 <__swbuf_r+0x2e>
 80174f0:	e7d6      	b.n	80174a0 <__swbuf_r+0x2a>
	...

080174f4 <__swsetup_r>:
 80174f4:	b538      	push	{r3, r4, r5, lr}
 80174f6:	4b29      	ldr	r3, [pc, #164]	@ (801759c <__swsetup_r+0xa8>)
 80174f8:	4605      	mov	r5, r0
 80174fa:	6818      	ldr	r0, [r3, #0]
 80174fc:	460c      	mov	r4, r1
 80174fe:	b118      	cbz	r0, 8017508 <__swsetup_r+0x14>
 8017500:	6a03      	ldr	r3, [r0, #32]
 8017502:	b90b      	cbnz	r3, 8017508 <__swsetup_r+0x14>
 8017504:	f7ff fe98 	bl	8017238 <__sinit>
 8017508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801750c:	0719      	lsls	r1, r3, #28
 801750e:	d422      	bmi.n	8017556 <__swsetup_r+0x62>
 8017510:	06da      	lsls	r2, r3, #27
 8017512:	d407      	bmi.n	8017524 <__swsetup_r+0x30>
 8017514:	2209      	movs	r2, #9
 8017516:	602a      	str	r2, [r5, #0]
 8017518:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801751c:	81a3      	strh	r3, [r4, #12]
 801751e:	f04f 30ff 	mov.w	r0, #4294967295
 8017522:	e033      	b.n	801758c <__swsetup_r+0x98>
 8017524:	0758      	lsls	r0, r3, #29
 8017526:	d512      	bpl.n	801754e <__swsetup_r+0x5a>
 8017528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801752a:	b141      	cbz	r1, 801753e <__swsetup_r+0x4a>
 801752c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017530:	4299      	cmp	r1, r3
 8017532:	d002      	beq.n	801753a <__swsetup_r+0x46>
 8017534:	4628      	mov	r0, r5
 8017536:	f000 f965 	bl	8017804 <_free_r>
 801753a:	2300      	movs	r3, #0
 801753c:	6363      	str	r3, [r4, #52]	@ 0x34
 801753e:	89a3      	ldrh	r3, [r4, #12]
 8017540:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017544:	81a3      	strh	r3, [r4, #12]
 8017546:	2300      	movs	r3, #0
 8017548:	6063      	str	r3, [r4, #4]
 801754a:	6923      	ldr	r3, [r4, #16]
 801754c:	6023      	str	r3, [r4, #0]
 801754e:	89a3      	ldrh	r3, [r4, #12]
 8017550:	f043 0308 	orr.w	r3, r3, #8
 8017554:	81a3      	strh	r3, [r4, #12]
 8017556:	6923      	ldr	r3, [r4, #16]
 8017558:	b94b      	cbnz	r3, 801756e <__swsetup_r+0x7a>
 801755a:	89a3      	ldrh	r3, [r4, #12]
 801755c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017564:	d003      	beq.n	801756e <__swsetup_r+0x7a>
 8017566:	4621      	mov	r1, r4
 8017568:	4628      	mov	r0, r5
 801756a:	f000 ff55 	bl	8018418 <__smakebuf_r>
 801756e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017572:	f013 0201 	ands.w	r2, r3, #1
 8017576:	d00a      	beq.n	801758e <__swsetup_r+0x9a>
 8017578:	2200      	movs	r2, #0
 801757a:	60a2      	str	r2, [r4, #8]
 801757c:	6962      	ldr	r2, [r4, #20]
 801757e:	4252      	negs	r2, r2
 8017580:	61a2      	str	r2, [r4, #24]
 8017582:	6922      	ldr	r2, [r4, #16]
 8017584:	b942      	cbnz	r2, 8017598 <__swsetup_r+0xa4>
 8017586:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801758a:	d1c5      	bne.n	8017518 <__swsetup_r+0x24>
 801758c:	bd38      	pop	{r3, r4, r5, pc}
 801758e:	0799      	lsls	r1, r3, #30
 8017590:	bf58      	it	pl
 8017592:	6962      	ldrpl	r2, [r4, #20]
 8017594:	60a2      	str	r2, [r4, #8]
 8017596:	e7f4      	b.n	8017582 <__swsetup_r+0x8e>
 8017598:	2000      	movs	r0, #0
 801759a:	e7f7      	b.n	801758c <__swsetup_r+0x98>
 801759c:	2000002c 	.word	0x2000002c

080175a0 <memcmp>:
 80175a0:	b510      	push	{r4, lr}
 80175a2:	3901      	subs	r1, #1
 80175a4:	4402      	add	r2, r0
 80175a6:	4290      	cmp	r0, r2
 80175a8:	d101      	bne.n	80175ae <memcmp+0xe>
 80175aa:	2000      	movs	r0, #0
 80175ac:	e005      	b.n	80175ba <memcmp+0x1a>
 80175ae:	7803      	ldrb	r3, [r0, #0]
 80175b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80175b4:	42a3      	cmp	r3, r4
 80175b6:	d001      	beq.n	80175bc <memcmp+0x1c>
 80175b8:	1b18      	subs	r0, r3, r4
 80175ba:	bd10      	pop	{r4, pc}
 80175bc:	3001      	adds	r0, #1
 80175be:	e7f2      	b.n	80175a6 <memcmp+0x6>

080175c0 <memmove>:
 80175c0:	4288      	cmp	r0, r1
 80175c2:	b510      	push	{r4, lr}
 80175c4:	eb01 0402 	add.w	r4, r1, r2
 80175c8:	d902      	bls.n	80175d0 <memmove+0x10>
 80175ca:	4284      	cmp	r4, r0
 80175cc:	4623      	mov	r3, r4
 80175ce:	d807      	bhi.n	80175e0 <memmove+0x20>
 80175d0:	1e43      	subs	r3, r0, #1
 80175d2:	42a1      	cmp	r1, r4
 80175d4:	d008      	beq.n	80175e8 <memmove+0x28>
 80175d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80175da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80175de:	e7f8      	b.n	80175d2 <memmove+0x12>
 80175e0:	4402      	add	r2, r0
 80175e2:	4601      	mov	r1, r0
 80175e4:	428a      	cmp	r2, r1
 80175e6:	d100      	bne.n	80175ea <memmove+0x2a>
 80175e8:	bd10      	pop	{r4, pc}
 80175ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80175ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80175f2:	e7f7      	b.n	80175e4 <memmove+0x24>

080175f4 <memset>:
 80175f4:	4402      	add	r2, r0
 80175f6:	4603      	mov	r3, r0
 80175f8:	4293      	cmp	r3, r2
 80175fa:	d100      	bne.n	80175fe <memset+0xa>
 80175fc:	4770      	bx	lr
 80175fe:	f803 1b01 	strb.w	r1, [r3], #1
 8017602:	e7f9      	b.n	80175f8 <memset+0x4>

08017604 <strncpy>:
 8017604:	b510      	push	{r4, lr}
 8017606:	3901      	subs	r1, #1
 8017608:	4603      	mov	r3, r0
 801760a:	b132      	cbz	r2, 801761a <strncpy+0x16>
 801760c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017610:	f803 4b01 	strb.w	r4, [r3], #1
 8017614:	3a01      	subs	r2, #1
 8017616:	2c00      	cmp	r4, #0
 8017618:	d1f7      	bne.n	801760a <strncpy+0x6>
 801761a:	441a      	add	r2, r3
 801761c:	2100      	movs	r1, #0
 801761e:	4293      	cmp	r3, r2
 8017620:	d100      	bne.n	8017624 <strncpy+0x20>
 8017622:	bd10      	pop	{r4, pc}
 8017624:	f803 1b01 	strb.w	r1, [r3], #1
 8017628:	e7f9      	b.n	801761e <strncpy+0x1a>
	...

0801762c <_close_r>:
 801762c:	b538      	push	{r3, r4, r5, lr}
 801762e:	4d06      	ldr	r5, [pc, #24]	@ (8017648 <_close_r+0x1c>)
 8017630:	2300      	movs	r3, #0
 8017632:	4604      	mov	r4, r0
 8017634:	4608      	mov	r0, r1
 8017636:	602b      	str	r3, [r5, #0]
 8017638:	f7ea fac2 	bl	8001bc0 <_close>
 801763c:	1c43      	adds	r3, r0, #1
 801763e:	d102      	bne.n	8017646 <_close_r+0x1a>
 8017640:	682b      	ldr	r3, [r5, #0]
 8017642:	b103      	cbz	r3, 8017646 <_close_r+0x1a>
 8017644:	6023      	str	r3, [r4, #0]
 8017646:	bd38      	pop	{r3, r4, r5, pc}
 8017648:	200097b8 	.word	0x200097b8

0801764c <_reclaim_reent>:
 801764c:	4b2d      	ldr	r3, [pc, #180]	@ (8017704 <_reclaim_reent+0xb8>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	4283      	cmp	r3, r0
 8017652:	b570      	push	{r4, r5, r6, lr}
 8017654:	4604      	mov	r4, r0
 8017656:	d053      	beq.n	8017700 <_reclaim_reent+0xb4>
 8017658:	69c3      	ldr	r3, [r0, #28]
 801765a:	b31b      	cbz	r3, 80176a4 <_reclaim_reent+0x58>
 801765c:	68db      	ldr	r3, [r3, #12]
 801765e:	b163      	cbz	r3, 801767a <_reclaim_reent+0x2e>
 8017660:	2500      	movs	r5, #0
 8017662:	69e3      	ldr	r3, [r4, #28]
 8017664:	68db      	ldr	r3, [r3, #12]
 8017666:	5959      	ldr	r1, [r3, r5]
 8017668:	b9b1      	cbnz	r1, 8017698 <_reclaim_reent+0x4c>
 801766a:	3504      	adds	r5, #4
 801766c:	2d80      	cmp	r5, #128	@ 0x80
 801766e:	d1f8      	bne.n	8017662 <_reclaim_reent+0x16>
 8017670:	69e3      	ldr	r3, [r4, #28]
 8017672:	4620      	mov	r0, r4
 8017674:	68d9      	ldr	r1, [r3, #12]
 8017676:	f000 f8c5 	bl	8017804 <_free_r>
 801767a:	69e3      	ldr	r3, [r4, #28]
 801767c:	6819      	ldr	r1, [r3, #0]
 801767e:	b111      	cbz	r1, 8017686 <_reclaim_reent+0x3a>
 8017680:	4620      	mov	r0, r4
 8017682:	f000 f8bf 	bl	8017804 <_free_r>
 8017686:	69e3      	ldr	r3, [r4, #28]
 8017688:	689d      	ldr	r5, [r3, #8]
 801768a:	b15d      	cbz	r5, 80176a4 <_reclaim_reent+0x58>
 801768c:	4629      	mov	r1, r5
 801768e:	4620      	mov	r0, r4
 8017690:	682d      	ldr	r5, [r5, #0]
 8017692:	f000 f8b7 	bl	8017804 <_free_r>
 8017696:	e7f8      	b.n	801768a <_reclaim_reent+0x3e>
 8017698:	680e      	ldr	r6, [r1, #0]
 801769a:	4620      	mov	r0, r4
 801769c:	f000 f8b2 	bl	8017804 <_free_r>
 80176a0:	4631      	mov	r1, r6
 80176a2:	e7e1      	b.n	8017668 <_reclaim_reent+0x1c>
 80176a4:	6961      	ldr	r1, [r4, #20]
 80176a6:	b111      	cbz	r1, 80176ae <_reclaim_reent+0x62>
 80176a8:	4620      	mov	r0, r4
 80176aa:	f000 f8ab 	bl	8017804 <_free_r>
 80176ae:	69e1      	ldr	r1, [r4, #28]
 80176b0:	b111      	cbz	r1, 80176b8 <_reclaim_reent+0x6c>
 80176b2:	4620      	mov	r0, r4
 80176b4:	f000 f8a6 	bl	8017804 <_free_r>
 80176b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80176ba:	b111      	cbz	r1, 80176c2 <_reclaim_reent+0x76>
 80176bc:	4620      	mov	r0, r4
 80176be:	f000 f8a1 	bl	8017804 <_free_r>
 80176c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80176c4:	b111      	cbz	r1, 80176cc <_reclaim_reent+0x80>
 80176c6:	4620      	mov	r0, r4
 80176c8:	f000 f89c 	bl	8017804 <_free_r>
 80176cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80176ce:	b111      	cbz	r1, 80176d6 <_reclaim_reent+0x8a>
 80176d0:	4620      	mov	r0, r4
 80176d2:	f000 f897 	bl	8017804 <_free_r>
 80176d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80176d8:	b111      	cbz	r1, 80176e0 <_reclaim_reent+0x94>
 80176da:	4620      	mov	r0, r4
 80176dc:	f000 f892 	bl	8017804 <_free_r>
 80176e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80176e2:	b111      	cbz	r1, 80176ea <_reclaim_reent+0x9e>
 80176e4:	4620      	mov	r0, r4
 80176e6:	f000 f88d 	bl	8017804 <_free_r>
 80176ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80176ec:	b111      	cbz	r1, 80176f4 <_reclaim_reent+0xa8>
 80176ee:	4620      	mov	r0, r4
 80176f0:	f000 f888 	bl	8017804 <_free_r>
 80176f4:	6a23      	ldr	r3, [r4, #32]
 80176f6:	b11b      	cbz	r3, 8017700 <_reclaim_reent+0xb4>
 80176f8:	4620      	mov	r0, r4
 80176fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176fe:	4718      	bx	r3
 8017700:	bd70      	pop	{r4, r5, r6, pc}
 8017702:	bf00      	nop
 8017704:	2000002c 	.word	0x2000002c

08017708 <_lseek_r>:
 8017708:	b538      	push	{r3, r4, r5, lr}
 801770a:	4d07      	ldr	r5, [pc, #28]	@ (8017728 <_lseek_r+0x20>)
 801770c:	4604      	mov	r4, r0
 801770e:	4608      	mov	r0, r1
 8017710:	4611      	mov	r1, r2
 8017712:	2200      	movs	r2, #0
 8017714:	602a      	str	r2, [r5, #0]
 8017716:	461a      	mov	r2, r3
 8017718:	f7ea fa79 	bl	8001c0e <_lseek>
 801771c:	1c43      	adds	r3, r0, #1
 801771e:	d102      	bne.n	8017726 <_lseek_r+0x1e>
 8017720:	682b      	ldr	r3, [r5, #0]
 8017722:	b103      	cbz	r3, 8017726 <_lseek_r+0x1e>
 8017724:	6023      	str	r3, [r4, #0]
 8017726:	bd38      	pop	{r3, r4, r5, pc}
 8017728:	200097b8 	.word	0x200097b8

0801772c <_read_r>:
 801772c:	b538      	push	{r3, r4, r5, lr}
 801772e:	4d07      	ldr	r5, [pc, #28]	@ (801774c <_read_r+0x20>)
 8017730:	4604      	mov	r4, r0
 8017732:	4608      	mov	r0, r1
 8017734:	4611      	mov	r1, r2
 8017736:	2200      	movs	r2, #0
 8017738:	602a      	str	r2, [r5, #0]
 801773a:	461a      	mov	r2, r3
 801773c:	f7ea fa23 	bl	8001b86 <_read>
 8017740:	1c43      	adds	r3, r0, #1
 8017742:	d102      	bne.n	801774a <_read_r+0x1e>
 8017744:	682b      	ldr	r3, [r5, #0]
 8017746:	b103      	cbz	r3, 801774a <_read_r+0x1e>
 8017748:	6023      	str	r3, [r4, #0]
 801774a:	bd38      	pop	{r3, r4, r5, pc}
 801774c:	200097b8 	.word	0x200097b8

08017750 <__errno>:
 8017750:	4b01      	ldr	r3, [pc, #4]	@ (8017758 <__errno+0x8>)
 8017752:	6818      	ldr	r0, [r3, #0]
 8017754:	4770      	bx	lr
 8017756:	bf00      	nop
 8017758:	2000002c 	.word	0x2000002c

0801775c <__libc_init_array>:
 801775c:	b570      	push	{r4, r5, r6, lr}
 801775e:	4d0d      	ldr	r5, [pc, #52]	@ (8017794 <__libc_init_array+0x38>)
 8017760:	4c0d      	ldr	r4, [pc, #52]	@ (8017798 <__libc_init_array+0x3c>)
 8017762:	1b64      	subs	r4, r4, r5
 8017764:	10a4      	asrs	r4, r4, #2
 8017766:	2600      	movs	r6, #0
 8017768:	42a6      	cmp	r6, r4
 801776a:	d109      	bne.n	8017780 <__libc_init_array+0x24>
 801776c:	4d0b      	ldr	r5, [pc, #44]	@ (801779c <__libc_init_array+0x40>)
 801776e:	4c0c      	ldr	r4, [pc, #48]	@ (80177a0 <__libc_init_array+0x44>)
 8017770:	f000 ff42 	bl	80185f8 <_init>
 8017774:	1b64      	subs	r4, r4, r5
 8017776:	10a4      	asrs	r4, r4, #2
 8017778:	2600      	movs	r6, #0
 801777a:	42a6      	cmp	r6, r4
 801777c:	d105      	bne.n	801778a <__libc_init_array+0x2e>
 801777e:	bd70      	pop	{r4, r5, r6, pc}
 8017780:	f855 3b04 	ldr.w	r3, [r5], #4
 8017784:	4798      	blx	r3
 8017786:	3601      	adds	r6, #1
 8017788:	e7ee      	b.n	8017768 <__libc_init_array+0xc>
 801778a:	f855 3b04 	ldr.w	r3, [r5], #4
 801778e:	4798      	blx	r3
 8017790:	3601      	adds	r6, #1
 8017792:	e7f2      	b.n	801777a <__libc_init_array+0x1e>
 8017794:	08018a30 	.word	0x08018a30
 8017798:	08018a30 	.word	0x08018a30
 801779c:	08018a30 	.word	0x08018a30
 80177a0:	08018a34 	.word	0x08018a34

080177a4 <__retarget_lock_init_recursive>:
 80177a4:	4770      	bx	lr

080177a6 <__retarget_lock_acquire_recursive>:
 80177a6:	4770      	bx	lr

080177a8 <__retarget_lock_release_recursive>:
 80177a8:	4770      	bx	lr

080177aa <memcpy>:
 80177aa:	440a      	add	r2, r1
 80177ac:	4291      	cmp	r1, r2
 80177ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80177b2:	d100      	bne.n	80177b6 <memcpy+0xc>
 80177b4:	4770      	bx	lr
 80177b6:	b510      	push	{r4, lr}
 80177b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177c0:	4291      	cmp	r1, r2
 80177c2:	d1f9      	bne.n	80177b8 <memcpy+0xe>
 80177c4:	bd10      	pop	{r4, pc}
	...

080177c8 <__assert_func>:
 80177c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80177ca:	4614      	mov	r4, r2
 80177cc:	461a      	mov	r2, r3
 80177ce:	4b09      	ldr	r3, [pc, #36]	@ (80177f4 <__assert_func+0x2c>)
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	4605      	mov	r5, r0
 80177d4:	68d8      	ldr	r0, [r3, #12]
 80177d6:	b14c      	cbz	r4, 80177ec <__assert_func+0x24>
 80177d8:	4b07      	ldr	r3, [pc, #28]	@ (80177f8 <__assert_func+0x30>)
 80177da:	9100      	str	r1, [sp, #0]
 80177dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80177e0:	4906      	ldr	r1, [pc, #24]	@ (80177fc <__assert_func+0x34>)
 80177e2:	462b      	mov	r3, r5
 80177e4:	f000 fde0 	bl	80183a8 <fiprintf>
 80177e8:	f000 fe84 	bl	80184f4 <abort>
 80177ec:	4b04      	ldr	r3, [pc, #16]	@ (8017800 <__assert_func+0x38>)
 80177ee:	461c      	mov	r4, r3
 80177f0:	e7f3      	b.n	80177da <__assert_func+0x12>
 80177f2:	bf00      	nop
 80177f4:	2000002c 	.word	0x2000002c
 80177f8:	080189b7 	.word	0x080189b7
 80177fc:	080189c4 	.word	0x080189c4
 8017800:	080189f2 	.word	0x080189f2

08017804 <_free_r>:
 8017804:	b538      	push	{r3, r4, r5, lr}
 8017806:	4605      	mov	r5, r0
 8017808:	2900      	cmp	r1, #0
 801780a:	d041      	beq.n	8017890 <_free_r+0x8c>
 801780c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017810:	1f0c      	subs	r4, r1, #4
 8017812:	2b00      	cmp	r3, #0
 8017814:	bfb8      	it	lt
 8017816:	18e4      	addlt	r4, r4, r3
 8017818:	f000 f8e8 	bl	80179ec <__malloc_lock>
 801781c:	4a1d      	ldr	r2, [pc, #116]	@ (8017894 <_free_r+0x90>)
 801781e:	6813      	ldr	r3, [r2, #0]
 8017820:	b933      	cbnz	r3, 8017830 <_free_r+0x2c>
 8017822:	6063      	str	r3, [r4, #4]
 8017824:	6014      	str	r4, [r2, #0]
 8017826:	4628      	mov	r0, r5
 8017828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801782c:	f000 b8e4 	b.w	80179f8 <__malloc_unlock>
 8017830:	42a3      	cmp	r3, r4
 8017832:	d908      	bls.n	8017846 <_free_r+0x42>
 8017834:	6820      	ldr	r0, [r4, #0]
 8017836:	1821      	adds	r1, r4, r0
 8017838:	428b      	cmp	r3, r1
 801783a:	bf01      	itttt	eq
 801783c:	6819      	ldreq	r1, [r3, #0]
 801783e:	685b      	ldreq	r3, [r3, #4]
 8017840:	1809      	addeq	r1, r1, r0
 8017842:	6021      	streq	r1, [r4, #0]
 8017844:	e7ed      	b.n	8017822 <_free_r+0x1e>
 8017846:	461a      	mov	r2, r3
 8017848:	685b      	ldr	r3, [r3, #4]
 801784a:	b10b      	cbz	r3, 8017850 <_free_r+0x4c>
 801784c:	42a3      	cmp	r3, r4
 801784e:	d9fa      	bls.n	8017846 <_free_r+0x42>
 8017850:	6811      	ldr	r1, [r2, #0]
 8017852:	1850      	adds	r0, r2, r1
 8017854:	42a0      	cmp	r0, r4
 8017856:	d10b      	bne.n	8017870 <_free_r+0x6c>
 8017858:	6820      	ldr	r0, [r4, #0]
 801785a:	4401      	add	r1, r0
 801785c:	1850      	adds	r0, r2, r1
 801785e:	4283      	cmp	r3, r0
 8017860:	6011      	str	r1, [r2, #0]
 8017862:	d1e0      	bne.n	8017826 <_free_r+0x22>
 8017864:	6818      	ldr	r0, [r3, #0]
 8017866:	685b      	ldr	r3, [r3, #4]
 8017868:	6053      	str	r3, [r2, #4]
 801786a:	4408      	add	r0, r1
 801786c:	6010      	str	r0, [r2, #0]
 801786e:	e7da      	b.n	8017826 <_free_r+0x22>
 8017870:	d902      	bls.n	8017878 <_free_r+0x74>
 8017872:	230c      	movs	r3, #12
 8017874:	602b      	str	r3, [r5, #0]
 8017876:	e7d6      	b.n	8017826 <_free_r+0x22>
 8017878:	6820      	ldr	r0, [r4, #0]
 801787a:	1821      	adds	r1, r4, r0
 801787c:	428b      	cmp	r3, r1
 801787e:	bf04      	itt	eq
 8017880:	6819      	ldreq	r1, [r3, #0]
 8017882:	685b      	ldreq	r3, [r3, #4]
 8017884:	6063      	str	r3, [r4, #4]
 8017886:	bf04      	itt	eq
 8017888:	1809      	addeq	r1, r1, r0
 801788a:	6021      	streq	r1, [r4, #0]
 801788c:	6054      	str	r4, [r2, #4]
 801788e:	e7ca      	b.n	8017826 <_free_r+0x22>
 8017890:	bd38      	pop	{r3, r4, r5, pc}
 8017892:	bf00      	nop
 8017894:	200097c4 	.word	0x200097c4

08017898 <malloc>:
 8017898:	4b02      	ldr	r3, [pc, #8]	@ (80178a4 <malloc+0xc>)
 801789a:	4601      	mov	r1, r0
 801789c:	6818      	ldr	r0, [r3, #0]
 801789e:	f000 b825 	b.w	80178ec <_malloc_r>
 80178a2:	bf00      	nop
 80178a4:	2000002c 	.word	0x2000002c

080178a8 <sbrk_aligned>:
 80178a8:	b570      	push	{r4, r5, r6, lr}
 80178aa:	4e0f      	ldr	r6, [pc, #60]	@ (80178e8 <sbrk_aligned+0x40>)
 80178ac:	460c      	mov	r4, r1
 80178ae:	6831      	ldr	r1, [r6, #0]
 80178b0:	4605      	mov	r5, r0
 80178b2:	b911      	cbnz	r1, 80178ba <sbrk_aligned+0x12>
 80178b4:	f000 fe0e 	bl	80184d4 <_sbrk_r>
 80178b8:	6030      	str	r0, [r6, #0]
 80178ba:	4621      	mov	r1, r4
 80178bc:	4628      	mov	r0, r5
 80178be:	f000 fe09 	bl	80184d4 <_sbrk_r>
 80178c2:	1c43      	adds	r3, r0, #1
 80178c4:	d103      	bne.n	80178ce <sbrk_aligned+0x26>
 80178c6:	f04f 34ff 	mov.w	r4, #4294967295
 80178ca:	4620      	mov	r0, r4
 80178cc:	bd70      	pop	{r4, r5, r6, pc}
 80178ce:	1cc4      	adds	r4, r0, #3
 80178d0:	f024 0403 	bic.w	r4, r4, #3
 80178d4:	42a0      	cmp	r0, r4
 80178d6:	d0f8      	beq.n	80178ca <sbrk_aligned+0x22>
 80178d8:	1a21      	subs	r1, r4, r0
 80178da:	4628      	mov	r0, r5
 80178dc:	f000 fdfa 	bl	80184d4 <_sbrk_r>
 80178e0:	3001      	adds	r0, #1
 80178e2:	d1f2      	bne.n	80178ca <sbrk_aligned+0x22>
 80178e4:	e7ef      	b.n	80178c6 <sbrk_aligned+0x1e>
 80178e6:	bf00      	nop
 80178e8:	200097c0 	.word	0x200097c0

080178ec <_malloc_r>:
 80178ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178f0:	1ccd      	adds	r5, r1, #3
 80178f2:	f025 0503 	bic.w	r5, r5, #3
 80178f6:	3508      	adds	r5, #8
 80178f8:	2d0c      	cmp	r5, #12
 80178fa:	bf38      	it	cc
 80178fc:	250c      	movcc	r5, #12
 80178fe:	2d00      	cmp	r5, #0
 8017900:	4606      	mov	r6, r0
 8017902:	db01      	blt.n	8017908 <_malloc_r+0x1c>
 8017904:	42a9      	cmp	r1, r5
 8017906:	d904      	bls.n	8017912 <_malloc_r+0x26>
 8017908:	230c      	movs	r3, #12
 801790a:	6033      	str	r3, [r6, #0]
 801790c:	2000      	movs	r0, #0
 801790e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017912:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80179e8 <_malloc_r+0xfc>
 8017916:	f000 f869 	bl	80179ec <__malloc_lock>
 801791a:	f8d8 3000 	ldr.w	r3, [r8]
 801791e:	461c      	mov	r4, r3
 8017920:	bb44      	cbnz	r4, 8017974 <_malloc_r+0x88>
 8017922:	4629      	mov	r1, r5
 8017924:	4630      	mov	r0, r6
 8017926:	f7ff ffbf 	bl	80178a8 <sbrk_aligned>
 801792a:	1c43      	adds	r3, r0, #1
 801792c:	4604      	mov	r4, r0
 801792e:	d158      	bne.n	80179e2 <_malloc_r+0xf6>
 8017930:	f8d8 4000 	ldr.w	r4, [r8]
 8017934:	4627      	mov	r7, r4
 8017936:	2f00      	cmp	r7, #0
 8017938:	d143      	bne.n	80179c2 <_malloc_r+0xd6>
 801793a:	2c00      	cmp	r4, #0
 801793c:	d04b      	beq.n	80179d6 <_malloc_r+0xea>
 801793e:	6823      	ldr	r3, [r4, #0]
 8017940:	4639      	mov	r1, r7
 8017942:	4630      	mov	r0, r6
 8017944:	eb04 0903 	add.w	r9, r4, r3
 8017948:	f000 fdc4 	bl	80184d4 <_sbrk_r>
 801794c:	4581      	cmp	r9, r0
 801794e:	d142      	bne.n	80179d6 <_malloc_r+0xea>
 8017950:	6821      	ldr	r1, [r4, #0]
 8017952:	1a6d      	subs	r5, r5, r1
 8017954:	4629      	mov	r1, r5
 8017956:	4630      	mov	r0, r6
 8017958:	f7ff ffa6 	bl	80178a8 <sbrk_aligned>
 801795c:	3001      	adds	r0, #1
 801795e:	d03a      	beq.n	80179d6 <_malloc_r+0xea>
 8017960:	6823      	ldr	r3, [r4, #0]
 8017962:	442b      	add	r3, r5
 8017964:	6023      	str	r3, [r4, #0]
 8017966:	f8d8 3000 	ldr.w	r3, [r8]
 801796a:	685a      	ldr	r2, [r3, #4]
 801796c:	bb62      	cbnz	r2, 80179c8 <_malloc_r+0xdc>
 801796e:	f8c8 7000 	str.w	r7, [r8]
 8017972:	e00f      	b.n	8017994 <_malloc_r+0xa8>
 8017974:	6822      	ldr	r2, [r4, #0]
 8017976:	1b52      	subs	r2, r2, r5
 8017978:	d420      	bmi.n	80179bc <_malloc_r+0xd0>
 801797a:	2a0b      	cmp	r2, #11
 801797c:	d917      	bls.n	80179ae <_malloc_r+0xc2>
 801797e:	1961      	adds	r1, r4, r5
 8017980:	42a3      	cmp	r3, r4
 8017982:	6025      	str	r5, [r4, #0]
 8017984:	bf18      	it	ne
 8017986:	6059      	strne	r1, [r3, #4]
 8017988:	6863      	ldr	r3, [r4, #4]
 801798a:	bf08      	it	eq
 801798c:	f8c8 1000 	streq.w	r1, [r8]
 8017990:	5162      	str	r2, [r4, r5]
 8017992:	604b      	str	r3, [r1, #4]
 8017994:	4630      	mov	r0, r6
 8017996:	f000 f82f 	bl	80179f8 <__malloc_unlock>
 801799a:	f104 000b 	add.w	r0, r4, #11
 801799e:	1d23      	adds	r3, r4, #4
 80179a0:	f020 0007 	bic.w	r0, r0, #7
 80179a4:	1ac2      	subs	r2, r0, r3
 80179a6:	bf1c      	itt	ne
 80179a8:	1a1b      	subne	r3, r3, r0
 80179aa:	50a3      	strne	r3, [r4, r2]
 80179ac:	e7af      	b.n	801790e <_malloc_r+0x22>
 80179ae:	6862      	ldr	r2, [r4, #4]
 80179b0:	42a3      	cmp	r3, r4
 80179b2:	bf0c      	ite	eq
 80179b4:	f8c8 2000 	streq.w	r2, [r8]
 80179b8:	605a      	strne	r2, [r3, #4]
 80179ba:	e7eb      	b.n	8017994 <_malloc_r+0xa8>
 80179bc:	4623      	mov	r3, r4
 80179be:	6864      	ldr	r4, [r4, #4]
 80179c0:	e7ae      	b.n	8017920 <_malloc_r+0x34>
 80179c2:	463c      	mov	r4, r7
 80179c4:	687f      	ldr	r7, [r7, #4]
 80179c6:	e7b6      	b.n	8017936 <_malloc_r+0x4a>
 80179c8:	461a      	mov	r2, r3
 80179ca:	685b      	ldr	r3, [r3, #4]
 80179cc:	42a3      	cmp	r3, r4
 80179ce:	d1fb      	bne.n	80179c8 <_malloc_r+0xdc>
 80179d0:	2300      	movs	r3, #0
 80179d2:	6053      	str	r3, [r2, #4]
 80179d4:	e7de      	b.n	8017994 <_malloc_r+0xa8>
 80179d6:	230c      	movs	r3, #12
 80179d8:	6033      	str	r3, [r6, #0]
 80179da:	4630      	mov	r0, r6
 80179dc:	f000 f80c 	bl	80179f8 <__malloc_unlock>
 80179e0:	e794      	b.n	801790c <_malloc_r+0x20>
 80179e2:	6005      	str	r5, [r0, #0]
 80179e4:	e7d6      	b.n	8017994 <_malloc_r+0xa8>
 80179e6:	bf00      	nop
 80179e8:	200097c4 	.word	0x200097c4

080179ec <__malloc_lock>:
 80179ec:	4801      	ldr	r0, [pc, #4]	@ (80179f4 <__malloc_lock+0x8>)
 80179ee:	f7ff beda 	b.w	80177a6 <__retarget_lock_acquire_recursive>
 80179f2:	bf00      	nop
 80179f4:	200097bc 	.word	0x200097bc

080179f8 <__malloc_unlock>:
 80179f8:	4801      	ldr	r0, [pc, #4]	@ (8017a00 <__malloc_unlock+0x8>)
 80179fa:	f7ff bed5 	b.w	80177a8 <__retarget_lock_release_recursive>
 80179fe:	bf00      	nop
 8017a00:	200097bc 	.word	0x200097bc

08017a04 <__ssputs_r>:
 8017a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a08:	688e      	ldr	r6, [r1, #8]
 8017a0a:	461f      	mov	r7, r3
 8017a0c:	42be      	cmp	r6, r7
 8017a0e:	680b      	ldr	r3, [r1, #0]
 8017a10:	4682      	mov	sl, r0
 8017a12:	460c      	mov	r4, r1
 8017a14:	4690      	mov	r8, r2
 8017a16:	d82d      	bhi.n	8017a74 <__ssputs_r+0x70>
 8017a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017a20:	d026      	beq.n	8017a70 <__ssputs_r+0x6c>
 8017a22:	6965      	ldr	r5, [r4, #20]
 8017a24:	6909      	ldr	r1, [r1, #16]
 8017a26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a2a:	eba3 0901 	sub.w	r9, r3, r1
 8017a2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a32:	1c7b      	adds	r3, r7, #1
 8017a34:	444b      	add	r3, r9
 8017a36:	106d      	asrs	r5, r5, #1
 8017a38:	429d      	cmp	r5, r3
 8017a3a:	bf38      	it	cc
 8017a3c:	461d      	movcc	r5, r3
 8017a3e:	0553      	lsls	r3, r2, #21
 8017a40:	d527      	bpl.n	8017a92 <__ssputs_r+0x8e>
 8017a42:	4629      	mov	r1, r5
 8017a44:	f7ff ff52 	bl	80178ec <_malloc_r>
 8017a48:	4606      	mov	r6, r0
 8017a4a:	b360      	cbz	r0, 8017aa6 <__ssputs_r+0xa2>
 8017a4c:	6921      	ldr	r1, [r4, #16]
 8017a4e:	464a      	mov	r2, r9
 8017a50:	f7ff feab 	bl	80177aa <memcpy>
 8017a54:	89a3      	ldrh	r3, [r4, #12]
 8017a56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a5e:	81a3      	strh	r3, [r4, #12]
 8017a60:	6126      	str	r6, [r4, #16]
 8017a62:	6165      	str	r5, [r4, #20]
 8017a64:	444e      	add	r6, r9
 8017a66:	eba5 0509 	sub.w	r5, r5, r9
 8017a6a:	6026      	str	r6, [r4, #0]
 8017a6c:	60a5      	str	r5, [r4, #8]
 8017a6e:	463e      	mov	r6, r7
 8017a70:	42be      	cmp	r6, r7
 8017a72:	d900      	bls.n	8017a76 <__ssputs_r+0x72>
 8017a74:	463e      	mov	r6, r7
 8017a76:	6820      	ldr	r0, [r4, #0]
 8017a78:	4632      	mov	r2, r6
 8017a7a:	4641      	mov	r1, r8
 8017a7c:	f7ff fda0 	bl	80175c0 <memmove>
 8017a80:	68a3      	ldr	r3, [r4, #8]
 8017a82:	1b9b      	subs	r3, r3, r6
 8017a84:	60a3      	str	r3, [r4, #8]
 8017a86:	6823      	ldr	r3, [r4, #0]
 8017a88:	4433      	add	r3, r6
 8017a8a:	6023      	str	r3, [r4, #0]
 8017a8c:	2000      	movs	r0, #0
 8017a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a92:	462a      	mov	r2, r5
 8017a94:	f000 fd35 	bl	8018502 <_realloc_r>
 8017a98:	4606      	mov	r6, r0
 8017a9a:	2800      	cmp	r0, #0
 8017a9c:	d1e0      	bne.n	8017a60 <__ssputs_r+0x5c>
 8017a9e:	6921      	ldr	r1, [r4, #16]
 8017aa0:	4650      	mov	r0, sl
 8017aa2:	f7ff feaf 	bl	8017804 <_free_r>
 8017aa6:	230c      	movs	r3, #12
 8017aa8:	f8ca 3000 	str.w	r3, [sl]
 8017aac:	89a3      	ldrh	r3, [r4, #12]
 8017aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ab2:	81a3      	strh	r3, [r4, #12]
 8017ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab8:	e7e9      	b.n	8017a8e <__ssputs_r+0x8a>
	...

08017abc <_svfiprintf_r>:
 8017abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac0:	4698      	mov	r8, r3
 8017ac2:	898b      	ldrh	r3, [r1, #12]
 8017ac4:	061b      	lsls	r3, r3, #24
 8017ac6:	b09d      	sub	sp, #116	@ 0x74
 8017ac8:	4607      	mov	r7, r0
 8017aca:	460d      	mov	r5, r1
 8017acc:	4614      	mov	r4, r2
 8017ace:	d510      	bpl.n	8017af2 <_svfiprintf_r+0x36>
 8017ad0:	690b      	ldr	r3, [r1, #16]
 8017ad2:	b973      	cbnz	r3, 8017af2 <_svfiprintf_r+0x36>
 8017ad4:	2140      	movs	r1, #64	@ 0x40
 8017ad6:	f7ff ff09 	bl	80178ec <_malloc_r>
 8017ada:	6028      	str	r0, [r5, #0]
 8017adc:	6128      	str	r0, [r5, #16]
 8017ade:	b930      	cbnz	r0, 8017aee <_svfiprintf_r+0x32>
 8017ae0:	230c      	movs	r3, #12
 8017ae2:	603b      	str	r3, [r7, #0]
 8017ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ae8:	b01d      	add	sp, #116	@ 0x74
 8017aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aee:	2340      	movs	r3, #64	@ 0x40
 8017af0:	616b      	str	r3, [r5, #20]
 8017af2:	2300      	movs	r3, #0
 8017af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017af6:	2320      	movs	r3, #32
 8017af8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b00:	2330      	movs	r3, #48	@ 0x30
 8017b02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017ca0 <_svfiprintf_r+0x1e4>
 8017b06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017b0a:	f04f 0901 	mov.w	r9, #1
 8017b0e:	4623      	mov	r3, r4
 8017b10:	469a      	mov	sl, r3
 8017b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b16:	b10a      	cbz	r2, 8017b1c <_svfiprintf_r+0x60>
 8017b18:	2a25      	cmp	r2, #37	@ 0x25
 8017b1a:	d1f9      	bne.n	8017b10 <_svfiprintf_r+0x54>
 8017b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8017b20:	d00b      	beq.n	8017b3a <_svfiprintf_r+0x7e>
 8017b22:	465b      	mov	r3, fp
 8017b24:	4622      	mov	r2, r4
 8017b26:	4629      	mov	r1, r5
 8017b28:	4638      	mov	r0, r7
 8017b2a:	f7ff ff6b 	bl	8017a04 <__ssputs_r>
 8017b2e:	3001      	adds	r0, #1
 8017b30:	f000 80a7 	beq.w	8017c82 <_svfiprintf_r+0x1c6>
 8017b34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b36:	445a      	add	r2, fp
 8017b38:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	f000 809f 	beq.w	8017c82 <_svfiprintf_r+0x1c6>
 8017b44:	2300      	movs	r3, #0
 8017b46:	f04f 32ff 	mov.w	r2, #4294967295
 8017b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b4e:	f10a 0a01 	add.w	sl, sl, #1
 8017b52:	9304      	str	r3, [sp, #16]
 8017b54:	9307      	str	r3, [sp, #28]
 8017b56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017b5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8017b5c:	4654      	mov	r4, sl
 8017b5e:	2205      	movs	r2, #5
 8017b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b64:	484e      	ldr	r0, [pc, #312]	@ (8017ca0 <_svfiprintf_r+0x1e4>)
 8017b66:	f7e8 fb83 	bl	8000270 <memchr>
 8017b6a:	9a04      	ldr	r2, [sp, #16]
 8017b6c:	b9d8      	cbnz	r0, 8017ba6 <_svfiprintf_r+0xea>
 8017b6e:	06d0      	lsls	r0, r2, #27
 8017b70:	bf44      	itt	mi
 8017b72:	2320      	movmi	r3, #32
 8017b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b78:	0711      	lsls	r1, r2, #28
 8017b7a:	bf44      	itt	mi
 8017b7c:	232b      	movmi	r3, #43	@ 0x2b
 8017b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b82:	f89a 3000 	ldrb.w	r3, [sl]
 8017b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b88:	d015      	beq.n	8017bb6 <_svfiprintf_r+0xfa>
 8017b8a:	9a07      	ldr	r2, [sp, #28]
 8017b8c:	4654      	mov	r4, sl
 8017b8e:	2000      	movs	r0, #0
 8017b90:	f04f 0c0a 	mov.w	ip, #10
 8017b94:	4621      	mov	r1, r4
 8017b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b9a:	3b30      	subs	r3, #48	@ 0x30
 8017b9c:	2b09      	cmp	r3, #9
 8017b9e:	d94b      	bls.n	8017c38 <_svfiprintf_r+0x17c>
 8017ba0:	b1b0      	cbz	r0, 8017bd0 <_svfiprintf_r+0x114>
 8017ba2:	9207      	str	r2, [sp, #28]
 8017ba4:	e014      	b.n	8017bd0 <_svfiprintf_r+0x114>
 8017ba6:	eba0 0308 	sub.w	r3, r0, r8
 8017baa:	fa09 f303 	lsl.w	r3, r9, r3
 8017bae:	4313      	orrs	r3, r2
 8017bb0:	9304      	str	r3, [sp, #16]
 8017bb2:	46a2      	mov	sl, r4
 8017bb4:	e7d2      	b.n	8017b5c <_svfiprintf_r+0xa0>
 8017bb6:	9b03      	ldr	r3, [sp, #12]
 8017bb8:	1d19      	adds	r1, r3, #4
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	9103      	str	r1, [sp, #12]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	bfbb      	ittet	lt
 8017bc2:	425b      	neglt	r3, r3
 8017bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8017bc8:	9307      	strge	r3, [sp, #28]
 8017bca:	9307      	strlt	r3, [sp, #28]
 8017bcc:	bfb8      	it	lt
 8017bce:	9204      	strlt	r2, [sp, #16]
 8017bd0:	7823      	ldrb	r3, [r4, #0]
 8017bd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8017bd4:	d10a      	bne.n	8017bec <_svfiprintf_r+0x130>
 8017bd6:	7863      	ldrb	r3, [r4, #1]
 8017bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017bda:	d132      	bne.n	8017c42 <_svfiprintf_r+0x186>
 8017bdc:	9b03      	ldr	r3, [sp, #12]
 8017bde:	1d1a      	adds	r2, r3, #4
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	9203      	str	r2, [sp, #12]
 8017be4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017be8:	3402      	adds	r4, #2
 8017bea:	9305      	str	r3, [sp, #20]
 8017bec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017cb0 <_svfiprintf_r+0x1f4>
 8017bf0:	7821      	ldrb	r1, [r4, #0]
 8017bf2:	2203      	movs	r2, #3
 8017bf4:	4650      	mov	r0, sl
 8017bf6:	f7e8 fb3b 	bl	8000270 <memchr>
 8017bfa:	b138      	cbz	r0, 8017c0c <_svfiprintf_r+0x150>
 8017bfc:	9b04      	ldr	r3, [sp, #16]
 8017bfe:	eba0 000a 	sub.w	r0, r0, sl
 8017c02:	2240      	movs	r2, #64	@ 0x40
 8017c04:	4082      	lsls	r2, r0
 8017c06:	4313      	orrs	r3, r2
 8017c08:	3401      	adds	r4, #1
 8017c0a:	9304      	str	r3, [sp, #16]
 8017c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c10:	4824      	ldr	r0, [pc, #144]	@ (8017ca4 <_svfiprintf_r+0x1e8>)
 8017c12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017c16:	2206      	movs	r2, #6
 8017c18:	f7e8 fb2a 	bl	8000270 <memchr>
 8017c1c:	2800      	cmp	r0, #0
 8017c1e:	d036      	beq.n	8017c8e <_svfiprintf_r+0x1d2>
 8017c20:	4b21      	ldr	r3, [pc, #132]	@ (8017ca8 <_svfiprintf_r+0x1ec>)
 8017c22:	bb1b      	cbnz	r3, 8017c6c <_svfiprintf_r+0x1b0>
 8017c24:	9b03      	ldr	r3, [sp, #12]
 8017c26:	3307      	adds	r3, #7
 8017c28:	f023 0307 	bic.w	r3, r3, #7
 8017c2c:	3308      	adds	r3, #8
 8017c2e:	9303      	str	r3, [sp, #12]
 8017c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c32:	4433      	add	r3, r6
 8017c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c36:	e76a      	b.n	8017b0e <_svfiprintf_r+0x52>
 8017c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c3c:	460c      	mov	r4, r1
 8017c3e:	2001      	movs	r0, #1
 8017c40:	e7a8      	b.n	8017b94 <_svfiprintf_r+0xd8>
 8017c42:	2300      	movs	r3, #0
 8017c44:	3401      	adds	r4, #1
 8017c46:	9305      	str	r3, [sp, #20]
 8017c48:	4619      	mov	r1, r3
 8017c4a:	f04f 0c0a 	mov.w	ip, #10
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c54:	3a30      	subs	r2, #48	@ 0x30
 8017c56:	2a09      	cmp	r2, #9
 8017c58:	d903      	bls.n	8017c62 <_svfiprintf_r+0x1a6>
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d0c6      	beq.n	8017bec <_svfiprintf_r+0x130>
 8017c5e:	9105      	str	r1, [sp, #20]
 8017c60:	e7c4      	b.n	8017bec <_svfiprintf_r+0x130>
 8017c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c66:	4604      	mov	r4, r0
 8017c68:	2301      	movs	r3, #1
 8017c6a:	e7f0      	b.n	8017c4e <_svfiprintf_r+0x192>
 8017c6c:	ab03      	add	r3, sp, #12
 8017c6e:	9300      	str	r3, [sp, #0]
 8017c70:	462a      	mov	r2, r5
 8017c72:	4b0e      	ldr	r3, [pc, #56]	@ (8017cac <_svfiprintf_r+0x1f0>)
 8017c74:	a904      	add	r1, sp, #16
 8017c76:	4638      	mov	r0, r7
 8017c78:	f3af 8000 	nop.w
 8017c7c:	1c42      	adds	r2, r0, #1
 8017c7e:	4606      	mov	r6, r0
 8017c80:	d1d6      	bne.n	8017c30 <_svfiprintf_r+0x174>
 8017c82:	89ab      	ldrh	r3, [r5, #12]
 8017c84:	065b      	lsls	r3, r3, #25
 8017c86:	f53f af2d 	bmi.w	8017ae4 <_svfiprintf_r+0x28>
 8017c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c8c:	e72c      	b.n	8017ae8 <_svfiprintf_r+0x2c>
 8017c8e:	ab03      	add	r3, sp, #12
 8017c90:	9300      	str	r3, [sp, #0]
 8017c92:	462a      	mov	r2, r5
 8017c94:	4b05      	ldr	r3, [pc, #20]	@ (8017cac <_svfiprintf_r+0x1f0>)
 8017c96:	a904      	add	r1, sp, #16
 8017c98:	4638      	mov	r0, r7
 8017c9a:	f000 f9bb 	bl	8018014 <_printf_i>
 8017c9e:	e7ed      	b.n	8017c7c <_svfiprintf_r+0x1c0>
 8017ca0:	080189f3 	.word	0x080189f3
 8017ca4:	080189fd 	.word	0x080189fd
 8017ca8:	00000000 	.word	0x00000000
 8017cac:	08017a05 	.word	0x08017a05
 8017cb0:	080189f9 	.word	0x080189f9

08017cb4 <__sfputc_r>:
 8017cb4:	6893      	ldr	r3, [r2, #8]
 8017cb6:	3b01      	subs	r3, #1
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	b410      	push	{r4}
 8017cbc:	6093      	str	r3, [r2, #8]
 8017cbe:	da08      	bge.n	8017cd2 <__sfputc_r+0x1e>
 8017cc0:	6994      	ldr	r4, [r2, #24]
 8017cc2:	42a3      	cmp	r3, r4
 8017cc4:	db01      	blt.n	8017cca <__sfputc_r+0x16>
 8017cc6:	290a      	cmp	r1, #10
 8017cc8:	d103      	bne.n	8017cd2 <__sfputc_r+0x1e>
 8017cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017cce:	f7ff bbd2 	b.w	8017476 <__swbuf_r>
 8017cd2:	6813      	ldr	r3, [r2, #0]
 8017cd4:	1c58      	adds	r0, r3, #1
 8017cd6:	6010      	str	r0, [r2, #0]
 8017cd8:	7019      	strb	r1, [r3, #0]
 8017cda:	4608      	mov	r0, r1
 8017cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ce0:	4770      	bx	lr

08017ce2 <__sfputs_r>:
 8017ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ce4:	4606      	mov	r6, r0
 8017ce6:	460f      	mov	r7, r1
 8017ce8:	4614      	mov	r4, r2
 8017cea:	18d5      	adds	r5, r2, r3
 8017cec:	42ac      	cmp	r4, r5
 8017cee:	d101      	bne.n	8017cf4 <__sfputs_r+0x12>
 8017cf0:	2000      	movs	r0, #0
 8017cf2:	e007      	b.n	8017d04 <__sfputs_r+0x22>
 8017cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cf8:	463a      	mov	r2, r7
 8017cfa:	4630      	mov	r0, r6
 8017cfc:	f7ff ffda 	bl	8017cb4 <__sfputc_r>
 8017d00:	1c43      	adds	r3, r0, #1
 8017d02:	d1f3      	bne.n	8017cec <__sfputs_r+0xa>
 8017d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d08 <_vfiprintf_r>:
 8017d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0c:	460d      	mov	r5, r1
 8017d0e:	b09d      	sub	sp, #116	@ 0x74
 8017d10:	4614      	mov	r4, r2
 8017d12:	4698      	mov	r8, r3
 8017d14:	4606      	mov	r6, r0
 8017d16:	b118      	cbz	r0, 8017d20 <_vfiprintf_r+0x18>
 8017d18:	6a03      	ldr	r3, [r0, #32]
 8017d1a:	b90b      	cbnz	r3, 8017d20 <_vfiprintf_r+0x18>
 8017d1c:	f7ff fa8c 	bl	8017238 <__sinit>
 8017d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d22:	07d9      	lsls	r1, r3, #31
 8017d24:	d405      	bmi.n	8017d32 <_vfiprintf_r+0x2a>
 8017d26:	89ab      	ldrh	r3, [r5, #12]
 8017d28:	059a      	lsls	r2, r3, #22
 8017d2a:	d402      	bmi.n	8017d32 <_vfiprintf_r+0x2a>
 8017d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d2e:	f7ff fd3a 	bl	80177a6 <__retarget_lock_acquire_recursive>
 8017d32:	89ab      	ldrh	r3, [r5, #12]
 8017d34:	071b      	lsls	r3, r3, #28
 8017d36:	d501      	bpl.n	8017d3c <_vfiprintf_r+0x34>
 8017d38:	692b      	ldr	r3, [r5, #16]
 8017d3a:	b99b      	cbnz	r3, 8017d64 <_vfiprintf_r+0x5c>
 8017d3c:	4629      	mov	r1, r5
 8017d3e:	4630      	mov	r0, r6
 8017d40:	f7ff fbd8 	bl	80174f4 <__swsetup_r>
 8017d44:	b170      	cbz	r0, 8017d64 <_vfiprintf_r+0x5c>
 8017d46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d48:	07dc      	lsls	r4, r3, #31
 8017d4a:	d504      	bpl.n	8017d56 <_vfiprintf_r+0x4e>
 8017d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d50:	b01d      	add	sp, #116	@ 0x74
 8017d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d56:	89ab      	ldrh	r3, [r5, #12]
 8017d58:	0598      	lsls	r0, r3, #22
 8017d5a:	d4f7      	bmi.n	8017d4c <_vfiprintf_r+0x44>
 8017d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d5e:	f7ff fd23 	bl	80177a8 <__retarget_lock_release_recursive>
 8017d62:	e7f3      	b.n	8017d4c <_vfiprintf_r+0x44>
 8017d64:	2300      	movs	r3, #0
 8017d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d68:	2320      	movs	r3, #32
 8017d6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d72:	2330      	movs	r3, #48	@ 0x30
 8017d74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017f24 <_vfiprintf_r+0x21c>
 8017d78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017d7c:	f04f 0901 	mov.w	r9, #1
 8017d80:	4623      	mov	r3, r4
 8017d82:	469a      	mov	sl, r3
 8017d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d88:	b10a      	cbz	r2, 8017d8e <_vfiprintf_r+0x86>
 8017d8a:	2a25      	cmp	r2, #37	@ 0x25
 8017d8c:	d1f9      	bne.n	8017d82 <_vfiprintf_r+0x7a>
 8017d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8017d92:	d00b      	beq.n	8017dac <_vfiprintf_r+0xa4>
 8017d94:	465b      	mov	r3, fp
 8017d96:	4622      	mov	r2, r4
 8017d98:	4629      	mov	r1, r5
 8017d9a:	4630      	mov	r0, r6
 8017d9c:	f7ff ffa1 	bl	8017ce2 <__sfputs_r>
 8017da0:	3001      	adds	r0, #1
 8017da2:	f000 80a7 	beq.w	8017ef4 <_vfiprintf_r+0x1ec>
 8017da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017da8:	445a      	add	r2, fp
 8017daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8017dac:	f89a 3000 	ldrb.w	r3, [sl]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	f000 809f 	beq.w	8017ef4 <_vfiprintf_r+0x1ec>
 8017db6:	2300      	movs	r3, #0
 8017db8:	f04f 32ff 	mov.w	r2, #4294967295
 8017dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017dc0:	f10a 0a01 	add.w	sl, sl, #1
 8017dc4:	9304      	str	r3, [sp, #16]
 8017dc6:	9307      	str	r3, [sp, #28]
 8017dc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017dcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8017dce:	4654      	mov	r4, sl
 8017dd0:	2205      	movs	r2, #5
 8017dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017dd6:	4853      	ldr	r0, [pc, #332]	@ (8017f24 <_vfiprintf_r+0x21c>)
 8017dd8:	f7e8 fa4a 	bl	8000270 <memchr>
 8017ddc:	9a04      	ldr	r2, [sp, #16]
 8017dde:	b9d8      	cbnz	r0, 8017e18 <_vfiprintf_r+0x110>
 8017de0:	06d1      	lsls	r1, r2, #27
 8017de2:	bf44      	itt	mi
 8017de4:	2320      	movmi	r3, #32
 8017de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017dea:	0713      	lsls	r3, r2, #28
 8017dec:	bf44      	itt	mi
 8017dee:	232b      	movmi	r3, #43	@ 0x2b
 8017df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017df4:	f89a 3000 	ldrb.w	r3, [sl]
 8017df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017dfa:	d015      	beq.n	8017e28 <_vfiprintf_r+0x120>
 8017dfc:	9a07      	ldr	r2, [sp, #28]
 8017dfe:	4654      	mov	r4, sl
 8017e00:	2000      	movs	r0, #0
 8017e02:	f04f 0c0a 	mov.w	ip, #10
 8017e06:	4621      	mov	r1, r4
 8017e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e0c:	3b30      	subs	r3, #48	@ 0x30
 8017e0e:	2b09      	cmp	r3, #9
 8017e10:	d94b      	bls.n	8017eaa <_vfiprintf_r+0x1a2>
 8017e12:	b1b0      	cbz	r0, 8017e42 <_vfiprintf_r+0x13a>
 8017e14:	9207      	str	r2, [sp, #28]
 8017e16:	e014      	b.n	8017e42 <_vfiprintf_r+0x13a>
 8017e18:	eba0 0308 	sub.w	r3, r0, r8
 8017e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8017e20:	4313      	orrs	r3, r2
 8017e22:	9304      	str	r3, [sp, #16]
 8017e24:	46a2      	mov	sl, r4
 8017e26:	e7d2      	b.n	8017dce <_vfiprintf_r+0xc6>
 8017e28:	9b03      	ldr	r3, [sp, #12]
 8017e2a:	1d19      	adds	r1, r3, #4
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	9103      	str	r1, [sp, #12]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	bfbb      	ittet	lt
 8017e34:	425b      	neglt	r3, r3
 8017e36:	f042 0202 	orrlt.w	r2, r2, #2
 8017e3a:	9307      	strge	r3, [sp, #28]
 8017e3c:	9307      	strlt	r3, [sp, #28]
 8017e3e:	bfb8      	it	lt
 8017e40:	9204      	strlt	r2, [sp, #16]
 8017e42:	7823      	ldrb	r3, [r4, #0]
 8017e44:	2b2e      	cmp	r3, #46	@ 0x2e
 8017e46:	d10a      	bne.n	8017e5e <_vfiprintf_r+0x156>
 8017e48:	7863      	ldrb	r3, [r4, #1]
 8017e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e4c:	d132      	bne.n	8017eb4 <_vfiprintf_r+0x1ac>
 8017e4e:	9b03      	ldr	r3, [sp, #12]
 8017e50:	1d1a      	adds	r2, r3, #4
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	9203      	str	r2, [sp, #12]
 8017e56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017e5a:	3402      	adds	r4, #2
 8017e5c:	9305      	str	r3, [sp, #20]
 8017e5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017f34 <_vfiprintf_r+0x22c>
 8017e62:	7821      	ldrb	r1, [r4, #0]
 8017e64:	2203      	movs	r2, #3
 8017e66:	4650      	mov	r0, sl
 8017e68:	f7e8 fa02 	bl	8000270 <memchr>
 8017e6c:	b138      	cbz	r0, 8017e7e <_vfiprintf_r+0x176>
 8017e6e:	9b04      	ldr	r3, [sp, #16]
 8017e70:	eba0 000a 	sub.w	r0, r0, sl
 8017e74:	2240      	movs	r2, #64	@ 0x40
 8017e76:	4082      	lsls	r2, r0
 8017e78:	4313      	orrs	r3, r2
 8017e7a:	3401      	adds	r4, #1
 8017e7c:	9304      	str	r3, [sp, #16]
 8017e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e82:	4829      	ldr	r0, [pc, #164]	@ (8017f28 <_vfiprintf_r+0x220>)
 8017e84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017e88:	2206      	movs	r2, #6
 8017e8a:	f7e8 f9f1 	bl	8000270 <memchr>
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	d03f      	beq.n	8017f12 <_vfiprintf_r+0x20a>
 8017e92:	4b26      	ldr	r3, [pc, #152]	@ (8017f2c <_vfiprintf_r+0x224>)
 8017e94:	bb1b      	cbnz	r3, 8017ede <_vfiprintf_r+0x1d6>
 8017e96:	9b03      	ldr	r3, [sp, #12]
 8017e98:	3307      	adds	r3, #7
 8017e9a:	f023 0307 	bic.w	r3, r3, #7
 8017e9e:	3308      	adds	r3, #8
 8017ea0:	9303      	str	r3, [sp, #12]
 8017ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ea4:	443b      	add	r3, r7
 8017ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ea8:	e76a      	b.n	8017d80 <_vfiprintf_r+0x78>
 8017eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8017eae:	460c      	mov	r4, r1
 8017eb0:	2001      	movs	r0, #1
 8017eb2:	e7a8      	b.n	8017e06 <_vfiprintf_r+0xfe>
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	3401      	adds	r4, #1
 8017eb8:	9305      	str	r3, [sp, #20]
 8017eba:	4619      	mov	r1, r3
 8017ebc:	f04f 0c0a 	mov.w	ip, #10
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ec6:	3a30      	subs	r2, #48	@ 0x30
 8017ec8:	2a09      	cmp	r2, #9
 8017eca:	d903      	bls.n	8017ed4 <_vfiprintf_r+0x1cc>
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d0c6      	beq.n	8017e5e <_vfiprintf_r+0x156>
 8017ed0:	9105      	str	r1, [sp, #20]
 8017ed2:	e7c4      	b.n	8017e5e <_vfiprintf_r+0x156>
 8017ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ed8:	4604      	mov	r4, r0
 8017eda:	2301      	movs	r3, #1
 8017edc:	e7f0      	b.n	8017ec0 <_vfiprintf_r+0x1b8>
 8017ede:	ab03      	add	r3, sp, #12
 8017ee0:	9300      	str	r3, [sp, #0]
 8017ee2:	462a      	mov	r2, r5
 8017ee4:	4b12      	ldr	r3, [pc, #72]	@ (8017f30 <_vfiprintf_r+0x228>)
 8017ee6:	a904      	add	r1, sp, #16
 8017ee8:	4630      	mov	r0, r6
 8017eea:	f3af 8000 	nop.w
 8017eee:	4607      	mov	r7, r0
 8017ef0:	1c78      	adds	r0, r7, #1
 8017ef2:	d1d6      	bne.n	8017ea2 <_vfiprintf_r+0x19a>
 8017ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ef6:	07d9      	lsls	r1, r3, #31
 8017ef8:	d405      	bmi.n	8017f06 <_vfiprintf_r+0x1fe>
 8017efa:	89ab      	ldrh	r3, [r5, #12]
 8017efc:	059a      	lsls	r2, r3, #22
 8017efe:	d402      	bmi.n	8017f06 <_vfiprintf_r+0x1fe>
 8017f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f02:	f7ff fc51 	bl	80177a8 <__retarget_lock_release_recursive>
 8017f06:	89ab      	ldrh	r3, [r5, #12]
 8017f08:	065b      	lsls	r3, r3, #25
 8017f0a:	f53f af1f 	bmi.w	8017d4c <_vfiprintf_r+0x44>
 8017f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f10:	e71e      	b.n	8017d50 <_vfiprintf_r+0x48>
 8017f12:	ab03      	add	r3, sp, #12
 8017f14:	9300      	str	r3, [sp, #0]
 8017f16:	462a      	mov	r2, r5
 8017f18:	4b05      	ldr	r3, [pc, #20]	@ (8017f30 <_vfiprintf_r+0x228>)
 8017f1a:	a904      	add	r1, sp, #16
 8017f1c:	4630      	mov	r0, r6
 8017f1e:	f000 f879 	bl	8018014 <_printf_i>
 8017f22:	e7e4      	b.n	8017eee <_vfiprintf_r+0x1e6>
 8017f24:	080189f3 	.word	0x080189f3
 8017f28:	080189fd 	.word	0x080189fd
 8017f2c:	00000000 	.word	0x00000000
 8017f30:	08017ce3 	.word	0x08017ce3
 8017f34:	080189f9 	.word	0x080189f9

08017f38 <_printf_common>:
 8017f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f3c:	4616      	mov	r6, r2
 8017f3e:	4698      	mov	r8, r3
 8017f40:	688a      	ldr	r2, [r1, #8]
 8017f42:	690b      	ldr	r3, [r1, #16]
 8017f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017f48:	4293      	cmp	r3, r2
 8017f4a:	bfb8      	it	lt
 8017f4c:	4613      	movlt	r3, r2
 8017f4e:	6033      	str	r3, [r6, #0]
 8017f50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017f54:	4607      	mov	r7, r0
 8017f56:	460c      	mov	r4, r1
 8017f58:	b10a      	cbz	r2, 8017f5e <_printf_common+0x26>
 8017f5a:	3301      	adds	r3, #1
 8017f5c:	6033      	str	r3, [r6, #0]
 8017f5e:	6823      	ldr	r3, [r4, #0]
 8017f60:	0699      	lsls	r1, r3, #26
 8017f62:	bf42      	ittt	mi
 8017f64:	6833      	ldrmi	r3, [r6, #0]
 8017f66:	3302      	addmi	r3, #2
 8017f68:	6033      	strmi	r3, [r6, #0]
 8017f6a:	6825      	ldr	r5, [r4, #0]
 8017f6c:	f015 0506 	ands.w	r5, r5, #6
 8017f70:	d106      	bne.n	8017f80 <_printf_common+0x48>
 8017f72:	f104 0a19 	add.w	sl, r4, #25
 8017f76:	68e3      	ldr	r3, [r4, #12]
 8017f78:	6832      	ldr	r2, [r6, #0]
 8017f7a:	1a9b      	subs	r3, r3, r2
 8017f7c:	42ab      	cmp	r3, r5
 8017f7e:	dc26      	bgt.n	8017fce <_printf_common+0x96>
 8017f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017f84:	6822      	ldr	r2, [r4, #0]
 8017f86:	3b00      	subs	r3, #0
 8017f88:	bf18      	it	ne
 8017f8a:	2301      	movne	r3, #1
 8017f8c:	0692      	lsls	r2, r2, #26
 8017f8e:	d42b      	bmi.n	8017fe8 <_printf_common+0xb0>
 8017f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017f94:	4641      	mov	r1, r8
 8017f96:	4638      	mov	r0, r7
 8017f98:	47c8      	blx	r9
 8017f9a:	3001      	adds	r0, #1
 8017f9c:	d01e      	beq.n	8017fdc <_printf_common+0xa4>
 8017f9e:	6823      	ldr	r3, [r4, #0]
 8017fa0:	6922      	ldr	r2, [r4, #16]
 8017fa2:	f003 0306 	and.w	r3, r3, #6
 8017fa6:	2b04      	cmp	r3, #4
 8017fa8:	bf02      	ittt	eq
 8017faa:	68e5      	ldreq	r5, [r4, #12]
 8017fac:	6833      	ldreq	r3, [r6, #0]
 8017fae:	1aed      	subeq	r5, r5, r3
 8017fb0:	68a3      	ldr	r3, [r4, #8]
 8017fb2:	bf0c      	ite	eq
 8017fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017fb8:	2500      	movne	r5, #0
 8017fba:	4293      	cmp	r3, r2
 8017fbc:	bfc4      	itt	gt
 8017fbe:	1a9b      	subgt	r3, r3, r2
 8017fc0:	18ed      	addgt	r5, r5, r3
 8017fc2:	2600      	movs	r6, #0
 8017fc4:	341a      	adds	r4, #26
 8017fc6:	42b5      	cmp	r5, r6
 8017fc8:	d11a      	bne.n	8018000 <_printf_common+0xc8>
 8017fca:	2000      	movs	r0, #0
 8017fcc:	e008      	b.n	8017fe0 <_printf_common+0xa8>
 8017fce:	2301      	movs	r3, #1
 8017fd0:	4652      	mov	r2, sl
 8017fd2:	4641      	mov	r1, r8
 8017fd4:	4638      	mov	r0, r7
 8017fd6:	47c8      	blx	r9
 8017fd8:	3001      	adds	r0, #1
 8017fda:	d103      	bne.n	8017fe4 <_printf_common+0xac>
 8017fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fe4:	3501      	adds	r5, #1
 8017fe6:	e7c6      	b.n	8017f76 <_printf_common+0x3e>
 8017fe8:	18e1      	adds	r1, r4, r3
 8017fea:	1c5a      	adds	r2, r3, #1
 8017fec:	2030      	movs	r0, #48	@ 0x30
 8017fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017ff2:	4422      	add	r2, r4
 8017ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017ffc:	3302      	adds	r3, #2
 8017ffe:	e7c7      	b.n	8017f90 <_printf_common+0x58>
 8018000:	2301      	movs	r3, #1
 8018002:	4622      	mov	r2, r4
 8018004:	4641      	mov	r1, r8
 8018006:	4638      	mov	r0, r7
 8018008:	47c8      	blx	r9
 801800a:	3001      	adds	r0, #1
 801800c:	d0e6      	beq.n	8017fdc <_printf_common+0xa4>
 801800e:	3601      	adds	r6, #1
 8018010:	e7d9      	b.n	8017fc6 <_printf_common+0x8e>
	...

08018014 <_printf_i>:
 8018014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018018:	7e0f      	ldrb	r7, [r1, #24]
 801801a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801801c:	2f78      	cmp	r7, #120	@ 0x78
 801801e:	4691      	mov	r9, r2
 8018020:	4680      	mov	r8, r0
 8018022:	460c      	mov	r4, r1
 8018024:	469a      	mov	sl, r3
 8018026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801802a:	d807      	bhi.n	801803c <_printf_i+0x28>
 801802c:	2f62      	cmp	r7, #98	@ 0x62
 801802e:	d80a      	bhi.n	8018046 <_printf_i+0x32>
 8018030:	2f00      	cmp	r7, #0
 8018032:	f000 80d1 	beq.w	80181d8 <_printf_i+0x1c4>
 8018036:	2f58      	cmp	r7, #88	@ 0x58
 8018038:	f000 80b8 	beq.w	80181ac <_printf_i+0x198>
 801803c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018044:	e03a      	b.n	80180bc <_printf_i+0xa8>
 8018046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801804a:	2b15      	cmp	r3, #21
 801804c:	d8f6      	bhi.n	801803c <_printf_i+0x28>
 801804e:	a101      	add	r1, pc, #4	@ (adr r1, 8018054 <_printf_i+0x40>)
 8018050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018054:	080180ad 	.word	0x080180ad
 8018058:	080180c1 	.word	0x080180c1
 801805c:	0801803d 	.word	0x0801803d
 8018060:	0801803d 	.word	0x0801803d
 8018064:	0801803d 	.word	0x0801803d
 8018068:	0801803d 	.word	0x0801803d
 801806c:	080180c1 	.word	0x080180c1
 8018070:	0801803d 	.word	0x0801803d
 8018074:	0801803d 	.word	0x0801803d
 8018078:	0801803d 	.word	0x0801803d
 801807c:	0801803d 	.word	0x0801803d
 8018080:	080181bf 	.word	0x080181bf
 8018084:	080180eb 	.word	0x080180eb
 8018088:	08018179 	.word	0x08018179
 801808c:	0801803d 	.word	0x0801803d
 8018090:	0801803d 	.word	0x0801803d
 8018094:	080181e1 	.word	0x080181e1
 8018098:	0801803d 	.word	0x0801803d
 801809c:	080180eb 	.word	0x080180eb
 80180a0:	0801803d 	.word	0x0801803d
 80180a4:	0801803d 	.word	0x0801803d
 80180a8:	08018181 	.word	0x08018181
 80180ac:	6833      	ldr	r3, [r6, #0]
 80180ae:	1d1a      	adds	r2, r3, #4
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	6032      	str	r2, [r6, #0]
 80180b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80180b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80180bc:	2301      	movs	r3, #1
 80180be:	e09c      	b.n	80181fa <_printf_i+0x1e6>
 80180c0:	6833      	ldr	r3, [r6, #0]
 80180c2:	6820      	ldr	r0, [r4, #0]
 80180c4:	1d19      	adds	r1, r3, #4
 80180c6:	6031      	str	r1, [r6, #0]
 80180c8:	0606      	lsls	r6, r0, #24
 80180ca:	d501      	bpl.n	80180d0 <_printf_i+0xbc>
 80180cc:	681d      	ldr	r5, [r3, #0]
 80180ce:	e003      	b.n	80180d8 <_printf_i+0xc4>
 80180d0:	0645      	lsls	r5, r0, #25
 80180d2:	d5fb      	bpl.n	80180cc <_printf_i+0xb8>
 80180d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80180d8:	2d00      	cmp	r5, #0
 80180da:	da03      	bge.n	80180e4 <_printf_i+0xd0>
 80180dc:	232d      	movs	r3, #45	@ 0x2d
 80180de:	426d      	negs	r5, r5
 80180e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80180e4:	4858      	ldr	r0, [pc, #352]	@ (8018248 <_printf_i+0x234>)
 80180e6:	230a      	movs	r3, #10
 80180e8:	e011      	b.n	801810e <_printf_i+0xfa>
 80180ea:	6821      	ldr	r1, [r4, #0]
 80180ec:	6833      	ldr	r3, [r6, #0]
 80180ee:	0608      	lsls	r0, r1, #24
 80180f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80180f4:	d402      	bmi.n	80180fc <_printf_i+0xe8>
 80180f6:	0649      	lsls	r1, r1, #25
 80180f8:	bf48      	it	mi
 80180fa:	b2ad      	uxthmi	r5, r5
 80180fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80180fe:	4852      	ldr	r0, [pc, #328]	@ (8018248 <_printf_i+0x234>)
 8018100:	6033      	str	r3, [r6, #0]
 8018102:	bf14      	ite	ne
 8018104:	230a      	movne	r3, #10
 8018106:	2308      	moveq	r3, #8
 8018108:	2100      	movs	r1, #0
 801810a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801810e:	6866      	ldr	r6, [r4, #4]
 8018110:	60a6      	str	r6, [r4, #8]
 8018112:	2e00      	cmp	r6, #0
 8018114:	db05      	blt.n	8018122 <_printf_i+0x10e>
 8018116:	6821      	ldr	r1, [r4, #0]
 8018118:	432e      	orrs	r6, r5
 801811a:	f021 0104 	bic.w	r1, r1, #4
 801811e:	6021      	str	r1, [r4, #0]
 8018120:	d04b      	beq.n	80181ba <_printf_i+0x1a6>
 8018122:	4616      	mov	r6, r2
 8018124:	fbb5 f1f3 	udiv	r1, r5, r3
 8018128:	fb03 5711 	mls	r7, r3, r1, r5
 801812c:	5dc7      	ldrb	r7, [r0, r7]
 801812e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018132:	462f      	mov	r7, r5
 8018134:	42bb      	cmp	r3, r7
 8018136:	460d      	mov	r5, r1
 8018138:	d9f4      	bls.n	8018124 <_printf_i+0x110>
 801813a:	2b08      	cmp	r3, #8
 801813c:	d10b      	bne.n	8018156 <_printf_i+0x142>
 801813e:	6823      	ldr	r3, [r4, #0]
 8018140:	07df      	lsls	r7, r3, #31
 8018142:	d508      	bpl.n	8018156 <_printf_i+0x142>
 8018144:	6923      	ldr	r3, [r4, #16]
 8018146:	6861      	ldr	r1, [r4, #4]
 8018148:	4299      	cmp	r1, r3
 801814a:	bfde      	ittt	le
 801814c:	2330      	movle	r3, #48	@ 0x30
 801814e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018152:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018156:	1b92      	subs	r2, r2, r6
 8018158:	6122      	str	r2, [r4, #16]
 801815a:	f8cd a000 	str.w	sl, [sp]
 801815e:	464b      	mov	r3, r9
 8018160:	aa03      	add	r2, sp, #12
 8018162:	4621      	mov	r1, r4
 8018164:	4640      	mov	r0, r8
 8018166:	f7ff fee7 	bl	8017f38 <_printf_common>
 801816a:	3001      	adds	r0, #1
 801816c:	d14a      	bne.n	8018204 <_printf_i+0x1f0>
 801816e:	f04f 30ff 	mov.w	r0, #4294967295
 8018172:	b004      	add	sp, #16
 8018174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018178:	6823      	ldr	r3, [r4, #0]
 801817a:	f043 0320 	orr.w	r3, r3, #32
 801817e:	6023      	str	r3, [r4, #0]
 8018180:	4832      	ldr	r0, [pc, #200]	@ (801824c <_printf_i+0x238>)
 8018182:	2778      	movs	r7, #120	@ 0x78
 8018184:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018188:	6823      	ldr	r3, [r4, #0]
 801818a:	6831      	ldr	r1, [r6, #0]
 801818c:	061f      	lsls	r7, r3, #24
 801818e:	f851 5b04 	ldr.w	r5, [r1], #4
 8018192:	d402      	bmi.n	801819a <_printf_i+0x186>
 8018194:	065f      	lsls	r7, r3, #25
 8018196:	bf48      	it	mi
 8018198:	b2ad      	uxthmi	r5, r5
 801819a:	6031      	str	r1, [r6, #0]
 801819c:	07d9      	lsls	r1, r3, #31
 801819e:	bf44      	itt	mi
 80181a0:	f043 0320 	orrmi.w	r3, r3, #32
 80181a4:	6023      	strmi	r3, [r4, #0]
 80181a6:	b11d      	cbz	r5, 80181b0 <_printf_i+0x19c>
 80181a8:	2310      	movs	r3, #16
 80181aa:	e7ad      	b.n	8018108 <_printf_i+0xf4>
 80181ac:	4826      	ldr	r0, [pc, #152]	@ (8018248 <_printf_i+0x234>)
 80181ae:	e7e9      	b.n	8018184 <_printf_i+0x170>
 80181b0:	6823      	ldr	r3, [r4, #0]
 80181b2:	f023 0320 	bic.w	r3, r3, #32
 80181b6:	6023      	str	r3, [r4, #0]
 80181b8:	e7f6      	b.n	80181a8 <_printf_i+0x194>
 80181ba:	4616      	mov	r6, r2
 80181bc:	e7bd      	b.n	801813a <_printf_i+0x126>
 80181be:	6833      	ldr	r3, [r6, #0]
 80181c0:	6825      	ldr	r5, [r4, #0]
 80181c2:	6961      	ldr	r1, [r4, #20]
 80181c4:	1d18      	adds	r0, r3, #4
 80181c6:	6030      	str	r0, [r6, #0]
 80181c8:	062e      	lsls	r6, r5, #24
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	d501      	bpl.n	80181d2 <_printf_i+0x1be>
 80181ce:	6019      	str	r1, [r3, #0]
 80181d0:	e002      	b.n	80181d8 <_printf_i+0x1c4>
 80181d2:	0668      	lsls	r0, r5, #25
 80181d4:	d5fb      	bpl.n	80181ce <_printf_i+0x1ba>
 80181d6:	8019      	strh	r1, [r3, #0]
 80181d8:	2300      	movs	r3, #0
 80181da:	6123      	str	r3, [r4, #16]
 80181dc:	4616      	mov	r6, r2
 80181de:	e7bc      	b.n	801815a <_printf_i+0x146>
 80181e0:	6833      	ldr	r3, [r6, #0]
 80181e2:	1d1a      	adds	r2, r3, #4
 80181e4:	6032      	str	r2, [r6, #0]
 80181e6:	681e      	ldr	r6, [r3, #0]
 80181e8:	6862      	ldr	r2, [r4, #4]
 80181ea:	2100      	movs	r1, #0
 80181ec:	4630      	mov	r0, r6
 80181ee:	f7e8 f83f 	bl	8000270 <memchr>
 80181f2:	b108      	cbz	r0, 80181f8 <_printf_i+0x1e4>
 80181f4:	1b80      	subs	r0, r0, r6
 80181f6:	6060      	str	r0, [r4, #4]
 80181f8:	6863      	ldr	r3, [r4, #4]
 80181fa:	6123      	str	r3, [r4, #16]
 80181fc:	2300      	movs	r3, #0
 80181fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018202:	e7aa      	b.n	801815a <_printf_i+0x146>
 8018204:	6923      	ldr	r3, [r4, #16]
 8018206:	4632      	mov	r2, r6
 8018208:	4649      	mov	r1, r9
 801820a:	4640      	mov	r0, r8
 801820c:	47d0      	blx	sl
 801820e:	3001      	adds	r0, #1
 8018210:	d0ad      	beq.n	801816e <_printf_i+0x15a>
 8018212:	6823      	ldr	r3, [r4, #0]
 8018214:	079b      	lsls	r3, r3, #30
 8018216:	d413      	bmi.n	8018240 <_printf_i+0x22c>
 8018218:	68e0      	ldr	r0, [r4, #12]
 801821a:	9b03      	ldr	r3, [sp, #12]
 801821c:	4298      	cmp	r0, r3
 801821e:	bfb8      	it	lt
 8018220:	4618      	movlt	r0, r3
 8018222:	e7a6      	b.n	8018172 <_printf_i+0x15e>
 8018224:	2301      	movs	r3, #1
 8018226:	4632      	mov	r2, r6
 8018228:	4649      	mov	r1, r9
 801822a:	4640      	mov	r0, r8
 801822c:	47d0      	blx	sl
 801822e:	3001      	adds	r0, #1
 8018230:	d09d      	beq.n	801816e <_printf_i+0x15a>
 8018232:	3501      	adds	r5, #1
 8018234:	68e3      	ldr	r3, [r4, #12]
 8018236:	9903      	ldr	r1, [sp, #12]
 8018238:	1a5b      	subs	r3, r3, r1
 801823a:	42ab      	cmp	r3, r5
 801823c:	dcf2      	bgt.n	8018224 <_printf_i+0x210>
 801823e:	e7eb      	b.n	8018218 <_printf_i+0x204>
 8018240:	2500      	movs	r5, #0
 8018242:	f104 0619 	add.w	r6, r4, #25
 8018246:	e7f5      	b.n	8018234 <_printf_i+0x220>
 8018248:	08018a04 	.word	0x08018a04
 801824c:	08018a15 	.word	0x08018a15

08018250 <__sflush_r>:
 8018250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018258:	0716      	lsls	r6, r2, #28
 801825a:	4605      	mov	r5, r0
 801825c:	460c      	mov	r4, r1
 801825e:	d454      	bmi.n	801830a <__sflush_r+0xba>
 8018260:	684b      	ldr	r3, [r1, #4]
 8018262:	2b00      	cmp	r3, #0
 8018264:	dc02      	bgt.n	801826c <__sflush_r+0x1c>
 8018266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018268:	2b00      	cmp	r3, #0
 801826a:	dd48      	ble.n	80182fe <__sflush_r+0xae>
 801826c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801826e:	2e00      	cmp	r6, #0
 8018270:	d045      	beq.n	80182fe <__sflush_r+0xae>
 8018272:	2300      	movs	r3, #0
 8018274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018278:	682f      	ldr	r7, [r5, #0]
 801827a:	6a21      	ldr	r1, [r4, #32]
 801827c:	602b      	str	r3, [r5, #0]
 801827e:	d030      	beq.n	80182e2 <__sflush_r+0x92>
 8018280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018282:	89a3      	ldrh	r3, [r4, #12]
 8018284:	0759      	lsls	r1, r3, #29
 8018286:	d505      	bpl.n	8018294 <__sflush_r+0x44>
 8018288:	6863      	ldr	r3, [r4, #4]
 801828a:	1ad2      	subs	r2, r2, r3
 801828c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801828e:	b10b      	cbz	r3, 8018294 <__sflush_r+0x44>
 8018290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018292:	1ad2      	subs	r2, r2, r3
 8018294:	2300      	movs	r3, #0
 8018296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018298:	6a21      	ldr	r1, [r4, #32]
 801829a:	4628      	mov	r0, r5
 801829c:	47b0      	blx	r6
 801829e:	1c43      	adds	r3, r0, #1
 80182a0:	89a3      	ldrh	r3, [r4, #12]
 80182a2:	d106      	bne.n	80182b2 <__sflush_r+0x62>
 80182a4:	6829      	ldr	r1, [r5, #0]
 80182a6:	291d      	cmp	r1, #29
 80182a8:	d82b      	bhi.n	8018302 <__sflush_r+0xb2>
 80182aa:	4a2a      	ldr	r2, [pc, #168]	@ (8018354 <__sflush_r+0x104>)
 80182ac:	40ca      	lsrs	r2, r1
 80182ae:	07d6      	lsls	r6, r2, #31
 80182b0:	d527      	bpl.n	8018302 <__sflush_r+0xb2>
 80182b2:	2200      	movs	r2, #0
 80182b4:	6062      	str	r2, [r4, #4]
 80182b6:	04d9      	lsls	r1, r3, #19
 80182b8:	6922      	ldr	r2, [r4, #16]
 80182ba:	6022      	str	r2, [r4, #0]
 80182bc:	d504      	bpl.n	80182c8 <__sflush_r+0x78>
 80182be:	1c42      	adds	r2, r0, #1
 80182c0:	d101      	bne.n	80182c6 <__sflush_r+0x76>
 80182c2:	682b      	ldr	r3, [r5, #0]
 80182c4:	b903      	cbnz	r3, 80182c8 <__sflush_r+0x78>
 80182c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80182c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80182ca:	602f      	str	r7, [r5, #0]
 80182cc:	b1b9      	cbz	r1, 80182fe <__sflush_r+0xae>
 80182ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80182d2:	4299      	cmp	r1, r3
 80182d4:	d002      	beq.n	80182dc <__sflush_r+0x8c>
 80182d6:	4628      	mov	r0, r5
 80182d8:	f7ff fa94 	bl	8017804 <_free_r>
 80182dc:	2300      	movs	r3, #0
 80182de:	6363      	str	r3, [r4, #52]	@ 0x34
 80182e0:	e00d      	b.n	80182fe <__sflush_r+0xae>
 80182e2:	2301      	movs	r3, #1
 80182e4:	4628      	mov	r0, r5
 80182e6:	47b0      	blx	r6
 80182e8:	4602      	mov	r2, r0
 80182ea:	1c50      	adds	r0, r2, #1
 80182ec:	d1c9      	bne.n	8018282 <__sflush_r+0x32>
 80182ee:	682b      	ldr	r3, [r5, #0]
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d0c6      	beq.n	8018282 <__sflush_r+0x32>
 80182f4:	2b1d      	cmp	r3, #29
 80182f6:	d001      	beq.n	80182fc <__sflush_r+0xac>
 80182f8:	2b16      	cmp	r3, #22
 80182fa:	d11e      	bne.n	801833a <__sflush_r+0xea>
 80182fc:	602f      	str	r7, [r5, #0]
 80182fe:	2000      	movs	r0, #0
 8018300:	e022      	b.n	8018348 <__sflush_r+0xf8>
 8018302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018306:	b21b      	sxth	r3, r3
 8018308:	e01b      	b.n	8018342 <__sflush_r+0xf2>
 801830a:	690f      	ldr	r7, [r1, #16]
 801830c:	2f00      	cmp	r7, #0
 801830e:	d0f6      	beq.n	80182fe <__sflush_r+0xae>
 8018310:	0793      	lsls	r3, r2, #30
 8018312:	680e      	ldr	r6, [r1, #0]
 8018314:	bf08      	it	eq
 8018316:	694b      	ldreq	r3, [r1, #20]
 8018318:	600f      	str	r7, [r1, #0]
 801831a:	bf18      	it	ne
 801831c:	2300      	movne	r3, #0
 801831e:	eba6 0807 	sub.w	r8, r6, r7
 8018322:	608b      	str	r3, [r1, #8]
 8018324:	f1b8 0f00 	cmp.w	r8, #0
 8018328:	dde9      	ble.n	80182fe <__sflush_r+0xae>
 801832a:	6a21      	ldr	r1, [r4, #32]
 801832c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801832e:	4643      	mov	r3, r8
 8018330:	463a      	mov	r2, r7
 8018332:	4628      	mov	r0, r5
 8018334:	47b0      	blx	r6
 8018336:	2800      	cmp	r0, #0
 8018338:	dc08      	bgt.n	801834c <__sflush_r+0xfc>
 801833a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801833e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018342:	81a3      	strh	r3, [r4, #12]
 8018344:	f04f 30ff 	mov.w	r0, #4294967295
 8018348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801834c:	4407      	add	r7, r0
 801834e:	eba8 0800 	sub.w	r8, r8, r0
 8018352:	e7e7      	b.n	8018324 <__sflush_r+0xd4>
 8018354:	20400001 	.word	0x20400001

08018358 <_fflush_r>:
 8018358:	b538      	push	{r3, r4, r5, lr}
 801835a:	690b      	ldr	r3, [r1, #16]
 801835c:	4605      	mov	r5, r0
 801835e:	460c      	mov	r4, r1
 8018360:	b913      	cbnz	r3, 8018368 <_fflush_r+0x10>
 8018362:	2500      	movs	r5, #0
 8018364:	4628      	mov	r0, r5
 8018366:	bd38      	pop	{r3, r4, r5, pc}
 8018368:	b118      	cbz	r0, 8018372 <_fflush_r+0x1a>
 801836a:	6a03      	ldr	r3, [r0, #32]
 801836c:	b90b      	cbnz	r3, 8018372 <_fflush_r+0x1a>
 801836e:	f7fe ff63 	bl	8017238 <__sinit>
 8018372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d0f3      	beq.n	8018362 <_fflush_r+0xa>
 801837a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801837c:	07d0      	lsls	r0, r2, #31
 801837e:	d404      	bmi.n	801838a <_fflush_r+0x32>
 8018380:	0599      	lsls	r1, r3, #22
 8018382:	d402      	bmi.n	801838a <_fflush_r+0x32>
 8018384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018386:	f7ff fa0e 	bl	80177a6 <__retarget_lock_acquire_recursive>
 801838a:	4628      	mov	r0, r5
 801838c:	4621      	mov	r1, r4
 801838e:	f7ff ff5f 	bl	8018250 <__sflush_r>
 8018392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018394:	07da      	lsls	r2, r3, #31
 8018396:	4605      	mov	r5, r0
 8018398:	d4e4      	bmi.n	8018364 <_fflush_r+0xc>
 801839a:	89a3      	ldrh	r3, [r4, #12]
 801839c:	059b      	lsls	r3, r3, #22
 801839e:	d4e1      	bmi.n	8018364 <_fflush_r+0xc>
 80183a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80183a2:	f7ff fa01 	bl	80177a8 <__retarget_lock_release_recursive>
 80183a6:	e7dd      	b.n	8018364 <_fflush_r+0xc>

080183a8 <fiprintf>:
 80183a8:	b40e      	push	{r1, r2, r3}
 80183aa:	b503      	push	{r0, r1, lr}
 80183ac:	4601      	mov	r1, r0
 80183ae:	ab03      	add	r3, sp, #12
 80183b0:	4805      	ldr	r0, [pc, #20]	@ (80183c8 <fiprintf+0x20>)
 80183b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80183b6:	6800      	ldr	r0, [r0, #0]
 80183b8:	9301      	str	r3, [sp, #4]
 80183ba:	f7ff fca5 	bl	8017d08 <_vfiprintf_r>
 80183be:	b002      	add	sp, #8
 80183c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80183c4:	b003      	add	sp, #12
 80183c6:	4770      	bx	lr
 80183c8:	2000002c 	.word	0x2000002c

080183cc <__swhatbuf_r>:
 80183cc:	b570      	push	{r4, r5, r6, lr}
 80183ce:	460c      	mov	r4, r1
 80183d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183d4:	2900      	cmp	r1, #0
 80183d6:	b096      	sub	sp, #88	@ 0x58
 80183d8:	4615      	mov	r5, r2
 80183da:	461e      	mov	r6, r3
 80183dc:	da0d      	bge.n	80183fa <__swhatbuf_r+0x2e>
 80183de:	89a3      	ldrh	r3, [r4, #12]
 80183e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80183e4:	f04f 0100 	mov.w	r1, #0
 80183e8:	bf14      	ite	ne
 80183ea:	2340      	movne	r3, #64	@ 0x40
 80183ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80183f0:	2000      	movs	r0, #0
 80183f2:	6031      	str	r1, [r6, #0]
 80183f4:	602b      	str	r3, [r5, #0]
 80183f6:	b016      	add	sp, #88	@ 0x58
 80183f8:	bd70      	pop	{r4, r5, r6, pc}
 80183fa:	466a      	mov	r2, sp
 80183fc:	f000 f848 	bl	8018490 <_fstat_r>
 8018400:	2800      	cmp	r0, #0
 8018402:	dbec      	blt.n	80183de <__swhatbuf_r+0x12>
 8018404:	9901      	ldr	r1, [sp, #4]
 8018406:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801840a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801840e:	4259      	negs	r1, r3
 8018410:	4159      	adcs	r1, r3
 8018412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018416:	e7eb      	b.n	80183f0 <__swhatbuf_r+0x24>

08018418 <__smakebuf_r>:
 8018418:	898b      	ldrh	r3, [r1, #12]
 801841a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801841c:	079d      	lsls	r5, r3, #30
 801841e:	4606      	mov	r6, r0
 8018420:	460c      	mov	r4, r1
 8018422:	d507      	bpl.n	8018434 <__smakebuf_r+0x1c>
 8018424:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018428:	6023      	str	r3, [r4, #0]
 801842a:	6123      	str	r3, [r4, #16]
 801842c:	2301      	movs	r3, #1
 801842e:	6163      	str	r3, [r4, #20]
 8018430:	b003      	add	sp, #12
 8018432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018434:	ab01      	add	r3, sp, #4
 8018436:	466a      	mov	r2, sp
 8018438:	f7ff ffc8 	bl	80183cc <__swhatbuf_r>
 801843c:	9f00      	ldr	r7, [sp, #0]
 801843e:	4605      	mov	r5, r0
 8018440:	4639      	mov	r1, r7
 8018442:	4630      	mov	r0, r6
 8018444:	f7ff fa52 	bl	80178ec <_malloc_r>
 8018448:	b948      	cbnz	r0, 801845e <__smakebuf_r+0x46>
 801844a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801844e:	059a      	lsls	r2, r3, #22
 8018450:	d4ee      	bmi.n	8018430 <__smakebuf_r+0x18>
 8018452:	f023 0303 	bic.w	r3, r3, #3
 8018456:	f043 0302 	orr.w	r3, r3, #2
 801845a:	81a3      	strh	r3, [r4, #12]
 801845c:	e7e2      	b.n	8018424 <__smakebuf_r+0xc>
 801845e:	89a3      	ldrh	r3, [r4, #12]
 8018460:	6020      	str	r0, [r4, #0]
 8018462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018466:	81a3      	strh	r3, [r4, #12]
 8018468:	9b01      	ldr	r3, [sp, #4]
 801846a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801846e:	b15b      	cbz	r3, 8018488 <__smakebuf_r+0x70>
 8018470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018474:	4630      	mov	r0, r6
 8018476:	f000 f81d 	bl	80184b4 <_isatty_r>
 801847a:	b128      	cbz	r0, 8018488 <__smakebuf_r+0x70>
 801847c:	89a3      	ldrh	r3, [r4, #12]
 801847e:	f023 0303 	bic.w	r3, r3, #3
 8018482:	f043 0301 	orr.w	r3, r3, #1
 8018486:	81a3      	strh	r3, [r4, #12]
 8018488:	89a3      	ldrh	r3, [r4, #12]
 801848a:	431d      	orrs	r5, r3
 801848c:	81a5      	strh	r5, [r4, #12]
 801848e:	e7cf      	b.n	8018430 <__smakebuf_r+0x18>

08018490 <_fstat_r>:
 8018490:	b538      	push	{r3, r4, r5, lr}
 8018492:	4d07      	ldr	r5, [pc, #28]	@ (80184b0 <_fstat_r+0x20>)
 8018494:	2300      	movs	r3, #0
 8018496:	4604      	mov	r4, r0
 8018498:	4608      	mov	r0, r1
 801849a:	4611      	mov	r1, r2
 801849c:	602b      	str	r3, [r5, #0]
 801849e:	f7e9 fb9b 	bl	8001bd8 <_fstat>
 80184a2:	1c43      	adds	r3, r0, #1
 80184a4:	d102      	bne.n	80184ac <_fstat_r+0x1c>
 80184a6:	682b      	ldr	r3, [r5, #0]
 80184a8:	b103      	cbz	r3, 80184ac <_fstat_r+0x1c>
 80184aa:	6023      	str	r3, [r4, #0]
 80184ac:	bd38      	pop	{r3, r4, r5, pc}
 80184ae:	bf00      	nop
 80184b0:	200097b8 	.word	0x200097b8

080184b4 <_isatty_r>:
 80184b4:	b538      	push	{r3, r4, r5, lr}
 80184b6:	4d06      	ldr	r5, [pc, #24]	@ (80184d0 <_isatty_r+0x1c>)
 80184b8:	2300      	movs	r3, #0
 80184ba:	4604      	mov	r4, r0
 80184bc:	4608      	mov	r0, r1
 80184be:	602b      	str	r3, [r5, #0]
 80184c0:	f7e9 fb9a 	bl	8001bf8 <_isatty>
 80184c4:	1c43      	adds	r3, r0, #1
 80184c6:	d102      	bne.n	80184ce <_isatty_r+0x1a>
 80184c8:	682b      	ldr	r3, [r5, #0]
 80184ca:	b103      	cbz	r3, 80184ce <_isatty_r+0x1a>
 80184cc:	6023      	str	r3, [r4, #0]
 80184ce:	bd38      	pop	{r3, r4, r5, pc}
 80184d0:	200097b8 	.word	0x200097b8

080184d4 <_sbrk_r>:
 80184d4:	b538      	push	{r3, r4, r5, lr}
 80184d6:	4d06      	ldr	r5, [pc, #24]	@ (80184f0 <_sbrk_r+0x1c>)
 80184d8:	2300      	movs	r3, #0
 80184da:	4604      	mov	r4, r0
 80184dc:	4608      	mov	r0, r1
 80184de:	602b      	str	r3, [r5, #0]
 80184e0:	f7e9 fba2 	bl	8001c28 <_sbrk>
 80184e4:	1c43      	adds	r3, r0, #1
 80184e6:	d102      	bne.n	80184ee <_sbrk_r+0x1a>
 80184e8:	682b      	ldr	r3, [r5, #0]
 80184ea:	b103      	cbz	r3, 80184ee <_sbrk_r+0x1a>
 80184ec:	6023      	str	r3, [r4, #0]
 80184ee:	bd38      	pop	{r3, r4, r5, pc}
 80184f0:	200097b8 	.word	0x200097b8

080184f4 <abort>:
 80184f4:	b508      	push	{r3, lr}
 80184f6:	2006      	movs	r0, #6
 80184f8:	f000 f85a 	bl	80185b0 <raise>
 80184fc:	2001      	movs	r0, #1
 80184fe:	f7e9 fb37 	bl	8001b70 <_exit>

08018502 <_realloc_r>:
 8018502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018506:	4607      	mov	r7, r0
 8018508:	4614      	mov	r4, r2
 801850a:	460d      	mov	r5, r1
 801850c:	b921      	cbnz	r1, 8018518 <_realloc_r+0x16>
 801850e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018512:	4611      	mov	r1, r2
 8018514:	f7ff b9ea 	b.w	80178ec <_malloc_r>
 8018518:	b92a      	cbnz	r2, 8018526 <_realloc_r+0x24>
 801851a:	f7ff f973 	bl	8017804 <_free_r>
 801851e:	4625      	mov	r5, r4
 8018520:	4628      	mov	r0, r5
 8018522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018526:	f000 f85f 	bl	80185e8 <_malloc_usable_size_r>
 801852a:	4284      	cmp	r4, r0
 801852c:	4606      	mov	r6, r0
 801852e:	d802      	bhi.n	8018536 <_realloc_r+0x34>
 8018530:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018534:	d8f4      	bhi.n	8018520 <_realloc_r+0x1e>
 8018536:	4621      	mov	r1, r4
 8018538:	4638      	mov	r0, r7
 801853a:	f7ff f9d7 	bl	80178ec <_malloc_r>
 801853e:	4680      	mov	r8, r0
 8018540:	b908      	cbnz	r0, 8018546 <_realloc_r+0x44>
 8018542:	4645      	mov	r5, r8
 8018544:	e7ec      	b.n	8018520 <_realloc_r+0x1e>
 8018546:	42b4      	cmp	r4, r6
 8018548:	4622      	mov	r2, r4
 801854a:	4629      	mov	r1, r5
 801854c:	bf28      	it	cs
 801854e:	4632      	movcs	r2, r6
 8018550:	f7ff f92b 	bl	80177aa <memcpy>
 8018554:	4629      	mov	r1, r5
 8018556:	4638      	mov	r0, r7
 8018558:	f7ff f954 	bl	8017804 <_free_r>
 801855c:	e7f1      	b.n	8018542 <_realloc_r+0x40>

0801855e <_raise_r>:
 801855e:	291f      	cmp	r1, #31
 8018560:	b538      	push	{r3, r4, r5, lr}
 8018562:	4605      	mov	r5, r0
 8018564:	460c      	mov	r4, r1
 8018566:	d904      	bls.n	8018572 <_raise_r+0x14>
 8018568:	2316      	movs	r3, #22
 801856a:	6003      	str	r3, [r0, #0]
 801856c:	f04f 30ff 	mov.w	r0, #4294967295
 8018570:	bd38      	pop	{r3, r4, r5, pc}
 8018572:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018574:	b112      	cbz	r2, 801857c <_raise_r+0x1e>
 8018576:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801857a:	b94b      	cbnz	r3, 8018590 <_raise_r+0x32>
 801857c:	4628      	mov	r0, r5
 801857e:	f000 f831 	bl	80185e4 <_getpid_r>
 8018582:	4622      	mov	r2, r4
 8018584:	4601      	mov	r1, r0
 8018586:	4628      	mov	r0, r5
 8018588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801858c:	f000 b818 	b.w	80185c0 <_kill_r>
 8018590:	2b01      	cmp	r3, #1
 8018592:	d00a      	beq.n	80185aa <_raise_r+0x4c>
 8018594:	1c59      	adds	r1, r3, #1
 8018596:	d103      	bne.n	80185a0 <_raise_r+0x42>
 8018598:	2316      	movs	r3, #22
 801859a:	6003      	str	r3, [r0, #0]
 801859c:	2001      	movs	r0, #1
 801859e:	e7e7      	b.n	8018570 <_raise_r+0x12>
 80185a0:	2100      	movs	r1, #0
 80185a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80185a6:	4620      	mov	r0, r4
 80185a8:	4798      	blx	r3
 80185aa:	2000      	movs	r0, #0
 80185ac:	e7e0      	b.n	8018570 <_raise_r+0x12>
	...

080185b0 <raise>:
 80185b0:	4b02      	ldr	r3, [pc, #8]	@ (80185bc <raise+0xc>)
 80185b2:	4601      	mov	r1, r0
 80185b4:	6818      	ldr	r0, [r3, #0]
 80185b6:	f7ff bfd2 	b.w	801855e <_raise_r>
 80185ba:	bf00      	nop
 80185bc:	2000002c 	.word	0x2000002c

080185c0 <_kill_r>:
 80185c0:	b538      	push	{r3, r4, r5, lr}
 80185c2:	4d07      	ldr	r5, [pc, #28]	@ (80185e0 <_kill_r+0x20>)
 80185c4:	2300      	movs	r3, #0
 80185c6:	4604      	mov	r4, r0
 80185c8:	4608      	mov	r0, r1
 80185ca:	4611      	mov	r1, r2
 80185cc:	602b      	str	r3, [r5, #0]
 80185ce:	f7e9 fabf 	bl	8001b50 <_kill>
 80185d2:	1c43      	adds	r3, r0, #1
 80185d4:	d102      	bne.n	80185dc <_kill_r+0x1c>
 80185d6:	682b      	ldr	r3, [r5, #0]
 80185d8:	b103      	cbz	r3, 80185dc <_kill_r+0x1c>
 80185da:	6023      	str	r3, [r4, #0]
 80185dc:	bd38      	pop	{r3, r4, r5, pc}
 80185de:	bf00      	nop
 80185e0:	200097b8 	.word	0x200097b8

080185e4 <_getpid_r>:
 80185e4:	f7e9 baac 	b.w	8001b40 <_getpid>

080185e8 <_malloc_usable_size_r>:
 80185e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185ec:	1f18      	subs	r0, r3, #4
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	bfbc      	itt	lt
 80185f2:	580b      	ldrlt	r3, [r1, r0]
 80185f4:	18c0      	addlt	r0, r0, r3
 80185f6:	4770      	bx	lr

080185f8 <_init>:
 80185f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185fa:	bf00      	nop
 80185fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185fe:	bc08      	pop	{r3}
 8018600:	469e      	mov	lr, r3
 8018602:	4770      	bx	lr

08018604 <_fini>:
 8018604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018606:	bf00      	nop
 8018608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801860a:	bc08      	pop	{r3}
 801860c:	469e      	mov	lr, r3
 801860e:	4770      	bx	lr
